- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/docker-mysql-more-topics.html](https://dev.mysql.com/doc/refman/8.0/en/docker-mysql-more-topics.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/docker-mysql-more-topics.html](https://dev.mysql.com/doc/refman/8.0/en/docker-mysql-more-topics.html)
- en: 2.5.6.2 More Topics on Deploying MySQL Server with Docker
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.5.6.2 使用 Docker 部署 MySQL 服务器的更多主题
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Most of the following sample commands have `container-registry.oracle.com/mysql/community-server`
    as the Docker image being used (like with the **docker pull** and **docker run**
    commands); change that if your image is from another repository—for example, replace
    it with `container-registry.oracle.com/mysql/enterprise-server` for MySQL Enterprise
    Edition images downloaded from the Oracle Container Registry (OCR), or `mysql/enterprise-server`
    for MySQL Enterprise Edition images downloaded from [My Oracle Support](https://support.oracle.com/).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下大部分示例命令使用 `container-registry.oracle.com/mysql/community-server` 作为 Docker
    镜像（比如 **docker pull** 和 **docker run** 命令）；如果你的镜像来自其他仓库，请进行更改，例如，用 `container-registry.oracle.com/mysql/enterprise-server`
    替换从 Oracle Container Registry (OCR) 下载的 MySQL Enterprise Edition 镜像，或者用 `mysql/enterprise-server`
    替换从 [My Oracle Support](https://support.oracle.com/) 下载的 MySQL Enterprise Edition
    镜像。
- en: '[The Optimized MySQL Installation for Docker](docker-mysql-more-topics.html#docker-optimized-installation
    "The Optimized MySQL Installation for Docker")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为 Docker 优化的 MySQL 安装](docker-mysql-more-topics.html#docker-optimized-installation
    "为 Docker 优化的 MySQL 安装")'
- en: '[Configuring the MySQL Server](docker-mysql-more-topics.html#docker-configuring-server
    "Configuring the MySQL Server")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[配置 MySQL 服务器](docker-mysql-more-topics.html#docker-configuring-server "配置
    MySQL 服务器")'
- en: '[Persisting Data and Configuration Changes](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "Persisting Data and Configuration Changes")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[持久化数据和配置更改](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "持久化数据和配置更改")'
- en: '[Running Additional Initialization Scripts](docker-mysql-more-topics.html#docker-additional-init
    "Running Additional Initialization Scripts")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运行额外的初始化脚本](docker-mysql-more-topics.html#docker-additional-init "运行额外的初始化脚本")'
- en: '[Connect to MySQL from an Application in Another Docker Container](docker-mysql-more-topics.html#docker-app-in-another-container
    "Connect to MySQL from an Application in Another Docker Container")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从另一个 Docker 容器中的应用连接到 MySQL](docker-mysql-more-topics.html#docker-app-in-another-container
    "从另一个 Docker 容器中的应用连接到 MySQL")'
- en: '[Server Error Log](docker-mysql-more-topics.html#docker-server-error-log "Server
    Error Log")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[服务器错误日志](docker-mysql-more-topics.html#docker-server-error-log "服务器错误日志")'
- en: '[Using MySQL Enterprise Backup with Docker](docker-mysql-more-topics.html#docker-meb
    "Using MySQL Enterprise Backup with Docker")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Docker 中使用 MySQL Enterprise Backup](docker-mysql-more-topics.html#docker-meb
    "在 Docker 中使用 MySQL Enterprise Backup")'
- en: '[Using mysqldump with Docker](docker-mysql-more-topics.html#docker-mysqldump
    "Using mysqldump with Docker")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Docker 中使用 mysqldump](docker-mysql-more-topics.html#docker-mysqldump "在
    Docker 中使用 mysqldump")'
- en: '[Known Issues](docker-mysql-more-topics.html#docker-known-issues "Known Issues")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[已知问题](docker-mysql-more-topics.html#docker-known-issues "已知问题")'
- en: '[Docker Environment Variables](docker-mysql-more-topics.html#docker-environment-variables
    "Docker Environment Variables")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Docker 环境变量](docker-mysql-more-topics.html#docker-environment-variables "Docker
    环境变量")'
- en: The Optimized MySQL Installation for Docker
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 为 Docker 优化的 MySQL 安装
- en: 'Docker images for MySQL are optimized for code size, which means they only
    include crucial components that are expected to be relevant for the majority of
    users who run MySQL instances in Docker containers. A MySQL Docker installation
    is different from a common, non-Docker installation in the following aspects:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 的 Docker 镜像经过了代码大小的优化，这意味着它们只包含了对于在 Docker 容器中运行 MySQL 实例的大多数用户来说是相关的关键组件。MySQL
    Docker 安装与常规的非 Docker 安装在以下方面有所不同：
- en: Only a limited number of binaries are included.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只包含有限数量的二进制文件。
- en: All binaries are stripped; they contain no debug information.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有二进制文件都经过了剥离；它们不包含调试信息。
- en: Warning
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Any software updates or installations users perform to the Docker container
    (including those for MySQL components) may conflict with the optimized MySQL installation
    created by the Docker image. Oracle does not provide support for MySQL products
    running in such an altered container, or a container created from an altered Docker
    image.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 用户对 Docker 容器执行的任何软件更新或安装（包括 MySQL 组件）可能与 Docker 镜像创建的优化 MySQL 安装发生冲突。Oracle
    不支持在这种被更改的容器中运行的 MySQL 产品，或者从被更改的 Docker 镜像创建的容器。
- en: Configuring the MySQL Server
  id: totrans-20
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 配置 MySQL 服务器
- en: 'When you start the MySQL Docker container, you can pass configuration options
    to the server through the **docker run** command. For example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动 MySQL Docker 容器时，可以通过 **docker run** 命令向服务器传递配置选项。例如：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The command starts the MySQL Server with `utf8mb4` as the default character
    set and `utf8mb4_col` as the default collation for databases.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令以 `utf8mb4` 作为默认字符集和 `utf8mb4_col` 作为数据库的默认排序规则启动 MySQL 服务器。
- en: Another way to configure the MySQL Server is to prepare a configuration file
    and mount it at the location of the server configuration file inside the container.
    See [Persisting Data and Configuration Changes](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "Persisting Data and Configuration Changes") for details.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 MySQL 服务器的另一种方法是准备一个配置文件，并将其挂载到容器内部服务器配置文件的位置。详细信息请参见 [持久化数据和配置更改](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "持久化数据和配置更改")。
- en: Persisting Data and Configuration Changes
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 持久化数据和配置更改
- en: 'Docker containers are in principle ephemeral, and any data or configuration
    are expected to be lost if the container is deleted or corrupted (see discussions
    [here](https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/)).
    [Docker volumes](https://docs.docker.com/engine/admin/volumes/volumes/) provides
    a mechanism to persist data created inside a Docker container. At its initialization,
    the MySQL Server container creates a Docker volume for the server data directory.
    The JSON output from the **docker inspect** command on the container includes
    a `Mount` key, whose value provides information on the data directory volume:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器原则上是短暂的，如果容器被删除或损坏，则预计任何数据或配置都将丢失（请参见[此处](https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/)的讨论）。[Docker
    卷](https://docs.docker.com/engine/admin/volumes/volumes/) 提供了一种机制来持久化在 Docker
    容器内创建的数据。在初始化时，MySQL 服务器容器为服务器数据目录创建一个 Docker 卷。容器上的 **docker inspect** 命令的 JSON
    输出包含一个 `Mount` 键，其值提供有关数据目录卷的信息：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The output shows that the source directory `/var/lib/docker/volumes/4f2d463cfc4bdd4baebcb098c97d7da3337195ed2c6572bc0b89f7e845d27652/_data`,
    in which data is persisted on the host, has been mounted at `/var/lib/mysql`,
    the server data directory inside the container.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，源目录 `/var/lib/docker/volumes/4f2d463cfc4bdd4baebcb098c97d7da3337195ed2c6572bc0b89f7e845d27652/_data`，其中数据在主机上持久化，已挂载到容器内部的
    `/var/lib/mysql`，即服务器数据目录。
- en: 'Another way to preserve data is to [bind-mount](https://docs.docker.com/engine/reference/commandline/service_create/#add-bind-mounts-volumes-or-memory-filesystems)
    a host directory using the `--mount` option when creating the container. The same
    technique can be used to persist the configuration of the server. The following
    command creates a MySQL Server container and bind-mounts both the data directory
    and the server configuration file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 保留数据的另一种方法是在创建容器时使用 `--mount` 选项 [绑定挂载](https://docs.docker.com/engine/reference/commandline/service_create/#add-bind-mounts-volumes-or-memory-filesystems)
    主机目录。相同的技术可以用于持久化服务器的配置。以下命令创建一个 MySQL 服务器容器，并同时绑定挂载数据目录和服务器配置文件：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The command mounts `*`path-on-host-machine/my.cnf`*` at ``/etc/my.cnf`` (the
    server configuration file inside the container), and `*`path-on-host-machine/datadir`*`
    at `/var/lib/mysql` (the data directory inside the container). The following conditions
    must be met for the bind-mounting to work:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将 `*`path-on-host-machine/my.cnf`*` 挂载到 ``/etc/my.cnf``（容器内部的服务器配置文件），并将
    `*`path-on-host-machine/datadir`*` 挂载到 `/var/lib/mysql`（容器内部的数据目录）。绑定挂载工作的前提条件如下：
- en: 'The configuration file `*`path-on-host-machine/my.cnf`*` must already exist,
    and it must contain the specification for starting the server by the user `mysql`:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件 `*`path-on-host-machine/my.cnf`*` 必须已经存在，并且必须包含由用户 `mysql` 启动服务器的规范：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can also include other server configuration options in the file.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还可以在文件中包含其他服务器配置选项。
- en: The data directory `*`path-on-host-machine/datadir`*` must already exist. For
    server initialization to happen, the directory must be empty. You can also mount
    a directory prepopulated with data and start the server with it; however, you
    must make sure you start the Docker container with the same configuration as the
    server that created the data, and any host files or directories required are mounted
    when starting the container.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据目录 `*`path-on-host-machine/datadir`*` 必须已经存在。为了进行服务器初始化，目录必须为空。您还可以挂载一个预先填充了数据的目录并启动服务器；但是，您必须确保使用与创建数据的服务器相同的配置启动
    Docker 容器，并在启动容器时挂载任何所需的主机文件或目录。
- en: Running Additional Initialization Scripts
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 运行额外的初始化脚本
- en: 'If there are any `.sh` or `.sql` scripts you want to run on the database immediately
    after it has been created, you can put them into a host directory and then mount
    the directory at `/docker-entrypoint-initdb.d/` inside the container. For example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有任何`.sh`或`.sql`脚本需要在数据库创建后立即运行，您可以将它们放入主机目录，然后将该目录挂载到容器内的`/docker-entrypoint-initdb.d/`。例如：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Connect to MySQL from an Application in Another Docker Container
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 从另一个Docker容器中的应用程序连接到MySQL
- en: 'By setting up a Docker network, you can allow multiple Docker containers to
    communicate with each other, so that a client application in another Docker container
    can access the MySQL Server in the server container. First, create a Docker network:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置一个Docker网络，您可以允许多个Docker容器相互通信，以便另一个Docker容器中的客户端应用程序可以访问服务器容器中的MySQL服务器。首先，创建一个Docker网络：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, when you are creating and starting the server and the client containers,
    use the `--network` option to put them on network you created. For example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在创建和启动服务器和客户端容器时，使用`--network`选项将它们放在您创建的网络上。例如：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `myapp1` container can then connect to the `mysql1` container with the
    `mysql1` hostname and vice versa, as Docker automatically sets up a DNS for the
    given container names. In the following example, we run the [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") client from inside the `myapp1`
    container to connect to host `mysql1` in its own container:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`myapp1`容器可以通过`mysql1`主机名连接到`mysql1`容器，反之亦然，因为Docker会自动为给定的容器名称设置DNS。在以下示例中，我们从`myapp1`容器内部运行[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")客户端，以连接到其自己容器中的主机`mysql1`：'
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For other networking techniques for containers, see the [Docker container networking](https://docs.docker.com/engine/userguide/networking/)
    section in the Docker Documentation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有关容器的其他网络技术，请参阅Docker文档中的[Docker容器网络](https://docs.docker.com/engine/userguide/networking/)部分。
- en: Server Error Log
  id: totrans-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 服务器错误日志
- en: 'When the MySQL Server is first started with your server container, a [server
    error log](error-log.html "7.4.2 The Error Log") is NOT generated if either of
    the following conditions is true:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次使用服务器容器启动MySQL服务器时，如果以下条件之一为真，则不会生成[服务器错误日志](error-log.html "7.4.2 错误日志")：
- en: A server configuration file from the host has been mounted, but the file does
    not contain the system variable [`log_error`](server-system-variables.html#sysvar_log_error)
    (see [Persisting Data and Configuration Changes](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "Persisting Data and Configuration Changes") on bind-mounting a server configuration
    file).
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从主机挂载了一个服务器配置文件，但该文件不包含系统变量[`log_error`](server-system-variables.html#sysvar_log_error)（参见[持久化数据和配置更改](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "持久化数据和配置更改")关于绑定挂载服务器配置文件）。
- en: A server configuration file from the host has not been mounted, but the Docker
    environment variable [`MYSQL_LOG_CONSOLE`](docker-mysql-more-topics.html#docker_var_mysql-log-console)
    is `true` (which is the variable's default state for MySQL 8.0 server containers).
    The MySQL Server's error log is then redirected to `stderr`, so that the error
    log goes into the Docker container's log and is viewable using the **docker logs
    *`mysqld-container`*** command.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未从主机挂载服务器配置文件，但Docker环境变量[`MYSQL_LOG_CONSOLE`](docker-mysql-more-topics.html#docker_var_mysql-log-console)为`true`（这是MySQL
    8.0服务器容器的默认状态）。然后，MySQL服务器的错误日志被重定向到`stderr`，因此错误日志进入Docker容器的日志，并可以使用**docker
    logs *`mysqld-container`***命令查看。
- en: To make MySQL Server generate an error log when either of the two conditions
    is true, use the [`--log-error`](server-options.html#option_mysqld_log-error)
    option to [configure the server](docker-mysql-more-topics.html#docker-configuring-server
    "Configuring the MySQL Server") to generate the error log at a specific location
    inside the container. To persist the error log, mount a host file at the location
    of the error log inside the container as explained in [Persisting Data and Configuration
    Changes](docker-mysql-more-topics.html#docker-persisting-data-configuration "Persisting
    Data and Configuration Changes"). However, you must make sure your MySQL Server
    inside its container has write access to the mounted host file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要使MySQL Server在以下两种情况之一为真时生成错误日志，请使用[`--log-error`](server-options.html#option_mysqld_log-error)选项来[配置服务器](docker-mysql-more-topics.html#docker-configuring-server
    "Configuring the MySQL Server")以在容器内的特定位置生成错误日志。要持久化错误日志，请按照[持久化数据和配置更改](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "Persisting Data and Configuration Changes")中的说明，在容器内的错误日志位置挂载主机文件。但是，您必须确保MySQL
    Server在其容器内具有对挂载主机文件的写访问权限。
- en: Using MySQL Enterprise Backup with Docker
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用Docker的MySQL企业备份
- en: '[MySQL Enterprise Backup](/doc/mysql-enterprise-backup/8.0/en/) is a commercially-licensed
    backup utility for MySQL Server, available with [MySQL Enterprise Edition](https://www.mysql.com/products/enterprise/).
    MySQL Enterprise Backup is included in the Docker installation of MySQL Enterprise
    Edition.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[MySQL企业备份](/doc/mysql-enterprise-backup/8.0/en/)是MySQL Server的商业许可备份实用程序，可在[MySQL企业版](https://www.mysql.com/products/enterprise/)中使用。MySQL企业备份包含在MySQL企业版的Docker安装中。'
- en: 'In the following example, we assume that you already have a MySQL Server running
    in a Docker container (see [Section 2.5.6.1, “Basic Steps for MySQL Server Deployment
    with Docker”](docker-mysql-getting-started.html "2.5.6.1 Basic Steps for MySQL
    Server Deployment with Docker") on how to start a MySQL Server instance with Docker).
    For MySQL Enterprise Backup to back up the MySQL Server, it must have access to
    the server''s data directory. This can be achieved by, for example, [bind-mounting
    a host directory on the data directory of the MySQL Server](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "Persisting Data and Configuration Changes") when you start the server:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们假设您已经在Docker容器中运行了一个MySQL Server（请参阅[Section 2.5.6.1，“使用Docker部署MySQL
    Server的基本步骤”](docker-mysql-getting-started.html "2.5.6.1 Basic Steps for MySQL
    Server Deployment with Docker")以了解如何使用Docker启动MySQL Server实例）。为了让MySQL企业备份备份MySQL
    Server，它必须能够访问服务器的数据目录。例如，可以通过在启动服务器时[将主机目录绑定到MySQL Server的数据目录](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "Persisting Data and Configuration Changes")来实现这一点：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With this command, the MySQL Server is started with a Docker image of the MySQL
    Enterprise Edition, and the host directory *`/path-on-host-machine/datadir/`*
    has been mounted onto the server's data directory (`/var/lib/mysql`) inside the
    server container. We also assume that, after the server has been started, the
    required privileges have also been set up for MySQL Enterprise Backup to access
    the server (see [Grant MySQL Privileges to Backup Administrator](/doc/mysql-enterprise-backup/8.0/en/mysqlbackup.privileges.html),
    for details). Use the following steps to back up and restore a MySQL Server instance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，MySQL Server将使用MySQL企业版的Docker镜像启动，并且主机目录*`/path-on-host-machine/datadir/`*已挂载到服务器容器内的数据目录(`/var/lib/mysql`)。我们还假设，在服务器启动后，已为MySQL企业备份设置了访问服务器所需权限（有关详细信息，请参见[授予MySQL备份管理员权限](/doc/mysql-enterprise-backup/8.0/en/mysqlbackup.privileges.html)）。按照以下步骤备份和恢复MySQL
    Server实例。
- en: 'To back up a MySQL Server instance running in a Docker container using MySQL
    Enterprise Backup with Docker, follow the steps listed here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Docker的MySQL企业备份备份在Docker容器中运行的MySQL Server实例，请按照这里列出的步骤操作：
- en: 'On the same host where the MySQL Server container is running, start another
    container with an image of MySQL Enterprise Edition to perform a back up with
    the MySQL Enterprise Backup command [`backup-to-image`](/doc/mysql-enterprise-backup/8.0/en/backup-commands-backup.html#option_meb_backup-to-image).
    Provide access to the server''s data directory using the bind mount we created
    in the last step. Also, mount a host directory (*`/path-on-host-machine/backups/`*
    in this example) onto the storage folder for backups in the container (`/data/backups`
    in the example) to persist the backups we are creating. Here is a sample command
    for this step, in which MySQL Enterprise Backup is started with a Docker image
    downloaded from [My Oracle Support](https://support.oracle.com/):'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行 MySQL 服务器容器的同一主机上，使用 MySQL 企业版镜像启动另一个容器，使用 MySQL 企业版备份命令 [`backup-to-image`](/doc/mysql-enterprise-backup/8.0/en/backup-commands-backup.html#option_meb_backup-to-image)
    执行备份。使用我们在上一步创建的绑定挂载访问服务器的数据目录。此外，将主机目录（*在此示例中为 `/path-on-host-machine/backups/`*）挂载到容器中用于存储备份的存储文件夹（在示例中为
    `/data/backups`）以持久保存我们正在创建的备份。以下是执行此步骤的示例命令，其中使用从 [My Oracle Support](https://support.oracle.com/)
    下载的 Docker 镜像启动 MySQL 企业版备份：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It is important to check the end of the output by **mysqlbackup** to make sure
    the backup has been completed successfully.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要的是通过 **mysqlbackup** 的输出末尾检查备份是否已成功完成。
- en: 'The container exits once the backup job is finished and, with the `--rm` option
    used to start it, it is removed after it exits. An image backup has been created,
    and can be found in the host directory mounted in the last step for storing backups,
    as shown here:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦备份作业完成，容器就会退出，并且使用 `--rm` 选项启动时，容器在退出后会被删除。已经创建了一个镜像备份，并且可以在最后一步挂载备份存储的主机目录中找到，如下所示：
- en: '[PRE11]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To restore a MySQL Server instance in a Docker container using MySQL Enterprise
    Backup with Docker, follow the steps listed here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Docker 容器中使用 MySQL 企业版备份还原 MySQL 服务器实例，请按照这里列出的步骤进行操作：
- en: 'Stop the MySQL Server container, which also stops the MySQL Server running
    inside:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止 MySQL 服务器容器，这也会停止运行在其中的 MySQL 服务器：
- en: '[PRE12]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On the host, delete all contents in the bind mount for the MySQL Server data
    directory:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机上，删除 MySQL 服务器数据目录的绑定挂载中的所有内容：
- en: '[PRE13]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Start a container with an image of MySQL Enterprise Edition to perform the
    restore with the MySQL Enterprise Backup command [`copy-back-and-apply-log`](/doc/mysql-enterprise-backup/8.0/en/backup-commands-restore.html#option_meb_copy-back-and-apply-log).
    Bind-mount the server''s data directory and the storage folder for the backups,
    like what we did when we backed up the server:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 MySQL 企业版镜像启动一个容器，使用 MySQL 企业版备份命令 [`copy-back-and-apply-log`](/doc/mysql-enterprise-backup/8.0/en/backup-commands-restore.html#option_meb_copy-back-and-apply-log)
    执行还原操作。像我们备份服务器时所做的那样，将服务器的数据目录和备份存储文件夹进行绑定挂载：
- en: '[PRE14]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The container exits once the backup job is finished and, with the `--rm` option
    used when starting it, it is removed after it exits.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦备份作业完成，容器就会退出，并且使用 `--rm` 选项启动时，容器在退出后会被删除。
- en: 'Restart the server container, which also restarts the restored server, using
    the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令重新启动服务器容器，这也会重新启动已还原的服务器：
- en: '[PRE15]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or, start a new MySQL Server on the restored data directory, as shown here:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，在还原的数据目录上启动一个新的 MySQL 服务器，如下所示：
- en: '[PRE16]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Log on to the server to check that the server is running with the restored data.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 登录服务器检查服务器是否正在运行并使用还原的数据。
- en: Using [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    with Docker
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用 [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    与 Docker
- en: Besides [using MySQL Enterprise Backup to back up a MySQL Server running in
    a Docker container](docker-mysql-more-topics.html#docker-meb "Using MySQL Enterprise
    Backup with Docker"), you can perform a logical backup of your server by using
    the [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    utility, run inside a Docker container.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 除了[在 Docker 容器中运行的 MySQL 服务器使用 MySQL 企业版备份备份](docker-mysql-more-topics.html#docker-meb
    "Using MySQL Enterprise Backup with Docker")外，您还可以通过在 Docker 容器中运行的 [**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program") 实用程序执行逻辑备份。
- en: 'The following instructions assume that you already have a MySQL Server running
    in a Docker container and, when the container was first started, a host directory
    *`/path-on-host-machine/datadir/`* has been mounted onto the server''s data directory
    `/var/lib/mysql` (see [bind-mounting a host directory on the data directory of
    the MySQL Server](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "Persisting Data and Configuration Changes") for details), which contains the
    Unix socket file by which [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A
    Database Backup Program") and [**mysql**](mysql.html "6.5.1 mysql — The MySQL
    Command-Line Client") can connect to the server. We also assume that, after the
    server has been started, a user with the proper privileges (`admin` in this example)
    has been created, with which [**mysqldump**](mysqldump.html "6.5.4 mysqldump —
    A Database Backup Program") can access the server. Use the following steps to
    back up and restore MySQL Server data:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下说明假定您已经在Docker容器中运行了一个MySQL服务器，并且在容器首次启动时，已经将主机目录*`/path-on-host-machine/datadir/`*挂载到服务器的数据目录`/var/lib/mysql`上（有关详细信息，请参见[将主机目录绑定到MySQL服务器数据目录上](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "持久化数据和配置更改")），该目录包含Unix套接字文件，通过该文件[**mysqldump**](mysqldump.html "6.5.4 mysqldump
    — A Database Backup Program")和[**mysql**](mysql.html "6.5.1 mysql — The MySQL
    Command-Line Client")可以连接到服务器。我们还假设，在服务器启动后，已经创建了一个具有适当权限（在本例中为`admin`）的用户，[**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program")可以使用该用户访问服务器。请使用以下步骤备份和恢复MySQL服务器数据：
- en: '*Backing up MySQL Server data using [**mysqldump**](mysqldump.html "6.5.4 mysqldump
    — A Database Backup Program") with Docker*:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用Docker使用[**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup
    Program")备份MySQL服务器数据*：'
- en: 'On the same host where the MySQL Server container is running, start another
    container with an image of MySQL Server to perform a backup with the [**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program") utility (see documentation of the
    utility for its functionality, options, and limitations). Provide access to the
    server''s data directory by bind mounting *`/path-on-host-machine/datadir/`*.
    Also, mount a host directory (*`/path-on-host-machine/backups/`* in this example)
    onto a storage folder for backups inside the container (`/data/backups` is used
    in this example) to persist the backups you are creating. Here is a sample command
    for backing up all databases on the server using this setup:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行MySQL服务器容器的同一主机上，启动另一个容器，其中包含MySQL服务器的镜像，以使用[**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program")实用程序执行备份（请参阅该实用程序的文档以了解其功能、选项和限制）。通过绑定挂载*`/path-on-host-machine/datadir/`*提供对服务器数据目录的访问。此外，将主机目录（在本例中为*`/path-on-host-machine/backups/`*）挂载到容器内用于存储备份的存储文件夹（在本例中使用`/data/backups`）以持久保存您创建的备份。以下是使用此设置备份服务器上所有数据库的示例命令：
- en: '[PRE17]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the command, the `--entrypoint` option is used so that the system shell is
    invoked after the container is started, and the `-c` option is used to specify
    the [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    command to be run in the shell, whose output is redirected to the file `all-databases.sql`
    in the backup directory.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在命令中，使用`--entrypoint`选项启动容器后调用系统shell，并使用`-c`选项指定要在shell中运行的[**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program")命令，其输出被重定向到备份目录中的文件`all-databases.sql`。
- en: 'The container exits once the backup job is finished and, with the `--rm` option
    used to start it, it is removed after it exits. A logical backup been created,
    and can be found in the host directory mounted for storing the backup, as shown
    here:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦备份作业完成，容器就会退出，并且使用`--rm`选项启动后，容器在退出后将被删除。已创建了一个逻辑备份，并且可以在用于存储备份的主机目录中找到，如下所示：
- en: '[PRE18]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Restoring MySQL Server data using [**mysqldump**](mysqldump.html "6.5.4 mysqldump
    — A Database Backup Program") with Docker*:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用Docker使用[**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup
    Program")恢复MySQL服务器数据*：'
- en: Make sure you have a MySQL Server running in a container, onto which you want
    your backed-up data to be restored.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您在容器中运行了一个MySQL服务器，您希望将备份数据还原到该服务器上。
- en: 'Start a container with an image of MySQL Server to perform the restore with
    a [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") client.
    Bind-mount the server''s data directory, as well as the storage folder that contains
    your backup:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个包含MySQL服务器镜像的容器，使用[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")客户端执行恢复操作。绑定挂载服务器的数据目录，以及包含您备份的存储文件夹：
- en: '[PRE19]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The container exits once the backup job is finished and, with the `--rm` option
    used when starting it, it is removed after it exits.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦备份作业完成，容器就会退出，并且在启动时使用`--rm`选项后，容器在退出后会被删除。
- en: Log on to the server to check that the restored data is now on the server.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录服务器检查已恢复的数据是否已在服务器上。
- en: Known Issues
  id: totrans-92
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 已知问题
- en: When using the server system variable [`audit_log_file`](audit-log-reference.html#sysvar_audit_log_file)
    to configure the audit log file name, use the `loose` [option modifier](option-modifiers.html
    "6.2.2.4 Program Option Modifiers") with it; otherwise, Docker cannot start the
    server.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用服务器系统变量[`audit_log_file`](audit-log-reference.html#sysvar_audit_log_file)来配置审计日志文件名时，请使用`loose`
    [选项修饰符](option-modifiers.html "6.2.2.4 程序选项修饰符")；否则，Docker无法启动服务器。
- en: Docker Environment Variables
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Docker环境变量
- en: When you create a MySQL Server container, you can configure the MySQL instance
    by using the `--env` option (short form `-e`) and specifying one or more environment
    variables. No server initialization is performed if the mounted data directory
    is not empty, in which case setting any of these variables has no effect (see
    [Persisting Data and Configuration Changes](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "Persisting Data and Configuration Changes")), and no existing contents of the
    directory, including server settings, are modified during container startup.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建MySQL服务器容器时，可以使用`--env`选项（简写为`-e`）并指定一个或多个环境变量来配置MySQL实例。如果挂载的数据目录不为空，则不会执行服务器初始化，在这种情况下设置这些变量之一也没有效果（参见[持久化数据和配置更改](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "持久化数据和配置更改")），并且在容器启动期间不会修改目录的任何现有内容，包括服务器设置。
- en: 'Environment variables which can be used to configure a MySQL instance are listed
    here:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于配置MySQL实例的环境变量列在这里：
- en: The boolean variables including [`MYSQL_RANDOM_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_random_root_password),
    [`MYSQL_ONETIME_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_onetime_password),
    [`MYSQL_ALLOW_EMPTY_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-allow-empty-password),
    and [`MYSQL_LOG_CONSOLE`](docker-mysql-more-topics.html#docker_var_mysql-log-console)
    are made true by setting them with any strings of nonzero lengths. Therefore,
    setting them to, for example, “0”, “false”, or “no” does not make them false,
    but actually makes them true. This is a known issue.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括[`MYSQL_RANDOM_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_random_root_password)、[`MYSQL_ONETIME_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_onetime_password)、[`MYSQL_ALLOW_EMPTY_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-allow-empty-password)和[`MYSQL_LOG_CONSOLE`](docker-mysql-more-topics.html#docker_var_mysql-log-console)在内的布尔变量通过将它们设置为任何非零长度的字符串来设为真。因此，将它们设置为“0”、“false”或“no”并不会使它们为假，而实际上会使它们为真。这是一个已知问题。
- en: '[`MYSQL_RANDOM_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_random_root_password):
    When this variable is true (which is its default state, unless [`MYSQL_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-root-password)
    is set or [`MYSQL_ALLOW_EMPTY_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-allow-empty-password)
    is set to true), a random password for the server''s root user is generated when
    the Docker container is started. The password is printed to `stdout` of the container
    and can be found by looking at the container’s log (see [Starting a MySQL Server
    Instance](docker-mysql-getting-started.html#docker-starting-mysql-server "Starting
    a MySQL Server Instance")).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MYSQL_RANDOM_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_random_root_password)：当此变量为真时（这是其默认状态，除非设置了[`MYSQL_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-root-password)或[`MYSQL_ALLOW_EMPTY_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-allow-empty-password)为真），在启动Docker容器时会为服务器的root用户生成一个随机密码。密码会打印到容器的`stdout`中，并且可以通过查看容器的日志（参见[启动MySQL服务器实例](docker-mysql-getting-started.html#docker-starting-mysql-server
    "启动MySQL服务器实例")）找到。'
- en: '[`MYSQL_ONETIME_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_onetime_password):
    When the variable is true (which is its default state, unless [`MYSQL_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-root-password)
    is set or [`MYSQL_ALLOW_EMPTY_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-allow-empty-password)
    is set to true), the root user''s password is set as expired and must be changed
    before MySQL can be used normally.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MYSQL_ONETIME_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_onetime_password):
    当该变量为true（这是默认状态，除非设置了[`MYSQL_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-root-password)或[`MYSQL_ALLOW_EMPTY_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-allow-empty-password)为true），root用户的密码将被设置为过期，必须在MySQL可以正常使用之前更改。'
- en: '[`MYSQL_DATABASE`](docker-mysql-more-topics.html#docker_var_mysql_database):
    This variable allows you to specify the name of a database to be created on image
    startup. If a user name and a password are supplied with [`MYSQL_USER`](docker-mysql-more-topics.html#docker_var_mysql_user_password)
    and [`MYSQL_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_user_password),
    the user is created and granted superuser access to this database (corresponding
    to `GRANT ALL`). The specified database is created by a [CREATE DATABASE IF NOT
    EXIST](create-database.html "15.1.12 CREATE DATABASE Statement") statement, so
    that the variable has no effect if the database already exists.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MYSQL_DATABASE`](docker-mysql-more-topics.html#docker_var_mysql_database):
    此变量允许您在镜像启动时指定要创建的数据库的名称。如果使用[`MYSQL_USER`](docker-mysql-more-topics.html#docker_var_mysql_user_password)和[`MYSQL_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_user_password)提供了用户名和密码，则将创建用户并授予该数据库的超级用户访问权限（对应于`GRANT
    ALL`）。指定的数据库是通过[CREATE DATABASE IF NOT EXIST](create-database.html "15.1.12 CREATE
    DATABASE Statement")语句创建的，因此如果数据库已经存在，则该变量不起作用。'
- en: '[`MYSQL_USER`](docker-mysql-more-topics.html#docker_var_mysql_user_password),
    [`MYSQL_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_user_password):
    These variables are used in conjunction to create a user and set that user''s
    password, and the user is granted superuser permissions for the database specified
    by the [`MYSQL_DATABASE`](docker-mysql-more-topics.html#docker_var_mysql_database)
    variable. Both [`MYSQL_USER`](docker-mysql-more-topics.html#docker_var_mysql_user_password)
    and [`MYSQL_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_user_password)
    are required for a user to be created—if any of the two variables is not set,
    the other is ignored. If both variables are set but [`MYSQL_DATABASE`](docker-mysql-more-topics.html#docker_var_mysql_database)
    is not, the user is created without any privileges.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MYSQL_USER`](docker-mysql-more-topics.html#docker_var_mysql_user_password),
    [`MYSQL_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_user_password):
    这些变量一起用于创建用户并设置该用户的密码，用户被授予指定由[`MYSQL_DATABASE`](docker-mysql-more-topics.html#docker_var_mysql_database)变量的数据库的超级用户权限。要创建用户，[`MYSQL_USER`](docker-mysql-more-topics.html#docker_var_mysql_user_password)和[`MYSQL_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_user_password)都是必需的
    - 如果两个变量中的任何一个未设置，则另一个将被忽略。如果两个变量都设置了但[`MYSQL_DATABASE`](docker-mysql-more-topics.html#docker_var_mysql_database)没有设置，则创建用户时不授予任何权限。'
- en: Note
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: There is no need to use this mechanism to create the root superuser, which is
    created by default with the password set by either one of the mechanisms discussed
    in the descriptions for [`MYSQL_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-root-password)
    and [`MYSQL_RANDOM_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_random_root_password),
    unless [`MYSQL_ALLOW_EMPTY_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-allow-empty-password)
    is true.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不需要使用此机制来创建默认情况下使用[`MYSQL_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-root-password)和[`MYSQL_RANDOM_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_random_root_password)中讨论的任一机制设置密码的根超级用户，除非[`MYSQL_ALLOW_EMPTY_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-allow-empty-password)为true。
- en: '[`MYSQL_ROOT_HOST`](docker-mysql-more-topics.html#docker_var_mysql-root-host):
    By default, MySQL creates the `''root''@''localhost''` account. This account can
    only be connected to from inside the container as described in [Connecting to
    MySQL Server from within the Container](docker-mysql-getting-started.html#docker-connecting-within-container
    "Connecting to MySQL Server from within the Container"). To allow root connections
    from other hosts, set this environment variable. For example, the value `172.17.0.1`,
    which is the default Docker gateway IP, allows connections from the host machine
    that runs the container. The option accepts only one entry, but wildcards are
    allowed (for example, `MYSQL_ROOT_HOST=172.*.*.*` or `MYSQL_ROOT_HOST=%`).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MYSQL_ROOT_HOST`](docker-mysql-more-topics.html#docker_var_mysql-root-host)：默认情况下，MySQL创建`''root''@''localhost''`帐户。此帐户只能从容器内部连接，如[从容器内部连接到MySQL服务器](docker-mysql-getting-started.html#docker-connecting-within-container
    "Connecting to MySQL Server from within the Container")中所述。要允许来自其他主机的root连接，请设置此环境变量。例如，值`172.17.0.1`，这是默认的Docker网关IP，允许来自运行容器的主机机器的连接。该选项只接受一个条目，但允许使用通配符（例如，`MYSQL_ROOT_HOST=172.*.*.*`或`MYSQL_ROOT_HOST=%`）。'
- en: '[`MYSQL_LOG_CONSOLE`](docker-mysql-more-topics.html#docker_var_mysql-log-console):
    When the variable is true (which is its default state for MySQL 8.0 server containers),
    the MySQL Server''s error log is redirected to `stderr`, so that the error log
    goes into the Docker container''s log and is viewable using the **docker logs
    *`mysqld-container`*** command.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MYSQL_LOG_CONSOLE`](docker-mysql-more-topics.html#docker_var_mysql-log-console)：当变量为true（对于MySQL
    8.0服务器容器而言，这是其默认状态）时，MySQL服务器的错误日志被重定向到`stderr`，因此错误日志进入Docker容器的日志，并且可以使用**docker
    logs *`mysqld-container`***命令查看。'
- en: Note
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The variable has no effect if a server configuration file from the host has
    been mounted (see [Persisting Data and Configuration Changes](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "Persisting Data and Configuration Changes") on bind-mounting a configuration
    file).
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果主机已挂载服务器配置文件（参见[Persisting Data and Configuration Changes](docker-mysql-more-topics.html#docker-persisting-data-configuration
    "Persisting Data and Configuration Changes")中的绑定挂载配置文件），则该变量不起作用。
- en: '[`MYSQL_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-root-password):
    This variable specifies a password that is set for the MySQL root account.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MYSQL_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-root-password)：此变量指定为MySQL
    root帐户设置的密码。'
- en: Warning
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: Setting the MySQL root user password on the command line is insecure. As an
    alternative to specifying the password explicitly, you can set the variable with
    a container file path for a password file, and then mount a file from your host
    that contains the password at the container file path. This is still not very
    secure, as the location of the password file is still exposed. It is preferable
    to use the default settings of [`MYSQL_RANDOM_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_random_root_password)
    and [`MYSQL_ONETIME_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_onetime_password)
    both being true.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在命令行上设置MySQL root用户密码是不安全的。作为明确指定密码的替代方案，您可以设置一个容器文件路径的变量，用于密码文件，然后挂载来自主机的包含密码的文件到容器文件路径。这仍然不是非常安全的，因为密码文件的位置仍然暴露。最好使用[`MYSQL_RANDOM_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_random_root_password)和[`MYSQL_ONETIME_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_onetime_password)的默认设置，两者都设置为true。
- en: '[`MYSQL_ALLOW_EMPTY_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-allow-empty-password).
    Set it to true to allow the container to be started with a blank password for
    the root user.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MYSQL_ALLOW_EMPTY_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql-allow-empty-password)。将其设置为true以允许使用空密码启动容器以用于root用户。'
- en: Warning
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: Setting this variable to true is insecure, because it is going to leave your
    MySQL instance completely unprotected, allowing anyone to gain complete superuser
    access. It is preferable to use the default settings of [`MYSQL_RANDOM_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_random_root_password)
    and [`MYSQL_ONETIME_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_onetime_password)
    both being true.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将此变量设置为true是不安全的，因为它将使您的MySQL实例完全无保护，允许任何人获得完全的超级用户访问权限。最好使用[`MYSQL_RANDOM_ROOT_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_random_root_password)和[`MYSQL_ONETIME_PASSWORD`](docker-mysql-more-topics.html#docker_var_mysql_onetime_password)的默认设置，两者都设置为true。
