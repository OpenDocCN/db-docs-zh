- en: 10.5.4 Optimizing InnoDB Redo Logging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.5.4 优化 InnoDB 重做日志
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-logging.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-logging.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-logging.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-logging.html)
- en: 'Consider the following guidelines for optimizing redo logging:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下优化重做日志记录的准则：
- en: Increase the size of your redo log files. When `InnoDB` has written redo log
    files full, it must write the modified contents of the buffer pool to disk in
    a [checkpoint](glossary.html#glos_checkpoint "checkpoint"). Small redo log files
    cause many unnecessary disk writes.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加重做日志文件的大小。当 `InnoDB` 写满重做日志文件时，必须将缓冲池的修改内容写入磁盘中的一个[检查点](glossary.html#glos_checkpoint
    "检查点")。较小的重做日志文件会导致许多不必要的磁盘写入。
- en: From MySQL 8.0.30, the redo log file size is determined by the [`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)
    setting. `InnoDB` tries to maintain 32 redo log files of the same size, with each
    file equal to 1/32 * `innodb_redo_log_capacity`. Therefore, changing the `innodb_redo_log_capacity`
    setting changes the size of the redo log files.
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.30 开始，重做日志文件大小由 [`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)
    设置确定。`InnoDB` 尝试维护相同大小的 32 个重做日志文件，每个文件大小等于 1/32 * `innodb_redo_log_capacity`。因此，更改
    `innodb_redo_log_capacity` 设置会改变重做日志文件的大小。
- en: Before MySQL 8.0.30, the size and number of redo log files are configured using
    the [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    and [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    variables.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.30 之前，重做日志文件的大小和数量是使用 [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    和 [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    变量进行配置的。
- en: For information about modifying your redo log file configuration, see [Section 17.6.5,
    “Redo Log”](innodb-redo-log.html "17.6.5 Redo Log").
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关修改重做日志文件配置的信息，请参见 [第 17.6.5 节，“重做日志”](innodb-redo-log.html "17.6.5 重做日志")。
- en: Consider increasing the size of the [log buffer](glossary.html#glos_log_buffer
    "log buffer"). A large log buffer enables large [transactions](glossary.html#glos_transaction
    "transaction") to run without a need to write the log to disk before the transactions
    [commit](glossary.html#glos_commit "commit"). Thus, if you have transactions that
    update, insert, or delete many rows, making the log buffer larger saves disk I/O.
    Log buffer size is configured using the [`innodb_log_buffer_size`](innodb-parameters.html#sysvar_innodb_log_buffer_size)
    configuration option, which can be configured dynamically in MySQL 8.0.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑增加 [日志缓冲区](glossary.html#glos_log_buffer "日志缓冲区") 的大小。较大的日志缓冲区使大型[事务](glossary.html#glos_transaction
    "事务")能够在提交之前运行而无需将日志写入磁盘。因此，如果您有更新、插入或删除许多行的事务，使日志缓冲区更大可以节省磁盘 I/O。日志缓冲区大小通过 [`innodb_log_buffer_size`](innodb-parameters.html#sysvar_innodb_log_buffer_size)
    配置选项进行配置，在 MySQL 8.0 中可以动态配置。
- en: Configure the [`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    configuration option to avoid “read-on-write”. This option defines the write-ahead
    block size for the redo log. Set [`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    to match the operating system or file system cache block size. Read-on-write occurs
    when redo log blocks are not entirely cached to the operating system or file system
    due to a mismatch between write-ahead block size for the redo log and operating
    system or file system cache block size.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 [`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    配置选项以避免“读写”。此选项定义了重做日志的预写块大小。将 [`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    设置为匹配操作系统或文件系统缓存块大小。读写发生在由于重做日志的预写块大小与操作系统或文件系统缓存块大小不匹配而导致重做日志块未完全缓存到操作系统或文件系统时。
- en: Valid values for [`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    are multiples of the `InnoDB` log file block size (2^n). The minimum value is
    the `InnoDB` log file block size (512). Write-ahead does not occur when the minimum
    value is specified. The maximum value is equal to the [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    value. If you specify a value for [`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    that is larger than the [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    value, the [`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    setting is truncated to the [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    value.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    的有效值是 `InnoDB` 日志文件块大小的倍数（2^n）。最小值为 `InnoDB` 日志文件块大小（512）。当指定最小值时，不会发生预写。最大值等于
    [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size) 的值。如果指定的值大于
    [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size) 的值，则 [`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    设置将被截断为 [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size) 的值。'
- en: Setting the [`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    value too low in relation to the operating system or file system cache block size
    results in read-on-write. Setting the value too high may have a slight impact
    on `fsync` performance for log file writes due to several blocks being written
    at once.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将 [`innodb_log_write_ahead_size`](innodb-parameters.html#sysvar_innodb_log_write_ahead_size)
    的值设置得太低，与操作系统或文件系统缓存块大小相比，会导致读写。将值设置得太高可能会对日志文件写入的 `fsync` 性能产生轻微影响，因为会一次写入多个块。
- en: MySQL 8.0.11 introduced dedicated log writer threads for writing redo log records
    from the log buffer to the system buffers and flushing the system buffers to the
    redo log files. Previously, individual user threads were responsible those tasks.
    As of MySQL 8.0.22, you can enable or disable log writer threads using the [`innodb_log_writer_threads`](innodb-parameters.html#sysvar_innodb_log_writer_threads)
    variable. Dedicated log writer threads can improve performance on high-concurrency
    systems, but for low-concurrency systems, disabling dedicated log writer threads
    provides better performance.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8.0.11 引入了专用的日志写入线程，用于将重做日志记录从日志缓冲区写入系统缓冲区并将系统缓冲区刷新到重做日志文件。以前，各个用户线程负责这些任务。从
    MySQL 8.0.22 开始，您可以使用 [`innodb_log_writer_threads`](innodb-parameters.html#sysvar_innodb_log_writer_threads)
    变量启用或禁用日志写入线程。专用的日志写入线程可以提高高并发系统的性能，但对于低并发系统，禁用专用的日志写入线程可以提供更好的性能。
- en: Optimize the use of spin delay by user threads waiting for flushed redo. Spin
    delay helps reduce latency. During periods of low concurrency, reducing latency
    may be less of a priority, and avoiding the use of spin delay during these periods
    may reduce energy consumption. During periods of high concurrency, you may want
    to avoid expending processing power on spin delay so that it can be used for other
    work. The following system variables permit setting high and low watermark values
    that define boundaries for the use of spin delay.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过用户线程优化等待刷新重做的自旋延迟的使用。自旋延迟有助于减少延迟。在低并发期间，减少延迟可能不是首要任务，避免在这些时期使用自旋延迟可能会降低能耗。在高并发期间，您可能希望避免在自旋延迟上消耗处理能力，以便用于其他工作。以下系统变量允许设置定义自旋延迟使用边界的高水位线和低水位线值。
- en: '[`innodb_log_wait_for_flush_spin_hwm`](innodb-parameters.html#sysvar_innodb_log_wait_for_flush_spin_hwm):
    Defines the maximum average log flush time beyond which user threads no longer
    spin while waiting for flushed redo. The default value is 400 microseconds.'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_wait_for_flush_spin_hwm`](innodb-parameters.html#sysvar_innodb_log_wait_for_flush_spin_hwm)：定义了超过该值的最大平均日志刷新时间，用户线程在等待刷新的重做时不再自旋。默认值为
    400 微秒。'
- en: '[`innodb_log_spin_cpu_abs_lwm`](innodb-parameters.html#sysvar_innodb_log_spin_cpu_abs_lwm):
    Defines the minimum amount of CPU usage below which user threads no longer spin
    while waiting for flushed redo. The value is expressed as a sum of CPU core usage.
    For example, The default value of 80 is 80% of a single CPU core. On a system
    with a multi-core processor, a value of 150 represents 100% usage of one CPU core
    plus 50% usage of a second CPU core.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_spin_cpu_abs_lwm`](innodb-parameters.html#sysvar_innodb_log_spin_cpu_abs_lwm):
    定义了在刷新重做时等待时，用户线程不再自旋的最低 CPU 使用量。该值表示为 CPU 核使用量的总和。例如，默认值为 80，即一个 CPU 核的 80%。在具有多核处理器的系统上，值为
    150 表示一个 CPU 核的 100% 使用量加上第二个 CPU 核的 50% 使用量。'
- en: '[`innodb_log_spin_cpu_pct_hwm`](innodb-parameters.html#sysvar_innodb_log_spin_cpu_pct_hwm):
    Defines the maximum amount of CPU usage above which user threads no longer spin
    while waiting for flushed redo. The value is expressed as a percentage of the
    combined total processing power of all CPU cores. The default value is 50%. For
    example, 100% usage of two CPU cores is 50% of the combined CPU processing power
    on a server with four CPU cores.'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_spin_cpu_pct_hwm`](innodb-parameters.html#sysvar_innodb_log_spin_cpu_pct_hwm):
    定义了在刷新重做时等待时，用户线程不再自旋的最大 CPU 使用量。该值表示为所有 CPU 核的总处理能力的百分比。默认值为 50%。例如，在具有四个 CPU
    核的服务器上，两个 CPU 核的 100% 使用量是所有 CPU 处理能力的 50%。'
- en: The [`innodb_log_spin_cpu_pct_hwm`](innodb-parameters.html#sysvar_innodb_log_spin_cpu_pct_hwm)
    configuration option respects processor affinity. For example, if a server has
    48 cores but the [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server") process
    is pinned to only four CPU cores, the other 44 CPU cores are ignored.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`innodb_log_spin_cpu_pct_hwm`](innodb-parameters.html#sysvar_innodb_log_spin_cpu_pct_hwm)
    配置选项遵守处理器亲和性。例如，如果服务器有 48 个核心，但 [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL
    Server") 进程只固定在四个 CPU 核心上，其他 44 个 CPU 核心将被忽略。'
