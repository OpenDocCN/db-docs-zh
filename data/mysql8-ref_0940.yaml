- en: 15.2.4 EXCEPT Clause
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.2.4 EXCEPT子句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/except.html](https://dev.mysql.com/doc/refman/8.0/en/except.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/except.html](https://dev.mysql.com/doc/refman/8.0/en/except.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`EXCEPT`](except.html "15.2.4 EXCEPT Clause") limits the result from the first
    query block to those rows which are (also) not found in the second. As with [`UNION`](union.html
    "15.2.18 UNION Clause") and [`INTERSECT`](intersect.html "15.2.8 INTERSECT Clause"),
    either query block can make use of any of [`SELECT`](select.html "15.2.13 SELECT
    Statement"), [`TABLE`](table.html "15.2.16 TABLE Statement"), or [`VALUES`](values.html
    "15.2.19 VALUES Statement"). An example using the tables `a`, `b`, and `c` defined
    in [Section 15.2.8, “INTERSECT Clause”](intersect.html "15.2.8 INTERSECT Clause"),
    is shown here:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`EXCEPT`](except.html "15.2.4 EXCEPT Clause")将第一个查询块的结果限制为那些在第二个查询块中（也）找不到的行。与[`UNION`](union.html
    "15.2.18 UNION Clause")和[`INTERSECT`](intersect.html "15.2.8 INTERSECT Clause")一样，任一查询块都可以使用[`SELECT`](select.html
    "15.2.13 SELECT Statement")、[`TABLE`](table.html "15.2.16 TABLE Statement")或[`VALUES`](values.html
    "15.2.19 VALUES Statement")中的任何一个。下面是一个使用在[第15.2.8节，“INTERSECT子句”](intersect.html
    "15.2.8 INTERSECT Clause")中定义的表`a`、`b`和`c`的示例：'
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As with [`UNION`](union.html "15.2.18 UNION Clause") and [`INTERSECT`](intersect.html
    "15.2.8 INTERSECT Clause"), if neither `DISTINCT` nor `ALL` is specified, the
    default is `DISTINCT`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`UNION`](union.html "15.2.18 UNION Clause")和[`INTERSECT`](intersect.html "15.2.8 INTERSECT
    Clause")一样，如果未指定`DISTINCT`或`ALL`，默认为`DISTINCT`。
- en: '`DISTINCT` removes duplicates found on either side of the relation, as shown
    here:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`DISTINCT`会移除关系两侧发现的重复项，如下所示：'
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (The first statement has the same effect as `TABLE c EXCEPT TABLE a`.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: （第一个语句的效果与`TABLE c EXCEPT TABLE a`相同。）
- en: 'Unlike `UNION` or `INTERSECT`, `EXCEPT` is *not* commutative—that is, the result
    depends on the order of the operands, as shown here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与`UNION`或`INTERSECT`不同，`EXCEPT` *不* 是可交换的——也就是说，结果取决于操作数的顺序，如下所示：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As with `UNION`, the result sets to be compared must have the same number of
    columns. Result set column types are also determined as for `UNION`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与`UNION`一样，要比较的结果集必须具有相同数量的列。结果集列类型也与`UNION`一样确定。
- en: '`EXCEPT` was added in MySQL 8.0.31.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXCEPT`在MySQL 8.0.31中添加。'
