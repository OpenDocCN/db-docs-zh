- en: MySQL Glossary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 术语表
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/glossary.html](https://dev.mysql.com/doc/refman/8.0/en/glossary.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/glossary.html](https://dev.mysql.com/doc/refman/8.0/en/glossary.html)
- en: These terms are commonly used in information about the MySQL database server.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些术语通常用于关于 MySQL 数据库服务器的信息。
- en: A
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: A
- en: .ARM file
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: .ARM 文件
- en: Metadata for `ARCHIVE` tables. Contrast with **.ARZ file**. Files with this
    extension are always included in backups produced by the `mysqlbackup` command
    of the **MySQL Enterprise Backup** product.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`ARCHIVE` 表的元数据。与**.ARZ 文件**相对比。具有此扩展名的文件始终包含在 **MySQL 企业备份** 产品的 `mysqlbackup`
    命令生成的备份中。'
- en: See Also [.ARZ file](glossary.html#glos_arz_file), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [mysqlbackup command](glossary.html#glos_mysqlbackup_command).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [.ARZ 文件](glossary.html#glos_arz_file), [MySQL 企业备份](glossary.html#glos_mysql_enterprise_backup),
    [mysqlbackup 命令](glossary.html#glos_mysqlbackup_command)。
- en: .ARZ file
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: .ARZ 文件
- en: Data for ARCHIVE tables. Contrast with **.ARM file**. Files with this extension
    are always included in backups produced by the `mysqlbackup` command of the **MySQL
    Enterprise Backup** product.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ARCHIVE 表的数据。与**.ARM 文件**相对比。具有此扩展名的文件始终包含在 **MySQL 企业备份** 产品的 `mysqlbackup`
    命令生成的备份中。
- en: See Also [.ARM file](glossary.html#glos_arm_file), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [mysqlbackup command](glossary.html#glos_mysqlbackup_command).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [.ARM 文件](glossary.html#glos_arm_file), [MySQL 企业备份](glossary.html#glos_mysql_enterprise_backup),
    [mysqlbackup 命令](glossary.html#glos_mysqlbackup_command)。
- en: ACID
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: ACID
- en: An acronym standing for atomicity, consistency, isolation, and durability. These
    properties are all desirable in a database system, and are all closely tied to
    the notion of a **transaction**. The transactional features of `InnoDB` adhere
    to the ACID principles.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代表原子性、一致性、隔离性和持久性的首字母缩写。这些属性在数据库系统中都是可取的，并且都与**事务**的概念密切相关。`InnoDB` 的事务特性遵循
    ACID 原则。
- en: Transactions are **atomic** units of work that can be **committed** or **rolled
    back**. When a transaction makes multiple changes to the database, either all
    the changes succeed when the transaction is committed, or all the changes are
    undone when the transaction is rolled back.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 事务是可以**提交**或**回滚**的**原子**工作单元。当事务对数据库进行多个更改时，当事务提交时，要么所有更改都成功，要么所有更改都被撤消。
- en: The database remains in a consistent state at all times — after each commit
    or rollback, and while transactions are in progress. If related data is being
    updated across multiple tables, queries see either all old values or all new values,
    not a mix of old and new values.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库始终保持一致的状态 —— 在每次提交或回滚之后，以及在事务进行中。如果跨多个表更新相关数据，查询将看到所有旧值或所有新值，而不是旧值和新值的混合。
- en: Transactions are protected (isolated) from each other while they are in progress;
    they cannot interfere with each other or see each other's uncommitted data. This
    isolation is achieved through the **locking** mechanism. Experienced users can
    adjust the **isolation level**, trading off less protection in favor of increased
    performance and **concurrency**, when they can be sure that the transactions really
    do not interfere with each other.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 事务在进行中受到保护（隔离）；它们不能相互干扰或看到彼此的未提交数据。这种隔离是通过**锁定**机制实现的。有经验的用户可以调整**隔离级别**，在确保事务确实不会相互干扰时，权衡较少的保护以换取增加的性能和**并发性**。
- en: 'The results of transactions are durable: once a commit operation succeeds,
    the changes made by that transaction are safe from power failures, system crashes,
    race conditions, or other potential dangers that many non-database applications
    are vulnerable to. Durability typically involves writing to disk storage, with
    a certain amount of redundancy to protect against power failures or software crashes
    during write operations. (In `InnoDB`, the **doublewrite buffer** assists with
    durability.)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 事务的结果是持久的：一旦提交操作成功，该事务所做的更改就不受电源故障、系统崩溃、竞争条件或其他许多非数据库应用程序容易受到的潜在危险的影响。持久性通常涉及写入磁盘存储，具有一定的冗余以防止在写入操作期间发生电源故障或软件崩溃。（在
    `InnoDB` 中，**双写缓冲区**有助于持久性。）
- en: See Also [atomic](glossary.html#glos_atomic), [commit](glossary.html#glos_commit),
    [concurrency](glossary.html#glos_concurrency), [doublewrite buffer](glossary.html#glos_doublewrite_buffer),
    [isolation level](glossary.html#glos_isolation_level), [locking](glossary.html#glos_locking),
    [rollback](glossary.html#glos_rollback), [transaction](glossary.html#glos_transaction).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[原子](glossary.html#glos_atomic)，[提交](glossary.html#glos_commit)，[并发性](glossary.html#glos_concurrency)，[双写缓冲区](glossary.html#glos_doublewrite_buffer)，[隔离级别](glossary.html#glos_isolation_level)，[锁定](glossary.html#glos_locking)，[回滚](glossary.html#glos_rollback)，[事务](glossary.html#glos_transaction)。
- en: adaptive flushing
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 自适应刷新
- en: An algorithm for **InnoDB** tables that smooths out the I/O overhead introduced
    by **checkpoints**. Instead of **flushing** all modified **pages** from the **buffer
    pool** to the **data files** at once, MySQL periodically flushes small sets of
    modified pages. The adaptive flushing algorithm extends this process by estimating
    the optimal rate to perform these periodic flushes, based on the rate of flushing
    and how fast **redo** information is generated.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一种针对**InnoDB**表的算法，平滑了**检查点**引入的I/O开销。MySQL不再一次性将所有修改的**页**从**缓冲池**刷新到**数据文件**，而是定期刷新一小组修改的页。自适应刷新算法通过估计执行这些定期刷新的最佳速率，基于刷新速率和生成**重做**信息的速度，扩展了这个过程。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [checkpoint](glossary.html#glos_checkpoint),
    [data files](glossary.html#glos_data_files), [flush](glossary.html#glos_flush),
    [InnoDB](glossary.html#glos_innodb), [page](glossary.html#glos_page), [redo log](glossary.html#glos_redo_log).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[检查点](glossary.html#glos_checkpoint)，[数据文件](glossary.html#glos_data_files)，[刷新](glossary.html#glos_flush)，[InnoDB](glossary.html#glos_innodb)，[页](glossary.html#glos_page)，[重做日志](glossary.html#glos_redo_log)。
- en: adaptive hash index
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 自适应哈希索引
- en: An optimization for `InnoDB` tables that can speed up lookups using `=` and
    `IN` operators, by constructing a **hash index** in memory. MySQL monitors index
    searches for `InnoDB` tables, and if queries could benefit from a hash index,
    it builds one automatically for index **pages** that are frequently accessed.
    In a sense, the adaptive hash index configures MySQL at runtime to take advantage
    of ample main memory, coming closer to the architecture of main-memory databases.
    This feature is controlled by the [`innodb_adaptive_hash_index`](innodb-parameters.html#sysvar_innodb_adaptive_hash_index)
    configuration option. Because this feature benefits some workloads and not others,
    and the memory used for the hash index is reserved in the **buffer pool**, typically
    you should benchmark with this feature both enabled and disabled.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一种针对`InnoDB`表的优化，可以通过在内存中构建**哈希索引**来加速使用`=`和`IN`运算符的查找。MySQL监视对`InnoDB`表的索引搜索，如果查询可以从哈希索引中受益，它会自动为频繁访问的索引**页**构建一个。在某种意义上，自适应哈希索引在运行时配置MySQL以利用充足的主内存，更接近主内存数据库的架构。此功能由[`innodb_adaptive_hash_index`](innodb-parameters.html#sysvar_innodb_adaptive_hash_index)配置选项控制。由于此功能对某些工作负载有益而对其他工作负载无益，并且用于哈希索引的内存在**缓冲池**中保留，通常应该在启用和禁用此功能的情况下进行基准测试。
- en: The hash index is always built based on an existing **B-tree** index on the
    table. MySQL can build a hash index on a prefix of any length of the key defined
    for the B-tree, depending on the pattern of searches against the index. A hash
    index can be partial; the whole B-tree index does not need to be cached in the
    buffer pool.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希索引始终基于表上现有的**B树**索引构建。MySQL可以根据对索引的搜索模式，在B树定义的任意长度的键的前缀上构建哈希索引。哈希索引可以是部分的；整个B树索引不需要在缓冲池中缓存。
- en: See Also [B-tree](glossary.html#glos_b_tree), [buffer pool](glossary.html#glos_buffer_pool),
    [hash index](glossary.html#glos_hash_index), [page](glossary.html#glos_page),
    [secondary index](glossary.html#glos_secondary_index).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[B树](glossary.html#glos_b_tree)，[缓冲池](glossary.html#glos_buffer_pool)，[哈希索引](glossary.html#glos_hash_index)，[页](glossary.html#glos_page)，[二级索引](glossary.html#glos_secondary_index)。
- en: ADO.NET
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ADO.NET
- en: An object-relational mapping (ORM) framework for applications built using .NET
    technologies such as **ASP.NET**. Such applications can interface with MySQL through
    the **Connector/NET** component.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 用于使用.NET技术构建的应用程序的对象关系映射（ORM）框架，如**ASP.NET**。这类应用程序可以通过**Connector/NET**组件与MySQL进行接口交互。
- en: See Also [.NET](glossary.html#glos__net), [ASP.net](glossary.html#glos_asp_net),
    [Connector/NET](glossary.html#glos_connector_net), [Mono](glossary.html#glos_mono),
    [Visual Studio](glossary.html#glos_visual_studio).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[.NET](glossary.html#glos__net)，[ASP.net](glossary.html#glos_asp_net)，[Connector/NET](glossary.html#glos_connector_net)，[Mono](glossary.html#glos_mono)，[Visual
    Studio](glossary.html#glos_visual_studio)。
- en: AIO
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: AIO
- en: Acronym for **asynchronous I/O**. You might see this acronym in `InnoDB` messages
    or keywords.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**异步I/O**的缩写。您可能会在`InnoDB`消息或关键字中看到这个缩写。'
- en: See Also [asynchronous I/O](glossary.html#glos_asynchronous_io).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[异步I/O](glossary.html#glos_asynchronous_io)。
- en: ANSI
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ANSI
- en: In **ODBC**, an alternative method of supporting character sets and other internationalization
    aspects. Contrast with **Unicode**. **Connector/ODBC** 3.51 is an ANSI driver,
    while Connector/ODBC 5.1 is a Unicode driver.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在**ODBC**中，支持字符集和其他国际化方面的另一种方法。与**Unicode**形成对比。**Connector/ODBC** 3.51是一个ANSI驱动程序，而Connector/ODBC
    5.1是一个Unicode驱动程序。
- en: See Also [Connector/ODBC](glossary.html#glos_connector_odbc), [ODBC](glossary.html#glos_odbc),
    [Unicode](glossary.html#glos_unicode).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[连接器/ODBC](glossary.html#glos_connector_odbc)，[ODBC](glossary.html#glos_odbc)，[Unicode](glossary.html#glos_unicode)。
- en: API
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: API
- en: APIs provide low-level access to the MySQL protocol and MySQL resources from
    **client** programs. Contrast with the higher-level access provided by a **Connector**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: API为**客户端**程序提供对MySQL协议和MySQL资源的低级访问。与**连接器**提供的高级访问形成对比。
- en: See Also [C API](glossary.html#glos_c_api), [client](glossary.html#glos_client),
    [connector](glossary.html#glos_connector), [native C API](glossary.html#glos_native_c_api),
    [Perl API](glossary.html#glos_perl_api), [PHP API](glossary.html#glos_php_api),
    [Python API](glossary.html#glos_python_api), [Ruby API](glossary.html#glos_ruby_api).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[C API](glossary.html#glos_c_api)，[客户端](glossary.html#glos_client)，[连接器](glossary.html#glos_connector)，[本机C
    API](glossary.html#glos_native_c_api)，[Perl API](glossary.html#glos_perl_api)，[PHP
    API](glossary.html#glos_php_api)，[Python API](glossary.html#glos_python_api)，[Ruby
    API](glossary.html#glos_ruby_api)。
- en: application programming interface (API)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编程接口（API）
- en: A set of functions or procedures. An API provides a stable set of names and
    types for functions, procedures, parameters, and return values.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一组函数或过程。API为函数、过程、参数和返回值提供了稳定的名称和类型。
- en: apply
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 应用
- en: When a backup produced by the **MySQL Enterprise Backup** product does not include
    the most recent changes that occurred while the backup was underway, the process
    of updating the backup files to include those changes is known as the **apply**
    step. It is specified by the `apply-log` option of the `mysqlbackup` command.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当**MySQL Enterprise Backup**产品生成的备份不包括备份进行时发生的最新更改时，将备份文件更新以包括这些更改的过程称为**应用**步骤。它由`mysqlbackup`命令的`apply-log`选项指定。
- en: Before the changes are applied, we refer to the files as a **raw backup**. After
    the changes are applied, we refer to the files as a **prepared backup**. The changes
    are recorded in the **ibbackup_logfile** file; once the apply step is finished,
    this file is no longer necessary.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改应用之前，我们将文件称为**原始备份**。在应用更改之后，我们将文件称为**准备备份**。更改记录在**ibbackup_logfile**文件中；一旦应用步骤完成，此文件就不再需要。
- en: See Also [hot backup](glossary.html#glos_hot_backup), [ibbackup_logfile](glossary.html#glos_ibbackup_logfile),
    [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup), [prepared
    backup](glossary.html#glos_prepared_backup), [raw backup](glossary.html#glos_raw_backup).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[热备份](glossary.html#glos_hot_backup)，[ibbackup_logfile](glossary.html#glos_ibbackup_logfile)，[MySQL
    Enterprise Backup](glossary.html#glos_mysql_enterprise_backup)，[准备备份](glossary.html#glos_prepared_backup)，[原始备份](glossary.html#glos_raw_backup)。
- en: AS
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: AS
- en: A Kerberos authentication server. AS can also refer to the authentication service
    provided by an authentication server.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Kerberos认证服务器。AS也可以指认证服务器提供的认证服务。
- en: See Also [authentication server](glossary.html#glos_authentication_server).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[认证服务器](glossary.html#glos_authentication_server)。
- en: ASP.net
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.net
- en: A framework for developing web-based applications using **.NET** technologies
    and languages. Such applications can interface with MySQL through the **Connector/NET**
    component.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个使用**.NET**技术和语言开发基于Web的应用程序的框架。这些应用程序可以通过**Connector/NET**组件与MySQL进行交互。
- en: Another technology for writing server-side web pages with MySQL is **PHP**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MySQL编写服务器端网页的另一种技术是**PHP**。
- en: See Also [.NET](glossary.html#glos__net), [ADO.NET](glossary.html#glos_ado_net),
    [Connector/NET](glossary.html#glos_connector_net), [Mono](glossary.html#glos_mono),
    [PHP](glossary.html#glos_php), [Visual Studio](glossary.html#glos_visual_studio).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[.NET](glossary.html#glos__net)，[ADO.NET](glossary.html#glos_ado_net)，[Connector/NET](glossary.html#glos_connector_net)，[Mono](glossary.html#glos_mono)，[PHP](glossary.html#glos_php)，[Visual
    Studio](glossary.html#glos_visual_studio)。
- en: assembly
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 程序集
- en: A library of compiled code in a **.NET** system, accessed through **Connector/NET**.
    Stored in the **GAC** to allow versioning without naming conflicts.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在**.NET**系统中的一组已编译代码库，通过**Connector/NET**访问。存储在**GAC**中，以允许版本控制而不产生命名冲突。
- en: See Also [.NET](glossary.html#glos__net), [GAC](glossary.html#glos_gac).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[.NET](glossary.html#glos__net)，[GAC](glossary.html#glos_gac)。
- en: asynchronous I/O
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 异步I/O
- en: A type of I/O operation that allows other processing to proceed before the I/O
    is completed. Also known as **nonblocking I/O** and abbreviated as **AIO**. `InnoDB`
    uses this type of I/O for certain operations that can run in parallel without
    affecting the reliability of the database, such as reading pages into the **buffer
    pool** that have not actually been requested, but might be needed soon.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一种I/O操作，允许其他处理在I/O完成之前继续进行。也称为**非阻塞I/O**，缩写为**AIO**。`InnoDB`在某些可以并行运行而不影响数据库可靠性的操作中使用这种类型的I/O，例如将未被请求但可能很快需要的页面读入**缓冲池**。
- en: Historically, `InnoDB` used asynchronous I/O on Windows systems only. Starting
    with the InnoDB Plugin 1.1 and MySQL 5.5, `InnoDB` uses asynchronous I/O on Linux
    systems. This change introduces a dependency on `libaio`. Asynchronous I/O on
    Linux systems is configured using the [`innodb_use_native_aio`](innodb-parameters.html#sysvar_innodb_use_native_aio)
    option, which is enabled by default. On other Unix-like systems, InnoDB uses synchronous
    I/O only.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在历史上，`InnoDB`仅在Windows系统上使用异步I/O。从InnoDB插件1.1和MySQL 5.5开始，`InnoDB`在Linux系统上使用异步I/O。这个改变引入了对`libaio`的依赖。在Linux系统上，异步I/O是使用[`innodb_use_native_aio`](innodb-parameters.html#sysvar_innodb_use_native_aio)选项配置的，默认情况下启用。在其他类Unix系统上，InnoDB仅使用同步I/O。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [nonblocking I/O](glossary.html#glos_non_blocking_io).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[缓冲池](glossary.html#glos_buffer_pool)，[非阻塞I/O](glossary.html#glos_non_blocking_io)。
- en: atomic
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 原子
- en: In the SQL context, **transactions** are units of work that either succeed entirely
    (when **committed**) or have no effect at all (when **rolled back**). The indivisible
    ("atomic") property of transactions is the “A” in the acronym **ACID**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL上下文中，**事务**是要么完全成功（当**提交**时），要么根本没有效果（当**回滚**时）的工作单元。事务的不可分割（“原子”）属性是缩写**ACID**中的“A”。
- en: See Also [ACID](glossary.html#glos_acid), [commit](glossary.html#glos_commit),
    [rollback](glossary.html#glos_rollback), [transaction](glossary.html#glos_transaction).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[ACID](glossary.html#glos_acid)，[提交](glossary.html#glos_commit)，[回滚](glossary.html#glos_rollback)，[事务](glossary.html#glos_transaction)。
- en: atomic DDL
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 原子DDL
- en: An atomic *DDL* statement is one that combines the *data dictionary* updates,
    *storage engine* operations, and *binary log* writes associated with a DDL operation
    into a single, atomic transaction. The transaction is either fully committed or
    rolled back, even if the server halts during the operation. Atomic DDL support
    was added in MySQL 8.0. For more information, see [Section 15.1.1, “Atomic Data
    Definition Statement Support”](atomic-ddl.html "15.1.1 Atomic Data Definition
    Statement Support").
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 原子*DDL*语句是将与DDL操作相关的数据字典更新、存储引擎操作和二进制日志写入组合成一个单一的原子事务的语句。即使服务器在操作期间停止，事务也会完全提交或回滚。原子DDL支持在MySQL
    8.0中添加。更多信息，请参阅[Section 15.1.1, “原子数据定义语句支持”](atomic-ddl.html "15.1.1 原子数据定义语句支持")。
- en: See Also [binary log](glossary.html#glos_binary_log), [data dictionary](glossary.html#glos_data_dictionary),
    [DDL](glossary.html#glos_ddl), [storage engine](glossary.html#glos_storage_engine).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[二进制日志](glossary.html#glos_binary_log)，[数据字典](glossary.html#glos_data_dictionary)，[DDL](glossary.html#glos_ddl)，[存储引擎](glossary.html#glos_storage_engine)。
- en: atomic instruction
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 原子指令
- en: Special instructions provided by the CPU, to ensure that critical low-level
    operations cannot be interrupted.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: CPU提供的特殊指令，确保关键的低级操作不会被中断。
- en: authentication server
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 认证服务器
- en: In Kerberos, a service that provides the initial ticket needed to obtain a ticket-granting
    ticket (TGT) that is needed to obtain other tickets from the ticket-granting server
    (TGS). The authentication server (AS) combined with a TGS make up a key distribution
    center (KDC).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kerberos中，提供获取票据授予票证（TGT）所需的初始票证的服务，该票证需要从票证授予服务器（TGS）获取其他票证。认证服务器（AS）与TGS组成密钥分发中心（KDC）。
- en: See Also [key distribution center](glossary.html#glos_key_distribution_center),
    [ticket-granting server](glossary.html#glos_ticket_granting_server).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[密钥分发中心](glossary.html#glos_key_distribution_center)，[票据授予服务器](glossary.html#glos_ticket_granting_server)。
- en: auto-increment
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 自增
- en: A property of a table column (specified by the `AUTO_INCREMENT` keyword) that
    automatically adds an ascending sequence of values in the column.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 表列的属性（由`AUTO_INCREMENT`关键字指定），自动在列中添加一个升序值序列。
- en: It saves work for the developer, not to have to produce new unique values when
    inserting new rows. It provides useful information for the query optimizer, because
    the column is known to be not null and with unique values. The values from such
    a column can be used as lookup keys in various contexts, and because they are
    auto-generated there is no reason to ever change them; for this reason, primary
    key columns are often specified as auto-incrementing.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发人员来说，不需要在插入新行时生成新的唯一值可以节省工作。它为查询优化器提供有用信息，因为该列已知为非空且具有唯一值。这种列的值可以在各种上下文中用作查找键，并且由于它们是自动生成的，所以永远不需要更改它们；因此，主键列通常被指定为自增的。
- en: Auto-increment columns can be problematic with statement-based replication,
    because replaying the statements on a replica might not produce the same set of
    column values as on the source, due to timing issues. When you have an auto-incrementing
    primary key, you can use statement-based replication only with the setting [`innodb_autoinc_lock_mode=1`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode).
    If you have [`innodb_autoinc_lock_mode=2`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode),
    which allows higher concurrency for insert operations, use **row-based replication**
    rather than **statement-based replication**. The setting [`innodb_autoinc_lock_mode=0`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    should not be used except for compatibility purposes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 自增列在基于语句的复制中可能存在问题，因为在副本上重放语句可能不会产生与源相同的列值集，这是由于时间问题导致的。当您有一个自增主键时，只能在设置[`innodb_autoinc_lock_mode=1`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)的情况下使用基于语句的复制。如果您有[`innodb_autoinc_lock_mode=2`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)，允许更高的插入操作并发性，请使用**基于行的复制**而不是**基于语句的复制**。设置[`innodb_autoinc_lock_mode=0`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)不应该被使用，除非出于兼容性目的。
- en: Consecutive lock mode ([`innodb_autoinc_lock_mode=1`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode))
    is the default setting prior to MySQL 8.0.3\. As of MySQL 8.0.3, interleaved lock
    mode ([`innodb_autoinc_lock_mode=2`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode))
    is the default, which reflects the change from statement-based to row-based replication
    as the default replication type.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 连续锁定模式（[`innodb_autoinc_lock_mode=1`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)）是MySQL
    8.0.3之前的默认设置。从MySQL 8.0.3开始，交错锁定模式（[`innodb_autoinc_lock_mode=2`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)）是默认设置，这反映了从基于语句到基于行的复制作为默认复制类型的更改。
- en: See Also [auto-increment locking](glossary.html#glos_auto_increment_locking),
    [innodb_autoinc_lock_mode](glossary.html#glos_innodb_autoinc_lock_mode), [primary
    key](glossary.html#glos_primary_key), [row-based replication](glossary.html#glos_row_based_replication),
    [statement-based replication](glossary.html#glos_statement_based_replication).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[自增锁定](glossary.html#glos_auto_increment_locking)，[innodb_autoinc_lock_mode](glossary.html#glos_innodb_autoinc_lock_mode)，[主键](glossary.html#glos_primary_key)，[基于行的复制](glossary.html#glos_row_based_replication)，[基于语句的复制](glossary.html#glos_statement_based_replication)。
- en: auto-increment locking
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 自增锁定
- en: The convenience of an **auto-increment** primary key involves some tradeoff
    with concurrency. In the simplest case, if one transaction is inserting values
    into the table, any other transactions must wait to do their own inserts into
    that table, so that rows inserted by the first transaction receive consecutive
    primary key values. `InnoDB` includes optimizations and the [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    option so that you can configure and optimal balance between predictable sequences
    of auto-increment values and maximum **concurrency** for insert operations.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**自增**主键的便利性涉及与并发性的一些权衡。在最简单的情况下，如果一个事务正在向表中插入值，任何其他事务必须等待进行它们自己的插入操作，以便第一个事务插入的行接收连续的主键值。`InnoDB`包括优化和[`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)选项，以便您可以配置和最佳平衡自增值的可预测序列和插入操作的最大**并发性**。
- en: See Also [auto-increment](glossary.html#glos_auto_increment), [concurrency](glossary.html#glos_concurrency),
    [innodb_autoinc_lock_mode](glossary.html#glos_innodb_autoinc_lock_mode).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[自增](glossary.html#glos_auto_increment)，[并发性](glossary.html#glos_concurrency)，[innodb_autoinc_lock_mode](glossary.html#glos_innodb_autoinc_lock_mode)。
- en: autocommit
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 自动提交
- en: A setting that causes a **commit** operation after each **SQL** statement. This
    mode is not recommended for working with `InnoDB` tables with **transactions**
    that span several statements. It can help performance for **read-only transactions**
    on `InnoDB` tables, where it minimizes overhead from **locking** and generation
    of **undo** data, especially in MySQL 5.6.4 and up. It is also appropriate for
    working with [`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine")
    tables, where transactions are not applicable.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一种在每个**SQL**语句之后执行**提交**操作的设置。不建议在涉及跨多个语句的**InnoDB**表的**事务**中使用此模式。对于在`InnoDB`表上执行**只读事务**，尤其是在MySQL
    5.6.4及更高版本中，可以提高性能，减少**锁定**和**撤销**数据生成的开销。也适用于与[`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine")表一起使用，其中事务不适用。
- en: See Also [commit](glossary.html#glos_commit), [locking](glossary.html#glos_locking),
    [read-only transaction](glossary.html#glos_read_only_transaction), [SQL](glossary.html#glos_sql),
    [transaction](glossary.html#glos_transaction), [undo](glossary.html#glos_undo).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[commit](glossary.html#glos_commit)，[locking](glossary.html#glos_locking)，[read-only
    transaction](glossary.html#glos_read_only_transaction)，[SQL](glossary.html#glos_sql)，[transaction](glossary.html#glos_transaction)，[undo](glossary.html#glos_undo)。
- en: availability
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性
- en: The ability to cope with, and if necessary recover from, failures on the host,
    including failures of MySQL, the operating system, or the hardware and maintenance
    activity that may otherwise cause downtime. Often paired with **scalability**
    as critical aspects of a large-scale deployment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 具备处理并在必要时从主机故障中恢复的能力，包括MySQL、操作系统或硬件以及可能导致停机的维护活动。通常与**可伸缩性**一起作为大规模部署的关键方面。
- en: See Also [scalability](glossary.html#glos_scalability).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[scalability](glossary.html#glos_scalability)。
- en: B
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: B
- en: B-tree
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: B树
- en: A tree data structure that is popular for use in database indexes. The structure
    is kept sorted at all times, enabling fast lookup for exact matches (equals operator)
    and ranges (for example, greater than, less than, and `BETWEEN` operators). This
    type of index is available for most storage engines, such as [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") and [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine").
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一种在数据库索引中常用的树数据结构。该结构始终保持排序，使得可以快速查找精确匹配（等于运算符）和范围（例如，大于、小于和`BETWEEN`运算符）。这种类型的索引适用于大多数存储引擎，如[`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine")和[`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine")。
- en: Because B-tree nodes can have many children, a B-tree is not the same as a binary
    tree, which is limited to 2 children per node.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因为B树节点可以有许多子节点，所以B树与每个节点限制为2个子节点的二叉树不同。
- en: Contrast with **hash index**, which is only available in the [`MEMORY`](memory-storage-engine.html
    "18.3 The MEMORY Storage Engine") storage engine. The `MEMORY` storage engine
    can also use B-tree indexes, and you should choose B-tree indexes for `MEMORY`
    tables if some queries use range operators.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与**哈希索引**相对，哈希索引仅在[`MEMORY`](memory-storage-engine.html "18.3 The MEMORY Storage
    Engine")存储引擎中可用。`MEMORY`存储引擎也可以使用B树索引，如果一些查询使用范围运算符，则应选择B树索引用于`MEMORY`表。
- en: The use of the term B-tree is intended as a reference to the general class of
    index design. B-tree structures used by MySQL storage engines may be regarded
    as variants due to sophistications not present in a classic B-tree design. For
    related information, refer to the `InnoDB` Page Structure [Fil Header](/doc/internals/en/innodb-fil-header.html)
    section of the [MySQL Internals Manual](/doc/internals/en/index.html).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用术语B树旨在参考索引设计的一般类别。由于MySQL存储引擎中使用的B树结构可能由于经典B树设计中不存在的复杂性而被视为变体。有关相关信息，请参阅[MySQL
    Internals Manual](/doc/internals/en/index.html)中的`InnoDB`页面结构[Fil Header](/doc/internals/en/innodb-fil-header.html)部分。
- en: See Also [hash index](glossary.html#glos_hash_index).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[hash index](glossary.html#glos_hash_index)。
- en: backticks
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 反引号
- en: Identifiers within MySQL SQL statements must be quoted using the backtick character
    (```) if they contain special characters or reserved words. For example, to refer
    to a table named `FOO#BAR` or a column named `SELECT`, you would specify the identifiers
    as ``FOO#BAR`` and ``SELECT``. Since the backticks provide an extra level of safety,
    they are used extensively in program-generated SQL statements, where the identifier
    names might not be known in advance.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL SQL语句中的标识符必须使用反引号（`` ` ``）引用，如果它们包含特殊字符或保留字。例如，要引用名为`FOO#BAR`的表或名为`SELECT`的列，您应将标识符指定为``FOO#BAR``和``SELECT``。由于反引号提供了额外的安全性，它们在程序生成的SQL语句中被广泛使用，其中标识符名称可能事先不知道。
- en: Many other database systems use double quotation marks (`"`) around such special
    names. For portability, you can enable `ANSI_QUOTES` mode in MySQL and use double
    quotation marks instead of backticks to qualify identifier names.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他数据库系统在此类特殊名称周围使用双引号（`"`）。为了可移植性，您可以在MySQL中启用`ANSI_QUOTES`模式，并使用双引号而不是反引号来限定标识符名称。
- en: See Also [SQL](glossary.html#glos_sql).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[SQL](glossary.html#glos_sql)。
- en: backup
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 备份
- en: The process of copying some or all table data and metadata from a MySQL instance,
    for safekeeping. Can also refer to the set of copied files. This is a crucial
    task for DBAs. The reverse of this process is the **restore** operation.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL实例复制一些或所有表数据和元数据的过程，以备份。也可以指已复制文件集。这是DBA的关键任务。此过程的反向操作是**恢复**操作。
- en: With MySQL, **physical backups** are performed by the **MySQL Enterprise Backup**
    product, and **logical backups** are performed by the `mysqldump` command. These
    techniques have different characteristics in terms of size and representation
    of the backup data, and speed (especially speed of the restore operation).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MySQL，**物理备份**由**MySQL企业备份**产品执行，**逻辑备份**由`mysqldump`命令执行。这些技术在备份数据的大小和表示以及速度方面具有不同的特征（尤其是恢复操作的速度）。
- en: Backups are further classified as **hot**, **warm**, or **cold** depending on
    how much they interfere with normal database operation. (Hot backups have the
    least interference, cold backups the most.)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 根据备份对正常数据库操作的干扰程度，备份进一步分类为**热备份**、**温备份**或**冷备份**。（热备份干扰最小，冷备份干扰最大。）
- en: See Also [cold backup](glossary.html#glos_cold_backup), [hot backup](glossary.html#glos_hot_backup),
    [logical backup](glossary.html#glos_logical_backup), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [mysqldump](glossary.html#glos_mysqldump), [physical backup](glossary.html#glos_physical_backup),
    [warm backup](glossary.html#glos_warm_backup).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[冷备份](glossary.html#glos_cold_backup)，[热备份](glossary.html#glos_hot_backup)，[逻辑备份](glossary.html#glos_logical_backup)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[mysqldump](glossary.html#glos_mysqldump)，[物理备份](glossary.html#glos_physical_backup)，[温备份](glossary.html#glos_warm_backup)。
- en: base column
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 基本列
- en: A non-generated table column upon which a stored generated column or virtual
    generated column is based. In other words, a base column is a non-generated table
    column that is part of a generated column definition.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 存储生成列或虚拟生成列所基于的非生成表列。换句话说，基本列是生成列定义的一部分的非生成表列。
- en: See Also [generated column](glossary.html#glos_generated_column), [stored generated
    column](glossary.html#glos_stored_generated_column), [virtual generated column](glossary.html#glos_virtual_generated_column).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[生成列](glossary.html#glos_generated_column)，[存储生成列](glossary.html#glos_stored_generated_column)，[虚拟生成列](glossary.html#glos_virtual_generated_column)。
- en: beta
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: beta
- en: An early stage in the life of a software product, when it is available only
    for evaluation, typically without a definite release number or a number less than
    1. `InnoDB` does not use the beta designation, preferring an **early adopter**
    phase that can extend over several point releases, leading to a **GA** release.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 软件产品生命周期中的早期阶段，仅供评估使用，通常没有明确的发布号或小于1的号码。`InnoDB`不使用beta标识，而更倾向于一个可以延续数个点发布的**早期采用者**阶段，最终导致**GA**发布。
- en: See Also [early adopter](glossary.html#glos_early_adopter), [GA](glossary.html#glos_ga).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[早期采用者](glossary.html#glos_early_adopter)，[GA](glossary.html#glos_ga)。
- en: binary log
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制日志
- en: A file containing a record of all statements or row changes that attempt to
    change table data. The contents of the binary log can be replayed to bring replicas
    up to date in a **replication** scenario, or to bring a database up to date after
    restoring table data from a backup. The binary logging feature can be turned on
    and off, although Oracle recommends always enabling it if you use replication
    or perform backups.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 包含所有语句或行更改记录的文件，试图更改表数据。二进制日志的内容可以重放，以在**复制**场景中使副本保持最新状态，或在从备份中恢复表数据后使数据库保持最新状态。虽然可以打开和关闭二进制日志记录功能，但Oracle建议如果使用复制或执行备份，则始终启用它。
- en: You can examine the contents of the binary log, or replay it during replication
    or recovery, by using the [**mysqlbinlog**](mysqlbinlog.html "6.6.9 mysqlbinlog
    — Utility for Processing Binary Log Files") command. For full information about
    the binary log, see [Section 7.4.4, “The Binary Log”](binary-log.html "7.4.4 The
    Binary Log"). For MySQL configuration options related to the binary log, see [Section 19.1.6.4,
    “Binary Logging Options and Variables”](replication-options-binary-log.html "19.1.6.4 Binary
    Logging Options and Variables").
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[**mysqlbinlog**](mysqlbinlog.html "6.6.9 mysqlbinlog — Utility for Processing
    Binary Log Files")命令检查二进制日志的内容，或在复制或恢复过程中重放它。有关二进制日志的完整信息，请参阅[7.4.4节，“二进制日志”](binary-log.html
    "7.4.4 The Binary Log")。有关与二进制日志相关的MySQL配置选项，请参阅[19.1.6.4节，“二进制日志选项和变量”](replication-options-binary-log.html
    "19.1.6.4 Binary Logging Options and Variables")。
- en: For the **MySQL Enterprise Backup** product, the file name of the binary log
    and the current position within the file are important details. To record this
    information for the source when taking a backup in a replication context, you
    can specify the `--slave-info` option.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**MySQL企业备份**产品，二进制日志的文件名和文件中的当前位置是重要细节。在复制环境中备份源时记录这些信息，可以指定`--slave-info`选项。
- en: Prior to MySQL 5.0, a similar capability was available, known as the update
    log. In MySQL 5.0 and higher, the binary log replaces the update log.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 5.0之前，有一个类似的功能，称为更新日志。在MySQL 5.0及更高版本中，二进制日志取代了更新日志。
- en: See Also [binlog](glossary.html#glos_binlog), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [replication](glossary.html#glos_replication).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[binlog](glossary.html#glos_binlog), [MySQL企业备份](glossary.html#glos_mysql_enterprise_backup),
    [复制](glossary.html#glos_replication)。
- en: binlog
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: binlog
- en: An informal name for the **binary log** file. For example, you might see this
    abbreviation used in e-mail messages or forum discussions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**二进制日志**文件的非正式名称。例如，您可能会在电子邮件或论坛讨论中看到这个缩写。'
- en: See Also [binary log](glossary.html#glos_binary_log).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[二进制日志](glossary.html#glos_binary_log)。
- en: blind query expansion
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 盲查询扩展
- en: A special mode of **full-text search** enabled by the `WITH QUERY EXPANSION`
    clause. It performs the search twice, where the search phrase for the second search
    is the original search phrase concatenated with the few most highly relevant documents
    from the first search. This technique is mainly applicable for short search phrases,
    perhaps only a single word. It can uncover relevant matches where the precise
    search term does not occur in the document.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`WITH QUERY EXPANSION`子句启用的**全文搜索**的特殊模式。它执行两次搜索，第二次搜索的搜索短语是原始搜索短语与第一次搜索中最相关的几篇文档连接在一起。这种技术主要适用于短搜索短语，也许只有一个单词。它可以揭示相关匹配项，即使精确搜索词在文档中不存在。
- en: See Also [full-text search](glossary.html#glos_full_text_search).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[全文搜索](glossary.html#glos_full_text_search)。
- en: BLOB
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: BLOB
- en: An SQL data type ([`TINYBLOB`](blob.html "13.3.4 The BLOB and TEXT Types"),
    [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`MEDIUMBLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types"), and [`LONGBLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types")) for objects containing any kind of binary data, of arbitrary
    size. Used for storing documents, images, sound files, and other kinds of information
    that cannot easily be decomposed to rows and columns within a MySQL table. The
    techniques for handling BLOBs within a MySQL application vary with each **Connector**
    and **API**. MySQL `Connector/ODBC` defines `BLOB` values as `LONGVARBINARY`.
    For large, free-form collections of character data, the industry term is **CLOB**,
    represented by the MySQL `TEXT` data types.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 用于包含任何类型二进制数据的对象的SQL数据类型（[`TINYBLOB`](blob.html "13.3.4 The BLOB and TEXT Types"),
    [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`MEDIUMBLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types"), 和 [`LONGBLOB`](blob.html "13.3.4 The BLOB and
    TEXT Types")）。用于存储文档、图像、声音文件和其他类型的信息，这些信息不能轻易分解为MySQL表中的行和列。处理BLOB在MySQL应用程序中的技术因每个**连接器**和**API**而异。MySQL
    `Connector/ODBC`将`BLOB`值定义为`LONGVARBINARY`。对于大型的自由形式字符数据集合，行业术语是**CLOB**，由MySQL
    `TEXT`数据类型表示。
- en: See Also [API](glossary.html#glos_api), [CLOB](glossary.html#glos_clob), [connector](glossary.html#glos_connector),
    [Connector/ODBC](glossary.html#glos_connector_odbc).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[API](glossary.html#glos_api), [CLOB](glossary.html#glos_clob), [连接器](glossary.html#glos_connector),
    [Connector/ODBC](glossary.html#glos_connector_odbc)。
- en: bottleneck
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 瓶颈
- en: A portion of a system that is constrained in size or capacity, that has the
    effect of limiting overall throughput. For example, a memory area might be smaller
    than necessary; access to a single required resource might prevent multiple CPU
    cores from running simultaneously; or waiting for disk I/O to complete might prevent
    the CPU from running at full capacity. Removing bottlenecks tends to improve **concurrency**.
    For example, the ability to have multiple `InnoDB` **buffer pool** instances reduces
    contention when multiple sessions read from and write to the buffer pool simultaneously.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中受限制大小或容量的部分，其效果是限制整体吞吐量。例如，内存区域可能比必要的小；访问单个所需资源可能阻止多个CPU核心同时运行；或等待磁盘I/O完成可能阻止CPU以全容量运行。消除瓶颈往往会提高**并发性**。例如，具有多个`InnoDB`缓冲池实例的能力减少了当多个会话同时从缓冲池读取和写入时的争用。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [concurrency](glossary.html#glos_concurrency).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[并发性](glossary.html#glos_concurrency)。
- en: bounce
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 弹跳
- en: A **shutdown** operation immediately followed by a restart. Ideally with a relatively
    short **warmup** period so that performance and throughput quickly return to a
    high level.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 立即跟随重启的**关闭**操作。理想情况下，具有相对较短的**热身**期，以便性能和吞吐量迅速恢复到高水平。
- en: See Also [shutdown](glossary.html#glos_shutdown).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[关闭](glossary.html#glos_shutdown)。
- en: buddy allocator
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 伙伴分配器
- en: A mechanism for managing different-sized **pages** in the InnoDB **buffer pool**.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 用于管理InnoDB缓冲池中不同大小**页**的机制。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [page](glossary.html#glos_page),
    [page size](glossary.html#glos_page_size).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[页](glossary.html#glos_page)，[页大小](glossary.html#glos_page_size)。
- en: buffer
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区
- en: A memory or disk area used for temporary storage. Data is buffered in memory
    so that it can be written to disk efficiently, with a few large I/O operations
    rather than many small ones. Data is buffered on disk for greater reliability,
    so that it can be recovered even when a **crash** or other failure occurs at the
    worst possible time. The main types of buffers used by InnoDB are the **buffer
    pool**, the **doublewrite buffer**, and the **change buffer**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 用于临时存储的内存或磁盘区域。数据在内存中进行缓冲，以便可以通过少量大型I/O操作而不是许多小型操作有效地写入磁盘。数据在磁盘上进行缓冲以提高可靠性，即使在最糟糕的时刻发生**崩溃**或其他故障时，也可以恢复数据。InnoDB
    使用的主要缓冲区类型包括**缓冲池**、**双写缓冲区**和**变更缓冲区**。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [change buffer](glossary.html#glos_change_buffer),
    [crash](glossary.html#glos_crash), [doublewrite buffer](glossary.html#glos_doublewrite_buffer).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[变更缓冲区](glossary.html#glos_change_buffer)，[崩溃](glossary.html#glos_crash)，[双写缓冲区](glossary.html#glos_doublewrite_buffer)。
- en: buffer pool
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲池
- en: The memory area that holds cached `InnoDB` data for both tables and indexes.
    For efficiency of high-volume read operations, the buffer pool is divided into
    **pages** that can potentially hold multiple rows. For efficiency of cache management,
    the buffer pool is implemented as a linked list of pages; data that is rarely
    used is aged out of the cache, using a variation of the **LRU** algorithm. On
    systems with large memory, you can improve concurrency by dividing the buffer
    pool into multiple **buffer pool instances**.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 用于同时缓存表和索引的`InnoDB`数据的内存区域。为了提高高容量读操作的效率，缓冲池被划分为**页**，每个页可以潜在地容纳多行数据。为了提高缓存管理的效率，缓冲池被实现为页的链表；很少使用的数据会根据**LRU**算法的变体从缓存中淘汰。在具有大内存的系统上，可以通过将缓冲池划分为多个**缓冲池实例**来提高并发性。
- en: Several `InnoDB` status variables, `INFORMATION_SCHEMA` tables, and `performance_schema`
    tables help to monitor the internal workings of the buffer pool. Starting in MySQL
    5.6, you can avoid a lengthy warmup period after restarting the server, particularly
    for instances with large buffer pools, by saving the buffer pool state at server
    shutdown and restoring the buffer pool to the same state at server startup. See
    [Section 17.8.3.6, “Saving and Restoring the Buffer Pool State”](innodb-preload-buffer-pool.html
    "17.8.3.6 Saving and Restoring the Buffer Pool State").
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 几个`InnoDB`状态变量、`INFORMATION_SCHEMA`表和`performance_schema`表有助于监视缓冲池的内部工作。从MySQL
    5.6开始，您可以通过在服务器关闭时保存缓冲池状态，并在服务器启动时将缓冲池恢复到相同状态，避免重新启动后出现漫长的热身期，特别是对于具有大缓冲池的实例。请参见[第17.8.3.6节，“保存和恢复缓冲池状态”](innodb-preload-buffer-pool.html
    "17.8.3.6 Saving and Restoring the Buffer Pool State")。
- en: See Also [buffer pool instance](glossary.html#glos_buffer_pool_instance), [LRU](glossary.html#glos_lru),
    [page](glossary.html#glos_page), [warm up](glossary.html#glos_warm_up).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池实例](glossary.html#glos_buffer_pool_instance)、[LRU](glossary.html#glos_lru)、[页](glossary.html#glos_page)、[预热](glossary.html#glos_warm_up)。
- en: buffer pool instance
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲池实例
- en: Any of the multiple regions into which the **buffer pool** can be divided, controlled
    by the [`innodb_buffer_pool_instances`](innodb-parameters.html#sysvar_innodb_buffer_pool_instances)
    configuration option. The total memory size specified by [`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)
    is divided among all buffer pool instances. Typically, having multiple buffer
    pool instances is appropriate for systems that allocate multiple gigabytes to
    the `InnoDB` buffer pool, with each instance being one gigabyte or larger. On
    systems loading or looking up large amounts of data in the buffer pool from many
    concurrent sessions, having multiple buffer pool instances reduces contention
    for exclusive access to data structures that manage the buffer pool.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓冲池**可以被划分为多个区域，由[`innodb_buffer_pool_instances`](innodb-parameters.html#sysvar_innodb_buffer_pool_instances)配置选项控制。由[`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)指定的总内存大小被分配给所有缓冲池实例。通常，对于将多个千兆字节分配给`InnoDB`缓冲池的系统来说，拥有多个缓冲池实例是合适的，每个实例为一千兆字节或更大。对于从许多并发会话中的缓冲池加载或查找大量数据的系统，拥有多个缓冲池实例可以减少对管理缓冲池的数据结构的独占访问的争夺。'
- en: See Also [buffer pool](glossary.html#glos_buffer_pool).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)。
- en: built-in
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 内置
- en: The built-in `InnoDB` storage engine within MySQL is the original form of distribution
    for the storage engine. Contrast with the **InnoDB Plugin**. Starting with MySQL
    5.5, the InnoDB Plugin is merged back into the MySQL code base as the built-in
    `InnoDB` storage engine (known as InnoDB 1.1).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL内置的`InnoDB`存储引擎是存储引擎的最初形式。与**InnoDB插件**相对比。从MySQL 5.5开始，InnoDB插件被合并回MySQL代码库作为内置的`InnoDB`存储引擎（称为InnoDB
    1.1）。
- en: This distinction is important mainly in MySQL 5.1, where a feature or bug fix
    might apply to the InnoDB Plugin but not the built-in `InnoDB`, or vice versa.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这种区别在MySQL 5.1中非常重要，因为一个功能或错误修复可能适用于InnoDB插件，但不适用于内置的`InnoDB`，反之亦然。
- en: See Also [InnoDB](glossary.html#glos_innodb).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[InnoDB](glossary.html#glos_innodb)。
- en: business rules
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 商业规则
- en: The relationships and sequences of actions that form the basis of business software,
    used to run a commercial company. Sometimes these rules are dictated by law, other
    times by company policy. Careful planning ensures that the relationships encoded
    and enforced by the database, and the actions performed through application logic,
    accurately reflect the real policies of the company and can handle real-life situations.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 形成商业软件基础的关系和操作序列，用于运行商业公司。有时这些规则是由法律规定的，有时是由公司政策规定的。仔细规划确保数据库编码和强制执行的关系，以及应用逻辑执行的操作，准确反映公司的真实政策，并能处理现实生活中的情况。
- en: For example, an employee leaving a company might trigger a sequence of actions
    from the human resources department. The human resources database might also need
    the flexibility to represent data about a person who has been hired, but not yet
    started work. Closing an account at an online service might result in data being
    removed from a database, or the data might be moved or flagged so that it could
    be recovered if the account is re-opened. A company might establish policies regarding
    salary maximums, minimums, and adjustments, in addition to basic sanity checks
    such as the salary not being a negative number. A retail database might not allow
    a purchase with the same serial number to be returned more than once, or might
    not allow credit card purchases above a certain value, while a database used to
    detect fraud might allow these kinds of things.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，员工离开公司可能会触发人力资源部门的一系列操作。人力资源数据库可能还需要灵活性来表示已经被聘用但尚未开始工作的人的数据。关闭在线服务的帐户可能导致从数据库中删除数据，或者数据可能被移动或标记，以便在重新打开帐户时可以恢复。公司可能制定关于薪资上限、下限和调整的政策，以及基本的合理性检查，例如薪资不是负数。零售数据库可能不允许使用相同序列号购买的商品退货超过一次，或者可能不允许信用卡购买超过一定价值，而用于检测欺诈的数据库可能允许这些情况发生。
- en: See Also [relational](glossary.html#glos_relational).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[关系型](glossary.html#glos_relational)。
- en: C
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C
- en: .cfg file
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: .cfg文件
- en: A metadata file used with the `InnoDB` **transportable tablespace** feature.
    It is produced by the command `FLUSH TABLES ... FOR EXPORT`, puts one or more
    tables in a consistent state that can be copied to another server. The `.cfg`
    file is copied along with the corresponding **.ibd file**, and used to adjust
    the internal values of the `.ibd` file, such as the **space ID**, during the `ALTER
    TABLE ... IMPORT TABLESPACE` step.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 与`InnoDB`的**可传输表空间**功能一起使用的元数据文件。通过`FLUSH TABLES ... FOR EXPORT`命令生成，将一个或多个表置于可以复制到另一台服务器的一致状态。`.cfg`文件与相应的**.ibd
    文件**一起复制，并用于在`ALTER TABLE ... IMPORT TABLESPACE`步骤中调整`.ibd`文件的内部值，如**空间 ID**。
- en: See Also [.ibd file](glossary.html#glos_ibd_file), [space ID](glossary.html#glos_space_id),
    [transportable tablespace](glossary.html#glos_transportable_tablespace).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [.ibd 文件](glossary.html#glos_ibd_file), [空间 ID](glossary.html#glos_space_id),
    [可传输表空间](glossary.html#glos_transportable_tablespace).
- en: C
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: C
- en: A programming language that combines portability with performance and access
    to low-level hardware features, making it a popular choice for writing operating
    systems, drivers, and other kinds of system software. Many complex applications,
    languages, and reusable modules feature pieces written in C, tied together with
    high-level components written in other languages. Its core syntax is familiar
    to **C++**, **Java**, and **C#** developers.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一种将可移植性与性能和访问低级硬件特性相结合的编程语言，使其成为编写操作系统、驱动程序和其他类型的系统软件的热门选择。许多复杂的应用程序、语言和可重用模块都包含用C编写的部分，与用其他语言编写的高级组件结合在一起。其核心语法对**C++**、**Java**和**C#**开发人员来说很熟悉。
- en: See Also [C API](glossary.html#glos_c_api), [C++](glossary.html#glos_cplusplus),
    [C#](glossary.html#glos_csharp), [Java](glossary.html#glos_java).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [C API](glossary.html#glos_c_api), [C++](glossary.html#glos_cplusplus), [C#](glossary.html#glos_csharp),
    [Java](glossary.html#glos_java).
- en: C API
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: C API
- en: The C **API** code is distributed with MySQL. It is included in the **libmysqlclient**
    library and enables **C** programs to access a database.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: C **API** 代码随 MySQL 分发。它包含在**libmysqlclient**库中，使**C**程序能够访问数据库。
- en: See Also [API](glossary.html#glos_api), [C](glossary.html#glos_c), [libmysqlclient](glossary.html#glos_libmysqlclient).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [API](glossary.html#glos_api), [C](glossary.html#glos_c), [libmysqlclient](glossary.html#glos_libmysqlclient).
- en: C#
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: C#
- en: A programming language combining strong typing and object-oriented features,
    running within the Microsoft **.NET** framework or its open-source counterpart
    **Mono**. Often used for creating applications with the **ASP.net** framework.
    Its syntax is familiar to **C**, **C++** and **Java** developers.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一种结合强类型和面向对象特性的编程语言，运行在微软**.NET**框架或其开源对应物**Mono**中。常用于创建使用**ASP.net**框架的应用程序。其语法对**C**、**C++**和**Java**开发人员来说很熟悉。
- en: See Also [.NET](glossary.html#glos__net), [ASP.net](glossary.html#glos_asp_net),
    [C](glossary.html#glos_c), [Connector/NET](glossary.html#glos_connector_net),
    [C++](glossary.html#glos_cplusplus), [Java](glossary.html#glos_java), [Mono](glossary.html#glos_mono).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [.NET](glossary.html#glos__net), [ASP.net](glossary.html#glos_asp_net), [C](glossary.html#glos_c),
    [Connector/NET](glossary.html#glos_connector_net), [C++](glossary.html#glos_cplusplus),
    [Java](glossary.html#glos_java), [Mono](glossary.html#glos_mono).
- en: C++
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: C++
- en: A programming language with core syntax familiar to **C** developers. Provides
    access to low-level operations for performance, combined with higher-level data
    types, object-oriented features, and garbage collection. To write C++ applications
    for MySQL, you use the **Connector/C++** component.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一种核心语法对**C**开发人员很熟悉的编程语言。提供访问低级操作以实现性能，结合高级数据类型、面向对象特性和垃圾回收。要为 MySQL 编写 C++
    应用程序，您需要使用**Connector/C++**组件。
- en: See Also [C](glossary.html#glos_c), [Connector/C++](glossary.html#glos_connector_c__).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [C](glossary.html#glos_c), [Connector/C++](glossary.html#glos_connector_c__).
- en: cache
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存
- en: The general term for any memory area that stores copies of data for frequent
    or high-speed retrieval. In `InnoDB`, the primary kind of cache structure is the
    **buffer pool**.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 用于存储数据副本以便频繁或高速检索的任何内存区域的通用术语。在`InnoDB`中，主要的缓存结构是**缓冲池**。
- en: See Also [buffer](glossary.html#glos_buffer), [buffer pool](glossary.html#glos_buffer_pool).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [缓冲区](glossary.html#glos_buffer), [缓冲池](glossary.html#glos_buffer_pool).
- en: cardinality
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 基数
- en: The number of different values in a table **column**. When queries refer to
    columns that have an associated **index**, the cardinality of each column influences
    which access method is most efficient. For example, for a column with a **unique
    constraint**, the number of different values is equal to the number of rows in
    the table. If a table has a million rows but only 10 different values for a particular
    column, each value occurs (on average) 100,000 times. A query such as `SELECT
    c1 FROM t1 WHERE c1 = 50;` thus might return 1 row or a huge number of rows, and
    the database server might process the query differently depending on the cardinality
    of `c1`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 表**列**中不同值的数量。当查询涉及具有关联**索引**的列时，每列的基数影响哪种访问方法最有效。例如，对于具有**唯一约束**的列，不同值的数量等于表中的行数。如果表有一百万行，但对于特定列只有10个不同的值，每个值平均出现（平均）10万次。因此，诸如`SELECT
    c1 FROM t1 WHERE c1 = 50;`的查询可能返回1行或大量行，数据库服务器可能根据`c1`的基数不同而以不同方式处理查询。
- en: If the values in a column have a very uneven distribution, the cardinality might
    not be a good way to determine the best query plan. For example, `SELECT c1 FROM
    t1 WHERE c1 = x;` might return 1 row when `x=50` and a million rows when `x=30`.
    In such a case, you might need to use **index hints** to pass along advice about
    which lookup method is more efficient for a particular query.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列中的值分布非常不均匀，基数可能不是确定最佳查询计划的好方法。例如，当`x=50`时，`SELECT c1 FROM t1 WHERE c1 = x;`可能返回1行，而当`x=30`时可能返回一百万行。在这种情况下，您可能需要使用**索引提示**来传递关于哪种查找方法对于特定查询更有效的建议。
- en: Cardinality can also apply to the number of distinct values present in multiple
    columns, as in a **composite index**.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 基数也可以应用于多列中存在的不同值的数量，如**复合索引**。
- en: See Also [column](glossary.html#glos_column), [composite index](glossary.html#glos_composite_index),
    [index](glossary.html#glos_index), [index hint](glossary.html#glos_index_hint),
    [persistent statistics](glossary.html#glos_persistent_statistics), [random dive](glossary.html#glos_random_dive),
    [selectivity](glossary.html#glos_selectivity), [unique constraint](glossary.html#glos_unique_constraint).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [column](glossary.html#glos_column), [composite index](glossary.html#glos_composite_index),
    [index](glossary.html#glos_index), [index hint](glossary.html#glos_index_hint),
    [persistent statistics](glossary.html#glos_persistent_statistics), [random dive](glossary.html#glos_random_dive),
    [selectivity](glossary.html#glos_selectivity), [unique constraint](glossary.html#glos_unique_constraint)。
- en: change buffer
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 变更缓冲区
- en: A special data structure that records changes to **pages** in **secondary indexes**.
    These values could result from SQL [`INSERT`](insert.html "15.2.7 INSERT Statement"),
    [`UPDATE`](update.html "15.2.17 UPDATE Statement"), or [`DELETE`](delete.html
    "15.2.2 DELETE Statement") statements (**DML**). The set of features involving
    the change buffer is known collectively as **change buffering**, consisting of
    **insert buffering**, **delete buffering**, and **purge buffering**.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 记录**辅助索引**中**页面**更改的特殊数据结构。这些值可能来自SQL [`INSERT`](insert.html "15.2.7 INSERT
    Statement")、[`UPDATE`](update.html "15.2.17 UPDATE Statement")或[`DELETE`](delete.html
    "15.2.2 DELETE Statement")语句（**DML**）。涉及变更缓冲区的一组功能被统称为**变更缓冲**，包括**插入缓冲**、**删除缓冲**和**清除缓冲**。
- en: Changes are only recorded in the change buffer when the relevant page from the
    secondary index is not in the **buffer pool**. When the relevant index page is
    brought into the buffer pool while associated changes are still in the change
    buffer, the changes for that page are applied in the buffer pool (**merged**)
    using the data from the change buffer. Periodically, the **purge** operation that
    runs during times when the system is mostly idle, or during a slow shutdown, writes
    the new index pages to disk. The purge operation can write the disk blocks for
    a series of index values more efficiently than if each value were written to disk
    immediately.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当辅助索引的相关页面不在**缓冲池**中时，更改仅在变更缓冲区中记录。当相关索引页面在关联更改仍在变更缓冲区中时被带入缓冲池时，该页面的更改在缓冲池中应用（**合并**），使用变更缓冲区中的数据。定期，在系统大部分空闲时运行的**清除**操作，或在缓慢关闭时运行，将新的索引页面写入磁盘。清除操作可以更有效地写入一系列索引值的磁盘块，而不是立即将每个值写入磁盘。
- en: Physically, the change buffer is part of the **system tablespace**, so that
    the index changes remain buffered across database restarts. The changes are only
    applied (**merged**) when the pages are brought into the buffer pool due to some
    other read operation.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 从物理上看，变更缓冲区是**系统表空间**的一部分，因此索引更改在数据库重新启动时仍保持缓冲。只有当页面由于某些其他读取操作而被带入缓冲池时，这些更改才会被应用（**合并**）。
- en: The kinds and amount of data stored in the change buffer are governed by the
    [`innodb_change_buffering`](innodb-parameters.html#sysvar_innodb_change_buffering)
    and [`innodb_change_buffer_max_size`](innodb-parameters.html#sysvar_innodb_change_buffer_max_size)
    configuration options. To see information about the current data in the change
    buffer, issue the [`SHOW ENGINE INNODB STATUS`](show-engine.html "15.7.7.15 SHOW
    ENGINE Statement") command.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在更改缓冲区中的数据种类和数量由[`innodb_change_buffering`](innodb-parameters.html#sysvar_innodb_change_buffering)和[`innodb_change_buffer_max_size`](innodb-parameters.html#sysvar_innodb_change_buffer_max_size)配置选项控制。要查看更改缓冲区中当前数据的信息，请发出[`SHOW
    ENGINE INNODB STATUS`](show-engine.html "15.7.7.15 SHOW ENGINE Statement")命令。
- en: Formerly known as the **insert buffer**.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以前称为**插入缓冲**。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [change buffering](glossary.html#glos_change_buffering),
    [delete buffering](glossary.html#glos_delete_buffering), [DML](glossary.html#glos_dml),
    [insert buffer](glossary.html#glos_insert_buffer), [insert buffering](glossary.html#glos_insert_buffering),
    [merge](glossary.html#glos_merge), [page](glossary.html#glos_page), [purge](glossary.html#glos_purge),
    [purge buffering](glossary.html#glos_purge_buffering), [secondary index](glossary.html#glos_secondary_index),
    [system tablespace](glossary.html#glos_system_tablespace).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[缓冲池](glossary.html#glos_buffer_pool)、[更改缓冲](glossary.html#glos_change_buffering)、[删除缓冲](glossary.html#glos_delete_buffering)、[DML](glossary.html#glos_dml)、[插入缓冲](glossary.html#glos_insert_buffer)、[插入缓冲](glossary.html#glos_insert_buffering)、[合并](glossary.html#glos_merge)、[页](glossary.html#glos_page)、[清除](glossary.html#glos_purge)、[清除缓冲](glossary.html#glos_purge_buffering)、[二级索引](glossary.html#glos_secondary_index)、[系统表空间](glossary.html#glos_system_tablespace)。
- en: change buffering
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 更改缓冲
- en: The general term for the features involving the **change buffer**, consisting
    of **insert buffering**, **delete buffering**, and **purge buffering**. Index
    changes resulting from SQL statements, which could normally involve random I/O
    operations, are held back and performed periodically by a background **thread**.
    This sequence of operations can write the disk blocks for a series of index values
    more efficiently than if each value were written to disk immediately. Controlled
    by the [`innodb_change_buffering`](innodb-parameters.html#sysvar_innodb_change_buffering)
    and [`innodb_change_buffer_max_size`](innodb-parameters.html#sysvar_innodb_change_buffer_max_size)
    configuration options.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 涉及**更改缓冲区**的功能的通用术语，包括**插入缓冲**、**删除缓冲**和**清除缓冲**。由SQL语句导致的索引更改通常涉及随机I/O操作，这些更改被暂时保留，并由后台**线程**定期执行。这一系列操作可以更有效地写入一系列索引值的磁盘块，而不是立即将每个值写入磁盘。由[`innodb_change_buffering`](innodb-parameters.html#sysvar_innodb_change_buffering)和[`innodb_change_buffer_max_size`](innodb-parameters.html#sysvar_innodb_change_buffer_max_size)配置选项控制。
- en: See Also [change buffer](glossary.html#glos_change_buffer), [delete buffering](glossary.html#glos_delete_buffering),
    [insert buffering](glossary.html#glos_insert_buffering), [purge buffering](glossary.html#glos_purge_buffering).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[更改缓冲](glossary.html#glos_change_buffer)、[删除缓冲](glossary.html#glos_delete_buffering)、[插入缓冲](glossary.html#glos_insert_buffering)、[清除缓冲](glossary.html#glos_purge_buffering)。
- en: checkpoint
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 校验点
- en: As changes are made to data pages that are cached in the **buffer pool**, those
    changes are written to the **data files** sometime later, a process known as **flushing**.
    The checkpoint is a record of the latest changes (represented by an **LSN** value)
    that have been successfully written to the data files.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当对缓存在**缓冲池**中的数据页进行更改时，这些更改稍后会被写入**数据文件**，这个过程称为**刷新**。校验点是最新更改的记录（由**LSN**值表示），已成功写入数据文件。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [data files](glossary.html#glos_data_files),
    [flush](glossary.html#glos_flush), [fuzzy checkpointing](glossary.html#glos_fuzzy_checkpointing),
    [LSN](glossary.html#glos_lsn).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[缓冲池](glossary.html#glos_buffer_pool)、[数据文件](glossary.html#glos_data_files)、[刷新](glossary.html#glos_flush)、[模糊校验点](glossary.html#glos_fuzzy_checkpointing)、[LSN](glossary.html#glos_lsn)。
- en: checksum
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 校验码
- en: In `InnoDB`, a validation mechanism to detect corruption when a **page** in
    a **tablespace** is read from disk into the `InnoDB` **buffer pool**. This feature
    is controlled by the `innodb_checksums` configuration option in MySQL 5.5\. `innodb_checksums`
    is deprecated in MySQL 5.6.3, replaced by [`innodb_checksum_algorithm`](innodb-parameters.html#sysvar_innodb_checksum_algorithm).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InnoDB`中，当从磁盘读取**表空间**中的**页**到`InnoDB` **缓冲池**时，用于检测损坏的验证机制。此功能由MySQL 5.5中的`innodb_checksums`配置选项控制。`innodb_checksums`在MySQL
    5.6.3中已被弃用，由[`innodb_checksum_algorithm`](innodb-parameters.html#sysvar_innodb_checksum_algorithm)取代。
- en: The [**innochecksum**](innochecksum.html "6.6.2 innochecksum — Offline InnoDB
    File Checksum Utility") command helps diagnose corruption problems by testing
    the checksum values for a specified **tablespace** file while the MySQL server
    is shut down.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[**innochecksum**](innochecksum.html "6.6.2 innochecksum — 离线InnoDB文件校验实用程序")命令通过在MySQL服务器关闭时测试指定**表空间**文件的校验值来帮助诊断损坏问题。'
- en: MySQL also uses checksums for replication purposes. For details, see the configuration
    options [`binlog_checksum`](replication-options-binary-log.html#sysvar_binlog_checksum),
    [`source_verify_checksum`](replication-options-binary-log.html#sysvar_source_verify_checksum)
    or [`master_verify_checksum`](replication-options-binary-log.html#sysvar_master_verify_checksum),
    and [`replica_sql_verify_checksum`](replication-options-replica.html#sysvar_replica_sql_verify_checksum)
    or [`slave_sql_verify_checksum`](replication-options-replica.html#sysvar_slave_sql_verify_checksum).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL还为复制目的使用校验和。有关详细信息，请参阅配置选项[`binlog_checksum`](replication-options-binary-log.html#sysvar_binlog_checksum)，[`source_verify_checksum`](replication-options-binary-log.html#sysvar_source_verify_checksum)或[`master_verify_checksum`](replication-options-binary-log.html#sysvar_master_verify_checksum)，以及[`replica_sql_verify_checksum`](replication-options-replica.html#sysvar_replica_sql_verify_checksum)或[`slave_sql_verify_checksum`](replication-options-replica.html#sysvar_slave_sql_verify_checksum)。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [page](glossary.html#glos_page),
    [tablespace](glossary.html#glos_tablespace).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[缓冲池](glossary.html#glos_buffer_pool)，[页](glossary.html#glos_page)，[表空间](glossary.html#glos_tablespace)。
- en: child table
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 子表
- en: In a **foreign key** relationship, a child table is one whose rows refer (or
    point) to rows in another table with an identical value for a specific column.
    This is the table that contains the `FOREIGN KEY ... REFERENCES` clause and optionally
    `ON UPDATE` and `ON DELETE` clauses. The corresponding row in the **parent table**
    must exist before the row can be created in the child table. The values in the
    child table can prevent delete or update operations on the parent table, or can
    cause automatic deletion or updates in the child table, based on the `ON CASCADE`
    option used when creating the foreign key.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在**外键**关系中，子表是指其行引用（或指向）另一张表中具有特定列相同值的行。这是包含`FOREIGN KEY ... REFERENCES`子句和可选`ON
    UPDATE`和`ON DELETE`子句的表。在创建子表中的行之前，父表中必须存在相应的行。子表中的值可以阻止对父表的删除或更新操作，或者可以根据创建外键时使用的`ON
    CASCADE`选项在子表中自动删除或更新。
- en: See Also [foreign key](glossary.html#glos_foreign_key), [parent table](glossary.html#glos_parent_table).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[外键](glossary.html#glos_foreign_key)，[父表](glossary.html#glos_parent_table)。
- en: clean page
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 清洁页
- en: A **page** in the `InnoDB` **buffer pool** where all changes made in memory
    have also been written (**flushed**) to the [data files](glossary.html#glos_data_files
    "data files"). The opposite of a **dirty page**.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一个在`InnoDB` **缓冲池**中的**页**，其中所有在内存中进行的更改也已被写入（**刷新**）到[数据文件](glossary.html#glos_data_files
    "data files")中。与**脏页**相反。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [data files](glossary.html#glos_data_files),
    [dirty page](glossary.html#glos_dirty_page), [flush](glossary.html#glos_flush),
    [page](glossary.html#glos_page).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[缓冲池](glossary.html#glos_buffer_pool)，[数据文件](glossary.html#glos_data_files)，[脏页](glossary.html#glos_dirty_page)，[刷新](glossary.html#glos_flush)，[页](glossary.html#glos_page)。
- en: clean shutdown
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 干净关闭
- en: A **shutdown** that completes without errors and applies all changes to `InnoDB`
    tables before finishing, as opposed to a **crash** or a **fast shutdown**. Synonym
    for **slow shutdown**.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 一个在完成所有更改到`InnoDB`表之前无错误地完���并应用所有更改的**关闭**，与**崩溃**或**快速关闭**相对。**慢关闭**的同义词。
- en: See Also [crash](glossary.html#glos_crash), [fast shutdown](glossary.html#glos_fast_shutdown),
    [shutdown](glossary.html#glos_shutdown), [slow shutdown](glossary.html#glos_slow_shutdown).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[崩溃](glossary.html#glos_crash)，[快速关闭](glossary.html#glos_fast_shutdown)，[关闭](glossary.html#glos_shutdown)，[慢关闭](glossary.html#glos_slow_shutdown)。
- en: client
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: A program that runs outside the database server, communicating with the database
    by sending requests through a **Connector**, or an **API** made available through
    **client libraries**. It can run on the same physical machine as the database
    server, or on a remote machine connected over a network. It can be a special-purpose
    database application, or a general-purpose program like the [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") command-line processor.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一个在数据库服务器外部运行的程序，通过**连接器**或通过**客户端库**提供的**API**向数据库发送请求进行通信。它可以在与数据库服务器相同的物理机器上运行，也可以在通过网络连接的远程机器上运行。它可以是一个专用数据库应用程序，也可以是像[**mysql**](mysql.html
    "6.5.1 mysql — MySQL命令行客户端")命令行处理器这样的通用程序。
- en: See Also [API](glossary.html#glos_api), [client libraries](glossary.html#glos_client_libraries),
    [connector](glossary.html#glos_connector), [mysql](glossary.html#glos_mysql),
    [server](glossary.html#glos_server).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[API](glossary.html#glos_api)，[客户端库](glossary.html#glos_client_libraries)，[连接器](glossary.html#glos_connector)，[mysql](glossary.html#glos_mysql)，[服务器](glossary.html#glos_server)。
- en: client libraries
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端库
- en: Files containing collections of functions for working with databases. By compiling
    your program with these libraries, or installing them on the same system as your
    application, you can run a database application (known as a **client**) on a machine
    that does not have the MySQL server installed; the application accesses the database
    over a network. With MySQL, you can use the **libmysqlclient** library from the
    MySQL server itself.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 包含用于处理数据库的函数集合的文件。通过使用这些库编译您的程序，或在与您的应用程序相同的系统上安装它们，您可以在没有安装MySQL服务器的机器上运行一个数据库应用程序（称为**客户端**）；应用程序通过网络访问数据库。使用MySQL，您可以使用来自MySQL服务器的**libmysqlclient**库。
- en: See Also [client](glossary.html#glos_client), [libmysqlclient](glossary.html#glos_libmysqlclient).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[客户端](glossary.html#glos_client)，[libmysqlclient](glossary.html#glos_libmysqlclient)。
- en: client-side prepared statement
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端端准备语句
- en: A type of **prepared statement** where the caching and reuse are managed locally,
    emulating the functionality of **server-side prepared statements**. Historically,
    used by some **Connector/J**, **Connector/ODBC**, and **Connector/PHP** developers
    to work around issues with server-side stored procedures. With modern MySQL server
    versions, server-side prepared statements are recommended for performance, scalability,
    and memory efficiency.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**准备语句**类型，其中缓存和重用在本地管理，模拟**服务器端准备语句**的功能。历史上，一些**Connector/J**，**Connector/ODBC**和**Connector/PHP**开发人员使用这种方法来解决与服务器端存储过程相关的问题。对于现代MySQL服务器版本，建议使用服务器端准备语句以获得更好的性能、可伸缩性和内存效率。
- en: See Also [Connector/J](glossary.html#glos_connector_j), [Connector/ODBC](glossary.html#glos_connector_odbc),
    [Connector/PHP](glossary.html#glos_connector_php), [prepared statement](glossary.html#glos_prepared_statement).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Connector/J](glossary.html#glos_connector_j)，[Connector/ODBC](glossary.html#glos_connector_odbc)，[Connector/PHP](glossary.html#glos_connector_php)，[准备语句](glossary.html#glos_prepared_statement)。
- en: CLOB
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: CLOB
- en: An SQL data type ([`TINYTEXT`](blob.html "13.3.4 The BLOB and TEXT Types"),
    [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types"), [`MEDIUMTEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types"), or [`LONGTEXT`](blob.html "13.3.4 The BLOB
    and TEXT Types")) for objects containing any kind of character data, of arbitrary
    size. Used for storing text-based documents, with associated character set and
    collation order. The techniques for handling CLOBs within a MySQL application
    vary with each **Connector** and **API**. MySQL Connector/ODBC defines `TEXT`
    values as `LONGVARCHAR`. For storing binary data, the equivalent is the **BLOB**
    type.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一种SQL数据类型（[`TINYTEXT`](blob.html "13.3.4 BLOB和TEXT类型"), [`TEXT`](blob.html "13.3.4 BLOB和TEXT类型"),
    [`MEDIUMTEXT`](blob.html "13.3.4 BLOB和TEXT类型"), 或 [`LONGTEXT`](blob.html "13.3.4 BLOB和TEXT类型")）用于存储任意大小的包含任何类型字符数据的对象。用于存储基于文本的文档，带有相关字符集和排序规则。处理MySQL应用程序中的CLOB的技术因每个**连接器**和**API**而异。MySQL
    Connector/ODBC将`TEXT`值定义为`LONGVARCHAR`。用于存储二进制数据的等效类型是**BLOB**类型。
- en: See Also [API](glossary.html#glos_api), [BLOB](glossary.html#glos_blob), [connector](glossary.html#glos_connector),
    [Connector/ODBC](glossary.html#glos_connector_odbc).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[API](glossary.html#glos_api)，[BLOB](glossary.html#glos_blob)，[连接器](glossary.html#glos_connector)，[Connector/ODBC](glossary.html#glos_connector_odbc)。
- en: clustered index
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 聚集索引
- en: The `InnoDB` term for a **primary key** index. `InnoDB` table storage is organized
    based on the values of the primary key columns, to speed up queries and sorts
    involving the primary key columns. For best performance, choose the primary key
    columns carefully based on the most performance-critical queries. Because modifying
    the columns of the clustered index is an expensive operation, choose primary columns
    that are rarely or never updated.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`术语用于**主键**索引。`InnoDB`表存储是根据主键列的值组织的，以加快涉及主键列的查询和排序。为了获得最佳性能，请根据最关键的查询仔细选择主键列。由于修改聚集索引的列是一项昂贵的操作，请选择很少或从不更新的主要列。'
- en: In the Oracle Database product, this type of table is known as an **index-organized
    table**.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在Oracle数据库产品中，这种类型的表被称为**索引组织表**。
- en: See Also [index](glossary.html#glos_index), [primary key](glossary.html#glos_primary_key),
    [secondary index](glossary.html#glos_secondary_index).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[索引](glossary.html#glos_index)，[主键](glossary.html#glos_primary_key)，[次要索引](glossary.html#glos_secondary_index)。
- en: cold backup
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 冷备份
- en: A **backup** taken while the database is shut down. For busy applications and
    websites, this might not be practical, and you might prefer a **warm backup**
    or a **hot backup**.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库关闭时进行的备份。对于繁忙的应用程序和网站，这可能不太实际，您可能更喜欢**温备份**或**热备份**。
- en: See Also [backup](glossary.html#glos_backup), [hot backup](glossary.html#glos_hot_backup),
    [warm backup](glossary.html#glos_warm_backup).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [备份](glossary.html#glos_backup), [热备份](glossary.html#glos_hot_backup), [温备份](glossary.html#glos_warm_backup)。
- en: column
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 列
- en: A data item within a **row**, whose storage and semantics are defined by a data
    type. Each **table** and **index** is largely defined by the set of columns it
    contains.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 行内的数据项，其存储和语义由数据类型定义。每个**表**和**索引**主要由其包含的列集合定义。
- en: Each column has a **cardinality** value. A column can be the **primary key**
    for its table, or part of the primary key. A column can be subject to a **unique
    constraint**, a **NOT NULL constraint**, or both. Values in different columns,
    even across different tables, can be linked by a **foreign key** relationship.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 每个列都有一个**基数**值。一个列可以是其表的**主键**，或者是主键的一部分。一个列可以受到**唯一约束**、**非空约束**或两者的约束。不同列中的值，甚至跨不同表，可以通过**外键**关系连接。
- en: In discussions of MySQL internal operations, sometimes **field** is used as
    a synonym.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论MySQL内部操作时，有时会将**字段**用作同义词。
- en: See Also [cardinality](glossary.html#glos_cardinality), [foreign key](glossary.html#glos_foreign_key),
    [index](glossary.html#glos_index), [NOT NULL constraint](glossary.html#glos_not_null_constraint),
    [primary key](glossary.html#glos_primary_key), [row](glossary.html#glos_row),
    [table](glossary.html#glos_table), [unique constraint](glossary.html#glos_unique_constraint).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [基数](glossary.html#glos_cardinality), [外键](glossary.html#glos_foreign_key),
    [索引](glossary.html#glos_index), [非空约束](glossary.html#glos_not_null_constraint),
    [主键](glossary.html#glos_primary_key), [行](glossary.html#glos_row), [表](glossary.html#glos_table),
    [唯一约束](glossary.html#glos_unique_constraint)。
- en: column index
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 列索引
- en: An **index** on a single column.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 单列上的**索引**。
- en: See Also [composite index](glossary.html#glos_composite_index), [index](glossary.html#glos_index).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [复合索引](glossary.html#glos_composite_index), [索引](glossary.html#glos_index)。
- en: column prefix
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 列前缀
- en: When an **index** is created with a length specification, such as `CREATE INDEX
    idx ON t1 (c1(N))`, only the first N characters of the column value are stored
    in the index. Keeping the index prefix small makes the index compact, and the
    memory and disk I/O savings help performance. (Although making the index prefix
    too small can hinder query optimization by making rows with different values appear
    to the query optimizer to be duplicates.)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建带有长度规范的**索引**时，例如 `CREATE INDEX idx ON t1 (c1(N))`，只有列值的前N个字符存储在索引中。保持索引前缀较小使索引紧凑，内存和磁盘I/O节省有助于性能。
    （尽管使索引前缀过小可能会通过使具有不同值的行在查询优化器看起来是重复的来阻碍查询优化。）
- en: For columns containing binary values or long text strings, where sorting is
    not a major consideration and storing the entire value in the index would waste
    space, the index automatically uses the first N (typically 768) characters of
    the value to do lookups and sorts.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含二进制值或长文本字符串的列，其中排序不是主要考虑因素，且在索引中存储整个值会浪费空间的情况下，索引会自动使用值的前N个（通常为768）个字符进行查找和排序。
- en: See Also [index](glossary.html#glos_index).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [索引](glossary.html#glos_index)。
- en: command interceptor
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 命令拦截器
- en: Synonym for **statement interceptor**. One aspect of the **interceptor** design
    pattern available for both **Connector/NET** and **Connector/J**. What Connector/NET
    calls a command, Connector/J refers to as a statement. Contrast with **exception
    interceptor**.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**语句拦截器**的同义词。适用于**Connector/NET**和**Connector/J**的拦截器设计模式的一个方面。Connector/NET称之为命令，Connector/J称之为语句。与**异常拦截器**形成对比。'
- en: See Also [Connector/J](glossary.html#glos_connector_j), [Connector/NET](glossary.html#glos_connector_net),
    [exception interceptor](glossary.html#glos_exception_interceptor), [interceptor](glossary.html#glos_interceptor),
    [statement interceptor](glossary.html#glos_statement_interceptor).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [Connector/J](glossary.html#glos_connector_j), [Connector/NET](glossary.html#glos_connector_net),
    [异常拦截器](glossary.html#glos_exception_interceptor), [拦截器](glossary.html#glos_interceptor),
    [语句拦截器](glossary.html#glos_statement_interceptor)。
- en: commit
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 提交
- en: A **SQL** statement that ends a **transaction**, making permanent any changes
    made by the transaction. It is the opposite of **rollback**, which undoes any
    changes made in the transaction.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一个结束**事务**的**SQL**语句，使事务所做的任何更改永久化。它是**回滚**的反义词，后者会撤消事务中所做的任何更改。
- en: '`InnoDB` uses an **optimistic** mechanism for commits, so that changes can
    be written to the data files before the commit actually occurs. This technique
    makes the commit itself faster, with the tradeoff that more work is required in
    case of a rollback.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` 使用一种**乐观**机制进行提交，这样在提交实际发生之前就可以将更改写入数据文件。这种技术使得提交本身更快，但在回滚时需要更多工作。'
- en: By default, MySQL uses the **autocommit** setting, which automatically issues
    a commit following each SQL statement.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，MySQL 使用**自动提交**设置，这意味着每个 SQL 语句后会自动执行提交。
- en: See Also [autocommit](glossary.html#glos_autocommit), [optimistic](glossary.html#glos_optimistic),
    [rollback](glossary.html#glos_rollback), [SQL](glossary.html#glos_sql), [transaction](glossary.html#glos_transaction).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[autocommit](glossary.html#glos_autocommit)、[optimistic](glossary.html#glos_optimistic)、[rollback](glossary.html#glos_rollback)、[SQL](glossary.html#glos_sql)、[transaction](glossary.html#glos_transaction)。
- en: compact row format
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 紧凑行格式
- en: A **row format** for InnoDB tables. It was the default row format from MySQL
    5.0.3 to MySQL 5.7.8. In MySQL 8.0, the default row format is defined by the [`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format)
    configuration option, which has a default setting of **DYNAMIC**. The **COMPACT**
    row format provides a more compact representation for nulls and variable-length
    columns than the **REDUNDANT** row format.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 InnoDB 表的一种**行格式**。从 MySQL 5.0.3 到 MySQL 5.7.8，默认行格式为紧凑行格式。在 MySQL 8.0 中，默认行格式由[`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format)配置选项定义，其默认设置为**DYNAMIC**。**COMPACT**行格式为
    null 和可变长度列提供了比**REDUNDANT**行格式更紧凑的表示。
- en: For additional information about `InnoDB` `COMPACT` row format, see [Section 17.10,
    “InnoDB Row Formats”](innodb-row-format.html "17.10 InnoDB Row Formats").
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`InnoDB` `COMPACT`行格式的更多信息，请参阅[第17.10节，“InnoDB行格式”](innodb-row-format.html
    "17.10 InnoDB Row Formats")。
- en: See Also [dynamic row format](glossary.html#glos_dynamic_row_format), [file
    format](glossary.html#glos_file_format), [redundant row format](glossary.html#glos_redundant_row_format),
    [row format](glossary.html#glos_row_format).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[dynamic row format](glossary.html#glos_dynamic_row_format)、[file format](glossary.html#glos_file_format)、[redundant
    row format](glossary.html#glos_redundant_row_format)、[row format](glossary.html#glos_row_format)。
- en: composite index
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 复合索引
- en: An **index** that includes multiple columns.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 包含多列的**索引**。
- en: See Also [index](glossary.html#glos_index).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[index](glossary.html#glos_index)。
- en: compressed backup
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩备份
- en: The compression feature of the **MySQL Enterprise Backup** product makes a compressed
    copy of each tablespace, changing the extension from `.ibd` to `.ibz`. Compressing
    backup data allows you to keep more backups on hand, and reduces the time to transfer
    backups to a different server. The data is uncompressed during the restore operation.
    When a compressed backup operation processes a table that is already compressed,
    it skips the compression step for that table, because compressing again would
    result in little or no space savings.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**MySQL Enterprise Backup**产品的压缩功能会对每个表空间进行压缩备份，将扩展名从`.ibd`更改为`.ibz`。压缩备份数据可以让您保留更多备份，并减少将备份传输到不同服务器的时间。在恢复操作期间，数据会被解压缩。当压缩备份操作处理已经压缩的表时，会跳过该表的压缩步骤，因为再次压缩将几乎不会节省空间。'
- en: A set of files produced by the **MySQL Enterprise Backup** product, where each
    **tablespace** is compressed. The compressed files are renamed with a `.ibz` file
    extension.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 由**MySQL Enterprise Backup**产品生成的一组文件，其中每个**表空间**都经过压缩。压缩文件以`.ibz`文件扩展名重命名。
- en: Applying **compression** at the start of the backup process helps to avoid storage
    overhead during the compression process, and to avoid network overhead when transferring
    the backup files to another server. The process of **applying** the **binary log**
    takes longer, and requires uncompressing the backup files.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在备份过程开始时应用**压缩**有助于避免在压缩过程中产生存储开销，并避免在将备份文件传输到另一台服务器时产生网络开销。**应用**二进制日志的过程需要更长时间，并需要解压备份文件。
- en: See Also [apply](glossary.html#glos_apply), [binary log](glossary.html#glos_binary_log),
    [compression](glossary.html#glos_compression), [hot backup](glossary.html#glos_hot_backup),
    [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup), [tablespace](glossary.html#glos_tablespace).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[apply](glossary.html#glos_apply)、[binary log](glossary.html#glos_binary_log)、[compression](glossary.html#glos_compression)、[hot
    backup](glossary.html#glos_hot_backup)、[MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup)、[tablespace](glossary.html#glos_tablespace)。
- en: compressed row format
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩行格式
- en: A **row format** that enables data and index **compression** for `InnoDB` tables.
    Large fields are stored away from the page that holds the rest of the row data,
    as in **dynamic row format**. Both index pages and the large fields are compressed,
    yielding memory and disk savings. Depending on the structure of the data, the
    decrease in memory and disk usage might or might not outweigh the performance
    overhead of uncompressing the data as it is used. See [Section 17.9, “InnoDB Table
    and Page Compression”](innodb-compression.html "17.9 InnoDB Table and Page Compression")
    for usage details.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**行格式**，可以为`InnoDB`表启用数据和索引**压缩**。大字段存储在页面之外，这些页面包含其余的行数据，就像**动态行格式**一样。索引页面和大字段都经过压缩，节省了内存和磁盘空间。根据数据结构的不同，内存和磁盘使用量的减少可能会或可能不会超过解压数据时的性能开销。有关使用详细信息，请参见[第17.9节，“InnoDB表和页面压缩”](innodb-compression.html
    "17.9 InnoDB表和页面压缩")。
- en: For additional information about `InnoDB` `COMPRESSED` row format, see [DYNAMIC
    Row Format](innodb-row-format.html#innodb-row-format-dynamic "DYNAMIC Row Format").
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`InnoDB`的`COMPRESSED`行格式的其他信息，请参见[DYNAMIC行格式](innodb-row-format.html#innodb-row-format-dynamic
    "DYNAMIC行格式")。
- en: See Also [compression](glossary.html#glos_compression), [dynamic row format](glossary.html#glos_dynamic_row_format),
    [row format](glossary.html#glos_row_format).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[压缩](glossary.html#glos_compression)，[动态行格式](glossary.html#glos_dynamic_row_format)，[行格式](glossary.html#glos_row_format)。
- en: compressed table
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩表
- en: A table for which the data is stored in compressed form. For `InnoDB`, it is
    a table created with `ROW_FORMAT=COMPRESSED`. See [Section 17.9, “InnoDB Table
    and Page Compression”](innodb-compression.html "17.9 InnoDB Table and Page Compression")
    for more information.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 数据以压缩形式存储的表。对于`InnoDB`，这是使用`ROW_FORMAT=COMPRESSED`创建的表。有关更多信息，请参见[第17.9节，“InnoDB表和页面压缩”](innodb-compression.html
    "17.9 InnoDB表和页面压缩")。
- en: See Also [compressed row format](glossary.html#glos_compressed_row_format),
    [compression](glossary.html#glos_compression).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[压缩行格式](glossary.html#glos_compressed_row_format)，[压缩](glossary.html#glos_compression)。
- en: compression
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩
- en: A feature with wide-ranging benefits from using less disk space, performing
    less I/O, and using less memory for caching.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 一项具有广泛好处的功能，可以减少磁盘空间使用、减少I/O操作，以及减少用于缓存的内存。
- en: '`InnoDB` supports both table-level and page-level compression. `InnoDB` page
    compression is also referred to as **transparent page compression**. For more
    information about `InnoDB` compression, see [Section 17.9, “InnoDB Table and Page
    Compression”](innodb-compression.html "17.9 InnoDB Table and Page Compression").'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`支持表级和页面级压缩。`InnoDB`页面压缩也称为**透明页面压缩**。有关`InnoDB`压缩的更多信息，请参见[第17.9节，“InnoDB表和页面压缩”](innodb-compression.html
    "17.9 InnoDB表和页面压缩")。'
- en: Another type of compression is the **compressed backup** feature of the **MySQL
    Enterprise Backup** product.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种压缩类型是**MySQL Enterprise Backup**产品的**压缩备份**功能。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [compressed backup](glossary.html#glos_compressed_backup),
    [compressed row format](glossary.html#glos_compressed_row_format), [DML](glossary.html#glos_dml),
    [transparent page compression](glossary.html#glos_transparent_page_compression).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[缓冲池](glossary.html#glos_buffer_pool)，[压缩备份](glossary.html#glos_compressed_backup)，[压缩行格式](glossary.html#glos_compressed_row_format)，[DML](glossary.html#glos_dml)，[透明页面压缩](glossary.html#glos_transparent_page_compression)。
- en: compression failure
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩失败
- en: 'Not actually an error, rather an expensive operation that can occur when using
    **compression** in combination with **DML** operations. It occurs when: updates
    to a compressed **page** overflow the area on the page reserved for recording
    modifications; the page is compressed again, with all changes applied to the table
    data; the re-compressed data does not fit on the original page, requiring MySQL
    to split the data into two new pages and compress each one separately. To check
    the frequency of this condition, query the [`INFORMATION_SCHEMA.INNODB_CMP`](information-schema-innodb-cmp-table.html
    "28.4.6 The INFORMATION_SCHEMA INNODB_CMP and INNODB_CMP_RESET Tables") table
    and check how much the value of the `COMPRESS_OPS` column exceeds the value of
    the `COMPRESS_OPS_OK` column. Ideally, compression failures do not occur often;
    when they do, you can adjust the [`innodb_compression_level`](innodb-parameters.html#sysvar_innodb_compression_level),
    [`innodb_compression_failure_threshold_pct`](innodb-parameters.html#sysvar_innodb_compression_failure_threshold_pct),
    and [`innodb_compression_pad_pct_max`](innodb-parameters.html#sysvar_innodb_compression_pad_pct_max)
    configuration options.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上并不是错误，而是在使用**压缩**与**DML**操作结合时可能发生的昂贵操作。当更新压缩的**页**的内容超出了用于记录修改的区域时，会发生这种情况；然后再次对页面进行压缩，将所有更改应用于表数据；重新压缩的数据无法适应原始页面，需要MySQL将数据拆分为两个新页面，并分别对每个页面进行压缩。要检查此条件发生的频率，请查询[`INFORMATION_SCHEMA.INNODB_CMP`](information-schema-innodb-cmp-table.html
    "28.4.6 The INFORMATION_SCHEMA INNODB_CMP and INNODB_CMP_RESET Tables")表，并检查`COMPRESS_OPS`列的值超过`COMPRESS_OPS_OK`列的值的情况。理想情况下，压缩失败不应经常发生；如果发生了，您可以调整[`innodb_compression_level`](innodb-parameters.html#sysvar_innodb_compression_level)、[`innodb_compression_failure_threshold_pct`](innodb-parameters.html#sysvar_innodb_compression_failure_threshold_pct)和[`innodb_compression_pad_pct_max`](innodb-parameters.html#sysvar_innodb_compression_pad_pct_max)配置选项。
- en: See Also [compression](glossary.html#glos_compression), [DML](glossary.html#glos_dml),
    [page](glossary.html#glos_page).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[compression](glossary.html#glos_compression)、[DML](glossary.html#glos_dml)、[page](glossary.html#glos_page)。
- en: concatenated index
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 连接索引
- en: See [composite index](glossary.html#glos_composite_index).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[composite index](glossary.html#glos_composite_index)。
- en: concurrency
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 并发性
- en: The ability of multiple operations (in database terminology, **transactions**)
    to run simultaneously, without interfering with each other. Concurrency is also
    involved with performance, because ideally the protection for multiple simultaneous
    transactions works with a minimum of performance overhead, using efficient mechanisms
    for **locking**.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 多个操作（在数据库术语中为**事务**）能够同时运行，而不会相互干扰的能力。并发性也涉及性能，因为理想情况下，对于多个同时运行的事务的保护应该具有最小的性能开销，使用高效的**锁定**机制。
- en: See Also [ACID](glossary.html#glos_acid), [locking](glossary.html#glos_locking),
    [transaction](glossary.html#glos_transaction).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[ACID](glossary.html#glos_acid)、[locking](glossary.html#glos_locking)、[transaction](glossary.html#glos_transaction)。
- en: configuration file
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件
- en: The file that holds the **option** values used by MySQL at startup. Traditionally,
    on Linux and Unix this file is named `my.cnf`, and on Windows it is named `my.ini`.
    You can set a number of options related to InnoDB under the `[mysqld]` section
    of the file.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动时由MySQL使用的保存**选项**值的文件。传统上，在Linux和Unix上，该文件名为`my.cnf`，在Windows上为`my.ini`。您可以在文件的`[mysqld]`部分设置与InnoDB相关的许多选项。
- en: See [Section 6.2.2.2, “Using Option Files”](option-files.html "6.2.2.2 Using
    Option Files") for information about where MySQL searches for configuration files.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 有关MySQL搜索配置文件的信息，请参见[Section 6.2.2.2, “Using Option Files”](option-files.html
    "6.2.2.2 Using Option Files")。
- en: 'When you use the **MySQL Enterprise Backup** product, you typically use two
    configuration files: one that specifies where the data comes from and how it is
    structured (which could be the original configuration file for your server), and
    a stripped-down one containing only a small set of options that specify where
    the backup data goes and how it is structured. The configuration files used with
    the **MySQL Enterprise Backup** product must contain certain options that are
    typically left out of regular configuration files, so you might need to add options
    to your existing configuration file for use with **MySQL Enterprise Backup**.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用**MySQL Enterprise Backup**产品时，通常会使用两个配置文件：一个指定数据来源和结构的文件（可能是服务器的原始配置文件），另一个是一个精简版本，只包含一小部分选项，用于指定备份数据的存储位置和结构。与**MySQL
    Enterprise Backup**产品一起使用的配置文件必须包含一些通常不包含在常规配置文件中的选项，因此您可能需要向现有配置文件中添加选项，以便与**MySQL
    Enterprise Backup**一起使用。
- en: See Also [my.cnf](glossary.html#glos_my_cnf), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [option](glossary.html#glos_option), [option file](glossary.html#glos_option_file).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[my.cnf](glossary.html#glos_my_cnf)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[选项](glossary.html#glos_option)，[选项文件](glossary.html#glos_option_file)。
- en: connection
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 连接
- en: The communication channel between an application and a MySQL server. The performance
    and scalability of a database applications is influenced by on how quickly a database
    connection can be established, how many can be made simultaneously, and how long
    they persist. The parameters such as **host**, **port**, and so on are represented
    as a **connection string** in **Connector/NET**, and as a **DSN** in **Connector/ODBC**.
    High-traffic systems make use of an optimization known as the **connection pool**.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序与MySQL服务器之间的通信通道。数据库应用程序的性能和可伸缩性受到数据库连接建立速度、同时建立连接数量以及连接持续时间的影响。在**Connector/NET**中，诸如**主机**、**端口**等参数被表示为**连接字符串**，而在**Connector/ODBC**中被表示为**DSN**。高流量系统利用一种称为**连接池**的优化。
- en: See Also [connection pool](glossary.html#glos_connection_pool), [connection
    string](glossary.html#glos_connection_string), [Connector/NET](glossary.html#glos_connector_net),
    [Connector/ODBC](glossary.html#glos_connector_odbc), [DSN](glossary.html#glos_dsn),
    [host](glossary.html#glos_host), [port](glossary.html#glos_port).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[连接池](glossary.html#glos_connection_pool)，[连接字符串](glossary.html#glos_connection_string)，[Connector/NET](glossary.html#glos_connector_net)，[Connector/ODBC](glossary.html#glos_connector_odbc)，[DSN](glossary.html#glos_dsn)，[主机](glossary.html#glos_host)，[端口](glossary.html#glos_port)。
- en: connection pool
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池
- en: A cache area that allows database **connections** to be reused within the same
    application or across different applications, rather than setting up and tearing
    down a new connection for every database operation. This technique is common with
    **J2EE** application servers. **Java** applications using **Connector/J** can
    use the connection pool features of **Tomcat** and other application servers.
    The reuse is transparent to applications; the application still opens and closes
    the connection as usual.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 一个缓存区域，允许数据库**连接**在同一应用程序内或跨不同应用程序中被重复使用，而不是为每个数据库操作建立和拆除新连接。这种技术在**J2EE**应用服务器中很常见。使用**Connector/J**的**Java**应用程序可以使用**Tomcat**和其他应用服务器的连接池功能。重用对应用程序是透明的；应用程序仍然像往常一样打开和关闭连接。
- en: See Also [connection](glossary.html#glos_connection), [Connector/J](glossary.html#glos_connector_j),
    [J2EE](glossary.html#glos_j2ee), [Tomcat](glossary.html#glos_tomcat).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[连接](glossary.html#glos_connection)，[Connector/J](glossary.html#glos_connector_j)，[J2EE](glossary.html#glos_j2ee)，[Tomcat](glossary.html#glos_tomcat)。
- en: connection string
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串
- en: A representation of the parameters for a database **connection**, encoded as
    a string literal so that it can be used in program code. The parts of the string
    represent connection parameters such as **host** and **port**. A connection string
    contains several key-value pairs, separated by semicolons. Each key-value pair
    is joined with an equal sign. Frequently used with **Connector/NET** applications;
    see [Creating a Connector/NET Connection String](/doc/connector-net/en/connector-net-connections-string.html)
    for details.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库**连接**参数的表示，编码为字符串文字，以便在程序代码中使用。字符串的各部分代表连接参数，如**主机**和**端口**。连接字符串包含多个键值对，用分号分隔。每个键值对用等号连接。经常与**Connector/NET**应用程序一起使用；有关详细信息，请参阅[创建Connector/NET连接字符串](/doc/connector-net/en/connector-net-connections-string.html)。
- en: See Also [connection](glossary.html#glos_connection), [Connector/NET](glossary.html#glos_connector_net),
    [host](glossary.html#glos_host), [port](glossary.html#glos_port).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[连接](glossary.html#glos_connection)，[Connector/NET](glossary.html#glos_connector_net)，[主机](glossary.html#glos_host)，[端口](glossary.html#glos_port)。
- en: connector
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 连接器
- en: MySQL Connectors provide connectivity to the MySQL server for **client** programs.
    Several programming languages and frameworks each have their own associated Connector.
    Contrast with the lower-level access provided by an **API**.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL连接器为**客户端**程序提供与MySQL服务器的连接。几种编程语言和框架都有各自关联的连接器。与**API**提供的较低级别访问形成对比。
- en: See Also [API](glossary.html#glos_api), [client](glossary.html#glos_client),
    [Connector/C++](glossary.html#glos_connector_c__), [Connector/J](glossary.html#glos_connector_j),
    [Connector/NET](glossary.html#glos_connector_net), [Connector/ODBC](glossary.html#glos_connector_odbc).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[API](glossary.html#glos_api)，[客户端](glossary.html#glos_client)，[连接器/C++](glossary.html#glos_connector_c__)，[Connector/J](glossary.html#glos_connector_j)，[Connector/NET](glossary.html#glos_connector_net)，[Connector/ODBC](glossary.html#glos_connector_odbc)。
- en: Connector/C++
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 连接器/C++
- en: Connector/C++ 8.0 can be used to access MySQL servers that implement a [document
    store](document-store.html "Chapter 22 Using MySQL as a Document Store"), or in
    a traditional way using SQL queries. It enables development of C++ applications
    using X DevAPI, or plain C applications using X DevAPI for C. It also enables
    development of C++ applications that use the legacy JDBC-based API from Connector/C++
    1.1\. For more information, see [MySQL Connector/C++ 8.3 Developer Guide](/doc/connector-cpp/8.3/en/).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Connector/C++ 8.0 可用于访问实现[文档存储](document-store.html "第22章 将 MySQL 用作文档存储")的
    MySQL 服务器，或者以传统方式使用 SQL 查询。它支持使用 X DevAPI 开发 C++ 应用程序，或者使用 X DevAPI for C 开发普通的
    C 应用程序。它还支持使用 Connector/C++ 1.1 中的基于 JDBC 的遗留 API 开发 C++ 应用程序。有关更多信息，请参见[MySQL
    Connector/C++ 8.3 开发人员指南](/doc/connector-cpp/8.3/en/)。
- en: See Also [client](glossary.html#glos_client), [connector](glossary.html#glos_connector),
    [JDBC](glossary.html#glos_jdbc).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [客户端](glossary.html#glos_client), [连接器](glossary.html#glos_connector), [JDBC](glossary.html#glos_jdbc)。
- en: Connector/J
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Connector/J
- en: 'A **JDBC** driver that provides connectivity for **client** applications developed
    in the **Java** programming language. MySQL Connector/J is a JDBC Type 4 driver:
    a pure-Java implementation of the MySQL protocol that does not rely on the MySQL
    **client libraries**. For full details, see [MySQL Connector/J 8.0 Developer Guide](/doc/connector-j/8.0/en/).'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 为使用 **Java** 编程语言开发的 **客户端**应用程序提供连接的 **JDBC** 驱动程序。MySQL Connector/J 是一个 JDBC
    类型 4 驱动程序：它是 MySQL 协议的纯 Java 实现，不依赖于 MySQL **客户端库**。有关详细信息，请参见[MySQL Connector/J
    8.0 开发人员指南](/doc/connector-j/8.0/en/)。
- en: See Also [client](glossary.html#glos_client), [client libraries](glossary.html#glos_client_libraries),
    [connector](glossary.html#glos_connector), [Java](glossary.html#glos_java), [JDBC](glossary.html#glos_jdbc).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [客户端](glossary.html#glos_client), [客户端库](glossary.html#glos_client_libraries),
    [连接器](glossary.html#glos_connector), [Java](glossary.html#glos_java), [JDBC](glossary.html#glos_jdbc)。
- en: Connector/NET
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: Connector/NET
- en: A MySQL **connector** for developers writing applications using languages, technologies,
    and frameworks such as **C#**, **.NET**, **Mono**, **Visual Studio**, **ASP.net**,
    and **ADO.net**.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 为使用诸如 **C#**、**.NET**、**Mono**、**Visual Studio**、**ASP.net** 和 **ADO.net** 等语言、技术和框架编写应��程序的开发人员提供的
    MySQL **连接器**。
- en: See Also [ADO.NET](glossary.html#glos_ado_net), [ASP.net](glossary.html#glos_asp_net),
    [connector](glossary.html#glos_connector), [C#](glossary.html#glos_csharp), [Mono](glossary.html#glos_mono),
    [Visual Studio](glossary.html#glos_visual_studio).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [ADO.NET](glossary.html#glos_ado_net), [ASP.net](glossary.html#glos_asp_net),
    [连接器](glossary.html#glos_connector), [C#](glossary.html#glos_csharp), [Mono](glossary.html#glos_mono),
    [Visual Studio](glossary.html#glos_visual_studio)。
- en: Connector/ODBC
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: Connector/ODBC
- en: The family of MySQL ODBC drivers that provide access to a MySQL database using
    the industry standard Open Database Connectivity (**ODBC**) API. Formerly called
    MyODBC drivers. For full details, see [MySQL Connector/ODBC Developer Guide](/doc/connector-odbc/en/).
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 提供使用行业标准开放数据库连接 (**ODBC**) API 访问 MySQL 数据库的 MySQL ODBC 驱动程序系列。以前称为 MyODBC 驱动程序。有关详细信息，请参见[MySQL
    Connector/ODBC 开发人员指南](/doc/connector-odbc/en/)。
- en: See Also [connector](glossary.html#glos_connector), [ODBC](glossary.html#glos_odbc).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [连接器](glossary.html#glos_connector), [ODBC](glossary.html#glos_odbc)。
- en: Connector/PHP
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Connector/PHP
- en: A version of the `mysql` and `mysqli` **APIs** for **PHP** optimized for the
    Windows operating system.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Windows 操作系统优化的 **PHP** 中的 `mysql` 和 `mysqli` **API** 版本。
- en: See Also [connector](glossary.html#glos_connector), [PHP](glossary.html#glos_php),
    [PHP API](glossary.html#glos_php_api).
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [连接器](glossary.html#glos_connector), [PHP](glossary.html#glos_php), [PHP
    API](glossary.html#glos_php_api)。
- en: consistent read
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性读取
- en: A read operation that uses **snapshot** information to present query results
    based on a point in time, regardless of changes performed by other transactions
    running at the same time. If queried data has been changed by another transaction,
    the original data is reconstructed based on the contents of the **undo log**.
    This technique avoids some of the **locking** issues that can reduce **concurrency**
    by forcing transactions to wait for other transactions to finish.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 一种读取操作，利用**快照**信息根据某一时间点呈现查询结果，不受同时运行的其他事务所做更改的影响。如果查询的数据已被另一个事务更改，原始数据将根据**撤销日志**的内容重建。这种技术避免了一些可能降低**并发性**的**锁定**问题，因为它强制事务等待其他事务完成。
- en: With **REPEATABLE READ** **isolation level**, the snapshot is based on the time
    when the first read operation is performed. With **READ COMMITTED** isolation
    level, the snapshot is reset to the time of each consistent read operation.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**可重复读** **隔离级别**时，快照是基于执行第一次读取操作时的时间。使用**读提交**隔离级别时，快照将重置为每次一致性读取操作的时间。
- en: Consistent read is the default mode in which `InnoDB` processes `SELECT` statements
    in **READ COMMITTED** and **REPEATABLE READ** isolation levels. Because a consistent
    read does not set any locks on the tables it accesses, other sessions are free
    to modify those tables while a consistent read is being performed on the table.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 一致读取是`InnoDB`在**读提交**和**可重复读**隔离级别中处理`SELECT`语句的默认模式。由于一致读取不在访问的表上设置任何锁，其他会话可以在对表执行一致读取时自由修改这些表。
- en: For technical details about the applicable isolation levels, see [Section 17.7.2.3,
    “Consistent Nonlocking Reads”](innodb-consistent-read.html "17.7.2.3 Consistent
    Nonlocking Reads").
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 有关适用隔离级别的技术细节，请参阅[第17.7.2.3节，“一致的非锁定读取”](innodb-consistent-read.html "17.7.2.3 一致的非锁定读取")。
- en: See Also [concurrency](glossary.html#glos_concurrency), [isolation level](glossary.html#glos_isolation_level),
    [locking](glossary.html#glos_locking), [READ COMMITTED](glossary.html#glos_read_committed),
    [REPEATABLE READ](glossary.html#glos_repeatable_read), [snapshot](glossary.html#glos_snapshot),
    [transaction](glossary.html#glos_transaction), [undo log](glossary.html#glos_undo_log).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[并发性](glossary.html#glos_concurrency)，[隔离级别](glossary.html#glos_isolation_level)，[锁定](glossary.html#glos_locking)，[读提交](glossary.html#glos_read_committed)，[可重复读](glossary.html#glos_repeatable_read)，[快照](glossary.html#glos_snapshot)，[事务](glossary.html#glos_transaction)，[撤销日志](glossary.html#glos_undo_log)。
- en: constraint
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: An automatic test that can block database changes to prevent data from becoming
    inconsistent. (In computer science terms, a kind of assertion related to an invariant
    condition.) Constraints are a crucial component of the **ACID** philosophy, to
    maintain data consistency. Constraints supported by MySQL include **FOREIGN KEY
    constraints** and **unique constraints**.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 一种自动测试，可以阻止数据库更改，以防止数据变得不一致。（在计算机科学术语中，与不变条件相关的一种断言类型。）约束是**ACID**哲学的关键组成部分，用于维护数据一致性。MySQL支持的约束包括**外键约束**和**唯一约束**。
- en: See Also [ACID](glossary.html#glos_acid), [foreign key](glossary.html#glos_foreign_key),
    [unique constraint](glossary.html#glos_unique_constraint).
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ACID](glossary.html#glos_acid)，[外键](glossary.html#glos_foreign_key)，[唯一约束](glossary.html#glos_unique_constraint)。
- en: counter
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器
- en: A value that is incremented by a particular kind of `InnoDB` operation. Useful
    for measuring how busy a server is, troubleshooting the sources of performance
    issues, and testing whether changes (for example, to configuration settings or
    indexes used by queries) have the desired low-level effects. Different kinds of
    counters are available through **Performance Schema** tables and **INFORMATION_SCHEMA**
    tables, particularly `INFORMATION_SCHEMA.INNODB_METRICS`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 由特定类型的`InnoDB`操作递增的值。用于衡量服务器的繁忙程度，排查性能问题的来源，并测试更改（例如配置设置或查询使用的索引）是否具有期望的低级影响。通过**性能模式**表和**INFORMATION_SCHEMA**表，可以获得不同类型的计数器，特别是`INFORMATION_SCHEMA.INNODB_METRICS`。
- en: See Also [INFORMATION_SCHEMA](glossary.html#glos_information_schema), [metrics
    counter](glossary.html#glos_metrics_counter), [Performance Schema](glossary.html#glos_performance_schema).
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[INFORMATION_SCHEMA](glossary.html#glos_information_schema)，[度量计数器](glossary.html#glos_metrics_counter)，[性能模式](glossary.html#glos_performance_schema)。
- en: covering index
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖索引
- en: An **index** that includes all the columns retrieved by a query. Instead of
    using the index values as pointers to find the full table rows, the query returns
    values from the index structure, saving disk I/O. `InnoDB` can apply this optimization
    technique to more indexes than MyISAM can, because `InnoDB` **secondary indexes**
    also include the **primary key** columns. `InnoDB` cannot apply this technique
    for queries against tables modified by a transaction, until that transaction ends.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**索引**包括查询检索的所有列。查询不再使用索引值作为指针来查找完整的表行，而是从索引结构返回值，节省磁盘I/O。`InnoDB`可以对比`MyISAM`更多的索引应用这种优化技术，因为`InnoDB`的**次要索引**也包括**主键**列。在事务修改的表上，`InnoDB`无法在事务结束之前对查询应用这种技术。
- en: Any **column index** or **composite index** could act as a covering index, given
    the right query. Design your indexes and queries to take advantage of this optimization
    technique wherever possible.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 任何**列索引**或**复合索引**都可以作为覆盖索引，只要查询正确。设计您的索引和查询以尽可能利用这种优化技术。
- en: See Also [column index](glossary.html#glos_column_index), [composite index](glossary.html#glos_composite_index),
    [index](glossary.html#glos_index), [primary key](glossary.html#glos_primary_key),
    [secondary index](glossary.html#glos_secondary_index).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [列索引](glossary.html#glos_column_index), [复合索引](glossary.html#glos_composite_index),
    [索引](glossary.html#glos_index), [主键](glossary.html#glos_primary_key), [次要索引](glossary.html#glos_secondary_index)。
- en: CPU-bound
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: CPU绑定
- en: A type of **workload** where the primary **bottleneck** is CPU operations in
    memory. Typically involves read-intensive operations where the results can all
    be cached in the **buffer pool**.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**工作负载**类型，其中主要**瓶颈**是内存中的CPU操作。通常涉及读取密集型操作，其中结果可以全部缓存在**缓冲池**中。
- en: See Also [bottleneck](glossary.html#glos_bottleneck), [buffer pool](glossary.html#glos_buffer_pool),
    [workload](glossary.html#glos_workload).
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [瓶颈](glossary.html#glos_bottleneck), [缓冲池](glossary.html#glos_buffer_pool),
    [工作负载](glossary.html#glos_workload)。
- en: crash
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 崩溃
- en: MySQL uses the term “crash” to refer generally to any unexpected **shutdown**
    operation where the server cannot do its normal cleanup. For example, a crash
    could happen due to a hardware fault on the database server machine or storage
    device; a power failure; a potential data mismatch that causes the MySQL server
    to halt; a **fast shutdown** initiated by the DBA; or many other reasons. The
    robust, automatic **crash recovery** for **InnoDB** tables ensures that data is
    made consistent when the server is restarted, without any extra work for the DBA.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL使用术语“崩溃”来泛指任何意外的**关闭**操作，服务器无法进行正常清理的情况。例如，崩溃可能是由于数据库服务器机器或存储设备上的硬件故障；电源故障；潜在的数据不匹配导致MySQL服务器停止；由DBA发起的**快速关闭**；或其他许多原因。对于**InnoDB**表，强大的自动**崩溃恢复**确保在服务器重新启动时使数据一致，而无需DBA进行任何额外工作。
- en: See Also [crash recovery](glossary.html#glos_crash_recovery), [fast shutdown](glossary.html#glos_fast_shutdown),
    [InnoDB](glossary.html#glos_innodb), [shutdown](glossary.html#glos_shutdown).
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [崩溃恢复](glossary.html#glos_crash_recovery), [快速关闭](glossary.html#glos_fast_shutdown),
    [InnoDB](glossary.html#glos_innodb), [关闭](glossary.html#glos_shutdown)。
- en: crash recovery
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 崩溃恢复
- en: The cleanup activities that occur when MySQL is started again after a **crash**.
    For **InnoDB** tables, changes from incomplete transactions are replayed using
    data from the **redo log**. Changes that were **committed** before the crash,
    but not yet written into the **data files**, are reconstructed from the **doublewrite
    buffer**. When the database is shut down normally, this type of activity is performed
    during shutdown by the **purge** operation.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL在**崩溃**后重新启动时发生的清理活动。对于**InnoDB**表，使用**重做日志**中的数据重放不完整事务的更改。在崩溃前已**提交**但尚未写入**数据文件**的更改将从**双写缓冲区**中重建。当数据库正常关闭时，此类活动将在关闭期间通过**清除**操作执行。
- en: During normal operation, committed data can be stored in the **change buffer**
    for a period of time before being written to the data files. There is always a
    tradeoff between keeping the data files up-to-date, which introduces performance
    overhead during normal operation, and buffering the data, which can make shutdown
    and crash recovery take longer.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常操作期间，已提交的数据可以在**更改缓冲区**中存储一段时间，然后再写入数据文件。始终存在着在保持数据文件最新的状态之间进行权衡，这会在正常操作期间引入性能开销，并在关闭和崩溃恢复时缓冲数据，这可能会使关闭和崩溃恢复时间变长。
- en: See Also [change buffer](glossary.html#glos_change_buffer), [commit](glossary.html#glos_commit),
    [crash](glossary.html#glos_crash), [data files](glossary.html#glos_data_files),
    [doublewrite buffer](glossary.html#glos_doublewrite_buffer), [InnoDB](glossary.html#glos_innodb),
    [purge](glossary.html#glos_purge), [redo log](glossary.html#glos_redo_log).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [更改缓冲区](glossary.html#glos_change_buffer), [提交](glossary.html#glos_commit),
    [崩溃](glossary.html#glos_crash), [数据文件](glossary.html#glos_data_files), [双写缓冲区](glossary.html#glos_doublewrite_buffer),
    [InnoDB](glossary.html#glos_innodb), [清除](glossary.html#glos_purge), [重做日志](glossary.html#glos_redo_log)。
- en: CRUD
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD
- en: Acronym for “create, read, update, delete”, a common sequence of operations
    in database applications. Often denotes a class of applications with relatively
    simple database usage (basic **DDL**, **DML** and **query** statements in **SQL**)
    that can be implemented quickly in any language.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: “创建、读取、更新、删除”的缩写，是数据库应用程序中常见的操作序列。通常表示一类相对简单的数据库使用（基本的**DDL**、**DML**和**查询**语句在**SQL**中），可以快速在任何语言中实现。
- en: See Also [DDL](glossary.html#glos_ddl), [DML](glossary.html#glos_dml), [query](glossary.html#glos_query),
    [SQL](glossary.html#glos_sql).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [DDL](glossary.html#glos_ddl), [DML](glossary.html#glos_dml), [查询](glossary.html#glos_query),
    [SQL](glossary.html#glos_sql)。
- en: cursor
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 光标
- en: An internal MySQL data structure that represents the result set of an SQL statement.
    Often used with **prepared statements** and **dynamic SQL**. It works like an
    iterator in other high-level languages, producing each value from the result set
    as requested.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 SQL 语句结果集的内部 MySQL 数据结构。通常与**预处理语句**和**动态 SQL**一起使用。它在其他高级语言中类似于迭代器，按需生成结果集中的每个值。
- en: Although SQL usually handles the processing of cursors for you, you might delve
    into the inner workings when dealing with performance-critical code.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SQL 通常会为您处理游标的处理，但在处理性能关键代码时，您可能需要深入了解内部工作原理。
- en: See Also [dynamic SQL](glossary.html#glos_dynamic_sql), [prepared statement](glossary.html#glos_prepared_statement),
    [query](glossary.html#glos_query).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [动态 SQL](glossary.html#glos_dynamic_sql)，[预处理语句](glossary.html#glos_prepared_statement)，[查询](glossary.html#glos_query)。
- en: D
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: D
- en: data definition language
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 数据定义语言
- en: See [DDL](glossary.html#glos_ddl).
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [DDL](glossary.html#glos_ddl)。
- en: data dictionary
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 数据字典
- en: Metadata that keeps track of database objects such as **tables**, **indexes**,
    and table **columns**. For the MySQL data dictionary, introduced in MySQL 8.0,
    metadata is physically located in `InnoDB` **file-per-table** tablespace files
    in the `mysql` database directory. For the `InnoDB` data dictionary, metadata
    is physically located in the `InnoDB` **system tablespace**.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据用于跟踪数据库对象，如**表**、**索引**和表**列**。对于 MySQL 数据字典（在 MySQL 8.0 中引入），元数据物理上位于 `mysql`
    数据库目录中的 `InnoDB` **每表一个文件**表空间文件中。对于 `InnoDB` 数据字典，元数据物理上位于 `InnoDB` **系统表空间**中。
- en: Because the **MySQL Enterprise Backup** product always backs up the `InnoDB`
    system tablespace, all backups include the contents of the `InnoDB` data dictionary.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 **MySQL Enterprise Backup** 产品始终备份 `InnoDB` 系统表空间，所以所有备份都包括 `InnoDB` 数据字典的内容。
- en: See Also [column](glossary.html#glos_column), [file-per-table](glossary.html#glos_file_per_table),
    [.frm file](glossary.html#glos_frm_file), [index](glossary.html#glos_index), [MySQL
    Enterprise Backup](glossary.html#glos_mysql_enterprise_backup), [system tablespace](glossary.html#glos_system_tablespace),
    [table](glossary.html#glos_table).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [列](glossary.html#glos_column)，[每表一个文件](glossary.html#glos_file_per_table)，[.frm
    文件](glossary.html#glos_frm_file)，[索引](glossary.html#glos_index)，[MySQL Enterprise
    Backup](glossary.html#glos_mysql_enterprise_backup)，[系��表空间](glossary.html#glos_system_tablespace)，[表](glossary.html#glos_table)。
- en: data directory
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 数据目录
- en: The directory under which each MySQL **instance** keeps the **data files** for
    `InnoDB` and the directories representing individual databases. Controlled by
    the [`datadir`](server-system-variables.html#sysvar_datadir) configuration option.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 MySQL **实例**下的目录中保存着 `InnoDB` 的**数据文件**和代表各个数据库的目录。由 [`datadir`](server-system-variables.html#sysvar_datadir)
    配置选项控制。
- en: See Also [data files](glossary.html#glos_data_files), [instance](glossary.html#glos_instance).
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [数据文件](glossary.html#glos_data_files)，[实例](glossary.html#glos_instance)。
- en: data files
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 数据文件
- en: The files that physically contain **table** and **index** data.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 物理上包含**表**和**索引**数据的文件。
- en: The `InnoDB` **system tablespace**, which holds the `InnoDB` **data dictionary**
    and is capable of holding data for multiple `InnoDB` tables, is represented by
    one or more `.ibdata` data files.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` **系统表空间**保存着 `InnoDB` **数据字典**，能够存储多个 `InnoDB` 表的数据，由一个或多个 `.ibdata`
    数据文件表示。'
- en: File-per-table tablespaces, which hold data for a single `InnoDB` table, are
    represented by a `.ibd` data file.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `InnoDB` 表的数据都存储在一个 `.ibd` 数据文件中，代表着**每表一个文件**表空间。
- en: General tablespaces (introduced in MySQL 5.7.6), which can hold data for multiple
    `InnoDB` tables, are also represented by a `.ibd` data file.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 通用表空间（在 MySQL 5.7.6 中引入），可以存储多个 `InnoDB` 表的数据，也由一个 `.ibd` 数据文件表示。
- en: See Also [data dictionary](glossary.html#glos_data_dictionary), [file-per-table](glossary.html#glos_file_per_table),
    [general tablespace](glossary.html#glos_general_tablespace), [.ibd file](glossary.html#glos_ibd_file),
    [ibdata file](glossary.html#glos_ibdata_file), [index](glossary.html#glos_index),
    [system tablespace](glossary.html#glos_system_tablespace), [table](glossary.html#glos_table),
    [tablespace](glossary.html#glos_tablespace).
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [数据字典](glossary.html#glos_data_dictionary)，[每表一个文件](glossary.html#glos_file_per_table)，[通用表空间](glossary.html#glos_general_tablespace)，[.ibd
    文件](glossary.html#glos_ibd_file)，[ibdata 文件](glossary.html#glos_ibdata_file)，[索引](glossary.html#glos_index)，[系统表空间](glossary.html#glos_system_tablespace)，[表](glossary.html#glos_table)，[表空间](glossary.html#glos_tablespace)。
- en: data manipulation language
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 数据操作语言
- en: See [DML](glossary.html#glos_dml).
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [DML](glossary.html#glos_dml)。
- en: data warehouse
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 数据仓库
- en: A database system or application that primarily runs large **queries**. The
    read-only or read-mostly data might be organized in **denormalized** form for
    query efficiency. Can benefit from the optimizations for **read-only transactions**
    in MySQL 5.6 and higher. Contrast with **OLTP**.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 主要运行大型**查询**的数据库系统或应用程序。只读或主要为只读数据可能以**去规范化**形式组织以提高查询效率。可以从MySQL 5.6及更高版本中的**只读事务**优化中受益。与**OLTP**相对比。
- en: See Also [denormalized](glossary.html#glos_denormalized), [OLTP](glossary.html#glos_oltp),
    [query](glossary.html#glos_query), [read-only transaction](glossary.html#glos_read_only_transaction).
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[去规范化](glossary.html#glos_denormalized)，[OLTP](glossary.html#glos_oltp)，[查询](glossary.html#glos_query)，[只读事务](glossary.html#glos_read_only_transaction)。
- en: database
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库
- en: Within the MySQL **data directory**, each database is represented by a separate
    directory. The InnoDB **system tablespace**, which can hold table data from multiple
    databases within a MySQL **instance**, is kept in **data files** that reside outside
    of individual database directories. When **file-per-table** mode is enabled, the
    **.ibd files** representing individual InnoDB tables are stored inside the database
    directories unless created elsewhere using the `DATA DIRECTORY` clause. General
    tablespaces, introduced in MySQL 5.7.6, also hold table data in **.ibd files**.
    Unlike file-per-table **.ibd files**, general tablespace **.ibd files** can hold
    table data from multiple databases within a MySQL **instance**, and can be assigned
    to directories relative to or independent of the MySQL data directory.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL的**数据目录**中，每个数据库都由一个单独的目录表示。InnoDB的**系统表空间**可以容纳来自MySQL **实例**内多个数据库的表数据，保存在位于单个数据库目录之外的**数据文件**中。当启用**每表一个文件**模式时，代表单个InnoDB表的**.ibd文件**存储在数据库目录内，除非使用`DATA
    DIRECTORY`子句在其他位置创建。在MySQL 5.7.6中引入的通用表空间也使用**.ibd文件**保存表数据。与每表一个文件的**.ibd文件**不同，通用表空间的**.ibd文件**可以保存来自MySQL
    **实例**内多个数据库的表数据，并且可以分配给相对于MySQL数据目录或独立于MySQL数据目录的目录。
- en: For long-time MySQL users, a database is a familiar notion. Users coming from
    an Oracle Database background may find that the MySQL meaning of a database is
    closer to what Oracle Database calls a **schema**.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 对于长期使用MySQL的用户，数据库是一个熟悉的概念。来自Oracle Database背景的用户可能会发现MySQL对数据库的定义更接近于Oracle
    Database所称的**模式**。
- en: See Also [data files](glossary.html#glos_data_files), [file-per-table](glossary.html#glos_file_per_table),
    [.ibd file](glossary.html#glos_ibd_file), [instance](glossary.html#glos_instance),
    [schema](glossary.html#glos_schema), [system tablespace](glossary.html#glos_system_tablespace).
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[数据文件](glossary.html#glos_data_files)，[每表一个文件](glossary.html#glos_file_per_table)，[.ibd文件](glossary.html#glos_ibd_file)，[实例](glossary.html#glos_instance)，[模式](glossary.html#glos_schema)，[系统表空间](glossary.html#glos_system_tablespace)。
- en: DCL
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: DCL
- en: Data control language, a set of **SQL** statements for managing privileges.
    In MySQL, consists of the [`GRANT`](grant.html "15.7.1.6 GRANT Statement") and
    [`REVOKE`](revoke.html "15.7.1.8 REVOKE Statement") statements. Contrast with
    **DDL** and **DML**.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 数据控制语言，一组管理权限的**SQL**语句。在MySQL中，包括[`GRANT`](grant.html "15.7.1.6 GRANT Statement")和[`REVOKE`](revoke.html
    "15.7.1.8 REVOKE Statement")语句。与**DDL**和**DML**相对比。
- en: See Also [DDL](glossary.html#glos_ddl), [DML](glossary.html#glos_dml), [SQL](glossary.html#glos_sql).
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[DDL](glossary.html#glos_ddl)，[DML](glossary.html#glos_dml)，[SQL](glossary.html#glos_sql)。
- en: DDEX provider
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: DDEX提供程序
- en: A feature that lets you use the data design tools within **Visual Studio** to
    manipulate the schema and objects within a MySQL database. For MySQL applications
    using **Connector/NET**, the MySQL Visual Studio Plugin acts as a DDEX provider
    with MySQL 5.0 and later.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 一项功能，允许您在**Visual Studio**中使用数据设计工具来操作MySQL数据库中的模式和对象。对于使用**Connector/NET**的MySQL应用程序，MySQL
    Visual Studio插件充当MySQL 5.0及更高版本的DDEX提供程序。
- en: See Also [Visual Studio](glossary.html#glos_visual_studio).
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[Visual Studio](glossary.html#glos_visual_studio)。
- en: DDL
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: DDL
- en: Data definition language, a set of **SQL** statements for manipulating the database
    itself rather than individual table rows. Includes all forms of the `CREATE`,
    `ALTER`, and `DROP` statements. Also includes the `TRUNCATE` statement, because
    it works differently than a `DELETE FROM *`table_name`*` statement, even though
    the ultimate effect is similar.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 数据定义语言，一组用于操作数据库本身而不是单个表行的**SQL**语句。包括所有形式的`CREATE`，`ALTER`和`DROP`语句。还包括`TRUNCATE`语句，因为它的工作方式与`DELETE
    FROM *table_name*`语句不同，尽管最终效果相似。
- en: DDL statements automatically **commit** the current **transaction**; they cannot
    be **rolled back**.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: DDL语句会自动**提交**当前**事务**；它们无法**回滚**。
- en: The `InnoDB` [online DDL](glossary.html#glos_online_ddl "online DDL") feature
    enhances performance for [`CREATE INDEX`](create-index.html "15.1.15 CREATE INDEX
    Statement"), [`DROP INDEX`](drop-index.html "15.1.27 DROP INDEX Statement"), and
    many types of [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    operations. See [Section 17.12, “InnoDB and Online DDL”](innodb-online-ddl.html
    "17.12 InnoDB and Online DDL") for more information. Also, the `InnoDB` [file-per-table](glossary.html#glos_file_per_table
    "file-per-table") setting can affect the behavior of [`DROP TABLE`](drop-table.html
    "15.1.32 DROP TABLE Statement") and [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement") operations.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`的[在线 DDL](glossary.html#glos_online_ddl "在线 DDL")功能提升了[`CREATE INDEX`](create-index.html
    "15.1.15 CREATE INDEX 语句")、[`DROP INDEX`](drop-index.html "15.1.27 DROP INDEX
    语句")以及多种[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE 语句")操作的性能。更多信息请参见[第17.12节，“InnoDB
    和在线 DDL”](innodb-online-ddl.html "17.12 InnoDB 和在线 DDL")。此外，`InnoDB`的[每表一个文件](glossary.html#glos_file_per_table
    "每表一个文件")设置可能会影响[`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE 语句")和[`TRUNCATE
    TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE 语句")操作的行为。'
- en: Contrast with **DML** and **DCL**.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 与**DML**和**DCL**相对比。
- en: See Also [commit](glossary.html#glos_commit), [DCL](glossary.html#glos_dcl),
    [DML](glossary.html#glos_dml), [file-per-table](glossary.html#glos_file_per_table),
    [rollback](glossary.html#glos_rollback), [SQL](glossary.html#glos_sql), [transaction](glossary.html#glos_transaction).
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [提交](glossary.html#glos_commit), [DCL](glossary.html#glos_dcl), [DML](glossary.html#glos_dml),
    [每表一个文件](glossary.html#glos_file_per_table), [回滚](glossary.html#glos_rollback),
    [SQL](glossary.html#glos_sql), [事务](glossary.html#glos_transaction)。
- en: deadlock
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 死锁
- en: A situation where different **transactions** are unable to proceed, because
    each holds a **lock** that the other needs. Because both transactions are waiting
    for a resource to become available, neither one ever releases the locks it holds.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 不同**事务**由于互相持有对方需要的**锁**而无法继续进行的情况。因为两个事务都在等待资源可用，所以它们都不会释放自己持有的锁。
- en: A deadlock can occur when the transactions lock rows in multiple tables (through
    statements such as `UPDATE` or `SELECT ... FOR UPDATE`), but in the opposite order.
    A deadlock can also occur when such statements lock ranges of index records and
    **gaps**, with each transaction acquiring some locks but not others due to a timing
    issue.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 当事务以相反的顺序锁定多个表中的行（通过`UPDATE`或`SELECT ... FOR UPDATE`等语句）时，可能会发生死锁。当这些语句锁定索引记录和**间隙**的范围时，也可能会发生死锁，因为每个事务由于时间问题而获取了一些锁但没有获取其他锁。
- en: For background information on how deadlocks are automatically detected and handled,
    see [Section 17.7.5.2, “Deadlock Detection”](innodb-deadlock-detection.html "17.7.5.2 Deadlock
    Detection"). For tips on avoiding and recovering from deadlock conditions, see
    [Section 17.7.5.3, “How to Minimize and Handle Deadlocks”](innodb-deadlocks-handling.html
    "17.7.5.3 How to Minimize and Handle Deadlocks").
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 有关死锁如何自动检测和处理的背景信息，请参见[第17.7.5.2节，“死锁检测”](innodb-deadlock-detection.html "17.7.5.2 死锁检测")。有关避免和从死锁条件中恢复的提示，请参见[第17.7.5.3节，“如何最小化和处理死锁”](innodb-deadlocks-handling.html
    "17.7.5.3 如何最小化和处理死锁")。
- en: See Also [gap](glossary.html#glos_gap), [lock](glossary.html#glos_lock), [transaction](glossary.html#glos_transaction).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [间隙](glossary.html#glos_gap), [锁](glossary.html#glos_lock), [事务](glossary.html#glos_transaction)。
- en: deadlock detection
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 死锁检测
- en: A mechanism that automatically detects when a **deadlock** occurs, and automatically
    **rolls back** one of the **transactions** involved (the **victim**). Deadlock
    detection can be disabled using the [`innodb_deadlock_detect`](innodb-parameters.html#sysvar_innodb_deadlock_detect)
    configuration option.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 一种机制，自动检测**死锁**发生，并自动**回滚**其中一个涉及的**事务**（**受害者**）。可以使用[`innodb_deadlock_detect`](innodb-parameters.html#sysvar_innodb_deadlock_detect)配置选项禁用死锁检测。
- en: See Also [deadlock](glossary.html#glos_deadlock), [rollback](glossary.html#glos_rollback),
    [transaction](glossary.html#glos_transaction), [victim](glossary.html#glos_victim).
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [死锁](glossary.html#glos_deadlock), [回滚](glossary.html#glos_rollback), [事务](glossary.html#glos_transaction),
    [受害者](glossary.html#glos_victim)。
- en: delete
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 删除
- en: When `InnoDB` processes a `DELETE` statement, the rows are immediately marked
    for deletion and no longer are returned by queries. The storage is reclaimed sometime
    later, during the periodic garbage collection known as the **purge** operation.
    For removing large quantities of data, related operations with their own performance
    characteristics are **TRUNCATE** and **DROP**.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 当`InnoDB`处理`DELETE`语句时，行立即标记为删除，并不再被查询返回。存储在稍后的时间内回收，即所谓的**清理**操作。用于删除大量数据的相关操作及其自身的性能特征是**TRUNCATE**和**DROP**。
- en: See Also [drop](glossary.html#glos_drop), [purge](glossary.html#glos_purge),
    [truncate](glossary.html#glos_truncate).
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[drop](glossary.html#glos_drop)，[purge](glossary.html#glos_purge)，[truncate](glossary.html#glos_truncate)。
- en: delete buffering
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 删除缓冲
- en: The technique of storing changes to secondary index pages, resulting from `DELETE`
    operations, in the **change buffer** rather than writing the changes immediately,
    so that the physical writes can be performed to minimize random I/O. (Because
    delete operations are a two-step process, this operation buffers the write that
    normally marks an index record for deletion.) It is one of the types of **change
    buffering**; the others are **insert buffering** and **purge buffering**.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 将由`DELETE`操作导致的次要索引页的更改存储在**更改缓冲区**中，而不是立即写入更改，以便执行物理写入以最小化随机I/O。（因为删除操作是一个两步过程，此操作缓冲了通常标记索引记录为删除的写入。）这是**更改缓冲**的一种类型；其他类型包括**插入缓冲**和**清理缓冲**。
- en: See Also [change buffer](glossary.html#glos_change_buffer), [change buffering](glossary.html#glos_change_buffering),
    [insert buffer](glossary.html#glos_insert_buffer), [insert buffering](glossary.html#glos_insert_buffering),
    [purge buffering](glossary.html#glos_purge_buffering).
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[更改缓冲区](glossary.html#glos_change_buffer)，[更改缓冲](glossary.html#glos_change_buffering)，[插入缓冲区](glossary.html#glos_insert_buffer)，[插入缓冲](glossary.html#glos_insert_buffering)，[清理缓冲](glossary.html#glos_purge_buffering)。
- en: denormalized
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 非规范化
- en: A data storage strategy that duplicates data across different tables, rather
    than linking the tables with **foreign keys** and **join** queries. Typically
    used in **data warehouse** applications, where the data is not updated after loading.
    In such applications, query performance is more important than making it simple
    to maintain consistent data during updates. Contrast with **normalized**.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 一种数据存储策略，将数据复制到不同的表中，而不是使用**外键**和**连接**查询将表链接起来。通常用于**数据仓库**应用程序，其中数据在加载后不会更新。在这类应用程序中，查询性能比在更新期间保持一致数据更为重要。与**规范化**相对。
- en: See Also [data warehouse](glossary.html#glos_data_warehouse), [foreign key](glossary.html#glos_foreign_key),
    [join](glossary.html#glos_join), [normalized](glossary.html#glos_normalized).
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[data warehouse](glossary.html#glos_data_warehouse)，[外键](glossary.html#glos_foreign_key)，[连接](glossary.html#glos_join)，[规范化](glossary.html#glos_normalized)。
- en: descending index
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 降序索引
- en: A type of **index** where index storage is optimized to process `ORDER BY *`column`*
    DESC` clauses.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**索引**类型，其中索引存储被优化以处理`ORDER BY *`column`* DESC`子句。
- en: See Also [index](glossary.html#glos_index).
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[index](glossary.html#glos_index)。
- en: dictionary object cache
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 字典对象缓存
- en: The dictionary object cache stores previously accessed **data dictionary** objects
    in memory to enable object reuse and minimize disk I/O. An **LRU**-based eviction
    strategy is used to evict least recently used objects from memory. The cache is
    comprised of several partitions that store different object types.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 字典对象缓存将先前访问的**数据字典**对象存储在内存中，以实现对象重用并最小化磁盘I/O。使用基于**LRU**的驱逐策略从内存中驱逐最近未使用的对象。缓存由几个分区组成，存储不同类型的对象。
- en: For more information, see [Section 16.4, “Dictionary Object Cache”](data-dictionary-object-cache.html
    "16.4 Dictionary Object Cache").
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[第16.4节，“字典对象缓存”](data-dictionary-object-cache.html "16.4 字典对象缓存")。
- en: See Also [data dictionary](glossary.html#glos_data_dictionary), [LRU](glossary.html#glos_lru).
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[数据字典](glossary.html#glos_data_dictionary)，[LRU](glossary.html#glos_lru)。
- en: dirty page
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 脏页
- en: A **page** in the `InnoDB` **buffer pool** that has been updated in memory,
    where the changes are not yet written (**flushed**) to the **data files**. The
    opposite of a **clean page**.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 一个在`InnoDB` **缓冲池**中已经在内存中更新的**脏页**，其中的更改尚未被写入（**刷新**）到**数据文件**中。与**干净页**相反。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [clean page](glossary.html#glos_clean_page),
    [data files](glossary.html#glos_data_files), [flush](glossary.html#glos_flush),
    [page](glossary.html#glos_page).
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[缓冲池](glossary.html#glos_buffer_pool)，[干净页](glossary.html#glos_clean_page)，[数据文件](glossary.html#glos_data_files)，[刷新](glossary.html#glos_flush)，[页](glossary.html#glos_page)。
- en: dirty read
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 脏读取
- en: An operation that retrieves unreliable data, data that was updated by another
    transaction but not yet **committed**. It is only possible with the **isolation
    level** known as **read uncommitted**.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 一种检索不可靠数据的操作，即被另一个事务更新但尚未**提交**的数据。只有在已知为**读未提交**的**隔离级别**下才可能。
- en: This kind of operation does not adhere to the **ACID** principle of database
    design. It is considered very risky, because the data could be **rolled back**,
    or updated further before being committed; then, the transaction doing the dirty
    read would be using data that was never confirmed as accurate.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这种操作不遵循数据库设计的**ACID**原则。被认为是非常危险的，因为数据可能被**回滚**，或在提交之前进一步更新；然后，进行脏读取的事务将使用从未确认为准确的数据。
- en: Its opposite is **consistent read**, where `InnoDB` ensures that a transaction
    does not read information updated by another transaction, even if the other transaction
    commits in the meantime.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 其相反是**一致性读取**，其中`InnoDB`确保事务不会读取另一个事务更新的信息，即使另一个事务在此期间提交。
- en: See Also [ACID](glossary.html#glos_acid), [commit](glossary.html#glos_commit),
    [consistent read](glossary.html#glos_consistent_read), [isolation level](glossary.html#glos_isolation_level),
    [READ UNCOMMITTED](glossary.html#glos_read_uncommitted), [rollback](glossary.html#glos_rollback).
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ACID](glossary.html#glos_acid)，[commit](glossary.html#glos_commit)，[consistent
    read](glossary.html#glos_consistent_read)，[isolation level](glossary.html#glos_isolation_level)，[READ
    UNCOMMITTED](glossary.html#glos_read_uncommitted)，[rollback](glossary.html#glos_rollback)。
- en: disk-based
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 基于磁盘的
- en: A kind of database that primarily organizes data on disk storage (hard drives
    or equivalent). Data is brought back and forth between disk and memory to be operated
    upon. It is the opposite of an **in-memory database**. Although `InnoDB` is disk-based,
    it also contains features such as he **buffer pool**, multiple buffer pool instances,
    and the **adaptive hash index** that allow certain kinds of workloads to work
    primarily from memory.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 一种主要将数据组织在磁盘存储（硬盘或等效设备）上的数据库。数据在磁盘和内存之间来回传输以进行操作。这与**内存数据库**相反。虽然`InnoDB`是基于磁盘的，但它还包含诸如**缓冲池**、多个缓冲池实例和**自适应哈希索引**等功能，使某些类型的工作负载可以主要从内存中运行。
- en: See Also [adaptive hash index](glossary.html#glos_adaptive_hash_index), [buffer
    pool](glossary.html#glos_buffer_pool), [in-memory database](glossary.html#glos_in_memory_database).
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[adaptive hash index](glossary.html#glos_adaptive_hash_index)，[buffer pool](glossary.html#glos_buffer_pool)，[in-memory
    database](glossary.html#glos_in_memory_database)。
- en: disk-bound
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘密集型
- en: A type of **workload** where the primary **bottleneck** is disk I/O. (Also known
    as **I/O-bound**.) Typically involves frequent writes to disk, or random reads
    of more data than can fit into the **buffer pool**.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 一种主要**瓶颈**是磁盘I/O的**工作负载**类型。（也称为**I/O密集型**。）通常涉及频繁写入磁盘，或随机读取超出**缓冲池**容量的更多数据。
- en: See Also [bottleneck](glossary.html#glos_bottleneck), [buffer pool](glossary.html#glos_buffer_pool),
    [workload](glossary.html#glos_workload).
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[bottleneck](glossary.html#glos_bottleneck)，[buffer pool](glossary.html#glos_buffer_pool)，[workload](glossary.html#glos_workload)。
- en: DML
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: DML
- en: Data manipulation language, a set of **SQL** statements for performing [`INSERT`](insert.html
    "15.2.7 INSERT Statement"), [`UPDATE`](update.html "15.2.17 UPDATE Statement"),
    and [`DELETE`](delete.html "15.2.2 DELETE Statement") operations. The [`SELECT`](select.html
    "15.2.13 SELECT Statement") statement is sometimes considered as a DML statement,
    because the `SELECT ... FOR UPDATE` form is subject to the same considerations
    for **locking** as [`INSERT`](insert.html "15.2.7 INSERT Statement"), [`UPDATE`](update.html
    "15.2.17 UPDATE Statement"), and [`DELETE`](delete.html "15.2.2 DELETE Statement").
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 数据操作语言，用于执行[`INSERT`](insert.html "15.2.7 INSERT Statement")、[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")和[`DELETE`](delete.html "15.2.2 DELETE Statement")操作的一组**SQL**语句。[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句有时被视为DML语句，因为`SELECT ... FOR UPDATE`形式受到与[`INSERT`](insert.html
    "15.2.7 INSERT Statement")、[`UPDATE`](update.html "15.2.17 UPDATE Statement")和[`DELETE`](delete.html
    "15.2.2 DELETE Statement")相同的**锁定**考虑。
- en: DML statements for an `InnoDB` table operate in the context of a **transaction**,
    so their effects can be **committed** or **rolled back** as a single unit.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`InnoDB`表的DML语句在**事务**的上下文中运行，因此它们的效果可以作为一个单元**提交**或**回滚**。
- en: Contrast with **DDL** and **DCL**.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 对比**DDL**和**DCL**。
- en: See Also [commit](glossary.html#glos_commit), [DCL](glossary.html#glos_dcl),
    [DDL](glossary.html#glos_ddl), [locking](glossary.html#glos_locking), [rollback](glossary.html#glos_rollback),
    [SQL](glossary.html#glos_sql), [transaction](glossary.html#glos_transaction).
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [commit](glossary.html#glos_commit), [DCL](glossary.html#glos_dcl), [DDL](glossary.html#glos_ddl),
    [locking](glossary.html#glos_locking), [rollback](glossary.html#glos_rollback),
    [SQL](glossary.html#glos_sql), [transaction](glossary.html#glos_transaction).
- en: document id
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 文档标识符
- en: In the `InnoDB` **full-text search** feature, a special column in the table
    containing the **FULLTEXT index**, to uniquely identify the document associated
    with each **ilist** value. Its name is `FTS_DOC_ID` (uppercase required). The
    column itself must be of `BIGINT UNSIGNED NOT NULL` type, with a unique index
    named `FTS_DOC_ID_INDEX`. Preferably, you define this column when creating the
    table. If `InnoDB` must add the column to the table while creating a `FULLTEXT`
    index, the indexing operation is considerably more expensive.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InnoDB`的**全文搜索**功能中，表中包含**全文索引**的特殊列，用于唯一标识与每个**ilist**值相关联的文档。其名称为`FTS_DOC_ID`（需要大写）。该列本身必须是`BIGINT
    UNSIGNED NOT NULL`类型，并且具有名为`FTS_DOC_ID_INDEX`的唯一索引。最好在创建表时定义此列。如果`InnoDB`在创建`FULLTEXT`索引时必须向表中添加该列，则索引操作会更加昂贵。
- en: See Also [full-text search](glossary.html#glos_full_text_search), [FULLTEXT
    index](glossary.html#glos_fulltext_index), [ilist](glossary.html#glos_ilist).
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [全文搜索](glossary.html#glos_full_text_search), [FULLTEXT index](glossary.html#glos_fulltext_index),
    [ilist](glossary.html#glos_ilist).
- en: doublewrite buffer
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 双写缓冲区
- en: '`InnoDB` uses a file flush technique called doublewrite. Before writing **pages**
    to the **data files**, `InnoDB` first writes them to a storage area called the
    doublewrite buffer. Only after the write and the flush to the doublewrite buffer
    have completed, does `InnoDB` write the pages to their proper positions in the
    data file. If there is an operating system, storage subsystem or [**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server") process crash in the middle of a page write,
    `InnoDB` can find a good copy of the page from the doublewrite buffer during **crash
    recovery**.'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` 使用一种名为双写（doublewrite）的文件刷新技术。在将**页面**写入**数据文件**之前，`InnoDB` 首先将它们写入一个称为双写缓冲区的存储区域。只有在写入和刷新到双写缓冲区完成后，`InnoDB`
    才将页面写入数据文件的正确位置。如果在页面写入过程中发生操作系统、存储子系统或[**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") 进程崩溃，`InnoDB` 可以在**崩溃恢复**期间从双写缓冲区找到页面的一个良好副本。'
- en: Although data is always written twice, the doublewrite buffer does not require
    twice as much I/O overhead or twice as many I/O operations. Data is written to
    the buffer itself as a large sequential chunk, with a single `fsync()` call to
    the operating system.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管数据总是写入两次，但双写缓冲区不需要两倍的 I/O 开销或两倍的 I/O 操作。数据被写入缓冲区本身作为一个大的顺序块，只需一个对操作系统的`fsync()`调用。
- en: See Also [crash recovery](glossary.html#glos_crash_recovery), [data files](glossary.html#glos_data_files),
    [page](glossary.html#glos_page), [purge](glossary.html#glos_purge).
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [crash recovery](glossary.html#glos_crash_recovery), [data files](glossary.html#glos_data_files),
    [page](glossary.html#glos_page), [purge](glossary.html#glos_purge).
- en: drop
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 删除
- en: A kind of **DDL** operation that removes a schema object, through a statement
    such as [`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE Statement") or [`DROP
    INDEX`](drop-index.html "15.1.27 DROP INDEX Statement"). It maps internally to
    an [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") statement.
    From an `InnoDB` perspective, the performance considerations of such operations
    involve the time that the **data dictionary** is locked to ensure that interrelated
    objects are all updated, and the time to update memory structures such as the
    **buffer pool**. For a **table**, the drop operation has somewhat different characteristics
    than a **truncate** operation ([`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement") statement).
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 一种通过诸如[`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE Statement")或[`DROP
    INDEX`](drop-index.html "15.1.27 DROP INDEX Statement")等语句删除模式对象的**DDL**操作。它在内部映射到一个[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句。从`InnoDB`的角度来看，这类操作的性能考虑涉及到数据字典被锁定的时间，以确保所有相关对象都得到更新，以及更新内存结构（如**缓冲池**）的时间。对于一个**表**，删除操作与**截断**操作（[`TRUNCATE
    TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")语句）有一些不同的特性。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [data dictionary](glossary.html#glos_data_dictionary),
    [DDL](glossary.html#glos_ddl), [table](glossary.html#glos_table), [truncate](glossary.html#glos_truncate).
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [buffer pool](glossary.html#glos_buffer_pool), [data dictionary](glossary.html#glos_data_dictionary),
    [DDL](glossary.html#glos_ddl), [table](glossary.html#glos_table), [truncate](glossary.html#glos_truncate).
- en: DSN
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: DSN
- en: Acronym for “Database Source Name”. It is the encoding for **connection** information
    within **Connector/ODBC**. See [Configuring a Connector/ODBC DSN on Windows](/doc/connector-odbc/en/connector-odbc-configuration-dsn-windows.html)
    for full details. It is the equivalent of the **connection string** used by **Connector/NET**.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: “数据库源名称”的缩写。它是**Connector/ODBC**中**连接**信息的编码。有关详细信息，请参阅[在Windows上配置Connector/ODBC
    DSN](/doc/connector-odbc/en/connector-odbc-configuration-dsn-windows.html)。它相当于**Connector/NET**使用的**连接字符串**。
- en: See Also [connection](glossary.html#glos_connection), [connection string](glossary.html#glos_connection_string),
    [Connector/NET](glossary.html#glos_connector_net), [Connector/ODBC](glossary.html#glos_connector_odbc).
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[连接](glossary.html#glos_connection)，[连接字符串](glossary.html#glos_connection_string)，[Connector/NET](glossary.html#glos_connector_net)，[Connector/ODBC](glossary.html#glos_connector_odbc)。
- en: dynamic cursor
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 动态游标
- en: A type of **cursor** supported by **ODBC** that can pick up new and changed
    results when the rows are read again. Whether and how quickly the changes are
    visible to the cursor depends on the type of table involved (transactional or
    non-transactional) and the isolation level for transactional tables. Support for
    dynamic cursors must be explicitly enabled.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '**ODBC**支持的一种**游标**类型，当再次读取行时可以获取新的和更改的结果。更改对游标的可见性及其快速程度取决于所涉及的表类型（事务或非事务）以及事务表的隔离级别。必须显式启用对动态游标的支持。'
- en: See Also [cursor](glossary.html#glos_cursor), [ODBC](glossary.html#glos_odbc).
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[游标](glossary.html#glos_cursor)，[ODBC](glossary.html#glos_odbc)。
- en: dynamic row format
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 动态行格式
- en: An `InnoDB` row format. Because long variable-length column values are stored
    outside of the page that holds the row data, it is very efficient for rows that
    include large objects. Since the large fields are typically not accessed to evaluate
    query conditions, they are not brought into the **buffer pool** as often, resulting
    in fewer I/O operations and better utilization of cache memory.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 一种`InnoDB`行格式。由于长变长列值存储在保存行数据的页面之外，因此对包含大对象的行非常高效。由于通常不会访问大字段以评估查询条件，因此它们不会像常规情况下那样经常进入**缓冲池**，从而减少I/O操作并更好地利用缓存内存。
- en: As of MySQL 5.7.9, the default row format is defined by [`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format),
    which has a default value of `DYNAMIC`.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 5.7.9开始，默认行格式由[`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format)定义，默认值为`DYNAMIC`。
- en: For additional information about `InnoDB` `DYNAMIC` row format, see [DYNAMIC
    Row Format](innodb-row-format.html#innodb-row-format-dynamic "DYNAMIC Row Format").
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`InnoDB` `DYNAMIC`行格式的更多信息，请参见[DYNAMIC行格式](innodb-row-format.html#innodb-row-format-dynamic
    "DYNAMIC Row Format")。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [file format](glossary.html#glos_file_format),
    [row format](glossary.html#glos_row_format).
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[文件格式](glossary.html#glos_file_format)，[行格式](glossary.html#glos_row_format)。
- en: dynamic SQL
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 动态 SQL
- en: A feature that lets you create and execute **prepared statements** using more
    robust, secure, and efficient methods to substitute parameter values than the
    naive technique of concatenating the parts of the statement into a string variable.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 一种功能，允许您使用更强大、安全和高效的方法创建和执行**prepared statements**，以替代将语句部分连接成字符串变量的天真技术。
- en: See Also [prepared statement](glossary.html#glos_prepared_statement).
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[prepared statement](glossary.html#glos_prepared_statement)。
- en: dynamic statement
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 动态语句
- en: A **prepared statement** created and executed through **dynamic SQL**.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**动态 SQL**创建和执行的**prepared statement**。
- en: See Also [dynamic SQL](glossary.html#glos_dynamic_sql), [prepared statement](glossary.html#glos_prepared_statement).
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[dynamic SQL](glossary.html#glos_dynamic_sql)，[prepared statement](glossary.html#glos_prepared_statement)。
- en: E
  id: totrans-440
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: E
- en: early adopter
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 早期采用者
- en: A stage similar to **beta**, when a software product is typically evaluated
    for performance, functionality, and compatibility in a non-mission-critical setting.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 与**beta**类似的阶段，软件产品通常在非关键任务设置中进行性能、功能和兼容性评估。
- en: See Also [beta](glossary.html#glos_beta).
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[beta](glossary.html#glos_beta)。
- en: Eiffel
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 艾菲尔
- en: A programming language including many object-oriented features. Some of its
    concepts are familiar to **Java** and **C#** developers. For the open-source Eiffel
    **API** for MySQL, see [Section 31.13, “MySQL Eiffel Wrapper”](apis-eiffel.html
    "31.13 MySQL Eiffel Wrapper").
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 包含许多面向对象特性的编程语言。其中一些概念对**Java**和**C#**开发人员来说很熟悉。有关MySQL的开源Eiffel **API**，请参见[第31.13节，“MySQL
    Eiffel Wrapper”](apis-eiffel.html "31.13 MySQL Eiffel Wrapper")。
- en: See Also [API](glossary.html#glos_api), [C#](glossary.html#glos_csharp), [Java](glossary.html#glos_java).
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[API](glossary.html#glos_api)，[C#](glossary.html#glos_csharp)，[Java](glossary.html#glos_java)。
- en: embedded
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式
- en: The embedded MySQL server library (**libmysqld**) makes it possible to run a
    full-featured MySQL server inside a **client** application. The main benefits
    are increased speed and more simple management for embedded applications.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式 MySQL 服务器库（**libmysqld**）使得在**客户端**应用程序内部运行一个功能齐全的 MySQL 服务器成为可能。主要优点是增加了嵌入式应用程序的速度和更简单的管理。
- en: See Also [client](glossary.html#glos_client), [libmysqld](glossary.html#glos_libmysqld).
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[客户端](glossary.html#glos_client)，[libmysqld](glossary.html#glos_libmysqld)。
- en: error log
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 错误日志
- en: A type of **log** showing information about MySQL startup and critical runtime
    errors and **crash** information. For details, see [Section 7.4.2, “The Error
    Log”](error-log.html "7.4.2 The Error Log").
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 一种显示有关 MySQL 启动和关键运行时错误以及**崩溃**信息的**日志**类型。有关详细信息，请参阅[Section 7.4.2，“错误日志”](error-log.html
    "7.4.2 The Error Log")。
- en: See Also [crash](glossary.html#glos_crash), [log](glossary.html#glos_log).
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[崩溃](glossary.html#glos_crash)，[日志](glossary.html#glos_log)。
- en: eviction
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 驱逐
- en: The process of removing an item from a cache or other temporary storage area,
    such as the `InnoDB` **buffer pool**. Often, but not always, uses the **LRU**
    algorithm to determine which item to remove. When a **dirty page** is evicted,
    its contents are **flushed** to disk, and any dirty **neighbor pages** might be
    flushed also.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 从缓存或其他临时存储区域（如`InnoDB`**缓冲池**）中移除项目的过程。通常使用**LRU**算法确定要移除的项目，但并非总是如此。当驱逐**脏页**时，其内容会被**刷新**到磁盘，并且任何脏**相邻页**也可能被刷新。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [dirty page](glossary.html#glos_dirty_page),
    [flush](glossary.html#glos_flush), [LRU](glossary.html#glos_lru), [neighbor page](glossary.html#glos_neighbor_page).
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[脏页](glossary.html#glos_dirty_page)，[刷新](glossary.html#glos_flush)，[LRU](glossary.html#glos_lru)，[相邻页](glossary.html#glos_neighbor_page)。
- en: exception interceptor
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 异常拦截器
- en: A type of **interceptor** for tracing, debugging, or augmenting SQL errors encountered
    by a database application. For example, the interceptor code could issue a `SHOW
    WARNINGS` statement to retrieve additional information, and add descriptive text
    or even change the type of the exception returned to the application. Because
    the interceptor code is only called when SQL statements return errors, it does
    not impose any performance penalty on the application during normal (error-free)
    operation.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 一种用于跟踪、调试或增强数据库应用程序遇到的 SQL 错误的**拦截器**。例如，拦截器代码可以发出`SHOW WARNINGS`语句以检索额外信息，并添加描述性文本，甚至更改返回给应用程序的异常类型。由于拦截器代码仅在
    SQL 语句返回错误时调用，因此在正常（无错误）操作期间不会对应用程序施加任何性能损失。
- en: In **Java** applications using **Connector/J**, setting up this type of interceptor
    involves implementing the `com.mysql.jdbc.ExceptionInterceptor` interface, and
    adding a `exceptionInterceptors` property to the **connection string**.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用**Connector/J**的**Java**应用程序中，设置这种类型的拦截器涉及实现`com.mysql.jdbc.ExceptionInterceptor`接口，并向**连接字符串**添加`exceptionInterceptors`属性。
- en: In **Visual Studio** applications using **Connector/NET**, setting up this type
    of interceptor involves defining a class that inherits from the `BaseExceptionInterceptor`
    class and specifying that class name as part of the connection string.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用**Connector/NET**的**Visual Studio**应用程序中，设置这种类型的拦截器涉及定义一个从`BaseExceptionInterceptor`类继承的类，并将该类名指定为连接字符串的一部分。
- en: See Also [Connector/J](glossary.html#glos_connector_j), [Connector/NET](glossary.html#glos_connector_net),
    [interceptor](glossary.html#glos_interceptor), [Java](glossary.html#glos_java),
    [Visual Studio](glossary.html#glos_visual_studio).
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Connector/J](glossary.html#glos_connector_j)，[Connector/NET](glossary.html#glos_connector_net)，[拦截器](glossary.html#glos_interceptor)，[Java](glossary.html#glos_java)，[Visual
    Studio](glossary.html#glos_visual_studio)。
- en: exclusive lock
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 独占锁
- en: A kind of **lock** that prevents any other **transaction** from locking the
    same row. Depending on the transaction **isolation level**, this kind of lock
    might block other transactions from writing to the same row, or might also block
    other transactions from reading the same row. The default `InnoDB` isolation level,
    **REPEATABLE READ**, enables higher **concurrency** by allowing transactions to
    read rows that have exclusive locks, a technique known as **consistent read**.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**锁**，阻止任何其他**事务**锁定相同的行。根据事务**隔离级别**，这种锁可能会阻止其他事务写入相同的行，也可能会阻止其他事务读取相同的行。默认的`InnoDB`隔离级别，**可重复读**，通过允许事务读取具有独占锁的行来实现更高的**并发性**，这种技术称为**一致性读**。
- en: See Also [concurrency](glossary.html#glos_concurrency), [consistent read](glossary.html#glos_consistent_read),
    [isolation level](glossary.html#glos_isolation_level), [lock](glossary.html#glos_lock),
    [REPEATABLE READ](glossary.html#glos_repeatable_read), [shared lock](glossary.html#glos_shared_lock),
    [transaction](glossary.html#glos_transaction).
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[并发性](glossary.html#glos_concurrency)，[一致性读](glossary.html#glos_consistent_read)，[隔离级别](glossary.html#glos_isolation_level)，[锁](glossary.html#glos_lock)，[可重复读](glossary.html#glos_repeatable_read)，[共享锁](glossary.html#glos_shared_lock)，[事务](glossary.html#glos_transaction)。
- en: extent
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 区段
- en: A group of **pages** within a **tablespace**. For the default **page size**
    of 16KB, an extent contains 64 pages. In MySQL 5.6, the page size for an `InnoDB`
    instance can be 4KB, 8KB, or 16KB, controlled by the [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    configuration option. For 4KB, 8KB, and 16KB pages sizes, the extent size is always
    1MB (or 1048576 bytes).
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 一组**页**在一个**表空间**内。对于默认的**页大小**为16KB，一个区段包含64页。在MySQL 5.6中，`InnoDB`实例的页大小可以是4KB、8KB或16KB，由[`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)配置选项控制。对于4KB、8KB和16KB的页大小，区段大小始终为1MB（或1048576字节）。
- en: Support for 32KB and 64KB `InnoDB` page sizes was added in MySQL 5.7.6\. For
    a 32KB page size, the extent size is 2MB. For a 64KB page size, the extent size
    is 4MB.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.7.6中添加了对32KB和64KB的`InnoDB`页大小的支持。对于32KB的页大小，区段大小为2MB。对于64KB的页大小，区段大小为4MB。
- en: '`InnoDB` features such as **segments**, **read-ahead** requests and the **doublewrite
    buffer** use I/O operations that read, write, allocate, or free data one extent
    at a time.'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`功能，如**段**，**预读**请求和**双写缓冲区**使用一次读取、写入、分配或释放数据一个区段。'
- en: See Also [doublewrite buffer](glossary.html#glos_doublewrite_buffer), [page](glossary.html#glos_page),
    [page size](glossary.html#glos_page_size), [read-ahead](glossary.html#glos_read_ahead),
    [segment](glossary.html#glos_segment), [tablespace](glossary.html#glos_tablespace).
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[双写缓冲区](glossary.html#glos_doublewrite_buffer)，[页](glossary.html#glos_page)，[页大小](glossary.html#glos_page_size)，[预读](glossary.html#glos_read_ahead)，[段](glossary.html#glos_segment)，[表空间](glossary.html#glos_tablespace)。
- en: F
  id: totrans-469
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: F
- en: .frm file
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: .frm文件
- en: A file containing the metadata, such as the table definition, of a MySQL table.
    `.frm` files were removed in MySQL 8.0 but are still used in earlier MySQL releases.
    In MySQL 8.0, data previously stored in `.frm` files is stored in **data dictionary**
    tables.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 包含MySQL表的元数据，如表定义的文件。`.frm`文件在MySQL 8.0中被移除，但仍然在早期的MySQL版本中使用。在MySQL 8.0中，以前存储在`.frm`文件中的数据存储在**数据字典**表中。
- en: See Also [data dictionary](glossary.html#glos_data_dictionary), [MySQL Enterprise
    Backup](glossary.html#glos_mysql_enterprise_backup), [system tablespace](glossary.html#glos_system_tablespace).
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[数据字典](glossary.html#glos_data_dictionary)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[系统表空间](glossary.html#glos_system_tablespace)。
- en: failover
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 故障转移
- en: The ability to automatically switch to a standby server in the event of a failure.
    In the MySQL context, failover involves a standby database server. Often supported
    within **J2EE** environments by the application server or framework.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在发生故障时自动切换到备用服务器的能力。在MySQL环境中，故障转移涉及备用数据库服务器。在**J2EE**环境中通常由应用服务器或框架支持。
- en: See Also [Connector/J](glossary.html#glos_connector_j), [J2EE](glossary.html#glos_j2ee).
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Connector/J](glossary.html#glos_connector_j)，[J2EE](glossary.html#glos_j2ee)。
- en: Fast Index Creation
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 快速索引创建
- en: A capability first introduced in the InnoDB Plugin, now part of MySQL in 5.5
    and higher, that speeds up creation of `InnoDB` **secondary indexes** by avoiding
    the need to completely rewrite the associated table. The speedup applies to dropping
    secondary indexes also.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 在InnoDB插件中首次引入的功能，现在在MySQL 5.5及更高版本中，通过避免完全重写相关表来加快`InnoDB` **次要索引**的创建。这种加速也适用于删除次要索引。
- en: Because index maintenance can add performance overhead to many data transfer
    operations, consider doing operations such as `ALTER TABLE ... ENGINE=INNODB`
    or `INSERT INTO ... SELECT * FROM ...` without any secondary indexes in place,
    and creating the indexes afterward.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 由于索引维护可能会给许多数据传输操作增加性能开销，请考虑在没有任何二级索引的情况下执行操作，如 `ALTER TABLE ... ENGINE=INNODB`
    或 `INSERT INTO ... SELECT * FROM ...`，然后再创建索引。
- en: In MySQL 5.6, this feature becomes more general. You can read and write to tables
    while an index is being created, and many more kinds of [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") operations can be performed without copying the
    table, without blocking **DML** operations, or both. Thus in MySQL 5.6 and higher,
    this set of features is referred to as **online DDL** rather than Fast Index Creation.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 5.6 中，这个功能变得更加通用。您可以在创建索引的同时读写表格，并且可以执行许多种 [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") 操作，而无需复制表格，也无需阻塞 **DML** 操作，或两者兼而有之。因此，在 MySQL
    5.6 及更高版本中，这组功能被称为 **在线 DDL** 而不是快速索引创建。
- en: For related information, see [Section 17.12, “InnoDB and Online DDL”](innodb-online-ddl.html
    "17.12 InnoDB and Online DDL").
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 有关相关信息，请参见 [Section 17.12, “InnoDB and Online DDL”](innodb-online-ddl.html "17.12 InnoDB
    and Online DDL")。
- en: See Also [DML](glossary.html#glos_dml), [index](glossary.html#glos_index), [online
    DDL](glossary.html#glos_online_ddl), [secondary index](glossary.html#glos_secondary_index).
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [DML](glossary.html#glos_dml), [索引](glossary.html#glos_index), [在线 DDL](glossary.html#glos_online_ddl),
    [二级索引](glossary.html#glos_secondary_index)。
- en: fast shutdown
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 快速关闭
- en: The default **shutdown** procedure for `InnoDB`, based on the configuration
    setting [`innodb_fast_shutdown=1`](innodb-parameters.html#sysvar_innodb_fast_shutdown).
    To save time, certain **flush** operations are skipped. This type of shutdown
    is safe during normal usage, because the flush operations are performed during
    the next startup, using the same mechanism as in **crash recovery**. In cases
    where the database is being shut down for an upgrade or downgrade, do a **slow
    shutdown** instead to ensure that all relevant changes are applied to the **data
    files** during the shutdown.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 基于配置设置 [`innodb_fast_shutdown=1`](innodb-parameters.html#sysvar_innodb_fast_shutdown)，`InnoDB`
    的默认 **关闭** 过程。为节省时间，某些 **刷新** 操作被跳过。在正常使用情况下，这种关闭方式是安全的，因为刷新操作会在下次启动时执行，使用与 **崩溃恢复**
    相同的机制。在数据库因升级或降级而关闭时，请执行 **慢关闭** 以确保在关闭期间将所有相关更改应用于 **数据文件**。
- en: See Also [crash recovery](glossary.html#glos_crash_recovery), [data files](glossary.html#glos_data_files),
    [flush](glossary.html#glos_flush), [shutdown](glossary.html#glos_shutdown), [slow
    shutdown](glossary.html#glos_slow_shutdown).
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [崩溃恢复](glossary.html#glos_crash_recovery), [数据文件](glossary.html#glos_data_files),
    [刷新](glossary.html#glos_flush), [关闭](glossary.html#glos_shutdown), [慢关闭](glossary.html#glos_slow_shutdown)。
- en: file format
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 文件格式
- en: The file format for `InnoDB` tables.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` 表的文件格式。'
- en: See Also [file-per-table](glossary.html#glos_file_per_table), [.ibd file](glossary.html#glos_ibd_file),
    [ibdata file](glossary.html#glos_ibdata_file), [row format](glossary.html#glos_row_format).
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [每表一个文件](glossary.html#glos_file_per_table), [.ibd 文件](glossary.html#glos_ibd_file),
    [ibdata 文件](glossary.html#glos_ibdata_file), [行格式](glossary.html#glos_row_format)。
- en: file-per-table
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 每表一个文件
- en: A general name for the setting controlled by the [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    option, which is an important configuration option that affects aspects of `InnoDB`
    file storage, availability of features, and I/O characteristics. As of MySQL 5.6.7,
    [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    is enabled by default.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    选项控制的设置的通用名称，这是一个重要的配置选项，影响 `InnoDB` 文件存储、功能可用性和 I/O 特性的各个方面。截至 MySQL 5.6.7，[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    默认启用。
- en: With the [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    option enabled, you can create a table in its own **.ibd file** rather than in
    the shared **ibdata files** of the **system tablespace**. When table data is stored
    in an individual **.ibd file**, you have more flexibility to choose **row formats**
    required for features such as data **compression**. The `TRUNCATE TABLE` operation
    is also faster, and reclaimed space can be used by the operating system rather
    than remaining reserved for `InnoDB`.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 启用[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)选项后，您可以将表创建在自己的**.ibd文件**中，而不是在**系统表空间**的共享**ibdata文件**中。当表数据存储在单独的**.ibd文件**中时，您可以更灵活地选择用于功能（如数据**压缩**）所需的**行格式**。`TRUNCATE
    TABLE`操作也更快，回收的空间可以被操作系统使用，而不是保留给`InnoDB`。
- en: The **MySQL Enterprise Backup** product is more flexible for tables that are
    in their own files. For example, tables can be excluded from a backup, but only
    if they are in separate files. Thus, this setting is suitable for tables that
    are backed up less frequently or on a different schedule.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '**MySQL企业备份**产品对于在自己文件中的表更加灵活。例如，只有在单独的文件中的表才能从备份中排除。因此，此设置适用于备份频率较低或按不同时间表备份的表。'
- en: See Also [compressed row format](glossary.html#glos_compressed_row_format),
    [compression](glossary.html#glos_compression), [file format](glossary.html#glos_file_format),
    [.ibd file](glossary.html#glos_ibd_file), [ibdata file](glossary.html#glos_ibdata_file),
    [innodb_file_per_table](glossary.html#glos_innodb_file_per_table), [MySQL Enterprise
    Backup](glossary.html#glos_mysql_enterprise_backup), [row format](glossary.html#glos_row_format),
    [system tablespace](glossary.html#glos_system_tablespace).
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[压缩行格式](glossary.html#glos_compressed_row_format)，[压缩](glossary.html#glos_compression)，[文件格式](glossary.html#glos_file_format)，[.ibd文件](glossary.html#glos_ibd_file)，[ibdata文件](glossary.html#glos_ibdata_file)，[innodb_file_per_table](glossary.html#glos_innodb_file_per_table)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[行格式](glossary.html#glos_row_format)，[系统表空间](glossary.html#glos_system_tablespace)。
- en: fill factor
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 填充因子
- en: In an `InnoDB` **index**, the proportion of a **page** that is taken up by index
    data before the page is split. The unused space when index data is first divided
    between pages allows for rows to be updated with longer string values without
    requiring expensive index maintenance operations. If the fill factor is too low,
    the index consumes more space than needed, causing extra I/O overhead when reading
    the index. If the fill factor is too high, any update that increases the length
    of column values can cause extra I/O overhead for index maintenance. See [Section 17.6.2.2,
    “The Physical Structure of an InnoDB Index”](innodb-physical-structure.html "17.6.2.2 The
    Physical Structure of an InnoDB Index") for more information.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InnoDB`**索引**中，页面在分裂之前由索引数据占用的比例。当索引数据首次在页面之间分割时，未使用的空间允许行更新为更长的字符串值，而无需进行昂贵的索引维护操作。如果填充因子太低，则索引消耗的空间超过所需空间，导致读取索引时额外的I/O开销。如果填充因子太高，则任何增加列值长度的更新都可能导致索引维护的额外I/O开销。有关更多信息，请参见[第17.6.2.2节，“InnoDB索引的物理结构”](innodb-physical-structure.html
    "17.6.2.2 InnoDB索引的物理结构")。
- en: See Also [index](glossary.html#glos_index), [page](glossary.html#glos_page).
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[索引](glossary.html#glos_index)，[页面](glossary.html#glos_page)。
- en: fixed row format
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 固定行格式
- en: This row format is used by the `MyISAM` storage engine, not by `InnoDB`. If
    you create an `InnoDB` table with the option `ROW_FORMAT=FIXED` in MySQL 5.7.6
    or earlier, `InnoDB` uses the **compact row format** instead, although the `FIXED`
    value might still show up in output such as `SHOW TABLE STATUS` reports. As of
    MySQL 5.7.7, `InnoDB` returns an error if `ROW_FORMAT=FIXED` is specified.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 此行格式由`MyISAM`存储引擎使用，而不是`InnoDB`。如果在MySQL 5.7.6或更早版本中使用选项`ROW_FORMAT=FIXED`创建`InnoDB`表，`InnoDB`将使用**紧凑行格式**，尽管`FIXED`值可能仍会出现在诸如`SHOW
    TABLE STATUS`报告之类的输出中。从MySQL 5.7.7开始，如果指定了`ROW_FORMAT=FIXED`，`InnoDB`将返回错误。
- en: See Also [compact row format](glossary.html#glos_compact_row_format), [row format](glossary.html#glos_row_format).
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[紧凑行格式](glossary.html#glos_compact_row_format)，[行格式](glossary.html#glos_row_format)。
- en: flush
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新
- en: To write changes to the database files, that had been buffered in a memory area
    or a temporary disk storage area. The `InnoDB` storage structures that are periodically
    flushed include the **redo log**, the **undo log**, and the **buffer pool**.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 将在内存区域或临时磁盘存储区域中缓冲的对数据库文件的更改写入。定期刷新的`InnoDB`存储结构包括**重做日志**、**撤销日志**和**缓冲池**。
- en: Flushing can happen because a memory area becomes full and the system needs
    to free some space, because a **commit** operation means the changes from a transaction
    can be finalized, or because a **slow shutdown** operation means that all outstanding
    work should be finalized. When it is not critical to flush all the buffered data
    at once, `InnoDB` can use a technique called **fuzzy checkpointing** to flush
    small batches of pages to spread out the I/O overhead.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新可能发生是因为内存区域变满，系统需要释放一些空间，因为**提交**操作意味着事务的更改可以被最终确定，或者因为**慢关闭**操作意味着所有未完成的工作应该被最终确定。当不需要立即刷新所有缓冲数据时，`InnoDB`可以使用一种称为**模糊检查点**的技术，将小批量页刷新以分散I/O开销。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [commit](glossary.html#glos_commit),
    [fuzzy checkpointing](glossary.html#glos_fuzzy_checkpointing), [redo log](glossary.html#glos_redo_log),
    [slow shutdown](glossary.html#glos_slow_shutdown), [undo log](glossary.html#glos_undo_log).
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[缓冲池](glossary.html#glos_buffer_pool)，[提交](glossary.html#glos_commit)，[模糊检查点](glossary.html#glos_fuzzy_checkpointing)，[重做日志](glossary.html#glos_redo_log)，[慢关闭](glossary.html#glos_slow_shutdown)，[撤销日志](glossary.html#glos_undo_log)。
- en: flush list
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新列表
- en: 'An internal `InnoDB` data structure that tracks **dirty pages** in the **buffer
    pool**: that is, **pages** that have been changed and need to be written back
    out to disk. This data structure is updated frequently by `InnoDB` internal **mini-transactions**,
    and so is protected by its own **mutex** to allow concurrent access to the buffer
    pool.'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 一个内部`InnoDB`数据结构，用于跟踪**脏页**在**缓冲池**中的情况：即已经被更改并需要写回磁盘的**页**。这个数据结构经常被`InnoDB`内部的**小事务**更新，因此受到自己的**互斥锁**保护，以允许并发访问缓冲池。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [dirty page](glossary.html#glos_dirty_page),
    [LRU](glossary.html#glos_lru), [mini-transaction](glossary.html#glos_mini_transaction),
    [mutex](glossary.html#glos_mutex), [page](glossary.html#glos_page), [page cleaner](glossary.html#glos_page_cleaner).
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[缓冲池](glossary.html#glos_buffer_pool)，[脏页](glossary.html#glos_dirty_page)，[LRU](glossary.html#glos_lru)，[小事务](glossary.html#glos_mini_transaction)，[互斥锁](glossary.html#glos_mutex)，[页](glossary.html#glos_page)，[页清理器](glossary.html#glos_page_cleaner)。
- en: foreign key
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 外键
- en: A type of pointer relationship, between rows in separate `InnoDB` tables. The
    foreign key relationship is defined on one column in both the **parent table**
    and the **child table**.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 一种指针关系类型，在不同的`InnoDB`表之间的行之间。外键关系在**父表**和**子表**中的一个列上定义。
- en: In addition to enabling fast lookup of related information, foreign keys help
    to enforce **referential integrity**, by preventing any of these pointers from
    becoming invalid as data is inserted, updated, and deleted. This enforcement mechanism
    is a type of **constraint**. A row that points to another table cannot be inserted
    if the associated foreign key value does not exist in the other table. If a row
    is deleted or its foreign key value changed, and rows in another table point to
    that foreign key value, the foreign key can be set up to prevent the deletion,
    cause the corresponding column values in the other table to become **null**, or
    automatically delete the corresponding rows in the other table.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 除了快速查找相关信息外，外键还有助于强制执行**引用完整性**，通过防止这些指针在数据插入、更新和删除时变得无效。这种强制执行机制是一种**约束**。如果一行指向另一张表，但相关的外键值在另一张表中不存在，则无法插入该行。如果删除一行或更改其外键值，并且另一张表中的行指向该外键值，则可以设置外键以防止删除，导致另一张表中的相应列值变为**null**，或自动删除另一张表中的相应行。
- en: One of the stages in designing a **normalized** database is to identify data
    that is duplicated, separate that data into a new table, and set up a foreign
    key relationship so that the multiple tables can be queried like a single table,
    using a **join** operation.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 设计**规范化**数据库的一个阶段是识别重复的数据，将这些数据分离到一个新表中，并建立外键关系，以便多个表可以像单个表一样查询，使用**连接**操作。
- en: See Also [child table](glossary.html#glos_child_table), [FOREIGN KEY constraint](glossary.html#glos_foreign_key_constraint),
    [join](glossary.html#glos_join), [normalized](glossary.html#glos_normalized),
    [NULL](glossary.html#glos_null), [parent table](glossary.html#glos_parent_table),
    [referential integrity](glossary.html#glos_referential_integrity), [relational](glossary.html#glos_relational).
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[子表](glossary.html#glos_child_table)，[外键约束](glossary.html#glos_foreign_key_constraint)，[连接](glossary.html#glos_join)，[规范化](glossary.html#glos_normalized)，[NULL](glossary.html#glos_null)，[父表](glossary.html#glos_parent_table)，[引用完整性](glossary.html#glos_referential_integrity)，[关系型](glossary.html#glos_relational)。
- en: FOREIGN KEY constraint
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 外键约束
- en: The type of **constraint** that maintains database consistency through a **foreign
    key** relationship. Like other kinds of constraints, it can prevent data from
    being inserted or updated if data would become inconsistent; in this case, the
    inconsistency being prevented is between data in multiple tables. Alternatively,
    when a **DML** operation is performed, `FOREIGN KEY` constraints can cause data
    in **child rows** to be deleted, changed to different values, or set to **null**,
    based on the `ON CASCADE` option specified when creating the foreign key.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**外键**关系维护数据库一致性的**约束**类型。与其他类型的约束一样，如果数据变得不一致，它可以阻止数据的插入或更新；在这种情况下，被阻止的不一致性是在多个表之间的数据之间。或者，当执行**DML**操作时，`FOREIGN
    KEY`约束可以根据创建外键时指定的`ON CASCADE`选项，导致**子行**中的数据被删除，更改为不同的值，或设置为**null**。
- en: See Also [child table](glossary.html#glos_child_table), [constraint](glossary.html#glos_constraint),
    [DML](glossary.html#glos_dml), [foreign key](glossary.html#glos_foreign_key),
    [NULL](glossary.html#glos_null).
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[子表](glossary.html#glos_child_table)，[约束](glossary.html#glos_constraint)，[DML](glossary.html#glos_dml)，[外键](glossary.html#glos_foreign_key)，[NULL](glossary.html#glos_null)。
- en: FTS
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: FTS
- en: In most contexts, an acronym for **full-text search**. Sometimes in performance
    discussions, an acronym for **full table scan**.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，是**全文搜索**的首字母缩写。有时在性能讨论中，是**全表扫描**的首字母缩写。
- en: See Also [full table scan](glossary.html#glos_full_table_scan), [full-text search](glossary.html#glos_full_text_search).
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[全表扫描](glossary.html#glos_full_table_scan)，[全文搜索](glossary.html#glos_full_text_search)。
- en: full backup
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 全备份
- en: A **backup** that includes all the **tables** in each MySQL **database**, and
    all the databases in a MySQL **instance**. Contrast with **partial backup**.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 包括每个MySQL **数据库**中的所有**表**，以及MySQL **实例**中的所有数据库的**备份**。与**部分备份**相对。
- en: See Also [backup](glossary.html#glos_backup), [database](glossary.html#glos_database),
    [instance](glossary.html#glos_instance), [partial backup](glossary.html#glos_partial_backup),
    [table](glossary.html#glos_table).
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[备份](glossary.html#glos_backup)，[数据库](glossary.html#glos_database)，[实例](glossary.html#glos_instance)，[部分备份](glossary.html#glos_partial_backup)，[表](glossary.html#glos_table)。
- en: full table scan
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 全表扫描
- en: An operation that requires reading the entire contents of a table, rather than
    just selected portions using an **index**. Typically performed either with small
    lookup tables, or in data warehousing situations with large tables where all available
    data is aggregated and analyzed. How frequently these operations occur, and the
    sizes of the tables relative to available memory, have implications for the algorithms
    used in query optimization and managing the **buffer pool**.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 需要读取表的全部内容而不仅仅是使用**索引**选择的部分的操作。通常在小查找表中执行，或在数据仓库情况下，对大表进行聚合和分析所有可用数据。这些操作发生的频率以及表的大小相对于可用内存的大小，对查询优化和管理**缓冲池**中使用的算法有影响。
- en: The purpose of indexes is to allow lookups for specific values or ranges of
    values within a large table, thus avoiding full table scans when practical.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 索引的目的是允许在大表中查找特定值或值范围，从而在实际情况下避免进行全表扫描。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [index](glossary.html#glos_index).
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[索引](glossary.html#glos_index)。
- en: full-text search
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 全文搜索
- en: The MySQL feature for finding words, phrases, Boolean combinations of words,
    and so on within table data, in a faster, more convenient, and more flexible way
    than using the SQL `LIKE` operator or writing your own application-level search
    algorithm. It uses the SQL function [`MATCH()`](fulltext-search.html#function_match)
    and **FULLTEXT indexes**.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL功能，用于在表数据中查找单词、短语、单词的布尔组合等，比使用SQL `LIKE`运算符或编写自己的应用级搜索算法更快、更方便、更灵活。它使用SQL函数[`MATCH()`](fulltext-search.html#function_match)和**全文索引**。
- en: See Also [FULLTEXT index](glossary.html#glos_fulltext_index).
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[全文索引](glossary.html#glos_fulltext_index)。
- en: FULLTEXT index
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 全文索引
- en: The special kind of **index** that holds the **search index** in the MySQL **full-text
    search** mechanism. Represents the words from values of a column, omitting any
    that are specified as **stopwords**. Originally, only available for `MyISAM` tables.
    Starting in MySQL 5.6.4, it is also available for **InnoDB** tables.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL **全文搜索**机制中保存**搜索索引**的特殊类型**索引**。表示来自列值的单词，省略任何指定为**停用词**的单词。最初，仅适用于`MyISAM`表。从MySQL
    5.6.4开始，也适用于**InnoDB**表。
- en: See Also [full-text search](glossary.html#glos_full_text_search), [index](glossary.html#glos_index),
    [InnoDB](glossary.html#glos_innodb), [search index](glossary.html#glos_search_index),
    [stopword](glossary.html#glos_stopword).
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [全文搜索](glossary.html#glos_full_text_search)，[索引](glossary.html#glos_index)，[InnoDB](glossary.html#glos_innodb)，[搜索索引](glossary.html#glos_search_index)，[停用词](glossary.html#glos_stopword)。
- en: fuzzy checkpointing
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊检查点
- en: A technique that **flushes** small batches of **dirty pages** from the **buffer
    pool**, rather than flushing all dirty pages at once which would disrupt database
    processing.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 一种从**缓冲池**中**刷新**小批量**脏页**的技术，而不是一次刷新所有脏页，这样会干扰数据库处理。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [dirty page](glossary.html#glos_dirty_page),
    [flush](glossary.html#glos_flush).
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [缓冲池](glossary.html#glos_buffer_pool)，[脏页](glossary.html#glos_dirty_page)，[刷新](glossary.html#glos_flush)。
- en: G
  id: totrans-533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: G
- en: GA
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: GA
- en: “Generally available”, the stage when a software product leaves **beta** and
    is available for sale, official support, and production use.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: “一般可用”，软件产品离开**测试版**并可供销售、官方支持和生产使用的阶段。
- en: See Also [beta](glossary.html#glos_beta).
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [测试版](glossary.html#glos_beta)。
- en: GAC
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: GAC
- en: Acronym for “Global Assembly Cache”. A central area for storing libraries (**assemblies**)
    on a **.NET** system. Physically consists of nested folders, treated as a single
    virtual folder by the **.NET** CLR.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: “全局程序集缓存”（[Global Assembly Cache](https://wiki.example.org/global_assembly_cache)）的缩写。在
    **.NET** 系统中存储库（**程序集**）的中心区域。在物理上由嵌套文件夹组成，在 **.NET** CLR 中被视为单个虚拟文件夹。
- en: See Also [.NET](glossary.html#glos__net), [assembly](glossary.html#glos_assembly).
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [.NET](glossary.html#glos__net)，[程序集](glossary.html#glos_assembly)。
- en: gap
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 间隙
- en: A place in an `InnoDB` **index** data structure where new values could be inserted.
    When you lock a set of rows with a statement such as `SELECT ... FOR UPDATE`,
    `InnoDB` can create locks that apply to the gaps as well as the actual values
    in the index. For example, if you select all values greater than 10 for update,
    a gap lock prevents another transaction from inserting a new value that is greater
    than 10\. The **supremum record** and **infimum record** represent the gaps containing
    all values greater than or less than all the current index values.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `InnoDB` **索引** 数据结构中可以插入新值的位置。当你使用诸如 `SELECT ... FOR UPDATE` 这样的语句锁定一组行时，`InnoDB`
    可以创建适用于间隙和实际索引中的值的锁。例如，如果你选择所有大于 10 的值进行更新，间隙锁会阻止另一个事务插入一个大于 10 的新值。**最大记录**和**最小记录**代表包含所有大于或小于当前索引值的间隙。
- en: See Also [concurrency](glossary.html#glos_concurrency), [gap lock](glossary.html#glos_gap_lock),
    [index](glossary.html#glos_index), [infimum record](glossary.html#glos_infimum_record),
    [isolation level](glossary.html#glos_isolation_level), [supremum record](glossary.html#glos_supremum_record).
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [并发性](glossary.html#glos_concurrency)，[间隙锁](glossary.html#glos_gap_lock)，[索引](glossary.html#glos_index)，[最小记录](glossary.html#glos_infimum_record)，[隔离级别](glossary.html#glos_isolation_level)，[最大记录](glossary.html#glos_supremum_record)。
- en: gap lock
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 间隙锁
- en: A **lock** on a **gap** between index records, or a lock on the gap before the
    first or after the last index record. For example, `SELECT c1 FROM t WHERE c1
    BETWEEN 10 and 20 FOR UPDATE;` prevents other transactions from inserting a value
    of 15 into the column `t.c1`, whether or not there was already any such value
    in the column, because the gaps between all existing values in the range are locked.
    Contrast with **record lock** and **next-key lock**.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 在索引记录之间的**间隙**上的**锁**，或在第一个索引记录之前或最后一个索引记录之后的间隙上的锁。例如，`SELECT c1 FROM t WHERE
    c1 BETWEEN 10 and 20 FOR UPDATE;` 阻止其他事务将值 15 插入到列 `t.c1` 中，无论该列中是否已经存在这样的值，因为范围内所有现有值之间的间隙都被锁定。与**记录锁**和**下一个键锁**相对。
- en: Gap locks are part of the tradeoff between performance and **concurrency**,
    and are used in some transaction **isolation levels** and not others.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 间隙锁是在性能和**并发性**之间的权衡中的一部分，并且在某些事务**隔离级别**中使用，而在其他事务中则不使用。
- en: See Also [gap](glossary.html#glos_gap), [infimum record](glossary.html#glos_infimum_record),
    [lock](glossary.html#glos_lock), [next-key lock](glossary.html#glos_next_key_lock),
    [record lock](glossary.html#glos_record_lock), [supremum record](glossary.html#glos_supremum_record).
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [间隙](glossary.html#glos_gap)，[最小记录](glossary.html#glos_infimum_record)，[锁](glossary.html#glos_lock)，[下一个键锁](glossary.html#glos_next_key_lock)，[记录锁](glossary.html#glos_record_lock)，[最大记录](glossary.html#glos_supremum_record)。
- en: general log
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 通用日志
- en: See [general query log](glossary.html#glos_general_query_log).
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [通用查询日志](glossary.html#glos_general_query_log)。
- en: general query log
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 通用查询日志
- en: A type of **log** used for diagnosis and troubleshooting of SQL statements processed
    by the MySQL server. Can be stored in a file or in a database table. You must
    enable this feature through the [`general_log`](server-system-variables.html#sysvar_general_log)
    configuration option to use it. You can disable it for a specific connection through
    the [`sql_log_off`](server-system-variables.html#sysvar_sql_log_off) configuration
    option.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 用于诊断和排除MySQL服务器处理的SQL语句的一种**日志**类型。可以存储在文件中或数据库表中。您必须通过[`general_log`](server-system-variables.html#sysvar_general_log)配置选项启用此功能才能使用它。您可以通过[`sql_log_off`](server-system-variables.html#sysvar_sql_log_off)配置选项为特定连接禁用它。
- en: Records a broader range of queries than the **slow query log**. Unlike the **binary
    log**, which is used for replication, the general query log contains [`SELECT`](select.html
    "15.2.13 SELECT Statement") statements and does not maintain strict ordering.
    For more information, see [Section 7.4.3, “The General Query Log”](query-log.html
    "7.4.3 The General Query Log").
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 记录比**慢查询日志**更广泛范围的查询。与用于复制的**二进制日志**不同，通用查询日志包含[`SELECT`](select.html "15.2.13 SELECT
    语句")语句，并且不保持严格的顺序。欲了解更多信息，请参阅[第7.4.3节，“通用查询日志”](query-log.html "7.4.3 通用查询日志")。
- en: See Also [binary log](glossary.html#glos_binary_log), [log](glossary.html#glos_log),
    [slow query log](glossary.html#glos_slow_query_log).
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[二进制日志](glossary.html#glos_binary_log)，[日志](glossary.html#glos_log)，[慢查询日志](glossary.html#glos_slow_query_log)。
- en: general tablespace
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 通用表空间
- en: A shared `InnoDB` **tablespace** created using [`CREATE TABLESPACE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement") syntax. General tablespaces can be created
    outside of the MySQL data directory, are capable of holding multiple **tables**,
    and support tables of all row formats. General tablespaces were introduced in
    MySQL 5.7.6.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE 语句")语法创建的共享`InnoDB`
    **表空间**。通用表空间可以在MySQL数据目录之外创建，能够容纳多个**表**，并支持所有行格式的表。通用表空间在MySQL 5.7.6中引入。
- en: Tables are added to a general tablespace using [`CREATE TABLE *`tbl_name`* ...
    TABLESPACE [=] *`tablespace_name`*`](create-table.html "15.1.20 CREATE TABLE Statement")
    or [`ALTER TABLE *`tbl_name`* TABLESPACE [=] *`tablespace_name`*`](alter-table.html
    "15.1.9 ALTER TABLE Statement") syntax.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`CREATE TABLE *`tbl_name`* ... TABLESPACE [=] *`tablespace_name`*`](create-table.html
    "15.1.20 CREATE TABLE 语句")或[`ALTER TABLE *`tbl_name`* TABLESPACE [=] *`tablespace_name`*`](alter-table.html
    "15.1.9 ALTER TABLE 语句")语法将表添加到通用表空间。
- en: Contrast with **system tablespace** and **file-per-table** tablespace.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 与**系统表空间**和**每表一个文件**表空间相对比。
- en: For more information, see [Section 17.6.3.3, “General Tablespaces”](general-tablespaces.html
    "17.6.3.3 General Tablespaces").
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[第17.6.3.3节，“通用表空间”](general-tablespaces.html "17.6.3.3 通用表空间")。
- en: See Also [file-per-table](glossary.html#glos_file_per_table), [system tablespace](glossary.html#glos_system_tablespace),
    [table](glossary.html#glos_table), [tablespace](glossary.html#glos_tablespace).
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[每表一个文件](glossary.html#glos_file_per_table)，[系统表空间](glossary.html#glos_system_tablespace)，[表](glossary.html#glos_table)，[表空间](glossary.html#glos_tablespace)。
- en: generated column
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 生成列
- en: A column whose values are computed from an expression included in the column
    definition. A generated column can be **virtual** or **stored**.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 其值是从列定义中包含的表达式计算而来的列。生成列可以是**虚拟**的或**存储**的。
- en: See Also [base column](glossary.html#glos_base_column), [stored generated column](glossary.html#glos_stored_generated_column),
    [virtual generated column](glossary.html#glos_virtual_generated_column).
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[基本列](glossary.html#glos_base_column)，[存储生成列](glossary.html#glos_stored_generated_column)，[虚拟生成列](glossary.html#glos_virtual_generated_column)。
- en: generated stored column
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的存储列
- en: See [stored generated column](glossary.html#glos_stored_generated_column).
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[存储生成列](glossary.html#glos_stored_generated_column)。
- en: generated virtual column
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的虚拟列
- en: See [virtual generated column](glossary.html#glos_virtual_generated_column).
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[虚拟生成列](glossary.html#glos_virtual_generated_column)。
- en: Glassfish
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: Glassfish
- en: See Also [J2EE](glossary.html#glos_j2ee).
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[J2EE](glossary.html#glos_j2ee)。
- en: global temporary tablespace
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 全局临时表空间
- en: A *temporary tablespace* that stores *rollback segments* for changes made to
    user-created temporary tables.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 用于存储对用户创建的临时表所做更改的*临时表空间*。
- en: See Also [temporary tablespace](glossary.html#glos_temporary_tablespace).
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[临时表空间](glossary.html#glos_temporary_tablespace)。
- en: global transaction
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 全局事务
- en: A type of **transaction** involved in **XA** operations. It consists of several
    actions that are transactional in themselves, but that all must either complete
    successfully as a group, or all be rolled back as a group. In essence, this extends
    **ACID** properties “up a level” so that multiple ACID transactions can be executed
    in concert as components of a global operation that also has ACID properties.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 一种涉及**XA**操作的**事务**类型。它包含几个本身具有事务性的操作，但所有这些操作必须作为一组成功完成，或者作为一组回滚。本质上，这将**ACID**属性“提升”到更高级别，以便多个ACID事务可以作为全局操作的组成部分一起执行，并且也具有ACID属性。
- en: See Also [ACID](glossary.html#glos_acid), [transaction](glossary.html#glos_transaction),
    [XA](glossary.html#glos_xa).
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ACID](glossary.html#glos_acid)，[事务](glossary.html#glos_transaction)，[XA](glossary.html#glos_xa)。
- en: group commit
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 组提交
- en: An `InnoDB` optimization that performs some low-level I/O operations (log write)
    once for a set of **commit** operations, rather than flushing and syncing separately
    for each commit.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 一种`InnoDB`优化，对一组**提交**操作执行一些低级I/O操作（日志写入），而不是为每个提交单独刷新和同步。
- en: See Also [binary log](glossary.html#glos_binary_log), [commit](glossary.html#glos_commit).
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[二进制日志](glossary.html#glos_binary_log)，[提交](glossary.html#glos_commit)。
- en: GUID
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 全局唯一标识符
- en: Acronym for “globally unique identifier”, an ID value that can be used to associate
    data across different databases, languages, operating systems, and so on. (As
    an alternative to using sequential integers, where the same values could appear
    in different tables, databases, and so on referring to different data.) Older
    MySQL versions represented it as `BINARY(16)`. Currently, it is represented as
    `CHAR(36)`. MySQL has a `UUID()` function that returns GUID values in character
    format, and a `UUID_SHORT()` function that returns GUID values in integer format.
    Because successive GUID values are not necessarily in ascending sort order, it
    is not an efficient value to use as a primary key for large InnoDB tables.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: “全局唯一标识符”的缩写，一种可以用于跨不同数据库、语言、操作系统等关联数据的ID值。（作为使用顺序整数的替代方案，其中相同的值可能出现在不同表、数据库等中，引用不同数据。）较旧的MySQL版本将其表示为`BINARY(16)`。目前，它表示为`CHAR(36)`。MySQL有一个`UUID()`函数，返回字符格式的GUID值，以及一个`UUID_SHORT()`函数，返回整数格式的GUID值。由于连续的GUID值不一定按升序排序，因此对于大型InnoDB表来说，它不是一个有效的主键值使用。
- en: H
  id: totrans-579
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: H
- en: hash index
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希索引
- en: A type of **index** intended for queries that use equality operators, rather
    than range operators such as greater-than or `BETWEEN`. It is available for [`MEMORY`](memory-storage-engine.html
    "18.3 The MEMORY Storage Engine") tables. Although hash indexes are the default
    for [`MEMORY`](memory-storage-engine.html "18.3 The MEMORY Storage Engine") tables
    for historic reasons, that storage engine also supports **B-tree** indexes, which
    are often a better choice for general-purpose queries.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 一种用于使用相等运算符而不是大于或`BETWEEN`范围运算符的查询的**索引**类型。适用于[`MEMORY`](memory-storage-engine.html
    "18.3 The MEMORY Storage Engine")表。尽管出于历史原因哈希索引是[`MEMORY`](memory-storage-engine.html
    "18.3 The MEMORY Storage Engine")表的默认选择，该存储引擎也支持**B树**索引，对于通用查询而言通常是更好的选择。
- en: MySQL includes a variant of this index type, the **adaptive hash index**, that
    is constructed automatically for [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine") tables if needed based on runtime conditions.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL包括这种索引类型的变体，即**自适应哈希索引**，根据运行时条件自动为[`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine")表构建。
- en: See Also [adaptive hash index](glossary.html#glos_adaptive_hash_index), [B-tree](glossary.html#glos_b_tree),
    [index](glossary.html#glos_index), [InnoDB](glossary.html#glos_innodb).
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[自适应哈希索引](glossary.html#glos_adaptive_hash_index)，[B树](glossary.html#glos_b_tree)，[索引](glossary.html#glos_index)，[InnoDB](glossary.html#glos_innodb)。
- en: HDD
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 硬盘驱动器
- en: Acronym for “hard disk drive”. Refers to storage media using spinning platters,
    usually when comparing and contrasting with **SSD**. Its performance characteristics
    can influence the throughput of a **disk-based** workload.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: “硬盘驱动器”的缩写。通常用于比较和对比**SSD**时指代使用旋转盘片的存储介质。其性能特征可以影响**基于磁盘**工作负载的吞吐量。
- en: See Also [disk-based](glossary.html#glos_disk_based), [SSD](glossary.html#glos_ssd).
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[基于磁盘](glossary.html#glos_disk_based)，[SSD](glossary.html#glos_ssd)。
- en: heartbeat
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 心跳
- en: A periodic message that is sent to indicate that a system is functioning properly.
    In a **replication** context, if the **source** stops sending such messages, one
    of the **replicas** can take its place. Similar techniques can be used between
    the servers in a cluster environment, to confirm that all of them are operating
    properly.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 定期发送的消息，用于指示系统正常运行。在**复制**环境中，如果**源**停止发送此类消息，其中一个**副本**可以接替其位置。类似的技术可以在集群环境中的服务器之间使用，以确认它们都正常运行。
- en: See Also [replication](glossary.html#glos_replication), [source](glossary.html#glos_source).
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[复制](glossary.html#glos_replication)，[源](glossary.html#glos_source)。
- en: high-water mark
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 高水位标记
- en: A value representing an upper limit, either a hard limit that should not be
    exceeded at runtime, or a record of the maximum value that was actually reached.
    Contrast with **low-water mark**.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 代表上限值，可以是运行时不应超过的硬限制，也可以是实际达到的最大值的记录。与**低水位标记**形成对比。
- en: See Also [low-water mark](glossary.html#glos_low_water_mark).
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[低水位标记](glossary.html#glos_low_water_mark)。
- en: history list
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 历史记录列表
- en: A list of **transactions** with delete-marked records scheduled to be processed
    by the `InnoDB` **purge** operation. Recorded in the **undo log**. The length
    of the history list is reported by the command `SHOW ENGINE INNODB STATUS`. If
    the history list grows longer than the value of the [`innodb_max_purge_lag`](innodb-parameters.html#sysvar_innodb_max_purge_lag)
    configuration option, each **DML** operation is delayed slightly to allow the
    purge operation to finish **flushing** the deleted records.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**事务**列表，其中包含计划由`InnoDB`的**清除**操作处理的带删除标记的记录。记录在**撤销日志**中。历史记录列表的长度由命令`SHOW
    ENGINE INNODB STATUS`报告。如果历史记录列表增长超过[`innodb_max_purge_lag`](innodb-parameters.html#sysvar_innodb_max_purge_lag)配置选项的值，每个**DML**操作都会稍微延迟，以允许清除操作完成**刷新**已删除的记录。
- en: Also known as **purge lag**.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为**清除延迟**。
- en: See Also [DML](glossary.html#glos_dml), [flush](glossary.html#glos_flush), [purge](glossary.html#glos_purge),
    [purge lag](glossary.html#glos_purge_lag), [rollback segment](glossary.html#glos_rollback_segment),
    [transaction](glossary.html#glos_transaction), [undo log](glossary.html#glos_undo_log).
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[DML](glossary.html#glos_dml)，[刷新](glossary.html#glos_flush)，[清除](glossary.html#glos_purge)，[清除延迟](glossary.html#glos_purge_lag)，[回滚段](glossary.html#glos_rollback_segment)，[事务](glossary.html#glos_transaction)，[撤销日志](glossary.html#glos_undo_log)。
- en: hole punching
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 空洞打孔
- en: Releasing empty blocks from a page. The `InnoDB` **transparent page compression**
    feature relies on hole punching support. For more information, see [Section 17.9.2,
    “InnoDB Page Compression”](innodb-page-compression.html "17.9.2 InnoDB Page Compression").
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 释放页面中的空块。`InnoDB`的**透明页压缩**功能依赖于空洞打孔支持。有关更多信息，请参阅[第17.9.2节，“InnoDB页压缩”](innodb-page-compression.html
    "17.9.2 InnoDB Page Compression")。
- en: See Also [sparse file](glossary.html#glos_sparse_file), [transparent page compression](glossary.html#glos_transparent_page_compression).
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[稀疏文件](glossary.html#glos_sparse_file)，[透明页压缩](glossary.html#glos_transparent_page_compression)。
- en: host
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 主机
- en: The network name of a database server, used to establish a **connection**. Often
    specified in conjunction with a **port**. In some contexts, the IP address `127.0.0.1`
    works better than the special name `localhost` for accessing a database on the
    same server as the application.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库服务器的网络名称，用于建立**连接**。通常与**端口**一起指定。在某些情况下，IP地址`127.0.0.1`比特殊名称`localhost`更适合访问与应用程序在同一服务器上的数据库。
- en: See Also [connection](glossary.html#glos_connection), [localhost](glossary.html#glos_localhost),
    [port](glossary.html#glos_port).
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[连接](glossary.html#glos_connection)，[本地主机](glossary.html#glos_localhost)，[端口](glossary.html#glos_port)。
- en: hot
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 热
- en: A condition where a row, table, or internal data structure is accessed so frequently,
    requiring some form of locking or mutual exclusion, that it results in a performance
    or scalability issue.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 一种情况，其中行、表或内部数据结构被频繁访问，需要某种形式的锁定或互斥，导致性能或可伸缩性问题。
- en: Although “hot” typically indicates an undesirable condition, a **hot backup**
    is the preferred type of backup.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管“热”通常表示不良条件，**热备份**是首选的备份类型。
- en: See Also [hot backup](glossary.html#glos_hot_backup).
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[热备份](glossary.html#glos_hot_backup)。
- en: hot backup
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 热备份
- en: 'A backup taken while the database is running and applications are reading and
    writing to it. The backup involves more than simply copying data files: it must
    include any data that was inserted or updated while the backup was in process;
    it must exclude any data that was deleted while the backup was in process; and
    it must ignore any changes that were not committed.'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库运行并应用程序正在读写时进行备份。备份不仅涉及简单地复制数据文件：它必须包括在备份过程中插入或更新的任何数据；必须排除在备份过程中删除的任何数据；并且必须忽略未提交的任何更改。
- en: The Oracle product that performs hot backups, of `InnoDB` tables especially
    but also tables from `MyISAM` and other storage engines, is known as **MySQL Enterprise
    Backup**.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 执行热备份的Oracle产品，特别是`InnoDB`表，还包括来自`MyISAM`和其他存储引擎的表，被称为**MySQL企业备份**。
- en: The hot backup process consists of two stages. The initial copying of the data
    files produces a **raw backup**. The **apply** step incorporates any changes to
    the database that happened while the backup was running. Applying the changes
    produces a **prepared** backup; these files are ready to be restored whenever
    necessary.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 热备份过程包括两个阶段。数据文件的初始复制产生一个**原始备份**。**应用**步骤将在备份运行时发生的数据库更改合并进来。应用更改会产生一个**准备好的**备份；这些文件随时可以在需要时进行恢复。
- en: See Also [apply](glossary.html#glos_apply), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [prepared backup](glossary.html#glos_prepared_backup), [raw backup](glossary.html#glos_raw_backup).
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[应用](glossary.html#glos_apply)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[准备好的备份](glossary.html#glos_prepared_backup)，[原始备份](glossary.html#glos_raw_backup)。
- en: I
  id: totrans-612
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: I
- en: .ibd file
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: .ibd 文件
- en: The data file for **file-per-table** tablespaces and general tablespaces. File-per-table
    tablespace `.ibd` files contain a single table and associated index data. **General
    tablespace** `.ibd` files may contain table and index data for multiple tables.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '**按表分文件**表空间和通用表空间的数据文件。按表分文件表空间`.ibd`文件包含单个表和相关索引数据。**通用表空间**`.ibd`文件可能包含多个表的表和索引数据。'
- en: The `.ibd` file extension does not apply to the **system tablespace**, which
    consists of one or more **ibdata files**.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '`.ibd`文件扩展名不适用于**系统表空间**，系统表空间由一个或多个**ibdata文件**组成。'
- en: If a file-per-table tablespace or general tablespace is created with the `DATA
    DIRECTORY =` clause, the `.ibd` file is located at the specified path, outside
    the normal data directory.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`DATA DIRECTORY =`子句创建了一个按表分文件表空间或通用表空间，则`.ibd`文件位于指定路径，而不在正常数据目录之内。
- en: When a `.ibd` file is included in a compressed backup by the **MySQL Enterprise
    Backup** product, the compressed equivalent is a `.ibz` file.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 当**MySQL企业备份**产品在压缩备份中包含一个`.ibd`文件时，压缩等效文件是一个`.ibz`文件。
- en: See Also [database](glossary.html#glos_database), [file-per-table](glossary.html#glos_file_per_table),
    [general tablespace](glossary.html#glos_general_tablespace), [ibdata file](glossary.html#glos_ibdata_file),
    [.ibz file](glossary.html#glos_ibz_file), [innodb_file_per_table](glossary.html#glos_innodb_file_per_table),
    [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup), [system
    tablespace](glossary.html#glos_system_tablespace).
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[数据库](glossary.html#glos_database)，[按表分文件](glossary.html#glos_file_per_table)，[通用表空间](glossary.html#glos_general_tablespace)，[ibdata文件](glossary.html#glos_ibdata_file)，[.ibz文件](glossary.html#glos_ibz_file)，[innodb_file_per_table](glossary.html#glos_innodb_file_per_table)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[系统表空间](glossary.html#glos_system_tablespace)。
- en: .ibz file
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: .ibz 文件
- en: When the **MySQL Enterprise Backup** product performs a **compressed backup**,
    it transforms each **tablespace** file that is created using the **file-per-table**
    setting from a `.ibd` extension to a `.ibz` extension.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 当**MySQL企业备份**产品执行**压缩备份**时，它会将使用**按表分文件**设置创建的每个**表空间**文件从`.ibd`扩展名转换为`.ibz`扩展名。
- en: The compression applied during backup is distinct from the **compressed row
    format** that keeps table data compressed during normal operation. A compressed
    backup operation skips the compression step for a tablespace that is already in
    compressed row format, as compressing a second time would slow down the backup
    but produce little or no space savings.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 备份期间应用的压缩与在正常操作期间保持表数据压缩的**压缩行格式**是不同的。压缩备份操作会跳过已经处于压缩行格式的表空间的压缩步骤，因为再次压缩会减慢备份速度，但几乎不会产生空间节省。
- en: See Also [compressed backup](glossary.html#glos_compressed_backup), [compressed
    row format](glossary.html#glos_compressed_row_format), [file-per-table](glossary.html#glos_file_per_table),
    [.ibd file](glossary.html#glos_ibd_file), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [tablespace](glossary.html#glos_tablespace).
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[压缩备份](glossary.html#glos_compressed_backup)，[压缩行格式](glossary.html#glos_compressed_row_format)，[每表一个文件](glossary.html#glos_file_per_table)，[.ibd
    文件](glossary.html#glos_ibd_file)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[表空间](glossary.html#glos_tablespace)。
- en: I/O-bound
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: I/O绑定
- en: See [disk-bound](glossary.html#glos_disk_bound).
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[磁盘绑定](glossary.html#glos_disk_bound)。
- en: ib-file set
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: ib文件集
- en: 'The set of files managed by `InnoDB` within a MySQL database: the **system
    tablespace**, **file-per-table** tablespace files, and **redo log** files. Depending
    on MySQL version and `InnoDB` configuration, may also include **general tablespace**,
    **temporary tablespace**, and **undo tablespace** files. This term is sometimes
    used in detailed discussions of `InnoDB` file structures and formats to refer
    to the set of files managed by `InnoDB` within a MySQL database.'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL数据库中由`InnoDB`管理的一组文件：**系统表空间**，**每表一个文件**表空间文件和**重做日志**文件。根据MySQL版本和`InnoDB`配置，还可能包括**通用表空间**，**临时表空间**和**撤销表空间**文件。这个术语有时在详细讨论`InnoDB`文件结构和格式时用来指代MySQL数据库中由`InnoDB`管理的文件集。
- en: See Also [database](glossary.html#glos_database), [file-per-table](glossary.html#glos_file_per_table),
    [general tablespace](glossary.html#glos_general_tablespace), [redo log](glossary.html#glos_redo_log),
    [system tablespace](glossary.html#glos_system_tablespace), [temporary tablespace](glossary.html#glos_temporary_tablespace),
    [undo tablespace](glossary.html#glos_undo_tablespace).
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[数据库](glossary.html#glos_database)，[每表一个文件](glossary.html#glos_file_per_table)，[通用表空间](glossary.html#glos_general_tablespace)，[重做日志](glossary.html#glos_redo_log)，[系统表空间](glossary.html#glos_system_tablespace)，[临时表空间](glossary.html#glos_temporary_tablespace)，[撤销表空间](glossary.html#glos_undo_tablespace)。
- en: ibbackup_logfile
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: ibbackup_logfile
- en: A supplemental backup file created by the **MySQL Enterprise Backup** product
    during a **hot backup** operation. It contains information about any data changes
    that occurred while the backup was running. The initial backup files, including
    `ibbackup_logfile`, are known as a **raw backup**, because the changes that occurred
    during the backup operation are not yet incorporated. After you perform the **apply**
    step to the raw backup files, the resulting files do include those final data
    changes, and are known as a **prepared backup**. At this stage, the `ibbackup_logfile`
    file is no longer necessary.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '**MySQL企业备份**产品在**热备份**操作期间创建的一个补充备份文件。它包含备份运行时发生的任何数据更改的信息。初始备份文件，包括`ibbackup_logfile`，被称为**原始备份**，因为备份操作期间发生的更改尚未合并。在对原始备份文件执行**应用**步骤后，生成的文件确实包含那些最终数据更改，并被称为**准备备份**。在这个阶段，`ibbackup_logfile`文件不再需要。'
- en: See Also [apply](glossary.html#glos_apply), [hot backup](glossary.html#glos_hot_backup),
    [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup), [prepared
    backup](glossary.html#glos_prepared_backup), [raw backup](glossary.html#glos_raw_backup).
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[应用](glossary.html#glos_apply)，[热备份](glossary.html#glos_hot_backup)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[准备备份](glossary.html#glos_prepared_backup)，[原始备份](glossary.html#glos_raw_backup)。
- en: ibdata file
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: ibdata文件
- en: A set of files with names such as `ibdata1`, `ibdata2`, and so on, that make
    up the `InnoDB` **system tablespace**. For information about the structures and
    data that reside in the system tablespace `ibdata` files, see [Section 17.6.3.1,
    “The System Tablespace”](innodb-system-tablespace.html "17.6.3.1 The System Tablespace").
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 一组文件，如`ibdata1`，`ibdata2`等，组成`InnoDB`的**系统表空间**。有关驻留在系统表空间`ibdata`文件中的结构和数据的信息，请参阅[第17.6.3.1节，“系统表空间”](innodb-system-tablespace.html
    "17.6.3.1 系统表空间")。
- en: Growth of the `ibdata` files is influenced by the [`innodb_autoextend_increment`](innodb-parameters.html#sysvar_innodb_autoextend_increment)
    configuration option.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '`ibdata`文件的增长受[`innodb_autoextend_increment`](innodb-parameters.html#sysvar_innodb_autoextend_increment)配置选项的影响。'
- en: See Also [change buffer](glossary.html#glos_change_buffer), [data dictionary](glossary.html#glos_data_dictionary),
    [doublewrite buffer](glossary.html#glos_doublewrite_buffer), [file-per-table](glossary.html#glos_file_per_table),
    [.ibd file](glossary.html#glos_ibd_file), [innodb_file_per_table](glossary.html#glos_innodb_file_per_table),
    [system tablespace](glossary.html#glos_system_tablespace), [undo log](glossary.html#glos_undo_log).
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [更改缓冲区](glossary.html#glos_change_buffer)，[数据字典](glossary.html#glos_data_dictionary)，[双写缓冲区](glossary.html#glos_doublewrite_buffer)，[每表一个文件](glossary.html#glos_file_per_table)，[.ibd文件](glossary.html#glos_ibd_file)，[innodb_file_per_table](glossary.html#glos_innodb_file_per_table)，[系统表空间](glossary.html#glos_system_tablespace)，[撤销日志](glossary.html#glos_undo_log)。
- en: ibtmp file
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: ibtmp文件
- en: The `InnoDB` **temporary tablespace** **data file** for non-compressed `InnoDB`
    **temporary tables** and related objects. The configuration file option, [`innodb_temp_data_file_path`](innodb-parameters.html#sysvar_innodb_temp_data_file_path),
    allows users to define a relative path for the temporary tablespace data file.
    If [`innodb_temp_data_file_path`](innodb-parameters.html#sysvar_innodb_temp_data_file_path)
    is not specified, the default behavior is to create a single auto-extending 12MB
    data file named `ibtmp1` in the data directory, alongside `ibdata1`.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 用于非压缩`InnoDB` **临时表**和相关对象的`InnoDB` **临时表空间** **数据文件**。配置文件选项[`innodb_temp_data_file_path`](innodb-parameters.html#sysvar_innodb_temp_data_file_path)允许用户定义临时表空间数据文件的相对路径。如果未指定[`innodb_temp_data_file_path`](innodb-parameters.html#sysvar_innodb_temp_data_file_path)，默认行为是在数据目录中创建一个名为`ibtmp1`的单个自动扩展12MB数据文件，与`ibdata1`一起。
- en: See Also [data files](glossary.html#glos_data_files), [temporary table](glossary.html#glos_temporary_table),
    [temporary tablespace](glossary.html#glos_temporary_tablespace).
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [数据文件](glossary.html#glos_data_files)，[临时表](glossary.html#glos_temporary_table)，[临时表空间](glossary.html#glos_temporary_tablespace)。
- en: ib_logfile
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: ib_logfile
- en: A set of files, typically named `ib_logfile0` and `ib_logfile1`, that form the
    **redo log**. Also sometimes referred to as the **log group**. These files record
    statements that attempt to change data in `InnoDB` tables. These statements are
    replayed automatically to correct data written by incomplete transactions, on
    startup following a crash.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 一组文件，通常命名为`ib_logfile0`和`ib_logfile1`，构成**重做日志**。有时也称为**日志组**。这些文件记录尝试更改`InnoDB`表中数据的语句。这些语句在启动时自动重放，以纠正不完整事务写入的数据。
- en: This data cannot be used for manual recovery; for that type of operation, use
    the **binary log**.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据不能用于手动恢复；对于这种类型的操作，请使用**二进制日志**。
- en: See Also [binary log](glossary.html#glos_binary_log), [log group](glossary.html#glos_log_group),
    [redo log](glossary.html#glos_redo_log).
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [二进制日志](glossary.html#glos_binary_log)，[日志组](glossary.html#glos_log_group)，[重做日志](glossary.html#glos_redo_log)。
- en: ilist
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: ilist
- en: Within an `InnoDB` **FULLTEXT index**, the data structure consisting of a document
    ID and positional information for a token (that is, a particular word).
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InnoDB` **全文索引**中，数据结构由文档ID和标记的位置信息（即特定单词）组成。
- en: See Also [FULLTEXT index](glossary.html#glos_fulltext_index).
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [全文索引](glossary.html#glos_fulltext_index)。
- en: implicit row lock
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式行锁
- en: A row lock that `InnoDB` acquires to ensure consistency, without you specifically
    requesting it.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`获取的用于确保一致性的行锁，无需您明确请求。'
- en: See Also [row lock](glossary.html#glos_row_lock).
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [行锁](glossary.html#glos_row_lock)。
- en: in-memory database
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 内存数据库
- en: A type of database system that maintains data in memory, to avoid overhead due
    to disk I/O and translation between disk blocks and memory areas. Some in-memory
    databases sacrifice durability (the “D” in the **ACID** design philosophy) and
    are vulnerable to hardware, power, and other types of failures, making them more
    suitable for read-only operations. Other in-memory databases do use durability
    mechanisms such as logging changes to disk or using non-volatile memory.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 一种在内存中维护数据的数据库系统，以避免由于磁盘I/O和磁盘块与内存区域之间的转换而产生的开销。一些内存数据库牺牲了持久性（**ACID**设计哲学中的“D”），容易受到硬件、电源和其他类型的故障影响，使其更适合只读操作。其他内存数据库确实使用了诸如记录更改到磁盘或使用非易失性内存等持久性机制。
- en: MySQL features that address the same kinds of memory-intensive processing include
    the `InnoDB` **buffer pool**, **adaptive hash index**, and **read-only transaction**
    optimization, the [`MEMORY`](memory-storage-engine.html "18.3 The MEMORY Storage
    Engine") storage engine, the `MyISAM` key cache, and the MySQL query cache.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL解决同类内存密集型处理的功能包括`InnoDB` **缓冲池**，**自适应哈希索引**和**只读事务**优化，[`MEMORY`](memory-storage-engine.html
    "18.3 The MEMORY Storage Engine")存储引擎，`MyISAM`关键缓存和MySQL查询缓存。
- en: See Also [ACID](glossary.html#glos_acid), [adaptive hash index](glossary.html#glos_adaptive_hash_index),
    [buffer pool](glossary.html#glos_buffer_pool), [disk-based](glossary.html#glos_disk_based),
    [read-only transaction](glossary.html#glos_read_only_transaction).
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[ACID](glossary.html#glos_acid)、[自适应哈希索引](glossary.html#glos_adaptive_hash_index)、[缓冲池](glossary.html#glos_buffer_pool)、[基于磁盘](glossary.html#glos_disk_based)、[只读事务](glossary.html#glos_read_only_transaction)。
- en: incremental backup
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 增量备份
- en: A type of **hot backup**, performed by the **MySQL Enterprise Backup** product,
    that only saves data changed since some point in time. Having a full backup and
    a succession of incremental backups lets you reconstruct backup data over a long
    period, without the storage overhead of keeping several full backups on hand.
    You can restore the full backup and then apply each of the incremental backups
    in succession, or you can keep the full backup up-to-date by applying each incremental
    backup to it, then perform a single restore operation.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**热备份**类型，由**MySQL企业备份**产品执行，仅保存自某个时间点以来更改的数据。拥有完整备份和一系列增量备份可以让您在长时间内重建备份数据，而不需要保留多个完整备份的存储开销。您可以恢复完整备份，然后依次应用每个增量备份，或者您可以通过将每个增量备份应用到完整备份中来保持完整备份最新，然后执行单个恢复操作。
- en: The granularity of changed data is at the **page** level. A page might actually
    cover more than one row. Each changed page is included in the backup.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 更改数据的粒度是在**页**级别。一个页实际上可能涵盖多个行。每个更改的页都包含在备份中。
- en: See Also [hot backup](glossary.html#glos_hot_backup), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [page](glossary.html#glos_page).
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[热备份](glossary.html#glos_hot_backup)、[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)、[页](glossary.html#glos_page)。
- en: index
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 索引
- en: A data structure that provides a fast lookup capability for **rows** of a **table**,
    typically by forming a tree structure (**B-tree)** representing all the values
    of a particular **column** or set of columns.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 一种数据结构，为**表**的**行**提供快速查找能力，通常通过形成代表特定**列**或一组列的所有值的树结构（**B树**）来实现。
- en: '`InnoDB` tables always have a **clustered index** representing the **primary
    key**. They can also have one or more **secondary indexes** defined on one or
    more columns. Depending on their structure, secondary indexes can be classified
    as **partial**, **column**, or **composite** indexes.'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`表始终具有代表**主键**的**聚集索引**。它们还可以在一个或多个列上定义一个或多个**辅助索引**。根据它们的结构，辅助索引可以分类为**部分**、**列**或**复合**索引。'
- en: Indexes are a crucial aspect of **query** performance. Database architects design
    tables, queries, and indexes to allow fast lookups for data needed by applications.
    The ideal database design uses a **covering index** where practical; the query
    results are computed entirely from the index, without reading the actual table
    data. Each **foreign key** constraint also requires an index, to efficiently check
    whether values exist in both the **parent** and **child** tables.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 索引是**查询**性能的关键方面。数据库架构师设计表、查询和索引，以便应用程序快速查找所需的数据。理想的数据库设计在实际情况下使用**覆盖索引**；查询结果完全通过索引计算，而不需要读取实际表数据。每个**外键**约束也需要一个索引，以有效地检查值是否存在于**父**表和**子**表中。
- en: Although a B-tree index is the most common, a different kind of data structure
    is used for **hash indexes**, as in the `MEMORY` storage engine and the `InnoDB`
    **adaptive hash index**. **R-tree** indexes are used for spatial indexing of multi-dimensional
    information.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管B树索引是最常见的，但不同类型的数据结构用于**哈希索引**，如`MEMORY`存储引擎和`InnoDB`的**自适应哈希索引**。**R树**索引用于多维信息的空间索引。
- en: See Also [adaptive hash index](glossary.html#glos_adaptive_hash_index), [B-tree](glossary.html#glos_b_tree),
    [child table](glossary.html#glos_child_table), [clustered index](glossary.html#glos_clustered_index),
    [column index](glossary.html#glos_column_index), [composite index](glossary.html#glos_composite_index),
    [covering index](glossary.html#glos_covering_index), [foreign key](glossary.html#glos_foreign_key),
    [hash index](glossary.html#glos_hash_index), [parent table](glossary.html#glos_parent_table),
    [partial index](glossary.html#glos_partial_index), [primary key](glossary.html#glos_primary_key),
    [query](glossary.html#glos_query), [R-tree](glossary.html#glos_r_tree), [row](glossary.html#glos_row),
    [secondary index](glossary.html#glos_secondary_index), [table](glossary.html#glos_table).
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[自适应哈希索引](glossary.html#glos_adaptive_hash_index)，[B树](glossary.html#glos_b_tree)，[子表](glossary.html#glos_child_table)，[聚簇索引](glossary.html#glos_clustered_index)，[列索引](glossary.html#glos_column_index)，[复合索引](glossary.html#glos_composite_index)，[覆盖索引](glossary.html#glos_covering_index)，[外键](glossary.html#glos_foreign_key)，[哈希索引](glossary.html#glos_hash_index)，[父表](glossary.html#glos_parent_table)，[部分索引](glossary.html#glos_partial_index)，[主键](glossary.html#glos_primary_key)，[查询](glossary.html#glos_query)，[R树](glossary.html#glos_r_tree)，[行](glossary.html#glos_row)，[二级索引](glossary.html#glos_secondary_index)，[表](glossary.html#glos_table)。
- en: index cache
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 索引缓存
- en: A memory area that holds the token data for `InnoDB` **full-text search**. It
    buffers the data to minimize disk I/O when data is inserted or updated in columns
    that are part of a **FULLTEXT index**. The token data is written to disk when
    the index cache becomes full. Each `InnoDB` `FULLTEXT` index has its own separate
    index cache, whose size is controlled by the configuration option [`innodb_ft_cache_size`](innodb-parameters.html#sysvar_innodb_ft_cache_size).
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 一个内存区域，用于保存`InnoDB` **全文搜索**的标记数据。当插入或更新列中的数据时，它会缓冲数据以最小化磁盘I/O。当索引缓存变满时，标记数据会写入磁盘。每个`InnoDB`
    `FULLTEXT`索引都有自己独立的索引缓存，其大小由配置选项[`innodb_ft_cache_size`](innodb-parameters.html#sysvar_innodb_ft_cache_size)控制。
- en: See Also [full-text search](glossary.html#glos_full_text_search), [FULLTEXT
    index](glossary.html#glos_fulltext_index).
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[全文搜索](glossary.html#glos_full_text_search)，[全文索引](glossary.html#glos_fulltext_index)。
- en: index condition pushdown
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 索引条件推送
- en: Index condition pushdown (ICP) is an optimization that pushes part of a `WHERE`
    condition down to the storage engine if parts of the condition can be evaluated
    using fields from the **index**. ICP can reduce the number of times the **storage
    engine** must access the base table and the number of times the MySQL server must
    access the storage engine. For more information, see [Section 10.2.1.6, “Index
    Condition Pushdown Optimization”](index-condition-pushdown-optimization.html "10.2.1.6 Index
    Condition Pushdown Optimization").
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 索引条件推送（ICP）是一种优化，如果条件的部分可以使用**索引**中的字段进行评估，则将`WHERE`条件的一部分推送到存储引擎。 ICP可以减少**存储引擎**必须访问基表的次数，以及MySQL服务器必须访问存储引擎的次数。有关更多信息，请参见[Section 10.2.1.6，“索引条件推送优化”](index-condition-pushdown-optimization.html
    "10.2.1.6 索引条件推送优化")。
- en: See Also [index](glossary.html#glos_index), [storage engine](glossary.html#glos_storage_engine).
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[索引](glossary.html#glos_index)，[存储引擎](glossary.html#glos_storage_engine)。
- en: index hint
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 索引提示
- en: Extended SQL syntax for overriding the **indexes** recommended by the optimizer.
    For example, the `FORCE INDEX`, `USE INDEX`, and `IGNORE INDEX` clauses. Typically
    used when indexed columns have unevenly distributed values, resulting in inaccurate
    **cardinality** estimates.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 用于覆盖优化器推荐的**索引**的扩展SQL语法。例如，`FORCE INDEX`、`USE INDEX`和`IGNORE INDEX`子句。通常在索引列具有分布不均匀的值时使用，导致**基数**估计不准确。
- en: See Also [cardinality](glossary.html#glos_cardinality), [index](glossary.html#glos_index).
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[基数](glossary.html#glos_cardinality)，[索引](glossary.html#glos_index)。
- en: index prefix
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 索引前缀
- en: In an **index** that applies to multiple columns (known as a **composite index**),
    the initial or leading columns of the index. A query that references the first
    1, 2, 3, and so on columns of a composite index can use the index, even if the
    query does not reference all the columns in the index.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 在适用于多列的**索引**（称为**复合索引**）中，索引的初始或领先列。查询引用复合索引的第1、2、3等列的查询可以使用索引，即使查询没有引用索引中的所有列。
- en: See Also [composite index](glossary.html#glos_composite_index), [index](glossary.html#glos_index).
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[复合索引](glossary.html#glos_composite_index)，[索引](glossary.html#glos_index)。
- en: index statistics
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 索引统计
- en: See [statistics](glossary.html#glos_statistics).
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[统计信息](glossary.html#glos_statistics)。
- en: infimum record
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 最小记录
- en: A **pseudo-record** in an **index**, representing the **gap** below the smallest
    value in that index. If a transaction has a statement such as `SELECT ... FROM
    ... WHERE col < 10 FOR UPDATE;`, and the smallest value in the column is 5, it
    is a lock on the infimum record that prevents other transactions from inserting
    even smaller values such as 0, -10, and so on.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 在**索引**中的**伪记录**，表示该索引中最小值下方的**间隙**。如果一个事务有类似`SELECT ... FROM ... WHERE col
    < 10 FOR UPDATE;`的语句，并且列中的最小值为5，则它是对最小记录的锁，阻止其他事务插入更小的值，如0、-10等。
- en: See Also [gap](glossary.html#glos_gap), [index](glossary.html#glos_index), [pseudo-record](glossary.html#glos_pseudo_record),
    [supremum record](glossary.html#glos_supremum_record).
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[间隙](glossary.html#glos_gap)，[索引](glossary.html#glos_index)，[伪记录](glossary.html#glos_pseudo_record)，[最大记录](glossary.html#glos_supremum_record)。
- en: INFORMATION_SCHEMA
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: INFORMATION_SCHEMA
- en: The name of the **database** that provides a query interface to the MySQL **data
    dictionary**. (This name is defined by the ANSI SQL standard.) To examine information
    (metadata) about the database, you can query tables such as `INFORMATION_SCHEMA.TABLES`
    and `INFORMATION_SCHEMA.COLUMNS`, rather than using `SHOW` commands that produce
    unstructured output.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 提供MySQL **数据字典**查询接口的**数据库**名称。（此名称由ANSI SQL标准定义。）要查看有关数据库的信息（元数据），您可以查询诸如`INFORMATION_SCHEMA.TABLES`和`INFORMATION_SCHEMA.COLUMNS`等表，而不是使用产生非结构化输出的`SHOW`命令。
- en: The `INFORMATION_SCHEMA` database also contains tables specific to **InnoDB**
    that provide a query interface to the `InnoDB` data dictionary. You use these
    tables not to see how the database is structured, but to get real-time information
    about the workings of `InnoDB` tables to help with performance monitoring, tuning,
    and troubleshooting.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '`INFORMATION_SCHEMA`数据库还包含特定于**InnoDB**的表，提供对`InnoDB`数据字典的查询接口。您使用这些表不是为了查看数据库的结构，而是为了获取有关`InnoDB`表运作情况的实时信息，以帮助性能监控、调整和故障排除。'
- en: See Also [data dictionary](glossary.html#glos_data_dictionary), [database](glossary.html#glos_database),
    [InnoDB](glossary.html#glos_innodb).
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[数据字典](glossary.html#glos_data_dictionary)，[数据库](glossary.html#glos_database)，[InnoDB](glossary.html#glos_innodb)。
- en: InnoDB
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: InnoDB
- en: A MySQL component that combines high performance with **transactional** capability
    for reliability, robustness, and concurrent access. It embodies the **ACID** design
    philosophy. Represented as a **storage engine**; it handles tables created or
    altered with the `ENGINE=INNODB` clause. See [Chapter 17, *The InnoDB Storage
    Engine*](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine") for
    architectural details and administration procedures, and [Section 10.5, “Optimizing
    for InnoDB Tables”](optimizing-innodb.html "10.5 Optimizing for InnoDB Tables")
    for performance advice.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 一个MySQL组件，结合了高性能和**事务**能力，以确保可靠性、健壮性和并发访问。它体现了**ACID**设计理念。作为一个**存储引擎**；它处理使用`ENGINE=INNODB`子句创建或更改的表。有关架构细节和管理程序，请参阅[第17章，“InnoDB存储引擎”](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine")，以及[第10.5节，“优化InnoDB表”](optimizing-innodb.html
    "10.5 Optimizing for InnoDB Tables")以获取性能建议。
- en: In MySQL 5.5 and higher, `InnoDB` is the default storage engine for new tables
    and the `ENGINE=INNODB` clause is not required.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 5.5及更高版本中，`InnoDB`是新表的默认存储引擎，不需要`ENGINE=INNODB`子句。
- en: '`InnoDB` tables are ideally suited for **hot backups**. See [Section 32.1,
    “MySQL Enterprise Backup Overview”](mysql-enterprise-backup.html "32.1 MySQL Enterprise
    Backup Overview") for information about the **MySQL Enterprise Backup** product
    for backing up MySQL servers without interrupting normal processing.'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`表非常适合**热备份**。有关**MySQL企业备份**产品的信息，请参阅[第32.1节，“MySQL企业备份概述”](mysql-enterprise-backup.html
    "32.1 MySQL Enterprise Backup Overview")，用于备份MySQL服务器而不中断正常处理。'
- en: See Also [ACID](glossary.html#glos_acid), [hot backup](glossary.html#glos_hot_backup),
    [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup), [storage
    engine](glossary.html#glos_storage_engine), [transaction](glossary.html#glos_transaction).
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ACID](glossary.html#glos_acid)，[热备份](glossary.html#glos_hot_backup)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[存储引擎](glossary.html#glos_storage_engine)，[事务](glossary.html#glos_transaction)。
- en: innodb_autoinc_lock_mode
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: innodb_autoinc_lock_mode
- en: The [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    option controls the algorithm used for **auto-increment locking**. When you have
    an auto-incrementing **primary key**, you can use statement-based replication
    only with the setting [`innodb_autoinc_lock_mode=1`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode).
    This setting is known as *consecutive* lock mode, because multi-row inserts within
    a transaction receive consecutive auto-increment values. If you have [`innodb_autoinc_lock_mode=2`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode),
    which allows higher concurrency for insert operations, use row-based replication
    rather than statement-based replication. This setting is known as *interleaved*
    lock mode, because multiple multi-row insert statements running at the same time
    can receive **auto-increment** values that are interleaved. The setting [`innodb_autoinc_lock_mode=0`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    should not be used except for compatibility purposes.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)选项控制用于**自增锁定**的算法。当您有一个自增的**主键**时，只能在设置[`innodb_autoinc_lock_mode=1`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)时使用基于语句的复制。这个设置被称为*连续*锁定模式，因为事务中的多行插入会接收连续的自增值。如果您有[`innodb_autoinc_lock_mode=2`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)，允许更高并发性的插入操作，请使用基于行的复制而不是基于语句的复制。这个设置被称为*交错*锁定模式，因为同时运行的多个多行插入语句可以接收交错的**自增**值。设置[`innodb_autoinc_lock_mode=0`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)不应该被用于除了兼容性目的之外。'
- en: Consecutive lock mode ([`innodb_autoinc_lock_mode=1`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode))
    is the default setting prior to MySQL 8.0.3\. As of MySQL 8.0.3, interleaved lock
    mode ([`innodb_autoinc_lock_mode=2`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode))
    is the default, which reflects the change from statement-based to row-based replication
    as the default replication type.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 连续锁定模式（[`innodb_autoinc_lock_mode=1`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)）是MySQL
    8.0.3之前的默认设置。从MySQL 8.0.3开始，交错锁定模式（[`innodb_autoinc_lock_mode=2`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)）是默认设置，这反映了从基于语句到基于行的复制作为默认复制类型的变化。
- en: See Also [auto-increment](glossary.html#glos_auto_increment), [auto-increment
    locking](glossary.html#glos_auto_increment_locking), [mixed-mode insert](glossary.html#glos_mixed_mode_insert),
    [primary key](glossary.html#glos_primary_key).
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[自增](glossary.html#glos_auto_increment)，[自增锁定](glossary.html#glos_auto_increment_locking)，[混合模式插入](glossary.html#glos_mixed_mode_insert)，[主键](glossary.html#glos_primary_key)。
- en: innodb_file_per_table
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: innodb_file_per_table
- en: An important configuration option that affects many aspects of `InnoDB` file
    storage, availability of features, and I/O characteristics. In MySQL 5.6.7 and
    higher, it is enabled by default. The [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    option turns on **file-per-table** mode. With this mode enabled, a newly created
    `InnoDB` table and associated indexes can be stored in a file-per-table **.ibd
    file**, outside the **system tablespace**.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的配置选项，影响着`InnoDB`文件存储的许多方面，功能的可用性和I/O特性。在MySQL 5.6.7及更高版本中，默认启用。[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)选项打开了**每表一个文件**模式。启用此模式后，新创建的`InnoDB`表和相关索引可以存储在一个单独的**.ibd文件**中，而不是在**系统表空间**中。
- en: This option affects the performance and storage considerations for a number
    of SQL statements, such as [`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE
    Statement") and [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE
    Statement").
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项影响了许多SQL语句的性能和存储考虑，比如[`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE
    Statement")和[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")等。
- en: Enabling the [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    option allows you to take advantage of features such as table **compression**
    and named-table backups in **MySQL Enterprise Backup**.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 启用[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)选项可以利用**MySQL企业备份**中的表**压缩**和命名表备份等功能。
- en: For more information, see [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table),
    and [Section 17.6.3.2, “File-Per-Table Tablespaces”](innodb-file-per-table-tablespaces.html
    "17.6.3.2 File-Per-Table Tablespaces").
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)，以及[第17.6.3.2节，“每表一个文件表空间”](innodb-file-per-table-tablespaces.html
    "17.6.3.2 File-Per-Table Tablespaces")。
- en: See Also [compression](glossary.html#glos_compression), [file-per-table](glossary.html#glos_file_per_table),
    [.ibd file](glossary.html#glos_ibd_file), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [system tablespace](glossary.html#glos_system_tablespace).
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [compression](glossary.html#glos_compression), [file-per-table](glossary.html#glos_file_per_table),
    [.ibd file](glossary.html#glos_ibd_file), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [system tablespace](glossary.html#glos_system_tablespace)。
- en: innodb_lock_wait_timeout
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: innodb_lock_wait_timeout
- en: The [`innodb_lock_wait_timeout`](innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
    option sets the balance between **waiting** for shared resources to become available,
    or giving up and handling the error, retrying, or doing alternative processing
    in your application. Rolls back any `InnoDB` transaction that waits more than
    a specified time to acquire a **lock**. Especially useful if **deadlocks** are
    caused by updates to multiple tables controlled by different storage engines;
    such deadlocks are not **detected** automatically.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_lock_wait_timeout`](innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
    选项设置等待共享资源可用的平衡，或放弃并处理错误，在应用程序中重试或进行替代处理。回滚任何等待超过指定时间以获取锁的 `InnoDB` 事务。如果由不同存储引擎控制的多个表的更新导致
    **死锁**，则特别有用；这种死锁不会被自动 **检测**。'
- en: See Also [deadlock](glossary.html#glos_deadlock), [deadlock detection](glossary.html#glos_deadlock_detection),
    [lock](glossary.html#glos_lock), [wait](glossary.html#glos_wait).
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [deadlock](glossary.html#glos_deadlock), [deadlock detection](glossary.html#glos_deadlock_detection),
    [lock](glossary.html#glos_lock), [wait](glossary.html#glos_wait)。
- en: innodb_strict_mode
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: innodb_strict_mode
- en: The [`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)
    option controls whether `InnoDB` operates in **strict mode**, where conditions
    that are normally treated as warnings, cause errors instead (and the underlying
    statements fail).
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode) 选项控制
    `InnoDB` 是否在 **严格模式** 下运行，其中通常作为警告处理的条件会导致错误（并且底层语句失败）。'
- en: See Also [strict mode](glossary.html#glos_strict_mode).
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [strict mode](glossary.html#glos_strict_mode)。
- en: insert
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 插入
- en: One of the primary **DML** operations in **SQL**. The performance of inserts
    is a key factor in **data warehouse** systems that load millions of rows into
    tables, and **OLTP** systems where many concurrent connections might insert rows
    into the same table, in arbitrary order. If insert performance is important to
    you, you should learn about **InnoDB** features such as the **insert buffer**
    used in **change buffering**, and **auto-increment** columns.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL** 中的主要**DML**操作之一。插入操作的性能是**数据仓库**系统和**OLTP**系统的关键因素，数据仓库系统会向表中加载数百万行数据，而在许多并发连接可能以任意顺序向同一表插入行的
    OLTP 系统中。如果插入性能对你很重要，你应该了解 **InnoDB** 的功能，比如在 **change buffering** 中使用的 **insert
    buffer** 和 **auto-increment** 列。'
- en: See Also [auto-increment](glossary.html#glos_auto_increment), [change buffering](glossary.html#glos_change_buffering),
    [data warehouse](glossary.html#glos_data_warehouse), [DML](glossary.html#glos_dml),
    [InnoDB](glossary.html#glos_innodb), [insert buffer](glossary.html#glos_insert_buffer),
    [OLTP](glossary.html#glos_oltp), [SQL](glossary.html#glos_sql).
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [auto-increment](glossary.html#glos_auto_increment), [change buffering](glossary.html#glos_change_buffering),
    [data warehouse](glossary.html#glos_data_warehouse), [DML](glossary.html#glos_dml),
    [InnoDB](glossary.html#glos_innodb), [insert buffer](glossary.html#glos_insert_buffer),
    [OLTP](glossary.html#glos_oltp), [SQL](glossary.html#glos_sql)。
- en: insert buffer
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 插入缓冲
- en: The former name of the **change buffer**. In MySQL 5.5, support was added for
    buffering changes to secondary index pages for [`DELETE`](delete.html "15.2.2 DELETE
    Statement") and [`UPDATE`](update.html "15.2.17 UPDATE Statement") operations.
    Previously, only changes resulting from [`INSERT`](insert.html "15.2.7 INSERT
    Statement") operations were buffered. The preferred term is now *change buffer*.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '**change buffer** 的旧名称。在 MySQL 5.5 中，添加了对缓冲次要索引页的更改的支持，用于 [`DELETE`](delete.html
    "15.2.2 DELETE Statement") 和 [`UPDATE`](update.html "15.2.17 UPDATE Statement")
    操作。以前，只有由 [`INSERT`](insert.html "15.2.7 INSERT Statement") 操作引起的更改被缓冲。现在首选术语是
    *change buffer*。'
- en: See Also [change buffer](glossary.html#glos_change_buffer), [change buffering](glossary.html#glos_change_buffering).
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [change buffer](glossary.html#glos_change_buffer), [change buffering](glossary.html#glos_change_buffering)。
- en: insert buffering
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 插入缓冲
- en: The technique of storing changes to secondary index pages, resulting from [`INSERT`](insert.html
    "15.2.7 INSERT Statement") operations, in the **change buffer** rather than writing
    the changes immediately, so that the physical writes can be performed to minimize
    random I/O. It is one of the types of **change buffering**; the others are **delete
    buffering** and **purge buffering**.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 将由[`INSERT`](insert.html "15.2.7 INSERT Statement") 操作导致的对二级索引页的更改存储在**更改缓冲**中，而不是立即写入更改，以便可以执行物理写入以最小化随机
    I/O。这是**更改缓冲**的一种类型；其他类型包括**删除缓冲**和**清除缓冲**。
- en: Insert buffering is not used if the secondary index is **unique**, because the
    uniqueness of new values cannot be verified before the new entries are written
    out. Other kinds of change buffering do work for unique indexes.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 如果二级索引是**唯一**的，则不使用插入缓冲，因为在新条目写入之前无法验证新值的唯一性。其他类型的更改缓冲对唯一索引有效。
- en: See Also [change buffer](glossary.html#glos_change_buffer), [change buffering](glossary.html#glos_change_buffering),
    [delete buffering](glossary.html#glos_delete_buffering), [insert buffer](glossary.html#glos_insert_buffer),
    [purge buffering](glossary.html#glos_purge_buffering), [unique index](glossary.html#glos_unique_index).
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [更改缓冲](glossary.html#glos_change_buffer), [更改缓冲](glossary.html#glos_change_buffering),
    [删除缓冲](glossary.html#glos_delete_buffering), [插入缓冲](glossary.html#glos_insert_buffer),
    [清除缓冲](glossary.html#glos_purge_buffering), [唯一索引](glossary.html#glos_unique_index)。
- en: insert intention lock
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 插入意向锁
- en: A type of **gap lock** that is set by [`INSERT`](insert.html "15.2.7 INSERT
    Statement") operations prior to row insertion. This type of **lock** signals the
    intent to insert in such a way that multiple transactions inserting into the same
    index gap need not wait for each other if they are not inserting at the same position
    within the gap. For more information, see [Section 17.7.1, “InnoDB Locking”](innodb-locking.html
    "17.7.1 InnoDB Locking").
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '[`INSERT`](insert.html "15.2.7 INSERT Statement") 操作在插入行之前设置的一种**间隙锁**类型。这种类型的**锁**表示插入的意图，以便在多个事务在同一索引间隙插入时，如果它们不在间隙内的相同位置插入，则无需等待彼此。有关更多信息，请参见
    [Section 17.7.1, “InnoDB Locking”](innodb-locking.html "17.7.1 InnoDB Locking")。'
- en: See Also [gap lock](glossary.html#glos_gap_lock), [lock](glossary.html#glos_lock),
    [next-key lock](glossary.html#glos_next_key_lock).
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [间隙锁](glossary.html#glos_gap_lock), [锁](glossary.html#glos_lock), [下一个键锁](glossary.html#glos_next_key_lock)。
- en: instance
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 实例
- en: A single **mysqld** daemon managing a **data directory** representing one or
    more **databases** with a set of **tables**. It is common in development, testing,
    and some **replication** scenarios to have multiple instances on the same **server**
    machine, each managing its own data directory and listening on its own port or
    socket. With one instance running a **disk-bound** workload, the server might
    still have extra CPU and memory capacity to run additional instances.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**mysqld** 守护程序管理一个代表一个或多个**数据库**的**数据目录**，其中包含一组**表**。在开发、测试和一些**复制**场景中，在同一**服务器**机器上可能有多个实例，每个实例管理自己的数据目录并侦听自己的端口或套接字。如果一个实例运行一个**磁盘密集**的工作负载，服务器可能仍然有额外的
    CPU 和内存容量来运行额外的实例。
- en: See Also [data directory](glossary.html#glos_data_directory), [database](glossary.html#glos_database),
    [disk-bound](glossary.html#glos_disk_bound), [mysqld](glossary.html#glos_mysqld),
    [replication](glossary.html#glos_replication), [server](glossary.html#glos_server),
    [table](glossary.html#glos_table).
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [数据目录](glossary.html#glos_data_directory), [数据库](glossary.html#glos_database),
    [磁盘密集](glossary.html#glos_disk_bound), [mysqld](glossary.html#glos_mysqld), [复制](glossary.html#glos_replication),
    [服务器](glossary.html#glos_server), [表](glossary.html#glos_table)。
- en: instrumentation
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 仪器
- en: Modifications at the source code level to collect performance data for tuning
    and debugging. In MySQL, data collected by instrumentation is exposed through
    an SQL interface using the `INFORMATION_SCHEMA` and `PERFORMANCE_SCHEMA` databases.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码级别进行修改以收集用于调整和调试的性能数据。在 MySQL 中，通过仪器收集的数据通过 SQL 接口暴露，使用 `INFORMATION_SCHEMA`
    和 `PERFORMANCE_SCHEMA` 数据库。
- en: See Also [INFORMATION_SCHEMA](glossary.html#glos_information_schema), [Performance
    Schema](glossary.html#glos_performance_schema).
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [INFORMATION_SCHEMA](glossary.html#glos_information_schema), [Performance
    Schema](glossary.html#glos_performance_schema)。
- en: intention exclusive lock
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 意向独占锁
- en: See [intention lock](glossary.html#glos_intention_lock).
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [意向锁](glossary.html#glos_intention_lock)。
- en: intention lock
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 意向锁
- en: A kind of **lock** that applies to the table, used to indicate the kind of lock
    the **transaction** intends to acquire on rows in the table. Different transactions
    can acquire different kinds of intention locks on the same table, but the first
    transaction to acquire an *intention exclusive* (IX) lock on a table prevents
    other transactions from acquiring any S or X locks on the table. Conversely, the
    first transaction to acquire an *intention shared* (IS) lock on a table prevents
    other transactions from acquiring any X locks on the table. The two-phase process
    allows the lock requests to be resolved in order, without blocking locks and corresponding
    operations that are compatible. For more information about this locking mechanism,
    see [Section 17.7.1, “InnoDB Locking”](innodb-locking.html "17.7.1 InnoDB Locking").
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于表的一种**锁**，用于指示**事务**打算在表中的行上获取的锁的类型。不同的事务可以在同一表上获取不同类型的意向锁，但是第一个在表上获取*意向排他*（IX）锁的事务会阻止其他事务在表上获取任何S或X锁。相反，第一个在表上获取*意向共享*（IS）锁的事务会阻止其他事务在表上获取任何X锁。这个两阶段过程允许按顺序解决锁请求，而不会阻塞兼容的锁和相应的操作。有关此锁定机制的更多信息，请参见
    [第17.7.1节，“InnoDB锁定”](innodb-locking.html "17.7.1 InnoDB Locking")。
- en: See Also [lock](glossary.html#glos_lock), [lock mode](glossary.html#glos_lock_mode),
    [locking](glossary.html#glos_locking), [transaction](glossary.html#glos_transaction).
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [锁定](glossary.html#glos_lock), [锁定模式](glossary.html#glos_lock_mode), [锁定](glossary.html#glos_locking),
    [事务](glossary.html#glos_transaction)。
- en: intention shared lock
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 意向共享锁
- en: See [intention lock](glossary.html#glos_intention_lock).
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [意向锁](glossary.html#glos_intention_lock)。
- en: interceptor
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截器
- en: Code for instrumenting or debugging some aspect of an application, which can
    be enabled without recompiling or changing the source of the application itself.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 用于检测或调试应用程序某个方面的代码，可以在不重新编译或更改应用程序源代码的情况下启用。
- en: See Also [command interceptor](glossary.html#glos_command_interceptor), [Connector/J](glossary.html#glos_connector_j),
    [Connector/NET](glossary.html#glos_connector_net), [exception interceptor](glossary.html#glos_exception_interceptor).
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [命令拦截器](glossary.html#glos_command_interceptor), [Connector/J](glossary.html#glos_connector_j),
    [Connector/NET](glossary.html#glos_connector_net), [异常拦截器](glossary.html#glos_exception_interceptor)。
- en: intrinsic temporary table
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 内在临时表
- en: An optimized internal `InnoDB` temporary table used by the *optimizer*.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 优化的内部`InnoDB`临时表，由*优化器*使用。
- en: See Also [optimizer](glossary.html#glos_optimizer).
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [优化器](glossary.html#glos_optimizer)。
- en: inverted index
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 倒排索引
- en: A data structure optimized for document retrieval systems, used in the implementation
    of `InnoDB` **full-text search**. The `InnoDB` **FULLTEXT index**, implemented
    as an inverted index, records the position of each word within a document, rather
    than the location of a table row. A single column value (a document stored as
    a text string) is represented by many entries in the inverted index.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 一种针对文档检索系统进行优化的数据结构，用于`InnoDB` **全文搜索**的实现。`InnoDB` **全文索引**，作为倒排索引实现，记录了文档中每个单词的位置，而不是表行的位置。一个列值（作为文本字符串存储的文档）在倒排索引中由多个条目表示。
- en: See Also [full-text search](glossary.html#glos_full_text_search), [FULLTEXT
    index](glossary.html#glos_fulltext_index), [ilist](glossary.html#glos_ilist).
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [全文搜索](glossary.html#glos_full_text_search), [全文索引](glossary.html#glos_fulltext_index),
    [ilist](glossary.html#glos_ilist)。
- en: IOPS
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: IOPS
- en: Acronym for **I/O operations per second**. A common measurement for busy systems,
    particularly **OLTP** applications. If this value is near the maximum that the
    storage devices can handle, the application can become **disk-bound**, limiting
    **scalability**.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '**每秒I/O操作**的缩写。这是繁忙系统的常见衡量标准，特别是**OLTP**应用程序。如果这个值接近存储设备可以处理的最大值，应用程序可能会变得**磁盘限制**，从而限制**可伸缩性**。'
- en: See Also [disk-bound](glossary.html#glos_disk_bound), [OLTP](glossary.html#glos_oltp),
    [scalability](glossary.html#glos_scalability).
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [磁盘限制](glossary.html#glos_disk_bound), [OLTP](glossary.html#glos_oltp), [可伸缩性](glossary.html#glos_scalability)。
- en: isolation level
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离级别
- en: One of the foundations of database processing. Isolation is the **I** in the
    acronym **ACID**; the isolation level is the setting that fine-tunes the balance
    between performance and reliability, consistency, and reproducibility of results
    when multiple **transactions** are making changes and performing queries at the
    same time.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库处理的基础之一。隔离是缩写**ACID**中的**I**；隔离级别是在多个**事务**同时进行更改和执行查询时，调整性能和可靠性、一致性和结果可重现性之间平衡的设置。
- en: 'From highest amount of consistency and protection to the least, the isolation
    levels supported by InnoDB are: **SERIALIZABLE**, **REPEATABLE READ**, **READ
    COMMITTED**, and **READ UNCOMMITTED**.'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 从最高一致性和保护程度到最低，InnoDB支持的隔离级别有：**SERIALIZABLE**，**REPEATABLE READ**，**READ COMMITTED**和**READ
    UNCOMMITTED**。
- en: With `InnoDB` tables, many users can keep the default isolation level (*REPEATABLE
    READ*) for all operations. Expert users might choose the **READ COMMITTED** level
    as they push the boundaries of scalability with **OLTP** processing, or during
    data warehousing operations where minor inconsistencies do not affect the aggregate
    results of large amounts of data. The levels on the edges (**SERIALIZABLE** and
    **READ UNCOMMITTED**) change the processing behavior to such an extent that they
    are rarely used.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`InnoDB`表，许多用户可以将默认隔离级别（*REPEATABLE READ*）用于所有操作。专家用户可能会选择**READ COMMITTED**级别，因为他们在**OLTP**处理中推动可伸缩性的边界，或者在数据仓库操作中，次要不一致性不会影响大量数据的聚合结果。边缘级别（**SERIALIZABLE**和**READ
    UNCOMMITTED**）会改变处理行为到极大程度，因此很少被使用。
- en: See Also [ACID](glossary.html#glos_acid), [OLTP](glossary.html#glos_oltp), [READ
    COMMITTED](glossary.html#glos_read_committed), [READ UNCOMMITTED](glossary.html#glos_read_uncommitted),
    [REPEATABLE READ](glossary.html#glos_repeatable_read), [SERIALIZABLE](glossary.html#glos_serializable),
    [transaction](glossary.html#glos_transaction).
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ACID](glossary.html#glos_acid)，[OLTP](glossary.html#glos_oltp)，[READ COMMITTED](glossary.html#glos_read_committed)，[READ
    UNCOMMITTED](glossary.html#glos_read_uncommitted)，[REPEATABLE READ](glossary.html#glos_repeatable_read)，[SERIALIZABLE](glossary.html#glos_serializable)，[transaction](glossary.html#glos_transaction)。
- en: J
  id: totrans-747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: J
- en: J2EE
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: J2EE
- en: 'Java Platform, Enterprise Edition: Oracle''s enterprise Java platform. It consists
    of an API and a runtime environment for enterprise-class Java applications. For
    full details, see [http://www.oracle.com/technetwork/java/javaee/overview/index.html](http://www.oracle.com/technetwork/java/javaee/overview/index.html).
    With MySQL applications, you typically use **Connector/J** for database access,
    and an application server such as **Tomcat** or **JBoss** to handle the middle-tier
    work, and optionally a framework such as **Spring**. Database-related features
    often offered within a J2EE stack include a **connection pool** and **failover**
    support.'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: Java平台企业版：Oracle的企业级Java平台。它包括用于企业级Java应用程序的API和运行时环境。有关详细信息，请参见[http://www.oracle.com/technetwork/java/javaee/overview/index.html](http://www.oracle.com/technetwork/java/javaee/overview/index.html)。在MySQL应用程序中，通常使用**Connector/J**进行数据库访问，并使用诸如**Tomcat**或**JBoss**之类的应用服务器来处理中间层工作，还可以选择使用**Spring**等框架。J2EE堆栈中通常提供的与数据库相关的功能包括**连接池**和**故障转移**支持。
- en: See Also [connection pool](glossary.html#glos_connection_pool), [Connector/J](glossary.html#glos_connector_j),
    [failover](glossary.html#glos_failover), [Java](glossary.html#glos_java), [JBoss](glossary.html#glos_jboss),
    [Spring](glossary.html#glos_spring), [Tomcat](glossary.html#glos_tomcat).
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[connection pool](glossary.html#glos_connection_pool)，[Connector/J](glossary.html#glos_connector_j)，[failover](glossary.html#glos_failover)，[Java](glossary.html#glos_java)，[JBoss](glossary.html#glos_jboss)，[Spring](glossary.html#glos_spring)，[Tomcat](glossary.html#glos_tomcat)。
- en: Java
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: Java
- en: A programming language combining high performance, rich built-in features and
    data types, object-oriented mechanisms, extensive standard library, and wide range
    of reusable third-party modules. Enterprise development is supported by many frameworks,
    application servers, and other technologies. Much of its syntax is familiar to
    **C** and **C++** developers. To write Java applications with MySQL, you use the
    **JDBC** driver known as **Connector/J**.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 一种结合高性能、丰富内置功能和数据类型、面向对象机制、广泛标准库以及广泛可重用第三方模块的编程语言。许多框架、应用服务器和其他技术支持企业开发。其语法大部分对**C**和**C++**开发人员来说很熟悉。要使用MySQL编写Java应用程序，您需要使用称为**Connector/J**的**JDBC**驱动程序。
- en: See Also [C](glossary.html#glos_c), [Connector/J](glossary.html#glos_connector_j),
    [C++](glossary.html#glos_cplusplus), [JDBC](glossary.html#glos_jdbc).
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[C](glossary.html#glos_c)，[Connector/J](glossary.html#glos_connector_j)，[C++](glossary.html#glos_cplusplus)，[JDBC](glossary.html#glos_jdbc)。
- en: JBoss
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss
- en: See Also [J2EE](glossary.html#glos_j2ee).
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[J2EE](glossary.html#glos_j2ee)。
- en: JDBC
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: JDBC
- en: Abbreviation for “Java Database Connectivity”, an **API** for database access
    from **Java** applications. Java developers writing MySQL applications use the
    **Connector/J** component as their JDBC driver.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: “Java数据库连接”的缩写，用于从**Java**应用程序访问数据库的**API**。编写MySQL应用程序的Java开发人员使用**Connector/J**组件作为他们的JDBC驱动程序。
- en: See Also [API](glossary.html#glos_api), [Connector/J](glossary.html#glos_connector_j),
    [J2EE](glossary.html#glos_j2ee), [Java](glossary.html#glos_java).
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[API](glossary.html#glos_api)，[Connector/J](glossary.html#glos_connector_j)，[J2EE](glossary.html#glos_j2ee)，[Java](glossary.html#glos_java)。
- en: JNDI
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: JNDI
- en: See Also [Java](glossary.html#glos_java).
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Java](glossary.html#glos_java)。
- en: join
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: join
- en: A **query** that retrieves data from more than one table, by referencing columns
    in the tables that hold identical values. Ideally, these columns are part of an
    `InnoDB` **foreign key** relationship, which ensures **referential integrity**
    and that the join columns are **indexed**. Often used to save space and improve
    query performance by replacing repeated strings with numeric IDs, in a **normalized**
    data design.
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 从多个表中检索数据的**查询**，通过引用包含相同值的表中的列。理想情况下，这些列是`InnoDB`的**外键**关系的一部分，这确保了**引用完整性**和连接列被**索引**。通常用于通过将重复的字符串替换为数字ID，在**规范化**的数据设计中节省空间并提高查询性能。
- en: See Also [foreign key](glossary.html#glos_foreign_key), [index](glossary.html#glos_index),
    [normalized](glossary.html#glos_normalized), [query](glossary.html#glos_query),
    [referential integrity](glossary.html#glos_referential_integrity).
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[外键](glossary.html#glos_foreign_key)，[索引](glossary.html#glos_index)，[规范化](glossary.html#glos_normalized)，[查询](glossary.html#glos_query)，[引用完整性](glossary.html#glos_referential_integrity)。
- en: K
  id: totrans-764
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: K
- en: KDC
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: KDC
- en: See [key distribution center](glossary.html#glos_key_distribution_center).
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[密钥分发中心](glossary.html#glos_key_distribution_center)。
- en: key distribution center
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥分发中心
- en: In Kerberos, the key distribution center comprises an authentication server
    (AS) and a ticket-granting server (TGS).
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kerberos中，密钥分发中心包括认证服务器（AS）和票证授予服务器（TGS）。
- en: See Also [authentication server](glossary.html#glos_authentication_server),
    [ticket-granting ticket](glossary.html#glos_ticket_granting_ticket).
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[认证服务器](glossary.html#glos_authentication_server)，[票证授予票证](glossary.html#glos_ticket_granting_ticket)。
- en: keystore
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥库
- en: See Also [SSL](glossary.html#glos_ssl).
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[SSL](glossary.html#glos_ssl)。
- en: KEY_BLOCK_SIZE
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: KEY_BLOCK_SIZE
- en: An option to specify the size of data pages within an `InnoDB` table that uses
    **compressed row format**. The default is 8 kilobytes. Lower values risk hitting
    internal limits that depend on the combination of row size and compression percentage.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 用于指定使用**压缩行格式**的`InnoDB`表内数据页大小的选项。默认值为8千字节。较低的值可能会触发取决于行大小和压缩百分比组合的内部限制。
- en: For [`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine")
    tables, `KEY_BLOCK_SIZE` optionally specifies the size in bytes to use for index
    key blocks. The value is treated as a hint; a different size could be used if
    necessary. A `KEY_BLOCK_SIZE` value specified for an individual index definition
    overrides a table-level `KEY_BLOCK_SIZE` value.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine")表，`KEY_BLOCK_SIZE`可选地指定用于索引键块的字节大小。该值被视为提示；如果需要，可以使用不同的大小。为单个索引定义指定的`KEY_BLOCK_SIZE`值会覆盖表级别的`KEY_BLOCK_SIZE`值。
- en: See Also [compressed row format](glossary.html#glos_compressed_row_format).
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[压缩行格式](glossary.html#glos_compressed_row_format)。
- en: L
  id: totrans-776
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: L
- en: latch
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 闩
- en: A lightweight structure used by `InnoDB` to implement a **lock** for its own
    internal memory structures, typically held for a brief time measured in milliseconds
    or microseconds. A general term that includes both **mutexes** (for exclusive
    access) and **rw-locks** (for shared access). Certain latches are the focus of
    `InnoDB` performance tuning. Statistics about latch use and contention are available
    through the **Performance Schema** interface.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`用于实现其内部内存结构的**锁**的轻量级结构，通常持续时间短，以毫秒或微秒计。一个通用术语，包括**互斥体**（用于独占访问）和**读写锁**（用于共享访问）。某些闩是`InnoDB`性能调优的重点。有关闩使用和争用的统计信息可通过**性能模式**接口获得。'
- en: See Also [lock](glossary.html#glos_lock), [locking](glossary.html#glos_locking),
    [mutex](glossary.html#glos_mutex), [Performance Schema](glossary.html#glos_performance_schema),
    [rw-lock](glossary.html#glos_rw_lock).
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[锁](glossary.html#glos_lock)，[锁定](glossary.html#glos_locking)，[互斥体](glossary.html#glos_mutex)，[性能模式](glossary.html#glos_performance_schema)，[读写锁](glossary.html#glos_rw_lock)。
- en: libmysql
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: libmysql
- en: Informal name for the **libmysqlclient** library.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '**libmysqlclient**库的非正式名称。'
- en: See Also [libmysqlclient](glossary.html#glos_libmysqlclient).
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[libmysqlclient](glossary.html#glos_libmysqlclient)。
- en: libmysqlclient
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: libmysqlclient
- en: The library file, named `libmysqlclient.a` or `libmysqlclient.so`, that is typically
    linked into **client** programs written in **C**. Sometimes known informally as
    **libmysql** or the **mysqlclient** library.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 通常链接到用**C**语言编写的**客户端**程序中的库文件，命名为`libmysqlclient.a`或`libmysqlclient.so`，有时非正式地称为**libmysql**或**mysqlclient**库。
- en: See Also [client](glossary.html#glos_client), [libmysql](glossary.html#glos_libmysql),
    [mysqlclient](glossary.html#glos_mysqlclient).
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[客户端](glossary.html#glos_client)，[libmysql](glossary.html#glos_libmysql)，[mysqlclient](glossary.html#glos_mysqlclient)。
- en: libmysqld
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: libmysqld
- en: This **embedded** MySQL server library makes it possible to run a full-featured
    MySQL server inside a **client** application. The main benefits are increased
    speed and more simple management for embedded applications. You link with the
    `libmysqld` library rather than **libmysqlclient**. The API is identical between
    all three of these libraries.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 这个**嵌入式**MySQL服务器库使得在**客户端**应用程序内运行一个功能齐全的MySQL服务器成为可能。主要优点是增加了速度和对嵌入式应用程序的更简单管理。您链接的是`libmysqld`库而不是**libmysqlclient**。这三个库之间的API是相同的。
- en: See Also [client](glossary.html#glos_client), [embedded](glossary.html#glos_embedded),
    [libmysql](glossary.html#glos_libmysql), [libmysqlclient](glossary.html#glos_libmysqlclient).
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[客户端](glossary.html#glos_client)，[嵌入式](glossary.html#glos_embedded)，[libmysql](glossary.html#glos_libmysql)，[libmysqlclient](glossary.html#glos_libmysqlclient)。
- en: lifecycle interceptor
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期拦截器
- en: A type of **interceptor** supported by **Connector/J**. It involves implementing
    the interface `com.mysql.jdbc.ConnectionLifecycleInterceptor`.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: '**Connector/J**支持的一种**拦截器**类型。它涉及实现接口`com.mysql.jdbc.ConnectionLifecycleInterceptor`。'
- en: See Also [Connector/J](glossary.html#glos_connector_j), [interceptor](glossary.html#glos_interceptor).
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Connector/J](glossary.html#glos_connector_j)，[拦截器](glossary.html#glos_interceptor)。
- en: list
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 列表
- en: The `InnoDB` **buffer pool** is represented as a list of memory **pages**. The
    list is reordered as new pages are accessed and enter the buffer pool, as pages
    within the buffer pool are accessed again and are considered newer, and as pages
    that are not accessed for a long time are **evicted** from the buffer pool. The
    buffer pool is divided into **sublists**, and the replacement policy is a variation
    of the familiar **LRU** technique.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`的**缓冲池**被表示为一组内存**页**的列表。随着新页被访问并进入缓冲池，列表会重新排序，当再次访问缓冲池内的页并被视为较新时，以及长时间未被访问的页被从缓冲池中**驱逐**。缓冲池被划分为**子列表**，替换策略是熟悉的**LRU**技术的变体。'
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [eviction](glossary.html#glos_eviction),
    [LRU](glossary.html#glos_lru), [page](glossary.html#glos_page), [sublist](glossary.html#glos_sublist).
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[驱逐](glossary.html#glos_eviction)，[LRU](glossary.html#glos_lru)，[页](glossary.html#glos_page)，[子列表](glossary.html#glos_sublist)。
- en: load balancing
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 负载平衡
- en: A technique for scaling read-only connections by sending query requests to different
    slave servers in a replication or Cluster configuration. With **Connector/J**,
    load balancing is enabled through the `com.mysql.jdbc.ReplicationDriver` class
    and controlled by the configuration property `loadBalanceStrategy`.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在复制或集群配置中将查询请求发送到不同的从服务器来扩展只读连接的技术。通过`com.mysql.jdbc.ReplicationDriver`类和由配置属性`loadBalanceStrategy`控制来启用**Connector/J**的负载平衡。
- en: See Also [Connector/J](glossary.html#glos_connector_j), [J2EE](glossary.html#glos_j2ee).
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Connector/J](glossary.html#glos_connector_j)，[J2EE](glossary.html#glos_j2ee)。
- en: localhost
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 本地主机
- en: See Also [connection](glossary.html#glos_connection).
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[连接](glossary.html#glos_connection)。
- en: lock
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 锁
- en: The high-level notion of an object that controls access to a resource, such
    as a table, row, or internal data structure, as part of a **locking** strategy.
    For intensive performance tuning, you might delve into the actual structures that
    implement locks, such as **mutexes** and **latches**.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 一个控制对资源（如表、行或内部数据结构）访问的对象的高级概念，作为**锁定**策略的一部分。在进行密集的性能调优时，您可能会深入研究实现锁定的实际结构，如**互斥锁**和**闩锁**。
- en: See Also [latch](glossary.html#glos_latch), [lock mode](glossary.html#glos_lock_mode),
    [locking](glossary.html#glos_locking), [mutex](glossary.html#glos_mutex).
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[闩锁](glossary.html#glos_latch)，[锁定模式](glossary.html#glos_lock_mode)，[锁定](glossary.html#glos_locking)，[互斥锁](glossary.html#glos_mutex)。
- en: lock escalation
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 锁升级
- en: An operation used in some database systems that converts many **row locks**
    into a single **table lock**, saving memory space but reducing concurrent access
    to the table. `InnoDB` uses a space-efficient representation for row locks, so
    that **lock** escalation is not needed.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 一种在某些数据库系统中使用的操作，将许多**行锁**转换为单个**表锁**，节省内存空间但减少对表的并发访问。`InnoDB`使用了一种空间高效的行锁表示，因此不需要**锁**升级。
- en: See Also [locking](glossary.html#glos_locking), [row lock](glossary.html#glos_row_lock),
    [table lock](glossary.html#glos_table_lock).
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[锁定](glossary.html#glos_locking)，[行锁](glossary.html#glos_row_lock)，[表锁](glossary.html#glos_table_lock)。
- en: lock mode
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定模式
- en: A shared (S) **lock** allows a **transaction** to read a row. Multiple transactions
    can acquire an S lock on that same row at the same time.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 共享（S）**锁**允许**事务**读取一行。多个事务可以同时在同一行上获取S锁。
- en: An exclusive (X) lock allows a transaction to update or delete a row. No other
    transaction can acquire any kind of lock on that same row at the same time.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 独占（X）锁允许事务更新或删除行。没有其他事务可以同时在同一行上获取任何类型的锁。
- en: '**Intention locks** apply to the table, and are used to indicate what kind
    of lock the transaction intends to acquire on rows in the table. Different transactions
    can acquire different kinds of intention locks on the same table, but the first
    transaction to acquire an intention exclusive (IX) lock on a table prevents other
    transactions from acquiring any S or X locks on the table. Conversely, the first
    transaction to acquire an intention shared (IS) lock on a table prevents other
    transactions from acquiring any X locks on the table. The two-phase process allows
    the lock requests to be resolved in order, without blocking locks and corresponding
    operations that are compatible.'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '**意向锁**应用于表，用于指示事务打算在表的行上获取什么类型的锁。不同的事务可以在同一表上获取不同类型的意向锁，但第一个在表上获取意向排他（IX）锁的事务会阻止其他事务在表上获取任何S或X锁。相反，第一个在表上获取意向共享（IS）锁的事务会阻止其他事务在表上获取任何X锁。这个两阶段过程允许按顺序解决锁请求，而不会阻塞兼容的锁和相应的操作。'
- en: See Also [intention lock](glossary.html#glos_intention_lock), [lock](glossary.html#glos_lock),
    [locking](glossary.html#glos_locking), [transaction](glossary.html#glos_transaction).
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [意向锁](glossary.html#glos_intention_lock), [锁](glossary.html#glos_lock), [锁定](glossary.html#glos_locking),
    [事务](glossary.html#glos_transaction)。
- en: locking
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定
- en: The system of protecting a **transaction** from seeing or changing data that
    is being queried or changed by other transactions. The **locking** strategy must
    balance reliability and consistency of database operations (the principles of
    the **ACID** philosophy) against the performance needed for good **concurrency**.
    Fine-tuning the locking strategy often involves choosing an **isolation level**
    and ensuring all your database operations are safe and reliable for that isolation
    level.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 保护**事务**不会看到或更改其他事务正在查询或更改的数据的系统。**锁定**策略必须在数据库操作的可靠性和一致性（**ACID**哲学原则）与良好**并发性**所需的性能之间取得平衡。微调锁定策略通常涉及选择**隔离级别**，并确保所有数据库操作对于该隔离级别是安全可靠的。
- en: See Also [ACID](glossary.html#glos_acid), [concurrency](glossary.html#glos_concurrency),
    [isolation level](glossary.html#glos_isolation_level), [locking](glossary.html#glos_locking),
    [transaction](glossary.html#glos_transaction).
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [ACID](glossary.html#glos_acid), [并发性](glossary.html#glos_concurrency), [隔离级别](glossary.html#glos_isolation_level),
    [锁定](glossary.html#glos_locking), [事务](glossary.html#glos_transaction)。
- en: locking read
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定读取
- en: A [`SELECT`](select.html "15.2.13 SELECT Statement") statement that also performs
    a **locking** operation on an `InnoDB` table. Either `SELECT ... FOR UPDATE` or
    `SELECT ... LOCK IN SHARE MODE`. It has the potential to produce a **deadlock**,
    depending on the **isolation level** of the transaction. The opposite of a **non-locking
    read**. Not allowed for global tables in a **read-only transaction**.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 一个在`InnoDB`表上执行**锁定**操作的[`SELECT`](select.html "15.2.13 SELECT语句")语句。可以是`SELECT
    ... FOR UPDATE`或`SELECT ... LOCK IN SHARE MODE`。根据事务的**隔离级别**，可能会产生**死锁**。与**非锁定读取**相反。在**只读事务**中不允许对全局表进行操作。
- en: '`SELECT ... FOR SHARE` replaces `SELECT ... LOCK IN SHARE MODE` in MySQL 8.0.1,
    but `LOCK IN SHARE MODE` remains available for backward compatibility.'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: '`SELECT ... FOR SHARE`在MySQL 8.0.1中取代了`SELECT ... LOCK IN SHARE MODE`，但为了向后兼容性，`LOCK
    IN SHARE MODE`仍然可用。'
- en: See [Section 17.7.2.4, “Locking Reads”](innodb-locking-reads.html "17.7.2.4 Locking
    Reads").
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [第17.7.2.4节，“锁定读取”](innodb-locking-reads.html "17.7.2.4 锁定读取")。
- en: See Also [deadlock](glossary.html#glos_deadlock), [isolation level](glossary.html#glos_isolation_level),
    [locking](glossary.html#glos_locking), [non-locking read](glossary.html#glos_non_locking_read),
    [read-only transaction](glossary.html#glos_read_only_transaction).
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [死锁](glossary.html#glos_deadlock), [隔离级别](glossary.html#glos_isolation_level),
    [锁定](glossary.html#glos_locking), [非锁定读取](glossary.html#glos_non_locking_read),
    [只读事务](glossary.html#glos_read_only_transaction)。
- en: log
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 日志
- en: In the `InnoDB` context, “log” or “log files” typically refers to the **redo
    log** represented by the **ib_logfile*`N`*** files. Another type of `InnoDB` log
    is the **undo log**, which is a storage area that holds copies of data modified
    by active transactions.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InnoDB`上下文中，“日志”或“日志文件”通常指代由**ib_logfile*`N`***文件表示的**重做日志**。另一种`InnoDB`日志是**撤销日志**，它是一个存储区域，保存着被活动事务修改的数据的副本。
- en: Other kinds of logs that are important in MySQL are the **error log** (for diagnosing
    startup and runtime problems), **binary log** (for working with replication and
    performing point-in-time restores), the **general query log** (for diagnosing
    application problems), and the **slow query log** (for diagnosing performance
    problems).
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 中其他重要的日志类型包括**错误日志**（用于诊断启动和运行时问题），**二进制日志**（用于处理复制和执行时间点恢复），**常规查询日志**（用于诊断应用程序问题）和**慢查询日志**（用于诊断性能问题）。
- en: See Also [binary log](glossary.html#glos_binary_log), [error log](glossary.html#glos_error_log),
    [general query log](glossary.html#glos_general_query_log), [ib_logfile](glossary.html#glos_ib_logfile),
    [redo log](glossary.html#glos_redo_log), [slow query log](glossary.html#glos_slow_query_log),
    [undo log](glossary.html#glos_undo_log).
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [二进制日志](glossary.html#glos_binary_log)，[错误日志](glossary.html#glos_error_log)，[常规查询日志](glossary.html#glos_general_query_log)，[ib_logfile](glossary.html#glos_ib_logfile)，[重做日志](glossary.html#glos_redo_log)，[慢查询日志](glossary.html#glos_slow_query_log)，[撤销日志](glossary.html#glos_undo_log)。
- en: log buffer
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 日志缓冲区
- en: The memory area that holds data to be written to the **log files** that make
    up the **redo log**. It is controlled by the [`innodb_log_buffer_size`](innodb-parameters.html#sysvar_innodb_log_buffer_size)
    configuration option.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 存储将写入组成**重做日志**的**日志文件**的数据的内存区域。由[`innodb_log_buffer_size`](innodb-parameters.html#sysvar_innodb_log_buffer_size)配置选项控制。
- en: See Also [log file](glossary.html#glos_log_file), [redo log](glossary.html#glos_redo_log).
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [日志文件](glossary.html#glos_log_file)，[重做日志](glossary.html#glos_redo_log)。
- en: log file
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件
- en: One of the **ib_logfile*`N`*** files that make up the **redo log**. Data is
    written to these files from the **log buffer** memory area.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 组成**重做日志**的**ib_logfile*`N`***文件之一。数据从**日志缓冲区**内存区域写入这些文件。
- en: See Also [ib_logfile](glossary.html#glos_ib_logfile), [log buffer](glossary.html#glos_log_buffer),
    [redo log](glossary.html#glos_redo_log).
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [ib_logfile](glossary.html#glos_ib_logfile)，[日志缓冲区](glossary.html#glos_log_buffer)，[重做日志](glossary.html#glos_redo_log)。
- en: log group
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 日志组
- en: The set of files that make up the **redo log**, typically named `ib_logfile0`
    and `ib_logfile1`. (For that reason, sometimes referred to collectively as **ib_logfile**.)
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 组成**重做日志**的文件集，通常命名为`ib_logfile0`和`ib_logfile1`。（因此，有时被统称为**ib_logfile**。）
- en: See Also [ib_logfile](glossary.html#glos_ib_logfile), [redo log](glossary.html#glos_redo_log).
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [ib_logfile](glossary.html#glos_ib_logfile)，[重做日志](glossary.html#glos_redo_log)。
- en: logical
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑的
- en: A type of operation that involves high-level, abstract aspects such as tables,
    queries, indexes, and other SQL concepts. Typically, logical aspects are important
    to make database administration and application development convenient and usable.
    Contrast with **physical**.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 一种涉及高级、抽象方面（如表、查询、索引和其他 SQL 概念）的操作类型。通常，逻辑方面对于使数据库管理和应用程序开发变得方便和可用至关重要。与**物理**相对。
- en: See Also [logical backup](glossary.html#glos_logical_backup), [physical](glossary.html#glos_physical).
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [逻辑备份](glossary.html#glos_logical_backup)，[物理的](glossary.html#glos_physical)。
- en: logical backup
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑备份
- en: A **backup** that reproduces table structure and data, without copying the actual
    data files. For example, the **`mysqldump`** command produces a logical backup,
    because its output contains statements such as [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") and [`INSERT`](insert.html "15.2.7 INSERT Statement")
    that can re-create the data. Contrast with **physical backup**. A logical backup
    offers flexibility (for example, you could edit table definitions or insert statements
    before restoring), but can take substantially longer to **restore** than a physical
    backup.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 一种复制表结构和数据，而不复制实际数据文件的**备份**。例如，**`mysqldump`**命令生成逻辑备份，因为其输出包含诸如[`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement")和[`INSERT`](insert.html "15.2.7 INSERT Statement")等可以重新创建数据的语句。与**物理备份**相对。逻辑备份提供了灵活性（例如，在恢复之前可以编辑表定义或插入语句），但恢复所需的时间可能比物理备份长得多。
- en: See Also [backup](glossary.html#glos_backup), [mysqldump](glossary.html#glos_mysqldump),
    [physical backup](glossary.html#glos_physical_backup), [restore](glossary.html#glos_restore).
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: ���见 [备份](glossary.html#glos_backup)，[mysqldump](glossary.html#glos_mysqldump)，[物理备份](glossary.html#glos_physical_backup)，[恢复](glossary.html#glos_restore)。
- en: loose_
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: loose_
- en: A prefix added to `InnoDB` configuration options after server **startup**, so
    any new configuration options not recognized by the current level of MySQL do
    not cause a startup failure. MySQL processes configuration options that start
    with this prefix, but gives a warning rather than a failure if the part after
    the prefix is not a recognized option.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 一个前缀添加到`InnoDB`配置选项之后的服务器**启动**后，这样任何新的配置选项如果当前MySQL版本不识别，不会导致启动失败。MySQL处理以这个前缀开头的配置选项，但如果前缀后的部分不是一个被识别的选项，会给出警告而不是失败。
- en: See Also [startup](glossary.html#glos_startup).
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[启动](glossary.html#glos_startup)。
- en: low-water mark
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 低水位标记
- en: A value representing a lower limit, typically a threshold value at which some
    corrective action begins or becomes more aggressive. Contrast with **high-water
    mark**.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 代表下限的值，通常是某种纠正措施开始或变得更加积极的阈值。与**高水位标记**相对。
- en: See Also [high-water mark](glossary.html#glos_high_water_mark).
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[高水位标记](glossary.html#glos_high_water_mark)。
- en: LRU
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: LRU
- en: An acronym for “least recently used”, a common method for managing storage areas.
    The items that have not been used recently are **evicted** when space is needed
    to cache newer items. `InnoDB` uses the LRU mechanism by default to manage the
    **pages** within the **buffer pool**, but makes exceptions in cases where a page
    might be read only a single time, such as during a **full table scan**. This variation
    of the LRU algorithm is called the **midpoint insertion strategy**. For more information,
    see [Section 17.5.1, “Buffer Pool”](innodb-buffer-pool.html "17.5.1 Buffer Pool").
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: “最近最少使用”的缩写，一种常见的管理存储区域的方法。当需要为新项目缓存空间时，最近未被使用的项目会被**驱逐**。`InnoDB`默认使用LRU机制来管理**缓冲池**中的**页**，但在某些情况下会有例外，比如在**全表扫描**期间可能只读取一页。这种LRU算法的变体称为**中点插入策略**。更多信息，请参见[第17.5.1节，“缓冲池”](innodb-buffer-pool.html
    "17.5.1 缓冲池")。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [eviction](glossary.html#glos_eviction),
    [full table scan](glossary.html#glos_full_table_scan), [midpoint insertion strategy](glossary.html#glos_midpoint_insertion_strategy),
    [page](glossary.html#glos_page).
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[驱逐](glossary.html#glos_eviction)，[全表扫描](glossary.html#glos_full_table_scan)，[中点插入策略](glossary.html#glos_midpoint_insertion_strategy)，[页](glossary.html#glos_page)。
- en: LSN
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: LSN
- en: Acronym for “log sequence number”. This arbitrary, ever-increasing value represents
    a point in time corresponding to operations recorded in the **redo log**. (This
    point in time is regardless of **transaction** boundaries; it can fall in the
    middle of one or more transactions.) It is used internally by `InnoDB` during
    **crash recovery** and for managing the **buffer pool**.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: “日志序列号”的缩写。这个任意增长的值代表了**重做日志**中记录操作的时间点。（这个时间点不考虑**事务**边界；它可能落在一个或多个事务的中间。）在`InnoDB`内部，它用于**崩溃恢复**和管理**缓冲池**。
- en: Prior to MySQL 5.6.3, the LSN was a 4-byte unsigned integer. The LSN became
    an 8-byte unsigned integer in MySQL 5.6.3 when the redo log file size limit increased
    from 4GB to 512GB, as additional bytes were required to store extra size information.
    Applications built on MySQL 5.6.3 or later that use LSN values should use 64-bit
    rather than 32-bit variables to store and compare LSN values.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 5.6.3之前，LSN是一个4字节的无符号整数。当重做日志文件大小限制从4GB增加到512GB时，LSN在MySQL 5.6.3中变为一个8字节的无符号整数，因为需要额外的字节来存储额外的大小信息。在MySQL
    5.6.3或更高版本上构建的应用程序使用LSN值时，应该使用64位而不是32位变量来存储和比较LSN值。
- en: In the **MySQL Enterprise Backup** product, you can specify an LSN to represent
    the point in time from which to take an **incremental backup**. The relevant LSN
    is displayed by the output of the **mysqlbackup** command. Once you have the LSN
    corresponding to the time of a full backup, you can specify that value to take
    a subsequent incremental backup, whose output contains another LSN for the next
    incremental backup.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 在**MySQL企业备份**产品中，您可以指定一个LSN来表示从哪个时间点开始进行**增量备份**。相关LSN由**mysqlbackup**命令的输出显示。一旦您获得了与全备份时间对应的LSN，您可以指定该值来进行后续的增量备份，其输出包含下一个增量备份的另一个LSN。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [crash recovery](glossary.html#glos_crash_recovery),
    [incremental backup](glossary.html#glos_incremental_backup), [MySQL Enterprise
    Backup](glossary.html#glos_mysql_enterprise_backup), [redo log](glossary.html#glos_redo_log),
    [transaction](glossary.html#glos_transaction).
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[崩溃恢复](glossary.html#glos_crash_recovery)，[增量备份](glossary.html#glos_incremental_backup)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[重做日志](glossary.html#glos_redo_log)，[事务](glossary.html#glos_transaction)。
- en: M
  id: totrans-852
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: M
- en: .MRG file
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: .MRG文件
- en: A file containing references to other tables, used by the `MERGE` storage engine.
    Files with this extension are always included in backups produced by the **mysqlbackup**
    command of the **MySQL Enterprise Backup** product.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 包含对其他表的引用的文件，由`MERGE`存储引擎使用。具有此扩展名的文件始终包含在**MySQL Enterprise Backup**产品的**mysqlbackup**命令生成的备份中。
- en: See Also [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [mysqlbackup command](glossary.html#glos_mysqlbackup_command).
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[mysqlbackup命令](glossary.html#glos_mysqlbackup_command)。
- en: .MYD file
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: .MYD文件
- en: A file that MySQL uses to store data for a [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine") table.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL用于为[`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine")表存储数据的文件。
- en: See Also [.MYI file](glossary.html#glos_myi_file), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [mysqlbackup command](glossary.html#glos_mysqlbackup_command).
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[.MYI文件](glossary.html#glos_myi_file)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[mysqlbackup命令](glossary.html#glos_mysqlbackup_command)。
- en: .MYI file
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: .MYI文件
- en: A file that MySQL uses to store indexes for a [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine") table.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL用于为[`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine")表存储索引的文件。
- en: See Also [.MYD file](glossary.html#glos_myd_file), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [mysqlbackup command](glossary.html#glos_mysqlbackup_command).
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[.MYD文件](glossary.html#glos_myd_file)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[mysqlbackup命令](glossary.html#glos_mysqlbackup_command)。
- en: master
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 主节点
- en: See [source](glossary.html#glos_source).
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[来源](glossary.html#glos_source)。
- en: master thread
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 主线程
- en: An `InnoDB` **thread** that performs various tasks in the background. Most of
    these tasks are I/O related, such as writing changes from the **change buffer**
    to the appropriate secondary indexes.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台执行各种任务的`InnoDB`**线程**。其中大多数任务与I/O相关，例如将更改从**变更缓冲区**写入适当的辅助索引。
- en: To improve **concurrency**, sometimes actions are moved from the master thread
    to separate background threads. For example, in MySQL 5.6 and higher, **dirty
    pages** are **flushed** from the **buffer pool** by the **page cleaner** thread
    rather than the master thread.
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改善**并发性**，有时会将操作从主线程移动到单独的后台线程。例如，在MySQL 5.6及更高版本中，**脏页**由**页清理器**线程而不是主线程从**缓冲池**中**刷新**。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [change buffer](glossary.html#glos_change_buffer),
    [concurrency](glossary.html#glos_concurrency), [dirty page](glossary.html#glos_dirty_page),
    [flush](glossary.html#glos_flush), [page cleaner](glossary.html#glos_page_cleaner),
    [thread](glossary.html#glos_thread).
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[变更缓冲区](glossary.html#glos_change_buffer)，[并发性](glossary.html#glos_concurrency)，[脏页](glossary.html#glos_dirty_page)，[刷新](glossary.html#glos_flush)，[页清理器](glossary.html#glos_page_cleaner)，[线程](glossary.html#glos_thread)。
- en: MDL
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: MDL
- en: Acronym for “metadata lock”.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据锁的缩写。
- en: See Also [metadata lock](glossary.html#glos_metadata_lock).
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[元数据锁](glossary.html#glos_metadata_lock)。
- en: medium trust
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 中等信任
- en: Synonym for **partial trust**. Because the range of trust settings is so broad,
    “partial trust” is preferred, to avoid the implication that there are only three
    levels (low, medium, and full).
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: '**部分信任**的同义词。由于信任设置范围如此广泛，因此更倾向于使用“部分信任”，以避免暗示只有三个级别（低、中、完整）。'
- en: See Also [Connector/NET](glossary.html#glos_connector_net), [partial trust](glossary.html#glos_partial_trust).
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Connector/NET](glossary.html#glos_connector_net)，[部分信任](glossary.html#glos_partial_trust)。
- en: memcached
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: memcached
- en: A popular component of many MySQL and **NoSQL** software stacks, allowing fast
    reads and writes for single values and caching the results entirely in memory.
    Traditionally, applications required extra logic to write the same data to a MySQL
    database for permanent storage, or to read data from a MySQL database when it
    was not cached yet in memory. Now, applications can use the simple **memcached**
    protocol, supported by client libraries for many languages, to communicate directly
    with MySQL servers using `InnoDB` or `NDB` tables. These NoSQL interfaces to MySQL
    tables allow applications to achieve higher read and write performance than by
    issuing SQL statements directly, and can simplify application logic and deployment
    configurations for systems that already incorporate **memcached** for in-memory
    caching.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 许多MySQL和**NoSQL**软件堆栈的热门组件，允许快速读写单个值，并完全将结果缓存到内存中。传统上，应用程序需要额外的逻辑将相同的数据写入MySQL数据库以进行永久存储，或者在内存中尚未缓存时从MySQL数据库读取数据。现在，应用程序可以使用简单的**memcached**协议，通过支持多种语言的客户端库直接与使用`InnoDB`或`NDB`表的MySQL服务器通信。这些NoSQL接口允许应用程序实现比直接发出SQL语句更高的读写性能，并且可以简化已经将**memcached**用于内存缓存的系统的应用程序逻辑和部署配置。
- en: See Also [NoSQL](glossary.html#glos_nosql).
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[NoSQL](glossary.html#glos_nosql)。
- en: merge
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 合并
- en: To apply changes to data cached in memory, such as when a page is brought into
    the **buffer pool**, and any applicable changes recorded in the **change buffer**
    are incorporated into the page in the buffer pool. The updated data is eventually
    written to the **tablespace** by the **flush** mechanism.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将内存中缓存的数据更改应用到数据，例如当页面被带入**缓冲池**时，并且任何适用的更改记录在**更改缓冲区**中被合并到缓冲池中的页面中。更新后的数据最终通过**刷新**机制写入**表空间**。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [change buffer](glossary.html#glos_change_buffer),
    [flush](glossary.html#glos_flush), [tablespace](glossary.html#glos_tablespace).
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[缓冲池](glossary.html#glos_buffer_pool), [更改缓冲区](glossary.html#glos_change_buffer),
    [刷新](glossary.html#glos_flush), [表空间](glossary.html#glos_tablespace)。
- en: metadata lock
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据锁
- en: A type of **lock** that prevents **DDL** operations on a table that is being
    used at the same time by another **transaction**. For details, see [Section 10.11.4,
    “Metadata Locking”](metadata-locking.html "10.11.4 Metadata Locking").
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 一种类型的**锁**，防止另一个**事务**同时使用的表上进行**DDL**操作。详情请参阅[Section 10.11.4, “Metadata Locking”](metadata-locking.html
    "10.11.4 Metadata Locking")。
- en: Enhancements to **online** operations, particularly in MySQL 5.6 and higher,
    are focused on reducing the amount of metadata locking. The objective is for DDL
    operations that do not change the table structure (such as [`CREATE INDEX`](create-index.html
    "15.1.15 CREATE INDEX Statement") and [`DROP INDEX`](drop-index.html "15.1.27 DROP
    INDEX Statement") for `InnoDB` tables) to proceed while the table is being queried,
    updated, and so on by other transactions.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 对**在线**操作的增强，特别是在MySQL 5.6及更高版本中，重点是减少元数据锁定的数量。目标是让不改变表结构的DDL操作（例如[`CREATE INDEX`](create-index.html
    "15.1.15 CREATE INDEX Statement")和[`DROP INDEX`](drop-index.html "15.1.27 DROP
    INDEX Statement")用于`InnoDB`表）在其他事务查询、更新等的同时进行。
- en: See Also [DDL](glossary.html#glos_ddl), [lock](glossary.html#glos_lock), [online](glossary.html#glos_online),
    [transaction](glossary.html#glos_transaction).
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[DDL](glossary.html#glos_ddl), [lock](glossary.html#glos_lock), [online](glossary.html#glos_online),
    [transaction](glossary.html#glos_transaction)。
- en: metrics counter
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 指标计数器
- en: A feature implemented by the [`INNODB_METRICS`](information-schema-innodb-metrics-table.html
    "28.4.21 The INFORMATION_SCHEMA INNODB_METRICS Table") table in the **INFORMATION_SCHEMA**,
    in MySQL 5.6 and higher. You can query **counts** and totals for low-level `InnoDB`
    operations, and use the results for performance tuning in combination with data
    from the **Performance Schema**.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 由**INFORMATION_SCHEMA**中的[`INNODB_METRICS`](information-schema-innodb-metrics-table.html
    "28.4.21 The INFORMATION_SCHEMA INNODB_METRICS Table")表在MySQL 5.6及更高版本中实现的功能。您可以查询低级`InnoDB`操作的计数和总数，并与**Performance
    Schema**中的数据结合使用进行性能调整。
- en: See Also [counter](glossary.html#glos_counter), [INFORMATION_SCHEMA](glossary.html#glos_information_schema),
    [Performance Schema](glossary.html#glos_performance_schema).
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[counter](glossary.html#glos_counter), [INFORMATION_SCHEMA](glossary.html#glos_information_schema),
    [Performance Schema](glossary.html#glos_performance_schema)。
- en: midpoint insertion strategy
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 中点插入策略
- en: The technique of initially bringing **pages** into the `InnoDB` **buffer pool**
    not at the “newest” end of the list, but instead somewhere in the middle. The
    exact location of this point can vary, based on the setting of the [`innodb_old_blocks_pct`](innodb-parameters.html#sysvar_innodb_old_blocks_pct)
    option. The intent is that pages that are only read once, such as during a **full
    table scan**, can be aged out of the buffer pool sooner than with a strict **LRU**
    algorithm. For more information, see [Section 17.5.1, “Buffer Pool”](innodb-buffer-pool.html
    "17.5.1 Buffer Pool").
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 最初将**页面**带入`InnoDB` **缓冲池**的技术不是在列表的“最新”端，而是在中间某处。这一点的确切位置可以根据[`innodb_old_blocks_pct`](innodb-parameters.html#sysvar_innodb_old_blocks_pct)选项的设置而变化。其目的是，只被读取一次的页面，例如在**全表扫描**期间，可以比严格的**LRU**算法更快地从缓冲池中淘汰。更多信息，请参见
    [第17.5.1节，“缓冲池”](innodb-buffer-pool.html "17.5.1 Buffer Pool")。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [full table scan](glossary.html#glos_full_table_scan),
    [LRU](glossary.html#glos_lru), [page](glossary.html#glos_page).
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [缓冲池](glossary.html#glos_buffer_pool), [全表扫描](glossary.html#glos_full_table_scan),
    [LRU](glossary.html#glos_lru), [页](glossary.html#glos_page)。
- en: mini-transaction
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 迷你事务
- en: An internal phase of `InnoDB` processing, when making changes at the **physical**
    level to internal data structures during **DML** operations. A mini-transaction
    (mtr) has no notion of **rollback**; multiple mini-transactions can occur within
    a single **transaction**. Mini-transactions write information to the **redo log**
    that is used during **crash recovery**. A mini-transaction can also happen outside
    the context of a regular transaction, for example during **purge** processing
    by background threads.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InnoDB`处理的内部阶段，当在**DML**操作期间对内部数据结构进行**物理**级别的更改时发生。迷你事务（mtr）没有**回滚**的概念；在单个**事务**中可以发生多个迷你事务。迷你事务将信息写入**重做日志**，在**崩溃恢复**期间使用。迷你事务也可能发生在常规事务之外的情况下，例如在后台线程进行**清除**处理时。
- en: See Also [commit](glossary.html#glos_commit), [crash recovery](glossary.html#glos_crash_recovery),
    [DML](glossary.html#glos_dml), [physical](glossary.html#glos_physical), [purge](glossary.html#glos_purge),
    [redo log](glossary.html#glos_redo_log), [rollback](glossary.html#glos_rollback),
    [transaction](glossary.html#glos_transaction).
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [提交](glossary.html#glos_commit), [崩溃恢复](glossary.html#glos_crash_recovery),
    [DML](glossary.html#glos_dml), [物理](glossary.html#glos_physical), [清除](glossary.html#glos_purge),
    [重做日志](glossary.html#glos_redo_log), [回滚](glossary.html#glos_rollback), [事务](glossary.html#glos_transaction)。
- en: mixed-mode insert
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 混合模式插入
- en: An [`INSERT`](insert.html "15.2.7 INSERT Statement") statement where **auto-increment**
    values are specified for some but not all of the new rows. For example, a multi-value
    `INSERT` could specify a value for the auto-increment column in some cases and
    `NULL` in other cases. `InnoDB` generates auto-increment values for the rows where
    the column value was specified as `NULL`. Another example is an [`INSERT ... ON
    DUPLICATE KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE
    KEY UPDATE Statement") statement, where auto-increment values might be generated
    but not used, for any duplicate rows that are processed as `UPDATE` rather than
    `INSERT` statements.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`INSERT`](insert.html "15.2.7 INSERT Statement")语句，其中为一些新行指定了**自增**值，但并非所有新行都指定了。例如，多值`INSERT`可能在某些情况下为自增列指定一个值，而在其他情况下为`NULL`。`InnoDB`会为那些列值被指定为`NULL`的行生成自增值。另一个例子是[`INSERT
    ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON
    DUPLICATE KEY UPDATE Statement")语句，其中可能会生成自增值，但对于任何被处理为`UPDATE`而不是`INSERT`语句的重复行，这些值可能不会被使用。
- en: Can cause consistency issues between **source** and **replica** servers in a
    **replication** configuration. Can require adjusting the value of the **innodb_autoinc_lock_mode**
    configuration option.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会导致**复制**配置中**源**和**副本**服务器之间的一致性问题。可能需要调整**innodb_autoinc_lock_mode**配置选项的值。
- en: See Also [auto-increment](glossary.html#glos_auto_increment), [innodb_autoinc_lock_mode](glossary.html#glos_innodb_autoinc_lock_mode),
    [replica](glossary.html#glos_replica), [replication](glossary.html#glos_replication),
    [source](glossary.html#glos_source).
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [自增](glossary.html#glos_auto_increment), [innodb_autoinc_lock_mode](glossary.html#glos_innodb_autoinc_lock_mode),
    [副本](glossary.html#glos_replica), [复制](glossary.html#glos_replication), [源](glossary.html#glos_source)。
- en: MM.MySQL
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: MM.MySQL
- en: An older JDBC driver for MySQL that evolved into **Connector/J** when it was
    integrated with the MySQL product.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 一个较旧的用于MySQL的JDBC驱动程序，在与MySQL产品集成时演变��**Connector/J**。
- en: See Also [Connector/J](glossary.html#glos_connector_j).
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [Connector/J](glossary.html#glos_connector_j)。
- en: Mono
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: Mono
- en: An Open Source framework developed by Novell, that works with **Connector/NET**
    and **C#** applications on Linux platforms.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 由Novell开发的适用于Linux平台上的**Connector/NET**和**C#**应用程序的开源框架。
- en: See Also [Connector/NET](glossary.html#glos_connector_net), [C#](glossary.html#glos_csharp).
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Connector/NET](glossary.html#glos_connector_net)，[C#](glossary.html#glos_csharp)。
- en: mtr
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: mtr
- en: See [mini-transaction](glossary.html#glos_mini_transaction).
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[mini-transaction](glossary.html#glos_mini_transaction)。
- en: multi-core
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 多核
- en: A type of processor that can take advantage of multithreaded programs, such
    as the MySQL server.
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可以利用多线程程序的处理器类型，比如MySQL服务器。
- en: multiversion concurrency control
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 多版本并发控制
- en: See [MVCC](glossary.html#glos_mvcc).
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[MVCC](glossary.html#glos_mvcc)。
- en: mutex
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 互斥量
- en: Informal abbreviation for “mutex variable”. (Mutex itself is short for “mutual
    exclusion”.) The low-level object that `InnoDB` uses to represent and enforce
    exclusive-access **locks** to internal in-memory data structures. Once the lock
    is acquired, any other process, thread, and so on is prevented from acquiring
    the same lock. Contrast with **rw-locks**, which `InnoDB` uses to represent and
    enforce shared-access **locks** to internal in-memory data structures. Mutexes
    and rw-locks are known collectively as **latches**.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: “互斥变量”的非正式缩写。（Mutex本身是“mutual exclusion”的缩写。）`InnoDB`用来表示和执行对内部内存数据结构的独占访问**锁**的低级对象。一旦获得锁，任何其他进程、线程等都无法获得相同的锁。与**rw-locks**相对应，`InnoDB`用来表示和执行对内部内存数据结构的共享访问**锁**。Mutexes和rw-locks总称为**latches**。
- en: See Also [latch](glossary.html#glos_latch), [lock](glossary.html#glos_lock),
    [Performance Schema](glossary.html#glos_performance_schema), [Pthreads](glossary.html#glos_pthreads),
    [rw-lock](glossary.html#glos_rw_lock).
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[latch](glossary.html#glos_latch)，[lock](glossary.html#glos_lock)，[性能模式](glossary.html#glos_performance_schema)，[Pthreads](glossary.html#glos_pthreads)，[rw-lock](glossary.html#glos_rw_lock)。
- en: MVCC
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: MVCC
- en: Acronym for “multiversion concurrency control”. This technique lets `InnoDB`
    **transactions** with certain **isolation levels** perform **consistent read**
    operations; that is, to query rows that are being updated by other transactions,
    and see the values from before those updates occurred. This is a powerful technique
    to increase **concurrency**, by allowing queries to proceed without waiting due
    to **locks** held by the other transactions.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: “多版本并发控制”的缩写。这种技术允许具有特定**隔离级别**的`InnoDB`**事务**执行**一致性读**操作；也就是说，查询正在被其他事务更新的行，并查看这些更新发生之前的值。这是一种增加**并发性**的强大技术，允许查询继续进行而无需等待由其他事务持有的**锁**。
- en: This technique is not universal in the database world. Some other database products,
    and some other MySQL storage engines, do not support it.
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术在数据库世界中并不普遍。一些其他数据库产品和一些其他MySQL存储引擎不支持它。
- en: See Also [ACID](glossary.html#glos_acid), [concurrency](glossary.html#glos_concurrency),
    [consistent read](glossary.html#glos_consistent_read), [isolation level](glossary.html#glos_isolation_level),
    [lock](glossary.html#glos_lock), [transaction](glossary.html#glos_transaction).
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ACID](glossary.html#glos_acid)，[并发性](glossary.html#glos_concurrency)，[一致性读](glossary.html#glos_consistent_read)，[隔离级别](glossary.html#glos_isolation_level)，[锁](glossary.html#glos_lock)，[事务](glossary.html#glos_transaction)。
- en: my.cnf
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: my.cnf
- en: The name, on Unix or Linux systems, of the MySQL **option file**.
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix或Linux系统上的MySQL**选项文件**的名称。
- en: See Also [my.ini](glossary.html#glos_my_ini), [option file](glossary.html#glos_option_file).
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[my.ini](glossary.html#glos_my_ini)，[选项文件](glossary.html#glos_option_file)。
- en: my.ini
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: my.ini
- en: The name, on Windows systems, of the MySQL **option file**.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows系统上的MySQL**选项文件**的名称。
- en: See Also [my.cnf](glossary.html#glos_my_cnf), [option file](glossary.html#glos_option_file).
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[my.cnf](glossary.html#glos_my_cnf)，[选项文件](glossary.html#glos_option_file)。
- en: MyODBC drivers
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: MyODBC驱动程序
- en: Obsolete name for **Connector/ODBC**.
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '**Connector/ODBC**的过时名称。'
- en: See Also [Connector/ODBC](glossary.html#glos_connector_odbc).
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Connector/ODBC](glossary.html#glos_connector_odbc)。
- en: mysql
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: mysql
- en: The [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") program
    is the command-line interpreter for the MySQL database. It processes **SQL** statements,
    and also MySQL-specific commands such as [`SHOW TABLES`](show-tables.html "15.7.7.39 SHOW
    TABLES Statement"), by passing requests to the [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") daemon.
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: '[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")程序是MySQL数据库的命令行解释器。它处理**SQL**语句，还处理MySQL特定的命令，比如通过将请求传递给[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")守护进程的[`SHOW TABLES`](show-tables.html "15.7.7.39 SHOW
    TABLES Statement")等命令。'
- en: See Also [mysqld](glossary.html#glos_mysqld), [SQL](glossary.html#glos_sql).
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[mysqld](glossary.html#glos_mysqld)，[SQL](glossary.html#glos_sql)。
- en: MySQL Enterprise Backup
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL企业备份
- en: A licensed product that performs **hot backups** of MySQL databases. It offers
    the most efficiency and flexibility when backing up [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") tables, but can also back up [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine") and other kinds of tables.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有许可的产品，可以对MySQL数据库进行**热备份**。在备份[`InnoDB`](innodb-storage-engine.html "第17章
    InnoDB存储引擎")表时效率和灵活性最高，但也可以备份[`MyISAM`](myisam-storage-engine.html "18.2 MyISAM存储引擎")和其他类型的表。
- en: See Also [hot backup](glossary.html#glos_hot_backup), [InnoDB](glossary.html#glos_innodb).
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[热备份](glossary.html#glos_hot_backup)，[InnoDB](glossary.html#glos_innodb)。
- en: mysqlbackup command
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlbackup命令
- en: A command-line tool of the **MySQL Enterprise Backup** product. It performs
    a **hot backup** operation for [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine") tables, and a [warm backup](glossary.html#glos_warm_backup
    "warm backup") for [`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage
    Engine") and other kinds of tables. See [Section 32.1, “MySQL Enterprise Backup
    Overview”](mysql-enterprise-backup.html "32.1 MySQL Enterprise Backup Overview")
    for more information about this command.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '**MySQL企业备份**产品的命令行工具。它为[`InnoDB`](innodb-storage-engine.html "第17章 InnoDB存储引擎")表执行**热备份**操作，并为[`MyISAM`](myisam-storage-engine.html
    "18.2 MyISAM存储引擎")和其他类型的表执行[温备份](glossary.html#glos_warm_backup "温备份")。有关此命令的更多信息，请参见[第32.1节“MySQL企业备份概述”](mysql-enterprise-backup.html
    "32.1 MySQL企业备份概述")。'
- en: See Also [hot backup](glossary.html#glos_hot_backup), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [warm backup](glossary.html#glos_warm_backup).
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[热备份](glossary.html#glos_hot_backup)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[温备份](glossary.html#glos_warm_backup)。
- en: mysqlclient
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: mysqlclient
- en: The informal name for the library that is implemented by the file **libmysqlclient**,
    with extension `.a` or `.so`.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 由文件**libmysqlclient**实现的库的非正式名称，扩展名为`.a`或`.so`。
- en: See Also [libmysqlclient](glossary.html#glos_libmysqlclient).
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[libmysqlclient](glossary.html#glos_libmysqlclient)。
- en: mysqld
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: mysqld
- en: '[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server"), also known as
    MySQL Server, is a single multithreaded program that does most of the work in
    a MySQL installation. It does not spawn additional processes. MySQL Server manages
    access to the MySQL data directory that contains databases, tables, and other
    information such as log files and status files.'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '[**mysqld**](mysqld.html "6.3.1 mysqld — MySQL服务器")，也称为MySQL服务器，是一个单个多线程程序，负责大部分MySQL安装工作。它不会生成额外的进程。MySQL服务器管理包含数据库、表和其他信息（如日志文件和状态文件）的MySQL数据目录的访问。'
- en: '[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server") runs as a Unix
    daemon or Windows service, constantly waiting for requests and performing maintenance
    work in the background.'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '[**mysqld**](mysqld.html "6.3.1 mysqld — MySQL服务器")作为Unix守护程序或Windows服务运行，不断等待请求并在后台执行维护工作。'
- en: See Also [instance](glossary.html#glos_instance), [mysql](glossary.html#glos_mysql).
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[实例](glossary.html#glos_instance)，[mysql](glossary.html#glos_mysql)。
- en: MySQLdb
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: MySQLdb
- en: The name of the open-source **Python** module that forms the basis of the MySQL
    **Python API**.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 构成MySQL **Python API**基础的开源**Python**模块的名称。
- en: See Also [Python](glossary.html#glos_python), [Python API](glossary.html#glos_python_api).
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Python](glossary.html#glos_python)，[Python API](glossary.html#glos_python_api)。
- en: mysqldump
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: mysqldump
- en: A command that performs a **logical backup** of some combination of databases,
    tables, and table data. The results are SQL statements that reproduce the original
    schema objects, data, or both. For substantial amounts of data, a **physical backup**
    solution such as **MySQL Enterprise Backup** is faster, particularly for the **restore**
    operation.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 一个执行一些数据库、表和表数据的**逻辑备份**的命令。结果是可以重现原始模式对象、数据或两者的SQL语句。对于大量数据，**MySQL企业备份**等**物理备份**解决方案更快，特别是对于**恢复**操作。
- en: See Also [logical backup](glossary.html#glos_logical_backup), [MySQL Enterprise
    Backup](glossary.html#glos_mysql_enterprise_backup), [physical backup](glossary.html#glos_physical_backup),
    [restore](glossary.html#glos_restore).
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[逻辑备份](glossary.html#glos_logical_backup)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[物理备份](glossary.html#glos_physical_backup)，[恢复](glossary.html#glos_restore)。
- en: N
  id: totrans-947
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: N
- en: .NET
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: .NET
- en: See Also [ADO.NET](glossary.html#glos_ado_net), [ASP.net](glossary.html#glos_asp_net),
    [Connector/NET](glossary.html#glos_connector_net), [Mono](glossary.html#glos_mono),
    [Visual Studio](glossary.html#glos_visual_studio).
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ADO.NET](glossary.html#glos_ado_net)，[ASP.net](glossary.html#glos_asp_net)，[Connector/NET](glossary.html#glos_connector_net)，[Mono](glossary.html#glos_mono)，[Visual
    Studio](glossary.html#glos_visual_studio)。
- en: native C API
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 本地C API
- en: Synonym for **libmysqlclient**.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: '**libmysqlclient**的同义词。'
- en: See Also [libmysql](glossary.html#glos_libmysql).
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[libmysql](glossary.html#glos_libmysql)。
- en: natural key
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 自然键
- en: 'An indexed column, typically a **primary key**, where the values have some
    real-world significance. Usually advised against because:'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 一个被索引的列，通常是一个**主键**，其值具有一些现实意义。通常不建议使用，因为：
- en: If the value should ever change, there is potentially a lot of index maintenance
    to re-sort the **clustered index** and update the copies of the primary key value
    that are repeated in each **secondary index**.
  id: totrans-955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果值应该发生变化，可能需要进行大量索引维护来重新排序**聚簇索引**并更新在每个**次要索引**中重复的主键值的副本。
- en: Even seemingly stable values can change in unpredictable ways that are difficult
    to represent correctly in the database. For example, one country can change into
    two or several, making the original country code obsolete. Or, rules about unique
    values might have exceptions. For example, even if taxpayer IDs are intended to
    be unique to a single person, a database might have to handle records that violate
    that rule, such as in cases of identity theft. Taxpayer IDs and other sensitive
    ID numbers also make poor primary keys, because they may need to be secured, encrypted,
    and otherwise treated differently than other columns.
  id: totrans-956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使看似稳定的值也可能以难以预测的方式发生变化，这在数据库中很难正确表示。例如，一个国家可能分裂成两个或多个，使原始国家代码变得过时。或者，关于唯一值的规则可能存在例外。例如，即使纳税人识别号意在唯一对应一个人，数据库可能需要处理违反该规则的记录，比如身份盗用的情况。纳税人识别号和其他敏感识别号也不适合作为主键，因为它们可能需要被保护、加密，或者以其他方式与其他列不同对待。
- en: Thus, it is typically better to use arbitrary numeric values to form a **synthetic
    key**, for example using an **auto-increment** column.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通常最好使用任意数值来形成一个**合成键**，例如使用一个**自增**列。
- en: See Also [auto-increment](glossary.html#glos_auto_increment), [clustered index](glossary.html#glos_clustered_index),
    [primary key](glossary.html#glos_primary_key), [secondary index](glossary.html#glos_secondary_index),
    [synthetic key](glossary.html#glos_synthetic_key).
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[自增](glossary.html#glos_auto_increment)，[聚簇索引](glossary.html#glos_clustered_index)，[主键](glossary.html#glos_primary_key)，[次要索引](glossary.html#glos_secondary_index)，[合成键](glossary.html#glos_synthetic_key)。
- en: neighbor page
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 相邻页
- en: Any **page** in the same **extent** as a particular page. When a page is selected
    to be **flushed**, any neighbor pages that are **dirty** are typically flushed
    as well, as an I/O optimization for traditional hard disks. In MySQL 5.6 and up,
    this behavior can be controlled by the configuration variable [`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors);
    you might turn that setting off for SSD drives, which do not have the same overhead
    for writing smaller batches of data at random locations.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 与特定页相同**区段**中的任何**页**。当选择要**刷新**的页时，通常也会刷新任何**脏**的相邻页，作为传统硬盘的I/O优化。在MySQL 5.6及更高版本中，此行为可以通过配置变量[`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors)来控制；对于没有写入较小数据批量的相同开销的SSD驱动器，您可能会关闭该设置。
- en: See Also [dirty page](glossary.html#glos_dirty_page), [extent](glossary.html#glos_extent),
    [flush](glossary.html#glos_flush), [page](glossary.html#glos_page).
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[脏页](glossary.html#glos_dirty_page)，[区段](glossary.html#glos_extent)，[刷新](glossary.html#glos_flush)，[页](glossary.html#glos_page)。
- en: next-key lock
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个键锁
- en: A combination of a **record lock** on the index record and a [gap lock](glossary.html#glos_gap_lock
    "gap lock") on the gap before the index record.
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 对索引记录上的**记录锁**和索引记录之前的[间隙锁](glossary.html#glos_gap_lock "gap lock")的组合。
- en: See Also [gap lock](glossary.html#glos_gap_lock), [locking](glossary.html#glos_locking),
    [record lock](glossary.html#glos_record_lock).
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[间隙锁](glossary.html#glos_gap_lock)，[锁定](glossary.html#glos_locking)，[记录锁](glossary.html#glos_record_lock)。
- en: non-locking read
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 非锁定读
- en: A **query** that does not use the `SELECT ... FOR UPDATE` or `SELECT ... LOCK
    IN SHARE MODE` clauses. The only kind of query allowed for global tables in a
    **read-only transaction**. The opposite of a **locking read**. See [Section 17.7.2.3,
    “Consistent Nonlocking Reads”](innodb-consistent-read.html "17.7.2.3 Consistent
    Nonlocking Reads").
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 一种不使用`SELECT ... FOR UPDATE`或`SELECT ... LOCK IN SHARE MODE`子句的**查询**。在**只读事务**中全局表允许的唯一一种查询。与**锁定读取**相反。参见[Section 17.7.2.3,
    “Consistent Nonlocking Reads”](innodb-consistent-read.html "17.7.2.3 Consistent
    Nonlocking Reads")。
- en: '`SELECT ... FOR SHARE` replaces `SELECT ... LOCK IN SHARE MODE` in MySQL 8.0.1,
    but `LOCK IN SHARE MODE` remains available for backward compatibility.'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: '`SELECT ... FOR SHARE`在MySQL 8.0.1中取代了`SELECT ... LOCK IN SHARE MODE`，但`LOCK
    IN SHARE MODE`仍可用于向后兼容。'
- en: See Also [locking read](glossary.html#glos_locking_read), [query](glossary.html#glos_query),
    [read-only transaction](glossary.html#glos_read_only_transaction).
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[锁定读取](glossary.html#glos_locking_read)，[查询](glossary.html#glos_query)，[只读事务](glossary.html#glos_read_only_transaction)。
- en: non-repeatable read
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 非重复读取
- en: The situation when a query retrieves data, and a later query within the same
    **transaction** retrieves what should be the same data, but the queries return
    different results (changed by another transaction committing in the meantime).
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个查询检索数据，而同一**事务**中的后续查询检索应该是相同数据时，但查询返回不同结果（在此期间由另一个事务提交更改）的情况。
- en: This kind of operation goes against the **ACID** principle of database design.
    Within a transaction, data should be consistent, with predictable and stable relationships.
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 这种操作违反了数据库设计的**ACID**原则。在一个事务中，数据应该是一致的，具有可预测和稳定的关系。
- en: Among different **isolation levels**, non-repeatable reads are prevented by
    the **serializable read** and **repeatable read** levels, and allowed by the **consistent
    read**, and **read uncommitted** levels.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的**隔离级别**中，非重复读取由**可串行读取**和**可重复读取**级别阻止，而由**一致读取**和**读取未提交**级别允许。
- en: See Also [ACID](glossary.html#glos_acid), [consistent read](glossary.html#glos_consistent_read),
    [isolation level](glossary.html#glos_isolation_level), [READ UNCOMMITTED](glossary.html#glos_read_uncommitted),
    [REPEATABLE READ](glossary.html#glos_repeatable_read), [SERIALIZABLE](glossary.html#glos_serializable),
    [transaction](glossary.html#glos_transaction).
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[ACID](glossary.html#glos_acid)，[一致读取](glossary.html#glos_consistent_read)，[隔离级别](glossary.html#glos_isolation_level)，[读取未提交](glossary.html#glos_read_uncommitted)，[可重复读取](glossary.html#glos_repeatable_read)，[可串行化](glossary.html#glos_serializable)，[事务](glossary.html#glos_transaction)。
- en: nonblocking I/O
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 非阻塞I/O
- en: An industry term that means the same as **asynchronous I/O**.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 一个行业术语，与**异步I/O**相同。
- en: See Also [asynchronous I/O](glossary.html#glos_asynchronous_io).
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[异步I/O](glossary.html#glos_asynchronous_io)。
- en: normalized
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 规范化
- en: A database design strategy where data is split into multiple tables, and duplicate
    values condensed into single rows represented by an ID, to avoid storing, querying,
    and updating redundant or lengthy values. It is typically used in **OLTP** applications.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 一种数据库设计策略，其中数据分割成多个表，并将重复值压缩为由ID表示的单行，以避免存储、查询和更新冗余或冗长的值。它通常用于**OLTP**应用程序中。
- en: For example, an address might be given a unique ID, so that a census database
    could represent the relationship **lives at this address** by associating that
    ID with each member of a family, rather than storing multiple copies of a complex
    value such as **123 Main Street, Anytown, USA**.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个地址可能被赋予一个唯一的ID，这样一个人口普查数据库可以通过将该ID与家庭的每个成员关联起来来表示**住在这个地址**的关系，而不是存储多个复杂值的副本，比如**123
    Main Street, Anytown, USA**。
- en: For another example, although a simple address book application might store
    each phone number in the same table as a person's name and address, a phone company
    database might give each phone number a special ID, and store the numbers and
    IDs in a separate table. This normalized representation could simplify large-scale
    updates when area codes split apart.
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，尽管一个简单的通讯录应用程序可能将每个电话号码存储在与人名和地址相同的表中，但电话公司数据库可能会为每个电话号码分配一个特殊的ID，并将号码和ID存储在单独的表中。这种规范化表示可以在区号分离时简化大规模更新。
- en: Normalization is not always recommended. Data that is primarily queried, and
    only updated by deleting entirely and reloading, is often kept in fewer, larger
    tables with redundant copies of duplicate values. This data representation is
    referred to as **denormalized**, and is frequently found in data warehousing applications.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 规范化并不总是推荐的。主要查询的数据，只通过完全删除和重新加载来更新，通常保存在较少、较大的表中，具有重复值的冗余副本。这种数据表示被称为**去规范化**，在数据仓库应用程序中经常发现。
- en: See Also [denormalized](glossary.html#glos_denormalized), [foreign key](glossary.html#glos_foreign_key),
    [OLTP](glossary.html#glos_oltp), [relational](glossary.html#glos_relational).
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[去规范化](glossary.html#glos_denormalized)，[外键](glossary.html#glos_foreign_key)，[OLTP](glossary.html#glos_oltp)，[关系型](glossary.html#glos_relational)。
- en: NoSQL
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL
- en: A broad term for a set of data access technologies that do not use the **SQL**
    language as their primary mechanism for reading and writing data. Some NoSQL technologies
    act as key-value stores, only accepting single-value reads and writes; some relax
    the restrictions of the **ACID** methodology; still others do not require a pre-planned
    **schema**. MySQL users can combine NoSQL-style processing for speed and simplicity
    with SQL operations for flexibility and convenience, by using the **memcached**
    API to directly access some kinds of MySQL tables.
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 一种广义上的数据访问技术集合，不使用**SQL**语言作为其主要读写数据的机制。一些 NoSQL 技术充当键值存储，只接受单值读取和写入；一些放宽了**ACID**方法的限制；还有一些不需要预先计划的**模式**。MySQL
    用户可以通过使用**memcached** API 直接访问某些种类的 MySQL 表，将 NoSQL 风格的处理与 SQL 操作结合起来，以实现速度和简单性，同时保持灵活性和便利性。
- en: See Also [ACID](glossary.html#glos_acid), [memcached](glossary.html#glos_memcached),
    [schema](glossary.html#glos_schema), [SQL](glossary.html#glos_sql).
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ACID](glossary.html#glos_acid)，[memcached](glossary.html#glos_memcached)，[模式](glossary.html#glos_schema)，[SQL](glossary.html#glos_sql)。
- en: NOT NULL constraint
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: NOT NULL 约束
- en: A type of **constraint** that specifies that a **column** cannot contain any
    **NULL** values. It helps to preserve **referential integrity**, as the database
    server can identify data with erroneous missing values. It also helps in the arithmetic
    involved in query optimization, allowing the optimizer to predict the number of
    entries in an index on that column.
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**约束**类型，指定一个**列**不能包含任何**NULL**值。它有助于保持**引用完整性**，因为数据库服务器可以识别具有错误缺失值的数据。它还有助于查询优化中涉及的算术运算，允许优化器预测该列上索引中的条目数。
- en: See Also [column](glossary.html#glos_column), [constraint](glossary.html#glos_constraint),
    [NULL](glossary.html#glos_null), [primary key](glossary.html#glos_primary_key),
    [referential integrity](glossary.html#glos_referential_integrity).
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[列](glossary.html#glos_column)，[约束](glossary.html#glos_constraint)，[NULL](glossary.html#glos_null)，[主键](glossary.html#glos_primary_key)，[引用完整性](glossary.html#glos_referential_integrity)。
- en: 'NULL'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 'NULL'
- en: A special value in **SQL**, indicating the absence of data. Any arithmetic operation
    or equality test involving a `NULL` value, in turn produces a `NULL` result. (Thus
    it is similar to the IEEE floating-point concept of NaN, “not a number”.) Any
    aggregate calculation such as `AVG()` ignores rows with `NULL` values, when determining
    how many rows to divide by. The only test that works with `NULL` values uses the
    SQL idioms `IS NULL` or `IS NOT NULL`.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL** 中的一个特殊值，表示数据的缺失。涉及`NULL` 值的任何算术运算或相等性测试都会产生一个`NULL` 结果。 （因此，它类似于 IEEE
    浮点概念中的 NaN，“不是一个数字”。）任何聚合计算，如`AVG()`，在确定要除以的行数时会忽略带有`NULL` 值的行。唯一可以与`NULL` 值一起使用的测试使用
    SQL 习语`IS NULL` 或`IS NOT NULL`。'
- en: '`NULL` values play a part in **index** operations, because for performance
    a database must minimize the overhead of keeping track of missing data values.
    Typically, `NULL` values are not stored in an index, because a query that tests
    an indexed column using a standard comparison operator could never match a row
    with a `NULL` value for that column. For the same reason, unique indexes do not
    prevent `NULL` values; those values simply are not represented in the index. Declaring
    a `NOT NULL` constraint on a column provides reassurance that there are no rows
    left out of the index, allowing for better query optimization (accurate counting
    of rows and estimation of whether to use the index).'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: '`NULL` 值在**索引**操作中起着重要作用，因为为了性能，数据库必须尽量减少跟踪缺失数据值的开销。通常，`NULL` 值不会存储在索引中，因为使用标准比较运算符测试带有该列的`NULL`
    值的行的查询永远不会匹配。出于同样的原因，唯一索引不会阻止`NULL` 值；这些值只是不在索引中表示。在列上声明`NOT NULL` 约束提供了确保没有遗漏在索引之外的行的保证，从而实现更好的查询优化（准确计算行数和估计是否使用索引）。'
- en: Because the **primary key** must be able to uniquely identify every row in the
    table, a single-column primary key cannot contain any `NULL` values, and a multi-column
    primary key cannot contain any rows with `NULL` values in all columns.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 因为**主键**必须能够唯一标识表中的每一行，单列主键不能包含任何`NULL`值，而多列主键不能包含所有列中都有`NULL`值的行。
- en: Although the Oracle database allows a `NULL` value to be concatenated with a
    string, `InnoDB` treats the result of such an operation as `NULL`.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Oracle数据库允许将`NULL`值与字符串连接，但`InnoDB`将此操作的结果视为`NULL`。
- en: See Also [index](glossary.html#glos_index), [primary key](glossary.html#glos_primary_key),
    [SQL](glossary.html#glos_sql).
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[索引](glossary.html#glos_index)，[主键](glossary.html#glos_primary_key)，[SQL](glossary.html#glos_sql)。
- en: O
  id: totrans-995
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: O
- en: .OPT file
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: .OPT文件
- en: A file containing database configuration information. Files with this extension
    are included in backups produced by the **mysqlbackup** command of the **MySQL
    Enterprise Backup** product.
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 包含数据库配置信息的文件。具有此扩展名的文件包含由**MySQL Enterprise Backup**产品的**mysqlbackup**命令生成的备份中。
- en: See Also [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [mysqlbackup command](glossary.html#glos_mysqlbackup_command).
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup)，[mysqlbackup命令](glossary.html#glos_mysqlbackup_command)。
- en: ODBC
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: ODBC
- en: Acronym for Open Database Connectivity, an industry-standard API. Typically
    used with Windows-based servers, or applications that require ODBC to communicate
    with MySQL. The MySQL ODBC driver is called **Connector/ODBC**.
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 开放数据库连接性的缩写，一个行业标准API。通常与基于Windows的服务器一起使用，或者需要ODBC与MySQL通信的应用程序。MySQL ODBC驱动程序称为**Connector/ODBC**。
- en: See Also [Connector/ODBC](glossary.html#glos_connector_odbc).
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[Connector/ODBC](glossary.html#glos_connector_odbc)。
- en: off-page column
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 离线列
- en: A column containing variable-length data (such as [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") and [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"))
    that is too long to fit on a **B-tree** page. The data is stored in **overflow
    pages**. The **DYNAMIC** row format is more efficient for such storage than the
    older **COMPACT** row format.
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 包含变长数据（如[`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")和[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")）的列，长度过长无法适应**B树**页。数据存储在**溢出页**中。对于这种存储，**DYNAMIC**行格式比旧的**COMPACT**行格式更有效。
- en: See Also [B-tree](glossary.html#glos_b_tree), [compact row format](glossary.html#glos_compact_row_format),
    [dynamic row format](glossary.html#glos_dynamic_row_format), [overflow page](glossary.html#glos_overflow_page).
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[B树](glossary.html#glos_b_tree)，[紧凑行格式](glossary.html#glos_compact_row_format)，[动态行格式](glossary.html#glos_dynamic_row_format)，[溢出页](glossary.html#glos_overflow_page)。
- en: OLTP
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: OLTP
- en: Acronym for “Online Transaction Processing”. A database system, or a database
    application, that runs a workload with many **transactions**, with frequent writes
    as well as reads, typically affecting small amounts of data at a time. For example,
    an airline reservation system or an application that processes bank deposits.
    The data might be organized in **normalized** form for a balance between **DML**
    (insert/update/delete) efficiency and **query** efficiency. Contrast with **data
    warehouse**.
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: “在线事务处理”的缩写。一个运行具有许多**事务**的工作负载的数据库系统或数据库应用程序，频繁进行写入和读取，通常每次影响少量数据。例如，航空公司预订系统或处理银行存款的应用程序。数据可能以**规范化**形式组织，以在**DML**（插入/更新/删除）效率和**查询**效率之间取得平衡。与**数据仓库**相对。
- en: With its **row-level locking** and **transactional** capability, **InnoDB**
    is the ideal storage engine for MySQL tables used in OLTP applications.
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其**行级锁定**和**事务**功能，**InnoDB**是用于OLTP应用程序中的MySQL表的理想存储引擎。
- en: See Also [data warehouse](glossary.html#glos_data_warehouse), [DML](glossary.html#glos_dml),
    [InnoDB](glossary.html#glos_innodb), [query](glossary.html#glos_query), [row lock](glossary.html#glos_row_lock),
    [transaction](glossary.html#glos_transaction).
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[数据仓库](glossary.html#glos_data_warehouse)，[DML](glossary.html#glos_dml)，[InnoDB](glossary.html#glos_innodb)，[查询](glossary.html#glos_query)，[行锁](glossary.html#glos_row_lock)，[事务](glossary.html#glos_transaction)。
- en: online
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 在线
- en: A type of operation that involves no downtime, blocking, or restricted operation
    for the database. Typically applied to **DDL**. Operations that shorten the periods
    of restricted operation, such as **fast index creation**, have evolved into a
    wider set of **online DDL** operations in MySQL 5.6.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 一种操作类型，不需要数据库停机、阻塞或受限操作。通常应用于**DDL**。缩短受限操作时间的操作，如**快速索引创建**，已经发展成MySQL 5.6中更广泛的**在线DDL**操作集。
- en: In the context of backups, a **hot backup** is an online operation and a **warm
    backup** is partially an online operation.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 在备份的背景下，**热备份**是在线操作，而**温备份**部分是在线操作。
- en: See Also [DDL](glossary.html#glos_ddl), [Fast Index Creation](glossary.html#glos_fast_index_creation),
    [hot backup](glossary.html#glos_hot_backup), [online DDL](glossary.html#glos_online_ddl),
    [warm backup](glossary.html#glos_warm_backup).
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [DDL](glossary.html#glos_ddl), [快速索引创建](glossary.html#glos_fast_index_creation),
    [热备份](glossary.html#glos_hot_backup), [在线 DDL](glossary.html#glos_online_ddl),
    [温备份](glossary.html#glos_warm_backup)。
- en: online DDL
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 在线 DDL
- en: A feature that improves the performance, concurrency, and availability of `InnoDB`
    tables during **DDL** (primarily [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement")) operations. See [Section 17.12, “InnoDB and Online DDL”](innodb-online-ddl.html
    "17.12 InnoDB and Online DDL") for details.
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 一种功能，可在**DDL**（主要是[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")）操作期间提高`InnoDB`表的性能、并发性和可用性。详情请参见[第17.12节，“InnoDB
    和在线 DDL”](innodb-online-ddl.html "17.12 InnoDB and Online DDL")。
- en: The details vary according to the type of operation. In some cases, the table
    can be modified concurrently while the [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") is in progress. The operation might be able to be performed
    without a table copy, or using a specially optimized type of table copy. DML log
    space usage for in-place operations is controlled by the [`innodb_online_alter_log_max_size`](innodb-parameters.html#sysvar_innodb_online_alter_log_max_size)
    configuration option.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 具体细节根据操作类型而变化。在某些情况下，表可以在进行[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement")操作时同时进行修改。该操作可能无需复制表，或者使用一种特别优化的表复制类型。对于原地操作，DML 日志空间使用由[`innodb_online_alter_log_max_size`](innodb-parameters.html#sysvar_innodb_online_alter_log_max_size)配置选项控制。
- en: This feature is an enhancement of the **Fast Index Creation** feature in MySQL
    5.5.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能是 MySQL 5.5 中**快速索引创建**功能的增强版。
- en: See Also [DDL](glossary.html#glos_ddl), [Fast Index Creation](glossary.html#glos_fast_index_creation),
    [online](glossary.html#glos_online).
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [DDL](glossary.html#glos_ddl), [快速索引创建](glossary.html#glos_fast_index_creation),
    [在线](glossary.html#glos_online)。
- en: optimistic
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 乐观
- en: 'A methodology that guides low-level implementation decisions for a relational
    database system. The requirements of performance and **concurrency** in a relational
    database mean that operations must be started or dispatched quickly. The requirements
    of consistency and **referential integrity** mean that any operation could fail:
    a transaction might be rolled back, a **DML** operation could violate a constraint,
    a request for a lock could cause a deadlock, a network error could cause a timeout.
    An optimistic strategy is one that assumes most requests or attempts succeed,
    so that relatively little work is done to prepare for the failure case. When this
    assumption is true, the database does little unnecessary work; when requests do
    fail, extra work must be done to clean up and undo changes.'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 一种指导关系数据库系统低级实现决策的方法论。关系数据库中性能和**并发性**的要求意味着操作必须快速启动或分派。一致性和**引用完整性**的要求意味着任何操作都可能失败：事务可能被回滚，**DML**操作可能违反约束，对锁的请求可能导致死锁，网络错误可能导致超时。乐观策略假设大多数请求或尝试成功，因此相对较少的工作用于准备失败情况。当这种假设成立时，数据库几乎不做不必要的工作；当请求失败时，必须做额外的工作来清理和撤消更改。
- en: '`InnoDB` uses optimistic strategies for operations such as **locking** and
    **commits**. For example, data changed by a transaction can be written to the
    data files before the commit occurs, making the commit itself very fast, but requiring
    more work to undo the changes if the transaction is rolled back.'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`在诸如**锁定**和**提交**等操作中使用乐观策略。例如，事务更改的数据可以在提交之前写入数据文件，使得提交本身非常快速，但如果事务被回滚，则需要更多工作来撤消更改。'
- en: The opposite of an optimistic strategy is a **pessimistic** one, where a system
    is optimized to deal with operations that are unreliable and frequently unsuccessful.
    This methodology is rare in a database system, because so much care goes into
    choosing reliable hardware, networks, and algorithms.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 乐观策略的反面是**悲观**策略，其中系统被优化以处理不可靠且频繁失败的操作。在数据库系统中，这种方法很少见，因为在选择可靠的硬件、网络和算法时需要非常小心。
- en: See Also [commit](glossary.html#glos_commit), [concurrency](glossary.html#glos_concurrency),
    [DML](glossary.html#glos_dml), [locking](glossary.html#glos_locking), [pessimistic](glossary.html#glos_pessimistic),
    [referential integrity](glossary.html#glos_referential_integrity).
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[commit](glossary.html#glos_commit)，[并发性](glossary.html#glos_concurrency)，[DML](glossary.html#glos_dml)，[锁定](glossary.html#glos_locking)，[悲观](glossary.html#glos_pessimistic)，[引用完整性](glossary.html#glos_referential_integrity)。
- en: optimizer
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 优化器
- en: The MySQL component that determines the best **indexes** and **join** order
    to use for a **query**, based on characteristics and data distribution of the
    relevant **tables**.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL组件，根据相关**表**的特征和数据分布，确定用于**查询**的最佳**索引**和**连接**顺序。
- en: See Also [index](glossary.html#glos_index), [join](glossary.html#glos_join),
    [query](glossary.html#glos_query), [table](glossary.html#glos_table).
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[index](glossary.html#glos_index)，[join](glossary.html#glos_join)，[query](glossary.html#glos_query)，[table](glossary.html#glos_table)。
- en: option
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 选项
- en: A configuration parameter for MySQL, either stored in the **option file** or
    passed on the command line.
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的配置参数，可以存储在**选项文件**中或通过命令行传递。
- en: For the **options** that apply to **InnoDB** tables, each option name starts
    with the prefix `innodb_`.
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于**InnoDB**表的**选项**，每个选项名称都以前缀`innodb_`开头。
- en: See Also [InnoDB](glossary.html#glos_innodb), [option](glossary.html#glos_option),
    [option file](glossary.html#glos_option_file).
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[InnoDB](glossary.html#glos_innodb)，[选项](glossary.html#glos_option)，[选项文件](glossary.html#glos_option_file)。
- en: option file
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 选项文件
- en: The file that holds the configuration **options** for the MySQL instance. Traditionally,
    on Linux and Unix this file is named `my.cnf`, and on Windows it is named `my.ini`.
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 保存MySQL实例配置**选项**的文件。传统上，在Linux和Unix上，该文件名为`my.cnf`，在Windows上为`my.ini`。
- en: See Also [configuration file](glossary.html#glos_configuration_file), [my.cnf](glossary.html#glos_my_cnf),
    [my.ini](glossary.html#glos_my_ini), [option](glossary.html#glos_option).
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[配置文件](glossary.html#glos_configuration_file)，[my.cnf](glossary.html#glos_my_cnf)，[my.ini](glossary.html#glos_my_ini)，[选项](glossary.html#glos_option)。
- en: overflow page
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 溢出页
- en: Separately allocated disk **pages** that hold variable-length columns (such
    as `BLOB` and `VARCHAR`) that are too long to fit on a **B-tree** page. The associated
    columns are known as **off-page columns**.
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 分别分配的磁盘**页**，用于存储长度可变的列（如`BLOB`和`VARCHAR`），这些列太长无法放在一个**B-tree**页上。相关列被称为**离页列**。
- en: See Also [B-tree](glossary.html#glos_b_tree), [off-page column](glossary.html#glos_off_page_column),
    [page](glossary.html#glos_page).
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[B-tree](glossary.html#glos_b_tree)，[离页列](glossary.html#glos_off_page_column)，[页](glossary.html#glos_page)。
- en: P
  id: totrans-1036
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: P
- en: .par file
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: .par文件
- en: A file containing partition definitions. Files with this extension are included
    in backups produced by the `mysqlbackup` command of the **MySQL Enterprise Backup**
    product.
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 包含分区定义的文件。具有此扩展名的文件包含由**MySQL企业备份**产品的`mysqlbackup`命令生成的备份中。
- en: With the introduction of native partitioning support for `InnoDB` tables in
    MySQL 5.7.6, `.par` files are no longer created for partitioned `InnoDB` tables.
    Partitioned `MyISAM` tables continue to use `.par` files in MySQL 5.7\. In MySQL
    8.0, partitioning support is only provided by the `InnoDB` storage engine. As
    such, `.par` files are no longer used as of MySQL 8.0.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 随着MySQL 5.7.6为`InnoDB`表引入本机分区支持，不再为分区`InnoDB`表创建`.par`文件。在MySQL 5.7中，分区`MyISAM`表继续使用`.par`文件。在MySQL
    8.0中，分区支持仅由`InnoDB`存储引擎提供。因此，在MySQL 8.0中不再使用`.par`文件。
- en: See Also [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [mysqlbackup command](glossary.html#glos_mysqlbackup_command).
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[mysqlbackup命令](glossary.html#glos_mysqlbackup_command)。
- en: page
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 页
- en: A unit representing how much data `InnoDB` transfers at any one time between
    disk (the **data files**) and memory (the **buffer pool**). A page can contain
    one or more **rows**, depending on how much data is in each row. If a row does
    not fit entirely into a single page, `InnoDB` sets up additional pointer-style
    data structures so that the information about the row can be stored in one page.
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 代表`InnoDB`在磁盘（**数据文件**）和内存（**缓冲池**）之间一次传输多少数据的单位。一个页可以包含一个或多个**行**，取决于每行有多少数据。如果一行无法完全适应单个页，`InnoDB`会设置额外的指针式数据结构，以便将行的信息存储在一个页中。
- en: One way to fit more data in each page is to use **compressed row format**. For
    tables that use BLOBs or large text fields, **compact row format** allows those
    large columns to be stored separately from the rest of the row, reducing I/O overhead
    and memory usage for queries that do not reference those columns.
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 增加每个页面中的数据量的一种方法是使用**压缩行格式**。对于使用BLOB或大文本字段的表，**紧凑行格式**允许将这些大列单独存储于行的其余部分之外，减少了对不引用这些列的查询的I/O开销和内存使用。
- en: When `InnoDB` reads or writes sets of pages as a batch to increase I/O throughput,
    it reads or writes an **extent** at a time.
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 当`InnoDB`以批量方式读取或写入页面集以增加I/O吞吐量时，它一次读取或写入一个**extent**。
- en: All the `InnoDB` disk data structures within a MySQL instance share the same
    **page size**.
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL实例中的所有`InnoDB`磁盘数据结构共享相同的**页面大小**。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [compact row format](glossary.html#glos_compact_row_format),
    [compressed row format](glossary.html#glos_compressed_row_format), [data files](glossary.html#glos_data_files),
    [extent](glossary.html#glos_extent), [page size](glossary.html#glos_page_size),
    [row](glossary.html#glos_row).
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[紧凑行格式](glossary.html#glos_compact_row_format)，[压缩行格式](glossary.html#glos_compressed_row_format)，[数据文件](glossary.html#glos_data_files)，[extent](glossary.html#glos_extent)，[页面大小](glossary.html#glos_page_size)，[行](glossary.html#glos_row)。
- en: page cleaner
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 页面清理器
- en: An `InnoDB` background **thread** that **flushes** **dirty pages** from the
    **buffer pool**. Prior to MySQL 5.6, this activity was performed by the **master
    thread**. The number of page cleaner threads is controlled by the [`innodb_page_cleaners`](innodb-parameters.html#sysvar_innodb_page_cleaners)
    configuration option, introduced in MySQL 5.7.4.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`InnoDB`后台**线程**，负责从**缓冲池**中**刷新** **脏页**。在MySQL 5.6之前，这项活动由**主线程**执行。页面清理器线程的数量由[`innodb_page_cleaners`](innodb-parameters.html#sysvar_innodb_page_cleaners)配置选项控制，该选项在MySQL
    5.7.4中引入。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [dirty page](glossary.html#glos_dirty_page),
    [flush](glossary.html#glos_flush), [master thread](glossary.html#glos_master_thread),
    [thread](glossary.html#glos_thread).
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[脏页](glossary.html#glos_dirty_page)，[刷新](glossary.html#glos_flush)，[主线程](glossary.html#glos_master_thread)，[线程](glossary.html#glos_thread)。
- en: page size
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 页面大小
- en: 'For releases up to and including MySQL 5.5, the size of each `InnoDB` **page**
    is fixed at 16 kilobytes. This value represents a balance: large enough to hold
    the data for most rows, yet small enough to minimize the performance overhead
    of transferring unneeded data to memory. Other values are not tested or supported.'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MySQL 5.5及之前的版本，每个`InnoDB` **页面**的大小固定为16千字节。这个值代表了一个平衡：足够大以容纳大多数行的数据，但足够小以最小化传输不必要数据到内存的性能开销。其他值未经测试或支持。
- en: Starting in MySQL 5.6, the page size for an `InnoDB` **instance** can be either
    4KB, 8KB, or 16KB, controlled by the [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    configuration option. As of MySQL 5.7.6, `InnoDB` also supports 32KB and 64KB
    page sizes. For 32KB and 64KB page sizes, `ROW_FORMAT=COMPRESSED` is not supported
    and the maximum record size is 16KB.
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 5.6开始，`InnoDB` **实例**的页面大小可以是4KB、8KB或16KB，由[`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)配置选项控制。截至MySQL
    5.7.6，`InnoDB`还支持32KB和64KB的页面大小。对于32KB和64KB的页面大小，不支持`ROW_FORMAT=COMPRESSED`，最大记录大小为16KB。
- en: Page size is set when creating the MySQL instance, and it remains constant afterward.
    The same page size applies to all `InnoDB` **tablespaces**, including the **system
    tablespace**, **file-per-table** tablespaces, and **general tablespaces**.
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 创建MySQL实例时设置页面大小，并在此后保持不变。相同的页面大小适用于所有`InnoDB` **表空间**，包括**系统表空间**，**每表一个文件**表空间和**通用表空间**。
- en: Smaller page sizes can help performance with storage devices that use small
    block sizes, particularly for **SSD** devices in **disk-bound** workloads, such
    as for **OLTP** applications. As individual rows are updated, less data is copied
    into memory, written to disk, reorganized, locked, and so on.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 较小的页面大小可以提高使用小块大小的存储设备的性能，特别是对于**SSD**设备在**磁盘密集型**工作负载中，例如**OLTP**应用程序。随着个别行的更新，将更少的数据复制到内存，写入磁盘，重新组织，锁定等。
- en: See Also [disk-bound](glossary.html#glos_disk_bound), [file-per-table](glossary.html#glos_file_per_table),
    [general tablespace](glossary.html#glos_general_tablespace), [instance](glossary.html#glos_instance),
    [OLTP](glossary.html#glos_oltp), [page](glossary.html#glos_page), [SSD](glossary.html#glos_ssd),
    [system tablespace](glossary.html#glos_system_tablespace), [tablespace](glossary.html#glos_tablespace).
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [磁盘限制](glossary.html#glos_disk_bound), [每表文件](glossary.html#glos_file_per_table),
    [通用表空间](glossary.html#glos_general_tablespace), [实例](glossary.html#glos_instance),
    [OLTP](glossary.html#glos_oltp), [页](glossary.html#glos_page), [SSD](glossary.html#glos_ssd),
    [系统表空间](glossary.html#glos_system_tablespace), [表空间](glossary.html#glos_tablespace)。
- en: parent table
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 父表
- en: The table in a **foreign key** relationship that holds the initial column values
    pointed to from the **child table**. The consequences of deleting, or updating
    rows in the parent table depend on the `ON UPDATE` and `ON DELETE` clauses in
    the foreign key definition. Rows with corresponding values in the child table
    could be automatically deleted or updated in turn, or those columns could be set
    to `NULL`, or the operation could be prevented.
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: 在**外键**关系中保存从**子表**指向的初始列值的表。删除或更新父表中的行的后果取决于外键定义中的 `ON UPDATE` 和 `ON DELETE`
    子句。子表中具有相应值的行可能会自动删除或更新，或者这些列可能被设置为`NULL`，或者操作可能被阻止。
- en: See Also [child table](glossary.html#glos_child_table), [foreign key](glossary.html#glos_foreign_key).
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [子表](glossary.html#glos_child_table), [外键](glossary.html#glos_foreign_key)。
- en: partial backup
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: 部分备份
- en: A **backup** that contains some of the **tables** in a MySQL database, or some
    of the databases in a MySQL instance. Contrast with **full backup**.
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 MySQL 数据库中部分**表**或 MySQL 实例中部分数据库的**备份**。与**完全备份**相对。
- en: See Also [backup](glossary.html#glos_backup), [full backup](glossary.html#glos_full_backup),
    [table](glossary.html#glos_table).
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [备份](glossary.html#glos_backup), [完全备份](glossary.html#glos_full_backup),
    [表](glossary.html#glos_table)。
- en: partial index
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 部分索引
- en: An **index** that represents only part of a column value, typically the first
    N characters (the **prefix**) of a long `VARCHAR` value.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 代表列值的一部分的**索引**，通常是长 `VARCHAR` 值的前 N 个字符（**前缀**）。
- en: See Also [index](glossary.html#glos_index), [index prefix](glossary.html#glos_index_prefix).
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [索引](glossary.html#glos_index), [索引前缀](glossary.html#glos_index_prefix)。
- en: partial trust
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 部分信任
- en: An execution environment typically used by hosting providers, where applications
    have some permissions but not others. For example, applications might be able
    to access a database server over a network, but be “sandboxed” with regard to
    reading and writing local files.
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 通常由托管提供商使用的执行环境，应用程序具有某些权限但不具备其他权限。例如，应用程序可能能够通过网络访问数据库服务器，但在读取和写入本地文件方面被“沙盒化”。
- en: See Also [Connector/NET](glossary.html#glos_connector_net).
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [Connector/NET](glossary.html#glos_connector_net)。
- en: Performance Schema
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 性能模式
- en: The `performance_schema` schema, in MySQL 5.5 and up, presents a set of tables
    that you can query to get detailed information about the performance characteristics
    of many internal parts of the MySQL server. See [Chapter 29, *MySQL Performance
    Schema*](performance-schema.html "Chapter 29 MySQL Performance Schema").
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 5.5 及更高版本中，`performance_schema` 模式提供了一组表，您可以查询这些表以获取关于 MySQL 服务器许多内部部分性能特征的详细信息。参见
    [第 29 章，*MySQL 性能模式*](performance-schema.html "第 29 章 MySQL 性能模式")。
- en: See Also [INFORMATION_SCHEMA](glossary.html#glos_information_schema), [latch](glossary.html#glos_latch),
    [mutex](glossary.html#glos_mutex), [rw-lock](glossary.html#glos_rw_lock).
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [INFORMATION_SCHEMA](glossary.html#glos_information_schema), [闩锁](glossary.html#glos_latch),
    [互斥锁](glossary.html#glos_mutex), [读写锁](glossary.html#glos_rw_lock)。
- en: Perl
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: Perl
- en: A programming language with roots in Unix scripting and report generation. Incorporates
    high-performance regular expressions and file I/O. Large collection of reusable
    modules available through repositories such as CPAN.
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 一种源自 Unix 脚本和报表生成的编程语言。集成了高性能正则表达式和文件 I/O。通过 CPAN 等仓库提供了大量可重用模块。
- en: See Also [Perl API](glossary.html#glos_perl_api).
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [Perl API](glossary.html#glos_perl_api)。
- en: Perl API
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: Perl API
- en: An open-source **API** for MySQL applications written in the **Perl** language.
    Implemented through the `DBI` and `DBD::mysql` modules. For details, see [Section 31.9,
    “MySQL Perl API”](apis-perl.html "31.9 MySQL Perl API").
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 用 Perl 语言编写的 MySQL 应用程序的开源**API**。通过 `DBI` 和 `DBD::mysql` 模块实现。详情请参见 [第 31.9
    节，“MySQL Perl API”](apis-perl.html "31.9 MySQL Perl API")。
- en: See Also [API](glossary.html#glos_api), [Perl](glossary.html#glos_perl).
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [API](glossary.html#glos_api), [Perl](glossary.html#glos_perl)。
- en: persistent statistics
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 持久统计
- en: A feature that stores **index** statistics for `InnoDB` **tables** on disk,
    providing better **plan stability** for **queries**. For more information, see
    [Section 17.8.10.1, “Configuring Persistent Optimizer Statistics Parameters”](innodb-persistent-stats.html
    "17.8.10.1 Configuring Persistent Optimizer Statistics Parameters").
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 一种功能，将`InnoDB` **表**的**索引**统计信息存储在磁盘上，为**查询**提供更好的**计划稳定性**。有关更多信息，请参见[Section 17.8.10.1,
    “Configuring Persistent Optimizer Statistics Parameters”](innodb-persistent-stats.html
    "17.8.10.1 Configuring Persistent Optimizer Statistics Parameters")。
- en: See Also [index](glossary.html#glos_index), [optimizer](glossary.html#glos_optimizer),
    [plan stability](glossary.html#glos_plan_stability), [query](glossary.html#glos_query),
    [table](glossary.html#glos_table).
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[index](glossary.html#glos_index)，[optimizer](glossary.html#glos_optimizer)，[plan
    stability](glossary.html#glos_plan_stability)，[query](glossary.html#glos_query)，[table](glossary.html#glos_table)。
- en: pessimistic
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 悲观
- en: A methodology that sacrifices performance or concurrency in favor of safety.
    It is appropriate if a high proportion of requests or attempts might fail, or
    if the consequences of a failed request are severe. `InnoDB` uses what is known
    as a pessimistic **locking** strategy, to minimize the chance of **deadlocks**.
    At the application level, you might avoid deadlocks by using a pessimistic strategy
    of acquiring all locks needed by a transaction at the very beginning.
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 一种为了安全性而牺牲性能或并发性的方法论。如果高比例的请求或尝试可能失败，或者失败请求的后果严重，则此方法适用。`InnoDB`使用所谓的悲观**锁定**策略，以最小化**死锁**的机会。在应用程序级别，您可以通过在事务开始时获取事务所需的所有锁的悲观策略来避免死锁。
- en: Many built-in database mechanisms use the opposite **optimistic** methodology.
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 许多内置数据库机制使用相反的**乐观**方法论。
- en: See Also [deadlock](glossary.html#glos_deadlock), [locking](glossary.html#glos_locking),
    [optimistic](glossary.html#glos_optimistic).
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[deadlock](glossary.html#glos_deadlock)，[locking](glossary.html#glos_locking)，[optimistic](glossary.html#glos_optimistic)。
- en: phantom
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 幻读
- en: A row that appears in the result set of a query, but not in the result set of
    an earlier query. For example, if a query is run twice within a **transaction**,
    and in the meantime, another transaction commits after inserting a new row or
    updating a row so that it matches the `WHERE` clause of the query.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询结果集中出现的行，但不在先前查询结果集中出现。例如，如果在**事务**中两次运行查询，并且同时，另一个事务在插入新行或更新行以匹配查询的`WHERE`子句后提交。
- en: This occurrence is known as a phantom read. It is harder to guard against than
    a **non-repeatable read**, because locking all the rows from the first query result
    set does not prevent the changes that cause the phantom to appear.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况被称为幻读。比**不可重复读**更难防范，因为锁定第一个查询结果集中的所有行并不能阻止导致幻像出现的更改。
- en: Among different **isolation levels**, phantom reads are prevented by the **serializable
    read** level, and allowed by the **repeatable read**, **consistent read**, and
    **read uncommitted** levels.
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的**隔离级别**中，幻读被**可串行读**级别阻止，而被**可重复读**，**一致读**和**读未提交**级别允许。
- en: See Also [consistent read](glossary.html#glos_consistent_read), [isolation level](glossary.html#glos_isolation_level),
    [non-repeatable read](glossary.html#glos_non_repeatable_read), [READ UNCOMMITTED](glossary.html#glos_read_uncommitted),
    [REPEATABLE READ](glossary.html#glos_repeatable_read), [SERIALIZABLE](glossary.html#glos_serializable),
    [transaction](glossary.html#glos_transaction).
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[consistent read](glossary.html#glos_consistent_read)，[isolation level](glossary.html#glos_isolation_level)，[non-repeatable
    read](glossary.html#glos_non_repeatable_read)，[READ UNCOMMITTED](glossary.html#glos_read_uncommitted)，[REPEATABLE
    READ](glossary.html#glos_repeatable_read)，[SERIALIZABLE](glossary.html#glos_serializable)，[transaction](glossary.html#glos_transaction)。
- en: PHP
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: PHP
- en: A programming language originating with web applications. The code is typically
    embedded as blocks within the source of a web page, with the output substituted
    into the page as it is transmitted by the web server. This is in contrast to applications
    such as CGI scripts that print output in the form of an entire web page. The PHP
    style of coding is used for highly interactive and dynamic web pages. Modern PHP
    programs can also be run as command-line or GUI applications.
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 一种起源于网络应用程序的编程语言。代码通常嵌入在网页源代码中的块中，输出会在通过网络服务器传输时替换到页面中。这与像 CGI 脚本这样打印整个网页形式输出的应用程序形成对比。PHP
    编码风格用于高度交互和动态的网页。现代 PHP 程序也可以作为命令行或 GUI 应用程序运行。
- en: MySQL applications are written using one of the **PHP APIs**. Reusable modules
    can be written in **C** and called from PHP.
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 应用程序使用其中一个**PHP API**编写。可在**C**中编写可重用模块，并从 PHP 中调用。
- en: Another technology for writing server-side web pages with MySQL is **ASP.net**.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**ASP.net**是另一种编写使用MySQL的服务器端网页的技术。
- en: See Also [ASP.net](glossary.html#glos_asp_net), [C](glossary.html#glos_c), [PHP
    API](glossary.html#glos_php_api).
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ASP.net](glossary.html#glos_asp_net)，[C](glossary.html#glos_c)，[PHP API](glossary.html#glos_php_api)。
- en: PHP API
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: PHP API
- en: 'Several **APIs** are available for writing MySQL applications in the **PHP**
    language: the original MySQL API (`Mysql`) the MySQL Improved Extension (`Mysqli`)
    the MySQL Native Driver (`Mysqlnd`) the MySQL functions (`PDO_MYSQL`), and Connector/PHP.
    For details, see [MySQL and PHP](/doc/apis-php/en/).'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个**API**可用于在**PHP**语言中编写MySQL应用程序：原始MySQL API（`Mysql`），MySQL Improved Extension（`Mysqli`），MySQL
    Native Driver（`Mysqlnd`），MySQL函数（`PDO_MYSQL`）和Connector/PHP。有关详细信息，请参见[MySQL和PHP](/doc/apis-php/en/)。
- en: See Also [API](glossary.html#glos_api), [PHP](glossary.html#glos_php).
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[API](glossary.html#glos_api)，[PHP](glossary.html#glos_php)。
- en: physical
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 物理
- en: A type of operation that involves hardware-related aspects such as disk blocks,
    memory pages, files, bits, disk reads, and so on. Typically, physical aspects
    are important during expert-level performance tuning and problem diagnosis. Contrast
    with **logical**.
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 一种涉及硬件相关方面的操作，如磁盘块，内存页，文件，位，磁盘读取等。通常，在专家级性能调整和问题诊断中，物理方面很重要。与**逻辑**相对。
- en: See Also [logical](glossary.html#glos_logical), [physical backup](glossary.html#glos_physical_backup).
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[逻辑](glossary.html#glos_logical)，[物理备份](glossary.html#glos_physical_backup)。
- en: physical backup
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 物理备份
- en: A **backup** that copies the actual data files. For example, the **`mysqlbackup`**
    command of the **MySQL Enterprise Backup** product produces a physical backup,
    because its output contains data files that can be used directly by the `mysqld`
    server, resulting in a faster **restore** operation. Contrast with **logical backup**.
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 复制实际数据文件的**备份**。例如，**MySQL Enterprise Backup**产品的**`mysqlbackup`**命令生成物理备份，因为其输出包含可以直接被`mysqld`服务器使用的数据文件，从而实现更快的**恢复**操作。与**逻辑备份**相对。
- en: See Also [backup](glossary.html#glos_backup), [logical backup](glossary.html#glos_logical_backup),
    [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup), [restore](glossary.html#glos_restore).
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[备份](glossary.html#glos_backup)，[逻辑备份](glossary.html#glos_logical_backup)，[MySQL
    Enterprise Backup](glossary.html#glos_mysql_enterprise_backup)，[恢复](glossary.html#glos_restore)。
- en: PITR
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: PITR
- en: Acronym for **point-in-time recovery**.
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: '**恢复到特定时间点**的缩写。'
- en: See Also [point-in-time recovery](glossary.html#glos_point_in_time_recovery).
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[恢复到特定时间点](glossary.html#glos_point_in_time_recovery)。
- en: plan stability
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 计划稳定性
- en: A property of a **query execution plan**, where the optimizer makes the same
    choices each time for a given **query**, so that performance is consistent and
    predictable.
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 查询执行计划的一个属性，其中优化器每次对于给定的**查询**都做出相同的选择，以便性能保持一致和可预测。
- en: See Also [query](glossary.html#glos_query), [query execution plan](glossary.html#glos_query_execution_plan).
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[查询](glossary.html#glos_query)，[查询执行计划](glossary.html#glos_query_execution_plan)。
- en: point-in-time recovery
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复到特定时间点
- en: The process of restoring a **backup** to recreate the state of the database
    at a specific date and time. Commonly abbreviated “PITR”. Because it is unlikely
    that the specified time corresponds exactly to the time of a backup, this technique
    usually requires a combination of a **physical backup** and a **logical backup**.
    For example, with the **MySQL Enterprise Backup** product, you restore the last
    backup that you took before the specified point in time, then replay changes from
    the **binary log** between the time of the backup and the PITR time.
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 将备份恢复以重新创建数据库在特定日期和时间的状态的过程。通常缩写为“PITR”。由于指定的时间很少与备份时间完全对应，因此这种技术通常需要结合**物理备份**和**逻辑备份**。例如，使用**MySQL
    Enterprise Backup**产品，您可以恢复指定时间点之前的最后一个备份，然后从备份时间和PITR时间之间的**二进制日志**中重放更改。
- en: See Also [backup](glossary.html#glos_backup), [binary log](glossary.html#glos_binary_log),
    [logical backup](glossary.html#glos_logical_backup), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [physical backup](glossary.html#glos_physical_backup).
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[备份](glossary.html#glos_backup)，[二进制日志](glossary.html#glos_binary_log)，[逻辑备份](glossary.html#glos_logical_backup)，[MySQL
    Enterprise Backup](glossary.html#glos_mysql_enterprise_backup)，[物理备份](glossary.html#glos_physical_backup)。
- en: port
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 端口
- en: The number of the TCP/IP socket the database server listens on, used to establish
    a **connection**. Often specified in conjunction with a **host**. Depending on
    your use of network encryption, there might be one port for unencrypted traffic
    and another port for **SSL** connections.
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库服务器监听的 TCP/IP 套接字号码，用于建立**连接**。通常与**主机**一起指定。根据您对网络加密的使用，可能会有一个用于未加密流量的端口，另一个用于**SSL**连接。
- en: See Also [connection](glossary.html#glos_connection), [host](glossary.html#glos_host),
    [SSL](glossary.html#glos_ssl).
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [连接](glossary.html#glos_connection), [主机](glossary.html#glos_host), [SSL](glossary.html#glos_ssl).
- en: prefix
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 前缀
- en: See [index prefix](glossary.html#glos_index_prefix).
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [索引前缀](glossary.html#glos_index_prefix).
- en: prepared backup
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 预备备份
- en: A set of backup files, produced by the **MySQL Enterprise Backup** product,
    after all the stages of applying **binary logs** and **incremental backups** are
    finished. The resulting files are ready to be **restored**. Prior to the apply
    steps, the files are known as a **raw backup**.
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 一组备份文件，由**MySQL Enterprise Backup**产品生成，在应用**二进制日志**和**增量备份**的所有阶段完成后。生成的文件已准备好进行**恢复**。在应用步骤之前，这些文件被称为**原始备份**。
- en: See Also [binary log](glossary.html#glos_binary_log), [hot backup](glossary.html#glos_hot_backup),
    [incremental backup](glossary.html#glos_incremental_backup), [MySQL Enterprise
    Backup](glossary.html#glos_mysql_enterprise_backup), [raw backup](glossary.html#glos_raw_backup),
    [restore](glossary.html#glos_restore).
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [二进制日志](glossary.html#glos_binary_log), [热备份](glossary.html#glos_hot_backup),
    [增量备份](glossary.html#glos_incremental_backup), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [原始备份](glossary.html#glos_raw_backup), [恢复](glossary.html#glos_restore).
- en: prepared statement
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 预编译语句
- en: An SQL statement that is analyzed in advance to determine an efficient execution
    plan. It can be executed multiple times, without the overhead for parsing and
    analysis each time. Different values can be substituted for literals in the `WHERE`
    clause each time, through the use of placeholders. This substitution technique
    improves security, protecting against some kinds of SQL injection attacks. You
    can also reduce the overhead for converting and copying return values to program
    variables.
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 事先分析的 SQL 语句，用于确定高效的执行计划。它可以多次执行，而无需每次都进行解析和分析的开销。可以通过占位符在`WHERE`子句中每次替换不同的文字值。这种替换技术提高了安全性，防止某些类型的
    SQL 注入攻击。还可以减少将返回值转换和复制到程序变量的开销。
- en: Although you can use prepared statements directly through SQL syntax, the various
    **Connectors** have programming interfaces for manipulating prepared statements,
    and these APIs are more efficient than going through SQL.
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以通过 SQL 语法直接使用预编译语句，但各种**连接器**都有用于操作预编译语句的编程接口，这些 API 比通过 SQL 更有效。
- en: See Also [client-side prepared statement](glossary.html#glos_client_side_prepared_statement),
    [connector](glossary.html#glos_connector), [server-side prepared statement](glossary.html#glos_server_side_prepared_statement).
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [客户端预编译语句](glossary.html#glos_client_side_prepared_statement), [连接器](glossary.html#glos_connector),
    [服务器端预编译语句](glossary.html#glos_server_side_prepared_statement).
- en: primary key
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 主键
- en: A set of columns—and by implication, the index based on this set of columns—that
    can uniquely identify every row in a table. As such, it must be a unique index
    that does not contain any `NULL` values.
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 一组列，以及隐含的基于这组列的索引，可以唯一标识表中的每一行。因此，它必须是一个不包含任何`NULL`值的唯一索引。
- en: '`InnoDB` requires that every table has such an index (also called the **clustered
    index** or **cluster index**), and organizes the table storage based on the column
    values of the primary key.'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` 要求每个表都有这样一个索引（也称为**聚簇索引**或**聚簇索引**），并根据主键的列值组织表存储。'
- en: When choosing primary key values, consider using arbitrary values (a **synthetic
    key**) rather than relying on values derived from some other source (a **natural
    key**).
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择主键值时，考虑使用任意值（**合成键**）而不是依赖于从其他来源派生的值（**自然键**）。
- en: See Also [clustered index](glossary.html#glos_clustered_index), [index](glossary.html#glos_index),
    [natural key](glossary.html#glos_natural_key), [synthetic key](glossary.html#glos_synthetic_key).
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [聚簇索引](glossary.html#glos_clustered_index), [索引](glossary.html#glos_index),
    [自然键](glossary.html#glos_natural_key), [合成键](glossary.html#glos_synthetic_key).
- en: principal
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的
- en: The Kerberos term for a named entity, such as a user or server.
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: Kerberos 术语，用于表示命名实体，如用户或服务器。
- en: See Also [service principal name](glossary.html#glos_service_principal_name),
    [user principal name](glossary.html#glos_user_principal_name).
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[服务主体名称](glossary.html#glos_service_principal_name)，[用户主体名称](glossary.html#glos_user_principal_name)。
- en: process
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 进程
- en: An instance of an executing program. The operating system switches between multiple
    running processes, allowing for a certain degree of **concurrency**. On most operating
    systems, processes can contain multiple **threads** of execution that share resources.
    Context-switching between threads is faster than the equivalent switching between
    processes.
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 正在执行的程序实例。操作系统在多个运行中的进程之间切换，允许一定程度的**并发性**。在大多数操作系统上，进程可以包含共享资源的多个执行**线程**。在线程之间进行上下文切换比进程之间的等效切换更快。
- en: See Also [concurrency](glossary.html#glos_concurrency), [thread](glossary.html#glos_thread).
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[并发性](glossary.html#glos_concurrency)，[线程](glossary.html#glos_thread)。
- en: pseudo-record
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 伪记录
- en: An artificial record in an index, used for **locking** key values or ranges
    that do not currently exist.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 索引中的一个人工记录，用于**锁定**当前不存在的键值或范围。
- en: See Also [infimum record](glossary.html#glos_infimum_record), [locking](glossary.html#glos_locking),
    [supremum record](glossary.html#glos_supremum_record).
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[最小记录](glossary.html#glos_infimum_record)，[锁定](glossary.html#glos_locking)，[最大记录](glossary.html#glos_supremum_record)。
- en: Pthreads
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: Pthreads
- en: The POSIX threads standard, which defines an API for threading and locking operations
    on Unix and Linux systems. On Unix and Linux systems, `InnoDB` uses this implementation
    for **mutexes**.
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX线程标准，定义了Unix和Linux系统上的线程和锁定操作的API。在Unix和Linux系统上，`InnoDB`使用此实现来进行**互斥锁**。
- en: See Also [mutex](glossary.html#glos_mutex).
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[互斥锁](glossary.html#glos_mutex)。
- en: purge
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: 清理
- en: A type of garbage collection performed by one or more separate background threads
    (controlled by [`innodb_purge_threads`](innodb-parameters.html#sysvar_innodb_purge_threads))
    that runs on a periodic schedule. Purge parses and processes **undo log** pages
    from the **history list** for the purpose of removing clustered and secondary
    index records that were marked for deletion (by previous [`DELETE`](delete.html
    "15.2.2 DELETE Statement") statements) and are no longer required for **MVCC**
    or **rollback**. Purge frees undo log pages from the history list after processing
    them.
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 一种由一个或多个单独的后台线程（由[`innodb_purge_threads`](innodb-parameters.html#sysvar_innodb_purge_threads)控制）执行的垃圾收集类型，定期按计划运行。清理从**历史列表**中解析和处理**撤销日志**页面，以删除之前标记为删除（通过先前的[`DELETE`](delete.html
    "15.2.2 DELETE Statement")语句）并且不再需要用于**MVCC**或**回滚**的聚集和次要索引记录。清理在处理完撤销日志页面后会从历史列表中释放它们。
- en: See Also [history list](glossary.html#glos_history_list), [MVCC](glossary.html#glos_mvcc),
    [rollback](glossary.html#glos_rollback), [undo log](glossary.html#glos_undo_log).
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[历史列表](glossary.html#glos_history_list)，[MVCC](glossary.html#glos_mvcc)，[回滚](glossary.html#glos_rollback)，[撤销日志](glossary.html#glos_undo_log)。
- en: purge buffering
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 清理缓冲
- en: The technique of storing changes to secondary index pages, resulting from `DELETE`
    operations, in the **change buffer** rather than writing the changes immediately,
    so that the physical writes can be performed to minimize random I/O. (Because
    delete operations are a two-step process, this operation buffers the write that
    normally purges an index record that was previously marked for deletion.) It is
    one of the types of **change buffering**; the others are **insert buffering**
    and **delete buffering**.
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 将由`DELETE`操作导致的次要索引页的更改存储在**更改缓冲区**中，而不是立即写入更改，以便执行物理写入以最小化随机I/O。（因为删除操作是一个两步过程，此操作缓冲了通常清除先前标记为删除的索引记录的写入。）这是**更改缓冲**的一种类型；其他类型包括**插入缓冲**和**删除缓冲**。
- en: See Also [change buffer](glossary.html#glos_change_buffer), [change buffering](glossary.html#glos_change_buffering),
    [delete buffering](glossary.html#glos_delete_buffering), [insert buffer](glossary.html#glos_insert_buffer),
    [insert buffering](glossary.html#glos_insert_buffering).
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[更改缓冲区](glossary.html#glos_change_buffer)，[更改缓冲](glossary.html#glos_change_buffering)，[删除缓冲](glossary.html#glos_delete_buffering)，[插入缓冲区](glossary.html#glos_insert_buffer)，[插入缓冲](glossary.html#glos_insert_buffering)。
- en: purge lag
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 清理延迟
- en: Another name for the `InnoDB` **history list**. Related to the [`innodb_max_purge_lag`](innodb-parameters.html#sysvar_innodb_max_purge_lag)
    configuration option.
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`的**历史列表**的另一个名称。与[`innodb_max_purge_lag`](innodb-parameters.html#sysvar_innodb_max_purge_lag)配置选项相关。'
- en: See Also [history list](glossary.html#glos_history_list), [purge](glossary.html#glos_purge).
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[历史列表](glossary.html#glos_history_list)，[清理](glossary.html#glos_purge)。
- en: purge thread
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 清理线程
- en: A **thread** within the `InnoDB` process that is dedicated to performing the
    periodic **purge** operation. In MySQL 5.6 and higher, multiple purge threads
    are enabled by the [`innodb_purge_threads`](innodb-parameters.html#sysvar_innodb_purge_threads)
    configuration option.
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InnoDB`进程中专门用于执行定期**清除**操作的**线程**。在MySQL 5.6及更高版本中，通过[`innodb_purge_threads`](innodb-parameters.html#sysvar_innodb_purge_threads)配置选项启用了多个清除线程。
- en: See Also [purge](glossary.html#glos_purge), [thread](glossary.html#glos_thread).
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[清除](glossary.html#glos_purge)，[线程](glossary.html#glos_thread)。
- en: Python
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: Python
- en: A programming language used in a broad range of fields, from Unix scripting
    to large-scale applications. Includes runtime typing, built-in high-level data
    types, object-oriented features, and an extensive standard library. Often used
    as a “glue” language between components written in other languages. The MySQL
    **Python API** is the open-source **MySQLdb** module.
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 一种广泛应用于各个领域的编程语言，从Unix脚本到大型应用程序。包括运行时类型、内置高级数据类型、面向对象的特性和广泛的标准库。通常用作在其他语言编写的组件之间的“粘合”语言。MySQL的**Python
    API**是开源的**MySQLdb**模块。
- en: See Also [MySQLdb](glossary.html#glos_mysqldb), [Python API](glossary.html#glos_python_api).
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[MySQLdb](glossary.html#glos_mysqldb)，[Python API](glossary.html#glos_python_api)。
- en: Python API
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: Python API
- en: See Also [API](glossary.html#glos_api), [Python](glossary.html#glos_python).
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[API](glossary.html#glos_api)，[Python](glossary.html#glos_python)。
- en: Q
  id: totrans-1158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Q
- en: query
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 查询
- en: In **SQL**, an operation that reads information from one or more **tables**.
    Depending on the organization of data and the parameters of the query, the lookup
    might be optimized by consulting an **index**. If multiple tables are involved,
    the query is known as a **join**.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 在**SQL**中，一种从一个或多个**表**中读取信息的操作。根据数据的组织方式和查询的参数，查询可能通过查询**索引**来进行优化。如果涉及多个表，则该查询被称为**连接**。
- en: For historical reasons, sometimes discussions of internal processing for statements
    use “query” in a broader sense, including other types of MySQL statements such
    as **DDL** and **DML** statements.
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 基于历史原因，有时关于语句的内部处理的讨论会在更广泛的意义上使用“查询”这个术语，包括其他类型的MySQL语句，如**DDL**和**DML**语句。
- en: See Also [DDL](glossary.html#glos_ddl), [DML](glossary.html#glos_dml), [index](glossary.html#glos_index),
    [join](glossary.html#glos_join), [SQL](glossary.html#glos_sql), [table](glossary.html#glos_table).
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[DDL](glossary.html#glos_ddl)，[DML](glossary.html#glos_dml)，[索引](glossary.html#glos_index)，[连接](glossary.html#glos_join)，[SQL](glossary.html#glos_sql)，[表](glossary.html#glos_table)。
- en: query execution plan
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 查询执行计划
- en: The set of decisions made by the optimizer about how to perform a **query**
    most efficiently, including which **index** or indexes to use, and the order in
    which to **join** tables. **Plan stability** involves the same choices being made
    consistently for a given query.
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 优化器关于如何最有效地执行**查询**的一组决策，包括使用哪个**索引**或索引，以及**连接**表的顺序。**计划稳定性**涉及对给定查询一致做出相同选择。
- en: See Also [index](glossary.html#glos_index), [join](glossary.html#glos_join),
    [plan stability](glossary.html#glos_plan_stability), [query](glossary.html#glos_query).
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[索引](glossary.html#glos_index)，[连接](glossary.html#glos_join)，[计划稳定性](glossary.html#glos_plan_stability)，[查询](glossary.html#glos_query)。
- en: query log
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 查询日志
- en: See [general query log](glossary.html#glos_general_query_log).
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[通用查询日志](glossary.html#glos_general_query_log)。
- en: quiesce
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: 静止
- en: To reduce the amount of database activity, often in preparation for an operation
    such as an [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement"), a
    **backup**, or a **shutdown**. Might or might not involve doing as much **flushing**
    as possible, so that **InnoDB** does not continue doing background I/O.
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少数据库活动量，通常是为了准备操作，如[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")、**备份**或**关闭**。可能涉及尽可能多地进行**刷新**，以便**InnoDB**不会继续进行后台I/O。
- en: In MySQL 5.6 and higher, the syntax `FLUSH TABLES ... FOR EXPORT` writes some
    data to disk for `InnoDB` tables that make it simpler to back up those tables
    by copying the data files.
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 5.6及更高版本中，语法`FLUSH TABLES ... FOR EXPORT`会将一些数据写入磁盘，用于简化通过复制数据文件备份这些`InnoDB`表的过程。
- en: See Also [backup](glossary.html#glos_backup), [flush](glossary.html#glos_flush),
    [InnoDB](glossary.html#glos_innodb), [shutdown](glossary.html#glos_shutdown).
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[备份](glossary.html#glos_backup)，[刷新](glossary.html#glos_flush)，[InnoDB](glossary.html#glos_innodb)，[关闭](glossary.html#glos_shutdown)。
- en: R
  id: totrans-1172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: R
- en: R-tree
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: R树
- en: A tree data structure used for spatial indexing of multi-dimensional data such
    as geographical coordinates, rectangles or polygons.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 用于对多维数据（如地理坐标、矩形或多边形）进行空间索引的树数据结构。
- en: See Also [B-tree](glossary.html#glos_b_tree).
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[B树](glossary.html#glos_b_tree)。
- en: RAID
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: RAID
- en: Acronym for “Redundant Array of Inexpensive Drives”. Spreading I/O operations
    across multiple drives enables greater **concurrency** at the hardware level,
    and improves the efficiency of low-level write operations that otherwise would
    be performed in sequence.
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: “廉价磁盘冗余阵列”的缩写。将 I/O 操作分布在多个驱动器上可以在硬件级别实现更大的**并发性**，并提高低级别写操作的效率，否则这些操作将按顺序执行。
- en: See Also [concurrency](glossary.html#glos_concurrency).
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [并发性](glossary.html#glos_concurrency)。
- en: random dive
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 随机潜水
- en: A technique for quickly estimating the number of different values in a column
    (the column's **cardinality**). `InnoDB` samples pages at random from the index
    and uses that data to estimate the number of different values.
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 一种快速估算列中不同值数量（列的**基数**）的技术。`InnoDB`从索引中随机抽取页面，并使用这些数据来估算不同值的数量。
- en: See Also [cardinality](glossary.html#glos_cardinality).
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [基数](glossary.html#glos_cardinality)。
- en: raw backup
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 原始备份
- en: The initial set of backup files produced by the **MySQL Enterprise Backup**
    product, before the changes reflected in the **binary log** and any **incremental
    backups** are applied. At this stage, the files are not ready to **restore**.
    After these changes are applied, the files are known as a **prepared backup**.
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: '**MySQL Enterprise Backup** 产品生成的初始备份文件集，在应用**二进制日志**和任何**增量备份**所反映的更改之前。在此阶段，文件尚未准备好**恢复**。应用这些更改后，文件被称为**准备备份**。'
- en: See Also [binary log](glossary.html#glos_binary_log), [hot backup](glossary.html#glos_hot_backup),
    [ibbackup_logfile](glossary.html#glos_ibbackup_logfile), [incremental backup](glossary.html#glos_incremental_backup),
    [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup), [prepared
    backup](glossary.html#glos_prepared_backup), [restore](glossary.html#glos_restore).
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [二进制日志](glossary.html#glos_binary_log)，[热备份](glossary.html#glos_hot_backup)，[ibbackup_logfile](glossary.html#glos_ibbackup_logfile)，[增量备份](glossary.html#glos_incremental_backup)，[MySQL
    Enterprise Backup](glossary.html#glos_mysql_enterprise_backup)，[准备备份](glossary.html#glos_prepared_backup)，[恢复](glossary.html#glos_restore)。
- en: READ COMMITTED
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 读已提交
- en: An **isolation level** that uses a **locking** strategy that relaxes some of
    the protection between **transactions**, in the interest of performance. Transactions
    cannot see uncommitted data from other transactions, but they can see data that
    is committed by another transaction after the current transaction started. Thus,
    a transaction never sees any bad data, but the data that it does see may depend
    to some extent on the timing of other transactions.
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 一种使用**锁定**策略的**隔离级别**，在性能方面放宽了一些**事务**之间的保护。事务无法看到其他事务未提交的数据，但可以看到当前事务开始后另一个事务提交的数据。因此，事务永远不会看到任何错误的数据，但它所看到的数据可能在一定程度上取决于其他事务的时间安排。
- en: When a transaction with this isolation level performs `UPDATE ... WHERE` or
    `DELETE ... WHERE` operations, other transactions might have to wait. The transaction
    can perform `SELECT ... FOR UPDATE`, and `LOCK IN SHARE MODE` operations without
    making other transactions wait.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 当具有此隔离级别的事务执行`UPDATE ... WHERE`或`DELETE ... WHERE`操作时，其他事务可能需要等待。事务可以执行`SELECT
    ... FOR UPDATE`和`LOCK IN SHARE MODE`操作而不会让其他事务等待。
- en: '`SELECT ... FOR SHARE` replaces `SELECT ... LOCK IN SHARE MODE` in MySQL 8.0.1,
    but `LOCK IN SHARE MODE` remains available for backward compatibility.'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: '`SELECT ... FOR SHARE` 在 MySQL 8.0.1 中取代了 `SELECT ... LOCK IN SHARE MODE`，但为了向后兼容性，`LOCK
    IN SHARE MODE` 仍然可用。'
- en: See Also [ACID](glossary.html#glos_acid), [isolation level](glossary.html#glos_isolation_level),
    [locking](glossary.html#glos_locking), [REPEATABLE READ](glossary.html#glos_repeatable_read),
    [SERIALIZABLE](glossary.html#glos_serializable), [transaction](glossary.html#glos_transaction).
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [ACID](glossary.html#glos_acid)，[隔离级别](glossary.html#glos_isolation_level)，[锁定](glossary.html#glos_locking)，[可重复读](glossary.html#glos_repeatable_read)，[可串行化](glossary.html#glos_serializable)，[事务](glossary.html#glos_transaction)。
- en: read phenomena
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 读现象
- en: Phenomena such as **dirty reads**, **non-repeatable reads**, and **phantom**
    reads which can occur when a transaction reads data that another transaction has
    modified.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个事务读取另一个事务已修改的数据时可能发生的**脏读**、**不可重复读**和**幻读**等现象。
- en: See Also [dirty read](glossary.html#glos_dirty_read), [non-repeatable read](glossary.html#glos_non_repeatable_read),
    [phantom](glossary.html#glos_phantom).
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [脏读](glossary.html#glos_dirty_read)，[不可重复读](glossary.html#glos_non_repeatable_read)，[幻读](glossary.html#glos_phantom)。
- en: READ UNCOMMITTED
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 读未提交
- en: The **isolation level** that provides the least amount of protection between
    transactions. Queries employ a **locking** strategy that allows them to proceed
    in situations where they would normally wait for another transaction. However,
    this extra performance comes at the cost of less reliable results, including data
    that has been changed by other transactions and not committed yet (known as **dirty
    read**). Use this isolation level with great caution, and be aware that the results
    might not be consistent or reproducible, depending on what other transactions
    are doing at the same time. Typically, transactions with this isolation level
    only do queries, not insert, update, or delete operations.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 提供事务之间保护最少的**隔离级别**。查询采用一种**锁定**策略，允许它们在通常需要等待另一个事务的情况下继续进行。然而，这种额外的性能是以更少可靠的结果为代价的，包括被其他事务更改但尚未提交的数据（称为**脏读**）。请谨慎使用此隔离级别，并注意结果可能不一致或无法重现，这取决于其他事务在同一时间正在做什么。通常，具有此隔离级别的事务只执行查询，不执行插入、更新或删除操作。
- en: See Also [ACID](glossary.html#glos_acid), [dirty read](glossary.html#glos_dirty_read),
    [isolation level](glossary.html#glos_isolation_level), [locking](glossary.html#glos_locking),
    [transaction](glossary.html#glos_transaction).
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [ACID](glossary.html#glos_acid)、[脏读](glossary.html#glos_dirty_read)、[隔离级别](glossary.html#glos_isolation_level)、[锁定](glossary.html#glos_locking)、[事务](glossary.html#glos_transaction)。
- en: read view
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 读视图
- en: An internal snapshot used by the **MVCC** mechanism of `InnoDB`. Certain **transactions**,
    depending on their **isolation level**, see the data values as they were at the
    time the transaction (or in some cases, the statement) started. Isolation levels
    that use a read view are **REPEATABLE READ**, **READ COMMITTED**, and **READ UNCOMMITTED**.
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: '**MVCC** 机制在 `InnoDB` 中使用的内部快照。根据其**隔离级别**，某些**事务**会将数据值视为事务（或在某些情况下，语句）开始时的数值。使用读视图的隔离级别包括**可重复读**、**读已提交**和**读未提交**。'
- en: See Also [isolation level](glossary.html#glos_isolation_level), [MVCC](glossary.html#glos_mvcc),
    [READ COMMITTED](glossary.html#glos_read_committed), [READ UNCOMMITTED](glossary.html#glos_read_uncommitted),
    [REPEATABLE READ](glossary.html#glos_repeatable_read), [transaction](glossary.html#glos_transaction).
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [隔离级别](glossary.html#glos_isolation_level)、[MVCC](glossary.html#glos_mvcc)、[读已提交](glossary.html#glos_read_committed)、[读未提交](glossary.html#glos_read_uncommitted)、[可重复读](glossary.html#glos_repeatable_read)、[事务](glossary.html#glos_transaction)。
- en: read-ahead
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 预读
- en: A type of I/O request that prefetches a group of **pages** (an entire **extent**)
    into the **buffer pool** asynchronously, in case these pages are needed soon.
    The linear read-ahead technique prefetches all the pages of one extent based on
    access patterns for pages in the preceding extent. The random read-ahead technique
    prefetches all the pages for an extent once a certain number of pages from the
    same extent are in the buffer pool. Random read-ahead is not part of MySQL 5.5,
    but is re-introduced in MySQL 5.6 under the control of the [`innodb_random_read_ahead`](innodb-parameters.html#sysvar_innodb_random_read_ahead)
    configuration option.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 一种 I/O 请求类型，异步地将一组**页**（整个**区段**）预取到**缓冲池**中，以防这些页很快会被使用。线性预读技术根据前一个区段中页的访问模式预取一个区段的所有页。随机预读技术在缓冲池中有来自同一区段的一定数量的页时，预取该区段的所有页。随机预读不是
    MySQL 5.5 的一部分，但在 MySQL 5.6 中通过 [`innodb_random_read_ahead`](innodb-parameters.html#sysvar_innodb_random_read_ahead)
    配置选项重新引入。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [extent](glossary.html#glos_extent),
    [page](glossary.html#glos_page).
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [缓冲池](glossary.html#glos_buffer_pool)、[区段](glossary.html#glos_extent)、[页](glossary.html#glos_page)。
- en: read-only transaction
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 只读事务
- en: A type of **transaction** that can be optimized for `InnoDB` tables by eliminating
    some of the bookkeeping involved with creating a **read view** for each transaction.
    Can only perform **non-locking read** queries. It can be started explicitly with
    the syntax [`START TRANSACTION READ ONLY`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements"), or automatically under certain conditions.
    See [Section 10.5.3, “Optimizing InnoDB Read-Only Transactions”](innodb-performance-ro-txn.html
    "10.5.3 Optimizing InnoDB Read-Only Transactions") for details.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可以通过消除为每个事务创建**读视图**所涉及的一些簿记来优化`InnoDB`表的**事务**类型。只能执行**非锁定读**查询。可以使用语法[`START
    TRANSACTION READ ONLY`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK
    Statements") 明确启动，或在某些条件下自动启动。有关详细信息，请参见[Section 10.5.3, “Optimizing InnoDB Read-Only
    Transactions”](innodb-performance-ro-txn.html "10.5.3 Optimizing InnoDB Read-Only
    Transactions")。
- en: See Also [non-locking read](glossary.html#glos_non_locking_read), [read view](glossary.html#glos_read_view),
    [transaction](glossary.html#glos_transaction).
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[非锁定读取](glossary.html#glos_non_locking_read)，[读视图](glossary.html#glos_read_view)，[事务](glossary.html#glos_transaction)。
- en: record lock
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 记录锁
- en: A [lock](glossary.html#glos_lock "lock") on an index record. For example, `SELECT
    c1 FROM t WHERE c1 = 10 FOR UPDATE;` prevents any other transaction from inserting,
    updating, or deleting rows where the value of `t.c1` is 10\. Contrast with **gap
    lock** and **next-key lock**.
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 对索引记录的[锁](glossary.html#glos_lock "锁")。例如，`SELECT c1 FROM t WHERE c1 = 10 FOR
    UPDATE;`阻止任何其他事务插入、更新或删除`c1`值为10的行。与**间隙锁**和**下一个键锁**形成对比。
- en: See Also [gap lock](glossary.html#glos_gap_lock), [lock](glossary.html#glos_lock),
    [next-key lock](glossary.html#glos_next_key_lock).
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[间隙锁](glossary.html#glos_gap_lock)，[锁](glossary.html#glos_lock)，[下一个键锁](glossary.html#glos_next_key_lock)。
- en: redo
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 重做
- en: The data, in units of records, recorded in the **redo log** when [DML](glossary.html#glos_dml
    "DML") statements make changes to `InnoDB` tables. It is used during **crash recovery**
    to correct data written by incomplete **transactions**. The ever-increasing **LSN**
    value represents the cumulative amount of redo data that has passed through the
    redo log.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 当[DML](glossary.html#glos_dml "DML")语句对`InnoDB`表进行更改时，在**重做日志**中记录的以记录为单位的数据。在**崩溃恢复**期间用于纠正由不完整**事务**写入的数据。不断增加的**LSN**值表示通过重做日志传递的重做数据的累积量。
- en: See Also [crash recovery](glossary.html#glos_crash_recovery), [DML](glossary.html#glos_dml),
    [LSN](glossary.html#glos_lsn), [redo log](glossary.html#glos_redo_log), [transaction](glossary.html#glos_transaction).
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[崩溃恢复](glossary.html#glos_crash_recovery)，[DML](glossary.html#glos_dml)，[LSN](glossary.html#glos_lsn)，[重做日志](glossary.html#glos_redo_log)，[事务](glossary.html#glos_transaction)。
- en: redo log
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 重做日志
- en: A disk-based data structure used during **crash recovery**, to correct data
    written by incomplete **transactions**. During normal operation, it encodes requests
    to change `InnoDB` table data, which result from SQL statements or low-level API
    calls. Modifications that did not finish updating the **data files** before an
    unexpected **shutdown** are replayed automatically.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 在**崩溃恢复**期间使用的基于磁盘的数据结构，用于纠正由不完整**事务**写入的数据。在正常操作期间，它对请求进行编码，以更改`InnoDB`表数据，这些请求来自SQL语句或低级API调用。在意外**关闭**之前未完成更新**数据文件**的修改将自动重放。
- en: The redo log is physically represented on disk as a set of redo log files. Redo
    log data is encoded in terms of records affected; this data is collectively referred
    to as **redo**. The passage of data through the redo log is represented by an
    ever-increasing **LSN** value.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 重做日志在磁盘上以一组重做日志文件的形式物理表示。重做日志数据以受影响的记录为编码单位；这些数据总称为**重做**。数据通过重做日志的传递由一个不断增加的**LSN**值表示。
- en: For more information, see [Section 17.6.5, “Redo Log”](innodb-redo-log.html
    "17.6.5 Redo Log")
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[第17.6.5节，“重做日志”](innodb-redo-log.html "17.6.5 重做日志")
- en: See Also [crash recovery](glossary.html#glos_crash_recovery), [data files](glossary.html#glos_data_files),
    [ib_logfile](glossary.html#glos_ib_logfile), [log buffer](glossary.html#glos_log_buffer),
    [LSN](glossary.html#glos_lsn), [redo](glossary.html#glos_redo), [shutdown](glossary.html#glos_shutdown),
    [transaction](glossary.html#glos_transaction).
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[崩溃恢复](glossary.html#glos_crash_recovery)，[数据文件](glossary.html#glos_data_files)，[ib_logfile](glossary.html#glos_ib_logfile)，[日志缓冲区](glossary.html#glos_log_buffer)，[LSN](glossary.html#glos_lsn)，[重做](glossary.html#glos_redo)，[关闭](glossary.html#glos_shutdown)，[事务](glossary.html#glos_transaction)。
- en: redo log archiving
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 重做日志归档
- en: An `InnoDB` feature that, when enabled, sequentially writes redo log records
    to an archive file to avoid potential loss of data than can occur when a backup
    utility fails to keep pace with redo log generation while a backup operation is
    in progress. For more information, see [Redo Log Archiving](innodb-redo-log.html#innodb-redo-log-archiving
    "Redo Log Archiving").
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 一种`InnoDB`功能，当启用时，将重做日志记录顺序写入归档文件，以避免备份实用程序在备份操作进行时未能跟上重做日志生成而导致数据丢失的情况。有关更多信息，请参见[重做日志归档](innodb-redo-log.html#innodb-redo-log-archiving
    "重做日志归档")。
- en: See Also [redo log](glossary.html#glos_redo_log).
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[重做日志](glossary.html#glos_redo_log)。
- en: redundant row format
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 冗余行格式
- en: The oldest `InnoDB` **row format**. Prior to MySQL 5.0.3, it was the only row
    format available in `InnoDB`. From MySQL 5.0.3 to MySQL 5.7.8, the default row
    format is **COMPACT**. As of MySQL 5.7.9, the default row format is defined by
    the [`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format)
    configuration option, which has a default setting of **DYNAMIC**. You can still
    specify the **REDUNDANT** row format for compatibility with older `InnoDB` tables.
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 最古老的`InnoDB` **行格式**。在 MySQL 5.0.3 之前，它是`InnoDB`中唯一可用的行格式。从 MySQL 5.0.3 到 MySQL
    5.7.8，默认行格式为**COMPACT**。从 MySQL 5.7.9 开始，默认行格式由[`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format)配置选项定义，其默认设置为**DYNAMIC**。您仍然可以为与旧`InnoDB`表兼容性而指定**REDUNDANT**行格式。
- en: For more information, see [Section 17.10, “InnoDB Row Formats”](innodb-row-format.html
    "17.10 InnoDB Row Formats").
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[第17.10节，“InnoDB行格式”](innodb-row-format.html "17.10 InnoDB Row Formats")。
- en: See Also [compact row format](glossary.html#glos_compact_row_format), [dynamic
    row format](glossary.html#glos_dynamic_row_format), [row format](glossary.html#glos_row_format).
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[紧凑行格式](glossary.html#glos_compact_row_format)，[动态行格式](glossary.html#glos_dynamic_row_format)，[行格式](glossary.html#glos_row_format)。
- en: referential integrity
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 参照完整性
- en: The technique of maintaining data always in a consistent format, part of the
    **ACID** philosophy. In particular, data in different tables is kept consistent
    through the use of **foreign key constraints**, which can prevent changes from
    happening or automatically propagate those changes to all related tables. Related
    mechanisms include the **unique constraint**, which prevents duplicate values
    from being inserted by mistake, and the **NOT NULL constraint**, which prevents
    blank values from being inserted by mistake.
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 保持数据始终以一致格式的技术，是**ACID**哲学的一部分。特别是，通过**外键约束**，不同表中的数据保持一致，可以防止更改发生或自动将这些更改传播到所有相关表。相关机制包括**唯一约束**，可以防止错误地插入重复值，以及**NOT
    NULL约束**，可以防止错误地插入空值。
- en: See Also [ACID](glossary.html#glos_acid), [FOREIGN KEY constraint](glossary.html#glos_foreign_key_constraint),
    [NOT NULL constraint](glossary.html#glos_not_null_constraint), [unique constraint](glossary.html#glos_unique_constraint).
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[ACID](glossary.html#glos_acid)，[FOREIGN KEY约束](glossary.html#glos_foreign_key_constraint)，[NOT
    NULL约束](glossary.html#glos_not_null_constraint)，[唯一约束](glossary.html#glos_unique_constraint)。
- en: relational
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 关系
- en: An important aspect of modern database systems. The database server encodes
    and enforces relationships such as one-to-one, one-to-many, many-to-one, and uniqueness.
    For example, a person might have zero, one, or many phone numbers in an address
    database; a single phone number might be associated with several family members.
    In a financial database, a person might be required to have exactly one taxpayer
    ID, and any taxpayer ID could only be associated with one person.
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 现代数据库系统的一个重要方面。数据库服务器编码并强制执行诸如一对一、一对多、多对一和唯一性等关系。例如，在地址数据库中，一个人可能有零个、一个或多个电话号码；一个电话号码可能与几个家庭成员相关联。在财务数据库中，一个人可能需要有一个确切的纳税人ID，任何纳税人ID只能与一个人相关联。
- en: The database server can use these relationships to prevent bad data from being
    inserted, and to find efficient ways to look up information. For example, if a
    value is declared to be unique, the server can stop searching as soon as the first
    match is found, and it can reject attempts to insert a second copy of the same
    value.
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库服务器可以利用这些关系来防止插入不良数据，并找到查找信息的有效方法。例如，如果一个值被声明为唯一，服务器可以在找到第一个匹配项后停止搜索，并拒绝尝试插入第二个相同值的副本。
- en: At the database level, these relationships are expressed through SQL features
    such as **columns** within a table, unique and `NOT NULL` **constraints**, **foreign
    keys**, and different kinds of join operations. Complex relationships typically
    involve data split between more than one table. Often, the data is **normalized**,
    so that duplicate values in one-to-many relationships are stored only once.
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库级别，这些关系通过SQL功能表达，例如表中的**列**，唯一和`NOT NULL` **约束**，**外键**，以及不同类型的连接操作。复杂的关系通常涉及数据分割到多个表之间。通常，数据被**规范化**，以便一对多关系中的重复值仅存储一次。
- en: In a mathematical context, the relations within a database are derived from
    set theory. For example, the `OR` and `AND` operators of a `WHERE` clause represent
    the notions of union and intersection.
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学上下文中，数据库内的关系源自集合论。例如，`WHERE`子句的`OR`和`AND`运算符代表并集和交集的概念。
- en: See Also [ACID](glossary.html#glos_acid), [column](glossary.html#glos_column),
    [constraint](glossary.html#glos_constraint), [foreign key](glossary.html#glos_foreign_key),
    [normalized](glossary.html#glos_normalized).
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [ACID](glossary.html#glos_acid), [列](glossary.html#glos_column), [约束](glossary.html#glos_constraint),
    [外键](glossary.html#glos_foreign_key), [规范化](glossary.html#glos_normalized)。
- en: relevance
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 相关性
- en: In the **full-text search** feature, a number signifying the similarity between
    the search string and the data in the **FULLTEXT index**. For example, when you
    search for a single word, that word is typically more relevant for a row where
    it occurs several times in the text than a row where it appears only once.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 在**全文搜索**功能中，表示搜索字符串与**全文索引**中数据之间相似性的数字。例如，当您搜索单个词时，该词在文本中出现多次的行通常比仅出现一次的行更相关。
- en: See Also [full-text search](glossary.html#glos_full_text_search), [FULLTEXT
    index](glossary.html#glos_fulltext_index).
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [全文搜索](glossary.html#glos_full_text_search), [全文索引](glossary.html#glos_fulltext_index)。
- en: REPEATABLE READ
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 可重复读
- en: The default **isolation level** for `InnoDB`. It prevents any rows that are
    queried from being changed by other **transactions**, thus blocking **non-repeatable
    reads** but not **phantom** reads. It uses a moderately strict **locking** strategy
    so that all queries within a transaction see data from the same snapshot, that
    is, the data as it was at the time the transaction started.
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` 的默认**隔离级别**。它阻止其他**事务**更改被查询的任何行，从而阻止**不可重复读**但不阻止**幻读**。它使用一种适度严格的**锁定**策略，以便事务中的所有查询看到来自同一快照的数据，即事务启动时的数据。'
- en: When a transaction with this isolation level performs `UPDATE ... WHERE`, `DELETE
    ... WHERE`, `SELECT ... FOR UPDATE`, and `LOCK IN SHARE MODE` operations, other
    transactions might have to wait.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 当具有此隔离级别的事务执行 `UPDATE ... WHERE`、`DELETE ... WHERE`、`SELECT ... FOR UPDATE`
    和 `LOCK IN SHARE MODE` 操作时，其他事务可能需要等待。
- en: '`SELECT ... FOR SHARE` replaces `SELECT ... LOCK IN SHARE MODE` in MySQL 8.0.1,
    but `LOCK IN SHARE MODE` remains available for backward compatibility.'
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: '`SELECT ... FOR SHARE` 在 MySQL 8.0.1 中替换了 `SELECT ... LOCK IN SHARE MODE`，但为了向后兼容性，`LOCK
    IN SHARE MODE` 仍然可用。'
- en: See Also [ACID](glossary.html#glos_acid), [consistent read](glossary.html#glos_consistent_read),
    [isolation level](glossary.html#glos_isolation_level), [locking](glossary.html#glos_locking),
    [phantom](glossary.html#glos_phantom), [transaction](glossary.html#glos_transaction).
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [ACID](glossary.html#glos_acid), [consistent read](glossary.html#glos_consistent_read),
    [isolation level](glossary.html#glos_isolation_level), [locking](glossary.html#glos_locking),
    [phantom](glossary.html#glos_phantom), [transaction](glossary.html#glos_transaction)。
- en: repertoire
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 复本
- en: Repertoire is a term applied to character sets. A character set repertoire is
    the collection of characters in the set. See [Section 12.2.1, “Character Set Repertoire”](charset-repertoire.html
    "12.2.1 Character Set Repertoire").
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 复本是应用于字符集的术语。字符集复本是集合中的字符。参见 [第 12.2.1 节，“字符集复本”](charset-repertoire.html "12.2.1 Character
    Set Repertoire")。
- en: replica
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 复制品
- en: A database **server** machine in a **replication** topology that receives changes
    from another server (the **source**) and applies those same changes. Thus it maintains
    the same contents as the source, although it might lag somewhat behind.
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 复制拓扑结构中的数据库**服务器**机器，接收另一台服务器（**源**）的更改并应用相同的更改。因此，它保持与源相同的内容，尽管可能稍有滞后。
- en: In MySQL, replicas are commonly used in disaster recovery, to take the place
    of a source that fails. They are also commonly used for testing software upgrades
    and new settings, to ensure that database configuration changes do not cause problems
    with performance or reliability.
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 中，复制品通常用于灾难恢复，以取代失败的源。它们也常用于测试软件升级和新设置，以确保数据库配置更改不会影响性能或可靠性。
- en: Replicas typically have high workloads, because they process all the **DML**
    (write) operations relayed from the source, as well as user queries. To ensure
    that replicas can apply changes from the source fast enough, they frequently have
    fast I/O devices and sufficient CPU and memory to run multiple database instances
    on the same server. For example, the source might use hard drive storage while
    the replicas use **SSD**s.
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: 复制品通常具有高工作负载，因为它们处理从源中中继的所有**DML**（写入）操作，以及用户查询。为了确保复制品能够足够快地应用源的更改，它们通常具有快速的I/O设备以及足够的CPU和内存在同一台服务器上运行多个数据库实例。例如，源可能使用硬盘存储，而复制品使用**SSD**。
- en: See Also [DML](glossary.html#glos_dml), [replication](glossary.html#glos_replication),
    [server](glossary.html#glos_server), [source](glossary.html#glos_source), [SSD](glossary.html#glos_ssd).
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[DML](glossary.html#glos_dml)，[复制](glossary.html#glos_replication)，[服务器](glossary.html#glos_server)，[源](glossary.html#glos_source)，[SSD](glossary.html#glos_ssd)。
- en: replication
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 复制
- en: The practice of sending changes from a **source**, to one or more **replicas**,
    so that all databases have the same data. This technique has a wide range of uses,
    such as load-balancing for better scalability, disaster recovery, and testing
    software upgrades and configuration changes. The changes can be sent between the
    databases by methods called **row-based replication** and **statement-based replication**.
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 将更改从**源**发送到一个或多个**副本**的实践，以便所有数据库具有相同的数据。这种技术具有广泛的用途，例如用于更好的可伸缩性的负载平衡，灾难恢复以及测试软件升级和配置更改。更改可以通过称为**基于行的复制**和**基于语句的复制**的方法在数据库之间发送。
- en: See Also [replica](glossary.html#glos_replica), [row-based replication](glossary.html#glos_row_based_replication),
    [source](glossary.html#glos_source), [statement-based replication](glossary.html#glos_statement_based_replication).
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[复制](glossary.html#glos_replica)，[基于行的复制](glossary.html#glos_row_based_replication)，[源](glossary.html#glos_source)，[基于语句的复制](glossary.html#glos_statement_based_replication)。
- en: restore
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复
- en: The process of putting a set of backup files from the **MySQL Enterprise Backup**
    product in place for use by MySQL. This operation can be performed to fix a corrupted
    database, to return to some earlier point in time, or (in a **replication** context)
    to set up a new **replica**. In the **MySQL Enterprise Backup** product, this
    operation is performed by the `copy-back` option of the `mysqlbackup` command.
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 将**MySQL Enterprise Backup**产品的一组备份文件放置到MySQL中供使用的过程。此操作可用于修复损坏的数据库，返回到较早的时间点，或（在**复制**上下文中）设置新的**副本**。在**MySQL
    Enterprise Backup**产品中，此操作由`mysqlbackup`命令的`copy-back`选项执行。
- en: See Also [hot backup](glossary.html#glos_hot_backup), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [mysqlbackup command](glossary.html#glos_mysqlbackup_command), [prepared backup](glossary.html#glos_prepared_backup),
    [replica](glossary.html#glos_replica), [replication](glossary.html#glos_replication).
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[热备份](glossary.html#glos_hot_backup)，[MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup)，[mysqlbackup命令](glossary.html#glos_mysqlbackup_command)，[准备备份](glossary.html#glos_prepared_backup)，[副本](glossary.html#glos_replica)，[复制](glossary.html#glos_replication)。
- en: rollback
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚
- en: A **SQL** statement that ends a **transaction**, undoing any changes made by
    the transaction. It is the opposite of **commit**, which makes permanent any changes
    made in the transaction.
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 结束**事务**的**SQL**语句，撤消事务所做的任何更改。它是**提交**的相反，后者使事务中所做的任何更改永久化。
- en: By default, MySQL uses the **autocommit** setting, which automatically issues
    a commit following each SQL statement. You must change this setting before you
    can use the rollback technique.
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，MySQL使用**自动提交**设置，每个SQL语句后自动发出一个提交。您必须在使用回滚技术之前更改此设置。
- en: See Also [ACID](glossary.html#glos_acid), [autocommit](glossary.html#glos_autocommit),
    [commit](glossary.html#glos_commit), [SQL](glossary.html#glos_sql), [transaction](glossary.html#glos_transaction).
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ACID](glossary.html#glos_acid)，[自动提交](glossary.html#glos_autocommit)，[提交](glossary.html#glos_commit)，[SQL](glossary.html#glos_sql)，[事务](glossary.html#glos_transaction)。
- en: rollback segment
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚段
- en: The storage area containing the **undo logs**. Rollback segments have traditionally
    resided in the **system tablespace**. As of MySQL 5.6, rollback segments can reside
    in **undo tablespaces**. As of MySQL 5.7, rollback segments are also allocated
    to the *global temporary tablespace*.
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 包含**撤销日志**的存储区域。回滚段传统上驻留在**系统表空间**中。从MySQL 5.6开始，回滚段可以驻留在**撤销表空间**中。从MySQL 5.7开始，回滚段也分配给*全局临时表空间*。
- en: See Also [global temporary tablespace](glossary.html#glos_global_temporary_tablespace),
    [system tablespace](glossary.html#glos_system_tablespace), [undo log](glossary.html#glos_undo_log),
    [undo tablespace](glossary.html#glos_undo_tablespace).
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[全局临时表空间](glossary.html#glos_global_temporary_tablespace)，[系统表空间](glossary.html#glos_system_tablespace)，[撤销日志](glossary.html#glos_undo_log)，[撤销表空间](glossary.html#glos_undo_tablespace)。
- en: row
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 行
- en: The logical data structure defined by a set of **columns**. A set of rows makes
    up a **table**. Within `InnoDB` **data files**, each **page** can contain one
    or more rows.
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 由一组**列**定义的逻辑数据结构。一组行组成一个**表**。在`InnoDB`**数据文件**中，每个**页**可以包含一个或多个行。
- en: Although `InnoDB` uses the term **row format** for consistency with MySQL syntax,
    the row format is a property of each table and applies to all rows in that table.
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`InnoDB`使用**行格式**一词以保持与MySQL语法的一致性，但行格式是每个表的属性，并适用于该表中的所有行。
- en: See Also [column](glossary.html#glos_column), [data files](glossary.html#glos_data_files),
    [page](glossary.html#glos_page), [row format](glossary.html#glos_row_format),
    [table](glossary.html#glos_table).
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [列](glossary.html#glos_column), [数据文件](glossary.html#glos_data_files), [页](glossary.html#glos_page),
    [行格式](glossary.html#glos_row_format), [表](glossary.html#glos_table)。
- en: row format
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 行格式
- en: The disk storage format for **rows** of an `InnoDB` **table**. As `InnoDB` gains
    new capabilities such as **compression**, new row formats are introduced to support
    the resulting improvements in storage efficiency and performance.
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: '**InnoDB**表的**行**的磁盘存储格式。随着`InnoDB`获得新的功能，如**压缩**，新的行格式被引入以支持由此带来的存储效率和性能的改进。'
- en: The row format of an `InnoDB` table is specified by the `ROW_FORMAT` option
    or by the [`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format)
    configuration option (introduced in MySQL 5.7.9). Row formats include `REDUNDANT`,
    `COMPACT`, `COMPRESSED`, and `DYNAMIC`. To view the row format of an `InnoDB`
    table, issue the [`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW
    TABLE STATUS Statement") statement or query `InnoDB` table metadata in the [`INFORMATION_SCHEMA`](information-schema.html
    "Chapter 28 INFORMATION_SCHEMA Tables").
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`表的行格式由`ROW_FORMAT`选项或[`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format)配置选项（在MySQL
    5.7.9中引入）指定。行格式包括`REDUNDANT`、`COMPACT`、`COMPRESSED`和`DYNAMIC`。要查看`InnoDB`表的行格式，请发出[`SHOW
    TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW TABLE STATUS Statement")语句或查询[`INFORMATION_SCHEMA`](information-schema.html
    "Chapter 28 INFORMATION_SCHEMA Tables")中的`InnoDB`表元数据。'
- en: See Also [compact row format](glossary.html#glos_compact_row_format), [compressed
    row format](glossary.html#glos_compressed_row_format), [compression](glossary.html#glos_compression),
    [dynamic row format](glossary.html#glos_dynamic_row_format), [redundant row format](glossary.html#glos_redundant_row_format),
    [row](glossary.html#glos_row), [table](glossary.html#glos_table).
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [紧凑行格式](glossary.html#glos_compact_row_format), [压缩行格式](glossary.html#glos_compressed_row_format),
    [压缩](glossary.html#glos_compression), [动态行格式](glossary.html#glos_dynamic_row_format),
    [冗余行格式](glossary.html#glos_redundant_row_format), [行](glossary.html#glos_row),
    [表](glossary.html#glos_table)。
- en: row lock
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: 行锁
- en: A **lock** that prevents a row from being accessed in an incompatible way by
    another **transaction**. Other rows in the same table can be freely written to
    by other transactions. This is the type of **locking** done by **DML** operations
    on **InnoDB** tables.
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**锁**，防止另一个**事务**以不兼容的方式访问行。同一表中的其他行可以被其他事务自由写入。这是在**InnoDB**表上进行**DML**操作时执行的**锁定**类型。
- en: Contrast with **table locks** used by [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine"), or during **DDL** operations on `InnoDB` tables
    that cannot be done with **online DDL**; those locks block concurrent access to
    the table.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine")使用的**表锁**相对应，或在无法使用**在线
    DDL**进行**DDL**操作的`InnoDB`表上使用的锁；这些锁会阻止对表的并发访问。
- en: See Also [DDL](glossary.html#glos_ddl), [DML](glossary.html#glos_dml), [InnoDB](glossary.html#glos_innodb),
    [lock](glossary.html#glos_lock), [locking](glossary.html#glos_locking), [online
    DDL](glossary.html#glos_online_ddl), [table lock](glossary.html#glos_table_lock),
    [transaction](glossary.html#glos_transaction).
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [DDL](glossary.html#glos_ddl), [DML](glossary.html#glos_dml), [InnoDB](glossary.html#glos_innodb),
    [lock](glossary.html#glos_lock), [locking](glossary.html#glos_locking), [online
    DDL](glossary.html#glos_online_ddl), [table lock](glossary.html#glos_table_lock),
    [transaction](glossary.html#glos_transaction)。
- en: row-based replication
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 基于行的复制
- en: A form of **replication** where events are propagated from the **source** specifying
    how to change individual rows on the **replica**. It is safe to use for all settings
    of the [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    option.
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**复制**形式，其中事件从**源**传播，指定如何在**副本**上更改单个行。对于[`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)选项的所有设置都可以安全使用。
- en: See Also [auto-increment locking](glossary.html#glos_auto_increment_locking),
    [innodb_autoinc_lock_mode](glossary.html#glos_innodb_autoinc_lock_mode), [replica](glossary.html#glos_replica),
    [replication](glossary.html#glos_replication), [source](glossary.html#glos_source),
    [statement-based replication](glossary.html#glos_statement_based_replication).
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[自增锁定](glossary.html#glos_auto_increment_locking)，[innodb_autoinc_lock_mode](glossary.html#glos_innodb_autoinc_lock_mode)，[副本](glossary.html#glos_replica)，[复制](glossary.html#glos_replication)，[源](glossary.html#glos_source)，[基于语句的复制](glossary.html#glos_statement_based_replication)。
- en: row-level locking
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 行级锁定
- en: The **locking** mechanism used for **InnoDB** tables, relying on **row locks**
    rather than **table locks**. Multiple **transactions** can modify the same table
    concurrently. Only if two transactions try to modify the same row does one of
    the transactions wait for the other to complete (and release its row locks).
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: '**InnoDB**表使用的**锁定**机制，依赖于**行锁**而不是**表锁**。多个**事务**可以同时修改同一张表。只有当两个事务尝试修改同一行时，其中一个事务才会等待另一个完成（并释放其行锁）。'
- en: See Also [InnoDB](glossary.html#glos_innodb), [locking](glossary.html#glos_locking),
    [row lock](glossary.html#glos_row_lock), [table lock](glossary.html#glos_table_lock),
    [transaction](glossary.html#glos_transaction).
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[InnoDB](glossary.html#glos_innodb)，[锁定](glossary.html#glos_locking)，[行锁](glossary.html#glos_row_lock)，[表锁](glossary.html#glos_table_lock)，[事务](glossary.html#glos_transaction)。
- en: Ruby
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby
- en: A programming language that emphasizes dynamic typing and object-oriented programming.
    Some syntax is familiar to **Perl** developers.
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 一种强调动态类型和面向对象编程的编程语言。某些语法对**Perl**开发人员很熟悉。
- en: See Also [API](glossary.html#glos_api), [Perl](glossary.html#glos_perl), [Ruby
    API](glossary.html#glos_ruby_api).
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[API](glossary.html#glos_api)，[Perl](glossary.html#glos_perl)，[Ruby API](glossary.html#glos_ruby_api)。
- en: Ruby API
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby API
- en: '`mysql2`, based based on the **libmysqlclient** API library, is available for
    Ruby programmers developing MySQL applications. For more information, see [Section 31.11,
    “MySQL Ruby APIs”](apis-ruby.html "31.11 MySQL Ruby APIs").'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysql2`，基于**libmysqlclient** API库，适用于开发MySQL应用程序的Ruby程序员。有关更多信息，请参见[第31.11节，“MySQL
    Ruby APIs”](apis-ruby.html "31.11 MySQL Ruby APIs")。'
- en: See Also [libmysql](glossary.html#glos_libmysql), [Ruby](glossary.html#glos_ruby).
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[libmysql](glossary.html#glos_libmysql)，[Ruby](glossary.html#glos_ruby)。
- en: rw-lock
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: rw-lock
- en: The low-level object that `InnoDB` uses to represent and enforce shared-access
    **locks** to internal in-memory data structures following certain rules. Contrast
    with **mutexes**, which `InnoDB` uses to represent and enforce exclusive access
    to internal in-memory data structures. Mutexes and rw-locks are known collectively
    as **latches**.
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`用于表示和执行对内部内存数据结构的共享访问**锁定**的低级对象，遵循某些规则。与**互斥锁**相对，`InnoDB`用于表示和执行对内部内存数据结构的独占访问。互斥锁和rw-locks总称为**闩锁**。'
- en: '`rw-lock` types include `s-locks` (shared locks), `x-locks` (exclusive locks),
    and `sx-locks` (shared-exclusive locks).'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: '`rw-lock`类型包括`s-locks`（共享锁）、`x-locks`（独占锁）和`sx-locks`（共享-独占锁）。'
- en: An `s-lock` provides read access to a common resource.
  id: totrans-1287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s-lock`提供对共享资源的读取权限。'
- en: An `x-lock` provides write access to a common resource while not permitting
    inconsistent reads by other threads.
  id: totrans-1288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x-lock`提供对共享资源的写访问权限，同时不允许其他线程进行不一致的读取。'
- en: An `sx-lock` provides write access to a common resource while permitting inconsistent
    reads by other threads. `sx-locks` were introduced in MySQL 5.7 to optimize concurrency
    and improve scalability for read-write workloads.
  id: totrans-1289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sx-lock`提供对共享资源的写访问权限，同时允许其他线程进行不一致的读取。`sx-locks`在MySQL 5.7中引入，以优化并发性并提高读写工作负载的可伸缩性。'
- en: The following matrix summarizes rw-lock type compatibility.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 以下矩阵总结了`rw-lock`类型的兼容性。
- en: '|  | *`S`* | *`SX`* | *`X`* |'
  id: totrans-1291
  prefs: []
  type: TYPE_TB
  zh: '|  | *`S`* | *`SX`* | *`X`* |'
- en: '| *`S`* | Compatible | Compatible | Conflict |'
  id: totrans-1292
  prefs: []
  type: TYPE_TB
  zh: '| *`S`* | 兼容 | 兼容 | 冲突 |'
- en: '| *`SX`* | Compatible | Conflict | Conflict |'
  id: totrans-1293
  prefs: []
  type: TYPE_TB
  zh: '| *`SX`* | 兼容 | 冲突 | 冲突 |'
- en: '| *`X`* | Conflict | Conflict | Conflict |'
  id: totrans-1294
  prefs: []
  type: TYPE_TB
  zh: '| *`X`* | 冲突 | 冲突 | 冲突 |'
- en: See Also [latch](glossary.html#glos_latch), [lock](glossary.html#glos_lock),
    [mutex](glossary.html#glos_mutex), [Performance Schema](glossary.html#glos_performance_schema).
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[闩锁](glossary.html#glos_latch)，[锁定](glossary.html#glos_lock)，[互斥锁](glossary.html#glos_mutex)，[性能模式](glossary.html#glos_performance_schema)。
- en: S
  id: totrans-1296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: S
- en: savepoint
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: 保存点
- en: Savepoints help to implement nested **transactions**. They can be used to provide
    scope to operations on tables that are part of a larger transaction. For example,
    scheduling a trip in a reservation system might involve booking several different
    flights; if a desired flight is unavailable, you might **roll back** the changes
    involved in booking that one leg, without rolling back the earlier flights that
    were successfully booked.
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 保存点有助于实现嵌套**事务**。它们可用于为较大事务的一部分的表上的操作提供范围。例如，在预订系统中安排旅行可能涉及预订几个不同的航班；如果所需航班不可用，您可以**回滚**涉及预订该航段的更改，而不会回滚早些时候成功预订的航班。
- en: See Also [rollback](glossary.html#glos_rollback), [transaction](glossary.html#glos_transaction).
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[回滚](glossary.html#glos_rollback)，[事务](glossary.html#glos_transaction)。
- en: scalability
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性
- en: The ability to add more work and issue more simultaneous requests to a system,
    without a sudden drop in performance due to exceeding the limits of system capacity.
    Software architecture, hardware configuration, application coding, and type of
    workload all play a part in scalability. When the system reaches its maximum capacity,
    popular techniques for increasing scalability are **scale up** (increasing the
    capacity of existing hardware or software) and **scale out** (adding new servers
    and more instances of MySQL). Often paired with **availability** as critical aspects
    of a large-scale deployment.
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: 向系统添加更多工作并发出更多同时请求的能力，而不会因超出系统容量限制而导致性能突然下降。软件架构、硬件配置、应用编码和工作负载类型都对可扩展性起作用。当系统达到最大容量时，增加可扩展性的常用技术是**纵向扩展**（增加现有硬件或软件的容量）和**横向扩展**（添加新服务器和更多MySQL实例）。通常与**可用性**一起作为大规模部署的关键方面。
- en: See Also [availability](glossary.html#glos_availability), [scale out](glossary.html#glos_scale_out),
    [scale up](glossary.html#glos_scale_up).
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[可用性](glossary.html#glos_availability)，[横向扩展](glossary.html#glos_scale_out)，[纵向扩展](glossary.html#glos_scale_up)。
- en: scale out
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 横向扩展
- en: A technique for increasing **scalability** by adding new servers and more instances
    of MySQL. For example, setting up replication, NDB Cluster, connection pooling,
    or other features that spread work across a group of servers. Contrast with **scale
    up**.
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加新服务器和更多MySQL实例来增加**可扩展性**的技术。例如，设置复制、NDB集群、连接池或其他功能，将工作分布在一组服务器上。与**纵向扩展**相对。
- en: See Also [scalability](glossary.html#glos_scalability), [scale up](glossary.html#glos_scale_up).
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[可扩展性](glossary.html#glos_scalability)，[纵向扩展](glossary.html#glos_scale_up)。
- en: scale up
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 纵向扩展
- en: A technique for increasing **scalability** by increasing the capacity of existing
    hardware or software. For example, increasing the memory on a server and adjusting
    memory-related parameters such as [`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)
    and [`innodb_buffer_pool_instances`](innodb-parameters.html#sysvar_innodb_buffer_pool_instances).
    Contrast with **scale out**.
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: 通过增加现有硬件或软件的容量来增加**可扩展性**的技术。例如，增加服务器的内存并调整与内存相关的参数，如[`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)和[`innodb_buffer_pool_instances`](innodb-parameters.html#sysvar_innodb_buffer_pool_instances)。与**横向扩展**相对。
- en: See Also [scalability](glossary.html#glos_scalability), [scale out](glossary.html#glos_scale_out).
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[可扩展性](glossary.html#glos_scalability)，[横向扩展](glossary.html#glos_scale_out)。
- en: schema
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: 模式
- en: Conceptually, a schema is a set of interrelated database objects, such as tables,
    table columns, data types of the columns, indexes, foreign keys, and so on. These
    objects are connected through SQL syntax, because the columns make up the tables,
    the foreign keys refer to tables and columns, and so on. Ideally, they are also
    connected logically, working together as part of a unified application or flexible
    framework. For example, the **INFORMATION_SCHEMA** and **performance_schema**
    databases use “schema” in their names to emphasize the close relationships between
    the tables and columns they contain.
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，模式是一组相关的数据库对象，如表、表列、列的数据类型、索引、外键等。这些对象通过SQL语法连接在一起，因为列组成表，外键引用表和列，依此类推。理想情况下，它们也在逻辑上连接在一起，作为统一应用程序或灵活框架的一部分共同工作。例如，**INFORMATION_SCHEMA**和**performance_schema**数据库在其名称中使用“模式”强调它们包含的表和列之间的密切关系。
- en: In MySQL, physically, a **schema** is synonymous with a **database**. You can
    substitute the keyword `SCHEMA` instead of `DATABASE` in MySQL SQL syntax, for
    example using `CREATE SCHEMA` instead of `CREATE DATABASE`.
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中，从物理上讲，**模式**与**数据库**是同义词。您可以在MySQL SQL语法中使用关键字`SCHEMA`代替`DATABASE`，例如使用`CREATE
    SCHEMA`代替`CREATE DATABASE`。
- en: 'Some other database products draw a distinction. For example, in the Oracle
    Database product, a **schema** represents only a part of a database: the tables
    and other objects owned by a single user.'
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些数据库产品进行了区分。例如，在Oracle Database产品中，**模式**仅代表数据库的一部分：由单个用户拥有的表和其他对象。
- en: See Also [database](glossary.html#glos_database), [INFORMATION_SCHEMA](glossary.html#glos_information_schema),
    [Performance Schema](glossary.html#glos_performance_schema).
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[数据库](glossary.html#glos_database)，[INFORMATION_SCHEMA](glossary.html#glos_information_schema)，[Performance
    Schema](glossary.html#glos_performance_schema)。
- en: SDI
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: SDI
- en: Acronym for “serialized dictionary information”.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: “序列化字典信息”的缩写。
- en: See Also [serialized dictionary information (SDI)](glossary.html#glos_serialized_dictionary_information).
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[序列化字典信息（SDI）](glossary.html#glos_serialized_dictionary_information)。
- en: search index
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索索引
- en: In MySQL, **full-text search** queries use a special kind of index, the **FULLTEXT
    index**. In MySQL 5.6.4 and up, `InnoDB` and `MyISAM` tables both support `FULLTEXT`
    indexes; formerly, these indexes were only available for `MyISAM` tables.
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中，**全文搜索**查询使用一种特殊类型的索引，即**全文索引**。在MySQL 5.6.4及更高版本中，`InnoDB`和`MyISAM`表都支持`FULLTEXT`索引；以前，这些索引仅适用于`MyISAM`表。
- en: See Also [full-text search](glossary.html#glos_full_text_search), [FULLTEXT
    index](glossary.html#glos_fulltext_index).
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[全文搜索](glossary.html#glos_full_text_search)，[全文索引](glossary.html#glos_fulltext_index)。
- en: secondary index
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: 次要索引
- en: A type of `InnoDB` **index** that represents a subset of table columns. An `InnoDB`
    table can have zero, one, or many secondary indexes. (Contrast with the **clustered
    index**, which is required for each `InnoDB` table, and stores the data for all
    the table columns.)
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: 一种代表表列子集的`InnoDB` **索引**。一个`InnoDB`表可以有零个、一个或多个次要索引。（与每个`InnoDB`表都需要的**聚簇索引**相对比，它存储了所有表列的数据。）
- en: A secondary index can be used to satisfy queries that only require values from
    the indexed columns. For more complex queries, it can be used to identify the
    relevant rows in the table, which are then retrieved through lookups using the
    clustered index.
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 一个次要索引可用于满足仅需要来自索引列的值的查询。对于更复杂的查询，它可用于识别表中相关行，然后通过使用聚簇索引进行查找来检索这些行。
- en: Creating and dropping secondary indexes has traditionally involved significant
    overhead from copying all the data in the `InnoDB` table. The **fast index creation**
    feature makes both `CREATE INDEX` and `DROP INDEX` statements much faster for
    `InnoDB` secondary indexes.
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和删除次要索引传统上涉及从复制`InnoDB`表中的所有数据中产生的显著开销。**快速索引创建**功能使得`InnoDB`次要索引的`CREATE
    INDEX`和`DROP INDEX`语句都变得更快。
- en: See Also [clustered index](glossary.html#glos_clustered_index), [Fast Index
    Creation](glossary.html#glos_fast_index_creation), [index](glossary.html#glos_index).
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[聚簇索引](glossary.html#glos_clustered_index)，[快速索引创建](glossary.html#glos_fast_index_creation)，[索引](glossary.html#glos_index)。
- en: segment
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 段
- en: A division within an `InnoDB` **tablespace**. If a tablespace is analogous to
    a directory, the segments are analogous to files within that directory. A segment
    can grow. New segments can be created.
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` **表空间**内的一个分区。如果一个表空间类似于一个目录，那么段类似于该目录中的文件。一个段可以增长。可以创建新的段。'
- en: For example, within a **file-per-table** tablespace, table data is in one segment
    and each associated index is in its own segment. The **system tablespace** contains
    many different segments, because it can hold many tables and their associated
    indexes. Prior to MySQL 8.0, the system tablespace also includes one or more **rollback
    segments** used for **undo logs**.
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在**每表一个文件**表空间中，表数据位于一个段中，每个相关索引位于自己的段中。**系统表空间**包含许多不同的段，因为它可以容纳许多表及其相关索引。在MySQL
    8.0之前，系统表空间还包括一个或多个用于**撤销日志**的**回滚段**。
- en: Segments grow and shrink as data is inserted and deleted. When a segment needs
    more room, it is extended by one **extent** (1 megabyte) at a time. Similarly,
    a segment releases one extent's worth of space when all the data in that extent
    is no longer needed.
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 段随着数据的插入和删除而增长和缩小。当一个段需要更多空间时，它会每次扩展一个**extent**（1兆字节）。同样，当不再需要该extent中的所有数据时，一个段会释放一个extent大小的空间。
- en: See Also [extent](glossary.html#glos_extent), [file-per-table](glossary.html#glos_file_per_table),
    [rollback segment](glossary.html#glos_rollback_segment), [system tablespace](glossary.html#glos_system_tablespace),
    [tablespace](glossary.html#glos_tablespace), [undo log](glossary.html#glos_undo_log).
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [extent](glossary.html#glos_extent), [file-per-table](glossary.html#glos_file_per_table),
    [rollback segment](glossary.html#glos_rollback_segment), [system tablespace](glossary.html#glos_system_tablespace),
    [tablespace](glossary.html#glos_tablespace), [undo log](glossary.html#glos_undo_log).
- en: selectivity
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: 选择性
- en: A property of data distribution, the number of distinct values in a column (its
    **cardinality**) divided by the number of records in the table. High selectivity
    means that the column values are relatively unique, and can retrieved efficiently
    through an index. If you (or the query optimizer) can predict that a test in a
    `WHERE` clause only matches a small number (or proportion) of rows in a table,
    the overall **query** tends to be efficient if it evaluates that test first, using
    an index.
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分布的一个属性，即列中不同值的数量（其**基数**）除以表中记录的数量。高选择性意味着列值相对唯一，并且可以通过索引有效地检索。如果你（或查询优化器）可以预测`WHERE`子句中的测试只匹配表中的少量行（或比例），那么如果首先评估该测试，使用索引，整体**查询**往往会更有效率。
- en: See Also [cardinality](glossary.html#glos_cardinality), [query](glossary.html#glos_query).
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [基数](glossary.html#glos_cardinality), [查询](glossary.html#glos_query).
- en: semi-consistent read
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 半一致性读取
- en: A type of read operation used for `UPDATE` statements, that is a combination
    of **READ COMMITTED** and **consistent read**. When an `UPDATE` statement examines
    a row that is already locked, `InnoDB` returns the latest committed version to
    MySQL so that MySQL can determine whether the row matches the `WHERE` condition
    of the `UPDATE`. If the row matches (must be updated), MySQL reads the row again,
    and this time `InnoDB` either locks it or waits for a lock on it. This type of
    read operation can only happen when the transaction has the READ COMMITTED **isolation
    level**.
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: 用于`UPDATE`语句的一种读取操作，是**READ COMMITTED**和**consistent read**的组合。当`UPDATE`语句检查已经锁定的行时，`InnoDB`将最新提交的版本返回给
    MySQL，以便 MySQL 可以确定该行是否与`UPDATE`的`WHERE`条件匹配。如果行匹配（必须更新），MySQL再次读取该行，这时`InnoDB`要么锁定它，要么等待锁定。这种读取操作只能在事务具有
    READ COMMITTED **隔离级别**时发生。
- en: See Also [consistent read](glossary.html#glos_consistent_read), [isolation level](glossary.html#glos_isolation_level),
    [READ COMMITTED](glossary.html#glos_read_committed).
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [consistent read](glossary.html#glos_consistent_read), [isolation level](glossary.html#glos_isolation_level),
    [READ COMMITTED](glossary.html#glos_read_committed).
- en: SERIALIZABLE
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: 可串行化
- en: The **isolation level** that uses the most conservative locking strategy, to
    prevent any other **transactions** from inserting or changing data that was read
    by this transaction, until it is finished. This way, the same query can be run
    over and over within a transaction, and be certain to retrieve the same set of
    results each time. Any attempt to change data that was committed by another transaction
    since the start of the current transaction, cause the current transaction to wait.
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最保守的锁定策略的**隔离级别**，以防止任何其他**事务**在此事务读取的数据插入或更改数据，直到完成。这样，同一查询可以在事务内反复运行，并确保每次都检索相同的结果集。任何试图更改自当前事务开始以来由另一个事务提交的数据的尝试，都会导致当前事务等待。
- en: This is the default isolation level specified by the SQL standard. In practice,
    this degree of strictness is rarely needed, so the default isolation level for
    `InnoDB` is the next most strict, **REPEATABLE READ**.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 SQL 标准指定的默认隔离级别。实际上，很少需要这种严格程度，所以`InnoDB`的默认隔离级别是下一个最严格的，**REPEATABLE READ**。
- en: See Also [ACID](glossary.html#glos_acid), [consistent read](glossary.html#glos_consistent_read),
    [isolation level](glossary.html#glos_isolation_level), [locking](glossary.html#glos_locking),
    [REPEATABLE READ](glossary.html#glos_repeatable_read), [transaction](glossary.html#glos_transaction).
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [ACID](glossary.html#glos_acid), [consistent read](glossary.html#glos_consistent_read),
    [isolation level](glossary.html#glos_isolation_level), [locking](glossary.html#glos_locking),
    [REPEATABLE READ](glossary.html#glos_repeatable_read), [transaction](glossary.html#glos_transaction).
- en: serialized dictionary information (SDI)
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化字典信息（SDI）
- en: Dictionary object metadata in serialized form. SDI is stored in `JSON` format.
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化形式的字典对象元数据。SDI 以`JSON`格式存储。
- en: As of MySQL 8.0.3, SDI is present in all `InnoDB` tablespace files except for
    temporary tablespace and undo tablespace files. The presence of SDI in tablespace
    files provides metadata redundancy. For example, dictionary object metadata can
    be extracted from tablespace files using the [**ibd2sdi**](ibd2sdi.html "6.6.1 ibd2sdi
    — InnoDB Tablespace SDI Extraction Utility") utility if the data dictionary becomes
    unavailable.
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.3版本，SDI存在于所有`InnoDB`表空间文件中，临时表空间和撤销表空间文件除外。表空间文件中存在SDI提供了元数据冗余。例如，如果数据字典不可用，可以使用[**ibd2sdi**](ibd2sdi.html
    "6.6.1 ibd2sdi — InnoDB Tablespace SDI Extraction Utility")实用程序从表空间文件中提取字典对象元数据。
- en: For a `MyISAM` table, SDI is stored in a `.sdi` metadata file in the schema
    directory. An SDI metadata file is required to perform an [`IMPORT TABLE`](import-table.html
    "15.2.6 IMPORT TABLE Statement") operation.
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`MyISAM`表，SDI存储在模式目录中的`.sdi`元数据文件中。执行[`IMPORT TABLE`](import-table.html "15.2.6 IMPORT
    TABLE Statement")操作需要一个SDI元数据文件。
- en: See Also [file-per-table](glossary.html#glos_file_per_table), [general tablespace](glossary.html#glos_general_tablespace),
    [system tablespace](glossary.html#glos_system_tablespace), [tablespace](glossary.html#glos_tablespace).
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[每表文件](glossary.html#glos_file_per_table)，[通用表空间](glossary.html#glos_general_tablespace)，[系统表空间](glossary.html#glos_system_tablespace)，[表空间](glossary.html#glos_tablespace)。
- en: server
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: A type of program that runs continuously, waiting to receive and act upon requests
    from another program (the **client**). Because often an entire computer is dedicated
    to running one or more server programs (such as a database server, a web server,
    an application server, or some combination of these), the term **server** can
    also refer to the computer that runs the server software.
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 一种连续运行的程序类型，等待接收并对来自另一个程序（**客户端**）的请求进行操作。由于通常整个计算机专用于运行一个或多个服务器程序（如数据库服务器、Web服务器、应用程序服务器或这些的组合），术语**服务器**也可以指运行服务器软件的计算机。
- en: See Also [client](glossary.html#glos_client), [mysqld](glossary.html#glos_mysqld).
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[客户端](glossary.html#glos_client)，[mysqld](glossary.html#glos_mysqld)。
- en: server-side prepared statement
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端预编译语句
- en: A **prepared statement** managed by the MySQL server. Historically, issues with
    server-side prepared statements led **Connector/J** and **Connector/PHP** developers
    to sometimes use **client-side prepared statements** instead. With modern MySQL
    server versions, server-side prepared statements are recommended for performance,
    scalability, and memory efficiency.
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 由MySQL服务器管理的**预编译语句**。历史上，与服务器端预编译语句相关的问题导致**Connector/J**和**Connector/PHP**开发人员有时使用**客户端预编译语句**。在现代MySQL服务器版本中，建议使用服务器端预编译语句以获得更好的性能、可伸缩性和内存效率。
- en: See Also [client-side prepared statement](glossary.html#glos_client_side_prepared_statement),
    [Connector/J](glossary.html#glos_connector_j), [Connector/PHP](glossary.html#glos_connector_php),
    [prepared statement](glossary.html#glos_prepared_statement).
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[客户端端预编译语句](glossary.html#glos_client_side_prepared_statement)，[Connector/J](glossary.html#glos_connector_j)，[Connector/PHP](glossary.html#glos_connector_php)，[预编译语句](glossary.html#glos_prepared_statement)。
- en: service principal name
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 服务主体名称
- en: The name for a Kerberos named entity that represents a service.
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: 代表服务的Kerberos命名实体的名称。
- en: See Also [principal](glossary.html#glos_principal).
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[主体](glossary.html#glos_principal)。
- en: service ticket
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 服务票证
- en: A Kerberos ticket that provides access to an application service, such as the
    service provided by a web or database server.
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: 提供对应用程序服务的Kerberos票证，例如由Web服务器或数据库服务器提供的服务。
- en: servlet
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: servlet
- en: See Also [Connector/J](glossary.html#glos_connector_j).
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[Connector/J](glossary.html#glos_connector_j)。
- en: session temporary tablespace
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 会话临时表空间
- en: A *temporary tablespace* that stores user-created *temporary tables* and internal
    temporary tables created by the *optimizer* when `InnoDB` is configured as the
    on-disk storage engine for internal temporary tables.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: 存储用户创建的*临时表*和当`InnoDB`配置为内部临时表的磁盘存储引擎时由*优化器*创建的内部临时表的*临时表空间*。
- en: See Also [optimizer](glossary.html#glos_optimizer), [temporary table](glossary.html#glos_temporary_table),
    [temporary tablespace](glossary.html#glos_temporary_tablespace).
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[优化器](glossary.html#glos_optimizer)，[临时表](glossary.html#glos_temporary_table)，[临时表空间](glossary.html#glos_temporary_tablespace)。
- en: shared lock
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: 共享锁
- en: A kind of **lock** that allows other **transactions** to read the locked object,
    and to also acquire other shared locks on it, but not to write to it. The opposite
    of **exclusive lock**.
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**锁**类型，允许其他**事务**读取被锁定的对象，并且还可以在其上获取其他共享锁，但不能对其进行写入。与**排他锁**相反。
- en: See Also [exclusive lock](glossary.html#glos_exclusive_lock), [lock](glossary.html#glos_lock),
    [transaction](glossary.html#glos_transaction).
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[独占锁](glossary.html#glos_exclusive_lock)，[锁](glossary.html#glos_lock)，[事务](glossary.html#glos_transaction)。
- en: shared tablespace
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 共享表空间
- en: Another way of referring to the **system tablespace** or a **general tablespace**.
    General tablespaces were introduced in MySQL 5.7\. More than one table can reside
    in a shared tablespace. Only a single table can reside in a *file-per-table* tablespace.
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种指代**系统表空间**或**通用表空间**的方式。通用表空间在MySQL 5.7中引入。一个共享表空间可以容纳多个表。只能有一个表位于*每个表的文件*表空间中。
- en: See Also [general tablespace](glossary.html#glos_general_tablespace), [system
    tablespace](glossary.html#glos_system_tablespace).
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[通用表空间](glossary.html#glos_general_tablespace)，[系统表空间](glossary.html#glos_system_tablespace)。
- en: sharp checkpoint
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: 锐检查点
- en: The process of **flushing** to disk all **dirty** buffer pool pages whose redo
    entries are contained in certain portion of the **redo log**. Occurs before `InnoDB`
    reuses a portion of a log file; the log files are used in a circular fashion.
    Typically occurs with write-intensive **workloads**.
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有**脏**缓冲池页刷新到磁盘的过程，其重做条目包含在**重做日志**的某个部分中。在`InnoDB`重用日志文件的一部分之前发生；日志文件以循环方式使用。通常与写入密集的**工作负载**一起发生。
- en: See Also [dirty page](glossary.html#glos_dirty_page), [flush](glossary.html#glos_flush),
    [redo log](glossary.html#glos_redo_log), [workload](glossary.html#glos_workload).
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[脏页](glossary.html#glos_dirty_page)，[刷新](glossary.html#glos_flush)，[重做日志](glossary.html#glos_redo_log)，[工作负载](glossary.html#glos_workload)。
- en: shutdown
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: 关机
- en: The process of stopping the MySQL server. By default, this process cleans up
    operations for **InnoDB** tables, so `InnoDB` can be **slow** to shut down, but
    fast to start up later. If you skip the cleanup operations, it is **fast** to
    shut down but the cleanup must be performed during the next restart.
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 停止MySQL服务器的过程。默认情况下，此过程会清理**InnoDB**表的操作，因此`InnoDB`在关机时可能会**慢**，但稍后启动会很快。如果跳过清理操作，则关机会很**快**，但必须在下次重新启动时执行清理。
- en: The shutdown mode for `InnoDB` is controlled by the [`innodb_fast_shutdown`](innodb-parameters.html#sysvar_innodb_fast_shutdown)
    option.
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`的关机模式由[`innodb_fast_shutdown`](innodb-parameters.html#sysvar_innodb_fast_shutdown)选项控制。'
- en: See Also [fast shutdown](glossary.html#glos_fast_shutdown), [InnoDB](glossary.html#glos_innodb),
    [slow shutdown](glossary.html#glos_slow_shutdown), [startup](glossary.html#glos_startup).
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[快速关机](glossary.html#glos_fast_shutdown)，[InnoDB](glossary.html#glos_innodb)，[慢关机](glossary.html#glos_slow_shutdown)，[启动](glossary.html#glos_startup)。
- en: slave
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: 从属
- en: See [replica](glossary.html#glos_replica).
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[副本](glossary.html#glos_replica)。
- en: slow query log
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 慢查询日志
- en: A type of **log** used for performance tuning of SQL statements processed by
    the MySQL server. The log information is stored in a file. You must enable this
    feature to use it. You control which categories of “slow” SQL statements are logged.
    For more information, see [Section 7.4.5, “The Slow Query Log”](slow-query-log.html
    "7.4.5 The Slow Query Log").
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 用于调整MySQL服务器处理的SQL语句性能的一种**日志**类型。日志信息存储在文件中。您必须启用此功能才能使用它。您可以控制记录哪些类别的“慢”SQL语句。有关更多信息，请参见[第7.4.5节，“慢查询日志”](slow-query-log.html
    "7.4.5 慢查询日志")。
- en: See Also [general query log](glossary.html#glos_general_query_log), [log](glossary.html#glos_log).
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[通用查询日志](glossary.html#glos_general_query_log)，[日志](glossary.html#glos_log)。
- en: slow shutdown
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 慢关机
- en: A type of **shutdown** that does additional `InnoDB` flushing operations before
    completing. Also known as a **clean shutdown**. Specified by the configuration
    parameter [`innodb_fast_shutdown=0`](innodb-parameters.html#sysvar_innodb_fast_shutdown)
    or the command `SET GLOBAL innodb_fast_shutdown=0;`. Although the shutdown itself
    can take longer, that time should be saved on the subsequent startup.
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 一种在完成之前执行额外`InnoDB`刷新操作的**关机**类型。也称为**干净关机**。由配置参数[`innodb_fast_shutdown=0`](innodb-parameters.html#sysvar_innodb_fast_shutdown)或命令`SET
    GLOBAL innodb_fast_shutdown=0;`指定。尽管关机本身可能需要更长时间，但这段时间应该会在随后的启动中节省下来。
- en: See Also [clean shutdown](glossary.html#glos_clean_shutdown), [fast shutdown](glossary.html#glos_fast_shutdown),
    [shutdown](glossary.html#glos_shutdown).
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[干净关机](glossary.html#glos_clean_shutdown)，[快速关机](glossary.html#glos_fast_shutdown)，[关机](glossary.html#glos_shutdown)。
- en: snapshot
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: 快照
- en: A representation of data at a particular time, which remains the same even as
    changes are **committed** by other **transactions**. Used by certain **isolation
    levels** to allow **consistent reads**.
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 表示特定时间点的数据，即使其他**事务**提交了更改，也保持不变。某些**隔离级别**使用它来允许**一致性读取**。
- en: See Also [commit](glossary.html#glos_commit), [consistent read](glossary.html#glos_consistent_read),
    [isolation level](glossary.html#glos_isolation_level), [transaction](glossary.html#glos_transaction).
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[commit](glossary.html#glos_commit)，[consistent read](glossary.html#glos_consistent_read)，[isolation
    level](glossary.html#glos_isolation_level)，[transaction](glossary.html#glos_transaction)。
- en: sort buffer
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 排序缓冲区
- en: The buffer used for sorting data during creation of an `InnoDB` index. Sort
    buffer size is configured using the [`innodb_sort_buffer_size`](innodb-parameters.html#sysvar_innodb_sort_buffer_size)
    configuration option.
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`InnoDB`索引期间用于对数据进行排序的缓冲区。排序缓冲区大小通过[`innodb_sort_buffer_size`](innodb-parameters.html#sysvar_innodb_sort_buffer_size)配置选项进行配置。
- en: source
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: 源
- en: A database server machine in a **replication** scenario that processes the initial
    insert, update, and delete requests for data. These changes are propagated to,
    and repeated on, other servers known as **replicas**.
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 在**复制**场景中处理数据的初始插入、更新和删除请求的数据库服务器机器。这些更改会传播到其他被称为**副本**的服务器上，并在其上重复。
- en: See Also [replica](glossary.html#glos_replica), [replication](glossary.html#glos_replication).
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[副本](glossary.html#glos_replica)，[复制](glossary.html#glos_replication)。
- en: space ID
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: 空间ID
- en: An identifier used to uniquely identify an `InnoDB` **tablespace** within a
    MySQL instance. The space ID for the **system tablespace** is always zero; this
    same ID applies to all tables within the system tablespace or within a general
    tablespace. Each **file-per-table** tablespace and **general tablespace** has
    its own space ID.
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在MySQL实例中唯一标识`InnoDB` **tablespace** 的标识符。**系统tablespace** 的空间ID始终为零；这个相同的ID适用于系统tablespace内或通用tablespace内的所有表。每个**file-per-table**
    tablespace和**general tablespace**都有自己的空间ID。
- en: Prior to MySQL 5.6, this hardcoded value presented difficulties in moving `InnoDB`
    tablespace files between MySQL instances. Starting in MySQL 5.6, you can copy
    tablespace files between instances by using the **transportable tablespace** feature
    involving the statements `FLUSH TABLES ... FOR EXPORT`, `ALTER TABLE ... DISCARD
    TABLESPACE`, and `ALTER TABLE ... IMPORT TABLESPACE`. The information needed to
    adjust the space ID is conveyed in the **.cfg file** which you copy along with
    the tablespace. See [Section 17.6.1.3, “Importing InnoDB Tables”](innodb-table-import.html
    "17.6.1.3 Importing InnoDB Tables") for details.
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 5.6之前，这个硬编码值在移动`InnoDB` tablespace文件之间的MySQL实例之间存在困难。从MySQL 5.6开始，您可以通过使用涉及语句`FLUSH
    TABLES ... FOR EXPORT`，`ALTER TABLE ... DISCARD TABLESPACE`和`ALTER TABLE ... IMPORT
    TABLESPACE`的**可传输tablespace**功能在实例之间复制tablespace文件。调整空间ID所需的信息包含在您与tablespace一起复制的**.cfg文件**中。有关详细信息，请参见[Section 17.6.1.3,
    “导入InnoDB表”](innodb-table-import.html "17.6.1.3 导入InnoDB表")。
- en: See Also [.cfg file](glossary.html#glos_cfg_file), [file-per-table](glossary.html#glos_file_per_table),
    [general tablespace](glossary.html#glos_general_tablespace), [.ibd file](glossary.html#glos_ibd_file),
    [system tablespace](glossary.html#glos_system_tablespace), [tablespace](glossary.html#glos_tablespace),
    [transportable tablespace](glossary.html#glos_transportable_tablespace).
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[.cfg文件](glossary.html#glos_cfg_file)，[file-per-table](glossary.html#glos_file_per_table)，[general
    tablespace](glossary.html#glos_general_tablespace)，[.ibd文件](glossary.html#glos_ibd_file)，[system
    tablespace](glossary.html#glos_system_tablespace)，[tablespace](glossary.html#glos_tablespace)，[transportable
    tablespace](glossary.html#glos_transportable_tablespace)。
- en: sparse file
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏文件
- en: A type of file that uses file system space more efficiently by writing metadata
    representing empty blocks to disk instead of writing the actual empty space. The
    `InnoDB` **transparent page compression** feature relies on sparse file support.
    For more information, see [Section 17.9.2, “InnoDB Page Compression”](innodb-page-compression.html
    "17.9.2 InnoDB Page Compression").
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 一种文件类型，通过将表示空块的元数据写入磁盘而不是写入实际的空间，更有效地利用文件系统空间。`InnoDB` **transparent page compression**
    功能依赖于稀疏文件支持。有关更多信息，请参见[Section 17.9.2, “InnoDB页面压缩”](innodb-page-compression.html
    "17.9.2 InnoDB页面压缩")。
- en: See Also [hole punching](glossary.html#glos_hole_punching), [transparent page
    compression](glossary.html#glos_transparent_page_compression).
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[hole punching](glossary.html#glos_hole_punching)，[transparent page compression](glossary.html#glos_transparent_page_compression)。
- en: spin
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: spin
- en: A type of **wait** operation that continuously tests whether a resource becomes
    available. This technique is used for resources that are typically held only for
    brief periods, where it is more efficient to wait in a “busy loop” than to put
    the thread to sleep and perform a context switch. If the resource does not become
    available within a short time, the spin loop ceases and another wait technique
    is used.
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**等待**操作类型，不断测试资源是否变得可用。这种技术用于通常仅短暂持有资源的情况，其中在“忙等待”中等待比让线程休眠并执行上下文切换更有效。如果资源在短时间内不可用，则自旋循环停止，并使用另一种等待技术。
- en: See Also [latch](glossary.html#glos_latch), [lock](glossary.html#glos_lock),
    [mutex](glossary.html#glos_mutex), [wait](glossary.html#glos_wait).
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[闩锁](glossary.html#glos_latch)，[锁](glossary.html#glos_lock)，[互斥锁](glossary.html#glos_mutex)，[等待](glossary.html#glos_wait)。
- en: SPN
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: SPN
- en: See [service principal name](glossary.html#glos_service_principal_name).
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[服务主体名称](glossary.html#glos_service_principal_name)。
- en: Spring
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: Spring
- en: A Java-based application framework designed for assisting in application design
    by providing a way to configure components.
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 一种基于Java的应用程序框架，旨在通过提供一种配置组件的方式来协助应用程序设计。
- en: See Also [J2EE](glossary.html#glos_j2ee).
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[J2EE](glossary.html#glos_j2ee)。
- en: SQL
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: SQL
- en: The Structured Query Language that is standard for performing database operations.
    Often divided into the categories **DDL**, **DML**, and **queries**. MySQL includes
    some additional statement categories such as **replication**. See [Chapter 11,
    *Language Structure*](language-structure.html "Chapter 11 Language Structure")
    for the building blocks of SQL syntax, [Chapter 13, *Data Types*](data-types.html
    "Chapter 13 Data Types") for the data types to use for MySQL table columns, [Chapter 15,
    *SQL Statements*](sql-statements.html "Chapter 15 SQL Statements") for details
    about SQL statements and their associated categories, and [Chapter 14, *Functions
    and Operators*](functions.html "Chapter 14 Functions and Operators") for standard
    and MySQL-specific functions to use in queries.
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: 用于执行数据库操作的标准结构化查询语言。通常分为**DDL**，**DML**和**查询**等类别。MySQL包括一些额外的语句类别，如**复制**。查看[第11章，*语言结构*](language-structure.html
    "第11章 语言结构")了解SQL语法的基本构建块，[第13章，*数据类型*](data-types.html "第13章 数据类型")了解用于MySQL表列的数据类型，[第15章，*SQL语句*](sql-statements.html
    "第15章 SQL语句")了解SQL语句及其相关类别的详细信息，以及[第14章，*函数和运算符*](functions.html "第14章 函数和运算符")了解在查询中使用的标准和MySQL特定函数。
- en: See Also [DDL](glossary.html#glos_ddl), [DML](glossary.html#glos_dml), [query](glossary.html#glos_query),
    [replication](glossary.html#glos_replication).
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[DDL](glossary.html#glos_ddl)，[DML](glossary.html#glos_dml)，[查询](glossary.html#glos_query)，[复制](glossary.html#glos_replication)。
- en: SQLState
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: SQLState
- en: An error code defined by the **JDBC** standard, for exception handling by applications
    using **Connector/J**.
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: 由**JDBC**标准定义的错误代码，用于应用程序使用**Connector/J**进行异常处理。
- en: See Also [Connector/J](glossary.html#glos_connector_j), [JDBC](glossary.html#glos_jdbc).
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Connector/J](glossary.html#glos_connector_j)，[JDBC](glossary.html#glos_jdbc)。
- en: SSD
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: SSD
- en: 'Acronym for “solid-state drive”. A type of storage device with different performance
    characteristics than a traditional hard disk drive (**HDD**): smaller storage
    capacity, faster for random reads, no moving parts, and with a number of considerations
    affecting write performance. Its performance characteristics can influence the
    throughput of a **disk-bound** workload.'
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: “固态硬盘”的缩写。一种具有不同性能特征的存储设备，与传统硬盘驱动器（**HDD**）相比：存储容量较小，随机读取速度更快，无移动部件，并且有一些影响写入性能的考虑因素。其性能特征可以影响**磁盘限制**工作负载的吞吐量。
- en: See Also [disk-bound](glossary.html#glos_disk_bound), [HDD](glossary.html#glos_hdd).
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[磁盘限制](glossary.html#glos_disk_bound)，[HDD](glossary.html#glos_hdd)。
- en: SSL
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: SSL
- en: Acronym for “secure sockets layer”. Provides the encryption layer for network
    communication between an application and a MySQL database server.
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: “安全套接字层”的缩写。为应用程序与MySQL数据库服务器之间的网络通信提供加密层。
- en: See Also [keystore](glossary.html#glos_keystore), [truststore](glossary.html#glos_truststore).
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[密钥库](glossary.html#glos_keystore)，[信任库](glossary.html#glos_truststore)。
- en: ST
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: ST
- en: See [service ticket](glossary.html#glos_service_ticket).
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[服务票](glossary.html#glos_service_ticket)。
- en: startup
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: 启动
- en: The process of starting the MySQL server. Typically done by one of the programs
    listed in [Section 6.3, “Server and Server-Startup Programs”](programs-server.html
    "6.3 Server and Server-Startup Programs"). The opposite of **shutdown**.
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: 启动MySQL服务器的过程。通常由[第6.3节，“服务器和服务器启动程序”](programs-server.html "6.3 服务器和服务器启动程序")中列出的程序之一执行。与**关闭**相反。
- en: See Also [shutdown](glossary.html#glos_shutdown).
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[关闭](glossary.html#glos_shutdown)。
- en: statement interceptor
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 语句拦截器
- en: A type of **interceptor** for tracing, debugging, or augmenting SQL statements
    issued by a database application. Sometimes also known as a **command interceptor**.
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: 用于跟踪、调试或增强数据库应用程序发出的 SQL 语句的一种**拦截器**类型。有时也被称为**命令拦截器**。
- en: In **Java** applications using **Connector/J**, setting up this type of interceptor
    involves implementing the `com.mysql.jdbc.StatementInterceptorV2` interface, and
    adding a `statementInterceptors` property to the **connection string**.
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用**Connector/J**的**Java**应用程序中，设置这种类型的拦截器涉及实现`com.mysql.jdbc.StatementInterceptorV2`接口，并向**连接字符串**添加一个`statementInterceptors`属性。
- en: In **Visual Studio** applications using **Connector/NET**, setting up this type
    of interceptor involves defining a class that inherits from the `BaseCommandInterceptor`
    class and specifying that class name as part of the connection string.
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用**Connector/NET**的**Visual Studio**应用程序中，设置这种类型的拦截器涉及定义一个从`BaseCommandInterceptor`类继承的类，并将该类名指定为连接字符串的一部分。
- en: See Also [command interceptor](glossary.html#glos_command_interceptor), [connection
    string](glossary.html#glos_connection_string), [Connector/J](glossary.html#glos_connector_j),
    [Connector/NET](glossary.html#glos_connector_net), [interceptor](glossary.html#glos_interceptor),
    [Java](glossary.html#glos_java), [Visual Studio](glossary.html#glos_visual_studio).
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[命令拦截器](glossary.html#glos_command_interceptor)、[连接字符串](glossary.html#glos_connection_string)、[Connector/J](glossary.html#glos_connector_j)、[Connector/NET](glossary.html#glos_connector_net)、[拦截器](glossary.html#glos_interceptor)、[Java](glossary.html#glos_java)、[Visual
    Studio](glossary.html#glos_visual_studio)。
- en: statement-based replication
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: 基于语句的复制
- en: A form of **replication** where SQL statements are sent from the **source**
    and replayed on the **replica**. It requires some care with the setting for the
    [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    option, to avoid potential timing problems with **auto-increment locking**.
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**复制**形式，其中 SQL 语句从**源**发送并在**副本**上重放。需要注意[`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)选项的设置，以避免与**自增锁定**可能出现的时间问题。
- en: See Also [auto-increment locking](glossary.html#glos_auto_increment_locking),
    [innodb_autoinc_lock_mode](glossary.html#glos_innodb_autoinc_lock_mode), [replica](glossary.html#glos_replica),
    [replication](glossary.html#glos_replication), [row-based replication](glossary.html#glos_row_based_replication),
    [source](glossary.html#glos_source).
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[自增锁定](glossary.html#glos_auto_increment_locking)、[innodb_autoinc_lock_mode](glossary.html#glos_innodb_autoinc_lock_mode)、[副本](glossary.html#glos_replica)、[复制](glossary.html#glos_replication)、[基于行的复制](glossary.html#glos_row_based_replication)、[源](glossary.html#glos_source)。
- en: statistics
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: 统计信息
- en: Estimated values relating to each `InnoDB` **table** and **index**, used to
    construct an efficient **query execution plan**. The main values are the **cardinality**
    (number of distinct values) and the total number of table rows or index entries.
    The statistics for the table represent the data in its **primary key** index.
    The statistics for a **secondary index** represent the rows covered by that index.
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 与每个`InnoDB`**表**和**索引**相关的估计值，用于构建高效的**查询执行计划**。主要值是**基数**（不同值的数量）和表行或索引条目的总数。表的统计信息代表其**主键**索引中的数据。**次要索引**的统计信息代表该索引覆盖的行。
- en: The values are estimated rather than counted precisely because at any moment,
    different **transactions** can be inserting and deleting rows from the same table.
    To keep the values from being recalculated frequently, you can enable **persistent
    statistics**, where the values are stored in `InnoDB` system tables, and refreshed
    only when you issue an [`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE
    TABLE Statement") statement.
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值是估计的，而不是精确计算，因为在任何时刻，不同的**事务**可以向同一表插入和删除行。为了避免频繁重新计算值，您可以启用**持久统计信息**，其中值存储在`InnoDB`系统表中，并仅在发出[`ANALYZE
    TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement")语句时刷新。
- en: You can control how **NULL** values are treated when calculating statistics
    through the [`innodb_stats_method`](innodb-parameters.html#sysvar_innodb_stats_method)
    configuration option.
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过[`innodb_stats_method`](innodb-parameters.html#sysvar_innodb_stats_method)配置选项控制在计算统计信息时如何处理**NULL**值。
- en: Other types of statistics are available for database objects and database activity
    through the **INFORMATION_SCHEMA** and **PERFORMANCE_SCHEMA** tables.
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**INFORMATION_SCHEMA**和**PERFORMANCE_SCHEMA**表，还可以获得有关数据库对象和数据库活动的其他类型统计信息。
- en: See Also [cardinality](glossary.html#glos_cardinality), [index](glossary.html#glos_index),
    [INFORMATION_SCHEMA](glossary.html#glos_information_schema), [NULL](glossary.html#glos_null),
    [Performance Schema](glossary.html#glos_performance_schema), [persistent statistics](glossary.html#glos_persistent_statistics),
    [primary key](glossary.html#glos_primary_key), [query execution plan](glossary.html#glos_query_execution_plan),
    [secondary index](glossary.html#glos_secondary_index), [table](glossary.html#glos_table),
    [transaction](glossary.html#glos_transaction).
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[基数](glossary.html#glos_cardinality)、[索引](glossary.html#glos_index)、[INFORMATION_SCHEMA](glossary.html#glos_information_schema)、[NULL](glossary.html#glos_null)、[性能模式](glossary.html#glos_performance_schema)、[持久化统计信息](glossary.html#glos_persistent_statistics)、[主键](glossary.html#glos_primary_key)、[查询执行计划](glossary.html#glos_query_execution_plan)、[次要索引](glossary.html#glos_secondary_index)、[表](glossary.html#glos_table)、[事务](glossary.html#glos_transaction)。
- en: stemming
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: 词干提取
- en: The ability to search for different variations of a word based on a common root
    word, such as singular and plural, or past, present, and future verb tense. This
    feature is currently supported in `MyISAM` **full-text search** feature but not
    in **FULLTEXT indexes** for `InnoDB` tables.
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 根据共同的词根词搜索单词的不同变体的能力，例如单数和复数，或过去、现在和未来的动词时态。这个功能目前在`MyISAM`的**全文搜索**功能中支持，但在`InnoDB`表的**全文索引**中不支持。
- en: See Also [full-text search](glossary.html#glos_full_text_search), [FULLTEXT
    index](glossary.html#glos_fulltext_index).
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[全文搜索](glossary.html#glos_full_text_search)、[全文索引](glossary.html#glos_fulltext_index)。
- en: stopword
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 停用词
- en: In a **FULLTEXT index**, a word that is considered common or trivial enough
    that it is omitted from the **search index** and ignored in search queries. Different
    configuration settings control stopword processing for `InnoDB` and `MyISAM` tables.
    See [Section 14.9.4, “Full-Text Stopwords”](fulltext-stopwords.html "14.9.4 Full-Text
    Stopwords") for details.
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: 在**全文索引**中，被视为常见或琐碎而在**搜索索引**中被省略并在搜索查询中被忽略的词。不同的配置设置控制`InnoDB`和`MyISAM`表的停用词处理。详细信息请参见[第14.9.4节，“全文停用词”](fulltext-stopwords.html
    "14.9.4 全文停用词")。
- en: See Also [FULLTEXT index](glossary.html#glos_fulltext_index), [search index](glossary.html#glos_search_index).
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[全文索引](glossary.html#glos_fulltext_index)、[搜索索引](glossary.html#glos_search_index)。
- en: storage engine
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎
- en: A component of the MySQL database that performs the low-level work of storing,
    updating, and querying data. In MySQL 5.5 and higher, **InnoDB** is the default
    storage engine for new tables, superceding `MyISAM`. Different storage engines
    are designed with different tradeoffs between factors such as memory usage versus
    disk usage, read speed versus write speed, and speed versus robustness. Each storage
    engine manages specific tables, so we refer to [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") tables, [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine") tables, and so on.
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL数据库的一个组件，负责存储、更新和查询数据的底层工作。在MySQL 5.5及更高版本中，**InnoDB**是新表的默认存储引擎，取代了`MyISAM`。不同的存储引擎在内存使用与磁盘使用、读取速度与写入速度、速度与稳定性等因素之间设计了不同的权衡。每个存储引擎管理特定的表，因此我们称之为[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")表、[`MyISAM`](myisam-storage-engine.html "第18.2章 MyISAM存储引擎")表等。
- en: The **MySQL Enterprise Backup** product is optimized for backing up `InnoDB`
    tables. It can also back up tables handled by `MyISAM` and other storage engines.
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: '**MySQL企业备份**产品针对备份`InnoDB`表进行了优化。它也可以备份由`MyISAM`和其他存储引擎处理的表。'
- en: See Also [InnoDB](glossary.html#glos_innodb), [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup),
    [table type](glossary.html#glos_table_type).
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[InnoDB](glossary.html#glos_innodb)、[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)、[表类型](glossary.html#glos_table_type)。
- en: stored generated column
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: 存储生成列
- en: A column whose values are computed from an expression included in the column
    definition. Column values are evaluated and stored when rows are inserted or updated.
    A stored generated column requires storage space and can be indexed.
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 一个列，其值是从列定义中包含的表达式计算而来。当插入或更新行时，列值会被评估和存储。存储生成列需要存储空间并且可以被索引。
- en: Contrast with **virtual generated column**.
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: 与**虚拟生成列**相对比。
- en: See Also [base column](glossary.html#glos_base_column), [generated column](glossary.html#glos_generated_column),
    [virtual generated column](glossary.html#glos_virtual_generated_column).
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[基本列](glossary.html#glos_base_column)、[生成列](glossary.html#glos_generated_column)、[虚拟生成列](glossary.html#glos_virtual_generated_column)。
- en: stored object
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: 存储对象
- en: A stored program or view.
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程或视图。
- en: stored program
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程
- en: A stored routine (procedure or function), trigger, or Event Scheduler event.
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程（过程或函数）、触发器或事件调度器事件。
- en: stored routine
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程
- en: A stored procedure or function.
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程或函数。
- en: strict mode
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式
- en: The general name for the setting controlled by the [`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)
    option. Turning on this setting causes certain conditions that are normally treated
    as warnings, to be considered errors. For example, certain invalid combinations
    of options related to **file format** and **row format**, that normally produce
    a warning and continue with default values, now cause the `CREATE TABLE` operation
    to fail. [`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)
    is enabled by default in MySQL 5.7.
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)选项控制的设置的通用名称。打开此设置会导致通常被视为警告的某些条件被视为错误。例如，通常会产生警告并继续使用默认值的某些无效的与**文件格式**和**行格式**相关的选项组合，现在会导致`CREATE
    TABLE`操作失败。在MySQL 5.7中，默认情况下启用了[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)。
- en: MySQL also has something called strict mode. See [Section 7.1.11, “Server SQL
    Modes”](sql-mode.html "7.1.11 Server SQL Modes").
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL还有一种称为严格模式的东西。参见[第7.1.11节，“服务器SQL模式”](sql-mode.html "7.1.11 服务器SQL模式")。
- en: See Also [file format](glossary.html#glos_file_format), [innodb_strict_mode](glossary.html#glos_innodb_strict_mode),
    [row format](glossary.html#glos_row_format).
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[文件格式](glossary.html#glos_file_format)，[innodb_strict_mode](glossary.html#glos_innodb_strict_mode)，[行格式](glossary.html#glos_row_format)。
- en: sublist
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: 子列表
- en: Within the list structure that represents the **buffer pool**, pages that are
    relatively old and relatively new are represented by different portions of the
    **list**. A set of parameters control the size of these portions and the dividing
    point between the new and old pages.
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 在代表**缓冲池**的列表结构中，相对较旧和相对较新的页面由**列表**的不同部分表示。一组参数控制这些部分的大小以及新旧页面之间的分界点。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [eviction](glossary.html#glos_eviction),
    [list](glossary.html#glos_list), [LRU](glossary.html#glos_lru).
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[缓冲池](glossary.html#glos_buffer_pool)，[驱逐](glossary.html#glos_eviction)，[列表](glossary.html#glos_list)，[LRU](glossary.html#glos_lru)。
- en: supremum record
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: 最大记录
- en: A **pseudo-record** in an index, representing the **gap** above the largest
    value in that index. If a transaction has a statement such as `SELECT ... FROM
    ... WHERE col > 10 FOR UPDATE;`, and the largest value in the column is 20, it
    is a lock on the supremum record that prevents other transactions from inserting
    even larger values such as 50, 100, and so on.
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: 在索引中的**伪记录**，代表该索引中最大值上方的**间隙**。如果一个事务有类似`SELECT ... FROM ... WHERE col > 10
    FOR UPDATE;`的语句，并且列中的最大值为20，则它是对最大记录的锁，阻止其他事务插入更大的值，如50、100等。
- en: See Also [gap](glossary.html#glos_gap), [infimum record](glossary.html#glos_infimum_record),
    [pseudo-record](glossary.html#glos_pseudo_record).
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[间隙](glossary.html#glos_gap)，[最小记录](glossary.html#glos_infimum_record)，[伪记录](glossary.html#glos_pseudo_record)。
- en: surrogate key
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 代理键
- en: Synonym name for **synthetic key**.
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: '**合成键**的同义词。'
- en: See Also [synthetic key](glossary.html#glos_synthetic_key).
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[合成键](glossary.html#glos_synthetic_key)。
- en: synthetic key
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 合成键
- en: An indexed column, typically a **primary key**, where the values are assigned
    arbitrarily. Often done using an **auto-increment** column. By treating the value
    as completely arbitrary, you can avoid overly restrictive rules and faulty application
    assumptions. For example, a numeric sequence representing employee numbers might
    have a gap if an employee was approved for hiring but never actually joined. Or
    employee number 100 might have a later hiring date than employee number 500, if
    they left the company and later rejoined. Numeric values also produce shorter
    values of predictable length. For example, storing numeric codes meaning “Road”,
    “Boulevard”, “Expressway”, and so on is more space-efficient than repeating those
    strings over and over.
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: 通常是**主键**的索引列，其值是任意分配的。通常使用**自增列**来完成。通过将值视为完全任意，您可以避免过于严格的规则和错误的应用假设。例如，代表员工编号的数字序列可能存在间隙，如果某个员工获得批准但实际上没有加入，则可能存在间隙。或者员工编号100可能比员工编号500有更晚的入职日期，如果他们离开公司后再次加入。数字值还可以产生可预测长度的较短值。例如，存储表示“路”、“大道”、“高速公路”等含义的数字代码比一遍又一遍地重复这些字符串更节省空间。
- en: Also known as a **surrogate key**. Contrast with **natural key**.
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: 也称为**代理键**。与**自然键**形成对比。
- en: See Also [auto-increment](glossary.html#glos_auto_increment), [natural key](glossary.html#glos_natural_key),
    [primary key](glossary.html#glos_primary_key), [surrogate key](glossary.html#glos_surrogate_key).
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[自增](glossary.html#glos_auto_increment)，[自然键](glossary.html#glos_natural_key)，[主键](glossary.html#glos_primary_key)，[代理键](glossary.html#glos_surrogate_key)。
- en: system tablespace
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 系统表空间
- en: One or more data files (**ibdata files**) containing the metadata for `InnoDB`-related
    objects, and the storage areas for the **change buffer**, and the **doublewrite
    buffer**. It may also contain table and index data for `InnoDB` tables if tables
    were created in the system tablespace instead of **file-per-table** or **general
    tablespaces**. The data and metadata in the system tablespace apply to all **databases**
    in a MySQL **instance**.
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个包含`InnoDB`相关对象元数据、**变更缓冲区**和**双写缓冲区**存储区域的数据文件（**ibdata文件**）。如果表是在系统表空间而不是**每表一个文件**或**通用表空间**中创建的，则它还可能包含`InnoDB`表的表和索引数据。系统表空间中的数据和元数据适用于MySQL
    **实例**中的所有**数据库**。
- en: Prior to MySQL 5.6.7, the default was to keep all `InnoDB` tables and indexes
    inside the system tablespace, often causing this file to become very large. Because
    the system tablespace never shrinks, storage problems could arise if large amounts
    of temporary data were loaded and then deleted. In MySQL 8.0, the default is **file-per-table**
    mode, where each table and its associated indexes are stored in a separate **.ibd
    file**. This default makes it easier to use `InnoDB` features that rely on `DYNAMIC`
    and `COMPRESSED` row formats, such as table **compression**, efficient storage
    of **off-page columns**, and large index key prefixes.
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 5.6.7之前，默认情况下是将所有`InnoDB`表和索引保存在系统表空间内，通常导致该文件变得非常庞大。由于系统表空间永远不会缩小，如果加载大量临时数据然后删除，可能会出现存储问题。在MySQL
    8.0中，默认是**每表一个文件**模式，其中每个表及其关联的索引存储在单独的**.ibd文件**中。这种默认设置使得更容易使用依赖于`DYNAMIC`和`COMPRESSED`行格式的`InnoDB`功能，例如表**压缩**、**离页列**的高效存储和大型索引键前缀。
- en: Keeping all table data in the system tablespace or in separate `.ibd` files
    has implications for storage management in general. The **MySQL Enterprise Backup**
    product might back up a small set of large files, or many smaller files. On systems
    with thousands of tables, the file system operations to process thousands of `.ibd`
    files can cause bottlenecks.
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有表数据保存在系统表空间或单独的`.ibd`文件中对存储管理有一般影响。**MySQL企业备份**产品可能会备份一小组大文件或许多较小的文件。在具有数千个表的系统中，处理数千个`.ibd`文件的文件系统操作可能会导致瓶颈。
- en: '`InnoDB` introduced general tablespaces in MySQL 5.7.6, which are also represented
    by `.ibd` files. General tablespaces are shared tablespaces created using [`CREATE
    TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE Statement") syntax.
    They can be created outside of the data directory, are capable of holding multiple
    tables, and support tables of all row formats.'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`在MySQL 5.7.6中引入了通用表空间，也由`.ibd`文件表示。通用表空间是使用[`CREATE TABLESPACE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement")语法创建的共享表空间。它们可以在数据目录之外创建，能够容纳多个表，并支持所有行格式的表。'
- en: See Also [change buffer](glossary.html#glos_change_buffer), [compression](glossary.html#glos_compression),
    [data dictionary](glossary.html#glos_data_dictionary), [database](glossary.html#glos_database),
    [doublewrite buffer](glossary.html#glos_doublewrite_buffer), [dynamic row format](glossary.html#glos_dynamic_row_format),
    [file-per-table](glossary.html#glos_file_per_table), [general tablespace](glossary.html#glos_general_tablespace),
    [.ibd file](glossary.html#glos_ibd_file), [ibdata file](glossary.html#glos_ibdata_file),
    [innodb_file_per_table](glossary.html#glos_innodb_file_per_table), [instance](glossary.html#glos_instance),
    [MySQL Enterprise Backup](glossary.html#glos_mysql_enterprise_backup), [off-page
    column](glossary.html#glos_off_page_column), [tablespace](glossary.html#glos_tablespace),
    [undo log](glossary.html#glos_undo_log).
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[变更缓冲区](glossary.html#glos_change_buffer)，[压缩](glossary.html#glos_compression)，[数据字典](glossary.html#glos_data_dictionary)，[数据库](glossary.html#glos_database)，[双写缓冲区](glossary.html#glos_doublewrite_buffer)，[动态行格式](glossary.html#glos_dynamic_row_format)，[每表一个文件](glossary.html#glos_file_per_table)，[通用表空间](glossary.html#glos_general_tablespace)，[.ibd文件](glossary.html#glos_ibd_file)，[ibdata文件](glossary.html#glos_ibdata_file)，[innodb_file_per_table](glossary.html#glos_innodb_file_per_table)，[实例](glossary.html#glos_instance)，[MySQL企业备份](glossary.html#glos_mysql_enterprise_backup)，[离页列](glossary.html#glos_off_page_column)，[表空间](glossary.html#glos_tablespace)，[撤销日志](glossary.html#glos_undo_log)。
- en: T
  id: totrans-1479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: T
- en: table
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: 表
- en: Each MySQL table is associated with a particular **storage engine**. **InnoDB**
    tables have particular **physical** and **logical** characteristics that affect
    performance, **scalability**, **backup**, administration, and application development.
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: 每个MySQL表都与特定的**存储引擎**相关联。**InnoDB**表具有影响性能、**可扩展性**、**备份**、管理和应用程序开发的特定**物理**和**逻辑**特征。
- en: 'In terms of file storage, an `InnoDB` table belongs to one of the following
    tablespace types:'
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 就文件存储而言，一个`InnoDB`表属于以下表空间类型之一：
- en: The shared `InnoDB` **system tablespace**, which is comprised of one or more
    **ibdata files**.
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享的`InnoDB` **系统表空间**，由一个或多个**ibdata文件**组成。
- en: A **file-per-table** tablespace, comprised of an individual **.ibd file**.
  id: totrans-1484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**文件-每表**表空间，由一个单独的**.ibd文件**组成。
- en: A shared **general tablespace**, comprised of an individual `.ibd` file. General
    tablespaces were introduced in MySQL 5.7.6.
  id: totrans-1485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个共享的**通用表空间**，由一个单独的`.ibd`文件组成。通用表空间是在MySQL 5.7.6中引入的。
- en: '**`.ibd`** data files contain both table and **index** data.'
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: '**`.ibd`**数据文件包含表和**索引**数据。'
- en: '`InnoDB` tables created in file-per-table tablespaces can use **DYNAMIC** or
    **COMPRESSED** row format. These row formats enable `InnoDB` features such as
    **compression**, efficient storage of **off-page columns**, and large index key
    prefixes. General tablespaces support all row formats.'
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件-每表表空间中创建的`InnoDB`表可以使用**DYNAMIC**或**COMPRESSED**行格式。这些行格式使`InnoDB`功能如**压缩**、**高效存储****离页列**和大索引键前缀成为可能。通用表空间支持所有行格式。
- en: The system tablespace supports tables that use **REDUNDANT**, **COMPACT**, and
    **DYNAMIC** row formats. System tablespace support for the **DYNAMIC** row format
    was added in MySQL 5.7.6.
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 系统表空间支持使用**REDUNDANT**、**COMPACT**和**DYNAMIC**行格式的表。系统表空间对**DYNAMIC**行格式的支持是在MySQL
    5.7.6中添加的。
- en: The **rows** of an `InnoDB` table are organized into an index structure known
    as the **clustered index**, with entries sorted based on the **primary key** columns
    of the table. Data access is optimized for queries that filter and sort on the
    primary key columns, and each index contains a copy of the associated primary
    key columns for each entry. Modifying values for any of the primary key columns
    is an expensive operation. Thus an important aspect of `InnoDB` table design is
    choosing a primary key with columns that are used in the most important queries,
    and keeping the primary key short, with rarely changing values.
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`表的**行**被组织成一个称为**聚簇索引**的索引结构，条目根据表的**主键**列进行排序。数据访问被优化为过滤和排序主键列的查询，并且每个索引包含与每个条目关联的主键列的副本。修改任何主键列的值是一项昂贵的操作。因此，`InnoDB`表设计的一个重要方面是选择一个在最重要的查询中使用的主键，并保持主键简短，具有不经常更改的值。'
- en: See Also [backup](glossary.html#glos_backup), [clustered index](glossary.html#glos_clustered_index),
    [compact row format](glossary.html#glos_compact_row_format), [compressed row format](glossary.html#glos_compressed_row_format),
    [compression](glossary.html#glos_compression), [dynamic row format](glossary.html#glos_dynamic_row_format),
    [Fast Index Creation](glossary.html#glos_fast_index_creation), [file-per-table](glossary.html#glos_file_per_table),
    [.ibd file](glossary.html#glos_ibd_file), [index](glossary.html#glos_index), [off-page
    column](glossary.html#glos_off_page_column), [primary key](glossary.html#glos_primary_key),
    [redundant row format](glossary.html#glos_redundant_row_format), [row](glossary.html#glos_row),
    [system tablespace](glossary.html#glos_system_tablespace), [tablespace](glossary.html#glos_tablespace).
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [备份](glossary.html#glos_backup), [聚簇索引](glossary.html#glos_clustered_index),
    [紧凑行格式](glossary.html#glos_compact_row_format), [压缩行格式](glossary.html#glos_compressed_row_format),
    [压缩](glossary.html#glos_compression), [动态行格式](glossary.html#glos_dynamic_row_format),
    [快速索引创建](glossary.html#glos_fast_index_creation), [文件-每表](glossary.html#glos_file_per_table),
    [.ibd文件](glossary.html#glos_ibd_file), [索引](glossary.html#glos_index), [离页列](glossary.html#glos_off_page_column),
    [主键](glossary.html#glos_primary_key), [冗余行格式](glossary.html#glos_redundant_row_format),
    [行](glossary.html#glos_row), [系统表空间](glossary.html#glos_system_tablespace), [表空间](glossary.html#glos_tablespace).
- en: table lock
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 表锁
- en: A lock that prevents any other **transaction** from accessing a table. `InnoDB`
    makes considerable effort to make such locks unnecessary, by using techniques
    such as **online DDL**, **row locks** and **consistent reads** for processing
    **DML** statements and **queries**. You can create such a lock through SQL using
    the `LOCK TABLE` statement; one of the steps in migrating from other database
    systems or MySQL storage engines is to remove such statements wherever practical.
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 一种锁，阻止任何其他**事务**访问表。`InnoDB`通过使用诸如**在线DDL**、**行锁**和**一致性读取**等技术，极力使这种锁变得不必要，用于处理**DML**语句和**查询**。您可以通过SQL使用`LOCK
    TABLE`语句创建这样的锁；从其他数据库系统或MySQL存储引擎迁移的步骤之一是在实际可行的情况下删除这些语句。
- en: See Also [consistent read](glossary.html#glos_consistent_read), [DML](glossary.html#glos_dml),
    [lock](glossary.html#glos_lock), [locking](glossary.html#glos_locking), [online
    DDL](glossary.html#glos_online_ddl), [query](glossary.html#glos_query), [row lock](glossary.html#glos_row_lock),
    [table](glossary.html#glos_table), [transaction](glossary.html#glos_transaction).
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[一致性读取](glossary.html#glos_consistent_read)，[DML](glossary.html#glos_dml)，[锁](glossary.html#glos_lock)，[锁定](glossary.html#glos_locking)，[在线DDL](glossary.html#glos_online_ddl)，[查询](glossary.html#glos_query)，[行锁](glossary.html#glos_row_lock)，[表](glossary.html#glos_table)，[事务](glossary.html#glos_transaction)。
- en: table scan
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 表扫描
- en: See [full table scan](glossary.html#glos_full_table_scan).
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[全表扫描](glossary.html#glos_full_table_scan)。
- en: table statistics
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 表统计信息
- en: See [statistics](glossary.html#glos_statistics).
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[统计信息](glossary.html#glos_statistics)。
- en: table type
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 表类型
- en: Obsolete synonym for **storage engine**. We refer to [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") tables, [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine") tables, and so on.
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: 过时的**存储引擎**的同义词。我们指的是[`InnoDB`](innodb-storage-engine.html "第17章 InnoDB存储引擎")表，[`MyISAM`](myisam-storage-engine.html
    "第18.2章 MyISAM存储引擎")表等。
- en: See Also [InnoDB](glossary.html#glos_innodb), [storage engine](glossary.html#glos_storage_engine).
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[InnoDB](glossary.html#glos_innodb)，[存储引擎](glossary.html#glos_storage_engine)。
- en: tablespace
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 表空间
- en: A data file that can hold data for one or more `InnoDB` **tables** and associated
    **indexes**.
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数据文件，可以存储一个或多个`InnoDB`**表**和相关**索引**的数据。
- en: The **system tablespace** contains the `InnoDB` **data dictionary**, and prior
    to MySQL 5.6 holds all other `InnoDB` tables by default.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统表空间**包含`InnoDB`**数据字典**，在MySQL 5.6之前默认情况下还包含所有其他`InnoDB`表。'
- en: The [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    option, enabled by default in MySQL 5.6 and higher, allows tables to be created
    in their own tablespaces. File-per-table tablespaces support features such as
    efficient storage of **off-page columns**, table compression, and transportable
    tablespaces. See [Section 17.6.3.2, “File-Per-Table Tablespaces”](innodb-file-per-table-tablespaces.html
    "17.6.3.2 File-Per-Table Tablespaces") for details.
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)选项在MySQL
    5.6及更高版本中默认启用，允许表在自己的表空间中创建。每表一个文件的表空间支持诸如**离页列**的高效存储、表压缩和可传输表空间等功能。有关详细信息，请参见[第17.6.3.2节，“每表一个文件的表空间”](innodb-file-per-table-tablespaces.html
    "17.6.3.2 每表一个文件的表空间")。'
- en: '`InnoDB` introduced general tablespaces in MySQL 5.7.6\. General tablespaces
    are shared tablespaces created using [`CREATE TABLESPACE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement") syntax. They can be created outside of
    the MySQL data directory, are capable of holding multiple tables, and support
    tables of all row formats.'
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`在MySQL 5.7.6中引入了通用表空间。通用表空间是使用[`CREATE TABLESPACE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE语句")语法创建的共享表空间。它们可以在MySQL数据目录之外创建，能够容纳多个表，并支持所有行格式的表。'
- en: MySQL NDB Cluster also groups its tables into tablespaces. See [Section 25.6.11.1,
    “NDB Cluster Disk Data Objects”](mysql-cluster-disk-data-objects.html "25.6.11.1 NDB
    Cluster Disk Data Objects") for details.
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL NDB Cluster也将其表组织成表空间。有关详细信息，请参见[第25.6.11.1节，“NDB Cluster磁盘数据对象”](mysql-cluster-disk-data-objects.html
    "25.6.11.1 NDB Cluster磁盘数据对象")。
- en: See Also [compressed row format](glossary.html#glos_compressed_row_format),
    [data dictionary](glossary.html#glos_data_dictionary), [data files](glossary.html#glos_data_files),
    [file-per-table](glossary.html#glos_file_per_table), [general tablespace](glossary.html#glos_general_tablespace),
    [index](glossary.html#glos_index), [innodb_file_per_table](glossary.html#glos_innodb_file_per_table),
    [system tablespace](glossary.html#glos_system_tablespace), [table](glossary.html#glos_table).
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[压缩行格式](glossary.html#glos_compressed_row_format)，[数据字典](glossary.html#glos_data_dictionary)，[数据文件](glossary.html#glos_data_files)，[每表一个文件](glossary.html#glos_file_per_table)，[通用表空间](glossary.html#glos_general_tablespace)，[索引](glossary.html#glos_index)，[innodb每表一个文件](glossary.html#glos_innodb_file_per_table)，[系统表空间](glossary.html#glos_system_tablespace)，[表格](glossary.html#glos_table)。
- en: Tcl
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: Tcl
- en: A programming language originating in the Unix scripting world. Sometimes extended
    by code written in **C**, **C++**, or **Java**. For the open-source Tcl **API**
    for MySQL, see [Section 31.12, “MySQL Tcl API”](apis-tcl.html "31.12 MySQL Tcl
    API").
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 一种起源于Unix脚本世界的编程语言。有时会通过**C**、**C++**或**Java**编写的代码进行扩展。有关MySQL的开源Tcl **API**，请参见[第31.12节，“MySQL
    Tcl API”](apis-tcl.html "31.12 MySQL Tcl API")。
- en: See Also [API](glossary.html#glos_api).
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[API](glossary.html#glos_api)。
- en: temporary table
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: 临时表
- en: A **table** whose data does not need to be truly permanent. For example, temporary
    tables might be used as storage areas for intermediate results in complicated
    calculations or transformations; this intermediate data would not need to be recovered
    after a crash. Database products can take various shortcuts to improve the performance
    of operations on temporary tables, by being less scrupulous about writing data
    to disk and other measures to protect the data across restarts.
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**表格**，其数据不需要真正永久保存。例如，临时表格可能被用作复杂计算或转换中间结果的存储区域；这些中间数据在崩溃后不需要恢复。数据库产品可以采取各种捷径来提高对临时表格操作的性能，比如对数据写入磁盘不那么谨慎以及其他措施来保护数据在重新启动时的安全性。
- en: Sometimes, the data itself is removed automatically at a set time, such as when
    the transaction ends or when the session ends. With some database products, the
    table itself is removed automatically too.
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，数据本身会在设定的时间自动删除，比如事务结束或会话结束时。有些数据库产品会自动删除表本身。
- en: See Also [table](glossary.html#glos_table).
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[表格](glossary.html#glos_table)。
- en: temporary tablespace
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: 临时表空间
- en: '`InnoDB` uses two types of temporary tablespace. *Session temporary tablespaces*
    store user-created temporary tables and internal temporary tables created by the
    optimizer. The *global temporary tablespace* stores *rollback segments* for changes
    made to user-created temporary tables.'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`使用两种类型的临时表空间。*会话临时表空间*存储用户创建的临时表和优化器创建的内部临时表。*全局临时表空间*存储对用户创建的临时表所做更改的*回滚段*。'
- en: See Also [global temporary tablespace](glossary.html#glos_global_temporary_tablespace),
    [session temporary tablespace](glossary.html#glos_session_temporary_tablespace),
    [temporary table](glossary.html#glos_temporary_table).
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[全局临时表空间](glossary.html#glos_global_temporary_tablespace)，[会话临时表空间](glossary.html#glos_session_temporary_tablespace)，[临时表](glossary.html#glos_temporary_table)。
- en: text collection
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: 文本集合
- en: The set of columns included in a **FULLTEXT index**.
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: '**全文索引**中包含的列集。'
- en: See Also [FULLTEXT index](glossary.html#glos_fulltext_index).
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[全文索引](glossary.html#glos_fulltext_index)。
- en: TGS
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: TGS
- en: A Kerberos ticket-granting server. TGS can also refer to the ticket-granting
    service provided by a ticket-granting server.
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Kerberos票据授权服务器。TGS也可以指代票据授权服务器提供的票据授权服务。
- en: See Also [ticket-granting server](glossary.html#glos_ticket_granting_server).
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[票据授权服务器](glossary.html#glos_ticket_granting_server)。
- en: TGT
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: TGT
- en: See [ticket-granting ticket](glossary.html#glos_ticket_granting_ticket).
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[票据授权票](glossary.html#glos_ticket_granting_ticket)。
- en: thread
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: 线程
- en: A unit of processing that is typically more lightweight than a **process**,
    allowing for greater **concurrency**.
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: 一个通常比**进程**更轻量级的处理单元，允许更大的**并发**。
- en: See Also [concurrency](glossary.html#glos_concurrency), [master thread](glossary.html#glos_master_thread),
    [process](glossary.html#glos_process), [Pthreads](glossary.html#glos_pthreads).
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[并发性](glossary.html#glos_concurrency)，[主线程](glossary.html#glos_master_thread)，[进程](glossary.html#glos_process)，[Pthreads](glossary.html#glos_pthreads)。
- en: ticket-granting server
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 票据授权服务器
- en: In Kerberos, a server that provides tickets. The ticket-granting server (TGS)
    combined with an authentication server (AS) make up a key distribution center
    (KDC).
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kerberos中，提供票据的服务器。票据授权服务器（TGS）与认证服务器（AS）组成密钥分发中心（KDC）。
- en: TGS can also refer to the ticket-granting service provided by the ticket-granting
    server.
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: TGS也可以指代票据授予服务器提供的票据授予服务。
- en: See Also [authentication server](glossary.html#glos_authentication_server),
    [key distribution center](glossary.html#glos_key_distribution_center).
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[认证服务器](glossary.html#glos_authentication_server)，[密钥分发中心](glossary.html#glos_key_distribution_center)。
- en: ticket-granting ticket
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 授予票据
- en: In Kerberos, a ticket-granting ticket is presented to the ticket-granting server
    (TGS) to obtain service tickets for service access.
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kerberos中，授予票据被呈现给票据授予服务器（TGS）以获取用于服务访问的服务票据。
- en: See Also [ticket-granting server](glossary.html#glos_ticket_granting_server).
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[票据授予服务器](glossary.html#glos_ticket_granting_server)。
- en: Tomcat
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat
- en: An open source **J2EE** application server, implementing the Java Servlet and
    JavaServer Pages programming technologies. Consists of a web server and Java servlet
    container. With MySQL, typically used in conjunction with **Connector/J**.
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 一个开源的**J2EE**应用服务器，实现了Java Servlet和JavaServer Pages编程技术。由Web服务器和Java Servlet容器组成。通常与**Connector/J**一起与MySQL一起使用。
- en: See Also [J2EE](glossary.html#glos_j2ee).
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[J2EE](glossary.html#glos_j2ee)。
- en: torn page
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: 撕裂页面
- en: An error condition that can occur due to a combination of I/O device configuration
    and hardware failure. If data is written out in chunks smaller than the `InnoDB`
    **page size** (by default, 16KB), a hardware failure while writing could result
    in only part of a page being stored to disk. The `InnoDB` **doublewrite buffer**
    guards against this possibility.
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: 由于I/O设备配置和硬件故障的组合可能导致的错误条件。如果数据以小于`InnoDB` **页面大小**（默认为16KB）的块写出，那么在写入时发生硬件故障可能导致只有部分页面被存储到磁盘。`InnoDB`
    **双写缓冲区**可防范这种可能性。
- en: See Also [doublewrite buffer](glossary.html#glos_doublewrite_buffer).
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[双写缓冲区](glossary.html#glos_doublewrite_buffer)。
- en: TPS
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: TPS
- en: Acronym for “**transactions** per second”, a unit of measurement sometimes used
    in benchmarks. Its value depends on the **workload** represented by a particular
    benchmark test, combined with factors that you control such as the hardware capacity
    and database configuration.
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: “**每秒事务**”的缩写，有时在基准测试中使用的一种度量单位。其值取决于特定基准测试所代表的**工作负载**，以及您控制的因素，如硬件容量和数据库配置。
- en: See Also [transaction](glossary.html#glos_transaction), [workload](glossary.html#glos_workload).
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[事务](glossary.html#glos_transaction)，[工作负载](glossary.html#glos_workload)。
- en: transaction
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: 事务
- en: Transactions are atomic units of work that can be **committed** or **rolled
    back**. When a transaction makes multiple changes to the database, either all
    the changes succeed when the transaction is committed, or all the changes are
    undone when the transaction is rolled back.
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: 事务是可以**提交**或**回滚**的原子工作单元。当事务对数据库进行多个更改时，当事务提交时，要么所有更改都成功，要么当事务回滚时所有更改都被撤消。
- en: Database transactions, as implemented by `InnoDB`, have properties that are
    collectively known by the acronym **ACID**, for atomicity, consistency, isolation,
    and durability.
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库事务，由`InnoDB`实现，具有被称为**ACID**的首字母缩写的特性，即原子性、一致性、隔离性和持久性。
- en: See Also [ACID](glossary.html#glos_acid), [commit](glossary.html#glos_commit),
    [isolation level](glossary.html#glos_isolation_level), [lock](glossary.html#glos_lock),
    [rollback](glossary.html#glos_rollback).
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[ACID](glossary.html#glos_acid)，[提交](glossary.html#glos_commit)，[隔离级别](glossary.html#glos_isolation_level)，[锁](glossary.html#glos_lock)，[回滚](glossary.html#glos_rollback)。
- en: transaction ID
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: 事务ID
- en: An internal field associated with each **row**. This field is physically changed
    by [`INSERT`](insert.html "15.2.7 INSERT Statement"), [`UPDATE`](update.html "15.2.17 UPDATE
    Statement"), and [`DELETE`](delete.html "15.2.2 DELETE Statement") operations
    to record which **transaction** has locked the row.
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: 与每个**行**相关联的内部字段。此字段在[`INSERT`](insert.html "15.2.7 INSERT Statement")、[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")和[`DELETE`](delete.html "15.2.2 DELETE Statement")操作中物理更改，以记录哪个**事务**锁定了该行。
- en: See Also [implicit row lock](glossary.html#glos_implicit_row_lock), [row](glossary.html#glos_row),
    [transaction](glossary.html#glos_transaction).
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[隐式行锁](glossary.html#glos_implicit_row_lock)，[行](glossary.html#glos_row)，[事务](glossary.html#glos_transaction)。
- en: transparent page compression
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: 透明页面压缩
- en: A feature added in MySQL 5.7.8 that permits page-level compression for `InnoDB`
    tables that reside in **file-per-table** tablespaces. Page compression is enabled
    by specifying the `COMPRESSION` attribute with [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") or [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement"). For more information, see [Section 17.9.2, “InnoDB Page Compression”](innodb-page-compression.html
    "17.9.2 InnoDB Page Compression").
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 5.7.8 中新增的功能，允许对驻留在**按表存储**表空间中的`InnoDB`表进行页面级压缩。通过在 [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") 或 [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") 中指定 `COMPRESSION` 属性来启用页面压缩。更多信息，请参见 [Section 17.9.2, “InnoDB
    Page Compression”](innodb-page-compression.html "17.9.2 InnoDB Page Compression")。
- en: See Also [file-per-table](glossary.html#glos_file_per_table), [hole punching](glossary.html#glos_hole_punching),
    [sparse file](glossary.html#glos_sparse_file).
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [按表存储](glossary.html#glos_file_per_table)，[孔洞打孔](glossary.html#glos_hole_punching)，[稀疏文件](glossary.html#glos_sparse_file)。
- en: transportable tablespace
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: 可传输表空间
- en: A feature that allows a **tablespace** to be moved from one instance to another.
    Traditionally, this has not been possible for `InnoDB` tablespaces because all
    table data was part of the **system tablespace**. In MySQL 5.6 and higher, the
    [`FLUSH TABLES ... FOR EXPORT`](flush.html#flush-tables-for-export-with-list)
    syntax prepares an `InnoDB` table for copying to another server; running [`ALTER
    TABLE ... DISCARD TABLESPACE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    and [`ALTER TABLE ... IMPORT TABLESPACE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") on the other server brings the copied data file into the other instance.
    A separate **.cfg file**, copied along with the **.ibd file**, is used to update
    the table metadata (for example the **space ID**) as the tablespace is imported.
    See [Section 17.6.1.3, “Importing InnoDB Tables”](innodb-table-import.html "17.6.1.3 Importing
    InnoDB Tables") for usage information.
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 一项允许**表空间**从一个实例移动到另一个实例的功能。传统上，对于`InnoDB`表空间，这是不可能的，因为所有表数据都是系统表空间的一部分。在 MySQL
    5.6 及更高版本中，[`FLUSH TABLES ... FOR EXPORT`](flush.html#flush-tables-for-export-with-list)
    语法准备了一个`InnoDB`表以便复制到另一个服务器；在另一个服务器上运行 [`ALTER TABLE ... DISCARD TABLESPACE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") 和 [`ALTER TABLE ... IMPORT TABLESPACE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") 将复制的数据文件带入另一个实例。随着**.ibd 文件**一起复制的单独的**.cfg 文件**用于在导入表空间时更新表元数据（例如**空间
    ID**）。有关使用信息，请参见 [Section 17.6.1.3, “导入 InnoDB 表”](innodb-table-import.html "17.6.1.3 Importing
    InnoDB Tables")。
- en: See Also [.cfg file](glossary.html#glos_cfg_file), [.ibd file](glossary.html#glos_ibd_file),
    [space ID](glossary.html#glos_space_id), [system tablespace](glossary.html#glos_system_tablespace),
    [tablespace](glossary.html#glos_tablespace).
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [.cfg 文件](glossary.html#glos_cfg_file)，[.ibd 文件](glossary.html#glos_ibd_file)，[空间
    ID](glossary.html#glos_space_id)，[系统表空间](glossary.html#glos_system_tablespace)，[表空间](glossary.html#glos_tablespace)。
- en: troubleshooting
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'The process of determining the source of a problem. Some of the resources for
    troubleshooting MySQL problems include:'
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: 确定问题来源的过程。一些用于故障排除 MySQL 问题的资源包括：
- en: '[Section 2.9.2.1, “Troubleshooting Problems Starting the MySQL Server”](starting-server-troubleshooting.html
    "2.9.2.1 Troubleshooting Problems Starting the MySQL Server")'
  id: totrans-1560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Section 2.9.2.1, “启动 MySQL 服务器时出现问题的故障排除”](starting-server-troubleshooting.html
    "2.9.2.1 Troubleshooting Problems Starting the MySQL Server")'
- en: '[Section 8.2.22, “Troubleshooting Problems Connecting to MySQL”](problems-connecting.html
    "8.2.22 Troubleshooting Problems Connecting to MySQL")'
  id: totrans-1561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Section 8.2.22, “连接到 MySQL 时出现问题的故障排除”](problems-connecting.html "8.2.22 Troubleshooting
    Problems Connecting to MySQL")'
- en: '[Section B.3.3.2, “How to Reset the Root Password”](resetting-permissions.html
    "B.3.3.2 How to Reset the Root Password")'
  id: totrans-1562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Section B.3.3.2, “如何重置根密码”](resetting-permissions.html "B.3.3.2 How to Reset
    the Root Password")'
- en: '[Section B.3.2, “Common Errors When Using MySQL Programs”](common-errors.html
    "B.3.2 Common Errors When Using MySQL Programs")'
  id: totrans-1563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Section B.3.2, “使用 MySQL 程序时的常见错误”](common-errors.html "B.3.2 Common Errors
    When Using MySQL Programs")'
- en: '[Section 17.21, “InnoDB Troubleshooting”](innodb-troubleshooting.html "17.21 InnoDB
    Troubleshooting").'
  id: totrans-1564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Section 17.21, “InnoDB 故障排除”](innodb-troubleshooting.html "17.21 InnoDB Troubleshooting")。'
- en: truncate
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: 截断
- en: 'A **DDL** operation that removes the entire contents of a table, while leaving
    the table and related indexes intact. Contrast with **drop**. Although conceptually
    it has the same result as a `DELETE` statement with no `WHERE` clause, it operates
    differently behind the scenes: `InnoDB` creates a new empty table, drops the old
    table, then renames the new table to take the place of the old one. Because this
    is a DDL operation, it cannot be **rolled back**.'
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**DDL**操作，删除表的所有内容，同时保留表和相关索引。与**drop**相对。尽管概念上与没有`WHERE`子句的`DELETE`语句具有相同的结果，但在幕后操作方式不同：`InnoDB`创建一个新的空表，删除旧表，然后将新表重命名为旧表的位置。由于这是一个DDL操作，因此无法**回滚**。
- en: If the table being truncated contains **foreign keys** that reference another
    table, the truncation operation uses a slower method of operation, deleting one
    row at a time so that corresponding rows in the referenced table can be deleted
    as needed by any `ON DELETE CASCADE` clause. (MySQL 5.5 and higher do not allow
    this slower form of truncate, and return an error instead if foreign keys are
    involved. In this case, use a `DELETE` statement instead.
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: 如果被截断的表包含引用另一个表的**外键**，则截断操作使用较慢的操作方法，逐行删除，以便根据任何`ON DELETE CASCADE`子句需要删除引用表中的相应行。
    （MySQL 5.5及更高版本不允许这种较慢的截断��式，如果涉及外键，则会返回错误。在这种情况下，使用`DELETE`语句。
- en: See Also [DDL](glossary.html#glos_ddl), [drop](glossary.html#glos_drop), [foreign
    key](glossary.html#glos_foreign_key), [rollback](glossary.html#glos_rollback).
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [DDL](glossary.html#glos_ddl), [drop](glossary.html#glos_drop), [外键](glossary.html#glos_foreign_key),
    [回滚](glossary.html#glos_rollback)。
- en: truststore
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: 信任存储库
- en: See Also [SSL](glossary.html#glos_ssl).
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [SSL](glossary.html#glos_ssl)。
- en: tuple
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: 元组
- en: A technical term designating an ordered set of elements. It is an abstract notion,
    used in formal discussions of database theory. In the database field, tuples are
    usually represented by the columns of a table row. They could also be represented
    by the result sets of queries, for example, queries that retrieved only some columns
    of a table, or columns from joined tables.
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: 一个技术术语，表示一组有序元素。这是一个抽象概念，在数据库理论的正式讨论中使用。在数据库领域，元组通常由表行的列表示。它们也可以由查询的结果集表示，例如，仅检索表的某些列或连接表的列的查询。
- en: See Also [cursor](glossary.html#glos_cursor).
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [游标](glossary.html#glos_cursor)。
- en: two-phase commit
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: 两阶段提交
- en: An operation that is part of a distributed **transaction**, under the **XA**
    specification. (Sometimes abbreviated as 2PC.) When multiple databases participate
    in the transaction, either all databases **commit** the changes, or all databases
    **roll back** the changes.
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式**事务**的一部分的操作，符合**XA**规范。（有时缩写为2PC。）当多个数据库参与事务时，要么所有数据库**提交**更改，要么所有数据库**回滚**更改。
- en: See Also [commit](glossary.html#glos_commit), [rollback](glossary.html#glos_rollback),
    [transaction](glossary.html#glos_transaction), [XA](glossary.html#glos_xa).
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [提交](glossary.html#glos_commit), [回滚](glossary.html#glos_rollback), [事务](glossary.html#glos_transaction),
    [XA](glossary.html#glos_xa)。
- en: U
  id: totrans-1577
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: U
- en: undo
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销
- en: Data that is maintained throughout the life of a **transaction**, recording
    all changes so that they can be undone in case of a **rollback** operation. It
    is stored in **undo logs** either within the **system tablespace** (in MySQL 5.7
    or earlier) or in separate **undo tablespaces**. As of MySQL 8.0, undo logs reside
    in undo tablespaces by default.
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: 在**事务**的整个生命周期中维护的数据，记录所有更改，以便在**回滚**操作时可以撤消这些更改。它存储在**撤销日志**中，要么在**系统表空间**内（在MySQL
    5.7或更早版本中），要么在单独的**撤销表空间**中。从MySQL 8.0开始，默认情况下，撤销日志驻留在撤销表空间中。
- en: See Also [rollback](glossary.html#glos_rollback), [rollback segment](glossary.html#glos_rollback_segment),
    [system tablespace](glossary.html#glos_system_tablespace), [transaction](glossary.html#glos_transaction),
    [undo log](glossary.html#glos_undo_log), [undo tablespace](glossary.html#glos_undo_tablespace).
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [回滚](glossary.html#glos_rollback), [回滚段](glossary.html#glos_rollback_segment),
    [系统表空间](glossary.html#glos_system_tablespace), [事务](glossary.html#glos_transaction),
    [撤销日志](glossary.html#glos_undo_log), [撤销表空间](glossary.html#glos_undo_tablespace)。
- en: undo buffer
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销缓冲区
- en: See [undo log](glossary.html#glos_undo_log).
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [撤销日志](glossary.html#glos_undo_log)。
- en: undo log
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销日志
- en: A storage area that holds copies of data modified by active **transactions**.
    If another transaction needs to see the original data (as part of a **consistent
    read** operation), the unmodified data is retrieved from this storage area.
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 一个存储区域，保存由活动**事务**修改的数据的副本。如果另一个事务需要查看原始数据（作为**一致性读取**操作的一部分），则从该存储区域检索未修改的数据。
- en: In MySQL 5.6 and MySQL 5.7, you can use the [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)
    variable have undo logs reside in **undo tablespaces**, which can be placed on
    another storage device such as an **SSD**. In MySQL 8.0, undo logs reside in two
    default undo tablespaces that are created when MySQL is initialized, and additional
    undo tablespaces can be created using [`CREATE UNDO TABLESPACE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement") syntax.
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 5.6和MySQL 5.7中，您可以使用[`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)变量使撤销日志驻留在**撤销表空间**中，这些表空间可以放置在另一个存储设备上，如**SSD**。
    在MySQL 8.0中，撤销日志驻留在初始化MySQL时创建的两个默认撤销表空间中，并且可以使用[`CREATE UNDO TABLESPACE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement")语法创建额外的撤销表空间。
- en: The undo log is split into separate portions, the **insert undo buffer** and
    the **update undo buffer**.
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销日志被分为两个独立部分，**插入撤销缓冲区**和**更新撤销缓冲区**。
- en: See Also [consistent read](glossary.html#glos_consistent_read), [rollback segment](glossary.html#glos_rollback_segment),
    [SSD](glossary.html#glos_ssd), [system tablespace](glossary.html#glos_system_tablespace),
    [transaction](glossary.html#glos_transaction), [undo tablespace](glossary.html#glos_undo_tablespace).
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[一致性读取](glossary.html#glos_consistent_read)，[回滚段](glossary.html#glos_rollback_segment)，[SSD](glossary.html#glos_ssd)，[系统表空间](glossary.html#glos_system_tablespace)，[事务](glossary.html#glos_transaction)，[撤销表空间](glossary.html#glos_undo_tablespace)。
- en: undo log segment
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销日志段
- en: A collection of **undo logs**. Undo log segments exists within **rollback segments**.
    An undo log segment might contain undo logs from multiple transactions. An undo
    log segment can only be used by one transaction at a time but can be reused after
    it is released at transaction **commit** or **rollback**. May also be referred
    to as an “undo segment”.
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**撤销日志**的集合。 撤销日志段存在于**回滚段**中。 撤销日志段可能包含来自多个事务的撤销日志。 撤销日志段一次只能被一个事务使用，但在事务**提交**或**回滚**后可以重新使用。
    也可以称为“撤销段”。
- en: See Also [commit](glossary.html#glos_commit), [rollback](glossary.html#glos_rollback),
    [rollback segment](glossary.html#glos_rollback_segment), [undo log](glossary.html#glos_undo_log).
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[提交](glossary.html#glos_commit)，[回滚](glossary.html#glos_rollback)，[回滚段](glossary.html#glos_rollback_segment)，[撤销日志](glossary.html#glos_undo_log)。
- en: undo tablespace
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销表空间
- en: An undo tablespace contains **undo logs**. Undo logs exist within **undo log
    segments**, which are contained within **rollback segments**. Rollback segments
    have traditionally resided in the system tablespace. As of MySQL 5.6, rollback
    segments can reside in undo tablespaces. In MySQL 5.6 and MySQL 5.7, the number
    of undo tablespaces is controlled by the [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)
    configuration option. In MySQL 8.0, two default undo tablespaces are created when
    the MySQL instance is initialized, and additional undo tablespaces can be created
    using [`CREATE UNDO TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE
    Statement") syntax.
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: 一个撤销表空间包含**撤销日志**。 撤销日志存在于**撤销日志段**中，这些段包含在**回滚段**中。 回滚段传统上驻留在系统表空间中。 从MySQL
    5.6开始，回滚段可以驻留在撤销表空间中。 在MySQL 5.6和MySQL 5.7中，撤销表空间的数量由[`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)配置选项控制。
    在MySQL 8.0中，当初始化MySQL实例时会创建两个默认的撤销表空间，并且可以使用[`CREATE UNDO TABLESPACE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement")语法创建额外的撤销表空间。
- en: For more information, see [Section 17.6.3.4, “Undo Tablespaces”](innodb-undo-tablespaces.html
    "17.6.3.4 Undo Tablespaces").
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参见[Section 17.6.3.4, “Undo Tablespaces”](innodb-undo-tablespaces.html
    "17.6.3.4 Undo Tablespaces")。
- en: See Also [rollback segment](glossary.html#glos_rollback_segment), [system tablespace](glossary.html#glos_system_tablespace),
    [undo log](glossary.html#glos_undo_log), [undo log segment](glossary.html#glos_undo_log_segment).
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[回滚段](glossary.html#glos_rollback_segment)，[系统表空间](glossary.html#glos_system_tablespace)，[撤销日志](glossary.html#glos_undo_log)，[撤销日志段](glossary.html#glos_undo_log_segment)。
- en: Unicode
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode
- en: A system for supporting national characters, character sets, code pages, and
    other internationalization aspects in a flexible and standardized way.
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: 一种支持国家字符、字符集、代码页和其他国际化方面的系统，以灵活和标准化的方式支持。
- en: Unicode support is an important aspect of the **ODBC** standard. **Connector/ODBC**
    5.1 is a Unicode driver, as opposed to Connector/ODBC 3.51, which is an **ANSI**
    driver.
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode支持是**ODBC**标准的一个重要方面。 **Connector/ODBC** 5.1是一个Unicode驱动程序，而Connector/ODBC
    3.51是一个**ANSI**驱动程序。
- en: See Also [ANSI](glossary.html#glos_ansi), [Connector/ODBC](glossary.html#glos_connector_odbc),
    [ODBC](glossary.html#glos_odbc).
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[ANSI](glossary.html#glos_ansi)，[Connector/ODBC](glossary.html#glos_connector_odbc)，[ODBC](glossary.html#glos_odbc)。
- en: unique constraint
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一约束
- en: A kind of **constraint** that asserts that a column cannot contain any duplicate
    values. In terms of **relational** algebra, it is used to specify 1-to-1 relationships.
    For efficiency in checking whether a value can be inserted (that is, the value
    does not already exist in the column), a unique constraint is supported by an
    underlying **unique index**.
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 一种**约束**，它断言一个列不能包含任何重复值。在**关系**代数方面，它用于指定1对1的关系。为了有效地检查是否可以插入一个值（即该值在列中不存在），底层支持**唯一索引**的唯一约束。
- en: See Also [constraint](glossary.html#glos_constraint), [relational](glossary.html#glos_relational),
    [unique index](glossary.html#glos_unique_index).
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[约束](glossary.html#glos_constraint)，[关系](glossary.html#glos_relational)，[唯一索引](glossary.html#glos_unique_index)。
- en: unique index
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一索引
- en: An index on a column or set of columns that have a **unique constraint**. Because
    the index is known not to contain any duplicate values, certain kinds of lookups
    and count operations are more efficient than in the normal kind of index. Most
    of the lookups against this type of index are simply to determine if a certain
    value exists or not. The number of values in the index is the same as the number
    of rows in the table, or at least the number of rows with non-null values for
    the associated columns.
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有**唯一约束**的列或列集上的索引。由于已知索引不包含任何重复值，因此某些种类的查找和计数操作比普通类型的索引更有效。对这种类型的索引的大多数查找只是为了确定某个值是否存在。索引中的值数量与表中的行数相同，或者至少与相关列的非空值的行数相同。
- en: '**Change buffering** optimization does not apply to unique indexes. As a workaround,
    you can temporarily set `unique_checks=0` while doing a bulk data load into an
    `InnoDB` table.'
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: '**更改缓冲**优化不适用于唯一索引。作为解决方法，您可以在将数据大量加载到`InnoDB`表时，临时将`unique_checks=0`设置为0。'
- en: See Also [cardinality](glossary.html#glos_cardinality), [change buffering](glossary.html#glos_change_buffering),
    [unique constraint](glossary.html#glos_unique_constraint), [unique key](glossary.html#glos_unique_key).
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[基数](glossary.html#glos_cardinality)，[更改缓冲](glossary.html#glos_change_buffering)，[唯一约束](glossary.html#glos_unique_constraint)，[唯一键](glossary.html#glos_unique_key)。
- en: unique key
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一键
- en: The set of columns (one or more) comprising a **unique index**. When you can
    define a `WHERE` condition that matches exactly one row, and the query can use
    an associated unique index, the lookup and error handling can be performed very
    efficiently.
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: 由一个或多个列组成的**唯一索引**集。当您可以定义一个匹配恰好一行的`WHERE`条件，并且查询可以使用相关的唯一索引时，查找和错误处理可以非常高效地执行。
- en: See Also [cardinality](glossary.html#glos_cardinality), [unique constraint](glossary.html#glos_unique_constraint),
    [unique index](glossary.html#glos_unique_index).
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[基数](glossary.html#glos_cardinality)，[唯一约束](glossary.html#glos_unique_constraint)，[唯一索引](glossary.html#glos_unique_index)。
- en: UPN
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: UPN
- en: See [user principal name](glossary.html#glos_user_principal_name).
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[用户主体名称](glossary.html#glos_user_principal_name)。
- en: user principal name
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: 用户主体名称
- en: The name for a Kerberos named entity that represents a user.
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 代表用户的Kerberos命名实体的名称。
- en: See Also [principal](glossary.html#glos_principal).
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[主体](glossary.html#glos_principal)。
- en: V
  id: totrans-1614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: V
- en: variable-length type
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: 变长类型
- en: A data type of variable length. [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types"), [`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY
    Types"), and [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") and [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") types are variable-length types.
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: 变长数据类型。[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")、[`VARBINARY`](binary-varbinary.html
    "13.3.3 BINARY和VARBINARY类型")、[`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")和[`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")类型是变长类型。
- en: '`InnoDB` treats fixed-length fields greater than or equal to 768 bytes in length
    as variable-length fields, which can be stored **off-page**. For example, a `CHAR(255)`
    column can exceed 768 bytes if the maximum byte length of the character set is
    greater than 3, as it is with `utf8mb4`.'
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`将长度大于或等于768字节的固定长度字段视为可存储在**离页**的变长字段。例如，如果字符集的最大字节长度大于3，例如`utf8mb4`，那么`CHAR(255)`列可以超过768字节。'
- en: See Also [off-page column](glossary.html#glos_off_page_column), [overflow page](glossary.html#glos_overflow_page).
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[离页列](glossary.html#glos_off_page_column)，[溢出页](glossary.html#glos_overflow_page)。
- en: victim
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: 受害者
- en: The **transaction** that is automatically chosen to be **rolled back** when
    a **deadlock** is detected. `InnoDB` rolls back the transaction that has updated
    the fewest rows.
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测到**死锁**时，自动选择要**回滚**的**事务**。`InnoDB`会回滚更新了最少行的事务。
- en: '**Deadlock detection** can be disabled using the [`innodb_deadlock_detect`](innodb-parameters.html#sysvar_innodb_deadlock_detect)
    configuration option.'
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`innodb_deadlock_detect`](innodb-parameters.html#sysvar_innodb_deadlock_detect)配置选项来禁用**死锁检测**。
- en: See Also [deadlock](glossary.html#glos_deadlock), [deadlock detection](glossary.html#glos_deadlock_detection),
    [innodb_lock_wait_timeout](glossary.html#glos_innodb_lock_wait_timeout), [transaction](glossary.html#glos_transaction).
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[死锁](glossary.html#glos_deadlock)，[死锁检测](glossary.html#glos_deadlock_detection)，[innodb_lock_wait_timeout](glossary.html#glos_innodb_lock_wait_timeout)，[事务](glossary.html#glos_transaction)。
- en: view
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: 视图
- en: A stored query that when invoked produces a result set. A view acts as a virtual
    table.
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: 一个存储的查询，调用时会产生一个结果集。视图充当虚拟表。
- en: virtual column
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟列
- en: See [virtual generated column](glossary.html#glos_virtual_generated_column).
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[虚拟生成列](glossary.html#glos_virtual_generated_column)。
- en: virtual generated column
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟生成列
- en: A column whose values are computed from an expression included in the column
    definition. Column values are not stored, but are evaluated when rows are read,
    immediately after any `BEFORE` triggers. A virtual generated column takes no storage.
    `InnoDB` supports secondary indexes on virtual generated columns.
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: 一个列，其值是从列定义中包含的表达式计算出来的。列值不会被存储，而是在读取行时立即计算，紧随任何`BEFORE`触发器之后。虚拟生成列不占用存储空间。`InnoDB`支持对虚拟生成列进行二级索引。
- en: Contrast with **stored generated column**.
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 与**存储生成列**相对比。
- en: See Also [base column](glossary.html#glos_base_column), [generated column](glossary.html#glos_generated_column),
    [stored generated column](glossary.html#glos_stored_generated_column).
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[基本列](glossary.html#glos_base_column)，[生成列](glossary.html#glos_generated_column)，[存储生成列](glossary.html#glos_stored_generated_column)。
- en: virtual index
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟索引
- en: A virtual index is a **secondary index** on one or more **virtual generated
    columns** or on a combination of virtual generated columns and regular columns
    or stored generated columns. For more information, see [Section 15.1.20.9, “Secondary
    Indexes and Generated Columns”](create-table-secondary-indexes.html "15.1.20.9 Secondary
    Indexes and Generated Columns").
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟索引是一个在一个或多个**虚拟生成列**或虚拟生成列与常规列或存储生成列的组合上的**二级索引**。有关更多信息，请参阅[第15.1.20.9节，“二级索引和生成列”](create-table-secondary-indexes.html
    "15.1.20.9 二级索引和生成列")。
- en: See Also [secondary index](glossary.html#glos_secondary_index), [stored generated
    column](glossary.html#glos_stored_generated_column), [virtual generated column](glossary.html#glos_virtual_generated_column).
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[二级索引](glossary.html#glos_secondary_index)，[存储生成列](glossary.html#glos_stored_generated_column)，[虚拟生成列](glossary.html#glos_virtual_generated_column)。
- en: Visual Studio
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio
- en: 'For supported versions of Visual Studio, see the following references:'
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的Visual Studio版本，请参考以下参考资料：
- en: 'Connector/NET: [Connector/NET Versions](/doc/connector-net/en/connector-net-versions.html)'
  id: totrans-1636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Connector/NET: [Connector/NET版本](/doc/connector-net/zh/connector-net-versions.html)'
- en: 'Connector/C++ 8.0: [Platform Support and Prerequisites](/doc/connector-cpp/8.3/en/connector-cpp-introduction.html#connector-cpp-prerequisites)'
  id: totrans-1637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Connector/C++ 8.0: [平台支持和先决条件](/doc/connector-cpp/8.3/zh/connector-cpp-introduction.html#connector-cpp-prerequisites)'
- en: See Also [Connector/C++](glossary.html#glos_connector_c__), [Connector/NET](glossary.html#glos_connector_net).
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[Connector/C++](glossary.html#glos_connector_c__)，[Connector/NET](glossary.html#glos_connector_net)。
- en: W
  id: totrans-1639
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: W
- en: wait
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: 等待
- en: When an operation, such as acquiring a **lock**, **mutex**, or **latch**, cannot
    be completed immediately, `InnoDB` pauses and tries again. The mechanism for pausing
    is elaborate enough that this operation has its own name, the **wait**. Individual
    threads are paused using a combination of internal `InnoDB` scheduling, operating
    system `wait()` calls, and short-duration **spin** loops.
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个操作（如获取**锁**、**互斥锁**或**闩锁**）无法立即完成时，`InnoDB`会暂停并重试。暂停的机制足够复杂，以至于这个操作有自己的名字，即**等待**。通过内部`InnoDB`调度、操作系统的`wait()`调用和短暂的**自旋**循环来暂停单个线程。
- en: On systems with heavy load and many transactions, you might use the output from
    the `SHOW INNODB STATUS` command or **Performance Schema** to determine whether
    threads are spending too much time waiting, and if so, how you can improve **concurrency**.
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: 在负载重、交易繁多的系统中，您可以使用`SHOW INNODB STATUS`命令的输出或**性能模式**来确定线程是否花费过多时间在等待上，以及如何改善**并发性**。
- en: See Also [concurrency](glossary.html#glos_concurrency), [latch](glossary.html#glos_latch),
    [lock](glossary.html#glos_lock), [mutex](glossary.html#glos_mutex), [Performance
    Schema](glossary.html#glos_performance_schema), [spin](glossary.html#glos_spin).
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[并发性](glossary.html#glos_concurrency)，[闩锁](glossary.html#glos_latch)，[锁](glossary.html#glos_lock)，[互斥体](glossary.html#glos_mutex)，[性能模式](glossary.html#glos_performance_schema)，[自旋](glossary.html#glos_spin)。
- en: warm backup
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: 热备份
- en: A **backup** taken while the database is running, but that restricts some database
    operations during the backup process. For example, tables might become read-only.
    For busy applications and websites, you might prefer a **hot backup**.
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库运行时进行的**备份**，但在备份过程中限制了一些数据库操作。例如，表可能变为只读。对于繁忙的应用程序和网站，您可能更喜欢**热备份**。
- en: See Also [backup](glossary.html#glos_backup), [cold backup](glossary.html#glos_cold_backup),
    [hot backup](glossary.html#glos_hot_backup).
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[backup](glossary.html#glos_backup)，[cold backup](glossary.html#glos_cold_backup)，[hot
    backup](glossary.html#glos_hot_backup)。
- en: warm up
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: 预热
- en: To run a system under a typical **workload** for some time after startup, so
    that the **buffer pool** and other memory regions are filled as they would be
    under normal conditions. This process happens naturally over time when a MySQL
    server is restarted or subjected to a new workload.
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动后的一段时间内运行系统以模拟典型**工作负载**，以便**缓冲池**和其他内存区域填充，就像在正常情况下一样。当MySQL服务器重新启动或受到新的工作负载时，这个过程会自然发生。
- en: Typically, you run a workload for some time to warm up the buffer pool before
    running performance tests, to ensure consistent results across multiple runs;
    otherwise, performance might be artificially low during the first run.
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在运行性能测试之前，您需要运行一段时间的工作负载来预热缓冲池，以确保多次运行时结果一致；否则，在第一次运行期间性能可能人为降低。
- en: In MySQL 5.6, you can speed up the warmup process by enabling the [`innodb_buffer_pool_dump_at_shutdown`](innodb-parameters.html#sysvar_innodb_buffer_pool_dump_at_shutdown)
    and [`innodb_buffer_pool_load_at_startup`](innodb-parameters.html#sysvar_innodb_buffer_pool_load_at_startup)
    configuration options, to bring the contents of the buffer pool back into memory
    after a restart. These options are enabled by default in MySQL 5.7\. See [Section 17.8.3.6,
    “Saving and Restoring the Buffer Pool State”](innodb-preload-buffer-pool.html
    "17.8.3.6 Saving and Restoring the Buffer Pool State").
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 5.6中，您可以通过启用[`innodb_buffer_pool_dump_at_shutdown`](innodb-parameters.html#sysvar_innodb_buffer_pool_dump_at_shutdown)和[`innodb_buffer_pool_load_at_startup`](innodb-parameters.html#sysvar_innodb_buffer_pool_load_at_startup)配置选项来加快预热过程，以在重新启动后将缓冲池的内容重新加载到内存中。这些选项在MySQL
    5.7中默认启用。参见[第17.8.3.6节，“保存和恢复缓冲池状态”](innodb-preload-buffer-pool.html "17.8.3.6 保存和恢复缓冲池状态")。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [workload](glossary.html#glos_workload).
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[buffer pool](glossary.html#glos_buffer_pool)，[workload](glossary.html#glos_workload)。
- en: workload
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: 工作负载
- en: The combination and volume of **SQL** and other database operations, performed
    by a database application during typical or peak usage. You can subject the database
    to a particular workload during performance testing to identify **bottlenecks**,
    or during capacity planning.
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库应用程序在典型或高峰使用期间执行的**SQL**和其他数据库操作的组合和数量。您可以在性能测试期间使数据库受特定工作负载以识别**瓶颈**，或在容量规划期间进行。
- en: See Also [bottleneck](glossary.html#glos_bottleneck), [CPU-bound](glossary.html#glos_cpu_bound),
    [disk-bound](glossary.html#glos_disk_bound), [SQL](glossary.html#glos_sql).
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[bottleneck](glossary.html#glos_bottleneck)，[CPU-bound](glossary.html#glos_cpu_bound)，[disk-bound](glossary.html#glos_disk_bound)，[SQL](glossary.html#glos_sql)。
- en: write combining
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: 写合并
- en: An optimization technique that reduces write operations when **dirty pages**
    are **flushed** from the `InnoDB` **buffer pool**. If a row in a page is updated
    multiple times, or multiple rows on the same page are updated, all of those changes
    are stored to the data files in a single write operation rather than one write
    for each change.
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: 一种优化技术，当**脏页**从`InnoDB` **缓冲池**中**刷新**时，减少写操作。如果页面中的行被多次更新，或者同一页上的多行被更新，所有这些更改都将存储到数据文件中的单个写操作中，而不是每个更改都写一次。
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [dirty page](glossary.html#glos_dirty_page),
    [flush](glossary.html#glos_flush).
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[buffer pool](glossary.html#glos_buffer_pool)，[dirty page](glossary.html#glos_dirty_page)，[flush](glossary.html#glos_flush)。
- en: X
  id: totrans-1658
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: X
- en: XA
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: XA
- en: A standard interface for coordinating distributed **transactions**, allowing
    multiple databases to participate in a transaction while maintaining **ACID**
    compliance. For full details, see [Section 15.3.8, “XA Transactions”](xa.html
    "15.3.8 XA Transactions").
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: 一个标准的接口，用于协调分布式**事务**，允许多个数据库参与事务同时保持**ACID**兼容性。有关详细信息，请参见[第15.3.8节，“XA事务”](xa.html
    "15.3.8 XA Transactions")。
- en: XA Distributed Transaction support is enabled by default.
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
  zh: XA分布式事务支持默认启用。
- en: See Also [ACID](glossary.html#glos_acid), [binary log](glossary.html#glos_binary_log),
    [commit](glossary.html#glos_commit), [transaction](glossary.html#glos_transaction),
    [two-phase commit](glossary.html#glos_two_phase_commit).
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[ACID](glossary.html#glos_acid), [binary log](glossary.html#glos_binary_log),
    [commit](glossary.html#glos_commit), [transaction](glossary.html#glos_transaction),
    [two-phase commit](glossary.html#glos_two_phase_commit).
- en: Y
  id: totrans-1663
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Y
- en: young
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: 年轻的
- en: A characteristic of a **page** in the `InnoDB` **buffer pool** meaning that
    it has been accessed recently, and so is moved within the buffer pool data structure,
    so that it is not **flushed** too soon by the **LRU** algorithm. This term is
    used in some **INFORMATION_SCHEMA** column names of tables related to the buffer
    pool.
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: '**InnoDB** **缓冲池**中的**页面**的特征，意味着它最近被访问过，并且在缓冲池数据结构内移动，以便不会被**LRU**算法过早**刷新**。这个术语在与缓冲池相关的一些**INFORMATION_SCHEMA**表的列名中使用。'
- en: See Also [buffer pool](glossary.html#glos_buffer_pool), [flush](glossary.html#glos_flush),
    [INFORMATION_SCHEMA](glossary.html#glos_information_schema), [LRU](glossary.html#glos_lru),
    [page](glossary.html#glos_page).
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[buffer pool](glossary.html#glos_buffer_pool), [flush](glossary.html#glos_flush),
    [INFORMATION_SCHEMA](glossary.html#glos_information_schema), [LRU](glossary.html#glos_lru),
    [page](glossary.html#glos_page).
