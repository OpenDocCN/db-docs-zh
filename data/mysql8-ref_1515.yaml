- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-replication-configuring-consistency-guarantees.html](https://dev.mysql.com/doc/refman/8.0/en/group-replication-configuring-consistency-guarantees.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-replication-configuring-consistency-guarantees.html](https://dev.mysql.com/doc/refman/8.0/en/group-replication-configuring-consistency-guarantees.html)
- en: 20.5.3.2 Configuring Transaction Consistency Guarantees
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.5.3.2 配置事务一致性保证
- en: 'Although the [Transaction Synchronization Points](group-replication-understanding-consistency-guarantees.html#group-replication-synchronization-points
    "Transaction Synchronization Points") section explains that conceptually there
    are two synchronization points from which you can choose: on read or on write,
    these terms were a simplification and the terms used in Group Replication are:
    *before* and *after* transaction execution. The consistency level can have a different
    impact on read-only (RO) and read-write (RW) transactions processed by the group
    as demonstrated in this section.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 [事务同步点](group-replication-understanding-consistency-guarantees.html#group-replication-synchronization-points
    "事务同步点") 部分解释了概念上有两个可以选择的同步点：读取或写入时，但这些术语是一种简化，Group Replication 中使用的术语是：*事务执行前*
    和 *事务执行后*。一致性级别对由组处理的只读（RO）和读写（RW）事务可能产生不同的影响，正如本节所示。
- en: '[How to Choose a Consistency Level](group-replication-configuring-consistency-guarantees.html#group-replication-choose-consistency-level
    "How to Choose a Consistency Level")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何选择一致性级别](group-replication-configuring-consistency-guarantees.html#group-replication-choose-consistency-level
    "如何选择一致性级别")'
- en: '[Impacts of Consistency Levels](group-replication-configuring-consistency-guarantees.html#group-replication-consistency-level-impacts
    "Impacts of Consistency Levels")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一致性级别的影响](group-replication-configuring-consistency-guarantees.html#group-replication-consistency-level-impacts
    "一致性级别的影响")'
- en: '[Impact of Consistency on Primary Election](group-replication-configuring-consistency-guarantees.html#group-replication-consistency-level-impact-election
    "Impact of Consistency on Primary Election")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一致性对主选举的影响](group-replication-configuring-consistency-guarantees.html#group-replication-consistency-level-impact-election
    "一致性对主选举的影响")'
- en: '[Permitted Queries Under Consistency Rules](group-replication-configuring-consistency-guarantees.html#group-replication-nonblocking
    "Permitted Queries Under Consistency Rules")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一致性规则下允许的查询](group-replication-configuring-consistency-guarantees.html#group-replication-nonblocking
    "一致性规则下允许的查询")'
- en: 'The following list shows the possible consistency levels that you can configure
    in Group Replication using the [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    variable, in order of increasing transaction consistency guarantee:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表显示了在 Group Replication 中可以使用 [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    变量配置的可能一致性级别，按照事务一致性保证递增的顺序排列：
- en: '`EVENTUAL`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EVENTUAL`'
- en: Both RO and RW transactions do not wait for preceding transactions to be applied
    before executing. This was the behavior of Group Replication before the [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    variable was added. A RW transaction does not wait for other members to apply
    a transaction. This means that a transaction could be externalized on one member
    before the others. This also means that in the event of a primary failover, the
    new primary can accept new RO and RW transactions before the previous primary
    transactions are all applied. RO transactions could result in outdated values,
    RW transactions could result in a rollback due to conflicts.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无论是 RO 还是 RW 事务在执行时都不会等待前置事务被应用。这是在添加 [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    变量之前 Group Replication 的行为。一个 RW 事务不会等待其他成员应用事务。这意味着一个事务在其他成员之前可能在一个成员上被外部化。这也意味着在主故障转移的情况下，新的主节点可以在之前的主节点的所有事务都被应用之前接受新的
    RO 和 RW 事务。RO 事务可能导致过时的值，RW 事务可能由于冲突而导致回滚。
- en: '`BEFORE_ON_PRIMARY_FAILOVER`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BEFORE_ON_PRIMARY_FAILOVER`'
- en: New RO or RW transactions with a newly elected primary that is applying backlog
    from the old primary are held (not applied) until any backlog has been applied.
    This ensures that when a primary failover happens, intentionally or not, clients
    always see the latest value on the primary. This guarantees consistency, but means
    that clients must be able to handle the delay in the event that a backlog is being
    applied. Usually this delay should be minimal, but it does depend on the size
    of the backlog.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有新选举的主要成员并正在应用旧主要成员的积压的新 RO 或 RW 事务被保留（未应用），直到任何积压被应用。这确保了主要故障转移发生时，无论是故意还是不经意，客户端始终看到主要成员上的最新值。这保证了一致性，但意味着客户端必须能够处理正在应用积压时的延迟。通常，此延迟应该很小，但这取决于积压的大小。
- en: '`BEFORE`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BEFORE`'
- en: A RW transaction waits for all preceding transactions to complete before being
    applied. A RO transaction waits for all preceding transactions to complete before
    being executed. This ensures that this transaction reads the latest value by only
    affecting the latency of the transaction. This reduces the overhead of synchronization
    on every RW transaction, by ensuring synchronization is used only on RO transactions.
    This consistency level also includes the consistency guarantees provided by `BEFORE_ON_PRIMARY_FAILOVER`.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RW 事务等待所有先前事务完成后再应用。RO 事务等待所有先前事务完成后再执行。这确保了此事务通过仅影响事务的延迟来读取最新值。通过仅在 RO 事务上使用同步，可以减少每个
    RW 事务上的同步开销。此一致性级别还包括`BEFORE_ON_PRIMARY_FAILOVER`提供的一致性保证。
- en: '`AFTER`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AFTER`'
- en: A RW transaction waits until its changes have been applied to all of the other
    members. This value has no effect on RO transactions. This mode ensures that when
    a transaction is committed on the local member, any subsequent transaction reads
    the written value or a more recent value on any group member. Use this mode with
    a group that is used for predominantly RO operations to ensure that applied RW
    transactions are applied everywhere once they commit. This could be used by your
    application to ensure that subsequent reads fetch the latest data which includes
    the latest writes. This reduces the overhead of synchronization on every RO transaction,
    by ensuring synchronization is used only on RW transactions. This consistency
    level also includes the consistency guarantees provided by `BEFORE_ON_PRIMARY_FAILOVER`.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RW 事务等待直到其更改已应用于所有其他成员。此值对 RO 事务没有影响。此模式确保当本地成员上提交事务时，任何后续事务都会读取已写入的值或任何组成员上更近的值。在主要用于
    RO 操作的组中使用此模式，以确保一旦提交，已应用的 RW 事务就会被应用到所有地方。您的应用程序可以使用此模式来确保后续读取获取包括最新写入的最新数据。通过仅在
    RW 事务上使用同步，可以减少每个 RO 事务上的同步开销。此一致性级别还包括`BEFORE_ON_PRIMARY_FAILOVER`提供的一致性保证。
- en: '`BEFORE_AND_AFTER`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BEFORE_AND_AFTER`'
- en: A RW transaction waits for 1) all preceding transactions to complete before
    being applied and 2) until its changes have been applied on other members. A RO
    transaction waits for all preceding transactions to complete before execution
    takes place. This consistency level also includes the consistency guarantees provided
    by `BEFORE_ON_PRIMARY_FAILOVER`.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RW 事务等待 1) 所有先前事务完成后再应用和 2) 直到其更改已应用于其他成员。RO 事务等待所有先前事务完成后再执行。此一致性级别还包括`BEFORE_ON_PRIMARY_FAILOVER`提供的一致性保证。
- en: The `BEFORE` and `BEFORE_AND_AFTER` consistency levels can be both used on RO
    and RW transactions. The `AFTER` consistency level has no impact on RO transactions,
    because they do not generate changes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`BEFORE` 和 `BEFORE_AND_AFTER` 一致性级别都可以用于 RO 和 RW 事务。`AFTER` 一致性级别对 RO 事务没有影响，因为它们不生成更改。'
- en: How to Choose a Consistency Level
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 如何选择一致性级别
- en: 'The different consistency levels provide flexibility to both DBAs, who can
    use them to set up their infrastructure; and to developers who can use the consistency
    level that best suits their application''s requirements. The following scenarios
    show how to choose a consistency guarantee level based on how you use your group:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的一致性级别为 DBA 和开发人员提供了灵活性，他们可以使用这些级别来设置基础设施；开发人员可以根据其应用程序的要求选择最适合的一致性级别。以下场景展示了如何根据您使用组的方式选择一致性保证级别：
- en: '*Scenario 1* you want to load balance your reads without worrying about stale
    reads, your group write operations are considerably fewer than your group read
    operations. In this case, you should choose `AFTER`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景 1* 您希望负载均衡读取而不必担心过时读取，您的组写入操作明显少于组读取操作。在这种情况下，您应选择`AFTER`。'
- en: '*Scenario 2* you have a data set that applies a lot of writes and you want
    to do occasional reads without having to worry about reading stale data. In this
    case, you should choose `BEFORE`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景 2* 你有一个应用了大量写入的数据集，并且希望偶尔进行读取而不必担心读取过时数据。在这种情况下，你应该选择`BEFORE`。'
- en: '*Scenario 3* you want specific transactions in your workload to always read
    up-to-date data from the group, so that whenever that sensitive data is updated
    (such as credentials for a file or similar data) you want to enforce that reads
    always read the most up to date value. In this case, you should choose `BEFORE`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景 3* 你希望工作负载中的特定事务始终从组中读取最新数据，因此每当敏感数据更新（例如文件的凭据或类似数据）时，你希望强制读取始终读取最新值。在这种情况下，你应该选择`BEFORE`。'
- en: '*Scenario 4* you have a group that has predominantly read-only (RO) data, you
    want your read-write (RW) transactions to be applied everywhere once they commit,
    so that subsequent reads are done on up-to-date data that includes your latest
    writes and you do not pay the synchronization on every RO transaction, but only
    on RW ones. In this case, you should choose `AFTER`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景 4* 你有一个主要包含只读（RO）数据的组，你希望你的读写（RW）事务一旦提交就在所有地方应用，以便后续读取是在包括最新写入的最新数据上进行的，而且你不需要在每个RO事务上进行同步，而只需在RW事务上进行。在这种情况下，你应该选择`AFTER`。'
- en: '*Scenario 5* you have a group that has predominantly read-only data, you want
    your read-write (RW) transactions to always read up-to-date data from the group
    and to be applied everywhere once they commit, so that subsequent reads are done
    on up-to-date data that includes your latest write and you do not pay the synchronization
    on every read-only (RO) transaction, but only on RW ones. In this case, you should
    choose `BEFORE_AND_AFTER`.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景 5* 你有一个主要包含只读数据的组，你希望你的读写（RW）事务始终从组中读取最新数据，并且一旦提交就在所有地方应用，以便后续读取是在包括最新写入的最新数据上进行的，而且你不需要在每个只读（RO）事务上进行同步，而只需在RW事务上进行。在这种情况下，你应该选择`BEFORE_AND_AFTER`。'
- en: You have the freedom to choose the scope at which the consistency level is enforced.
    This is important because consistency levels could have a negative impact on group
    performance if you set them at a global scope. Therefore you can configure the
    consistency level of a group by using the [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    system variable at different scopes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你有自由选择强制执行一致性级别的范围。这很重要，因为如果在全局范围设置一致性级别，可能会对组性能产生负面影响。因此，你可以通过在不同范围使用[`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)系统变量来配置组的一致性级别。
- en: 'To enforce the consistency level on the current session, use the session scope:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在当前会话上强制执行一致性级别，请使用会话范围：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To enforce the consistency level on all sessions, use the global scope:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要在所有会话上强制执行一致性级别，请使用全局范围：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The possibility of setting the consistency level on specific sessions enables
    you to take advantage of scenarios such as:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定会话上设置一致性级别的可能性使你能够利用以下场景：
- en: '*Scenario 6* A given system handles several instructions that do not require
    a strong consistency level, but one kind of instruction does require strong consistency:
    managing access permissions to documents;. In this scenario, the system changes
    access permissions and it wants to be sure that all clients see the correct permission.
    You only need to `SET @@SESSION.group_replication_consistency= ‘AFTER’`, on those
    instructions and leave the other instructions to run with `EVENTUAL` set at the
    global scope.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景 6* 给定系统处理几个不需要强一致性级别的指令，但一种指令确实需要强一致性：管理对文档的访问权限。在这种情况下，系统更改访问权限并希望确保所有客户端看到正确的权限。你只需要在这些指令上`SET
    @@SESSION.group_replication_consistency= ‘AFTER’`，并将其他指令保留在全局范围设置为`EVENTUAL`。'
- en: '*Scenario 7* On the same system as described in Scenario 6, every day an instruction
    needs to do some analytical processing, and as such it requires to always read
    the most up-to-date data. To achieve this, you only need to `SET @@SESSION.group_replication_consistency=
    ‘BEFORE’` on that specific instruction.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*场景 7* 在与场景 6 中描述的相同系统上，每天都需要执行一些分析处理的指令，并且因此需要始终读取最新数据。为了实现这一点，你只需要在该特定指令上`SET
    @@SESSION.group_replication_consistency= ‘BEFORE’`。'
- en: To summarize, you do not need to run all transactions with a specific consistency
    level, especially if only some transactions actually require it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，你不需要以特定的一致性级别运行所有事务，特别是如果只有一些事务实际上需要它。
- en: Note that all read-write transactions are totally ordered in Group Replication,
    so even when you set the consistency level to `AFTER` for the current session
    this transaction waits until its changes are applied on all members, which means
    waiting for this and all preceding transactions that could be in the secondaries'
    queues. In practice, the consistency level `AFTER` waits for everything until
    and including this transaction.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在组复制中，所有读写事务都是完全有序的，因此，即使您将一致性级别设置为`AFTER`，对于当前会话，此事务也会等待直到其更改在所有成员上应用，这意味着等待此事务和所有可能在次要队列中的前置事务。实际上，一致性级别`AFTER`会等待一切，直到包括此事务在内。
- en: Impacts of Consistency Levels
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 一致性级别的影响
- en: Another way to classify the consistency levels is in terms of impact on the
    group, that is, the repercussions that the consistency levels have on the other
    members.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种分类一致性级别的方式是根据对组的影响来进行，即，一致性级别对其他成员的影响。
- en: The `BEFORE` consistency level, apart from being ordered on the transaction
    stream, only impacts on the local member. That is, it does not require coordination
    with the other members and does not have repercussions on their transactions.
    In other words, `BEFORE` only impacts the transactions on which it is used.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在事务流中排序外，一致性级别`BEFORE`仅影响本地成员。也就是说，它不需要与其他成员协调，也不会对其事务产生影响。换句话说，`BEFORE`仅影响使用它的事务。
- en: The `AFTER` and `BEFORE_AND_AFTER` consistency levels do have side-effects on
    concurrent transactions executed on other members. These consistency levels make
    the other members transactions wait if transactions with the `EVENTUAL` consistency
    level start while a transaction with `AFTER` or `BEFORE_AND_AFTER` is executing.
    The other members wait until the `AFTER` transaction is committed on that member,
    even if the other member's transactions have the `EVENTUAL` consistency level.
    In other words, `AFTER` and `BEFORE_AND_AFTER` impact *all* `ONLINE` group members.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性级别`AFTER`和`BEFORE_AND_AFTER`对在其他成员上执行的并发事务确实会产生副作用。如果具有`EVENTUAL`一致性级别的事务在执行具有`AFTER`或`BEFORE_AND_AFTER`的事务时开始，其他成员的事务将等待，直到`AFTER`事务在该成员上提交，即使其他成员的事务具有`EVENTUAL`一致性级别。换句话说，`AFTER`和`BEFORE_AND_AFTER`影响*所有*`ONLINE`组成员。
- en: 'To illustrate this further, imagine a group with 3 members, M1, M2 and M3\.
    On member M1 a client issues:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步说明这一点，想象一个有3个成员M1、M2和M3的组。在成员M1上，一个客户端发出：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, while the above transaction is being applied, on member M2 a client issues:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在应用上述事务时，成员M2上的一个客户端发出：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this situation, even though the second transaction's consistency level is
    `EVENTUAL`, because it starts executing while the first transaction is already
    in the commit phase on M2, the second transaction has to wait for the first transaction
    to finish the commit and only then can it execute.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，即使第二个事务的一致性级别是`EVENTUAL`，因为它在第一个事务已经在M2上处于提交阶段时开始执行，第二个事务必须等待第一个事务完成提交，然后才能执行。
- en: You can only use the consistency levels `BEFORE`, `AFTER` and `BEFORE_AND_AFTER`
    on `ONLINE` members, attempting to use them on members in other states causes
    a session error.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你只能在`ONLINE`成员上使用一致性级别`BEFORE`、`AFTER`和`BEFORE_AND_AFTER`，尝试在其他状态的成员上使用它们会导致会话错误。
- en: Transactions whose consistency level is not `EVENTUAL` hold execution until
    a timeout, configured by [`wait_timeout`](server-system-variables.html#sysvar_wait_timeout)
    value is reached, which defaults to 8 hours. If the timeout is reached an `ER_GR_HOLD_WAIT_TIMEOUT`
    error is thrown.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性级别不是`EVENTUAL`的事务会等待直到达到由[`wait_timeout`](server-system-variables.html#sysvar_wait_timeout)值配置的超时，其默认值为8小时。如果超时，将抛出`ER_GR_HOLD_WAIT_TIMEOUT`错误。
- en: Impact of Consistency on Primary Election
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 一致性对初选的影响
- en: This section describes how a group's consistency level impacts on a single-primary
    group that has elected a new primary. Such a group automatically detects failures
    and adjusts the view of the members that are active, in other words the membership
    configuration. Furthermore, if a group is deployed in single-primary mode, whenever
    the group's membership changes there is a check performed to detect if there is
    still a primary member in the group. If there is none, a new one is selected from
    the list of secondary members. Typically, this is known as the secondary promotion.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了一个群组的一致性级别如何影响已选出新主节点的单主群组。这样的群组会自动检测故障并调整活跃成员的视图，换句话说，成员配置。此外，如果一个群组以单主模式部署，每当群组成员发生变化时，都会执行检查以检测群组中是否仍有主成员。如果没有，则从次要成员列表中选择一个新的主成员。通常，这被称为次要晋升。
- en: Given the fact that the system detects failures and reconfigures itself automatically,
    the user may also expect that once the promotion takes place, the new primary
    is in the exact state, data-wise, as that of the old one. In other words, the
    user may expect that there is no backlog of replicated transactions to be applied
    on the new primary once he is able to read from and write to it. In practical
    terms, the user may expect that once his application fails-over to the new primary,
    there would be no chance, even if temporarily, to read old data or write into
    old data records.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于系统能够自动检测故障并自动重新配置自身，用户可能也期望一旦晋升发生，新的主节点在数据方面与旧主节点完全相同。换句话说，用户可能期望在他能够从新主节点读取和写入时，新主节点上没有待应用的复制事务。实际上，用户可能期望一旦他的应用故障切换到新主节点，甚至暂时也不会有机会读取旧数据或写入旧数据记录。
- en: 'When flow control is activated and properly tuned on a group, there is only
    a small chance of transiently reading stale data from a newly elected primary
    immediately after the promotion, as there should not be a backlog, or if there
    is one it should be small. Moreover, you might have a proxy or middleware layers
    that govern application accesses to the primary after a promotion and enforce
    the consistency criteria at that level. If your group members are using MySQL
    8.0.14 or higher, you can specify the behavior of the new primary once it is promoted
    using the [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    variable, which controls whether a newly elected primary blocks both reads and
    writes until after the backlog is fully applied or if it behaves in the manner
    of members running MySQL 8.0.13 or earlier. If the [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    option was set to `BEFORE_ON_PRIMARY_FAILOVER` on a newly elected primary which
    has backlog to apply, and transactions are issued against the new primary while
    it is still applying the backlog, incoming transactions are blocked until the
    backlog is fully applied. Thus, the following anomalies are prevented:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当在群组上激活并正确调整流量控制时，在晋升后立即从新选出的主节点暂时读取陈旧数据的机会很小，因为不应该有积压，或者如果有积压，那么应该很小。此外，您可能会有一个代理或中间件层，在晋升后管理应用程序对主节点的访问并在该级别强制执行一致性标准。如果您的群组成员使用的是
    MySQL 8.0.14 或更高版本，您可以使用 [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    变量指定新主节点在晋升后的行为，该变量控制新选出的主节点是否阻止读取和写入，直到积压完全应用或者如果它的行为类似于运行 MySQL 8.0.13 或更早版本的成员。如果在有待应用的积压的新选出的主节点上设置了
    [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    选项为 `BEFORE_ON_PRIMARY_FAILOVER`，并且在新主节点仍在应用积压时发出事务，则传入事务将被阻止，直到积压完全应用。因此，以下异常情况被防止：
- en: No stale reads for read-only and read-write transactions. This prevents stale
    reads from being externalized to the application by the new primary.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于只读和读写事务，不会出现陈旧的读取。这可以防止陈旧的读取通过新主节点外部化到应用程序中。
- en: No spurious roll backs for read-write transactions, due to write-write conflicts
    with replicated read-write transactions still in the backlog waiting to be applied.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于与仍在等待应用的积压中的复制读写事务发生写-写冲突，因此读写事务不会出现虚假回滚。
- en: 'No read skew on read-write transactions, such as:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在读写事务中没有读取偏差，例如：
- en: '[PRE4]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This query should not cause a conflict but writes outdated values.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个查询不应该引起冲突，但会写入过时的数值。
- en: To summarize, when [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    is set to `BEFORE_ON_PRIMARY_FAILOVER` you are choosing to prioritize consistency
    over availability, because reads and writes are held whenever a new primary is
    elected. This is the trade-off you have to consider when configuring your group.
    It should also be remembered that if flow control is working correctly, backlog
    should be minimal. Note that the higher consistency levels `BEFORE`, `AFTER`,
    and `BEFORE_AND_AFTER` also include the consistency guarantees provided by `BEFORE_ON_PRIMARY_FAILOVER`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，当 [`group_replication_consistency`](group-replication-system-variables.html#sysvar_group_replication_consistency)
    设置为 `BEFORE_ON_PRIMARY_FAILOVER` 时，您选择优先考虑一致性而不是可用性，因为每当选举新的主要成员时，读写操作都会被保留。这是在配置组时必须考虑的权衡。还应记住，如果流量控制正常工作，backlog
    应该是最小的。请注意，更高的一致性级别 `BEFORE`、`AFTER` 和 `BEFORE_AND_AFTER` 也包括 `BEFORE_ON_PRIMARY_FAILOVER`
    提供的一致性保证。
- en: 'To guarantee that the group provides the same consistency level regardless
    of which member is promoted to primary, all members of the group should have `BEFORE_ON_PRIMARY_FAILOVER`
    (or a higher consistency level) persisted to their configuration. For example,
    on each member issue:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保组提供相同的一致性级别，无论哪个成员被提升为主要成员，组的所有成员都应该将 `BEFORE_ON_PRIMARY_FAILOVER`（或更高的一致性级别）持久化到其配置中。例如，在每个成员上执行：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This ensures that the members all behave in the same way, and that the configuration
    is persisted after a restart of the member.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了所有成员都以相同的方式行事，并且配置在成员重新启动后仍然保留。
- en: A transaction cannot be on-hold forever, and if the time held exceeds [`wait_timeout`](server-system-variables.html#sysvar_wait_timeout)
    it returns an ER_GR_HOLD_WAIT_TIMEOUT error.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 事务不能永远保持挂起状态，如果持续时间超过 [`wait_timeout`](server-system-variables.html#sysvar_wait_timeout)，则会返回一个
    ER_GR_HOLD_WAIT_TIMEOUT 错误。
- en: Permitted Queries Under Consistency Rules
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 在一致性规则下允许的查询
- en: 'Although all writes are held when using `BEFORE_ON_PRIMARY_FAILOVER` consistency
    level, not all reads are blocked to ensure that you can still inspect the server
    while it is applying backlog after a promotion took place. This is useful for
    debugging, monitoring, observability and troubleshooting. Some queries that do
    not modify data are allowed, such as the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `BEFORE_ON_PRIMARY_FAILOVER` 一致性级别时，虽然所有写操作都被保留，但并非所有读操作都被阻塞，以确保您仍然可以在升级后的服务器应用
    backlog 时进行检查。这对于调试、监控、可观察性和故障排除非常有用。一些不修改数据的查询是允许的，例如以下内容：
- en: '[`SHOW`](show.html "15.7.7 SHOW Statements") statements - from MySQL 8.0.27
    this is restricted to those that do not depend on data, only on status and configuration,
    as listed below'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SHOW`](show.html "15.7.7 SHOW 语句") 语句 - 从 MySQL 8.0.27 开始，此处仅限于不依赖于数据，仅依赖于状态和配置的语句，如下所列'
- en: '[`SET`](set.html "13.3.6 The SET Type") statements'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SET`](set.html "13.3.6 SET 类型") 语句'
- en: '[`DO`](do.html "15.2.3 DO Statement") statements that do not use tables or
    loadable functions'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不使用表或可加载函数的 [`DO`](do.html "15.2.3 DO 语句") 语句
- en: '`EMPTY` statements'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMPTY` 语句'
- en: '[`USE`](use.html "15.8.4 USE Statement") statements'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`USE`](use.html "15.8.4 USE 语句") 语句'
- en: Using [`SELECT`](select.html "15.2.13 SELECT Statement") statements against
    the `performance_schema` and `sys` databases
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用针对 `performance_schema` 和 `sys` 数据库的 [`SELECT`](select.html "15.2.13 SELECT
    语句") 语句
- en: Using [`SELECT`](select.html "15.2.13 SELECT Statement") statements against
    the `PROCESSLIST` table from the `infoschema` database
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用针对 `infoschema` 数据库中的 `PROCESSLIST` 表的 [`SELECT`](select.html "15.2.13 SELECT
    语句") 语句
- en: '[`SELECT`](select.html "15.2.13 SELECT Statement") statements that do not use
    tables or loadable functions'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不使用表或可加载函数的 [`SELECT`](select.html "15.2.13 SELECT 语句") 语句
- en: '[`STOP GROUP_REPLICATION`](stop-group-replication.html "15.4.3.2 STOP GROUP_REPLICATION
    Statement") statements'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STOP GROUP_REPLICATION`](stop-group-replication.html "15.4.3.2 STOP GROUP_REPLICATION
    语句") 语句'
- en: '[`SHUTDOWN`](shutdown.html "15.7.8.9 SHUTDOWN Statement") statements'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SHUTDOWN`](shutdown.html "15.7.8.9 SHUTDOWN 语句") 语句'
- en: '[`RESET PERSIST`](reset-persist.html "15.7.8.7 RESET PERSIST Statement") statements'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RESET PERSIST`](reset-persist.html "15.7.8.7 RESET PERSIST 语句") 语句'
- en: The [`SHOW`](show.html "15.7.7 SHOW Statements") statements that are allowed
    from MySQL 8.0.27 are `SHOW VARIABLES, SHOW PROCESSLIST, SHOW STATUS, SHOW ENGINE
    INNODB LOGS, SHOW ENGINE INNODB STATUS, SHOW ENGINE INNODB MUTEX, SHOW MASTER
    STATUS, SHOW REPLICA STATUS, SHOW CHARACTER SET, SHOW COLLATION, SHOW BINARY LOGS,
    SHOW OPEN TABLES, SHOW REPLICAS, SHOW BINLOG EVENTS, SHOW WARNINGS, SHOW ERRORS,
    SHOW ENGINES, SHOW PRIVILEGES, SHOW PROCEDURE STATUS, SHOW FUNCTION STATUS, SHOW
    PLUGINS, SHOW EVENTS, SHOW PROFILE, SHOW PROFILES,` and `SHOW RELAYLOG EVENTS`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 允许在 MySQL 8.0.27 中使用的[`SHOW`](show.html "15.7.7 SHOW Statements")语句包括`SHOW VARIABLES,
    SHOW PROCESSLIST, SHOW STATUS, SHOW ENGINE INNODB LOGS, SHOW ENGINE INNODB STATUS,
    SHOW ENGINE INNODB MUTEX, SHOW MASTER STATUS, SHOW REPLICA STATUS, SHOW CHARACTER
    SET, SHOW COLLATION, SHOW BINARY LOGS, SHOW OPEN TABLES, SHOW REPLICAS, SHOW BINLOG
    EVENTS, SHOW WARNINGS, SHOW ERRORS, SHOW ENGINES, SHOW PRIVILEGES, SHOW PROCEDURE
    STATUS, SHOW FUNCTION STATUS, SHOW PLUGINS, SHOW EVENTS, SHOW PROFILE, SHOW PROFILES,`
    和 `SHOW RELAYLOG EVENTS`。
