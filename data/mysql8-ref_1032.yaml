- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/declare-handler.html](https://dev.mysql.com/doc/refman/8.0/en/declare-handler.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/declare-handler.html](https://dev.mysql.com/doc/refman/8.0/en/declare-handler.html)
- en: 15.6.7.2 DECLARE ... HANDLER Statement
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.6.7.2 DECLARE ... HANDLER Statement
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The [`DECLARE ... HANDLER`](declare-handler.html "15.6.7.2 DECLARE ... HANDLER
    Statement") statement specifies a handler that deals with one or more conditions.
    If one of these conditions occurs, the specified *`statement`* executes. *`statement`*
    can be a simple statement such as `SET *`var_name`* = *`value`*`, or a compound
    statement written using `BEGIN` and `END` (see [Section 15.6.1, “BEGIN ... END
    Compound Statement”](begin-end.html "15.6.1 BEGIN ... END Compound Statement")).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DECLARE ... HANDLER`](declare-handler.html "15.6.7.2 DECLARE ... HANDLER
    Statement") 语句指定处理一个或多个条件的处理程序。如果其中一个条件发生，则执行指定的 *`statement`*。*`statement`* 可以是一个简单语句，如
    `SET *`var_name`* = *`value`*`，或者使用 `BEGIN` 和 `END` 编写的复合语句（参见 [Section 15.6.1,
    “BEGIN ... END Compound Statement”](begin-end.html "15.6.1 BEGIN ... END Compound
    Statement")）。'
- en: Handler declarations must appear after variable or condition declarations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序声明必须出现在变量或条件声明之后。
- en: 'The *`handler_action`* value indicates what action the handler takes after
    execution of the handler statement:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*`handler_action`* 值表示处理程序在执行处理程序语句后采取的操作：'
- en: '`CONTINUE`: Execution of the current program continues.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONTINUE`：当前程序的执行继续。'
- en: '`EXIT`: Execution terminates for the [`BEGIN ... END`](begin-end.html "15.6.1 BEGIN
    ... END Compound Statement") compound statement in which the handler is declared.
    This is true even if the condition occurs in an inner block.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXIT`：执行终止于声明处理程序的 [`BEGIN ... END`](begin-end.html "15.6.1 BEGIN ... END
    Compound Statement") 复合语句。即使条件发生在内部块中，这也是正确的。'
- en: '`UNDO`: Not supported.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UNDO`：不支持。'
- en: 'The *`condition_value`* for [`DECLARE ... HANDLER`](declare-handler.html "15.6.7.2 DECLARE
    ... HANDLER Statement") indicates the specific condition or class of conditions
    that activates the handler. It can take the following forms:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DECLARE ... HANDLER`](declare-handler.html "15.6.7.2 DECLARE ... HANDLER
    Statement") 的 *`condition_value`* 指示激活处理程序的特定条件或条件类别。它可以采用以下形式：'
- en: '*`mysql_error_code`*: An integer literal indicating a MySQL error code, such
    as 1051 to specify “unknown table”:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`mysql_error_code`*：表示 MySQL 错误代码的整数文字，例如 1051 表示“未知表”：'
- en: '[PRE1]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Do not use MySQL error code 0 because that indicates success rather than an
    error condition. For a list of MySQL error codes, see [Server Error Message Reference](/doc/mysql-errors/8.0/en/server-error-reference.html).
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要使用 MySQL 错误代码 0，因为这表示成功而不是错误条件。有关 MySQL 错误代码的列表，请参阅 [Server Error Message
    Reference](/doc/mysql-errors/8.0/en/server-error-reference.html)。
- en: 'SQLSTATE [VALUE] *`sqlstate_value`*: A 5-character string literal indicating
    an SQLSTATE value, such as `''42S01''` to specify “unknown table”:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLSTATE [VALUE] *`sqlstate_value`*：表示 SQLSTATE 值的 5 个字符字符串文字，例如 `'42S01'` 表示“未知表”：
- en: '[PRE2]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Do not use SQLSTATE values that begin with `'00'` because those indicate success
    rather than an error condition. For a list of SQLSTATE values, see [Server Error
    Message Reference](/doc/mysql-errors/8.0/en/server-error-reference.html).
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要使用以 `'00'` 开头的 SQLSTATE 值，因为这些值表示成功而不是错误条件。有关 SQLSTATE 值的列表，请参阅 [Server Error
    Message Reference](/doc/mysql-errors/8.0/en/server-error-reference.html)。
- en: '*`condition_name`*: A condition name previously specified with [`DECLARE ...
    CONDITION`](declare-condition.html "15.6.7.1 DECLARE ... CONDITION Statement").
    A condition name can be associated with a MySQL error code or SQLSTATE value.
    See [Section 15.6.7.1, “DECLARE ... CONDITION Statement”](declare-condition.html
    "15.6.7.1 DECLARE ... CONDITION Statement").'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`condition_name`*：先前使用 [`DECLARE ... CONDITION`](declare-condition.html "15.6.7.1 DECLARE
    ... CONDITION Statement") 指定的条件名。条件名可以与 MySQL 错误代码或 SQLSTATE 值关联。请参阅 [Section 15.6.7.1,
    “DECLARE ... CONDITION Statement”](declare-condition.html "15.6.7.1 DECLARE ...
    CONDITION Statement")。'
- en: '`SQLWARNING`: Shorthand for the class of SQLSTATE values that begin with `''01''`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SQLWARNING`：简写为以 `''01''` 开头的 SQLSTATE 值类别。'
- en: '[PRE3]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`NOT FOUND`: Shorthand for the class of SQLSTATE values that begin with `''02''`.
    This is relevant within the context of cursors and is used to control what happens
    when a cursor reaches the end of a data set. If no more rows are available, a
    No Data condition occurs with SQLSTATE value `''02000''`. To detect this condition,
    you can set up a handler for it or for a `NOT FOUND` condition.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOT FOUND`：简写为以 `''02''` 开头的 SQLSTATE 值类别。在游标的上下文中相关，并用于控制当游标到达数据集末尾时发生的情况。如果没有更多行可用，则会发生无数据条件，其
    SQLSTATE 值为 `''02000''`。要检测此条件，可以为其或为 `NOT FOUND` 条件设置处理程序。'
- en: '[PRE4]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For another example, see [Section 15.6.6, “Cursors”](cursors.html "15.6.6 Cursors").
    The `NOT FOUND` condition also occurs for `SELECT ... INTO *`var_list`*` statements
    that retrieve no rows.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 举个例子，参见[第15.6.6节“游标”](cursors.html "15.6.6 Cursors")。`NOT FOUND`条件也适用于检索不到行的`SELECT
    ... INTO *var_list*`语句。
- en: '`SQLEXCEPTION`: Shorthand for the class of SQLSTATE values that do not begin
    with `''00''`, `''01''`, or `''02''`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SQLEXCEPTION`：SQLSTATE值的类别的简写，这些值不以`''00''`、`''01''`或`''02''`开头。'
- en: '[PRE5]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For information about how the server chooses handlers when a condition occurs,
    see [Section 15.6.7.6, “Scope Rules for Handlers”](handler-scope.html "15.6.7.6 Scope
    Rules for Handlers").
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有关服务器在条件发生时选择处理程序的信息，请参见[第15.6.7.6节“处理程序的作用域规则”](handler-scope.html "15.6.7.6
    Scope Rules for Handlers")。
- en: 'If a condition occurs for which no handler has been declared, the action taken
    depends on the condition class:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生未声明处理程序的条件，则采取的操作取决于条件类别：
- en: For `SQLEXCEPTION` conditions, the stored program terminates at the statement
    that raised the condition, as if there were an `EXIT` handler. If the program
    was called by another stored program, the calling program handles the condition
    using the handler selection rules applied to its own handlers.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`SQLEXCEPTION`条件，存储过程在引发条件的语句处终止，就好像有一个`EXIT`处理程序一样。如果程序是由另一个存储过程调用的，则调用程序使用处理程序选择规则处理条件。
- en: For `SQLWARNING` conditions, the program continues executing, as if there were
    a `CONTINUE` handler.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`SQLWARNING`条件，程序会继续执行，就好像有一个`CONTINUE`处理程序一样。
- en: For `NOT FOUND` conditions, if the condition was raised normally, the action
    is `CONTINUE`. If it was raised by [`SIGNAL`](signal.html "15.6.7.5 SIGNAL Statement")
    or [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement"), the action is `EXIT`.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`NOT FOUND`条件，如果条件正常引发，操作是`CONTINUE`。如果是由[`SIGNAL`](signal.html "15.6.7.5
    SIGNAL Statement")或[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")引发的，操作是`EXIT`。
- en: 'The following example uses a handler for `SQLSTATE ''23000''`, which occurs
    for a duplicate-key error:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用了一个`SQLSTATE '23000'`的处理程序，该处理程序用于处理重复键错误：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that `@x` is `3` after the procedure executes, which shows that execution
    continued to the end of the procedure after the error occurred. If the [`DECLARE
    ... HANDLER`](declare-handler.html "15.6.7.2 DECLARE ... HANDLER Statement") statement
    had not been present, MySQL would have taken the default action (`EXIT`) after
    the second [`INSERT`](insert.html "15.2.7 INSERT Statement") failed due to the
    `PRIMARY KEY` constraint, and `SELECT @x` would have returned `2`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在过程执行后，`@x`为`3`，这表明在错误发生后，执行继续到过程结束。如果[`DECLARE ... HANDLER`](declare-handler.html
    "15.6.7.2 DECLARE ... HANDLER Statement")语句不存在，MySQL会在第二个由于`PRIMARY KEY`约束而导致的[`INSERT`](insert.html
    "15.2.7 INSERT Statement")失败后采取默认操作（`EXIT`），`SELECT @x`将返回`2`。
- en: 'To ignore a condition, declare a `CONTINUE` handler for it and associate it
    with an empty block. For example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要忽略一个条件，为其声明一个`CONTINUE`处理程序，并将其与一个空块关联。例如：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The scope of a block label does not include the code for handlers declared
    within the block. Therefore, the statement associated with a handler cannot use
    [`ITERATE`](iterate.html "15.6.5.3 ITERATE Statement") or [`LEAVE`](leave.html
    "15.6.5.4 LEAVE Statement") to refer to labels for blocks that enclose the handler
    declaration. Consider the following example, where the [`REPEAT`](repeat.html
    "15.6.5.6 REPEAT Statement") block has a label of `retry`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 块标签的作用域不包括在块内声明的处理程序的代码。因此，与处理程序关联的语句不能使用[`ITERATE`](iterate.html "15.6.5.3
    ITERATE Statement")或[`LEAVE`](leave.html "15.6.5.4 LEAVE Statement")来引用包围处理程序声明的块的标签。考虑以下示例，其中[`REPEAT`](repeat.html
    "15.6.5.6 REPEAT Statement")块具有`retry`标签：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `retry` label is in scope for the [`IF`](if.html "15.6.5.2 IF Statement")
    statement within the block. It is not in scope for the `CONTINUE` handler, so
    the reference there is invalid and results in an error:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`retry`标签在块内的[`IF`](if.html "15.6.5.2 IF Statement")语句中有效。它对于`CONTINUE`处理程序无效，因此那里的引用是无效的，会导致错误：'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To avoid references to outer labels in handlers, use one of these strategies:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在处理程序中引用外部标签，可以使用以下策略之一：
- en: 'To leave the block, use an `EXIT` handler. If no block cleanup is required,
    the [`BEGIN ... END`](begin-end.html "15.6.1 BEGIN ... END Compound Statement")
    handler body can be empty:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要离开块，请使用`EXIT`处理程序。如果不需要块清理，[`BEGIN ... END`](begin-end.html "15.6.1 BEGIN ...
    END Compound Statement")处理程序主体可以为空：
- en: '[PRE10]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Otherwise, put the cleanup statements in the handler body:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则，在处理程序主体中放置清理语句：
- en: '[PRE11]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To continue execution, set a status variable in a `CONTINUE` handler that can
    be checked in the enclosing block to determine whether the handler was invoked.
    The following example uses the variable `done` for this purpose:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要继续执行，请在`CONTINUE`处理程序中设置一个状态变量，该变量可以在封闭块中进行检查，以确定处理程序是否被调用。以下示例使用变量`done`来实现这一目的：
- en: '[PRE12]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
