- en: NULL Handling in SQLite Versus Other Database Engines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite 与其他数据库引擎中的 NULL 处理比较
- en: 原文：[https://sqlite.com/nulls.html](https://sqlite.com/nulls.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/nulls.html](https://sqlite.com/nulls.html)
- en: The goal is to make SQLite handle NULLs in a standards-compliant way. But the
    descriptions in the SQL standards on how to handle NULLs seem ambiguous. It is
    not clear from the standards documents exactly how NULLs should be handled in
    all circumstances.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是使 SQLite 以符合标准的方式处理 NULL。但是，SQL 标准文档中关于如何处理 NULL 的描述似乎存在歧义。从标准文档中并不清楚在所有情况下应如何处理
    NULL。
- en: So instead of going by the standards documents, various popular SQL engines
    were tested to see how they handle NULLs. The idea was to make SQLite work like
    all the other engines. An SQL test script was developed and run by volunteers
    on various SQL RDBMSes and the results of those tests were used to deduce how
    each engine processed NULL values. The original tests were run in May of 2002.
    A copy of the test script is found at the end of this document.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，与其依照标准文档，不如测试各种流行的 SQL 引擎以查看它们如何处理 NULL。这个想法是让 SQLite 像所有其他引擎一样工作。开发了一个 SQL
    测试脚本，并由志愿者在各种 SQL RDBMS 上运行，并使用这些测试结果推断每个引擎如何处理 NULL 值。最初的测试是在 2002 年 5 月进行的。测试脚本的副本可在本文档的末尾找到。
- en: SQLite was originally coded in such a way that the answer to all questions in
    the chart below would be "Yes". But the experiments run on other SQL engines showed
    that none of them worked this way. So SQLite was modified to work the same as
    Oracle, PostgreSQL, and DB2\. This involved making NULLs indistinct for the purposes
    of the SELECT DISTINCT statement and for the UNION operator in a SELECT. NULLs
    are still distinct in a UNIQUE column. This seems somewhat arbitrary, but the
    desire to be compatible with other engines outweighed that objection.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 最初的编码方式是所有表格下所有问题的答案都是“是”。但是在其他 SQL 引擎上运行的实验显示，它们都不起作用。因此，SQLite 被修改为与
    Oracle、PostgreSQL 和 DB2 一样工作。这涉及使 NULL 在 SELECT DISTINCT 语句和 SELECT 中的 UNION 运算符中不明显。在唯一列中，NULL
    仍然是独特的。这似乎有些武断，但与其他引擎兼容的愿望胜过了这一反对意见。
- en: 'It is possible to make SQLite treat NULLs as distinct for the purposes of the
    SELECT DISTINCT and UNION. To do so, one should change the value of the NULL_ALWAYS_DISTINCT
    #define in the `sqliteInt.h` source file and recompile.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '可以让 SQLite 在 SELECT DISTINCT 和 UNION 的情况下将 NULL 视为独特。为此，应修改 `sqliteInt.h` 源文件中的
    NULL_ALWAYS_DISTINCT #define 的值，并重新编译。'
- en: '*Update 2003-07-13:* Since this document was originally written some of the
    database engines tested have been updated and users have been kind enough to send
    in corrections to the chart below. The original data showed a wide variety of
    behaviors, but over time the range of behaviors has converged toward the PostgreSQL/Oracle
    model. The only significant difference is that Informix and MS-SQL both treat
    NULLs as indistinct in a UNIQUE column.'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*更新 2003-07-13：* 由于本文档最初编写时测试过的某些数据库引擎已经更新，并且用户们也很友好地向下面的表格发送了更正意见。原始数据显示了各种行为，但随着时间推移，行为范围已经收敛到了
    PostgreSQL/Oracle 模型。唯一的显著差异是 Informix 和 MS-SQL 在唯一列中将 NULL 视为不明显。'
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The fact that NULLs are distinct for UNIQUE columns but are indistinct for SELECT
    DISTINCT and UNION continues to be puzzling. It seems that NULLs should be either
    distinct everywhere or nowhere. And the SQL standards documents suggest that NULLs
    should be distinct everywhere. Yet as of this writing, no SQL engine tested treats
    NULLs as distinct in a SELECT DISTINCT statement or in a UNION.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: NULL 在唯一列中独特，但在 SELECT DISTINCT 和 UNION 中不明显的事实仍然令人困惑。似乎 NULL 应该在所有地方都是独特的或者都不独特。SQL
    标准文档建议 NULL 应该在所有情况下都是独特的。然而，截至本文撰写时，没有测试的 SQL 引擎将 NULL 视为在 SELECT DISTINCT 语句或
    UNION 中是独特的。
- en: The following table shows the results of the NULL handling experiments.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了 NULL 处理实验的结果。
- en: '|    | SQLite | PostgreSQL | Oracle | Informix | DB2 | MS-SQL | OCELOT |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|    | SQLite | PostgreSQL | Oracle | Informix | DB2 | MS-SQL | OCELOT |'
- en: '| Adding anything to null gives null | Yes | Yes | Yes | Yes | Yes | Yes |
    Yes |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 加任何值到 NULL 得到 NULL | 是 | 是 | 是 | 是 | 是 | 是 | 是 |'
- en: '| Multiplying null by zero gives null | Yes | Yes | Yes | Yes | Yes | Yes |
    Yes |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 将 NULL 乘以零得到 NULL | 是 | 是 | 是 | 是 | 是 | 是 | 是 |'
- en: '| nulls are distinct in a UNIQUE column | Yes | Yes | Yes | No | (Note 4) |
    No | Yes |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 在唯一列中，NULL 是独特的 | 是 | 是 | 是 | 否 | (注释 4) | 否 | 是 |'
- en: '| nulls are distinct in SELECT DISTINCT | No | No | No | No | No | No | No
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 在 SELECT DISTINCT 中，NULL 是独特的 | 否 | 否 | 否 | 否 | 否 | 否 | 否 |'
- en: '| nulls are distinct in a UNION | No | No | No | No | No | No | No |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 在 UNION 中，NULL 是独特的 | 否 | 否 | 否 | 否 | 否 | 否 | 否 |'
- en: '| "CASE WHEN null THEN 1 ELSE 0 END" is 0? | Yes | Yes | Yes | Yes | Yes |
    Yes | Yes |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| "CASE WHEN null THEN 1 ELSE 0 END" is 0? | 是 | 是 | 是 | 是 | 是 | 是 | 是 |'
- en: '| "null OR true" is true | Yes | Yes | Yes | Yes | Yes | Yes | Yes |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| "null OR true" is true | 是 | 是 | 是 | 是 | 是 | 是 | 是 |'
- en: '| "not (null AND false)" is true | Yes | Yes | Yes | Yes | Yes | Yes | Yes
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| "not (null AND false)" is true | 是 | 是 | 是 | 是 | 是 | 是 | 是 |'
- en: '|    | MySQL 3.23.41 | MySQL 4.0.16 | Firebird | SQL Anywhere | Borland Interbase
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '|    | MySQL 3.23.41 | MySQL 4.0.16 | Firebird | SQL Anywhere | Borland Interbase
    |'
- en: '| Adding anything to null gives null | Yes | Yes | Yes | Yes | Yes |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| Adding anything to null gives null | 是 | 是 | 是 | 是 | 是 |'
- en: '| Multiplying null by zero gives null | Yes | Yes | Yes | Yes | Yes |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| Multiplying null by zero gives null | 是 | 是 | 是 | 是 | 是 |'
- en: '| nulls are distinct in a UNIQUE column | Yes | Yes | Yes | (Note 4) | (Note
    4) |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| nulls are distinct in a UNIQUE column | 是 | 是 | 是 | (注4) | (注4) |'
- en: '| nulls are distinct in SELECT DISTINCT | No | No | No (Note 1) | No | No |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| nulls are distinct in SELECT DISTINCT | 否 | 否 | 否 (注1) | 否 | 否 |'
- en: '| nulls are distinct in a UNION | (Note 3) | No | No (Note 1) | No | No |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| nulls are distinct in a UNION | (注3) | 否 | 否 (注1) | 否 | 否 |'
- en: '| "CASE WHEN null THEN 1 ELSE 0 END" is 0? | Yes | Yes | Yes | Yes | (Note
    5) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| "CASE WHEN null THEN 1 ELSE 0 END" is 0? | 是 | 是 | 是 | 是 | (注5) |'
- en: '| "null OR true" is true | Yes | Yes | Yes | Yes | Yes |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| "null OR true" is true | 是 | 是 | 是 | 是 | 是 |'
- en: '| "not (null AND false)" is true | No | Yes | Yes | Yes | Yes |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| "not (null AND false)" is true | 否 | 是 | 是 | 是 | 是 |'
- en: '| Notes:   | 1.  | Older versions of firebird omit all NULLs from SELECT DISTINCT
    and from UNION. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| Notes:   | 1.  | Firebird 的旧版本从 SELECT DISTINCT 和 UNION 中省略所有 NULL。 |'
- en: '| 2.  | Test data unavailable. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 2.  | 测试数据不可用。 |'
- en: '| 3.  | MySQL version 3.23.41 does not support UNION. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 3.  | MySQL 版本 3.23.41 不支持 UNION。 |'
- en: '| 4.  | DB2, SQL Anywhere, and Borland Interbase do not allow NULLs in a UNIQUE
    column. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 4.  | DB2、SQL Anywhere 和 Borland Interbase 不允许在唯一列中使用 NULL。 |'
- en: '| 5.  | Borland Interbase does not support CASE expressions. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 5.  | Borland Interbase 不支持 CASE 表达式。 |'
- en: The following script was used to gather information for the table above.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本用于收集上表的信息。
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
