- en: B.3.7 Known Issues in MySQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL中的已知问题B.3.7。
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/known-issues.html](https://dev.mysql.com/doc/refman/8.0/en/known-issues.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/known-issues.html](https://dev.mysql.com/doc/refman/8.0/en/known-issues.html)
- en: This section lists known issues in recent versions of MySQL.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节列出了MySQL最新版本中已知的问题。
- en: For information about platform-specific issues, see the installation and debugging
    instructions in [Section 2.1, “General Installation Guidance”](general-installation-issues.html
    "2.1 General Installation Guidance"), and [Section 7.9, “Debugging MySQL”](debugging-mysql.html
    "7.9 Debugging MySQL").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有关特定平台问题的信息，请参阅[第2.1节“一般安装指南”](general-installation-issues.html "2.1 General
    Installation Guidance")和[第7.9节“调试MySQL”](debugging-mysql.html "7.9 Debugging MySQL")中的安装和调试说明。
- en: 'The following problems are known:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 已知以下问题：
- en: Subquery optimization for `IN` is not as effective as for `=`.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IN`的子查询优化不如`=`有效。'
- en: Even if you use `lower_case_table_names=2` (which enables MySQL to remember
    the case used for databases and table names), MySQL does not remember the case
    used for database names for the function [`DATABASE()`](information-functions.html#function_database)
    or within the various logs (on case-insensitive systems).
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使使用`lower_case_table_names=2`（使MySQL记住数据库和表名的大小写），MySQL也不会记住数据库名称在函数[`DATABASE()`](information-functions.html#function_database)或各种日志中使用的大小写（在不区分大小写的系统上）。
- en: Dropping a `FOREIGN KEY` constraint does not work in replication because the
    constraint may have another name on the replica.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在复制中删除`FOREIGN KEY`约束不起作用，因为约束在副本上可能有另一个名称。
- en: '[`REPLACE`](replace.html "15.2.12 REPLACE Statement") (and [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") with the [`REPLACE`](replace.html "15.2.12 REPLACE
    Statement") option) does not trigger `ON DELETE CASCADE`.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REPLACE`](replace.html "15.2.12 REPLACE Statement")（以及带有[`REPLACE`](replace.html
    "15.2.12 REPLACE Statement")选项的[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA
    Statement"）不会触发`ON DELETE CASCADE`。'
- en: '`DISTINCT` with `ORDER BY` does not work inside [`GROUP_CONCAT()`](aggregate-functions.html#function_group-concat)
    if you do not use all and only those columns that are in the `DISTINCT` list.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您没有使用`DISTINCT`列表中的所有列，并且仅使用那些列，`DISTINCT`与`ORDER BY`在[`GROUP_CONCAT()`](aggregate-functions.html#function_group-concat)内部不起作用。
- en: When inserting a big integer value (between 2^(63) and 2^(64)−1) into a decimal
    or string column, it is inserted as a negative value because the number is evaluated
    in signed integer context.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将大整数值（介于2^(63)和2^(64)−1之间）插入十进制或字符串列时，它将作为负值插入，因为该数字在有符号整数上下文中进行评估。
- en: With statement-based binary logging, the source server writes the executed queries
    to the binary log. This is a very fast, compact, and efficient logging method
    that works perfectly in most cases. However, it is possible for the data on the
    source and replica to become different if a query is designed in such a way that
    the data modification is nondeterministic (generally not a recommended practice,
    even outside of replication).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于语句的二进制日志记录，源服务器将执行的查询写入二进制日志。这是一种非常快速、紧凑和高效的日志记录方法，在大多数情况下都能完美运行。但是，如果查询设计为数据修改是非确定性的（通常不建议的做法，即使在复制之外），则源和副本上的数据可能会变得不同。
- en: 'For example:'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[`CREATE TABLE ... SELECT`](create-table-select.html "15.1.20.4 CREATE TABLE
    ... SELECT Statement") or [`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT
    ... SELECT Statement") statements that insert zero or `NULL` values into an `AUTO_INCREMENT`
    column.'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CREATE TABLE ... SELECT`](create-table-select.html "15.1.20.4 CREATE TABLE
    ... SELECT Statement")或[`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT
    ... SELECT Statement")语句将零值或`NULL`值插入`AUTO_INCREMENT`列。'
- en: '[`DELETE`](delete.html "15.2.2 DELETE Statement") if you are deleting rows
    from a table that has foreign keys with `ON DELETE CASCADE` properties.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DELETE`](delete.html "15.2.2 DELETE Statement")如果您正在从具有`ON DELETE CASCADE`属性的外键的表中删除行。'
- en: '[`REPLACE ... SELECT`](replace.html "15.2.12 REPLACE Statement"), `INSERT IGNORE
    ... SELECT` if you have duplicate key values in the inserted data.'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REPLACE ... SELECT`](replace.html "15.2.12 REPLACE Statement")，`INSERT IGNORE
    ... SELECT`如果插入的数据中有重复的键值。'
- en: '**If and only if the preceding queries have no `ORDER BY` clause guaranteeing
    a deterministic order**.'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**仅当前面的查询没有保证确定性顺序的`ORDER BY`子句时**。'
- en: For example, for [`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT ...
    SELECT Statement") with no `ORDER BY`, the [`SELECT`](select.html "15.2.13 SELECT
    Statement") may return rows in a different order (which results in a row having
    different ranks, hence getting a different number in the `AUTO_INCREMENT` column),
    depending on the choices made by the optimizers on the source and replica.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，对于没有 `ORDER BY` 的 [`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT
    ... SELECT Statement")，[`SELECT`](select.html "15.2.13 SELECT Statement") 可能以不同的顺序返回行（这导致行具有不同的排名，因此在
    `AUTO_INCREMENT` 列中获得不同的数字），这取决于源和复制品上优化器所做的选择。
- en: 'A query is optimized differently on the source and replica only if:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有在源和复制品上查询被优化不同的情况下才会有不同的情况：
- en: The table is stored using a different storage engine on the source than on the
    replica. (It is possible to use different storage engines on the source and replica.
    For example, you can use `InnoDB` on the source, but `MyISAM` on the replica if
    the replica has less available disk space.)
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表在源上使用不同的存储引擎存储，而在复制品上使用不同的存储引擎。 （在源和复制品上可以使用不同的存储引擎。例如，如果复制品的可用磁盘空间较少，可以在源上使用
    `InnoDB`，但在复制品上使用 `MyISAM`。）
- en: MySQL buffer sizes ([`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size),
    and so on) are different on the source and replica.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 缓冲区大小（[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)
    等）在源和复制品上是不同的。
- en: The source and replica run different MySQL versions, and the optimizer code
    differs between these versions.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源和复制品运行不同的 MySQL 版本，并且这些版本之间的优化器代码不同。
- en: This problem may also affect database restoration using **mysqlbinlog|mysql**.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个问题也可能影响使用 **mysqlbinlog|mysql** 进行数据库恢复。
- en: The easiest way to avoid this problem is to add an `ORDER BY` clause to the
    aforementioned nondeterministic queries to ensure that the rows are always stored
    or modified in the same order. Using row-based or mixed logging format also avoids
    the problem.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 避免这个问题的最简单方法是为上述不确定性查询添加一个 `ORDER BY` 子句，以确保行始终以相同的顺序存储或修改。使用基于行或混合日志格式也可以避免这个问题。
- en: Log file names are based on the server host name if you do not specify a file
    name with the startup option. To retain the same log file names if you change
    your host name to something else, you must explicitly use options such as [`--log-bin=*`old_host_name`*-bin`](replication-options-binary-log.html#option_mysqld_log-bin).
    See [Section 7.1.7, “Server Command Options”](server-options.html "7.1.7 Server
    Command Options"). Alternatively, rename the old files to reflect your host name
    change. If these are binary logs, you must edit the binary log index file and
    fix the binary log file names there as well. (The same is true for the relay logs
    on a replica.)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您没有使用启动选项指定文件名，则日志文件名基于服务器主机名。如果您将主机名更改为其他内容，要保留相同的日志文件名，必须显式使用选项，如 [`--log-bin=*`old_host_name`*-bin`](replication-options-binary-log.html#option_mysqld_log-bin)。请参阅
    [Section 7.1.7, “Server Command Options”](server-options.html "7.1.7 Server Command
    Options")。或者，将旧文件重命名以反映您的主机名更改。如果这些是二进制日志，则必须编辑二进制日志索引文件并在那里修复二进制日志文件名。（对于复制品上的中继日志也是如此。）
- en: '[**mysqlbinlog**](mysqlbinlog.html "6.6.9 mysqlbinlog — Utility for Processing
    Binary Log Files") does not delete temporary files left after a [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") statement. See [Section 6.6.9, “mysqlbinlog — Utility
    for Processing Binary Log Files”](mysqlbinlog.html "6.6.9 mysqlbinlog — Utility
    for Processing Binary Log Files").'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**mysqlbinlog**](mysqlbinlog.html "6.6.9 mysqlbinlog — Utility for Processing
    Binary Log Files") 不会删除 [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    语句留下的临时文件。请参阅 [Section 6.6.9, “mysqlbinlog — Utility for Processing Binary Log
    Files”](mysqlbinlog.html "6.6.9 mysqlbinlog — Utility for Processing Binary Log
    Files")。'
- en: '`RENAME` does not work with `TEMPORARY` tables or tables used in a `MERGE`
    table.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RENAME` 不能用于 `TEMPORARY` 表或用于 `MERGE` 表的表。'
- en: When using `SET CHARACTER SET`, you cannot use translated characters in database,
    table, and column names.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `SET CHARACTER SET` 时，不能在数据库、表和列名中使用翻译字符。
- en: Prior to MySQL 8.0.17, you cannot use `_` or `%` with `ESCAPE` in [`LIKE ...
    ESCAPE`](string-comparison-functions.html#operator_like).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.17 之前，你不能在 [`LIKE ... ESCAPE`](string-comparison-functions.html#operator_like)
    中使用 `_` 或 `%` 与 `ESCAPE`。
- en: The server uses only the first [`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)
    bytes when comparing data values. This means that values cannot reliably be used
    in `GROUP BY`, `ORDER BY`, or `DISTINCT` if they differ only after the first [`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)
    bytes. To work around this, increase the variable value. The default value of
    [`max_sort_length`](server-system-variables.html#sysvar_max_sort_length) is 1024
    and can be changed at server startup time or at runtime.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器在比较数据值时只使用前[`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)字节。这意味着如果值仅在前[`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)字节之后有差异，则不能可靠地在`GROUP
    BY`、`ORDER BY`或`DISTINCT`中使用这些值。为了解决这个问题，增加变量值。[`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)的默认值为1024，可以在服务器启动时或运行时更改。
- en: Numeric calculations are done with [`BIGINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") or
    [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE") (both are normally 64 bits long). Which precision you
    get depends on the function. The general rule is that bit functions are performed
    with [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") precision, [`IF()`](flow-control-functions.html#function_if)
    and [`ELT()`](string-functions.html#function_elt) with [`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") or [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point Types
    (Approximate Value) - FLOAT, DOUBLE") precision, and the rest with [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") precision.
    You should try to avoid using unsigned long long values if they resolve to be
    larger than 63 bits (9223372036854775807) for anything other than bit fields.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值计算使用[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")或[`DOUBLE`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT、DOUBLE")（通常都是64位长）。你得到的精度取决于函数。一般规则是，位函数使用[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")精度，[`IF()`](flow-control-functions.html#function_if)和[`ELT()`](string-functions.html#function_elt)使用[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")或[`DOUBLE`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT、DOUBLE")精度，其余使用[`DOUBLE`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT、DOUBLE")精度。除了位字段之外，应尽量避免使用无符号长长整型值，如果它们解析为大于63位（9223372036854775807）的值。
- en: You can have up to 255 [`ENUM`](enum.html "13.3.5 The ENUM Type") and [`SET`](set.html
    "13.3.6 The SET Type") columns in one table.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个表中可以有多达255个[`ENUM`](enum.html "13.3.5 ENUM类型")和[`SET`](set.html "13.3.6 SET类型")列。
- en: In [`MIN()`](aggregate-functions.html#function_min), [`MAX()`](aggregate-functions.html#function_max),
    and other aggregate functions, MySQL currently compares [`ENUM`](enum.html "13.3.5 The
    ENUM Type") and [`SET`](set.html "13.3.6 The SET Type") columns by their string
    value rather than by the string's relative position in the set.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`MIN()`](aggregate-functions.html#function_min)、[`MAX()`](aggregate-functions.html#function_max)和其他聚合函数中，MySQL当前通过字符串值而不是字符串在集合中的相对位置来比较[`ENUM`](enum.html
    "13.3.5 ENUM类型")和[`SET`](set.html "13.3.6 SET类型")列。
- en: 'In an [`UPDATE`](update.html "15.2.17 UPDATE Statement") statement, columns
    are updated from left to right. If you refer to an updated column, you get the
    updated value instead of the original value. For example, the following statement
    increments `KEY` by `2`, **not** `1`:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个[`UPDATE`](update.html "15.2.17 UPDATE语句")语句中，列从左到右更新。如果引用已更新的列，你将得到更新后的值而不是原始值。例如，以下语句将`KEY`增加`2`，而**不是**`1`：
- en: '[PRE0]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can refer to multiple temporary tables in the same query, but you cannot
    refer to any given temporary table more than once. For example, the following
    does not work:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在同一查询中引用多个临时表，但不能多次引用任何给定的临时表。例如，以下操作不起作用：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The optimizer may handle `DISTINCT` differently when you are using “hidden”
    columns in a join than when you are not. In a join, hidden columns are counted
    as part of the result (even if they are not shown), whereas in normal queries,
    hidden columns do not participate in the `DISTINCT` comparison.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你在连接中使用“隐藏”列时，优化器可能会以不同的方式处理`DISTINCT`，而在普通查询中，隐藏列不参与`DISTINCT`比较。
- en: 'An example of this is:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个例子是：
- en: '[PRE2]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: and
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the second case, you may get two identical rows in the result set (because
    the values in the hidden `id` column may differ).
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第二种情况下，您可能会在结果集中得到两行相同的行（因为隐藏的`id`列中的值可能不同）。
- en: Note that this happens only for queries that do not have the `ORDER BY` columns
    in the result.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，这仅适用于结果中没有`ORDER BY`列的查询。
- en: If you execute a `PROCEDURE` on a query that returns an empty set, in some cases
    the `PROCEDURE` does not transform the columns.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在返回空集的查询上执行一个`PROCEDURE`，在某些情况下，`PROCEDURE`不会转换列。
- en: Creation of a table of type `MERGE` does not check whether the underlying tables
    are compatible types.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`MERGE`类型的表不会检查底层表是否是兼容类型。
- en: If you use [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    to add a `UNIQUE` index to a table used in a `MERGE` table and then add a normal
    index on the `MERGE` table, the key order is different for the tables if there
    was an old, non-`UNIQUE` key in the table. This is because [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") puts `UNIQUE` indexes before normal indexes to
    be able to detect duplicate keys as early as possible.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")向用于`MERGE`表的表添加一个`UNIQUE`索引，然后在`MERGE`表上添加一个普通索引，如果表中有旧的非`UNIQUE`键，则表的键顺序会不同。这是因为[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")将`UNIQUE`索引放在普通索引之前，以便尽早检测到重复键。
