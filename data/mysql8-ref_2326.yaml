- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/problems-with-null.html](https://dev.mysql.com/doc/refman/8.0/en/problems-with-null.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/problems-with-null.html](https://dev.mysql.com/doc/refman/8.0/en/problems-with-null.html)
- en: B.3.4.3 Problems with NULL Values
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: B.3.4.3 NULL值的问题
- en: 'The concept of the `NULL` value is a common source of confusion for newcomers
    to SQL, who often think that `NULL` is the same thing as an empty string `''''`.
    This is not the case. For example, the following statements are completely different:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQL新手来说，`NULL`值的概念是一个常见的困惑源，他们经常认为`NULL`和空字符串`''`是一样的。事实并非如此。例如，以下语句完全不同：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Both statements insert a value into the `phone` column, but the first inserts
    a `NULL` value and the second inserts an empty string. The meaning of the first
    can be regarded as “phone number is not known” and the meaning of the second can
    be regarded as “the person is known to have no phone, and thus no phone number.”
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 两个语句都向`phone`列插入一个值，但第一个插入了一个`NULL`值，第二个插入了一个空字符串。第一个的含义可以被视为“电话号码未知”，第二个的含义可以被视为“已知此人没有电话，因此没有电话号码”。
- en: To help with `NULL` handling, you can use the [`IS NULL`](comparison-operators.html#operator_is-null)
    and [`IS NOT NULL`](comparison-operators.html#operator_is-not-null) operators
    and the [`IFNULL()`](flow-control-functions.html#function_ifnull) function.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理`NULL`，可以使用[`IS NULL`](comparison-operators.html#operator_is-null)和[`IS
    NOT NULL`](comparison-operators.html#operator_is-not-null)运算符以及[`IFNULL()`](flow-control-functions.html#function_ifnull)函数。
- en: 'In SQL, the `NULL` value is never true in comparison to any other value, even
    `NULL`. An expression that contains `NULL` always produces a `NULL` value unless
    otherwise indicated in the documentation for the operators and functions involved
    in the expression. All columns in the following example return `NULL`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，`NULL`值与任何其他值（甚至`NULL`）的比较永远不成立。包含`NULL`的表达式总是产生`NULL`值，除非在表达式中涉及的运算符和函数的文档中另有说明。以下示例中的所有列都返回`NULL`：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To search for column values that are `NULL`, you cannot use an `expr = NULL`
    test. The following statement returns no rows, because `expr = NULL` is never
    true for any expression:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要搜索`NULL`列值，不能使用`expr = NULL`测试。以下语句不返回任何行，因为`expr = NULL`对于任何表达式都不成立：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To look for `NULL` values, you must use the [`IS NULL`](comparison-operators.html#operator_is-null)
    test. The following statements show how to find the `NULL` phone number and the
    empty phone number:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找`NULL`值，必须使用[`IS NULL`](comparison-operators.html#operator_is-null)测试。以下语句展示了如何找到`NULL`电话号码和空电话号码：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See [Section 5.3.4.6, “Working with NULL Values”](working-with-null.html "5.3.4.6 Working
    with NULL Values"), for additional information and examples.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Section 5.3.4.6, “Working with NULL Values”](working-with-null.html "5.3.4.6 Working
    with NULL Values")，获取更多信息和示例。
- en: You can add an index on a column that can have `NULL` values if you are using
    the `MyISAM`, `InnoDB`, or `MEMORY` storage engine. Otherwise, you must declare
    an indexed column `NOT NULL`, and you cannot insert `NULL` into the column.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`MyISAM`、`InnoDB`或`MEMORY`存储引擎，可以在可能包含`NULL`值的列上添加索引。否则，必须声明带索引的列为`NOT NULL`，并且不能将`NULL`插入到该列中。
- en: When reading data with [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement"),
    empty or missing columns are updated with `''`. To load a `NULL` value into a
    column, use `\N` in the data file. The literal word `NULL` may also be used under
    some circumstances. See [Section 15.2.9, “LOAD DATA Statement”](load-data.html
    "15.2.9 LOAD DATA Statement").
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")读取数据时，空白或缺失的列会被更新为`''`。要将`NULL`值加载到列中，请在数据文件中使用`\N`。在某些情况下也可以使用文字`NULL`。参见[Section 15.2.9,
    “LOAD DATA Statement”](load-data.html "15.2.9 LOAD DATA Statement")。
- en: When using `DISTINCT`, `GROUP BY`, or `ORDER BY`, all `NULL` values are regarded
    as equal.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`DISTINCT`、`GROUP BY`或`ORDER BY`时，所有`NULL`值被视为相等。
- en: When using `ORDER BY`, `NULL` values are presented first, or last if you specify
    `DESC` to sort in descending order.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`ORDER BY`时，`NULL`值会首先呈现，如果指定`DESC`以降序排序，则会呈现在最后。
- en: 'Aggregate (group) functions such as [`COUNT()`](aggregate-functions.html#function_count),
    [`MIN()`](aggregate-functions.html#function_min), and [`SUM()`](aggregate-functions.html#function_sum)
    ignore `NULL` values. The exception to this is [`COUNT(*)`](aggregate-functions.html#function_count),
    which counts rows and not individual column values. For example, the following
    statement produces two counts. The first is a count of the number of rows in the
    table, and the second is a count of the number of non-`NULL` values in the `age`
    column:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合（分组）函数如[`COUNT()`](aggregate-functions.html#function_count)、[`MIN()`](aggregate-functions.html#function_min)和[`SUM()`](aggregate-functions.html#function_sum)会忽略`NULL`值。唯一的例外是[`COUNT(*)`](aggregate-functions.html#function_count)，它计算行数而不是单独的列值。例如，以下语句产生两个计数。第一个是表中行数的计数，第二个是`age`列中非`NULL`值的计数：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For some data types, MySQL handles `NULL` values in special ways. For example,
    if you insert `NULL` into an integer or floating-point column that has the `AUTO_INCREMENT`
    attribute, the next number in the sequence is inserted. Under certain conditions,
    if you insert `NULL` into a [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") column, the current date and time is inserted; this behavior
    depends in part on the server SQL mode (see [Section 7.1.11, “Server SQL Modes”](sql-mode.html
    "7.1.11 Server SQL Modes")) as well as the value of the [`explicit_defaults_for_timestamp`](server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    system variable.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些数据类型，MySQL以特殊方式处理`NULL`值。例如，如果将`NULL`插入具有`AUTO_INCREMENT`属性的整数或浮点列中，下一个序列中的数字将被插入。在某些条件下，如果将`NULL`插入[`TIMESTAMP`](datetime.html
    "13.2.2 日期、时间和时间戳类型")列中，将插入当前日期和时间；这种行为部分取决于服务器SQL模式（参见[第7.1.11节，“服务器SQL模式”](sql-mode.html
    "7.1.11 服务器SQL模式")）以及[`explicit_defaults_for_timestamp`](server-system-variables.html#sysvar_explicit_defaults_for_timestamp)系统变量的值。
