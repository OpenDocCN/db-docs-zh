- en: 3.5 Changes in MySQL 8.0
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.5 MySQL 8.0的变化
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html](https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html](https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html)
- en: Before upgrading to MySQL 8.0, review the changes described in this section
    to identify those that apply to your current MySQL installation and applications.
    Perform any recommended actions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在升级到MySQL 8.0之前，请查看本节中描述的更改，以确定哪些适用于您当前的MySQL安装和应用程序。执行任何建议的操作。
- en: Changes marked as **Incompatible change** are incompatibilities with earlier
    versions of MySQL, and may require your attention *before upgrading*. Our aim
    is to avoid these changes, but occasionally they are necessary to correct problems
    that would be worse than an incompatibility between releases. If an upgrade issue
    applicable to your installation involves an incompatibility, follow the instructions
    given in the description.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 标记为**不兼容更改**的更改与早期版本的MySQL不兼容，并且可能需要您在升级之前*注意*。我们的目标是避免这些更改，但偶尔它们是必要的，以纠正比版本之间的不兼容性更糟糕的问题。如果适用于您的安装的升级问题涉及不兼容性，请按照描述中给出的说明操作。
- en: '[Data Dictionary Changes](upgrading-from-previous-series.html#upgrade-data-dictionary-changes
    "Data Dictionary Changes")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据字典变化](upgrading-from-previous-series.html#upgrade-data-dictionary-changes
    "数据字典变化")'
- en: '[caching_sha2_password as the Preferred Authentication Plugin](upgrading-from-previous-series.html#upgrade-caching-sha2-password
    "caching_sha2_password as the Preferred Authentication Plugin")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将caching_sha2_password作为首选身份验证插件](upgrading-from-previous-series.html#upgrade-caching-sha2-password
    "将caching_sha2_password作为首选身份验证插件")'
- en: '[Configuration Changes](upgrading-from-previous-series.html#upgrade-configuration-changes
    "Configuration Changes")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[配置更改](upgrading-from-previous-series.html#upgrade-configuration-changes "配置更改")'
- en: '[Server Changes](upgrading-from-previous-series.html#upgrade-server-changes
    "Server Changes")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[服务器更改](upgrading-from-previous-series.html#upgrade-server-changes "服务器更改")'
- en: '[InnoDB Changes](upgrading-from-previous-series.html#upgrade-innodb-changes
    "InnoDB Changes")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[InnoDB变化](upgrading-from-previous-series.html#upgrade-innodb-changes "InnoDB变化")'
- en: '[SQL Changes](upgrading-from-previous-series.html#upgrade-sql-changes "SQL
    Changes")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL更改](upgrading-from-previous-series.html#upgrade-sql-changes "SQL更改")'
- en: '[Changed Server Defaults](upgrading-from-previous-series.html#upgrade-server-defaults
    "Changed Server Defaults")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更改的服务器默认值](upgrading-from-previous-series.html#upgrade-server-defaults "更改的服务器默认值")'
- en: '[Valid Performance Regressions](upgrading-from-previous-series.html#upgrade-performance-regressions
    "Valid Performance Regressions")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[有效性能回归](upgrading-from-previous-series.html#upgrade-performance-regressions
    "有效性能回归")'
- en: Data Dictionary Changes
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据字典变化
- en: MySQL Server 8.0 incorporates a global data dictionary containing information
    about database objects in transactional tables. In previous MySQL series, dictionary
    data was stored in metadata files and nontransactional system tables. As a result,
    the upgrade procedure requires that you verify the upgrade readiness of your installation
    by checking specific prerequisites. For more information, see [Section 3.6, “Preparing
    Your Installation for Upgrade”](upgrade-prerequisites.html "3.6 Preparing Your
    Installation for Upgrade"). A data dictionary-enabled server entails some general
    operational differences; see [Section 16.7, “Data Dictionary Usage Differences”](data-dictionary-usage-differences.html
    "16.7 Data Dictionary Usage Differences").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL Server 8.0包含一个全局数据字典，其中包含事务表中数据库对象的信息。在以前的MySQL系列中，字典数据存储在元数据文件和非事务系统表中。因此，升级过程要求您通过检查特定先决条件来验证安装的升级准备情况。有关更多信息，请参见[第3.6节，“准备升级安装”](upgrade-prerequisites.html
    "3.6 准备升级安装")。启用数据字典的服务器存在一些一般操作上的差异；请参见[第16.7节，“数据字典使用差异”](data-dictionary-usage-differences.html
    "16.7 数据字典使用差异")。
- en: caching_sha2_password as the Preferred Authentication Plugin
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将caching_sha2_password作为首选身份验证插件
- en: 'The `caching_sha2_password` and `sha256_password` authentication plugins provide
    more secure password encryption than the `mysql_native_password` plugin, and `caching_sha2_password`
    provides better performance than `sha256_password`. Due to these superior security
    and performance characteristics of `caching_sha2_password`, it is as of MySQL
    8.0 the preferred authentication plugin, and is also the default authentication
    plugin rather than `mysql_native_password`. This change affects both the server
    and the `libmysqlclient` client library:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`caching_sha2_password` 和 `sha256_password` 认证插件提供比 `mysql_native_password`
    插件更安全的密码加密，而 `caching_sha2_password` 提供比 `sha256_password` 更好的性能。由于 `caching_sha2_password`
    具有卓越的安全性和性能特性，因此从 MySQL 8.0 开始，它是首选的认证插件，并且也是默认的认证插件，而不是 `mysql_native_password`。这一变化影响了服务器和
    `libmysqlclient` 客户端库：'
- en: For the server, the default value of the [`default_authentication_plugin`](server-system-variables.html#sysvar_default_authentication_plugin)
    system variable changes from `mysql_native_password` to `caching_sha2_password`.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于服务器，[`default_authentication_plugin`](server-system-variables.html#sysvar_default_authentication_plugin)
    系统变量的默认值从 `mysql_native_password` 更改为 `caching_sha2_password`。
- en: 'This change applies only to new accounts created after installing or upgrading
    to MySQL 8.0 or higher. For accounts already existing in an upgraded installation,
    their authentication plugin remains unchanged. Existing users who wish to switch
    to `caching_sha2_password` can do so using the [`ALTER USER`](alter-user.html
    "15.7.1.1 ALTER USER Statement") statement:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一变化仅适用于安装或升级到 MySQL 8.0 或更高版本后创建的新帐户。对于已存在于升级安装中的帐户，它们的认证插件保持不变。希望切换到 `caching_sha2_password`
    的现有用户可以使用 [`ALTER USER`](alter-user.html "15.7.1.1 ALTER USER Statement") 语句进行切换：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `libmysqlclient` library treats `caching_sha2_password` as the default authentication
    plugin rather than `mysql_native_password`.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libmysqlclient` 库将 `caching_sha2_password` 视为默认的认证插件，而不是 `mysql_native_password`。'
- en: 'The following sections discuss the implications of the more prominent role
    of `caching_sha2_password`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分讨论了 `caching_sha2_password` 更显著角色的影响：
- en: '[caching_sha2_password Compatibility Issues and Solutions](upgrading-from-previous-series.html#upgrade-caching-sha2-password-compatibility-issues
    "caching_sha2_password Compatibility Issues and Solutions")'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[caching_sha2_password 兼容性问题和解决方案](upgrading-from-previous-series.html#upgrade-caching-sha2-password-compatibility-issues
    "caching_sha2_password Compatibility Issues and Solutions")'
- en: '[caching_sha2_password-Compatible Clients and Connectors](upgrading-from-previous-series.html#upgrade-caching-sha2-password-compatible-connectors
    "caching_sha2_password-Compatible Clients and Connectors")'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[caching_sha2_password 兼容的客户端和连接器](upgrading-from-previous-series.html#upgrade-caching-sha2-password-compatible-connectors
    "caching_sha2_password-Compatible Clients and Connectors")'
- en: '[caching_sha2_password and the root Administrative Account](upgrading-from-previous-series.html#upgrade-caching-sha2-password-root-account
    "caching_sha2_password and the root Administrative Account")'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[caching_sha2_password 和 root 管理员帐户](upgrading-from-previous-series.html#upgrade-caching-sha2-password-root-account
    "caching_sha2_password and the root Administrative Account")'
- en: '[caching_sha2_password and Replication](upgrading-from-previous-series.html#upgrade-caching-sha2-password-replication
    "caching_sha2_password and Replication")'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[caching_sha2_password 和复制](upgrading-from-previous-series.html#upgrade-caching-sha2-password-replication
    "caching_sha2_password and Replication")'
- en: caching_sha2_password Compatibility Issues and Solutions
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`caching_sha2_password` 兼容性问题和解决方案'
- en: Important
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: 'If your MySQL installation must serve pre-8.0 clients and you encounter compatibility
    issues after upgrading to MySQL 8.0 or higher, the simplest way to address those
    issues and restore pre-8.0 compatibility is to reconfigure the server to revert
    to the previous default authentication plugin (`mysql_native_password`). For example,
    use these lines in the server option file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的 MySQL 安装必须为 8.0 之前的客户端提供服务，并且在升级到 MySQL 8.0 或更高版本后遇到兼容性问题，解决这些问题并恢复到 8.0
    之前的兼容性的最简单方法是重新配置服务器以恢复到先前的默认认证插件 (`mysql_native_password`)。例如，在服务器选项文件中使用以下行：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That setting enables pre-8.0 clients to connect to 8.0 servers until such time
    as the clients and connectors in use at your installation are upgraded to know
    about `caching_sha2_password`. However, the setting should be viewed as temporary,
    not as a long term or permanent solution, because it causes new accounts created
    with the setting in effect to forego the improved authentication security provided
    by `caching_sha2_password`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该设置使得8.0之前的客户端可以连接到8.0服务器，直到您的安装中使用的客户端和连接器升级以了解`caching_sha2_password`为止。然而，该设置应被视为临时解决方案，而不是长期或永久解决方案，因为在该设置生效时创建的新帐户将放弃`caching_sha2_password`提供的改进的身份验证安全性。
- en: 'The use of `caching_sha2_password` offers more secure password hashing than
    `mysql_native_password` (and consequent improved client connection authentication).
    However, it also has compatibility implications that may affect existing MySQL
    installations:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`caching_sha2_password`比`mysql_native_password`提供更安全的密码哈希（以及随之改进的客户端连接身份验证）。然而，它也具有兼容性影响，可能会影响现有的MySQL安装：
- en: 'Clients and connectors that have not been updated to know about `caching_sha2_password`
    may have trouble connecting to a MySQL 8.0 server configured with `caching_sha2_password`
    as the default authentication plugin, even to use accounts that do not authenticate
    with `caching_sha2_password`. This issue occurs because the server specifies the
    name of its default authentication plugin to clients. If a client or connector
    is based on a client/server protocol implementation that does not gracefully handle
    an unrecognized default authentication plugin, it may fail with an error such
    as one of these:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端和连接器如果没有更新以了解`caching_sha2_password`，可能会在连接到配置了`caching_sha2_password`作为默认身份验证插件的MySQL
    8.0服务器时遇到问题，即使是使用不使用`caching_sha2_password`进行身份验证的帐户也是如此。这个问题的原因是服务器向客户端指定了其默认身份验证插件的名称。如果客户端或连接器基于一个不能优雅处理未识别的默认身份验证插件的客户端/服务器协议实现，可能会出现以下错误之一：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For information about writing connectors to gracefully handle requests from
    the server for unknown default authentication plugins, see [Authentication Plugin
    Connector-Writing Considerations](pluggable-authentication.html#pluggable-authentication-connector-writing
    "Authentication Plugin Connector-Writing Considerations").
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关编写连接器以优雅处理服务器对未知默认身份验证插件的请求的信息，请参见[身份验证插件连接器编写注意事项](pluggable-authentication.html#pluggable-authentication-connector-writing
    "Authentication Plugin Connector-Writing Considerations")。
- en: Clients that use an account that authenticates with `caching_sha2_password`
    must use either a secure connection (made using TCP using TLS/SSL credentials,
    a Unix socket file, or shared memory), or an unencrypted connection that supports
    password exchange using an RSA key pair. This security requirement does not apply
    to `mysql_native_passsword`, so the switch to `caching_sha2_password` may require
    additional configuration (see [Section 8.4.1.2, “Caching SHA-2 Pluggable Authentication”](caching-sha2-pluggable-authentication.html
    "8.4.1.2 Caching SHA-2 Pluggable Authentication")). However, client connections
    in MySQL 8.0 prefer use of TLS/SSL by default, so clients that already conform
    to that preference may need no additional configuration.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个使用`caching_sha2_password`进行身份验证的帐户的客户端必须使用安全连接（使用TLS/SSL凭据通过TCP进行连接，一个Unix套接字文件，或共享内存），或者支持使用RSA密钥对进行密码交换的未加密连接。这个安全要求不适用于`mysql_native_passsword`，因此切换到`caching_sha2_password`可能需要额外的配置（参见[8.4.1.2节，“Caching
    SHA-2 Pluggable Authentication”](caching-sha2-pluggable-authentication.html "8.4.1.2 Caching
    SHA-2 Pluggable Authentication")）。然而，在MySQL 8.0中，默认情况下客户端连接更倾向于使用TLS/SSL，因此已经符合该偏好的客户端可能不需要额外的配置。
- en: Clients and connectors that have not been updated to know about `caching_sha2_password`
    *cannot* connect to accounts that authenticate with `caching_sha2_password` because
    they do not recognize this plugin as valid. (This is a particular instance of
    how client/server authentication plugin compatibility requirements apply, as discussed
    at [Authentication Plugin Client/Server Compatibility](pluggable-authentication.html#pluggable-authentication-compatibility
    "Authentication Plugin Client/Server Compatibility").) To work around this issue,
    relink clients against `libmysqlclient` from MySQL 8.0 or higher, or obtain an
    updated connector that recognizes `caching_sha2_password`.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未更新以了解`caching_sha2_password`的客户端和连接器*无法*连接到使用`caching_sha2_password`进行身份验证的账户，因为它们不认可此插件为有效。（这是客户端/服务器认证插件兼容性要求的一个特殊实例，如[认证插件客户端/服务器兼容性](pluggable-authentication.html#pluggable-authentication-compatibility
    "认证插件客户端/服务器兼容性")中所讨论的。）要解决此问题，请重新链接客户端到MySQL 8.0或更高版本的`libmysqlclient`，或获取一个识别`caching_sha2_password`的更新连接器。
- en: Because `caching_sha2_password` is also now the default authentication plugin
    in the `libmysqlclient` client library, authentication requires an extra round
    trip in the client/server protocol for connections from MySQL 8.0 clients to accounts
    that use `mysql_native_password` (the previous default authentication plugin),
    unless the client program is invoked with a [`--default-auth=mysql_native_password`](connection-options.html#option_general_default-auth)
    option.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为`caching_sha2_password`现在也是`libmysqlclient`客户端库中的默认认证插件，所以从MySQL 8.0客户端连接到使用`mysql_native_password`（之前的默认认证插件）的账户时，认证需要在客户端/服务器协议中进行额外的往返，除非客户端程序使用[`--default-auth=mysql_native_password`](connection-options.html#option_general_default-auth)选项调用。
- en: 'The `libmysqlclient` client library for pre-8.0 MySQL versions is able to connect
    to MySQL 8.0 servers (except for accounts that authenticate with `caching_sha2_password`).
    That means pre-8.0 clients based on `libmysqlclient` should also be able to connect.
    Examples:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 用于8.0之前MySQL版本的`libmysqlclient`客户端库能够连接到MySQL 8.0服务器（除了使用`caching_sha2_password`进行身份验证的账户）。这意味着基于`libmysqlclient`的8.0之前的客户端也应该能够连接。例如：
- en: Standard MySQL clients such as [**mysql**](mysql.html "6.5.1 mysql — The MySQL
    Command-Line Client") and [**mysqladmin**](mysqladmin.html "6.5.2 mysqladmin —
    A MySQL Server Administration Program") are `libmysqlclient`-based.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准的MySQL客户端，如[**mysql**](mysql.html "6.5.1 mysql — MySQL命令行客户端")和[**mysqladmin**](mysqladmin.html
    "6.5.2 mysqladmin — MySQL服务器管理程序")都是基于`libmysqlclient`。
- en: The DBD::mysql driver for Perl DBI is `libmysqlclient`-based.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perl DBI的DBD::mysql驱动程序是基于`libmysqlclient`的。
- en: MySQL Connector/Python has a C Extension module that is `libmysqlclient`-based.
    To use it, include the `use_pure=False` option at connect time.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL Connector/Python具有基于`libmysqlclient`的C扩展模块。要使用它，请在连接时包含`use_pure=False`选项。
- en: 'When an existing MySQL 8.0 installation is upgraded to MySQL 8.0.4 or higher,
    some older `libmysqlclient`-based clients may “automatically” upgrade if they
    are dynamically linked, because they use the new client library installed by the
    upgrade. For example, if the DBD::mysql driver for Perl DBI uses dynamic linking,
    it can use the `libmysqlclient` in place after an upgrade to MySQL 8.0.4 or higher,
    with this result:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当现有的MySQL 8.0安装升级到MySQL 8.0.4或更高版本时，一些较旧的基于`libmysqlclient`的客户端可能会“自动”升级，因为它们是动态链接的，因此它们使用升级安装的新客户端库。例如，如果Perl
    DBI的DBD::mysql驱动程序使用动态链接，它可以在升级到MySQL 8.0.4或更高版本后直接使用`libmysqlclient`，结果如下：
- en: Prior to the upgrade, DBI scripts that use DBD::mysql can connect to a MySQL
    8.0 server, except for accounts that authenticate with `caching_sha2_password`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在升级之前，使用DBD::mysql的DBI脚本可以连接到MySQL 8.0服务器，除了使用`caching_sha2_password`进行身份验证的账户。
- en: After the upgrade, the same scripts become able to use `caching_sha2_password`
    accounts as well.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级后，相同的脚本也能够使用`caching_sha2_password`账户。
- en: 'However, the preceding results occur because `libmysqlclient` instances from
    MySQL 8.0 installations prior to 8.0.4 are binary compatible: They both use a
    shared library major version number of 21\. For clients linked to `libmysqlclient`
    from MySQL 5.7 or older, they link to a shared library with a different version
    number that is not binary compatible. In this case, the client must be recompiled
    against `libmysqlclient` from 8.0.4 or higher for full compatibility with MySQL
    8.0 servers and `caching_sha2_password` accounts.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，前述结果发生是因为MySQL 8.0安装中8.0.4之前的`libmysqlclient`实例是二进制兼容的：它们都使用共享库主版本号21。对于链接到来自MySQL
    5.7或更早版本的`libmysqlclient`的客户端，它们链接到具有不兼容的不同版本号的共享库。在这种情况下，客户端必须重新编译以便与MySQL 8.0服务器和`caching_sha2_password`帐户完全兼容。
- en: MySQL Connector/J 5.1 through 8.0.8 is able to connect to MySQL 8.0 servers,
    except for accounts that authenticate with `caching_sha2_password`. (Connector/J
    8.0.9 or higher is required to connect to `caching_sha2_password` accounts.)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL Connector/J 5.1至8.0.8能够连接到MySQL 8.0服务器，除了使用`caching_sha2_password`进行身份验证的帐户。（连接器/J
    8.0.9或更高版本需要连接到`caching_sha2_password`帐户。）
- en: Clients that use an implementation of the client/server protocol other than
    `libmysqlclient` may need to be upgraded to a newer version that understands the
    new authentication plugin. For example, in PHP, MySQL connectivity usually is
    based on `mysqlnd`, which currently does not know about `caching_sha2_password`.
    Until an updated version of `mysqlnd` is available, the way to enable PHP clients
    to connect to MySQL 8.0 is to reconfigure the server to revert to `mysql_native_password`
    as the default authentication plugin, as previously discussed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用除`libmysqlclient`之外的客户端/服务器协议实现的客户端可能需要升级到了解新身份验证插件的较新版本。例如，在PHP中，MySQL连接通常基于`mysqlnd`，目前不了解`caching_sha2_password`。在更新的`mysqlnd`版本可用之前，使PHP客户端连接到MySQL
    8.0的方法是重新配置服务器，将`mysql_native_password`恢复为默认身份验证插件，如前所述。
- en: 'If a client or connector supports an option to explicitly specify a default
    authentication plugin, use it to name a plugin other than `caching_sha2_password`.
    Examples:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端或连接器支持显式指定默认身份验证插件的选项，请使用它来命名除`caching_sha2_password`之外的插件。示例：
- en: Some MySQL clients support a [`--default-auth`](connection-options.html#option_general_default-auth)
    option. (Standard MySQL clients such as [**mysql**](mysql.html "6.5.1 mysql —
    The MySQL Command-Line Client") and [**mysqladmin**](mysqladmin.html "6.5.2 mysqladmin
    — A MySQL Server Administration Program") support this option but can successfully
    connect to 8.0 servers without it. However, other clients may support a similar
    option. If so, it is worth trying it.)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些MySQL客户端支持[`--default-auth`](connection-options.html#option_general_default-auth)选项。（标准MySQL客户端，如[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")和[**mysqladmin**](mysqladmin.html
    "6.5.2 mysqladmin — A MySQL Server Administration Program")支持此选项，但可以成功连接到8.0服务器而无需它。但是，其他客户端可能支持类似的选项。如果是这样，值得尝试。）
- en: Programs that use the `libmysqlclient` C API can call the [`mysql_options()`](/doc/c-api/8.0/en/mysql-options.html)
    function with the `MYSQL_DEFAULT_AUTH` option.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`libmysqlclient` C API的程序可以使用`MYSQL_DEFAULT_AUTH`选项调用[`mysql_options()`](/doc/c-api/8.0/en/mysql-options.html)函数。
- en: MySQL Connector/Python scripts that use the native Python implementation of
    the client/server protocol can specify the `auth_plugin` connection option. (Alternatively,
    use the Connector/Python C Extension, which is able to connect to MySQL 8.0 servers
    without the need for `auth_plugin`.)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用客户端/服务器协议的本机Python实现的MySQL Connector/Python脚本可以指定`auth_plugin`连接选项。（或者，使用Connector/Python
    C扩展，可以连接到MySQL 8.0服务器而无需`auth_plugin`。）
- en: caching_sha2_password-Compatible Clients and Connectors
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 兼容`caching_sha2_password`的客户端和连接器
- en: If a client or connector is available that has been updated to know about `caching_sha2_password`,
    using it is the best way to ensure compatibility when connecting to a MySQL 8.0
    server configured with `caching_sha2_password` as the default authentication plugin.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有已更新以了解`caching_sha2_password`的客户端或连接器可用，则使用它是连接到配置为默认身份验证插件为`caching_sha2_password`的MySQL
    8.0服务器时确保兼容性的最佳方法。
- en: 'These clients and connectors have been upgraded to support `caching_sha2_password`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些客户端和连接器已升级以支持`caching_sha2_password`：
- en: The `libmysqlclient` client library in MySQL 8.0 (8.0.4 or higher). Standard
    MySQL clients such as [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") and [**mysqladmin**](mysqladmin.html "6.5.2 mysqladmin — A MySQL Server
    Administration Program") are `libmysqlclient`-based, so they are compatible as
    well.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8.0（8.0.4 或更高版本）中的 `libmysqlclient` 客户端库。标准 MySQL 客户端，如 [**mysql**](mysql.html
    "6.5.1 mysql — MySQL 命令行客户端") 和 [**mysqladmin**](mysqladmin.html "6.5.2 mysqladmin
    — MySQL 服务器管理程序") 基于 `libmysqlclient`，因此它们也是���容的。
- en: The `libmysqlclient` client library in MySQL 5.7 (5.7.23 or higher). Standard
    MySQL clients such as [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") and [**mysqladmin**](mysqladmin.html "6.5.2 mysqladmin — A MySQL Server
    Administration Program") are `libmysqlclient`-based, so they are compatible as
    well.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 5.7（5.7.23 或更高版本）中的 `libmysqlclient` 客户端库。标准 MySQL 客户端，如 [**mysql**](mysql.html
    "6.5.1 mysql — MySQL 命令行客户端") 和 [**mysqladmin**](mysqladmin.html "6.5.2 mysqladmin
    — MySQL 服务器管理程序") 基于 `libmysqlclient`，因此它们也是兼容的。
- en: MySQL Connector/C++ 1.1.11 or higher or 8.0.7 or higher.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL Connector/C++ 1.1.11 或更高版本或 8.0.7 或更高版本。
- en: MySQL Connector/J 8.0.9 or higher.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL Connector/J 8.0.9 或更高版本。
- en: MySQL Connector/NET 8.0.10 or higher (through the classic MySQL protocol).
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL Connector/NET 8.0.10 或更高版本（通过经典 MySQL 协议）。
- en: MySQL Connector/Node.js 8.0.9 or higher.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL Connector/Node.js 8.0.9 或更高版本。
- en: 'PHP: the X DevAPI PHP extension (mysql_xdevapi) supports `caching_sha2_password`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP：X DevAPI PHP 扩展（mysql_xdevapi）支持 `caching_sha2_password`。
- en: 'PHP: the PDO_MySQL and ext/mysqli extensions do not support `caching_sha2_password`.
    In addition, when used with PHP versions before 7.1.16 and PHP 7.2 before 7.2.4,
    they fail to connect with `default_authentication_plugin=caching_sha2_password`
    even if `caching_sha2_password` is not used.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PHP：PDO_MySQL 和 ext/mysqli 扩展不支持 `caching_sha2_password`。此外，当与 PHP 版本 7.1.16
    之前的版本和 PHP 7.2 之前的版本一起使用时，即使未使用 `caching_sha2_password`，它们也无法连接到 `default_authentication_plugin=caching_sha2_password`。
- en: caching_sha2_password and the root Administrative Account
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: caching_sha2_password 和 root 管理员帐户
- en: For upgrades to MySQL 8.0, the authentication plugin existing accounts remains
    unchanged, including the plugin for the `'root'@'localhost'` administrative account.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于升级到 MySQL 8.0，现有帐户的身份验证插件保持不变，包括 `'root'@'localhost'` 管理员帐户的插件。
- en: 'For new MySQL 8.0 installations, when you initialize the data directory (using
    the instructions at [Section 2.9.1, “Initializing the Data Directory”](data-directory-initialization.html
    "2.9.1 Initializing the Data Directory")), the `''root''@''localhost''` account
    is created, and that account uses `caching_sha2_password` by default. To connect
    to the server following data directory initialization, you must therefore use
    a client or connector that supports `caching_sha2_password`. If you can do this
    but prefer that the `root` account use `mysql_native_password` after installation,
    install MySQL and initialize the data directory as you normally would. Then connect
    to the server as `root` and use [`ALTER USER`](alter-user.html "15.7.1.1 ALTER
    USER Statement") as follows to change the account authentication plugin and password:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新的 MySQL 8.0 安装，在初始化数据目录时（使用 [第 2.9.1 节，“初始化数据目录”](data-directory-initialization.html
    "2.9.1 初始化数据目录") 中的说明），会创建 `'root'@'localhost'` 帐户，并且该帐户默认使用 `caching_sha2_password`。因此，在数据目录初始化后连接到服务器时，您必须使用支持
    `caching_sha2_password` 的客户端或连接器。如果您可以这样做，但希望安装后 `root` 帐户使用 `mysql_native_password`，请按照通常的方式安装
    MySQL 并初始化数据目录。然后连接到服务器作为 `root`，并使用 [`ALTER USER`](alter-user.html "15.7.1.1 ALTER
    USER 语句") 如下更改帐户身份验证插件和密码：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If the client or connector that you use does not yet support `caching_sha2_password`,
    you can use a modified data directory-initialization procedure that associates
    the `root` account with `mysql_native_password` as soon as the account is created.
    To do so, use either of these techniques:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的客户端或连接器尚不支持 `caching_sha2_password`，则可以使用修改后的数据目录初始化过程，一旦创建帐户，就将 `root`
    帐户与 `mysql_native_password` 关联起来。为此，可以使用以下任一技术：
- en: Supply a [`--default-authentication-plugin=mysql_native_password`](server-system-variables.html#sysvar_default_authentication_plugin)
    option along with [`--initialize`](server-options.html#option_mysqld_initialize)
    or [`--initialize-insecure`](server-options.html#option_mysqld_initialize-insecure).
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [`--initialize`](server-options.html#option_mysqld_initialize) 或 [`--initialize-insecure`](server-options.html#option_mysqld_initialize-insecure)
    选项中提供一个 [`--default-authentication-plugin=mysql_native_password`](server-system-variables.html#sysvar_default_authentication_plugin)
    选项。
- en: Set [`default_authentication_plugin`](server-system-variables.html#sysvar_default_authentication_plugin)
    to `mysql_native_password` in an option file, and name that option file using
    a [`--defaults-file`](server-options.html#option_mysqld_defaults-file) option
    along with [`--initialize`](server-options.html#option_mysqld_initialize) or [`--initialize-insecure`](server-options.html#option_mysqld_initialize-insecure).
    (In this case, if you continue to use that option file for subsequent server startups,
    new accounts are created with `mysql_native_password` rather than `caching_sha2_password`
    unless you remove the [`default_authentication_plugin`](server-system-variables.html#sysvar_default_authentication_plugin)
    setting from the option file.)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在选项文件中将[`default_authentication_plugin`](server-system-variables.html#sysvar_default_authentication_plugin)设置为`mysql_native_password`，并使用[`--defaults-file`](server-options.html#option_mysqld_defaults-file)选项命名该选项文件，以及[`--initialize`](server-options.html#option_mysqld_initialize)或[`--initialize-insecure`](server-options.html#option_mysqld_initialize-insecure)。
    （在这种情况下，如果您继续使用该选项文件进行后续服务器启动，则新帐户将使用`mysql_native_password`而不是`caching_sha2_password`创建，除非从选项文件中删除[`default_authentication_plugin`](server-system-variables.html#sysvar_default_authentication_plugin)设置。）
- en: caching_sha2_password and Replication
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`caching_sha2_password`和复制'
- en: 'In replication scenarios for which all servers have been upgraded to MySQL
    8.0.4 or higher, replica connections to source servers can use accounts that authenticate
    with `caching_sha2_password`. For such connections, the same requirement applies
    as for other clients that use accounts that authenticate with `caching_sha2_password`:
    Use a secure connection or RSA-based password exchange.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有服务器都已升级到MySQL 8.0.4或更高版本的复制场景，副本连接到源服务器可以使用使用`caching_sha2_password`进行身份验证的账户。对于这样的连接，与使用`caching_sha2_password`进行身份验证的其他客户端相同的要求适用：使用安全连接或基于RSA的密码交换。
- en: 'To connect to a `caching_sha2_password` account for source/replica replication:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到用于源/副本复制的`caching_sha2_password`账户：
- en: 'Use any of the following [`CHANGE MASTER TO`](change-master-to.html "15.4.2.1 CHANGE
    MASTER TO Statement") options:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下任何一个[`CHANGE MASTER TO`](change-master-to.html "15.4.2.1 CHANGE MASTER TO语句")选项：
- en: '[PRE6]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Alternatively, you can use the RSA public key-related options if the required
    keys are supplied at server startup.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，如果在服务器启动时提供所需的密钥，则可以使用RSA公钥相关选项。
- en: 'To connect to a `caching_sha2_password` account for Group Replication:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到使用`caching_sha2_password`账户的组复制：
- en: 'For MySQL built using OpenSSL, set any of the following system variables:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用OpenSSL构建的MySQL，设置以下任何一个系统变量：
- en: '[PRE7]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Alternatively, you can use the RSA public key-related options if the required
    keys are supplied at server startup.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，如果在服务器启动时提供所需的密钥，则可以使用RSA公钥相关选项。
- en: Configuration Changes
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置更改
- en: '**Incompatible change**: A MySQL storage engine is now responsible for providing
    its own partitioning handler, and the MySQL server no longer provides generic
    partitioning support. [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine") and `NDB` are the only storage engines that provide a native
    partitioning handler that is supported in MySQL 8.0\. A partitioned table using
    any other storage engine must be altered—either to convert it to `InnoDB` or `NDB`,
    or to remove its partitioning—*before* upgrading the server, else it cannot be
    used afterwards.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不兼容更改**：MySQL存储引擎现在负责提供自己的分区处理程序，MySQL服务器不再提供通用分区支持。[`InnoDB`](innodb-storage-engine.html
    "第17章InnoDB存储引擎")和`NDB`是唯一提供本机分区处理程序并在MySQL 8.0中受支持的存储引擎。使用任何其他存储引擎的分区表必须在升级服务器之前进行更改，要么将其转换为`InnoDB`或`NDB`，要么删除其分区，*否则*之后无法使用。'
- en: For information about converting `MyISAM` tables to `InnoDB`, see [Section 17.6.1.5,
    “Converting Tables from MyISAM to InnoDB”](converting-tables-to-innodb.html "17.6.1.5 Converting
    Tables from MyISAM to InnoDB").
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关将`MyISAM`表转换为`InnoDB`的信息，请参见[第17.6.1.5节，“从MyISAM转换表到InnoDB”](converting-tables-to-innodb.html
    "17.6.1.5 从MyISAM转换表到InnoDB")。
- en: A table creation statement that would result in a partitioned table using a
    storage engine without such support fails with an error (ER_CHECK_NOT_IMPLEMENTED)
    in MySQL 8.0\. If you import databases from a dump file created in MySQL 5.7 (or
    earlier) using [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup
    Program") into a MySQL 8.0 server, you must make sure that any statements creating
    partitioned tables do not also specify an unsupported storage engine, either by
    removing any references to partitioning, or by specifying the storage engine as
    `InnoDB` or allowing it to be set as `InnoDB` by default.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，使用不支持的存储引擎创建分区表的表创建语句将失败并显示错误（ER_CHECK_NOT_IMPLEMENTED）。如果您从在MySQL
    5.7（或更早版本）中创建的转储文件中导入数据库到MySQL 8.0服务器，请确保任何创建分区表的语句不会同时指定不支持的存储引擎，可以通过删除任何与分区相关的引用，或者将存储引擎指定为`InnoDB`或允许其默认设置为`InnoDB`来实现。
- en: Note
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The procedure given at [Section 3.6, “Preparing Your Installation for Upgrade”](upgrade-prerequisites.html
    "3.6 Preparing Your Installation for Upgrade"), describes how to identify partitioned
    tables that must be altered before upgrading to MySQL 8.0.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[第3.6节，“准备升级安装”](upgrade-prerequisites.html "3.6 准备升级安装")中描述了如何在升级到MySQL 8.0之前识别必须更改的分区表的过程。
- en: See [Section 26.6.2, “Partitioning Limitations Relating to Storage Engines”](partitioning-limitations-storage-engines.html
    "26.6.2 Partitioning Limitations Relating to Storage Engines"), for further information.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[第26.6.2节，“与存储引擎相关的分区限制”](partitioning-limitations-storage-engines.html
    "26.6.2 与存储引擎相关的分区限制")。
- en: '**Incompatible change**: Several server error codes are not used and have been
    removed (for a list, see [Features Removed in MySQL 8.0](mysql-nutshell.html#mysql-nutshell-removals
    "Features Removed in MySQL 8.0")). Applications that test specifically for any
    of them should be updated.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不兼容更改**：几个服务器错误代码未被使用并已被移除（详细列表请参见[MySQL 8.0中删除的功能](mysql-nutshell.html#mysql-nutshell-removals
    "MySQL 8.0中删除的功能")）。特别测试任何这些错误代码的应用程序应该进行更新。'
- en: '**Important change**: The default character set has changed from `latin1` to
    `utf8mb4`. These system variables are affected:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重要更改**：默认字符集已从`latin1`更改为`utf8mb4`。这些系统变量受到影响：'
- en: The default value of the [`character_set_server`](server-system-variables.html#sysvar_character_set_server)
    and [`character_set_database`](server-system-variables.html#sysvar_character_set_database)
    system variables has changed from `latin1` to `utf8mb4`.
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`character_set_server`](server-system-variables.html#sysvar_character_set_server)和[`character_set_database`](server-system-variables.html#sysvar_character_set_database)系统变量的默认值已从`latin1`更改为`utf8mb4`。'
- en: The default value of the [`collation_server`](server-system-variables.html#sysvar_collation_server)
    and [`collation_database`](server-system-variables.html#sysvar_collation_database)
    system variables has changed from `latin1_swedish_ci` to `utf8mb4_0900_ai_ci`.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`collation_server`](server-system-variables.html#sysvar_collation_server)和[`collation_database`](server-system-variables.html#sysvar_collation_database)系统变量的默认值已从`latin1_swedish_ci`更改为`utf8mb4_0900_ai_ci`。'
- en: 'As a result, the default character set and collation for new objects differ
    from previously unless an explicit character set and collation are specified.
    This includes databases and objects within them, such as tables, views, and stored
    programs. Assuming that the previous defaults were used, one way to preserve them
    is to start the server with these lines in the `my.cnf` file:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，除非显式指定字符集和校对规则，否则新对象的默认字符集和校对规则与以前不同。这包括数据库及其中的对象，如表、视图和存储过程。假设以前使用的是默认值，保留它们的一种方法是在`my.cnf`文件中使用以下行启动服务器：
- en: '[PRE8]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In a replicated setting, when upgrading from MySQL 5.7 to 8.0, it is advisable
    to change the default character set back to the character set used in MySQL 5.7
    before upgrading. After the upgrade is completed, the default character set can
    be changed to `utf8mb4`.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在复制设置中，从MySQL 5.7升级到8.0时，建议在升级之前将默认字符集更改回MySQL 5.7中使用的字符集。升级完成后，可以将默认字符集更改为`utf8mb4`。
- en: 'In addition, you should be aware that MySQL 8.0 enforces checks on permitted
    characters in a given character set which MySQL 5.7 does not; this is a known
    issue. This means that, prior to attempting to upgrade, you should ensure that
    no comments contain characters that are not defined for the character set in use.
    You can fix this in either of two ways:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，您应该知道MySQL 8.0强制执行对给定字符集中允许字符的检查，而MySQL 5.7不执行；这是一个已知问题。这意味着，在尝试升级之前，您应确保没有注释包含未在使用的字符集中定义的字符。您可以通过以下两种方式修复此问题：
- en: Change the character set to one that includes the character or characters in
    question.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符集更改为包含相关字符的字符集。
- en: Remove the offending character or characters.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除有问题的字符或字符。
- en: The preceding applies to table, file, and index comments.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述适用于表、文件和索引注释。
- en: '**Incompatible change**: As of MySQL 8.0.11, it is prohibited to start the
    server with a [`lower_case_table_names`](server-system-variables.html#sysvar_lower_case_table_names)
    setting that is different from the setting used when the server was initialized.
    The restriction is necessary because collations used by various data dictionary
    table fields are based on the [`lower_case_table_names`](server-system-variables.html#sysvar_lower_case_table_names)
    setting that was defined when the server was initialized, and restarting the server
    with a different setting would introduce inconsistencies with respect to how identifiers
    are ordered and compared.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不兼容更改**：从MySQL 8.0.11开始，禁止使用与服务器初始化时使用的[`lower_case_table_names`](server-system-variables.html#sysvar_lower_case_table_names)设置不同的设置启动服务器。这个限制是必要的，因为各种数据字典表字段使用的校对是基于服务器初始化时定义的[`lower_case_table_names`](server-system-variables.html#sysvar_lower_case_table_names)设置，重新启动服务器使用不同设置会导致标识符的排序和比较出现不一致。'
- en: Server Changes
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器更改
- en: In MySQL 8.0.11, several deprecated features related to account management have
    been removed, such as use of the [`GRANT`](grant.html "15.7.1.6 GRANT Statement")
    statement to modify nonprivilege characteristics of user accounts, the `NO_AUTO_CREATE_USER`
    SQL mode, the `PASSWORD()` function, and the `old_passwords` system variable.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.11中，已删除了与帐户管理相关的几个弃用功能，例如使用[`GRANT`](grant.html "15.7.1.6 GRANT Statement")语句修改用户帐户的非权限特性，`NO_AUTO_CREATE_USER`
    SQL模式，`PASSWORD()`函数和`old_passwords`系统变量。
- en: Replication from MySQL 5.7 to 8.0 of statements that refer to these removed
    features can cause replication failure. Applications that use any of the removed
    features should be revised to avoid them and use alternatives when possible, as
    described in [Features Removed in MySQL 8.0](mysql-nutshell.html#mysql-nutshell-removals
    "Features Removed in MySQL 8.0").
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 5.7复制到8.0的涉及这些已移除功能的语句可能导致复制失败。使用任何已移除功能的应用程序应进行修订以避免使用它们，并在可能的情况下使用替代方案，如[MySQL
    8.0中已移除的功能](mysql-nutshell.html#mysql-nutshell-removals "MySQL 8.0中已移除的功能")中所述。
- en: To avoid a startup failure on MySQL 8.0, remove any instance of `NO_AUTO_CREATE_USER`
    from [`sql_mode`](server-system-variables.html#sysvar_sql_mode) system variable
    settings in MySQL option files.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为避免在MySQL 8.0上启动失败，请从MySQL选项文件的[`sql_mode`](server-system-variables.html#sysvar_sql_mode)系统变量设置中删除任何`NO_AUTO_CREATE_USER`实例。
- en: Loading a dump file that includes the `NO_AUTO_CREATE_USER` SQL mode in stored
    program definitions into a MySQL 8.0 server causes a failure. As of MySQL 5.7.24
    and MySQL 8.0.13, [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database
    Backup Program") removes `NO_AUTO_CREATE_USER` from stored program definitions.
    Dump files created with an earlier version of `mysqldump` must be modified manually
    to remove instances of `NO_AUTO_CREATE_USER`.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将包含`NO_AUTO_CREATE_USER` SQL模式的转储文件加载到MySQL 8.0服务器中会导致失败。从MySQL 5.7.24和MySQL
    8.0.13开始，[**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")会从存储程序定义中删除`NO_AUTO_CREATE_USER`。使用早期版本的`mysqldump`创建的转储文件必须手动修改以删除`NO_AUTO_CREATE_USER`的实例。
- en: 'In MySQL 8.0.11, these deprecated compatibility SQL modes were removed: `DB2`,
    `MAXDB`, `MSSQL`, `MYSQL323`, `MYSQL40`, `ORACLE`, `POSTGRESQL`, `NO_FIELD_OPTIONS`,
    `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`. They can no longer be assigned to the `sql_mode`
    system variable or used as permitted values for the [**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program") [`--compatible`](mysqldump.html#option_mysqldump_compatible)
    option.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.11中，这些已弃用的兼容性SQL模式被移除：`DB2`、`MAXDB`、`MSSQL`、`MYSQL323`、`MYSQL40`、`ORACLE`、`POSTGRESQL`、`NO_FIELD_OPTIONS`、`NO_KEY_OPTIONS`、`NO_TABLE_OPTIONS`。它们不能再分配给`sql_mode`系统变量，也不能作为[**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program") [`--compatible`](mysqldump.html#option_mysqldump_compatible)选项的允许值。
- en: Removal of `MAXDB` means that the `TIMESTAMP` data type for [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") or [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") is no longer treated as [`DATETIME`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types").
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除`MAXDB`意味着[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")或[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")中的`TIMESTAMP`数据类型不再被视为[`DATETIME`](datetime.html
    "13.2.2 日期、时间和时间戳类型")。
- en: Replication from MySQL 5.7 to 8.0 of statements that refer to the removed SQL
    modes can cause replication failure. This includes replication of `CREATE` statements
    for stored programs (stored procedures and functions, triggers, and events) that
    are executed while the current [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    value includes any of the removed modes. Applications that use any of the removed
    modes should be revised to avoid them.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 5.7到8.0的复制中，涉及已移除SQL模式的语句可能导致复制失败。这包括在当前[`sql_mode`](server-system-variables.html#sysvar_sql_mode)值包含任何已移除模式的情况下执行的存储程序（存储过程和函数、触发器和事件）的`CREATE`语句的复制。使用任何已移除模式的应用程序应进行修改以避免使用它们。
- en: The text of many MySQL 8.0 error messages has been revised and improved to provide
    more and better information than in MySQL 5.7\. If your application depends on
    specific content or formatting of error messages, you should test these and be
    prepared to update the application accordingly prior to performing an upgrade.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多MySQL 8.0错误消息的文本已经修订和改进，提供的信息比MySQL 5.7更多更好。如果您的应用程序依赖于特定内容或格式的错误消息，您应该测试这些内容，并准备在升级之前更新应用程序。
- en: As of MySQL 8.0.3, spatial data types permit an `SRID` attribute, to explicitly
    indicate the spatial reference system (SRS) for values stored in the column. See
    [Section 13.4.1, “Spatial Data Types”](spatial-type-overview.html "13.4.1 Spatial
    Data Types").
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.3，空间数据类型允许一个`SRID`属性，明确指示存储在列中的值的空间参考系统（SRS）。参见[第13.4.1节，“空间数据类型”](spatial-type-overview.html
    "13.4.1 空间数据类型")。
- en: 'A spatial column with an explicit `SRID` attribute is SRID-restricted: The
    column takes only values with that ID, and `SPATIAL` indexes on the column become
    subject to use by the optimizer. The optimizer ignores `SPATIAL` indexes on spatial
    columns with no `SRID` attribute. See [Section 10.3.3, “SPATIAL Index Optimization”](spatial-index-optimization.html
    "10.3.3 SPATIAL Index Optimization"). If you want the optimizer to consider `SPATIAL`
    indexes on spatial columns that are not SRID-restricted, each such column should
    be modified:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有显式`SRID`属性的空间列是SRID受限制的：该列仅接受具有该ID的值，并且该列上的`SPATIAL`索引成为优化器使用的对象。优化器会忽略没有`SRID`属性的空间列上的`SPATIAL`索引。参见[第10.3.3节，“空间索引优化”](spatial-index-optimization.html
    "10.3.3 空间索引优化")。如果您希望优化器考虑对没有SRID限制的空间列上的`SPATIAL`索引，应修改每个这样的列：
- en: 'Verify that all values within the column have the same SRID. To determine the
    SRIDs contained in a geometry column *`col_name`*, use the following query:'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证列中的所有值是否具有相同的SRID。要确定几何列*`col_name`*中包含的SRIDs，使用以下查询：
- en: '[PRE9]'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If the query returns more than one row, the column contains a mix of SRIDs.
    In that case, modify its contents so all values have the same SRID.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果查询返回多行，则该列包含混合的SRIDs。在这种情况下，修改其内容使所有值具有相同的SRID。
- en: Redefine the column to have an explicit `SRID` attribute.
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新定义列以具有显式`SRID`属性。
- en: Recreate the `SPATIAL` index.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新创建`SPATIAL`索引。
- en: Several spatial functions were removed in MySQL 8.0.0 due to a spatial function
    namespace change that implemented an `ST_` prefix for functions that perform an
    exact operation, or an `MBR` prefix for functions that perform an operation based
    on minimum bounding rectangles. The use of removed spatial functions in generated
    column definitions could cause an upgrade failure. Before upgrading, run [**mysqlcheck
    --check-upgrade**](mysqlcheck.html "6.5.3 mysqlcheck — A Table Maintenance Program")
    for removed spatial functions and replace any that you find with their `ST_` or
    `MBR` named replacements. For a list of removed spatial functions, refer to [Features
    Removed in MySQL 8.0](mysql-nutshell.html#mysql-nutshell-removals "Features Removed
    in MySQL 8.0").
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于空间函数命名空间更改实施了执行精确操作的函数的`ST_`前缀，或者基于最小边界矩形执行操作的函数的`MBR`前缀，因此在MySQL 8.0.0中删除了几个空间函数。在生成列定义中使用已删除的空间函数可能会导致升级失败。在升级之前，运行[**mysqlcheck
    --check-upgrade**](mysqlcheck.html "6.5.3 mysqlcheck — A Table Maintenance Program")以查找已删除的空间函数，并用它们的`ST_`或`MBR`命名的替代函数替换任何找到的函数。有关已删除的空间函数列表，请参考[MySQL
    8.0中删除的功能](mysql-nutshell.html#mysql-nutshell-removals "MySQL 8.0中删除的功能")。
- en: The [`BACKUP_ADMIN`](privileges-provided.html#priv_backup-admin) privilege is
    automatically granted to users with the [`RELOAD`](privileges-provided.html#priv_reload)
    privilege when performing an in-place upgrade to MySQL 8.0.3 or higher.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当进行就地升级到MySQL 8.0.3或更高版本时，具有[`RELOAD`](privileges-provided.html#priv_reload)权限的用户会自动被授予[`BACKUP_ADMIN`](privileges-provided.html#priv_backup-admin)权限。
- en: From MySQL 8.0.13, because of differences between row-based or mixed replication
    mode and statement-based replication mode in the way that temporary tables are
    handled, there are new restrictions on switching the binary logging format at
    runtime.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.13开始，由于基于行或混合复制模式与基于语句的复制模式在处理临时表的方式上的差异，切换二进制日志格式在运行时有了新的限制。
- en: '`SET @@SESSION.binlog_format` cannot be used if the session has any open temporary
    tables.'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果会话有任何打开的临时表，则不能使用`SET @@SESSION.binlog_format`。
- en: '`SET @@global.binlog_format` and `SET @@persist.binlog_format` cannot be used
    if any replication channel has any open temporary tables. `SET @@persist_only.binlog_format`
    is allowed if replication channels have open temporary tables, because unlike
    `PERSIST`, `PERSIST_ONLY` does not modify the runtime global system variable value.'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何复制通道有任何打开的临时表，则不能使用`SET @@global.binlog_format`和`SET @@persist.binlog_format`。如果复制通道有打开的临时表，则允许使用`SET
    @@persist_only.binlog_format`，因为与`PERSIST`不同，`PERSIST_ONLY`不会修改运行时全局系统变量值。
- en: '`SET @@global.binlog_format` and `SET @@persist.binlog_format` cannot be used
    if any replication channel applier is running. This is because the change only
    takes effect on a replication channel when its applier is restarted, at which
    time the replication channel might have open temporary tables. This behavior is
    more restrictive than before. `SET @@persist_only.binlog_format` is allowed if
    any replication channel applier is running.'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何复制通道应用程序正在运行，则不能使用`SET @@global.binlog_format`和`SET @@persist.binlog_format`。这是因为更改仅在复制通道的应用程序重新启动时生效，此时复制通道可能有打开的临时表。这种行为比以前更为严格。如果任何复制通道应用程序正在运行，则允许使用`SET
    @@persist_only.binlog_format`。
- en: From MySQL 8.0.27, configuring a session setting for [`internal_tmp_mem_storage_engine`](server-system-variables.html#sysvar_internal_tmp_mem_storage_engine)
    requires the [`SESSION_VARIABLES_ADMIN`](privileges-provided.html#priv_session-variables-admin)
    or [`SYSTEM_VARIABLES_ADMIN`](privileges-provided.html#priv_system-variables-admin)
    privilege.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.27开始，为[`internal_tmp_mem_storage_engine`](server-system-variables.html#sysvar_internal_tmp_mem_storage_engine)配置会话设置需要[`SESSION_VARIABLES_ADMIN`](privileges-provided.html#priv_session-variables-admin)或[`SYSTEM_VARIABLES_ADMIN`](privileges-provided.html#priv_system-variables-admin)权限。
- en: As of MySQL 8.0.27, the clone plugin permits concurrent DDL operations on the
    donor MySQL Server instance while a cloning operation is in progress. Previously,
    a backup lock was held during the cloning operation, preventing concurrent DDL
    on the donor. To revert to the previous behavior of blocking concurrent DDL on
    the donor during a clone operation, enable the [`clone_block_ddl`](clone-plugin-options-variables.html#sysvar_clone_block_ddl)
    variable. See [Section 7.6.7.4, “Cloning and Concurrent DDL”](clone-plugin-concurrent-ddl.html
    "7.6.7.4 Cloning and Concurrent DDL").
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.27 版本，克隆插件允许在捐赠者 MySQL 服务器实例上进行并发 DDL 操作，同时克隆操作正在进行中。以前，在克隆操作期间会持有备份锁，阻止捐赠者上的并发
    DDL。要恢复到在克隆操作期间阻止捐赠者上的并发 DDL 的先前行为，请启用 [`clone_block_ddl`](clone-plugin-options-variables.html#sysvar_clone_block_ddl)
    变量。参见 [第 7.6.7.4 节，“克隆和并发 DDL”](clone-plugin-concurrent-ddl.html "7.6.7.4 克隆和并发
    DDL")。
- en: From MySQL 8.0.30, error log components listed in the [`log_error_services`](server-system-variables.html#sysvar_log_error_services)
    value at startup are loaded implicitly early in the MySQL Server startup sequence.
    If you have previously installed loadable error log components using [`INSTALL
    COMPONENT`](install-component.html "15.7.4.3 INSTALL COMPONENT Statement") and
    you list those components in a [`log_error_services`](server-system-variables.html#sysvar_log_error_services)
    setting that is read at startup (from an option file, for example), your configuration
    should be updated to avoid startup warnings. For more information, see [Error
    Log Configuration Methods](error-log-configuration.html#error-log-configuration-methods
    "Error Log Configuration Methods").
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.30 版本开始，在启动时列出的 [`log_error_services`](server-system-variables.html#sysvar_log_error_services)
    值中的错误日志组件将在 MySQL 服务器启动序列的早期隐式加载。如果您以前使用 [`INSTALL COMPONENT`](install-component.html
    "15.7.4.3 INSTALL COMPONENT 语句") 安装了可加载的错误日志组件，并且您在启动时列出了这些组件（例如，从选项文件中读取的 [`log_error_services`](server-system-variables.html#sysvar_log_error_services)
    设置），则应更新配置以避免启动警告。有关更多信息，请参见 [错误日志配置方法](error-log-configuration.html#error-log-configuration-methods
    "错误日志配置方法")。
- en: InnoDB Changes
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: InnoDB 更改
- en: '[`INFORMATION_SCHEMA`](information-schema.html "Chapter 28 INFORMATION_SCHEMA
    Tables") views based on `InnoDB` system tables were replaced by internal system
    views on data dictionary tables. Affected `InnoDB` [`INFORMATION_SCHEMA`](information-schema.html
    "Chapter 28 INFORMATION_SCHEMA Tables") views were renamed:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 `InnoDB` 系统表的 [`INFORMATION_SCHEMA`](information-schema.html "第 28 章 INFORMATION_SCHEMA
    表") 视图已被内部数据字典表上的内部系统视图所取代。受影响的 `InnoDB` [`INFORMATION_SCHEMA`](information-schema.html
    "第 28 章 INFORMATION_SCHEMA 表") 视图已更名为：
- en: '**Table 3.1 Renamed InnoDB Information Schema Views**'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**表 3.1 重命名的 InnoDB 信息模式视图**'
- en: '| Old Name | New Name |'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 旧名称 | 新名称 |'
- en: '| `INNODB_SYS_COLUMNS` | `INNODB_COLUMNS` |'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `INNODB_SYS_COLUMNS` | `INNODB_COLUMNS` |'
- en: '| `INNODB_SYS_DATAFILES` | `INNODB_DATAFILES` |'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `INNODB_SYS_DATAFILES` | `INNODB_DATAFILES` |'
- en: '| `INNODB_SYS_FIELDS` | `INNODB_FIELDS` |'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `INNODB_SYS_FIELDS` | `INNODB_FIELDS` |'
- en: '| `INNODB_SYS_FOREIGN` | `INNODB_FOREIGN` |'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `INNODB_SYS_FOREIGN` | `INNODB_FOREIGN` |'
- en: '| `INNODB_SYS_FOREIGN_COLS` | `INNODB_FOREIGN_COLS` |'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `INNODB_SYS_FOREIGN_COLS` | `INNODB_FOREIGN_COLS` |'
- en: '| `INNODB_SYS_INDEXES` | `INNODB_INDEXES` |'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `INNODB_SYS_INDEXES` | `INNODB_INDEXES` |'
- en: '| `INNODB_SYS_TABLES` | `INNODB_TABLES` |'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `INNODB_SYS_TABLES` | `INNODB_TABLES` |'
- en: '| `INNODB_SYS_TABLESPACES` | `INNODB_TABLESPACES` |'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `INNODB_SYS_TABLESPACES` | `INNODB_TABLESPACES` |'
- en: '| `INNODB_SYS_TABLESTATS` | `INNODB_TABLESTATS` |'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `INNODB_SYS_TABLESTATS` | `INNODB_TABLESTATS` |'
- en: '| `INNODB_SYS_VIRTUAL` | `INNODB_VIRTUAL` |'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `INNODB_SYS_VIRTUAL` | `INNODB_VIRTUAL` |'
- en: '| Old Name | New Name |'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 旧名称 | 新名称 |'
- en: After upgrading to MySQL 8.0.3 or higher, update any scripts that reference
    previous `InnoDB` [`INFORMATION_SCHEMA`](information-schema.html "Chapter 28 INFORMATION_SCHEMA
    Tables") view names.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 升级到 MySQL 8.0.3 或更高版本后，请更新任何引用先前 `InnoDB` [`INFORMATION_SCHEMA`](information-schema.html
    "第 28 章 INFORMATION_SCHEMA 表") 视图名称的脚本。
- en: The [zlib library](http://www.zlib.net/) version bundled with MySQL was raised
    from version 1.2.3 to version 1.2.11.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 捆绑的 zlib 库版本从 1.2.3 版升级到 1.2.11 版。
- en: The zlib `compressBound()` function in zlib 1.2.11 returns a slightly higher
    estimate of the buffer size required to compress a given length of bytes than
    it did in zlib version 1.2.3\. The `compressBound()` function is called by `InnoDB`
    functions that determine the maximum row size permitted when creating compressed
    `InnoDB` tables or inserting and updating rows in compressed `InnoDB` tables.
    As a result, [`CREATE TABLE ... ROW_FORMAT=COMPRESSED`](create-table.html "15.1.20 CREATE
    TABLE Statement"), [`INSERT`](insert.html "15.2.7 INSERT Statement"), and [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") operations with row sizes very close to the maximum
    row size that were successful in earlier releases could now fail. To avoid this
    issue, test [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")
    statements for compressed `InnoDB` tables with large rows on a MySQL 8.0 test
    instance prior to upgrading.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: zlib 1.2.11中的zlib `compressBound()`函数返回的压缩给定长度字节所需的缓冲区大小的估计比zlib版本1.2.3中的估计略高。`compressBound()`函数由确定在创建压缩的`InnoDB`表或在压缩的`InnoDB`表中插入和更新行时允许的最大行大小的`InnoDB`函数调用。因此，与早期版本中成功的最大行大小非常接近的[`CREATE
    TABLE ... ROW_FORMAT=COMPRESSED`](create-table.html "15.1.20 CREATE TABLE Statement")，[`INSERT`](insert.html
    "15.2.7 INSERT Statement")和[`UPDATE`](update.html "15.2.17 UPDATE Statement")操作现在可能会失败。为避免此问题，在升级之前，在MySQL
    8.0测试实例上测试具有大行的压缩`InnoDB`表的[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement")语句。
- en: 'With the introduction of the [`--innodb-directories`](innodb-parameters.html#sysvar_innodb_directories)
    feature, the location of file-per-table and general tablespace files created with
    an absolute path or in a location outside of the data directory should be added
    to the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    argument value. Otherwise, `InnoDB` is not able to locate these files during recovery.
    To view tablespace file locations, query the Information Schema [`FILES`](information-schema-files-table.html
    "28.3.15 The INFORMATION_SCHEMA FILES Table") table:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着[`--innodb-directories`](innodb-parameters.html#sysvar_innodb_directories)功能的引入，使用绝对路径创建的文件表和通用表空间文件或位于数据目录之外的位置应添加到[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)参数值中。否则，在恢复过程中，`InnoDB`将无法定位这些文件。要查看表空间文件位置，请查询Information
    Schema [`FILES`](information-schema-files-table.html "28.3.15 The INFORMATION_SCHEMA
    FILES Table")表：
- en: '[PRE10]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Undo logs can no longer reside in the system tablespace. In MySQL 8.0, undo
    logs reside in two undo tablespaces by default. For more information, see [Section 17.6.3.4,
    “Undo Tablespaces”](innodb-undo-tablespaces.html "17.6.3.4 Undo Tablespaces").
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 撤销日志不再可以驻留在系统表空间中。在MySQL 8.0中，默认情况下，撤销日志驻留在两个undo表空间中。有关更多信息，请参见[第17.6.3.4节，“Undo
    Tablespaces”](innodb-undo-tablespaces.html "17.6.3.4 Undo Tablespaces")。
- en: When upgrading from MySQL 5.7 to MySQL 8.0, any undo tablespaces that exist
    in the MySQL 5.7 instance are removed and replaced by two new default undo tablespaces.
    Default undo tablespaces are created in the location defined by the [`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)
    variable. If the [`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)
    variable is undefined, undo tablespaces are created in the data directory. Upgrade
    from MySQL 5.7 to MySQL 8.0 requires a slow shutdown which ensures that undo tablespaces
    in the MySQL 5.7 instance are empty, permitting them to be removed safely.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从MySQL 5.7升级到MySQL 8.0时，MySQL 5.7实例中存在的任何undo表空间都将被删除，并由两个新的默认undo表空间替换。默认的undo表空间是在[`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)变量定义的位置创建的。如果[`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)变量未定义，则undo表空间将在数据目录中创建。从MySQL
    5.7升级到MySQL 8.0需要进行缓慢关闭，以确保MySQL 5.7实例中的undo表空间为空，从而可以安全地删除它们。
- en: When upgrading to MySQL 8.0.14 or later from an earlier MySQL 8.0 release, undo
    tablespaces that exist in the pre-upgrade instance as a result of an [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)
    setting greater than 2 are treated as user-defined undo tablespaces, which can
    be deactivated and dropped using [`ALTER UNDO TABLESPACE`](alter-tablespace.html
    "15.1.10 ALTER TABLESPACE Statement") and [`DROP UNDO TABLESPACE`](drop-tablespace.html
    "15.1.33 DROP TABLESPACE Statement") syntax, respectively, after upgrading. Upgrade
    within the MySQL 8.0 release series may not always require a slow shutdown which
    means that existing undo tablespaces could contain undo logs. Therefore, existing
    undo tablespaces are not removed by the upgrade process.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从较早的 MySQL 8.0 版本升级到 MySQL 8.0.14 或更高版本时，作为 [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)
    设置大于 2 的结果存在于升级前实例中的撤销表空间被视为用户定义的撤销表空间，可以在升级后使用 [`ALTER UNDO TABLESPACE`](alter-tablespace.html
    "15.1.10 ALTER TABLESPACE Statement") 和 [`DROP UNDO TABLESPACE`](drop-tablespace.html
    "15.1.33 DROP TABLESPACE Statement") 语法分别停用和删除。在 MySQL 8.0 版本系列内进行升级可能不总是需要慢速关闭，这意味着现有的撤销表空间可能包含撤销日志。因此，升级过程不会删除现有的撤销表空间。
- en: '**Incompatible change**: As of MySQL 8.0.17, the [`CREATE TABLESPACE ... ADD
    DATAFILE`](create-tablespace.html "15.1.21 CREATE TABLESPACE Statement") clause
    does not permit circular directory references. For example, the circular directory
    reference (`/../`) in the following statement is not permitted:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不兼容更改**：从 MySQL 8.0.17 开始，[`CREATE TABLESPACE ... ADD DATAFILE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement") 子句不允许循环目录引用。例如，以下语句中的循环目录引用 (`/../`) 是不允许的：'
- en: '[PRE11]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: An exception to the restriction exists on Linux, where a circular directory
    reference is permitted if the preceding directory is a symbolic link. For example,
    the data file path in the example above is permitted if *`any_directory`* is a
    symbolic link. (It is still permitted for data file paths to begin with '`../`'.)
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Linux 上存在对限制的例外情况，如果前面的目录是符号链接，则允许循环目录引用。例如，如果上面示例中的数据文件路径是 *`any_directory`*
    是符号链接，则允许。 (数据文件路径仍然可以以 '`../`' 开头。)
- en: To avoid upgrade issues, remove any circular directory references from tablespace
    data file paths before upgrading to MySQL 8.0.17 or higher. To inspect tablespace
    paths, query the Information Schema [`INNODB_DATAFILES`](information-schema-innodb-datafiles-table.html
    "28.4.10 The INFORMATION_SCHEMA INNODB_DATAFILES Table") table.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为避免升级问题，在升级到 MySQL 8.0.17 或更高版本之前，请从表空间数据文件路径中删除任何循环目录引用。要检查表空间路径，请查询信息模式 [`INNODB_DATAFILES`](information-schema-innodb-datafiles-table.html
    "28.4.10 The INFORMATION_SCHEMA INNODB_DATAFILES Table") 表。
- en: Due to a regression introduced in MySQL 8.0.14, in-place upgrade on a case-sensitive
    file system from MySQL 5.7 or a MySQL 8.0 release prior to MySQL 8.0.14 to MySQL
    8.0.16 failed for instances with partitioned tables and [`lower_case_table_names=1`](server-system-variables.html#sysvar_lower_case_table_names).
    The failure was caused by a case mismatch issue related to partitioned table file
    names. The fix that introduced the regression was reverted, which permits upgrades
    to MySQL 8.0.17 from MySQL 5.7 or MySQL 8.0 releases prior to MySQL 8.0.14 to
    function as normal. However, the regression is still present in the MySQL 8.0.14,
    8.0.15, and 8.0.16 releases.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于 MySQL 8.0.14 引入的一个回归，从 MySQL 5.7 或 MySQL 8.0.14 之前的 MySQL 8.0 版本在区分大小写文件系统上进行原地升级到
    MySQL 8.0.16 时，对于具有分区表和 [`lower_case_table_names=1`](server-system-variables.html#sysvar_lower_case_table_names)
    的实例会失败。失败是由于与分区表文件名相关的大小写不匹配问题引起的。导致回归的修复已被撤销，这允许从 MySQL 5.7 或 MySQL 8.0.14 之前的
    MySQL 8.0 版本升级到 MySQL 8.0.17 以正常运行。然而，回归仍然存在于 MySQL 8.0.14、8.0.15 和 8.0.16 版本中。
- en: 'In-place upgrade on a case-sensitive file system from MySQL 8.0.14, 8.0.15,
    or 8.0.16 to MySQL 8.0.17 fails with the following error when starting the server
    after upgrading binaries or packages to MySQL 8.0.17 if partitioned tables are
    present and [`lower_case_table_names=1`](server-system-variables.html#sysvar_lower_case_table_names):'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在从 MySQL 8.0.14、8.0.15 或 8.0.16 升级到 MySQL 8.0.17 的区分大小写文件系统上进行原地升级时，如果存在分区表且
    [`lower_case_table_names=1`](server-system-variables.html#sysvar_lower_case_table_names)，在升级二进制文件或软件包到
    MySQL 8.0.17 后启动服务器时会出现以下错误：
- en: '[PRE12]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you encounter this error when upgrading to MySQL 8.0.17, perform the following
    workaround:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在升级到 MySQL 8.0.17 时遇到此错误，请执行以下解决方法：
- en: Restart the server with [`--upgrade=force`](server-options.html#option_mysqld_upgrade)
    to force the upgrade operation to proceed.
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [`--upgrade=force`](server-options.html#option_mysqld_upgrade) 重新启动服务器以强制进行升级操作。
- en: 'Identify partitioned table file names with lowercase partition name delimiters
    `(#p#` or `#sp#`):'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别具有小写分区名称分隔符 `(#p#` 或 `#sp#`）的分区表文件名：
- en: '[PRE13]'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For each file identified, rename the associated table using a temporary name,
    then rename the table back to its original name.
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个识别的文件，将相关表重命名为临时名称，然后将表重新命名为原始名称。
- en: '[PRE14]'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Verify that there are no partitioned table file names lowercase partition name
    delimiters (an empty result set should be returned).
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保没有具有小写分区名称分隔符的分区表文件名（应返回空结果集）。
- en: '[PRE15]'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run [`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement")
    on each renamed table to update the optimizer statistics in the `mysql.innodb_index_stats`
    and `mysql.innodb_table_stats` tables.
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个重命名的表上运行 [`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement")
    以更新 `mysql.innodb_index_stats` 和 `mysql.innodb_table_stats` 表中的优化器统计信息。
- en: Because of the regression still present in the MySQL 8.0.14, 8.0.15, and 8.0.16
    releases, importing partitioned tables from MySQL 8.0.14, 8.0.15, or 8.0.16 to
    MySQL 8.0.17 is not supported on case-sensitive file systems where [`lower_case_table_names=1`](server-system-variables.html#sysvar_lower_case_table_names).
    Attempting to do so results in a “Tablespace is missing for table” error.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 MySQL 8.0.14、8.0.15 和 8.0.16 版本中仍存在的回归，从 MySQL 8.0.14、8.0.15 或 8.0.16 导入分区表到
    MySQL 8.0.17 在 [`lower_case_table_names=1`](server-system-variables.html#sysvar_lower_case_table_names)
    的区分大小写文件系统上不受支持。尝试这样做会导致“表空间缺失于表”错误。
- en: 'MySQL uses delimiter strings when constructing tablespace names and file names
    for table partitions. A “ `#p#` ” delimiter string precedes partition names, and
    an “ `#sp#` ” delimiter string precedes subpartition names, as shown:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 在构建表分区的表空间名称和文件名时使用分隔符字符串。一个“ `#p#` ”分隔符字符串位于分区名称之前，一个“ `#sp#` ”分隔符字符串位于子分区名称之前，如下所示：
- en: '[PRE16]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Historically, delimiter strings have been uppercase (`#P#` and `#SP#`) on case-sensitive
    file systems such as Linux, and lowercase (`#p#` and `#sp#`) on case-insensitive
    file systems such as Windows. As of MySQL 8.0.19, delimiter strings are lowercase
    on all file systems. This change prevents issues when migrating data directories
    between case-sensitive and case-insensitive file systems. Uppercase delimiter
    strings are no longer used.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 历史上，在诸如 Linux 等区分大小写的文件系统上，分隔符字符串为大写（`#P#` 和 `#SP#`），而在诸如 Windows 等不区分大小写的文件系统上为小写（`#p#`
    和 `#sp#`）。从 MySQL 8.0.19 开始，分隔符字符串在所有文件系统上都为小写。此更改可防止在区分大小写和不区分大小写的文件系统之间迁移数据目录时出现问题。不再使用大写分隔符字符串。
- en: 'Additionally, partition tablespace names and file names generated based on
    user-specified partition or subpartition names, which can be specified in uppercase
    or lowercase, are now generated (and stored internally) in lowercase regardless
    of the [`lower_case_table_names`](server-system-variables.html#sysvar_lower_case_table_names)
    setting to ensure case-insensitivity. For example, if a table partition is created
    with the name `PART_1`, the tablespace name and file name are generated in lowercase:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，基于用户指定的分区或子分区名称生成的分区表空间名称和文件名，无论 [`lower_case_table_names`](server-system-variables.html#sysvar_lower_case_table_names)
    设置如何，现在都会生成（并在内部存储）为小写，以确保不区分大小写。例如，如果创建了一个名为 `PART_1` 的表分区，则表空间名称和文件名将以小写形式生成：
- en: '[PRE17]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'During upgrade, MySQL checks and modifies if necessary:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在升级期间，MySQL 检查并根据需要修改：
- en: Partition file names on disk and in the data dictionary to ensure lowercase
    delimiters and partition names.
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在磁盘上和数据字典中识别分区表文件名，以确保小写分隔符和分区名称。
- en: Partition metadata in the data dictionary for related issues introduced by previous
    bug fixes.
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据字典中的分区元数据，以解决之前 bug 修复引入的相关问题。
- en: '`InnoDB` statistics data for related issues introduced by previous bug fixes.'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` 统计数据用于之前 bug 修复引入的相关问题。'
- en: During tablespace import operations, partition tablespace file names on disk
    are checked and modified if necessary to ensure lowercase delimiters and partition
    names.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表空间导入操作期间，会检查并根据需要修改磁盘上的分区表空间文件名，以确保小写分隔符和分区名称。
- en: As of MySQL 8.0.21, a warning is written to the error log at startup or when
    upgrading from MySQL 5.7 if tablespace data files are found to reside in unknown
    directories. Known directories are those defined by the [`datadir`](server-system-variables.html#sysvar_datadir),
    [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir),
    and [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories) variables.
    To make a directory known, add it to the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    setting. Making directories known ensures that data files can be found during
    recovery. For more information, see [Tablespace Discovery During Crash Recovery](innodb-recovery.html#innodb-recovery-tablespace-discovery
    "Tablespace Discovery During Crash Recovery").
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.21开始，在启动时或从MySQL 5.7升级时，如果发现表空间数据文件位于未知目录中，将向错误日志写入警告。已知目录是由[`datadir`](server-system-variables.html#sysvar_datadir)、[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)和[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)变量定义的目录。要使目录成为已知目录，请将其添加到[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)设置中。使目录成为已知目录可确保在恢复期间可以找到数据文件。有关更多信息，请参见[崩溃恢复期间的表空间发现](innodb-recovery.html#innodb-recovery-tablespace-discovery
    "崩溃恢复期间的表空间发现")。
- en: '**Important change**: From MySQL 8.0.30, the [`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)
    variable controls the amount of disk space occupied by redo log files. With this
    change, the default number of redo log files and their location has also changed.
    From MySQL 8.0.30, `InnoDB` maintains 32 redo log files in the `#innodb_redo`
    directory in the data directory. Previously, `InnoDB` created two redo log files
    in the data directory by default, and the number and size of redo log files were
    controlled by the [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    and [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    variables. These two variables are now deprecated.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重要变更**：从MySQL 8.0.30开始，[`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)变量控制重做日志文件占用的磁盘空间量。随着这一变更，默认的重做日志文件数量和位置也发生了变化。从MySQL
    8.0.30开始，`InnoDB`在数据目录中的`#innodb_redo`目录中维护32个重做日志文件。以前，`InnoDB`默认在数据目录中创建两个重做日志文件，并且重做日志文件的数量和大小由[`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)和[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)变量控制。这两个变量现已弃用。'
- en: When the [`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)
    setting is defined, [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    and [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    settings are ignored; otherwise, those settings are used to compute the `innodb_redo_log_capacity`
    setting (`innodb_log_files_in_group` * `innodb_log_file_size` = `innodb_redo_log_capacity`).
    If none of those variables are set, redo log capacity is set to the `innodb_redo_log_capacity`
    default value, which is 104857600 bytes (100MB).
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当定义了[`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)设置时，将忽略[`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)和[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)设置；否则，将使用这些设置来计算`innodb_redo_log_capacity`设置（`innodb_log_files_in_group`
    * `innodb_log_file_size` = `innodb_redo_log_capacity`）。如果这些变量都没有设置，则重做日志容量将设置为`innodb_redo_log_capacity`的默认值，即104857600字节（100MB）。
- en: As is generally required for any upgrade, this change requires a clean shutdown
    before upgrading.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与任何升级一样，此更改在升级之前需要干净的关闭。
- en: For more information about this feature, see [Section 17.6.5, “Redo Log”](innodb-redo-log.html
    "17.6.5 Redo Log").
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关此功能的更多信息，请参见[第17.6.5节，“重做日志”](innodb-redo-log.html "17.6.5 重做日志")。
- en: 'Before MySQL 5.7.35, there was no size limitation for indexes in tables with
    redundant or compact row format. As of MySQL 5.7.35, the limit is 767 bytes. An
    upgrade from a MySQL version before 5.7.35 to MySQL 8.0 can produce inaccessible
    tables. If a table with redundant or compact row format has an index larger than
    767 bytes, drop the index and re-create it before an upgrade to MySQL 8.0\. The
    error message is:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 5.7.35之前，具有冗余或紧凑行格式的表中的索引没有大小限制。从MySQL 5.7.35开始，限制为767字节。从MySQL 5.7.35之前的MySQL版本升级到MySQL
    8.0可能会导致无法访问的表。如果具有冗余或紧凑行格式的表的索引大于767字节，请在升级到MySQL 8.0之前删除索引并重新创建。错误消息为：
- en: '[PRE18]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: SQL Changes
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL 变更
- en: '**Incompatible change**: As of MySQL 8.0.13, the deprecated `ASC` or `DESC`
    qualifiers for `GROUP BY` clauses have been removed. Queries that previously relied
    on `GROUP BY` sorting may produce results that differ from previous MySQL versions.
    To produce a given sort order, provide an `ORDER BY` clause.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不兼容更改**：从 MySQL 8.0.13 开始，已删除了对 `GROUP BY` 子句的已弃用 `ASC` 或 `DESC` 修饰符。先前依赖于
    `GROUP BY` 排序的查询可能会产生与先前 MySQL 版本不同的结果。为了产生给定的排序顺序，请提供一个 `ORDER BY` 子句。'
- en: Queries and stored program definitions from MySQL 8.0.12 or lower that use `ASC`
    or `DESC` qualifiers for `GROUP BY` clauses should be amended. Otherwise, upgrading
    to MySQL 8.0.13 or higher may fail, as may replicating to MySQL 8.0.13 or higher
    replica servers.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.12 或更低版本中使用 `ASC` 或 `DESC` 修饰符进行 `GROUP BY` 子句的查询和存储程序定义应进行修改。否则，升级到
    MySQL 8.0.13 或更高版本可能会失败，复制到 MySQL 8.0.13 或更高版本的复制服务器也可能失败。
- en: Some keywords may be reserved in MySQL 8.0 that were not reserved in MySQL 5.7\.
    See [Section 11.3, “Keywords and Reserved Words”](keywords.html "11.3 Keywords
    and Reserved Words"). This can cause words previously used as identifiers to become
    illegal. To fix affected statements, use identifier quoting. See [Section 11.2,
    “Schema Object Names”](identifiers.html "11.2 Schema Object Names").
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0 中可能会保留一些在 MySQL 5.7 中未保留的关键字。请参阅[第 11.3 节，“关键字和保留字”](keywords.html
    "11.3 关键字和保留字")。这可能导致先前用作标识符的单词变得非法。要修复受影响的语句，请使用标识符引用。请参阅[第 11.2 节，“模式对象名称”](identifiers.html
    "11.2 模式对象名称")。
- en: After upgrading, it is recommended that you test optimizer hints specified in
    application code to ensure that the hints are still required to achieve the desired
    optimization strategy. Optimizer enhancements can sometimes render certain optimizer
    hints unnecessary. In some cases, an unnecessary optimizer hint may even be counterproductive.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级后，建议测试应用程序代码中指定的优化器提示，以确保这些提示仍然需要实现所需的优化策略。优化器增强有时可能使某些优化器提示变得不必要。在某些情况下，不必要的优化器提示甚至可能适得其反。
- en: '**Incompatible change**: In MySQL 5.7, specifying a `FOREIGN KEY` definition
    for an `InnoDB` table without a `CONSTRAINT *`symbol`*` clause, or specifying
    the `CONSTRAINT` keyword without a `symbol`, causes `InnoDB` to use a generated
    constraint name. That behavior changed in MySQL 8.0, with `InnoDB` using the `FOREIGN
    KEY *`index_name`*` value instead of a generated name. Because constraint names
    must be unique per schema (database), the change caused errors due to foreign
    key index names that were not unique per schema. To avoid such errors, the new
    constraint naming behavior has been reverted in MySQL 8.0.16, and `InnoDB` once
    again uses a generated constraint name.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不兼容更改**：在 MySQL 5.7 中，为 `InnoDB` 表指定 `FOREIGN KEY` 定义而不带 `CONSTRAINT *`symbol`*`
    子句，或者指定 `CONSTRAINT` 关键字而不带 `symbol`，会导致 `InnoDB` 使用生成的约束名。在 MySQL 8.0 中，`InnoDB`
    的行为发生了变化，使用 `FOREIGN KEY *`index_name`*` 值而不是生成的名称。由于约束名必须在模式（数据库）中唯一，这种更改导致由于外键索引名称在模式中不唯一而导致错误。为避免此类错误，新的约束命名行为已在
    MySQL 8.0.16 中恢复，`InnoDB` 再次使用生成的约束名。'
- en: For consistency with `InnoDB`, `NDB` releases based on MySQL 8.0.16 or higher
    use a generated constraint name if the `CONSTRAINT *`symbol`*` clause is not specified,
    or the `CONSTRAINT` keyword is specified without a `symbol`. `NDB` releases based
    on MySQL 5.7 and earlier MySQL 8.0 releases used the `FOREIGN KEY *`index_name`*`
    value.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了与 `InnoDB` 保持一致，基于 MySQL 8.0.16 或更高版本的 `NDB` 发行版如果未指定 `CONSTRAINT *`symbol`*`
    子句，或者指定 `CONSTRAINT` 关键字而不带 `symbol`，则使用生成的约束名。基于 MySQL 5.7 和早期 MySQL 8.0 发行版的
    `NDB` 发行版使用 `FOREIGN KEY *`index_name`*` 值。
- en: The changes described above may introduce incompatibilities for applications
    that depend on the previous foreign key constraint naming behavior.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述描述的更改可能会对依赖于先前外键约束命名行为的应用程序造成不兼容性。
- en: The handling of system variable values by MySQL flow control functions such
    as [`IFNULL()`](flow-control-functions.html#function_ifnull) and [`CASE()`](flow-control-functions.html#operator_case)
    changed in MySQL 8.0.22; system variable values are now handled as column values
    of the same character and collation, rather than as constants. Some queries using
    these functions with system variables that were previously successful may subsequently
    be rejected with Illegal mix of collations. In such cases, cast the system variable
    to the correct character set and collation.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8.0 中的系统变量值处理方式已更改，例如 [`IFNULL()`](flow-control-functions.html#function_ifnull)
    和 [`CASE()`](flow-control-functions.html#operator_case) 等 MySQL 流控制函数；现在系统变量值被视为相同字符和排序规则的列值，而不是常量。一些使用这些函数与系统变量的查询可能会被拒绝，出现
    Illegal mix of collations。在这种情况下，将系统变量转换为正确的字符集和排序规则。
- en: '**Incompatible change**: MySQL 8.0.28 fixes an issue in previous MySQL 8.0
    releases whereby the [`CONVERT()`](cast-functions.html#function_convert) function
    sometimes allowed invalid casts of [`BINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types") values to nonbinary character sets. Applications
    which may have relied on this behavior should be checked and if necessary modified
    prior to upgrade.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不兼容的更改**：MySQL 8.0.28 修复了先前 MySQL 8.0 版本中的问题，即 [`CONVERT()`](cast-functions.html#function_convert)
    函数有时允许将 [`BINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types")
    值无效地转换为非二进制字符集。可能依赖于此行为的应用程序应在升级之前进行检查，并在必要时进行修改。'
- en: 'In particular, where `CONVERT()` was used as part of an expression for an indexed
    generated column, the change in the function''s behavior may result in index corruption
    following an upgrade to MySQL 8.0.28\. You can prevent this from happening by
    following these steps:'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特别是，在索引生成列的表达式中使用 `CONVERT()`，函数行为的更改可能导致在升级到 MySQL 8.0.28 之后索引损坏。您可以通过以下步骤防止这种情况发生：
- en: Prior to performing the upgrade, correct any invalid input data.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行升级之前，纠正任何无效的输入数据。
- en: Drop and then re-create the index.
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除然后重新创建索引。
- en: You can also force a table rebuild using [`ALTER TABLE *`table`* FORCE`](alter-table.html
    "15.1.9 ALTER TABLE Statement"), instead.
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还可以使用 [`ALTER TABLE *`table`* FORCE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") 强制重建表。
- en: Upgrade the MySQL software.
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级 MySQL 软件。
- en: If you cannot validate the input data beforehand, you should not re-create the
    index or rebuild the table until after you perform the upgrade to MySQL 8.0.28.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您无法事先验证输入数据，则在升级到 MySQL 8.0.28 之后，不应重新创建索引或重建表。
- en: Changed Server Defaults
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改的服务器默认值
- en: MySQL 8.0 comes with improved defaults, aiming at the best out of the box experience
    possible. These changes are driven by the fact that technology is advancing (machines
    have more CPUS, use SSDs and so on), more data is being stored, MySQL is evolving
    (InnoDB, Group Replication, AdminAPI), and so on. The following table summarizes
    the defaults which have been changed to provide the best MySQL experience for
    the majority of users.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0 提供了改进的默认值，旨在为大多数用户提供最佳的开箱即用体验。这些变化是由于技术的进步（机器拥有更多 CPU，使用 SSD 等），存储的数据更多，MySQL
    正在发展（InnoDB，Group Replication，AdminAPI）等。以下表格总结了已更改的默认值，以为大多数用户提供最佳的 MySQL 体验。
- en: '| Option/Parameter | Old Default | New Default |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 选项/参数 | 旧默认值 | 新默认值 |'
- en: '| *Server changes* |  |  |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| *服务器更改* |  |  |'
- en: '| [`character_set_server`](server-system-variables.html#sysvar_character_set_server)
    | latin1 | utf8mb4 |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| [`character_set_server`](server-system-variables.html#sysvar_character_set_server)
    | latin1 | utf8mb4 |'
- en: '| [`collation_server`](server-system-variables.html#sysvar_collation_server)
    | latin1_swedish_ci | utf8mb4_0900_ai_ci |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| [`collation_server`](server-system-variables.html#sysvar_collation_server)
    | latin1_swedish_ci | utf8mb4_0900_ai_ci |'
- en: '| [`explicit_defaults_for_timestamp`](server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    | OFF | ON |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| [`explicit_defaults_for_timestamp`](server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    | OFF | ON |'
- en: '| [`optimizer_trace_max_mem_size`](server-system-variables.html#sysvar_optimizer_trace_max_mem_size)
    | 16KB | 1MB |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| [`optimizer_trace_max_mem_size`](server-system-variables.html#sysvar_optimizer_trace_max_mem_size)
    | 16KB | 1MB |'
- en: '| [`validate_password_check_user_name`](validate-password-options-variables.html#sysvar_validate_password_check_user_name)
    | OFF | ON |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| [`validate_password_check_user_name`](validate-password-options-variables.html#sysvar_validate_password_check_user_name)
    | OFF | ON |'
- en: '| [`back_log`](server-system-variables.html#sysvar_back_log) | -1 (autosize)
    changed from : back_log = 50 + (max_connections / 5) | -1 (autosize) changed to
    : back_log = max_connections |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| [`back_log`](server-system-variables.html#sysvar_back_log) | -1 (autosize)
    changed from : back_log = 50 + (max_connections / 5) | -1 (autosize) changed to
    : back_log = max_connections |'
- en: '| [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)
    | 4194304 (4MB) | 67108864 (64MB) |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)
    | 4194304 (4MB) | 67108864 (64MB) |'
- en: '| [`max_error_count`](server-system-variables.html#sysvar_max_error_count)
    | 64 | 1024 |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`max_error_count`](server-system-variables.html#sysvar_max_error_count)
    | 64 | 1024 |'
- en: '| [`event_scheduler`](server-system-variables.html#sysvar_event_scheduler)
    | OFF | ON |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`event_scheduler`](server-system-variables.html#sysvar_event_scheduler)
    | OFF | ON |'
- en: '| [`table_open_cache`](server-system-variables.html#sysvar_table_open_cache)
    | 2000 | 4000 |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`table_open_cache`](server-system-variables.html#sysvar_table_open_cache)
    | 2000 | 4000 |'
- en: '| [`log_error_verbosity`](server-system-variables.html#sysvar_log_error_verbosity)
    | 3 (Notes) | 2 (Warning) |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`log_error_verbosity`](server-system-variables.html#sysvar_log_error_verbosity)
    | 3 (Notes) | 2 (Warning) |'
- en: '| [`local_infile`](server-system-variables.html#sysvar_local_infile) | ON (5.7)
    | OFF |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`local_infile`](server-system-variables.html#sysvar_local_infile) | ON (5.7)
    | OFF |'
- en: '| *InnoDB changes* |  |  |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| *InnoDB更改* |  |  |'
- en: '| [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)
    | 0 | 2 |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)
    | 0 | 2 |'
- en: '| [`innodb_undo_log_truncate`](innodb-parameters.html#sysvar_innodb_undo_log_truncate)
    | OFF | ON |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| [`innodb_undo_log_truncate`](innodb-parameters.html#sysvar_innodb_undo_log_truncate)
    | OFF | ON |'
- en: '| [`innodb_flush_method`](innodb-parameters.html#sysvar_innodb_flush_method)
    | NULL | fsync (Unix), unbuffered (Windows) |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| [`innodb_flush_method`](innodb-parameters.html#sysvar_innodb_flush_method)
    | NULL | fsync (Unix), unbuffered (Windows) |'
- en: '| [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    | 1 (consecutive) | 2 (interleaved) |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    | 1 (consecutive) | 2 (interleaved) |'
- en: '| [`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors)
    | 1 (enable) | 0 (disable) |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors)
    | 1 (enable) | 0 (disable) |'
- en: '| [`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)
    | 0 (%) | 10 (%) |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)
    | 0 (%) | 10 (%) |'
- en: '| [`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)
    | 75 (%) | 90 (%) |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)
    | 75 (%) | 90 (%) |'
- en: '| *Performance Schema changes* |  |  |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| *性能模式更改* |  |  |'
- en: '| `performance-schema-instrument=''wait/lock/metadata/sql/%=ON''` | OFF | ON
    |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `performance-schema-instrument=''wait/lock/metadata/sql/%=ON''` | OFF | ON
    |'
- en: '| `performance-schema-instrument=''memory/%=COUNTED''` | OFF | COUNTED |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `performance-schema-instrument=''memory/%=COUNTED''` | OFF | COUNTED |'
- en: '| `performance-schema-consumer-events-transactions-current=ON` | OFF | ON |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `performance-schema-consumer-events-transactions-current=ON` | OFF | ON |'
- en: '| `performance-schema-consumer-events-transactions-history=ON` | OFF | ON |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `performance-schema-consumer-events-transactions-history=ON` | OFF | ON |'
- en: '| `performance-schema-instrument=''transaction%=ON''` | OFF | ON |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `performance-schema-instrument=''transaction%=ON''` | OFF | ON |'
- en: '| *Replication changes* |  |  |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| *复制更改* |  |  |'
- en: '| [`log_bin`](replication-options-binary-log.html#sysvar_log_bin) | OFF | ON
    |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| [`log_bin`](replication-options-binary-log.html#sysvar_log_bin) | OFF | ON
    |'
- en: '| [`server_id`](replication-options.html#sysvar_server_id) | 0 | 1 |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| [`server_id`](replication-options.html#sysvar_server_id) | 0 | 1 |'
- en: '| [`log-slave-updates`](replication-options-binary-log.html#sysvar_log_slave_updates)
    | OFF | ON |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| [`log-slave-updates`](replication-options-binary-log.html#sysvar_log_slave_updates)
    | OFF | ON |'
- en: '| [`expire_logs_days`](replication-options-binary-log.html#sysvar_expire_logs_days)
    | 0 | 30 |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| [`expire_logs_days`](replication-options-binary-log.html#sysvar_expire_logs_days)
    | 0 | 30 |'
- en: '| [`master-info-repository`](replication-options-replica.html#sysvar_master_info_repository)
    | FILE | TABLE |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| [`master-info-repository`](replication-options-replica.html#sysvar_master_info_repository)
    | FILE | TABLE |'
- en: '| [`relay-log-info-repository`](replication-options-replica.html#sysvar_relay_log_info_repository)
    | FILE | TABLE |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| [`relay-log-info-repository`](replication-options-replica.html#sysvar_relay_log_info_repository)
    | FILE | TABLE |'
- en: '| [`transaction-write-set-extraction`](replication-options-binary-log.html#sysvar_transaction_write_set_extraction)
    | OFF | XXHASH64 |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| [`transaction-write-set-extraction`](replication-options-binary-log.html#sysvar_transaction_write_set_extraction)
    | OFF | XXHASH64 |'
- en: '| [`slave_rows_search_algorithms`](replication-options-replica.html#sysvar_slave_rows_search_algorithms)
    | INDEX_SCAN, TABLE_SCAN | INDEX_SCAN, HASH_SCAN |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [`slave_rows_search_algorithms`](replication-options-replica.html#sysvar_slave_rows_search_algorithms)
    | INDEX_SCAN, TABLE_SCAN | INDEX_SCAN, HASH_SCAN |'
- en: '| [`slave_pending_jobs_size_max`](replication-options-replica.html#sysvar_slave_pending_jobs_size_max)
    | 16M | 128M |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [`slave_pending_jobs_size_max`](replication-options-replica.html#sysvar_slave_pending_jobs_size_max)
    | 16M | 128M |'
- en: '| [`gtid_executed_compression_period`](replication-options-gtids.html#sysvar_gtid_executed_compression_period)
    | 1000 | 0 |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [`gtid_executed_compression_period`](replication-options-gtids.html#sysvar_gtid_executed_compression_period)
    | 1000 | 0 |'
- en: '| *Group Replication changes* |  |  |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| *组复制更改* |  |  |'
- en: '| [`group_replication_autorejoin_tries`](group-replication-system-variables.html#sysvar_group_replication_autorejoin_tries)
    | 0 | 3 |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [`group_replication_autorejoin_tries`](group-replication-system-variables.html#sysvar_group_replication_autorejoin_tries)
    | 0 | 3 |'
- en: '| [`group_replication_exit_state_action`](group-replication-system-variables.html#sysvar_group_replication_exit_state_action)
    | ABORT_SERVER | READ_ONLY |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [`group_replication_exit_state_action`](group-replication-system-variables.html#sysvar_group_replication_exit_state_action)
    | ABORT_SERVER | READ_ONLY |'
- en: '| [`group_replication_member_expel_timeout`](group-replication-system-variables.html#sysvar_group_replication_member_expel_timeout)
    | 0 | 5 |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| [`group_replication_member_expel_timeout`](group-replication-system-variables.html#sysvar_group_replication_member_expel_timeout)
    | 0 | 5 |'
- en: '| Option/Parameter | Old Default | New Default |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: 选项/参数 | 旧默认值 | 新默认值 |
- en: For more information about options or variables which have been added, see [Option
    and Variable Changes for MySQL 8.0](/doc/mysqld-version-reference/en/optvar-changes-8-0.html),
    in the *MySQL Server Version Reference*.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 有关已添加的选项或变量的更多信息，请参阅[MySQL 8.0的选项和变量更改](/doc/mysqld-version-reference/en/optvar-changes-8-0.html)，在*MySQL服务器版本参考*中。
- en: The following sections explain the changes to defaults and any impact they might
    have on your deployment.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分解释了默认值的更改以及它们可能对您的部署产生的影响。
- en: '**Server Defaults**'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器默认值**'
- en: The default value of the [`character_set_server`](server-system-variables.html#sysvar_character_set_server)
    system variable and command line option [`--character-set-server`](server-system-variables.html#sysvar_character_set_server) 
    changed from `latin1` to `utf8mb4`. This is the server’s default character set.
    At this time, UTF8MB4 is the dominant character encoding for the web, and this
    change makes life easier for the vast majority of MySQL users. The upgrade from
    5.7 to 8.0 does not change the character set for any existing database objects,
    but, unless you set `character_set_server` explicitly (either back to the previous
    value, or to a new one), a new schema uses `utf8mb4` by default. We recommend
    that you move to `utf8mb4` whenever possible.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`character_set_server`](server-system-variables.html#sysvar_character_set_server)系统变量和命令行选项[`--character-set-server`](server-system-variables.html#sysvar_character_set_server)的默认值从`latin1`更改为`utf8mb4`。这是服务器的默认字符集。目前，UTF8MB4是网络的主要字符编码，这一变化使得绝大多数MySQL用户的生活更加便利。从5.7升级到8.0不会更改任何现有数据库对象的字符集，但是，除非您明确设置`character_set_server`（要么回到以前的值，要么设置为新值），否则新模式默认使用`utf8mb4`。我们建议尽可能迁移到`utf8mb4`。'
- en: The default value of the  [`collation_server`](server-system-variables.html#sysvar_collation_server)
    system variable and command line argument [`--collation-server`](server-system-variables.html#sysvar_collation_server)
    changed from `latin1_swedish_ci` to `utf8mb4_0900_ai_ci`. This is the server’s
    default collation, the ordering of characters in a character set. There is a link
    between collations and character sets as each character set comes with a list
    of possible collations. The upgrade from 5.7 to 8.0 does not change any collation
    for any existing database objects, but takes effect for new objects.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`collation_server`](server-system-variables.html#sysvar_collation_server)系统变量和命令行参数[`--collation-server`](server-system-variables.html#sysvar_collation_server)的默认值从`latin1_swedish_ci`更改为`utf8mb4_0900_ai_ci`。这是服务器的默认排序规则，即字符集中字符的排序。排序规则和字符集之间存在链接，因为每个字符集都有可能的排序规则列表。从5.7升级到8.0不会更改任何现有数据库对象的排序规则，但会影响新对象。'
- en: The default value of the [`explicit_defaults_for_timestamp`](server-system-variables.html#sysvar_explicit_defaults_for_timestamp)
    system variable changed from `OFF` (MySQL legacy behavior) to `ON` (SQL standard
    behavior). This option was originally introduced in 5.6 and was `OFF` in 5.6 and
    5.7.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`explicit_defaults_for_timestamp`](server-system-variables.html#sysvar_explicit_defaults_for_timestamp)系统变量的默认值从`OFF`（MySQL传统行为）更改为`ON`（SQL标准行为）。此选项最初在5.6中引入，在5.6和5.7中为`OFF`。'
- en: The default value of the [`optimizer_trace_max_mem_size`](server-system-variables.html#sysvar_optimizer_trace_max_mem_size)
    system variable changed from `16KB` to `1MB`. The old default caused the optimizer
    trace to be truncated for any non-trivial query. This change ensures useful optimizer
    traces for most queries.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`optimizer_trace_max_mem_size`](server-system-variables.html#sysvar_optimizer_trace_max_mem_size)系统变量的默认值从`16KB`更改为`1MB`。旧默认值会导致对于任何非平凡查询，优化器跟踪被截断。这一变化确保了大多数查询的优化器跟踪是有用的。'
- en: The default value of the [`validate_password_check_user_name`](validate-password-options-variables.html#sysvar_validate_password_check_user_name)
    system variable changed from `OFF` to `ON`. This means that when the `validate_password`
    plugin is enabled, by default it now rejects passwords that match the current
    session user name.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`validate_password_check_user_name`](validate-password-options-variables.html#sysvar_validate_password_check_user_name)系统变量的默认值从`OFF`更改为`ON`。这意味着当启用`validate_password`插件时，默认情况下现在拒绝与当前会话用户名匹配的密码。'
- en: The autosize algorithm for the [`back_log`](server-system-variables.html#sysvar_back_log)
    system variable has changed.  The value for autosize (-1) is now set to the value
    of [`max_connections`](server-system-variables.html#sysvar_max_connections), which
    is bigger than the calculated by `50 + (max_connections / 5)`. The `back_log`
    queues up incoming IP connect requests in situations where the server is not able
    to keep up with incoming requests. In the worst case, with [`max_connections`](server-system-variables.html#sysvar_max_connections)
    number of clients trying to reconnect at the same time, for example after a network
    failure, they can all be buffered and reject-retry loops are avoided.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`back_log`](server-system-variables.html#sysvar_back_log)系统变量的自动调整算法已更改。自动调整值（-1）现在设置为[`max_connections`](server-system-variables.html#sysvar_max_connections)的值，这比由`50
    + (max_connections / 5)`计算的值大。`back_log`在服务器无法跟上传入请求的情况下排队传入的IP连接请求。在最坏的情况下，例如在网络故障后，有[`max_connections`](server-system-variables.html#sysvar_max_connections)数量的客户端尝试重新连接时，它们都可以被缓冲，并且避免了拒绝重试循环。'
- en: The default value of the [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)
    system variable changed from `4194304` (4M) to `67108864` (64M). The main advantage
    with this larger default is less chance of receiving errors about an insert or
    query being larger than `max_allowed_packet`. It should be as big as the largest
    [Section 13.3.4, “The BLOB and TEXT Types”](blob.html "13.3.4 The BLOB and TEXT
    Types") you want to use. To revert to the previous behavior, set `max_allowed_packet=4194304`.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)系统变量的默认值从`4194304`（4M）更改为`67108864`（64M）。这个更大的默认值的主要优点是减少接收关于插入或查询大于`max_allowed_packet`的错误的机会。它应该与您想要使用的最大[第13.3.4节，“BLOB和TEXT类型”](blob.html
    "13.3.4 BLOB和TEXT类型")一样大。要恢复到以前的行为，请设置`max_allowed_packet=4194304`。'
- en: The default value of the [`max_error_count`](server-system-variables.html#sysvar_max_error_count)
    system variable changed from `64` to `1024`. This ensures that MySQL handles a
    larger number of warnings, such as an UPDATE statement that touches 1000s of rows
    and many of them give conversion warnings. It is common for many tools to batch
    updates, to help reduce replication lag. External tools such as pt-online-schema-change
    defaults to 1000, and gh-ost defaults to 100\. MySQL 8.0 covers full error history
    for these two use cases. There are no static allocations, so this change only
    affects memory consumption for statements that generate lots of warnings.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`max_error_count`](server-system-variables.html#sysvar_max_error_count)系统变量的默认值从`64`更改为`1024`。这确保了MySQL处理更多警告，例如触及数千行并且其中许多行给出转换警告的UPDATE语句。许多工具通常会批量更新，以帮助减少复制延迟。外部工具如pt-online-schema-change默认为1000，gh-ost默认为100。MySQL
    8.0覆盖了这两种用例的完整错误历史。没有静态分配，因此此更改仅影响生成大量警告的语句的内存消耗。'
- en: The default value of the [`event_scheduler`](server-system-variables.html#sysvar_event_scheduler)
    system variable changed from `OFF` to `ON`. In other words, the event scheduler
    is enabled by default. This is an enabler for new features in SYS, for example
    “kill idle transactions”.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`event_scheduler`](server-system-variables.html#sysvar_event_scheduler)系统变量的默认值从`OFF`更改为`ON`。换句话说，默认情况下启用事件调度程序。这是SYS中新功能的启用程序，例如“终止空闲事务”。'
- en: The default value of the [`table_open_cache`](server-system-variables.html#sysvar_table_open_cache)
    system variable changed from `2000` to `4000`. This is a minor change which increases
    session concurrency on table access.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`table_open_cache`](server-system-variables.html#sysvar_table_open_cache)系统变量的默认值从`2000`更改为`4000`。这是一个增加表访问会话并发性的微小更改。'
- en: The default value of the [`log_error_verbosity`](server-system-variables.html#sysvar_log_error_verbosity)
    system variable changed from `3` (Notes) to `2` (Warning). The purpose is to make
    the MySQL 8.0 error log less verbose by default.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`log_error_verbosity`](server-system-variables.html#sysvar_log_error_verbosity)系统变量的默认值从`3`（Notes）更改为`2`（Warning）。目的是使MySQL
    8.0错误日志默认情况下更少冗长。'
- en: '**InnoDB Defaults**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**InnoDB 默认值**'
- en: '**Incompatible change** The default value of the [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)
    system variable changed from `0` to `2`. The configures the number of undo tablespaces
    used by InnoDB. In MySQL 8.0 the minimum value for [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)
    is 2 and rollback segments cannot be created in the system tablespace anymore.
    Thus, this is a case where you cannot revert back to 5.7 behavior. The purpose
    of this change is to be able to auto-truncate Undo logs (see next item), reclaiming
    disk space used by (occasional) long transactions such as a [**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program").'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不兼容的更改** [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)系统变量的默认值从`0`更改为`2`。这配置了InnoDB使用的撤销表空间的数量。在MySQL
    8.0中，[`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)的最小值为2，回滚段不再可以在系统表空间中创建。因此，这是一个您无法恢复到5.7行为的情况。这个更改的目的是能够自动截断Undo日志（见下一项），回收像[**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program")这样的（偶尔的）长事务使用的磁盘空间。'
- en: The default value of the [`innodb_undo_log_truncate`](innodb-parameters.html#sysvar_innodb_undo_log_truncate)
    system variable  changed from `OFF` to `ON`. When enabled, undo tablespaces that
    exceed the threshold value defined by [`innodb_max_undo_log_size`](innodb-parameters.html#sysvar_innodb_max_undo_log_size)
    are marked for truncation. Only undo tablespaces can be truncated. Truncating
    undo logs that reside in the system tablespace is not supported. An upgrade from
    5.7 to 8.0 automatically converts your system to use  undo tablespaces, using
    the system tablespace is not an option in 8.0.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_undo_log_truncate`](innodb-parameters.html#sysvar_innodb_undo_log_truncate)系统变量的默认值从`OFF`更改为`ON`。启用后，超过[`innodb_max_undo_log_size`](innodb-parameters.html#sysvar_innodb_max_undo_log_size)定义的阈值的撤销表空间将被标记为截断。只有撤销表空间可以被截断。不支持截断位于系统表空间中的撤销日志。从5.7升级到8.0会自动将系统转换为使用撤销表空间，8.0中不再支持使用系统表空间。'
- en: The default value of the [`innodb_flush_method`](innodb-parameters.html#sysvar_innodb_flush_method)
    system variable changed from `NULL` to `fsync` on Unix-like systems and from `NULL`
    to `unbuffered` on Windows systems. This is more of a terminology and option cleanup
    without any tangible impact. For Unix this is just a documentation change as the
    default was `fsync` also in 5.7 (the default `NULL` meant `fsync`). Similarly
    on Windows, [`innodb_flush_method`](innodb-parameters.html#sysvar_innodb_flush_method)
    default `NULL` meant `async_unbuffered` in 5.7, and is replaced by default `unbuffered`
    in 8.0, which in combination with the existing default [`innodb_use_native_aio=ON`](innodb-parameters.html#sysvar_innodb_use_native_aio)
    has the same effect.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_flush_method`](innodb-parameters.html#sysvar_innodb_flush_method)系统变量的默认值在Unix-like系统上从`NULL`更改为`fsync`，在Windows系统上从`NULL`更改为`unbuffered`。这更多是术语和选项的清理，没有任何实质性影响。对于Unix来说，这只是一个文档更改，因为默认值在5.7中也是`fsync`（默认的`NULL`意味着`fsync`）。同样，在Windows上，[`innodb_flush_method`](innodb-parameters.html#sysvar_innodb_flush_method)默认的`NULL`在5.7中意味着`async_unbuffered`，在8.0中被默认的`unbuffered`替换，这与现有的默认[`innodb_use_native_aio=ON`](innodb-parameters.html#sysvar_innodb_use_native_aio)具有相同的效果。'
- en: '**Incompatible change** The default value of the [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    system variable changed from `1` (consecutive) to `2` (interleaved). The change
    to interleaved lock mode as the default setting reflects the change from statement-based
    to row-based replication as the default replication type, which occurred in MySQL
    5.7\. *Statement-based replication* requires the consecutive auto-increment lock
    mode to ensure that auto-increment values are assigned in a predictable and repeatable
    order for a given sequence of SQL statements, whereas *row-based replication*
    is not sensitive to the execution order of SQL statements. Thus, this change is
    known to be incompatible with statement based replication, and may break some
    applications or user-generated test suites that depend on sequential auto increment.
    The previous default can be restored by setting `innodb_autoinc_lock_mode=1;`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不兼容的更改** [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)系统变量的默认值从`1`（连续）更改为`2`（交错）。将交错锁定模式作为默认设置的更改反映了从基于语句到基于行的复制作为默认复制类型的更改，该更改发生在MySQL
    5.7中。*基于语句的复制*需要连续的自增锁定模式，以确保自增值按照可预测和可重复的顺序分配给给定序列的SQL语句，而*基于行的复制*不受SQL语句执行顺序的影响。因此，这一更改已知与基于语句的复制不兼容，并可能破坏一些依赖于顺序自增的应用程序或用户生成的测试套件。可以通过设置`innodb_autoinc_lock_mode=1;`来恢复先前的默认值。'
- en: The default value of the [`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors)
    system variable changes from `1` (enable) to `0` (disable). This is done because
    fast IO (SSDs) is now the default for deployment. We expect that for the majority
    of users, this results in a small performance gain. Users who are using slower
    hard drives may see a performance loss, and are encouraged to revert to the previous
    defaults by setting `innodb_flush_neighbors=1`.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors)系统变量的默认值从`1`（启用）更改为`0`（禁用）。这是因为快速IO（SSD）现在是部署的默认设置。我们预计对于大多数用户，这将带来轻微的性能提升。使用较慢硬盘的用户可能会看到性能下降，并鼓励他们通过设置`innodb_flush_neighbors=1`来恢复到先前的默认值。'
- en: The default value of the [`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)
    system variable changed from `0` (%) to `10` (%). With `innodb_max_dirty_pages_pct_lwm=10`,
    InnoDB increases its flushing activity when >10% of the buffer pool contains modified
    (‘dirty’) pages. The purpose of this change is to trade off peak throughput slightly,
    in exchange for more consistent performance.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)系统变量的默认值从`0`
    (%)更改为`10` (%)。当`innodb_max_dirty_pages_pct_lwm=10`时，InnoDB在缓冲池中包含修改（''脏''）页面超过10%时增加其刷新活动。这一变化的目的是略微降低峰值吞吐量，以换取更一致的性能。'
- en: The default value of the [`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)
    system variable changed from `75` (%) to `90` (%). This change combines with the
    change to [`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)
    and together they ensure a smooth InnoDB flushing behavior, avoiding flushing
    bursts. To revert to the previous behavior, set `innodb_max_dirty_pages_pct=75`
    and `innodb_max_dirty_pages_pct_lwm=0`.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)系统变量的默认值从`75`
    (%)更改为`90` (%)。这一变化与[`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)的更改结合在一起，确保InnoDB的刷新行为平稳，避免刷新突发。要恢复到先前的行为，设置`innodb_max_dirty_pages_pct=75`和`innodb_max_dirty_pages_pct_lwm=0`。'
- en: '**Performance Schema Defaults**'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能模式默认值**'
- en: Performance Schema Meta Data Locking  (MDL) instrumentation is turned on by
    default. The compiled default  for `performance-schema-instrument='wait/lock/metadata/sql/%=ON'`
    changed from `OFF` to `ON`.  This is an enabler for adding MDL oriented views
    in SYS.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，性能模式元数据锁定（MDL）仪表化默认打开。`performance-schema-instrument='wait/lock/metadata/sql/%=ON'`的编译默认值从`OFF`更改为`ON`。这是为了在SYS中添加基于MDL的视图的启用器。
- en: Performance Schema Memory instrumentation is turned on by default. The compiled
    default  for `performance-schema-instrument='memory/%=COUNTED'` changed from `OFF`
    to `COUNTED`. This is important because the accounting is incorrect if instrumentation
    is enabled after server start, and you could get a negative balance from missing
    an allocation, but catching a free.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能模式内存仪表化默认开启。`performance-schema-instrument='memory/%=COUNTED'`的编译默认值从`OFF`更改为`COUNTED`。这很重要，因为如果在服务器启动后启用了仪表化，会导致计算不正确，可能会因为错过分配而得到负余额，但捕捉到释放。
- en: Performance Schema Transaction instrumentation is turned on by default. The
    compiled default  for  `performance-schema-consumer-events-transactions-current=ON`,
    `performance-schema-consumer-events-transactions-history=ON`, and `performance-schema-instrument='transaction%=ON'`
    changed from `OFF` to `ON`.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能模式事务仪表化默认开启。`performance-schema-consumer-events-transactions-current=ON`，`performance-schema-consumer-events-transactions-history=ON`，和`performance-schema-instrument='transaction%=ON'`的编译默认值从`OFF`更改为`ON`。
- en: '**Replication Defaults**'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**复制默认值**'
- en: The default value of the [`log_bin`](replication-options-binary-log.html#sysvar_log_bin)
    system variable changed from `OFF` to `ON`. In other words, binary logging is
    enabled by default. Nearly all production installations have the binary log enabled
    as it is used for replication and point-in-time recovery. Thus, by enabling binary
    log by default we eliminate one configuration step, enabling it later requires
    a [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server") restart. Enabling
    it by default also provides better test coverage and it becomes easier to spot
    performance regressions. Remember to also set [`server_id`](replication-options.html#sysvar_server_id)
    (see following change). The 8.0 default behavior is as if you issued `./mysqld
    --log-bin --server-id=1`. If you are on 8.0 and want 5.7 behavior you can issue `./mysqld
    --skip-log-bin --server-id=0`.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`log_bin`](replication-options-binary-log.html#sysvar_log_bin)系统变量的默认值从`OFF`更改为`ON`。换句话说，默认情况下启用了二进制日志记录。几乎所有的生产安装都启用了二进制日志，因为它用于复制和时间点恢复。因此，默认情况下启用二进制日志可以省去一个配置步骤，稍后启用需要重新启动[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")。默认情况下启用它还提供更好的测试覆盖率，并且更容易发现性能退化。记得也设置[`server_id`](replication-options.html#sysvar_server_id)（见下面的更改）。8.0的默认行为就好像你发出了`./mysqld
    --log-bin --server-id=1`。如果你在8.0上想要5.7的行为，可以发出`./mysqld --skip-log-bin --server-id=0`。'
- en: The default value of the [`server_id`](replication-options.html#sysvar_server_id)
    system variable changed from `0` to `1` (combines with the change to [`log_bin=ON`](replication-options-binary-log.html#sysvar_log_bin)).
    The server can be started with this default ID, but in practice you must set the
    [`server-id`](replication-options.html#sysvar_server_id) according to the replication
    infrastructure being deployed, to avoid having duplicate server ids.
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`server_id`](replication-options.html#sysvar_server_id)系统变量的默认值从`0`更改为`1`（与[`log_bin=ON`](replication-options-binary-log.html#sysvar_log_bin)的更改相结合）。服务器可以使用这个默认ID启动，但实际上你必须根据部署的复制基础架构设置[`server-id`](replication-options.html#sysvar_server_id)，以避免出现重复的服务器ID。'
- en: The default value of the [`log-slave-updates`](replication-options-binary-log.html#sysvar_log_slave_updates)
    system variable changed from `OFF` to `ON`.  This causes a replica to log replicated
    events into its own binary log. This option is required for Group Replication,
    and also ensures correct behavior in various replication chain setups, which have
    become the norm today.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`log-slave-updates`](replication-options-binary-log.html#sysvar_log_slave_updates)系统变量的默认值从`OFF`更改为`ON`。这会导致副本将复制的事件记录到自己的二进制日志中。这个选项对于组复制是必需的，并且在各种复制链设置中确保正确的行为，这在今天已经成为常态。'
- en: The default value of the [`expire_logs_days`](replication-options-binary-log.html#sysvar_expire_logs_days)
    system variable changed from `0` to `30`. The new default `30` causes [**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server") to periodically purge unused binary logs that
    are older than 30 days. This change helps prevent excessive amounts of disk space
    being wasted on binary logs that are no longer needed for replication or recovery
    purposes. The old value of `0` disables any automatic binary log purges.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`expire_logs_days`](replication-options-binary-log.html#sysvar_expire_logs_days)系统变量的默认值从`0`更改为`30`。新的默认值`30`会导致[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")定期清理未使用的超过30天的二进制日志。这个改变有助于防止过多的磁盘空间被浪费在不再需要用于复制或恢复目的的二进制日志上。旧值`0`禁用了任何自动二进制日志清理。'
- en: The default value of the [`master_info_repository`](replication-options-replica.html#sysvar_master_info_repository)
    and [`relay_log_info_repository`](replication-options-replica.html#sysvar_relay_log_info_repository)
    system variables change from `FILE` to `TABLE`. Thus in 8.0, replication metadata
    is stored in InnoDB by default. This increases reliability to try and achieve
    crash safe replication by default.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`master_info_repository`](replication-options-replica.html#sysvar_master_info_repository)和[`relay_log_info_repository`](replication-options-replica.html#sysvar_relay_log_info_repository)系统变量的默认值从`FILE`更改为`TABLE`。因此，在8.0中，默认情况下将复制元数据存储在InnoDB中。这增加了默认情况下尝试实现崩溃安全复制的可靠性。'
- en: The default value of the [`transaction-write-set-extraction`](replication-options-binary-log.html#sysvar_transaction_write_set_extraction)
    system variable changed from `OFF` to `XXHASH64`. This change enables transaction
    write sets by default. By using Transaction Write Sets, the source has to do slightly
    more work to generate the write sets, but the result is helpful in conflict detection.
    This is a requirement for Group Replication and the new default makes it easy
    to enable binary log writeset parallelization on the source to speed up replication.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`transaction-write-set-extraction`](replication-options-binary-log.html#sysvar_transaction_write_set_extraction)系统变量的默认值从`OFF`更改为`XXHASH64`。这个改变默认启用了事务写入集。通过使用事务写入集，源必须稍微增加一些工作来生成写入集，但结果对于冲突检测是有帮助的。这是Group
    Replication的要求，新的默认值使得在源上启用二进制日志写入集并行化变得更容易，以加快复制速度。'
- en: The default value of the [`slave_rows_search_algorithms`](replication-options-replica.html#sysvar_slave_rows_search_algorithms)
    system variable changed from `INDEX_SCAN,TABLE_SCAN` to `INDEX_SCAN,HASH_SCAN`.
    This change speeds up row-based replication by reducing the number of table scans
    the replica applier has to do to apply the changes to a table without a primary
    key.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`slave_rows_search_algorithms`](replication-options-replica.html#sysvar_slave_rows_search_algorithms)系统变量的默认值从`INDEX_SCAN,TABLE_SCAN`更改为`INDEX_SCAN,HASH_SCAN`。这个改变通过减少复制应用程序必须执行的表扫描次数来加快基于行的复制速度，以应用对没有主键的表的更改。'
- en: The default value of the [`slave_pending_jobs_size_max`](replication-options-replica.html#sysvar_slave_pending_jobs_size_max)
    system variable changed from `16M` to `128M`. This change increases the amount
    of memory available to multithreaded replicas.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`slave_pending_jobs_size_max`](replication-options-replica.html#sysvar_slave_pending_jobs_size_max)系统变量的默认值从`16M`更改为`128M`。这个改变增加了可用于多线程复制的内存量。'
- en: The default value of the [`gtid_executed_compression_period`](replication-options-gtids.html#sysvar_gtid_executed_compression_period)
    system variable changed from `1000` to `0`. This change ensures that compression
    of the `mysql.gtid_executed` table only occurs implicitly as required.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`gtid_executed_compression_period`](replication-options-gtids.html#sysvar_gtid_executed_compression_period)系统变量的默认值从`1000`更改为`0`。这个改变确保`mysql.gtid_executed`表的压缩只在需要时隐含发生。'
- en: '**Group Replication Defaults**'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**Group Replication Defaults**'
- en: The default value of [`group_replication_autorejoin_tries`](group-replication-system-variables.html#sysvar_group_replication_autorejoin_tries)
    changed from 0 to 3, which means that automatic rejoin is enabled by default.
    This system variable specifies the number of tries that a member makes to automatically
    rejoin the group if it is expelled, or if it is unable to contact a majority of
    the group before the [`group_replication_unreachable_majority_timeout`](group-replication-system-variables.html#sysvar_group_replication_unreachable_majority_timeout)
    setting is reached.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`group_replication_autorejoin_tries`](group-replication-system-variables.html#sysvar_group_replication_autorejoin_tries)的默认值从0更改为3，这意味着默认情况下启用了自动重新加入。这个系统变量指定成员在被驱逐或在达到[`group_replication_unreachable_majority_timeout`](group-replication-system-variables.html#sysvar_group_replication_unreachable_majority_timeout)设置之前无法联系到大多数组时，尝试自动重新加入组的次数。'
- en: The default value of [`group_replication_exit_state_action`](group-replication-system-variables.html#sysvar_group_replication_exit_state_action)
    changed from `ABORT_SERVER` to `READ_ONLY`. This means that when a member exits
    the group, for example after a network failure, the instance becomes read-only,
    rather than being shut down.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`group_replication_exit_state_action`](group-replication-system-variables.html#sysvar_group_replication_exit_state_action)的默认值从`ABORT_SERVER`更改为`READ_ONLY`。这意味着当一个成员退出组时，例如在网络故障后，实例将变为只读，而不是被关闭。'
- en: The default value of [`group_replication_member_expel_timeout`](group-replication-system-variables.html#sysvar_group_replication_member_expel_timeout)
    changed from 0 to 5, meaning that a member suspected of having lost contact with
    the group is liable for expulsion 5 seconds after the 5-second detection period.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`group_replication_member_expel_timeout`](group-replication-system-variables.html#sysvar_group_replication_member_expel_timeout)
    的默认值从 0 更改为 5，这意味着在 5 秒检测期之后，被怀疑与组失去联系的成员将在 5 秒后被驱逐。'
- en: Most of these defaults are reasonably good for both development and production
    environments. There is one exception to this, we decided to keep the new option
    called  [`innodb_dedicated_server`](innodb-parameters.html#sysvar_innodb_dedicated_server)
    set to `OFF` although we recommend it to be `ON` for production environments.
    The reason for defaulting to `OFF` is that it causes shared environments such
    as developer laptops to become unusable, because it takes *all* the memory it
    can find.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 这些默认值大多对开发和生产环境都是合理的。但有一个例外，我们决定保持名为 [`innodb_dedicated_server`](innodb-parameters.html#sysvar_innodb_dedicated_server)
    的新选项设置为 `OFF`，尽管我们建议在生产环境中将其设置为 `ON`。默认设置为 `OFF` 的原因是它会导致共享环境（如开发人员笔记本电脑）无法使用，因为它会占用
    *所有* 可用内存。
- en: For production environments we recommend setting [`innodb_dedicated_server`](innodb-parameters.html#sysvar_innodb_dedicated_server)
    to `ON`.  When set to `ON` the following InnoDB variables (if not specified explicitly)
    are autoscaled based on the available memory [`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size),
    [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size),
    and [`innodb_flush_method`](innodb-parameters.html#sysvar_innodb_flush_method).
    See [Section 17.8.12, “Enabling Automatic Configuration for a Dedicated MySQL
    Server”](innodb-dedicated-server.html "17.8.12 Enabling Automatic Configuration
    for a Dedicated MySQL Server").
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产环境，我们建议将 [`innodb_dedicated_server`](innodb-parameters.html#sysvar_innodb_dedicated_server)
    设置为 `ON`。当设置为 `ON` 时，以下 InnoDB 变量（如果没有明确指定）将根据可用内存进行自动缩放 [`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)、[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    和 [`innodb_flush_method`](innodb-parameters.html#sysvar_innodb_flush_method)。请参阅
    [第 17.8.12 节，“为专用 MySQL 服务器启用自动配置”](innodb-dedicated-server.html "17.8.12 Enabling
    Automatic Configuration for a Dedicated MySQL Server")。
- en: Although the new defaults are the best configuration choices for most use cases,
    there are special cases, as well as legacy reasons for using existing 5.7 configuration
    choices. For example, some people prefer to upgrade to 8.0 with as few changes
    to their applications or operational environment as possible. We recommend to
    evaluate all the new defaults and use as many as you can. Most new defaults can
    be tested in 5.7, so you can validate the new defaults in 5.7 production before
    upgrading to 8.0\. For the few defaults where you need your old 5.7 value, set
    the corresponding configuration variable or startup option in your operational
    environment.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管新的默认值是大多数用例的最佳配置选择，但也存在特殊情况，以及出于遗留原因使用现有的 5.7 配置选择。例如，有些人希望尽可能少地更改他们的应用程序或运行环境来升级到
    8.0。我们建议评估所有新的默认值，并尽可能多地使用它们。大多数新的默认值可以在 5.7 中进行测试，因此您可以在升级到 8.0 之前在 5.7 生产环境中验证新的默认值。对于您需要保留旧的
    5.7 值的少数默认值，请在您的运行环境中设置相应的配置变量或启动选项。
- en: MySQL 8.0 has the Performance Schema [`variables_info`](performance-schema-variables-info-table.html
    "29.12.14.2 Performance Schema variables_info Table") table, which shows for each
    system variable the source from which it was most recently set, as well as its
    range of values. This provides SQL access to all there is to know about a configuration
    variable and its values.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0 拥有性能模式 [`variables_info`](performance-schema-variables-info-table.html
    "29.12.14.2 Performance Schema variables_info Table") 表，显示了每个系统变量最近设置的来源，以及其值范围。这提供了关于配置变量及其值的所有信息的
    SQL 访问。
- en: Valid Performance Regressions
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有效的性能退化
- en: Performance regressions are expected between MySQL versions 5.7 and 8.0\. MySQL
    8.0 has more features, changes default values, is more robust, and adds security
    functionality and additional diagnostic information. Listed here are valid reasons
    for regressions between these versions which includes potential mediation options.
    This is not an exhaustive list.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 版本 5.7 和 8.0 之间预期会出现性能退化。MySQL 8.0 拥有更多功能，改变了默认值，更加稳健，并增加了安全功能和额外的诊断信息。以下列出了这些版本之间出现性能退化的有效原因，包括潜在的调解选项。这并非详尽列表。
- en: 'Changes related to default values changing between MySQL versions 5.7 and 8.0:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL版本5.7和8.0之间默认值更改相关的变化：
- en: '[Binary logs](binary-log.html "7.4.4 The Binary Log") are disabled by default
    in 5.7, and enabled by default in 8.0.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在5.7中，默认情况下禁用二进制日志记录，而在8.0中默认启用。
- en: '*Mediation*: Disable binary logging by specifying the [`--skip-log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)
    or [`--disable-log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)
    option at startup.'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*调解*：通过在启动时指定[`--skip-log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)或[`--disable-log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)选项来禁用二进制日志记录。'
- en: The default character set changed from `latin1` to `utf8mb4` in 8.0\. While
    `utf8mb4` performs significantly better in 8.0 than it did in 5.7, `latin1` is
    faster than `utf8mb4`.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认字符集从`latin1`更改为`utf8mb4`在8.0中。虽然`utf8mb4`在8.0中表现比5.7好得多，但`latin1`比`utf8mb4`更快。
- en: '*Mediation*: Use `latin1` in 8.0 if `utf8mb4` is not needed.'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*调解*：如果不需要`utf8mb4`，在8.0中使用`latin1`。'
- en: '[Transactional Data Dictionary](data-dictionary.html "Chapter 16 MySQL Data
    Dictionary") (atomic DDL) was introduced in 8.0.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务数据字典](data-dictionary.html "第16章 MySQL数据字典")（原子DDL）在8.0中引入。'
- en: This increases robustness/reliability at the expense of DDL performance (CREATE
    / DROP intensive loads), but it should not impact the DML load (SELECT / INSERT
    / UPDATE / DELETE).
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这增加了鲁棒性/可靠性，但以DDL性能（CREATE / DROP密集负载）为代价，但不应影响DML负载（SELECT / INSERT / UPDATE
    / DELETE）。
- en: '*Mediation*: None'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*调解*：无'
- en: 'The more modern [TLS ciphers/algorithms](encrypted-connections.html "8.3 Using
    Encrypted Connections") used as of 5.7.28 has an effect when TLS (SSL) is enabled
    (the default):'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 从5.7.28开始使用的更现代的[TLS密码/算法](encrypted-connections.html "8.3 使用加密连接")在启用TLS（SSL）时产生影响（默认情况下）：
- en: Before MySQL 5.7.28, MySQL uses the yaSSL library for the community edition
    and OpenSSL for the enterprise edition.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 5.7.28之前，MySQL社区版使用yaSSL库，企业版使用OpenSSL。
- en: As of MySQL 5.7.28, MySQL only uses OpenSSL with its stronger TLS ciphers, which
    are more costly in terms of performance.
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 5.7.28开始，MySQL仅使用OpenSSL及其更强的TLS密码，这在性能方面更昂贵。
- en: Upgrading to MySQL 8.0 from MySQL 5.7.28 or earlier can cause a TLS performance
    regression.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 5.7.28或更早版本升级到MySQL 8.0可能会导致TLS性能退化。
- en: '*Mediation*: None (if TLS is required for security reasons)'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*调解*：无（如果出于安全原因需要TLS）'
- en: '[Performance Schema (PFS)](performance-schema.html "Chapter 29 MySQL Performance
    Schema") instrumentation is much wider in 8.0 than in 5.7:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[性能模式（PFS）](performance-schema.html "第29章 MySQL性能模式")在8.0中比5.7更广泛：'
- en: PFS cannot be compiled out in MySQL 8.0 but it can be turned off. Some performance
    schema instrumentation will still exist even when turned off, but overhead will
    be smaller.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中无法将PFS编译取消，但可以关闭。即使关闭了一些性能模式仍将存在，但开销会更小。
- en: '*Mediation*: Set performance_schema = OFF in 8.0, or turn off performance schema
    instrumentation at finer granularity if some but not all PFS functionality is
    needed.'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*调解*：在8.0中设置performance_schema = OFF，或者在需要部分但不是全部PFS功能时以更细粒度关闭性能模式仪表。'
- en: 'Truncating undo tablespaces is enabled by default in 8.0 which can significantly
    impact performance:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在8.0中默认启用截断撤消表空间，这可能会显著影响性能：
- en: Historically InnoDB stored undo logs in the system tablespace but there was
    no way to reclaim space used by undo log. The system tablespace would only grow
    and not shrink, and this inspired feature requests to remedy this.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从历史上看，InnoDB将撤消日志存储在系统表空间中，但无法回收撤消日志使用的空间。系统表空间只会增长而不会缩小，这激发了相关功能请求以解决此问题。
- en: MySQL 8.0 moved the undo log to separate tablespaces which allows both manual
    and automatic undo log truncation.
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 8.0将撤消日志移至单独的表空间，从而允许手动和自动撤消日志截断。
- en: However, auto-truncation has a permanent performance overhead and it can potentially
    cause stalls.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，自动截断会带来永久性能开销，并且可能导致停顿。
- en: '*Mediation*: Set innodb_undo_log_truncate = OFF in 8.0, and manually truncate
    undo logs as needed. For related information, see [Truncating Undo Tablespaces](innodb-undo-tablespaces.html#truncate-undo-tablespace
    "Truncating Undo Tablespaces").'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*调解*：在8.0中设置innodb_undo_log_truncate = OFF，并根据需要手动截断撤消日志。有关相关信息，请参阅[截断撤消表空间](innodb-undo-tablespaces.html#truncate-undo-tablespace
    "截断撤消表空间")。'
- en: The character classes `[[:alpha:]]` or `[[:digit:]]` do not perform as well
    with regular expression functions such as `REGEXP()` and `RLIKE()` in MySQL 8.0
    as they did in MySQL 5.7\. This is due to the replacement in MySQL 8.0 of the
    Spencer regular expression library with the ICU library, which uses UTF-16 internally.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 字符类`[[:alpha:]]`或`[[:digit:]]`在MySQL 8.0中的正则表达式函数（如`REGEXP()`和`RLIKE()`）中的性能不如在MySQL
    5.7中表现得好。这是因为MySQL 8.0中用ICU库替换了Spencer正则表达式库，ICU库在内部使用UTF-16。
- en: '*Mediation*: In place of `[[:alpha:]]`, use `[a-zA-Z]`; in place of `[[:digit:]]`,
    use `[0-9]`.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '*中介*：在`[[:alpha:]]`的位置使用`[a-zA-Z]`；在`[[:digit:]]`的位置使用`[0-9]`。'
