- en: 14.9.8 ngram Full-Text Parser
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.9.8 ngram全文解析器
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/fulltext-search-ngram.html](https://dev.mysql.com/doc/refman/8.0/en/fulltext-search-ngram.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/fulltext-search-ngram.html](https://dev.mysql.com/doc/refman/8.0/en/fulltext-search-ngram.html)
- en: The built-in MySQL full-text parser uses the white space between words as a
    delimiter to determine where words begin and end, which is a limitation when working
    with ideographic languages that do not use word delimiters. To address this limitation,
    MySQL provides an ngram full-text parser that supports Chinese, Japanese, and
    Korean (CJK). The ngram full-text parser is supported for use with [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") and [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的MySQL全文解析器使用单词之间的空格作为分隔符来确定单词的起始和结束位置，这在处理不使用单词分隔符的表意语言时存在限制。为了解决这个限制，MySQL提供了一个支持中文、日文和韩文（CJK）的ngram全文解析器。ngram全文解析器支持与[`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine")和[`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine")一起使用。
- en: Note
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: MySQL also provides a MeCab full-text parser plugin for Japanese, which tokenizes
    documents into meaningful words. For more information, see [Section 14.9.9, “MeCab
    Full-Text Parser Plugin”](fulltext-search-mecab.html "14.9.9 MeCab Full-Text Parser
    Plugin").
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL还为日语提供了一个MeCab全文解析器插件，将文档标记为有意义的单词。有关更多信息，请参见[第14.9.9节，“MeCab全文解析器插件”](fulltext-search-mecab.html
    "14.9.9 MeCab Full-Text Parser Plugin")。
- en: An ngram is a contiguous sequence of *`n`* characters from a given sequence
    of text. The ngram parser tokenizes a sequence of text into a contiguous sequence
    of *`n`* characters. For example, you can tokenize “abcd” for different values
    of *`n`* using the ngram full-text parser.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ngram是从给定文本序列中的连续*`n`*个字符序列。ngram解析器将文本序列标记为连续的*`n`*个字符序列。例如，您可以使用ngram全文解析器为不同的*`n`*值对“abcd”进行标记。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The ngram full-text parser is a built-in server plugin. As with other built-in
    server plugins, it is automatically loaded when the server is started.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ngram全文解析器是一个内置的服务器插件。与其他内置的服务器插件一样，在服务器启动时会自动加载。
- en: The full-text search syntax described in [Section 14.9, “Full-Text Search Functions”](fulltext-search.html
    "14.9 Full-Text Search Functions") applies to the ngram parser plugin. Differences
    in parsing behavior are described in this section. Full-text-related configuration
    options, except for minimum and maximum word length options ([`innodb_ft_min_token_size`](innodb-parameters.html#sysvar_innodb_ft_min_token_size),
    [`innodb_ft_max_token_size`](innodb-parameters.html#sysvar_innodb_ft_max_token_size),
    [`ft_min_word_len`](server-system-variables.html#sysvar_ft_min_word_len), [`ft_max_word_len`](server-system-variables.html#sysvar_ft_max_word_len))
    are also applicable.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 描述在[第14.9节，“全文搜索函数”](fulltext-search.html "14.9 Full-Text Search Functions")中的全文搜索语法适用于ngram解析器插件。本节描述了解析行为的差异。除了最小和最大单词长度选项（[`innodb_ft_min_token_size`](innodb-parameters.html#sysvar_innodb_ft_min_token_size)，[`innodb_ft_max_token_size`](innodb-parameters.html#sysvar_innodb_ft_max_token_size)，[`ft_min_word_len`](server-system-variables.html#sysvar_ft_min_word_len)，[`ft_max_word_len`](server-system-variables.html#sysvar_ft_max_word_len))之外，也适用于与全文搜索相关的配置选项。
- en: Configuring ngram Token Size
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置ngram Token大小
- en: 'The ngram parser has a default ngram token size of 2 (bigram). For example,
    with a token size of 2, the ngram parser parses the string “abc def” into four
    tokens: “ab”, “bc”, “de” and “ef”.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: ngram解析器具有默认的ngram token大小为2（bigram）。例如，使用大小为2的token，ngram解析器将字符串“abc def”解析为四个token：“ab”，“bc”，“de”和“ef”。
- en: ngram token size is configurable using the [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    configuration option, which has a minimum value of 1 and maximum value of 10.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ngram token大小可通过[`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)配置选项进行配置，最小值为1，最大值为10。
- en: Typically, [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    is set to the size of the largest token that you want to search for. If you only
    intend to search for single characters, set [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    to 1\. A smaller token size produces a smaller full-text search index, and faster
    searches. If you need to search for words comprised of more than one character,
    set [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    accordingly. For example, “Happy Birthday” is “生日快乐” in simplified Chinese, where
    “生日” is “birthday”, and “快乐” translates as “happy”. To search on two-character
    words such as these, set [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    to a value of 2 or higher.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，[`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    被设置为您想要搜索的最大标记的大小。如果您只打算搜索单个字符，请将 [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    设置为 1。较小的标记大小会产生较小的全文搜索索引，并且搜索速度更快。如果您需要搜索由多个字符组成的单词，请相应地设置 [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)。例如，“生日快乐”在简体中文中是“Happy
    Birthday”，其中“生日”是“birthday”，“快乐”翻译为“happy”。要搜索这样的两个字符单词，将 [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    设置为 2 或更高的值。
- en: 'As a read-only variable, [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    may only be set as part of a startup string or in a configuration file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为只读变量，[`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    只能作为启动字符串的一部分或在配置文件中设置：
- en: 'Startup string:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动字符串：
- en: '[PRE1]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Configuration file:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件：
- en: '[PRE2]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following minimum and maximum word length configuration options are ignored
    for `FULLTEXT` indexes that use the ngram parser: [`innodb_ft_min_token_size`](innodb-parameters.html#sysvar_innodb_ft_min_token_size),
    [`innodb_ft_max_token_size`](innodb-parameters.html#sysvar_innodb_ft_max_token_size),
    [`ft_min_word_len`](server-system-variables.html#sysvar_ft_min_word_len), and
    [`ft_max_word_len`](server-system-variables.html#sysvar_ft_max_word_len).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 ngram 解析器的 `FULLTEXT` 索引，以下最小和最大单词长度配置选项将被忽略：[`innodb_ft_min_token_size`](innodb-parameters.html#sysvar_innodb_ft_min_token_size),
    [`innodb_ft_max_token_size`](innodb-parameters.html#sysvar_innodb_ft_max_token_size),
    [`ft_min_word_len`](server-system-variables.html#sysvar_ft_min_word_len), 和 [`ft_max_word_len`](server-system-variables.html#sysvar_ft_max_word_len)。
- en: Creating a FULLTEXT Index that Uses the ngram Parser
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建使用 ngram 解析器的 FULLTEXT 索引
- en: To create a `FULLTEXT` index that uses the ngram parser, specify `WITH PARSER
    ngram` with [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement"),
    [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement"), or [`CREATE
    INDEX`](create-index.html "15.1.15 CREATE INDEX Statement").
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建使用 ngram 解析器的 `FULLTEXT` 索引，请在 [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement"), [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement"),
    或 [`CREATE INDEX`](create-index.html "15.1.15 CREATE INDEX Statement") 中指定 `WITH
    PARSER ngram`。
- en: The following example demonstrates creating a table with an `ngram` `FULLTEXT`
    index, inserting sample data (Simplified Chinese text), and viewing tokenized
    data in the Information Schema [`INNODB_FT_INDEX_CACHE`](information-schema-innodb-ft-index-cache-table.html
    "28.4.18 The INFORMATION_SCHEMA INNODB_FT_INDEX_CACHE Table") table.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了创建具有 `ngram` `FULLTEXT` 索引的表，插入示例数据（简体中文文本）以及在信息模式 [`INNODB_FT_INDEX_CACHE`](information-schema-innodb-ft-index-cache-table.html
    "28.4.18 The INFORMATION_SCHEMA INNODB_FT_INDEX_CACHE Table") 表中查看标记化数据。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To add a `FULLTEXT` index to an existing table, you can use [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") or [`CREATE INDEX`](create-index.html "15.1.15 CREATE
    INDEX Statement"). For example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要向现有表添加 `FULLTEXT` 索引，可以使用 [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") 或 [`CREATE INDEX`](create-index.html "15.1.15 CREATE INDEX Statement")。例如：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ngram Parser Space Handling
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ngram 解析器空格处理
- en: 'The ngram parser eliminates spaces when parsing. For example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ngram 解析器在解析时消除空格。例如：
- en: “ab cd” is parsed to “ab”, “cd”
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “ab cd” 被解析为 “ab”, “cd”
- en: “a bc” is parsed to “bc”
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “a bc” 被解析为 “bc”
- en: ngram Parser Stopword Handling
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ngram 解析器停用词处理
- en: The built-in MySQL full-text parser compares words to entries in the stopword
    list. If a word is equal to an entry in the stopword list, the word is excluded
    from the index. For the ngram parser, stopword handling is performed differently.
    Instead of excluding tokens that are equal to entries in the stopword list, the
    ngram parser excludes tokens that *contain* stopwords. For example, assuming [`ngram_token_size=2`](server-system-variables.html#sysvar_ngram_token_size),
    a document that contains “a,b” is parsed to “a,” and “,b”. If a comma (“,”) is
    defined as a stopword, both “a,” and “,b” are excluded from the index because
    they contain a comma.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的MySQL全文解析器将单词与停用词列表中的条目进行比较。如果一个词等于停用词列表中的条目，则该词将从索引中排除。对于ngram解析器，停用词处理方式不同。它不是排除等于停用词列表中条目的标记，而是排除*包含*停用词的标记。例如，假设[`ngram_token_size=2`](server-system-variables.html#sysvar_ngram_token_size)，包含“a,b”的文档被解析为“a,”和“,b”。如果逗号（“,”）���定义为停用词，那么“a,”和“,b”都将因为包含逗号而被排除在索引之外。
- en: By default, the ngram parser uses the default stopword list, which contains
    a list of English stopwords. For a stopword list applicable to Chinese, Japanese,
    or Korean, you must create your own. For information about creating a stopword
    list, see [Section 14.9.4, “Full-Text Stopwords”](fulltext-stopwords.html "14.9.4 Full-Text
    Stopwords").
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，ngram解析器使用默认停用词列表，其中包含一组英语停用词。对于适用于中文、日文或韩文的停用词列表，您必须创建自己的停用词列表。有关创建停用词列表的信息，请参见[第14.9.4节，“全文停用词”](fulltext-stopwords.html
    "14.9.4 全文停用词")。
- en: Stopwords greater in length than [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    are ignored.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 长度大于[`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)的停用词将被忽略。
- en: ngram Parser Term Search
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ngram解析器术语搜索
- en: For *natural language mode* search, the search term is converted to a union
    of ngram terms. For example, the string “abc” (assuming [`ngram_token_size=2`](server-system-variables.html#sysvar_ngram_token_size))
    is converted to “ab bc”. Given two documents, one containing “ab” and the other
    containing “abc”, the search term “ab bc” matches both documents.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*自然语言模式*搜索，搜索词被转换为ngram词的并集。例如，字符串“abc”（假设[`ngram_token_size=2`](server-system-variables.html#sysvar_ngram_token_size)）被转换为“ab
    bc”。给定两个文档，一个包含“ab”，另一个包含“abc”，搜索词“ab bc”匹配两个文档。
- en: For *boolean mode search*, the search term is converted to an ngram phrase search.
    For example, the string 'abc' (assuming [`ngram_token_size=2`](server-system-variables.html#sysvar_ngram_token_size))
    is converted to '“ab bc”'. Given two documents, one containing 'ab' and the other
    containing 'abc', the search phrase '“ab bc”' only matches the document containing
    'abc'.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*布尔模式搜索*，搜索词被转换为ngram短语搜索。例如，字符串'abc'（假设[`ngram_token_size=2`](server-system-variables.html#sysvar_ngram_token_size)）被转换为'“ab
    bc”'。给定两个文档，一个包含'ab'，另一个包含'abc'，搜索短语'“ab bc”'仅匹配包含'abc'的文档。
- en: ngram Parser Wildcard Search
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ngram解析器通配符搜索
- en: 'Because an ngram `FULLTEXT` index contains only ngrams, and does not contain
    information about the beginning of terms, wildcard searches may return unexpected
    results. The following behaviors apply to wildcard searches using ngram `FULLTEXT`
    search indexes:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因为ngram `FULLTEXT`索引仅包含ngrams，并不包含有关术语开头的信息，通配符搜索可能会返回意外结果。以下行为适用于使用ngram `FULLTEXT`搜索索引进行通配符搜索的情况：
- en: If the prefix term of a wildcard search is shorter than ngram token size, the
    query returns all indexed rows that contain ngram tokens starting with the prefix
    term. For example, assuming [`ngram_token_size=2`](server-system-variables.html#sysvar_ngram_token_size),
    a search on “a*” returns all rows starting with “a”.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果通配符搜索的前缀项短于ngram标记大小，查询将返回所有包含以前缀项开头的ngram标记的索引行。例如，假设[`ngram_token_size=2`](server-system-variables.html#sysvar_ngram_token_size)，搜索“a*”将返回所有以“a”开头的行。
- en: If the prefix term of a wildcard search is longer than ngram token size, the
    prefix term is converted to an ngram phrase and the wildcard operator is ignored.
    For example, assuming [`ngram_token_size=2`](server-system-variables.html#sysvar_ngram_token_size),
    an “abc*” wildcard search is converted to “ab bc”.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果通配符搜索的前缀项长于ngram标记大小，则前缀项被转换为ngram短语，通配符操作符被忽略。例如，假设[`ngram_token_size=2`](server-system-variables.html#sysvar_ngram_token_size)，一个“abc*”通配符搜索被转换为“ab
    bc”。
- en: ngram Parser Phrase Search
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ngram解析器短语搜索
- en: Phrase searches are converted to ngram phrase searches. For example, The search
    phrase “abc” is converted to “ab bc”, which returns documents containing “abc”
    and “ab bc”.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 短语搜索被转换为ngram短语搜索。例如，搜索短语“abc”被转换为“ab bc”，返回包含“abc”和“ab bc”的文档。
- en: The search phrase “abc def” is converted to “ab bc de ef”, which returns documents
    containing “abc def” and “ab bc de ef”. A document that contains “abcdef” is not
    returned.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索短语“abc def”被转换为“ab bc de ef”，返回包含“abc def”和“ab bc de ef”的文档。不返回包含“abcdef”的文档。
