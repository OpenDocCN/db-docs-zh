- en: 11.1.1 String Literals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.1.1 字符串文字
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/string-literals.html](https://dev.mysql.com/doc/refman/8.0/en/string-literals.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/string-literals.html](https://dev.mysql.com/doc/refman/8.0/en/string-literals.html)
- en: 'A string is a sequence of bytes or characters, enclosed within either single
    quote (`''`) or double quote (`"`) characters. Examples:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是一系列字节或字符，包含在单引号（`'`）或双引号（`"`）字符之间。例子：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Quoted strings placed next to each other are concatenated to a single string.
    The following lines are equivalent:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 相邻的引用字符串会被连接成一个单独的字符串。以下行是等效的：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the [`ANSI_QUOTES`](sql-mode.html#sqlmode_ansi_quotes) SQL mode is enabled,
    string literals can be quoted only within single quotation marks because a string
    quoted within double quotation marks is interpreted as an identifier.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了[`ANSI_QUOTES`](sql-mode.html#sqlmode_ansi_quotes) SQL 模式，则字符串文字只能在单引号内引用，因为在双引号内引用的字符串会被解释为标识符。
- en: A binary string is a string of bytes. Every binary string has a character set
    and collation named `binary`. A nonbinary string is a string of characters. It
    has a character set other than `binary` and a collation that is compatible with
    the character set.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制字符串是一串字节。每个二进制字符串都有一个名为`binary`的字符集和排序规则。非二进制字符串是一串字符。它具有不同于`binary`的字符集和与字符集兼容的排序规则。
- en: For both types of strings, comparisons are based on the numeric values of the
    string unit. For binary strings, the unit is the byte; comparisons use numeric
    byte values. For nonbinary strings, the unit is the character and some character
    sets support multibyte characters; comparisons use numeric character code values.
    Character code ordering is a function of the string collation. (For more information,
    see [Section 12.8.5, “The binary Collation Compared to _bin Collations”](charset-binary-collations.html
    "12.8.5 The binary Collation Compared to _bin Collations").)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两种类型的字符串，比较是基于字符串单元的数值。对于二进制字符串，单元是字节；比较使用数值字节值。对于非二进制字符串，单元是字符，一些字符集支持多字节字符；比较使用数值字符编码值。字符编码排序是字符串排序规则的一个函数。（有关更多信息，请参见[第12.8.5节，“二进制排序与_bin排序的比较”](charset-binary-collations.html
    "12.8.5 二进制排序与_bin排序的比较")。）
- en: Note
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[**mysql**](mysql.html "6.5.1 mysql — MySQL 命令行客户端")客户端中，二进制字符串显示为十六进制表示，取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参见[第6.5.1节，“mysql
    — MySQL 命令行客户端”](mysql.html "6.5.1 mysql — MySQL 命令行客户端")。
- en: 'A character string literal may have an optional character set introducer and
    `COLLATE` clause, to designate it as a string that uses a particular character
    set and collation:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串文字可能具有可选的字符集引导符和`COLLATE`子句，以指定它作为使用特定字符集和排序规则的字符串：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Examples:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can use `N''*`literal`*''` (or `n''*`literal`*''`) to create a string in
    the national character set. These statements are equivalent:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`N'*`literal`*'`（或`n'*`literal`*'`）来创建一个使用国家字符集的字符串。这些语句是等效的：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For information about these forms of string syntax, see [Section 12.3.7, “The
    National Character Set”](charset-national.html "12.3.7 The National Character
    Set"), and [Section 12.3.8, “Character Set Introducers”](charset-introducer.html
    "12.3.8 Character Set Introducers").
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些字符串语法形式的信息，请参见[第12.3.7节，“国家字符集”](charset-national.html "12.3.7 国家字符集")和[第12.3.8节，“字符集引导符”](charset-introducer.html
    "12.3.8 字符集引导符")。
- en: Within a string, certain sequences have special meaning unless the [`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL mode is enabled. Each of these sequences begins with a backslash (`\`), known
    as the *escape character*. MySQL recognizes the escape sequences shown in [Table 11.1,
    “Special Character Escape Sequences”](string-literals.html#character-escape-sequences
    "Table 11.1 Special Character Escape Sequences"). For all other escape sequences,
    backslash is ignored. That is, the escaped character is interpreted as if it was
    not escaped. For example, `\x` is just `x`. These sequences are case-sensitive.
    For example, `\b` is interpreted as a backspace, but `\B` is interpreted as `B`.
    Escape processing is done according to the character set indicated by the [`character_set_connection`](server-system-variables.html#sysvar_character_set_connection)
    system variable. This is true even for strings that are preceded by an introducer
    that indicates a different character set, as discussed in [Section 12.3.6, “Character
    String Literal Character Set and Collation”](charset-literal.html "12.3.6 Character
    String Literal Character Set and Collation").
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在字符串中，除非启用了[`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL模式，否则某些序列具有特殊含义。这些序列以反斜杠（`\`）开头，称为*转义字符*。MySQL识别[表11.1，“特殊字符转义序列”](string-literals.html#character-escape-sequences
    "表11.1特殊字符转义序列")中显示的转义序列。对于所有其他转义序列，反斜杠将被忽略。也就是说，转义字符被解释为未转义。例如，`\x`就是`x`。这些序列区分大小写。例如，`\b`被解释为退格，但`\B`被解释为`B`。转义处理根据[`character_set_connection`](server-system-variables.html#sysvar_character_set_connection)系统变量指示的字符集进行。即使对于由指示不同字符集的引导符引导的字符串，也是如此，如[第12.3.6节，“字符字符串文字的字符集和排序规则”](charset-literal.html
    "12.3.6字符字符串文字的字符集和排序规则")中所讨论的。
- en: '**Table 11.1 Special Character Escape Sequences**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**表11.1特殊字符转义序列**'
- en: '| Escape Sequence | Character Represented by Sequence |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 转义序列 | 序列表示的字符 |'
- en: '| `\0` | An ASCII NUL (`X''00''`) character |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `\0` | ASCII NUL（`X''00''`）字符 |'
- en: '| `\''` | A single quote (`''`) character |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `\''` | 单引号（`''`）字符 |'
- en: '| `\"` | A double quote (`"`) character |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `\"` | 双引号（`"`）字符 |'
- en: '| `\b` | A backspace character |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `\b` | 退格字符 |'
- en: '| `\n` | A newline (linefeed) character |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `\n` | 换行（换行）字符 |'
- en: '| `\r` | A carriage return character |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `\r` | 回车字符 |'
- en: '| `\t` | A tab character |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `\t` | 制表符字符 |'
- en: '| `\Z` | ASCII 26 (Control+Z); see note following the table |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `\Z` | ASCII 26（Control+Z）；请参阅表后的注释 |'
- en: '| `\\` | A backslash (`\`) character |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `\\` | 反斜杠（`\`）字符 |'
- en: '| `\%` | A `%` character; see note following the table |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `\%` | `%`字符；请参阅表后的注释 |'
- en: '| `\_` | A `_` character; see note following the table |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `\_` | 下划线字符；请参阅表后的注释 |'
- en: '| Escape Sequence | Character Represented by Sequence |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 转义序列 | 序列表示的字符 |'
- en: The ASCII 26 character can be encoded as `\Z` to enable you to work around the
    problem that ASCII 26 stands for END-OF-FILE on Windows. ASCII 26 within a file
    causes problems if you try to use `mysql *`db_name`* < *`file_name`*`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ASCII 26字符可以编码为`\Z`，以便您解决Windows上ASCII 26代表文件结尾的问题。如果文件中有ASCII 26，则在尝试使用`mysql
    *`db_name`* < *`file_name`*`时会出现问题。
- en: The `\%` and `\_` sequences are used to search for literal instances of `%`
    and `_` in pattern-matching contexts where they would otherwise be interpreted
    as wildcard characters. See the description of the [`LIKE`](string-comparison-functions.html#operator_like)
    operator in [Section 14.8.1, “String Comparison Functions and Operators”](string-comparison-functions.html
    "14.8.1 String Comparison Functions and Operators"). If you use `\%` or `\_` outside
    of pattern-matching contexts, they evaluate to the strings `\%` and `\_`, not
    to `%` and `_`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`\%`和`\_`序列用于在模式匹配上下文中搜索`%`和`_`的字面实例，否则它们将被解释为通配符字符。请参阅[第14.8.1节，“字符串比较函数和运算符”](string-comparison-functions.html#operator_like)中的[`LIKE`](string-comparison-functions.html#operator_like)运算符的描述。如果在模式匹配上下文之外使用`\%`或`\_`，它们将被解释为字符串`\%`和`\_`，而不是`%`和`_`。'
- en: 'There are several ways to include quote characters within a string:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以在字符串中包含引号字符：
- en: A `'` inside a string quoted with `'` may be written as `''`.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在用`'`引用的字符串中的`'`可以写为`''`。
- en: A `"` inside a string quoted with `"` may be written as `""`.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在用`"`引用的字符串中的`"`可以写为`""`。
- en: Precede the quote character by an escape character (`\`).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过转义字符（`\`）在引号字符之前加上转义字符。
- en: A `'` inside a string quoted with `"` needs no special treatment and need not
    be doubled or escaped. In the same way, `"` inside a string quoted with `'` needs
    no special treatment.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在用`"`引用的字符串中的`'`不需要特殊处理，也不需要加倍或转义。同样，用`'`引用的字符串中的`"`也不需要特殊处理。
- en: 'The following [`SELECT`](select.html "15.2.13 SELECT Statement") statements
    demonstrate how quoting and escaping work:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下[`SELECT`](select.html "15.2.13 SELECT Statement")语句演示了引用和转义的工作方式：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To insert binary data into a string column (such as a [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") column), you should represent certain characters by escape
    sequences. Backslash (`\`) and the quote character used to quote the string must
    be escaped. In certain client environments, it may also be necessary to escape
    `NUL` or Control+Z. The [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") client truncates quoted strings containing `NUL` characters if they are
    not escaped, and Control+Z may be taken for END-OF-FILE on Windows if not escaped.
    For the escape sequences that represent each of these characters, see [Table 11.1,
    “Special Character Escape Sequences”](string-literals.html#character-escape-sequences
    "Table 11.1 Special Character Escape Sequences").
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要将二进制数据插入字符串列（如[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")列），你应该用转义序列表示某些字符。反斜杠（`\`）和用于引用字符串的引号字符必须转义。在某些客户端环境中，可能还需要转义`NUL`或Control+Z。[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")客户端如果未转义包含`NUL`字符的引用字符串，则会截断它们，如果未转义，则Control+Z可能被视为Windows上的END-OF-FILE。有关表示每个字符的转义序列，请参见[表11.1，“特殊字符转义序列”](string-literals.html#character-escape-sequences
    "Table 11.1 Special Character Escape Sequences")。
- en: 'When writing application programs, any string that might contain any of these
    special characters must be properly escaped before the string is used as a data
    value in an SQL statement that is sent to the MySQL server. You can do this in
    two ways:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写应用程序时，任何可能包含这些特殊字符的字符串在用作发送到MySQL服务器的SQL语句中的数据值之前必须正确转义。你可以通过两种方式实现这一点：
- en: Process the string with a function that escapes the special characters. In a
    C program, you can use the [`mysql_real_escape_string_quote()`](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html)
    C API function to escape characters. See [mysql_real_escape_string_quote()](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html).
    Within SQL statements that construct other SQL statements, you can use the [`QUOTE()`](string-functions.html#function_quote)
    function. The Perl DBI interface provides a `quote` method to convert special
    characters to the proper escape sequences. See [Section 31.9, “MySQL Perl API”](apis-perl.html
    "31.9 MySQL Perl API"). Other language interfaces may provide a similar capability.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个函数处理字符串，转义特殊字符。在C程序中，你可以使用[`mysql_real_escape_string_quote()`](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html)
    C API函数来转义字符。参见[mysql_real_escape_string_quote()](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html)。在构造其他SQL语句的SQL语句中，你可以使用[`QUOTE()`](string-functions.html#function_quote)函数。Perl
    DBI接口提供了一个`quote`方法，将特殊字符转换为适当的转义序列。参见[第31.9节，“MySQL Perl API”](apis-perl.html
    "31.9 MySQL Perl API")。其他语言接口可能提供类似的功能。
- en: As an alternative to explicitly escaping special characters, many MySQL APIs
    provide a placeholder capability that enables you to insert special markers into
    a statement string, and then bind data values to them when you issue the statement.
    In this case, the API takes care of escaping special characters in the values
    for you.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为显式转义特殊字符的替代方案，许多MySQL API提供了一个占位符功能，使你能够在语句字符串中插入特殊标记，然后在发出语句时将数据值绑定到它们。在这种情况下，API会为你处理值中的特殊字符的转义。
