- en: 10.3.4 Foreign Key Optimization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.3.4 外键优化
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/foreign-key-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/foreign-key-optimization.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/foreign-key-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/foreign-key-optimization.html)
- en: If a table has many columns, and you query many different combinations of columns,
    it might be efficient to split the less-frequently used data into separate tables
    with a few columns each, and relate them back to the main table by duplicating
    the numeric ID column from the main table. That way, each small table can have
    a primary key for fast lookups of its data, and you can query just the set of
    columns that you need using a join operation. Depending on how the data is distributed,
    the queries might perform less I/O and take up less cache memory because the relevant
    columns are packed together on disk. (To maximize performance, queries try to
    read as few data blocks as possible from disk; tables with only a few columns
    can fit more rows in each data block.)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一张表有很多列，并且您查询许多不同的列组合，将不经常使用的数据拆分到每个只有几列的单独表中，然后通过从主表复制数值ID列将它们与主表关联起来可能是有效的。这样，每个小表都可以有一个用于快速查找其数据的主键，并且您可以使用连接操作仅查询您需要的列集。根据数据的分布方式，查询可能执行更少的I/O并占用更少的缓存内存，因为相关列在磁盘上紧密打包在一起。（为了最大化性能，查询尝试从磁盘读取尽可能少的数据块；只有几列的表可以在每个数据块中容纳更多行。）
