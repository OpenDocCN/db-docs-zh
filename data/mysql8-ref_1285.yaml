- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-dml.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-dml.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-dml.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-dml.html)
- en: 17.20.6.5 Adapting DML Statements to memcached Operations
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.20.6.5 将 DML 语句调整为 memcached 操作
- en: Benchmarks suggest that the `daemon_memcached` plugin speeds up [DML](glossary.html#glos_dml
    "DML") operations (inserts, updates, and deletes) more than it speeds up queries.
    Therefore, consider focussing initial development efforts on write-intensive applications
    that are I/O-bound, and look for opportunities to use MySQL with the `daemon_memcached`
    plugin for new write-intensive applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试表明，`daemon_memcached` 插件加速了 [DML](glossary.html#glos_dml "DML") 操作（插入、更新和删除）比加速查询更多。因此，考虑将初始开发工作重点放在写入密集型且
    I/O 限制的应用程序上，并寻找机会在新的写入密集型应用程序中使用带有 `daemon_memcached` 插件的 MySQL。
- en: Single-row DML statements are the easiest types of statements to turn into `memcached`
    operations. `INSERT` becomes `add`, `UPDATE` becomes `set`, `incr` or `decr`,
    and `DELETE` becomes `delete`. These operations are guaranteed to only affect
    one row when issued through the **memcached** interface, because the *`key`* is
    unique within the table.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 单行 DML 语句是最容易转换为 `memcached` 操作的语句类型。`INSERT` 变为 `add`，`UPDATE` 变为 `set`，`incr`
    或 `decr`，而 `DELETE` 变为 `delete`。这些操作通过 **memcached** 接口发出时，保证只影响一行，因为 *`key`*
    在表内是唯一的。
- en: In the following SQL examples, `t1` refers to the table used for **memcached**
    operations, based on the configuration in the `innodb_memcache.containers` table.
    `key` refers to the column listed under `key_columns`, and `val` refers to the
    column listed under `value_columns`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下的 SQL 示例中，`t1` 指的是基于 `innodb_memcache.containers` 表中配置的 **memcached** 操作所使用的表。`key`
    指的是列在 `key_columns` 下列出的列，`val` 指的是列在 `value_columns` 下列出的列。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The following [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE
    Statement") and [`DELETE`](delete.html "15.2.2 DELETE Statement") statements,
    which remove all rows from the table, correspond to the `flush_all` operation,
    where `t1` is configured as the table for **memcached** operations, as in the
    previous example.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    和 [`DELETE`](delete.html "15.2.2 DELETE Statement") 语句，用于从表中删除所有行，对应于 `flush_all`
    操作，其中 `t1` 被配置为 **memcached** 操作的表，就像前面的示例中一样。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
