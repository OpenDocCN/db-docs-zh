- en: 15.2.17 UPDATE Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.2.17 UPDATE语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/update.html](https://dev.mysql.com/doc/refman/8.0/en/update.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/update.html](https://dev.mysql.com/doc/refman/8.0/en/update.html)
- en: '[`UPDATE`](update.html "15.2.17 UPDATE Statement") is a DML statement that
    modifies rows in a table.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UPDATE`](update.html "15.2.17 UPDATE Statement")是修改表中行的DML语句。'
- en: An [`UPDATE`](update.html "15.2.17 UPDATE Statement") statement can start with
    a [`WITH`](with.html "15.2.20 WITH (Common Table Expressions)") clause to define
    common table expressions accessible within the [`UPDATE`](update.html "15.2.17 UPDATE
    Statement"). See [Section 15.2.20, “WITH (Common Table Expressions)”](with.html
    "15.2.20 WITH (Common Table Expressions)").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`UPDATE`](update.html "15.2.17 UPDATE Statement")语句可以以[`WITH`](with.html
    "15.2.20 WITH (Common Table Expressions)")子句开头，以定义在[`UPDATE`](update.html "15.2.17 UPDATE
    Statement")中可访问的常用表达式。请参阅[第15.2.20节，“WITH (Common Table Expressions)”](with.html
    "15.2.20 WITH (Common Table Expressions)")。
- en: 'Single-table syntax:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 单表语法：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Multiple-table syntax:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 多表语法：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For the single-table syntax, the [`UPDATE`](update.html "15.2.17 UPDATE Statement")
    statement updates columns of existing rows in the named table with new values.
    The `SET` clause indicates which columns to modify and the values they should
    be given. Each value can be given as an expression, or the keyword `DEFAULT` to
    set a column explicitly to its default value. The `WHERE` clause, if given, specifies
    the conditions that identify which rows to update. With no `WHERE` clause, all
    rows are updated. If the `ORDER BY` clause is specified, the rows are updated
    in the order that is specified. The `LIMIT` clause places a limit on the number
    of rows that can be updated.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单表语法，[`UPDATE`](update.html "15.2.17 UPDATE Statement")语句使用新值更新命名表中现有行的列。`SET`子句指示要修改的列以及它们应该被赋予的值。每个值可以作为表达式给出，或者使用关键字`DEFAULT`将列明确设置为其默认值。如果给出`WHERE`子句，则指定标识要更新的行的条件。如果没有`WHERE`子句，则更新所有行。如果指定了`ORDER
    BY`子句，则按指定的顺序更新行。`LIMIT`子句限制可以更新的行数。
- en: For the multiple-table syntax, [`UPDATE`](update.html "15.2.17 UPDATE Statement")
    updates rows in each table named in *`table_references`* that satisfy the conditions.
    Each matching row is updated once, even if it matches the conditions multiple
    times. For multiple-table syntax, `ORDER BY` and `LIMIT` cannot be used.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多表语法，[`UPDATE`](update.html "15.2.17 UPDATE Statement")更新满足条件的每个表中的行。每个匹配的行只更新一次，即使它多次匹配条件。对于多表语法，不能使用`ORDER
    BY`和`LIMIT`。
- en: For partitioned tables, both the single-single and multiple-table forms of this
    statement support the use of a `PARTITION` clause as part of a table reference.
    This option takes a list of one or more partitions or subpartitions (or both).
    Only the partitions (or subpartitions) listed are checked for matches, and a row
    that is not in any of these partitions or subpartitions is not updated, whether
    it satisfies the *`where_condition`* or not.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于分区表，此语句的单表和多表形式都支持`PARTITION`子句作为表引用的一部分。此选项接受一个或多个分区或子分区（或两者）的列表。仅检查列出的分区（或子分区）是否匹配，并且不在任何这些分区或子分区中的行不会被更新，无论它是否满足*`where_condition`*。
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Unlike the case when using `PARTITION` with an [`INSERT`](insert.html "15.2.7 INSERT
    Statement") or [`REPLACE`](replace.html "15.2.12 REPLACE Statement") statement,
    an otherwise valid `UPDATE ... PARTITION` statement is considered successful even
    if no rows in the listed partitions (or subpartitions) match the *`where_condition`*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与在[`INSERT`](insert.html "15.2.7 INSERT Statement")或[`REPLACE`](replace.html
    "15.2.12 REPLACE Statement")语句中使用`PARTITION`时不同，即使列出的分区（或子分区）中没有行与*`where_condition`*匹配，否则有效的`UPDATE
    ... PARTITION`语句也被认为是成功的。
- en: For more information and examples, see [Section 26.5, “Partition Selection”](partitioning-selection.html
    "26.5 Partition Selection").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参见[第26.5节，“分区选择”](partitioning-selection.html "26.5 Partition Selection")。
- en: '*`where_condition`* is an expression that evaluates to true for each row to
    be updated. For expression syntax, see [Section 11.5, “Expressions”](expressions.html
    "11.5 Expressions").'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*`where_condition`*是一个对每个要更新的行求值为true的表达式。有关表达式语法，请参见[第11.5节，“表达式”](expressions.html
    "11.5 Expressions")。'
- en: '*`table_references`* and *`where_condition`* are specified as described in
    [Section 15.2.13, “SELECT Statement”](select.html "15.2.13 SELECT Statement").'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*`table_references`*和*`where_condition`*的指定如[第15.2.13节，“SELECT语句”](select.html
    "15.2.13 SELECT Statement")所述。'
- en: You need the [`UPDATE`](privileges-provided.html#priv_update) privilege only
    for columns referenced in an [`UPDATE`](update.html "15.2.17 UPDATE Statement")
    that are actually updated. You need only the [`SELECT`](privileges-provided.html#priv_select)
    privilege for any columns that are read but not modified.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在实际上被更新的[`UPDATE`](update.html "15.2.17 UPDATE Statement")中引用的列才需要[`UPDATE`](privileges-provided.html#priv_update)权限。对于只读取但不修改的任何列，只需要[`SELECT`](privileges-provided.html#priv_select)权限。
- en: 'The [`UPDATE`](update.html "15.2.17 UPDATE Statement") statement supports the
    following modifiers:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UPDATE`](update.html "15.2.17 UPDATE Statement") 语句支持以下修饰符：'
- en: With the `LOW_PRIORITY` modifier, execution of the [`UPDATE`](update.html "15.2.17 UPDATE
    Statement") is delayed until no other clients are reading from the table. This
    affects only storage engines that use only table-level locking (such as `MyISAM`,
    `MEMORY`, and `MERGE`).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`LOW_PRIORITY`修饰符，[`UPDATE`](update.html "15.2.17 UPDATE Statement") 的执行会延迟，直到没有其他客户端从表中读取数据。这仅影响仅使用表级锁定的存储引擎（如`MyISAM`，`MEMORY`和`MERGE`）。
- en: With the `IGNORE` modifier, the update statement does not abort even if errors
    occur during the update. Rows for which duplicate-key conflicts occur on a unique
    key value are not updated. Rows updated to values that would cause data conversion
    errors are updated to the closest valid values instead. For more information,
    see [The Effect of IGNORE on Statement Execution](sql-mode.html#ignore-effect-on-execution
    "The Effect of IGNORE on Statement Execution").
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`IGNORE`修饰符，即使在更新过程中发生错误，更新语句也不会中止。对于唯一键值上发生重复键冲突的行不会被更新。将更新为会导致数据转换错误的值的行将被更新为最接近的有效值。更多信息，请参见[The
    Effect of IGNORE on Statement Execution](sql-mode.html#ignore-effect-on-execution
    "The Effect of IGNORE on Statement Execution")。
- en: '[`UPDATE IGNORE`](update.html "15.2.17 UPDATE Statement") statements, including
    those having an `ORDER BY` clause, are flagged as unsafe for statement-based replication.
    (This is because the order in which the rows are updated determines which rows
    are ignored.) Such statements produce a warning in the error log when using statement-based
    mode and are written to the binary log using the row-based format when using `MIXED`
    mode. (Bug #11758262, Bug #50439) See [Section 19.2.1.3, “Determination of Safe
    and Unsafe Statements in Binary Logging”](replication-rbr-safe-unsafe.html "19.2.1.3 Determination
    of Safe and Unsafe Statements in Binary Logging"), for more information.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UPDATE IGNORE`](update.html "15.2.17 UPDATE Statement") 语句，包括具有`ORDER BY`子句的语句，被标记为不安全的用于基于语句的复制。（这是因为更新行的顺序决定了哪些行被忽略。）这样的语句在使用基于语句模式时会在错误日志中产生警告，并在使用`MIXED`模式时以基于行的格式写入二进制日志。（Bug
    #11758262, Bug #50439）更多信息请参见[Section 19.2.1.3, “Determination of Safe and Unsafe
    Statements in Binary Logging”](replication-rbr-safe-unsafe.html "19.2.1.3 Determination
    of Safe and Unsafe Statements in Binary Logging")。'
- en: 'If you access a column from the table to be updated in an expression, [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") uses the current value of the column. For example,
    the following statement sets `col1` to one more than its current value:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在表达式中访问要更新的表中的列，[`UPDATE`](update.html "15.2.17 UPDATE Statement") 会使用列的当前值。例如，以下语句将`col1`设置为比其当前值多一的值：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The second assignment in the following statement sets `col2` to the current
    (updated) `col1` value, not the original `col1` value. The result is that `col1`
    and `col2` have the same value. This behavior differs from standard SQL.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句中的第二个赋值将`col2`设置为当前（更新后）的`col1`值，而不是原始的`col1`值。结果是`col1`和`col2`具有相同的值。这种行为与标准SQL不同。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Single-table [`UPDATE`](update.html "15.2.17 UPDATE Statement") assignments
    are generally evaluated from left to right. For multiple-table updates, there
    is no guarantee that assignments are carried out in any particular order.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 单表[`UPDATE`](update.html "15.2.17 UPDATE Statement")赋值通常从左到右进行评估。对于多表更新，不能保证赋值按任何特定顺序执行。
- en: If you set a column to the value it currently has, MySQL notices this and does
    not update it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将列设置为其当前值，MySQL会注意到这一点并且不会对其进行更新。
- en: If you update a column that has been declared `NOT NULL` by setting to `NULL`,
    an error occurs if strict SQL mode is enabled; otherwise, the column is set to
    the implicit default value for the column data type and the warning count is incremented.
    The implicit default value is `0` for numeric types, the empty string (`''`) for
    string types, and the “zero” value for date and time types. See [Section 13.6,
    “Data Type Default Values”](data-type-defaults.html "13.6 Data Type Default Values").
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您通过将已声明为`NOT NULL`的列设置为`NULL`来更新列，并且启用了严格的SQL模式，则会发生错误；否则，该列将设置为列数据类型的隐式默认值，并且警告计数会增加。对于数值类型，隐式默认值为`0`，对于字符串类型，为空字符串（`''`），对于日期和时间类型，为“零”值。请参见[第13.6节，“数据类型默认值”](data-type-defaults.html
    "13.6 Data Type Default Values")。
- en: If a generated column is updated explicitly, the only permitted value is `DEFAULT`.
    For information about generated columns, see [Section 15.1.20.8, “CREATE TABLE
    and Generated Columns”](create-table-generated-columns.html "15.1.20.8 CREATE
    TABLE and Generated Columns").
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果显式更新生成列，则唯一允许的值是`DEFAULT`。有关生成列的信息，请参见[第15.1.20.8节，“CREATE TABLE and Generated
    Columns”](create-table-generated-columns.html "15.1.20.8 CREATE TABLE and Generated
    Columns")。
- en: '[`UPDATE`](update.html "15.2.17 UPDATE Statement") returns the number of rows
    that were actually changed. The [`mysql_info()`](/doc/c-api/8.0/en/mysql-info.html)
    C API function returns the number of rows that were matched and updated and the
    number of warnings that occurred during the [`UPDATE`](update.html "15.2.17 UPDATE
    Statement").'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UPDATE`](update.html "15.2.17 UPDATE Statement")返回实际更改的行数。[`mysql_info()`](/doc/c-api/8.0/en/mysql-info.html)
    C API函数返回匹配并更新的行数以及在[`UPDATE`](update.html "15.2.17 UPDATE Statement")过程中发生的警告数。'
- en: You can use `LIMIT *`row_count`*` to restrict the scope of the [`UPDATE`](update.html
    "15.2.17 UPDATE Statement"). A `LIMIT` clause is a rows-matched restriction. The
    statement stops as soon as it has found *`row_count`* rows that satisfy the `WHERE`
    clause, whether or not they actually were changed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`LIMIT *`row_count`*`来限制[`UPDATE`](update.html "15.2.17 UPDATE Statement")的范围。`LIMIT`子句是一个匹配行数的限制。一旦找到满足`WHERE`子句的*`row_count`*行，无论它们是否实际更改，语句都会停止。
- en: 'If an [`UPDATE`](update.html "15.2.17 UPDATE Statement") statement includes
    an `ORDER BY` clause, the rows are updated in the order specified by the clause.
    This can be useful in certain situations that might otherwise result in an error.
    Suppose that a table `t` contains a column `id` that has a unique index. The following
    statement could fail with a duplicate-key error, depending on the order in which
    rows are updated:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`UPDATE`](update.html "15.2.17 UPDATE Statement")语句包含`ORDER BY`子句，则按照子句指定的顺序更新行。在某些情况下，这可能会避免错误。假设表`t`包含具有唯一索引的列`id`。以下语句可能会因为更新行的顺序不同而导致重复键错误：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For example, if the table contains 1 and 2 in the `id` column and 1 is updated
    to 2 before 2 is updated to 3, an error occurs. To avoid this problem, add an
    `ORDER BY` clause to cause the rows with larger `id` values to be updated before
    those with smaller values:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果表中`id`列包含1和2，并且在将1更新为2之前将2更新为3，则会发生错误。为避免此问题，请添加`ORDER BY`子句，以使具有较大`id`值的行在具有较小值的行之前更新：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also perform [`UPDATE`](update.html "15.2.17 UPDATE Statement") operations
    covering multiple tables. However, you cannot use `ORDER BY` or `LIMIT` with a
    multiple-table [`UPDATE`](update.html "15.2.17 UPDATE Statement"). The *`table_references`*
    clause lists the tables involved in the join. Its syntax is described in [Section 15.2.13.2,
    “JOIN Clause”](join.html "15.2.13.2 JOIN Clause"). Here is an example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以执行涵盖多个表的[`UPDATE`](update.html "15.2.17 UPDATE Statement")操作。但是，不能在多表[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")中使用`ORDER BY`或`LIMIT`。*`table_references`*子句列出了参与连接的表。其语法在[第15.2.13.2节，“JOIN
    Clause”](join.html "15.2.13.2 JOIN Clause")中描述。以下是一个示例：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding example shows an inner join that uses the comma operator, but
    multiple-table [`UPDATE`](update.html "15.2.17 UPDATE Statement") statements can
    use any type of join permitted in [`SELECT`](select.html "15.2.13 SELECT Statement")
    statements, such as `LEFT JOIN`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例显示了使用逗号运算符的内连接，但是多表[`UPDATE`](update.html "15.2.17 UPDATE Statement")语句可以使用在[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句中允许的任何类型的连接，例如`LEFT JOIN`。
- en: If you use a multiple-table [`UPDATE`](update.html "15.2.17 UPDATE Statement")
    statement involving `InnoDB` tables for which there are foreign key constraints,
    the MySQL optimizer might process tables in an order that differs from that of
    their parent/child relationship. In this case, the statement fails and rolls back.
    Instead, update a single table and rely on the `ON UPDATE` capabilities that `InnoDB`
    provides to cause the other tables to be modified accordingly. See [Section 15.1.20.5,
    “FOREIGN KEY Constraints”](create-table-foreign-keys.html "15.1.20.5 FOREIGN KEY
    Constraints").
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用涉及`InnoDB`表的多表[`UPDATE`](update.html "15.2.17 UPDATE Statement")语句，并且这些表存在外键约束，MySQL优化器可能会以与它们的父/子关系不同的顺序处理表。在这种情况下，该语句将失败并回滚。相反，更新单个表，并依赖`InnoDB`提供的`ON
    UPDATE`功能，以使其他表相应地进行修改。请参阅[第15.1.20.5节，“外键约束”](create-table-foreign-keys.html
    "15.1.20.5 FOREIGN KEY Constraints")。
- en: 'You cannot update a table and select directly from the same table in a subquery.
    You can work around this by using a multi-table update in which one of the tables
    is derived from the table that you actually wish to update, and referring to the
    derived table using an alias. Suppose you wish to update a table named `items`
    which is defined using the statement shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能在子查询中直接更新表并从同一表中进行选择。您可以通过使用多表更新来解决此问题，其中一个表是从您实际希望更新的表派生的，并使用别名引用派生表。假设您希望更新一个名为`items`的表，该表是使用以下语句定义的：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To reduce the retail price of any items for which the markup is 30% or greater
    and of which you have fewer than one hundred in stock, you might try to use an
    `UPDATE` statement such as the one following, which uses a subquery in the `WHERE`
    clause. As shown here, this statement does not work:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要减少任何标记幅度为30%或更高且库存少于一百的任何商品的零售价格，您可以尝试使用类似以下的`UPDATE`语句，其中在`WHERE`子句中使用了子查询。如下所示，此语句不起作用：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Instead, you can employ a multi-table update in which the subquery is moved
    into the list of tables to be updated, using an alias to reference it in the outermost
    `WHERE` clause, like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，您可以使用多表更新，其中子查询移动到要更新的表列表中，并使用别名在最外层`WHERE`子句中引用它，就像这样：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Because the optimizer tries by default to merge the derived table `discounted`
    into the outermost query block, this works only if you force materialization of
    the derived table. You can do this by setting the [`derived_merge`](switchable-optimizations.html#optflag_derived-merge)
    flag of the [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    system variable to `off` before running the update, or by using the [`NO_MERGE`](optimizer-hints.html#optimizer-hints-table-level
    "Table-Level Optimizer Hints") optimizer hint, as shown here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因为优化器默认尝试将派生表`discounted`合并到最外层查询块中，所以只有在强制实体化派生表时才起作用。您可以通过在运行更新之前将[`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)系统变量的[`derived_merge`](switchable-optimizations.html#optflag_derived-merge)标志设置为`off`，或者使用[`NO_MERGE`](optimizer-hints.html#optimizer-hints-table-level
    "Table-Level Optimizer Hints")优化提示来实现这一点，如下所示：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The advantage of using the optimizer hint in such a case is that it applies
    only within the query block where it is used, so that it is not necessary to change
    the value of `optimizer_switch` again after executing the `UPDATE`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下使用优化提示的优势在于它仅在使用它的查询块内部应用，因此在执行`UPDATE`后不需要再次更改`optimizer_switch`的值。
- en: 'Another possibility is to rewrite the subquery so that it does not use `IN`
    or `EXISTS`, like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性是重写子查询，使其不使用`IN`或`EXISTS`，就像这样：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, the subquery is materialized by default rather than merged, so
    it is not necessary to disable merging of the derived table.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，默认情况下子查询是实体化的，而不是合并的，因此不需要禁用派生表的合并。
