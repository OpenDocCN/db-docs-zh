- en: 29.8 Performance Schema Atom and Molecule Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 29.8 性能模式原子和分子事件
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/performance-schema-atom-molecule-events.html](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-atom-molecule-events.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/performance-schema-atom-molecule-events.html](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-atom-molecule-events.html)
- en: 'For a table I/O event, there are usually two rows in [`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table"), not one. For example, a row fetch
    might result in rows like this:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于表I/O事件，在[`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table")中通常有两行，而不是一行。例如，行提取可能导致类似以下的行：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The row fetch causes a file read. In the example, the table I/O fetch event
    started before the file I/O event but has not finished (its `TIMER_END` value
    is `NULL`). The file I/O event is “nested” within the table I/O event.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 行提取导致文件读取。在这个例子中，表I/O提取事件在文件I/O事件之前开始，但尚未完成（其`TIMER_END`值为`NULL`）。文件I/O事件“嵌套”在表I/O事件中。
- en: 'This occurs because, unlike other “atomic” wait events such as for mutexes
    or file I/O, table I/O events are “molecular” and include (overlap with) other
    events. In [`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table"), the table I/O event usually has two
    rows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为，与其他“原子”等待事件（如互斥或文件I/O）不同，表I/O事件是“分子”事件，并包括（重叠）其他事件。在[`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table")中，表I/O事件通常有两行：
- en: One row for the most recent table I/O wait event
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最近的表I/O等待事件的一行
- en: One row for the most recent wait event of any kind
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何类型的最新等待事件的一行
- en: Usually, but not always, the “of any kind” wait event differs from the table
    I/O event. As each subsidiary event completes, it disappears from [`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table"). At this point, and until the next
    subsidiary event begins, the table I/O wait is also the most recent wait of any
    kind.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，“任何类型”的等待事件与表I/O事件不同。随着每个子事件的完成，它会从[`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table")中消失。在此时，直到下一个子事件开始之前，表I/O等待也是任何类型的最新等待。
