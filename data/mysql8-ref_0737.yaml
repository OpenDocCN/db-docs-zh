- en: 13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.1.4 浮点类型（近似值） - FLOAT, DOUBLE
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html](https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html](https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html)
- en: The `FLOAT` and `DOUBLE` types represent approximate numeric data values. MySQL
    uses four bytes for single-precision values and eight bytes for double-precision
    values.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`FLOAT` 和 `DOUBLE` 类型表示近似数值数据。MySQL 使用四个字节来存储单精度值，使用八个字节来存储双精度值。'
- en: For `FLOAT`, the SQL standard permits an optional specification of the precision
    (but not the range of the exponent) in bits following the keyword `FLOAT` in parentheses,
    that is, [`FLOAT(*`p`*)`](floating-point-types.html "13.1.4 Floating-Point Types
    (Approximate Value) - FLOAT, DOUBLE"). MySQL also supports this optional precision
    specification, but the precision value in [`FLOAT(*`p`*)`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") is used only
    to determine storage size. A precision from 0 to 23 results in a 4-byte single-precision
    `FLOAT` column. A precision from 24 to 53 results in an 8-byte double-precision
    `DOUBLE` column.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `FLOAT`，SQL 标准允许在关键字 `FLOAT` 后面的括号中指定精度（但不是指数范围）的可选规范，即 [`FLOAT(*`p`*)`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")。MySQL 也支持这种可选精度规范，但在 [`FLOAT(*`p`*)`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE") 中的精度值仅用于确定存储大小。精度从 0 到 23 会导致一个 4 字节的单精度 `FLOAT`
    列。精度从 24 到 53 会导致一个 8 字节的双精度 `DOUBLE` 列。
- en: 'MySQL permits a nonstandard syntax: `FLOAT(*`M`*,*`D`*)` or `REAL(*`M`*,*`D`*)`
    or `DOUBLE PRECISION(*`M`*,*`D`*)`. Here, `(*`M`*,*`D`*)` means than values can
    be stored with up to *`M`* digits in total, of which *`D`* digits may be after
    the decimal point. For example, a column defined as `FLOAT(7,4)` is displayed
    as `-999.9999`. MySQL performs rounding when storing values, so if you insert
    `999.00009` into a `FLOAT(7,4)` column, the approximate result is `999.0001`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 允许非标准的语法：`FLOAT(*`M`*,*`D`*)` 或 `REAL(*`M`*,*`D`*)` 或 `DOUBLE PRECISION(*`M`*,*`D`*)`。这里，`(*`M`*,*`D`*)`
    意味着值可以以最多 *`M`* 位数字的形式存储，其中 *`D`* 位可以在小数点后面。例如，定义为 `FLOAT(7,4)` 的列显示为 `-999.9999`。当存储值时，MySQL
    进行四舍五入，因此如果你将 `999.00009` 插入到 `FLOAT(7,4)` 列中，近似结果是 `999.0001`。
- en: As of MySQL 8.0.17, the nonstandard `FLOAT(*`M`*,*`D`*)` and `DOUBLE(*`M`*,*`D`*)`
    syntax is deprecated and you should expect support for it to be removed in a future
    version of MySQL.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.17 开始，非标准的 `FLOAT(*`M`*,*`D`*)` 和 `DOUBLE(*`M`*,*`D`*)` 语法已被弃用，你应该预期在未来的
    MySQL 版本中将不再支持它。
- en: Because floating-point values are approximate and not stored as exact values,
    attempts to treat them as exact in comparisons may lead to problems. They are
    also subject to platform or implementation dependencies. For more information,
    see [Section B.3.4.8, “Problems with Floating-Point Values”](problems-with-float.html
    "B.3.4.8 Problems with Floating-Point Values").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因为浮点值是近似值，而不是精确值，试图在比较中将它们视为精确值可能会导致问题。它们也受平台或实现的依赖性影响。更多信息，请参见 [Section B.3.4.8,
    “浮点值的问题”](problems-with-float.html "B.3.4.8 浮点值的问题")。
- en: For maximum portability, code requiring storage of approximate numeric data
    values should use `FLOAT` or `DOUBLE PRECISION` with no specification of precision
    or number of digits.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大的可移植性，需要存储近似数值数据的代码应该使用 `FLOAT` 或 `DOUBLE PRECISION`，不需要指定精度或数字位数。
