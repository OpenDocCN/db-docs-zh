- en: 14.19.2 GROUP BY Modifiers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.19.2 GROUP BY 修饰符
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-by-modifiers.html](https://dev.mysql.com/doc/refman/8.0/en/group-by-modifiers.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-by-modifiers.html](https://dev.mysql.com/doc/refman/8.0/en/group-by-modifiers.html)
- en: The `GROUP BY` clause permits a `WITH ROLLUP` modifier that causes summary output
    to include extra rows that represent higher-level (that is, super-aggregate) summary
    operations. `ROLLUP` thus enables you to answer questions at multiple levels of
    analysis with a single query. For example, `ROLLUP` can be used to provide support
    for OLAP (Online Analytical Processing) operations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`GROUP BY`子句允许使用`WITH ROLLUP`修饰符，导致摘要输出包括代表更高级别（即超级聚合）摘要操作的额外行。因此，`ROLLUP`使您能够使用单个查询回答多个分析级别的问题。例如，`ROLLUP`可用于支持OLAP（在线分析处理）操作。'
- en: 'Suppose that a `sales` table has `year`, `country`, `product`, and `profit`
    columns for recording sales profitability:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个`sales`表有`year`、`country`、`product`和`profit`列用于记录销售利润：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To summarize table contents per year, use a simple `GROUP BY` like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要按年份总结表内容，请使用简单的`GROUP BY`，如下所示：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output shows the total (aggregate) profit for each year. To also determine
    the total profit summed over all years, you must add up the individual values
    yourself or run an additional query. Or you can use `ROLLUP`, which provides both
    levels of analysis with a single query. Adding a `WITH ROLLUP` modifier to the
    `GROUP BY` clause causes the query to produce another (super-aggregate) row that
    shows the grand total over all year values:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示每年的总利润。要确定所有年份总利润的总和，您必须自己加总各个值或运行另一个查询。或者您可以使用`ROLLUP`，它通过单个查询提供了两个级别的分析。在`GROUP
    BY`子句中添加`WITH ROLLUP`修饰符会导致查询生成另一行（超级聚合行），显示所有年份值的总计：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `NULL` value in the `year` column identifies the grand total super-aggregate
    line.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`year`列中的`NULL`值标识总计超级聚合行。'
- en: '`ROLLUP` has a more complex effect when there are multiple `GROUP BY` columns.
    In this case, each time there is a change in value in any but the last grouping
    column, the query produces an extra super-aggregate summary row.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`ROLLUP`在有多个`GROUP BY`列时具有更复杂的效果。在这种情况下，每当除最后一个分组列之外的任何列的值发生变化时，查询都会生成一个额外的超级聚合摘要行。'
- en: 'For example, without `ROLLUP`, a summary of the `sales` table based on `year`,
    `country`, and `product` might look like this, where the output indicates summary
    values only at the year/country/product level of analysis:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，没有`ROLLUP`，基于`year`、`country`和`product`的`sales`表摘要可能如下所示，其中输出仅指示年/国家/产品分析级别的摘要值：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With `ROLLUP` added, the query produces several extra rows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了`ROLLUP`后，查询会生成几行额外的行：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now the output includes summary information at four levels of analysis, not
    just one:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输出包括四个层次的分析摘要信息，而不仅仅是一个：
- en: Following each set of product rows for a given year and country, an extra super-aggregate
    summary row appears showing the total for all products. These rows have the `product`
    column set to `NULL`.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定年份和国家的每组产品行之后，会出现一个额外的超级聚合摘要行，显示所有产品的总计。这些行的`product`列设置为`NULL`。
- en: Following each set of rows for a given year, an extra super-aggregate summary
    row appears showing the total for all countries and products. These rows have
    the `country` and `products` columns set to `NULL`.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定年份的每组行之后，会出现一个额外的超级聚合摘要行，显示所有国家和产品的总计。这些行的`country`和`products`列设置为`NULL`。
- en: Finally, following all other rows, an extra super-aggregate summary row appears
    showing the grand total for all years, countries, and products. This row has the
    `year`, `country`, and `products` columns set to `NULL`.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在所有其他行之后，会出现一个额外的超级聚合摘要行，显示所有年份、国家和产品的总计。此行的`year`、`country`和`products`列设置为`NULL`。
- en: The `NULL` indicators in each super-aggregate row are produced when the row
    is sent to the client. The server looks at the columns named in the `GROUP BY`
    clause following the leftmost one that has changed value. For any column in the
    result set with a name that matches any of those names, its value is set to `NULL`.
    (If you specify grouping columns by column position, the server identifies which
    columns to set to `NULL` by position.)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个超级聚合行中的`NULL`指示符在将行发送到客户端时生成。服务器查看在第一个发生值变化的最左边的`GROUP BY`子句中命名的列。对于结果集中的任何列，其名称与这些名称中的任何一个匹配，其值都设置为`NULL`。（如果按列位置指定分组列，则服务器通过位置确定要设置为`NULL`的列。）
- en: Because the `NULL` values in the super-aggregate rows are placed into the result
    set at such a late stage in query processing, you can test them as `NULL` values
    only in the select list or `HAVING` clause. You cannot test them as `NULL` values
    in join conditions or the `WHERE` clause to determine which rows to select. For
    example, you cannot add `WHERE product IS NULL` to the query to eliminate from
    the output all but the super-aggregate rows.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因为在超级聚合行中的`NULL`值是在查询处理的最后阶段放入结果集中的，所以你只能在选择列表或`HAVING`子句中将它们作为`NULL`值进行测试。你不能在连接条件或`WHERE`子句中将它们作为`NULL`值进行测试，以确定选择哪些行。例如，你不能在查询中添加`WHERE
    product IS NULL`来从输出中消除除了超级聚合行之外的所有行。
- en: The `NULL` values do appear as `NULL` on the client side and can be tested as
    such using any MySQL client programming interface. However, at this point, you
    cannot distinguish whether a `NULL` represents a regular grouped value or a super-aggregate
    value. To test the distinction, use the [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    function, described later.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`NULL`值在客户端显示为`NULL`，可以使用任何MySQL客户端编程接口进行测试。然而，在这一点上，你无法区分`NULL`是代表常规分组值还是超级聚合值。要测试区分，使用稍后描述的[`GROUPING()`](miscellaneous-functions.html#function_grouping)函数。'
- en: 'Previously, MySQL did not allow the use of `DISTINCT` or `ORDER BY` in a query
    having a `WITH ROLLUP` option. This restriction is lifted in MySQL 8.0.12 and
    later. (Bug #87450, Bug #86311, Bug #26640100, Bug #26073513)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '以前，MySQL不允许在具有`WITH ROLLUP`选项的查询中使用`DISTINCT`或`ORDER BY`。这个限制在MySQL 8.0.12及更高版本中被取消。（Bug
    #87450，Bug #86311，Bug #26640100，Bug #26073513）'
- en: 'For `GROUP BY ... WITH ROLLUP` queries, to test whether `NULL` values in the
    result represent super-aggregate values, the [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    function is available for use in the select list, `HAVING` clause, and (as of
    MySQL 8.0.12) `ORDER BY` clause. For example, [`GROUPING(year)`](miscellaneous-functions.html#function_grouping)
    returns 1 when `NULL` in the `year` column occurs in a super-aggregate row, and
    0 otherwise. Similarly, [`GROUPING(country)`](miscellaneous-functions.html#function_grouping)
    and [`GROUPING(product)`](miscellaneous-functions.html#function_grouping) return
    1 for super-aggregate `NULL` values in the `country` and `product` columns, respectively:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`GROUP BY ... WITH ROLLUP`查询，为了测试结果中的`NULL`值是否代表超级聚合值，可以在选择列表、`HAVING`子句和（从MySQL
    8.0.12开始）`ORDER BY`子句中使用[`GROUPING()`](miscellaneous-functions.html#function_grouping)函数。例如，[`GROUPING(year)`](miscellaneous-functions.html#function_grouping)在`year`列中的`NULL`出现在超级聚合行时返回1，否则返回0。类似地，[`GROUPING(country)`](miscellaneous-functions.html#function_grouping)和[`GROUPING(product)`](miscellaneous-functions.html#function_grouping)分别在`country`和`product`列中的超级聚合`NULL`值时返回1：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Instead of displaying the [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    results directly, you can use [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    to substitute labels for super-aggregate `NULL` values:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[`GROUPING()`](miscellaneous-functions.html#function_grouping)来替换超级聚合`NULL`值的标签，而不是直接显示[`GROUPING()`](miscellaneous-functions.html#function_grouping)的结果：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With multiple expression arguments, [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    returns a result representing a bitmask that combines the results for each expression,
    with the lowest-order bit corresponding to the result for the rightmost expression.
    For example, [`GROUPING(year, country, product)`](miscellaneous-functions.html#function_grouping)
    is evaluated like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 带有多个表达式参数的[`GROUPING()`](miscellaneous-functions.html#function_grouping)函数返回一个结果，表示将每个表达式的结果组合在一起的位掩码，最低位对应最右边表达式的结果。例如，[`GROUPING(year,
    country, product)`](miscellaneous-functions.html#function_grouping)的计算如下：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The result of such a [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    is nonzero if any of the expressions represents a super-aggregate `NULL`, so you
    can return only the super-aggregate rows and filter out the regular grouped rows
    like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的[`GROUPING()`](miscellaneous-functions.html#function_grouping)的结果非零，如果任何表达式代表超级聚合`NULL`，那么你可以只返回超级聚合行并过滤掉常规分组行，如下所示：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `sales` table contains no `NULL` values, so all `NULL` values in a `ROLLUP`
    result represent super-aggregate values. When the data set contains `NULL` values,
    `ROLLUP` summaries may contain `NULL` values not only in super-aggregate rows,
    but also in regular grouped rows. [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    enables these to be distinguished. Suppose that table `t1` contains a simple data
    set with two grouping factors for a set of quantity values, where `NULL` indicates
    something like “other” or “unknown”:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`sales` 表中不包含 `NULL` 值，因此 `ROLLUP` 结果中的所有 `NULL` 值都代表超级聚合值。当数据集包含 `NULL` 值时，`ROLLUP`
    汇总可能不仅在超级聚合行中包含 `NULL` 值，还可能在常规分组行中包含 `NULL` 值。[`GROUPING()`](miscellaneous-functions.html#function_grouping)
    可以帮助区分它们。假设表 `t1` 包含一个简单的数据集，其中有两个用于一组数量值的分组因素，其中 `NULL` 表示类似于“其他”或“未知”：'
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A simple `ROLLUP` operation produces these results, in which it is not so easy
    to distinguish `NULL` values in super-aggregate rows from `NULL` values in regular
    grouped rows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的 `ROLLUP` 操作会产生这些结果，在其中很难区分超级聚合行中的 `NULL` 值和常规分组行中的 `NULL` 值：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Using [`GROUPING()`](miscellaneous-functions.html#function_grouping) to substitute
    labels for the super-aggregate `NULL` values makes the result easier to interpret:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`GROUPING()`](miscellaneous-functions.html#function_grouping) 来替换超级聚合 `NULL`
    值的标签使结果更容易解释：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Other Considerations When using ROLLUP
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 ROLLUP 时的其他考虑事项
- en: The following discussion lists some behaviors specific to the MySQL implementation
    of `ROLLUP`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下讨论列出了 MySQL 实现 `ROLLUP` 的一些特定行为。
- en: 'Prior to MySQL 8.0.12, when you use `ROLLUP`, you cannot also use an `ORDER
    BY` clause to sort the results. In other words, `ROLLUP` and `ORDER BY` were mutually
    exclusive in MySQL. However, you still have some control over sort order. To work
    around the restriction that prevents using `ROLLUP` with `ORDER BY` and achieve
    a specific sort order of grouped results, generate the grouped result set as a
    derived table and apply `ORDER BY` to it. For example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.12 之前，当使用 `ROLLUP` 时，不能同时使用 `ORDER BY` 子句对结果进行排序。换句话说，在 MySQL 中，`ROLLUP`
    和 `ORDER BY` 是互斥的。然而，你仍然可以在排序顺序上有一定的控制。为了绕过不能将 `ROLLUP` 与 `ORDER BY` 结合使用的限制，并实现对分组结果的特定排序顺序，可以将分组结果集生成为派生表，并对其应用
    `ORDER BY`。例如：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As of MySQL 8.0.12, `ORDER BY` and `ROLLUP` can be used together, which enables
    the use of `ORDER BY` and [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    to achieve a specific sort order of grouped results. For example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.12，`ORDER BY` 和 `ROLLUP` 可以一起使用，这使得可以使用 `ORDER BY` 和 [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    来实现对分组结果的特定排序顺序。例如：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In both cases, the super-aggregate summary rows sort with the rows from which
    they are calculated, and their placement depends on sort order (at the end for
    ascending sort, at the beginning for descending sort).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，超级聚合摘要行与它们计算出的行一起排序，并且它们的放置取决于排序顺序（升序排序时在末尾，降序排序时在开头）。
- en: '`LIMIT` can be used to restrict the number of rows returned to the client.
    `LIMIT` is applied after `ROLLUP`, so the limit applies against the extra rows
    added by `ROLLUP`. For example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`LIMIT` 可以用于限制返回给客户端的行数。`LIMIT` 应用于 `ROLLUP` 之后，因此限制适用于 `ROLLUP` 添加的额外行。例如：'
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using `LIMIT` with `ROLLUP` may produce results that are more difficult to interpret,
    because there is less context for understanding the super-aggregate rows.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `LIMIT` 与 `ROLLUP` 可能会产生更难解释的结果，因为对于理解超级聚合行来说，上下文更少。
- en: 'A MySQL extension permits a column that does not appear in the `GROUP BY` list
    to be named in the select list. (For information about nonaggregated columns and
    `GROUP BY`, see [Section 14.19.3, “MySQL Handling of GROUP BY”](group-by-handling.html
    "14.19.3 MySQL Handling of GROUP BY").) In this case, the server is free to choose
    any value from this nonaggregated column in summary rows, and this includes the
    extra rows added by `WITH ROLLUP`. For example, in the following query, `country`
    is a nonaggregated column that does not appear in the `GROUP BY` list and values
    chosen for this column are nondeterministic:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 的一个扩展允许在选择列表中命名不在 `GROUP BY` 列表中出现的列。（有关非聚合列和 `GROUP BY` 的信息，请参阅 [第 14.19.3
    节，“MySQL 对 GROUP BY 的处理”](group-by-handling.html "14.19.3 MySQL Handling of GROUP
    BY")。）在这种情况下，服务器可以自由选择摘要行中来自此非聚合列的任何值，包括 `WITH ROLLUP` 添加的额外行。例如，在以下查询中，`country`
    是一个非聚合列，不在 `GROUP BY` 列表中出现，为此列选择的值是不确定的：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This behavior is permitted when the [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)
    SQL mode is not enabled. If that mode is enabled, the server rejects the query
    as illegal because `country` is not listed in the `GROUP BY` clause. With [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)
    enabled, you can still execute the query by using the [`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)
    function for nondeterministic-value columns:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当未启用[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by) SQL 模式时，允许这种行为。如果启用了该模式，服务器会因为`country`未在`GROUP
    BY`子句中列出而拒绝查询。启用[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)后，您仍可以通过对非确定性值列使用[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)函数来执行查询：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In MySQL 8.0.28 and later, a rollup column cannot be used as an argument to
    [`MATCH()`](fulltext-search.html#function_match) (and is rejected with an error)
    except when called in a `WHERE` clause. See [Section 14.9, “Full-Text Search Functions”](fulltext-search.html
    "14.9 Full-Text Search Functions"), for more information.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.28 及更高版本中，`rollup` 列不能作为[`MATCH()`](fulltext-search.html#function_match)的参数（并将被拒绝并显示错误），除非在`WHERE`子句中调用。有关更多信息，请参见[第
    14.9 节，“全文搜索函数”](fulltext-search.html "14.9 Full-Text Search Functions")。
