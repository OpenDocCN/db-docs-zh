- en: 14.17.5 Functions That Return JSON Value Attributes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.17.5 返回 JSON 值属性的函数
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html](https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html](https://dev.mysql.com/doc/refman/8.0/en/json-attribute-functions.html)
- en: The functions in this section return attributes of JSON values.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的函数返回 JSON 值的属性。
- en: '[`JSON_DEPTH(*`json_doc`*)`](json-attribute-functions.html#function_json-depth)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_DEPTH(*`json_doc`*)`](json-attribute-functions.html#function_json-depth)'
- en: Returns the maximum depth of a JSON document. Returns `NULL` if the argument
    is `NULL`. An error occurs if the argument is not a valid JSON document.
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回 JSON 文档的最大深度。如果参数为 `NULL`，则返回 `NULL`。如果参数不是有效的 JSON 文档，则会出现错误。
- en: An empty array, empty object, or scalar value has depth 1\. A nonempty array
    containing only elements of depth 1 or nonempty object containing only member
    values of depth 1 has depth 2. Otherwise, a JSON document has depth greater than
    2.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个空数组、空对象或标量值的深度为 1。一个只包含深度为 1 的元素的非空数组，或者只包含深度为 1 的成员值的非空对象，其深度为 2。否则，JSON
    文档的深度大于 2。
- en: '[PRE0]'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`JSON_LENGTH(*`json_doc`*[, *`path`*])`](json-attribute-functions.html#function_json-length)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_LENGTH(*`json_doc`*[, *`path`*])`](json-attribute-functions.html#function_json-length)'
- en: Returns the length of a JSON document, or, if a *`path`* argument is given,
    the length of the value within the document identified by the path. Returns `NULL`
    if any argument is `NULL` or the *`path`* argument does not identify a value in
    the document. An error occurs if the *`json_doc`* argument is not a valid JSON
    document or the *`path`* argument is not a valid path expression. Prior to MySQL
    8.0.26, an error is also raised if the path expression contains a `*` or `**`
    wildcard.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回 JSON 文档的长度，或者如果给定了 *`path`* 参数，则返回标识路径中的值的文档内值的长度。如果任何参数为 `NULL` 或 *`path`*
    参数在文档中没有标识值，则返回 `NULL`。如果 *`json_doc`* 参数不是有效的 JSON 文档，或者 *`path`* 参数不是有效的路径��达式，则会出现错误。在
    MySQL 8.0.26 之前，如果路径表达式包含 `*` 或 `**` 通配符，还会引发错误。
- en: 'The length of a document is determined as follows:'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档的长度如下确定：
- en: The length of a scalar is 1.
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量的长度为 1。
- en: The length of an array is the number of array elements.
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个数组的长度是数组元素的数量。
- en: The length of an object is the number of object members.
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个对象的长度是对象成员的数量。
- en: The length does not count the length of nested arrays or objects.
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长度不包括嵌套数组或对象的长度。
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`JSON_TYPE(*`json_val`*)`](json-attribute-functions.html#function_json-type)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_TYPE(*`json_val`*)`](json-attribute-functions.html#function_json-type)'
- en: 'Returns a `utf8mb4` string indicating the type of a JSON value. This can be
    an object, an array, or a scalar type, as shown here:'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回一个`utf8mb4`字符串，指示 JSON 值的类型。这可以是一个对象、一个数组，或者一个标量类型，如下所示：
- en: '[PRE2]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`JSON_TYPE()`](json-attribute-functions.html#function_json-type) returns `NULL`
    if the argument is `NULL`:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`JSON_TYPE()`](json-attribute-functions.html#function_json-type) 如果参数为 `NULL`，则返回
    `NULL`：'
- en: '[PRE3]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An error occurs if the argument is not a valid JSON value:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果参数不是有效的 JSON 值，则会出现错误：
- en: '[PRE4]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For a non-`NULL`, non-error result, the following list describes the possible
    [`JSON_TYPE()`](json-attribute-functions.html#function_json-type) return values:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于非`NULL`、非错误结果，以下列表描述了可能的 [`JSON_TYPE()`](json-attribute-functions.html#function_json-type)
    返回值：
- en: 'Purely JSON types:'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯粹的 JSON 类型：
- en: '`OBJECT`: JSON objects'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT`: JSON 对象'
- en: '`ARRAY`: JSON arrays'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ARRAY`: JSON 数组'
- en: '`BOOLEAN`: The JSON true and false literals'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BOOLEAN`: JSON 中的 true 和 false 字面值'
- en: '`NULL`: The JSON null literal'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NULL`: JSON 中的 null 字面值'
- en: 'Numeric types:'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值类型：
- en: '`INTEGER`: MySQL [`TINYINT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`SMALLINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT"), [`MEDIUMINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") and [`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") and [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") scalars'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INTEGER`: MySQL [`TINYINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`SMALLINT`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`MEDIUMINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 和 [`INT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 和 [`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 标量'
- en: '`DOUBLE`: MySQL [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE") [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") scalars'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOUBLE`: MySQL [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE") 和 [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") 标量'
- en: '`DECIMAL`: MySQL [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point Types
    (Exact Value) - DECIMAL, NUMERIC") and [`NUMERIC`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC") scalars'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DECIMAL`: MySQL [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point Types
    (Exact Value) - DECIMAL, NUMERIC") 和 [`NUMERIC`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC") 标量'
- en: 'Temporal types:'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '时间类型:'
- en: '`DATETIME`: MySQL [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and
    TIMESTAMP Types") and [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") scalars'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATETIME`: MySQL [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and
    TIMESTAMP Types") 和 [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and
    TIMESTAMP Types") 标量'
- en: '`DATE`: MySQL [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types") scalars'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATE`: MySQL [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types") 标量'
- en: '`TIME`: MySQL [`TIME`](time.html "13.2.3 The TIME Type") scalars'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIME`: MySQL [`TIME`](time.html "13.2.3 The TIME Type") 标量'
- en: 'String types:'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '字符串类型:'
- en: '`STRING`: MySQL `utf8mb3` character type scalars: [`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types"), [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types"), [`ENUM`](enum.html "13.3.5 The
    ENUM Type"), and [`SET`](set.html "13.3.6 The SET Type")'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STRING`: MySQL `utf8mb3` 字符类型标量: [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types")、[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")、[`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")、[`ENUM`](enum.html "13.3.5 The ENUM Type") 和
    [`SET`](set.html "13.3.6 The SET Type")'
- en: 'Binary types:'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '二进制类型:'
- en: '`BLOB`: MySQL binary type scalars including [`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types"), and [`BIT`](bit-type.html "13.1.5 Bit-Value Type - BIT")'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BLOB`: MySQL 二进制类型标量，包括 [`BINARY`](binary-varbinary.html "13.3.3 The BINARY
    and VARBINARY Types")、[`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY and
    VARBINARY Types")、[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") 和 [`BIT`](bit-type.html
    "13.1.5 Bit-Value Type - BIT")'
- en: 'All other types:'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '所有其他类型:'
- en: '`OPAQUE` (raw bits)'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPAQUE`（原始位）'
- en: '[`JSON_VALID(*`val`*)`](json-attribute-functions.html#function_json-valid)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_VALID(*`val`*)`](json-attribute-functions.html#function_json-valid)'
- en: Returns 0 or 1 to indicate whether a value is valid JSON. Returns `NULL` if
    the argument is `NULL`.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回 0 或 1 表示值是否为有效 JSON。如果参数为 `NULL`，则返回 `NULL`。
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
