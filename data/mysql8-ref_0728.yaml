- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/ldml-rules.html](https://dev.mysql.com/doc/refman/8.0/en/ldml-rules.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/ldml-rules.html](https://dev.mysql.com/doc/refman/8.0/en/ldml-rules.html)
- en: 12.14.4.2 LDML Syntax Supported in MySQL
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12.14.4.2 MySQL支持的LDML语法
- en: This section describes the LDML syntax that MySQL recognizes. This is a subset
    of the syntax described in the LDML specification available at [http://www.unicode.org/reports/tr35/](http://www.unicode.org/reports/tr35/),
    which should be consulted for further information. MySQL recognizes a large enough
    subset of the syntax that, in many cases, it is possible to download a collation
    definition from the Unicode Common Locale Data Repository and paste the relevant
    part (that is, the part between the `<rules>` and `</rules>` tags) into the MySQL
    `Index.xml` file. The rules described here are all supported except that character
    sorting occurs only at the primary level. Rules that specify differences at secondary
    or higher sort levels are recognized (and thus can be included in collation definitions)
    but are treated as equality at the primary level.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了MySQL识别的LDML语法。这是LDML规范中描述的语法的子集，可在[http://www.unicode.org/reports/tr35/](http://www.unicode.org/reports/tr35/)找到，应该查阅以获取更多信息。MySQL识别了足够大的语法子集，因此在许多情况下，可以从Unicode通用区域数据存储库下载排序定义，并将相关部分（即在`<rules>`和`</rules>`标记之间的部分）粘贴到MySQL的`Index.xml`文件中。这里描述的规则都受支持，只是字符排序仅在主要级别发生。指定在次要或更高排序级别上存在差异的规则被识别（因此可以包含在排序定义中），但在主要级别被视为相等。
- en: The MySQL server generates diagnostics when it finds problems while parsing
    the `Index.xml` file. See [Section 12.14.4.3, “Diagnostics During Index.xml Parsing”](collation-diagnostics.html
    "12.14.4.3 Diagnostics During Index.xml Parsing").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当MySQL服务器在解析`Index.xml`文件时发现问题时，会生成诊断信息。请参阅[第12.14.4.3节，“解析Index.xml时的诊断”](collation-diagnostics.html
    "12.14.4.3 解析Index.xml时的诊断")。
- en: '**Character Representation**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符表示**'
- en: Characters named in LDML rules can be written literally or in `\u*`nnnn`*` format,
    where *`nnnn`* is the hexadecimal Unicode code point value. For example, `A` and
    `á` can be written literally or as `\u0041` and `\u00E1`. Within hexadecimal values,
    the digits `A` through `F` are not case-sensitive; `\u00E1` and `\u00e1` are equivalent.
    For UCA 4.0.0 collations, hexadecimal notation can be used only for characters
    in the Basic Multilingual Plane, not for characters outside the BMP range of `0000`
    to `FFFF`. For UCA 5.2.0 collations, hexadecimal notation can be used for any
    character.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在LDML规则中命名的字符可以直接写出，也可以用`\u*`nnnn`*`格式，其中*`nnnn`*是十六进制Unicode代码点值。例如，`A`和`á`可以直接写出，也可以写为`\u0041`和`\u00E1`。在十六进制值中，字母`A`到`F`不区分大小写；`\u00E1`和`\u00e1`是等效的。对于UCA
    4.0.0排序，只能对基本多文种平面中的字符使用十六进制表示法，而不能对超出`0000`到`FFFF`的BMP范围的字符使用。对于UCA 5.2.0排序，可以对任何字符使用十六进制表示法。
- en: The `Index.xml` file itself should be written using UTF-8 encoding.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index.xml`文件本身应使用UTF-8编码编写。'
- en: '**Syntax Rules**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法规则**'
- en: LDML has reset rules and shift rules to specify character ordering. Orderings
    are given as a set of rules that begin with a reset rule that establishes an anchor
    point, followed by shift rules that indicate how characters sort relative to the
    anchor point.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: LDML具有重置规则和移位规则，用于指定字符排序。排序规则被给定为一组以建立锚点的重置规则开头的规则，然后是指示字符相对于锚点如何排序的移位规则。
- en: 'A `<reset>` rule does not specify any ordering in and of itself. Instead, it
    “resets” the ordering for subsequent shift rules to cause them to be taken in
    relation to a given character. Either of the following rules resets subsequent
    shift rules to be taken in relation to the letter `''A''`:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<reset>`规则本身不指定任何排序。相反，它“重置”后续移位规则，使它们相对于给定字符进行排序。以下任一规则都会将后续移位规则重置为相对于字母`''A''`进行排序：'
- en: '[PRE0]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `<p>`, `<s>`, and `<t>` shift rules define primary, secondary, and tertiary
    differences of a character from another character:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p>`、`<s>`和`<t>`移位规则定义了一个字符与另一个字符的主要、次要和三级差异：'
- en: Use primary differences to distinguish separate letters.
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用主要差异来区分不同的字母。
- en: Use secondary differences to distinguish accent variations.
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用次要差异来区分重音变体。
- en: Use tertiary differences to distinguish lettercase variations.
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用三级差异来区分大小写变体。
- en: 'Either of these rules specifies a primary shift rule for the `''G''` character:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下任一规则指定了字符`'G'`的主要移位规则：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `<i>` shift rule indicates that one character sorts identically to another.
    The following rules cause `''b''` to sort the same as `''a''`:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<i>`移位规则表示一个字符与另一个字符排序相同。以下规则使`''b''`与`''a''`排序相同：'
- en: '[PRE2]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Abbreviated shift syntax specifies multiple shift rules using a single pair
    of tags. The following table shows the correspondence between abbreviated syntax
    rules and the equivalent nonabbreviated rules.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩写的移位语法使用一对标签指定多个移位规则。以下表格显示了缩写语法规则与等效的非缩写规则之间的对应关系。
- en: '**Table 12.5 Abbreviated Shift Syntax**'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**表 12.5 缩写的移位语法**'
- en: '| Abbreviated Syntax | Nonabbreviated Syntax |'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 缩写语法 | 非缩写语法 |'
- en: '| `<pc>xyz</pc>` | `<p>x</p><p>y</p><p>z</p>` |'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<pc>xyz</pc>` | `<p>x</p><p>y</p><p>z</p>` |'
- en: '| `<sc>xyz</sc>` | `<s>x</s><s>y</s><s>z</s>` |'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<sc>xyz</sc>` | `<s>x</s><s>y</s><s>z</s>` |'
- en: '| `<tc>xyz</tc>` | `<t>x</t><t>y</t><t>z</t>` |'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<tc>xyz</tc>` | `<t>x</t><t>y</t><t>z</t>` |'
- en: '| `<ic>xyz</ic>` | `<i>x</i><i>y</i><i>z</i>` |'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<ic>xyz</ic>` | `<i>x</i><i>y</i><i>z</i>` |'
- en: 'An expansion is a reset rule that establishes an anchor point for a multiple-character
    sequence. MySQL supports expansions 2 to 6 characters long. The following rules
    put `''z''` greater at the primary level than the sequence of three characters
    `''abc''`:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展是一个重置规则，为多字符序列建立锚点。MySQL支持2到6个字符长的扩展。以下规则将`'z'`放在主级别比三个字符序列`'abc'`更大：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A contraction is a shift rule that sorts a multiple-character sequence. MySQL
    supports contractions 2 to 6 characters long. The following rules put the sequence
    of three characters `''xyz''` greater at the primary level than `''a''`:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩写是将多字符序列排序的移位规则。MySQL支持2到6个字符长的缩写。以下规则将三个字符序列`'xyz'`放在主级别比`'a'`更大：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Long expansions and long contractions can be used together. These rules put
    the sequence of three characters `''xyz''` greater at the primary level than the
    sequence of three characters `''abc''`:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长扩展和长缩写可以一起使用。这些规则将三个字符序列`'xyz'`放在主级别比三个字符序列`'abc'`更大：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Normal expansion syntax uses `<x>` plus `<extend>` elements to specify an expansion.
    The following rules put the character `''k''` greater at the secondary level than
    the sequence `''ch''`. That is, `''k''` behaves as if it expands to a character
    after `''c''` followed by `''h''`:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常的扩展语法使用`<x>`加上`<extend>`元素来指定一个扩展。以下规则将字符`'k'`放在二级别比序列`'ch'`更大。也就是说，`'k'`的行为就像它扩展到`'c'`后跟着`'h'`的字符一样：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This syntax permits long sequences. These rules sort the sequence `''ccs''`
    greater at the tertiary level than the sequence `''cscs''`:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种语法允许长序列。这些规则将序列`'ccs'`放在三级别比序列`'cscs'`更大：
- en: '[PRE7]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The LDML specification describes normal expansion syntax as “tricky.” See that
    specification for details.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LDML规范将正常扩展语法描述为“棘手”。详细信息请参阅该规范。
- en: 'Previous context syntax uses `<x>` plus `<context>` elements to specify that
    the context before a character affects how it sorts. The following rules put `''-''`
    greater at the secondary level than `''a''`, but only when `''-''` occurs after
    `''b''`:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先前的上下文语法使用`<x>`加上`<context>`元素来指定字符前的上下文影响其排序方式。以下规则将`'-'`放在二级比`'a'`更大，但仅当`'-'`出现在`'b'`之后时：
- en: '[PRE8]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Previous context syntax can include the `<extend>` element. These rules put
    `''def''` greater at the primary level than `''aghi''`, but only when `''def''`
    comes after `''abc''`:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先前的上下文语法可以包括`<extend>`元素。这些规则将`'def'`放在主级别比`'aghi'`更大，但仅当`'def'`出现在`'abc'`之后时：
- en: '[PRE9]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Reset rules permit a `before` attribute. Normally, shift rules after a reset
    rule indicate characters that sort after the reset character. Shift rules after
    a reset rule that has the `before` attribute indicate characters that sort before
    the reset character. The following rules put the character `''b''` immediately
    before `''a''` at the primary level:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置规则允许`before`属性。通常，在重置规则之后的移位规则指示在重置字符之后排序的字符。在具有`before`属性的重置规则之后的移位规则指示在重置字符之前排序的字符。以下规则将字符`'b'`立即放在主级别的`'a'`之前：
- en: '[PRE10]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Permissible `before` attribute values specify the sort level by name or the
    equivalent numeric value:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许的`before`属性值通过名称或等效的数值指定排序级别：
- en: '[PRE11]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A reset rule can name a logical reset position rather than a literal character:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置规则可以命名逻辑重置位置而不是文字字符：
- en: '[PRE12]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'These rules put `''z''` greater at the primary level than nonignorable characters
    that have a Default Unicode Collation Element Table (DUCET) entry and that are
    not CJK:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些规则将`'z'`放在主级别比具有默认Unicode排序元素表（DUCET）条目且不是CJK的不可忽略字符更大：
- en: '[PRE13]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Logical positions have the code points shown in the following table.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 逻辑位置在下表中显示了代码点。
- en: '**Table 12.6 Logical Reset Position Code Points**'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**表 12.6 逻辑重置位置代码点**'
- en: '| Logical Position | Unicode 4.0.0 Code Point | Unicode 5.2.0 Code Point |'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 逻辑位置 | Unicode 4.0.0 代码点 | Unicode 5.2.0 代码点 |'
- en: '| `<first_non_ignorable/>` | U+02D0 | U+02D0 |'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<first_non_ignorable/>` | U+02D0 | U+02D0 |'
- en: '| `<last_non_ignorable/>` | U+A48C | U+1342E |'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<last_non_ignorable/>` | U+A48C | U+1342E |'
- en: '| `<first_primary_ignorable/>` | U+0332 | U+0332 |'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<first_primary_ignorable/>` | U+0332 | U+0332 |'
- en: '| `<last_primary_ignorable/>` | U+20EA | U+101FD |'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<last_primary_ignorable/>` | U+20EA | U+101FD |'
- en: '| `<first_secondary_ignorable/>` | U+0000 | U+0000 |'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<first_secondary_ignorable/>` | U+0000 | U+0000 |'
- en: '| `<last_secondary_ignorable/>` | U+FE73 | U+FE73 |'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<last_secondary_ignorable/>` | U+FE73 | U+FE73 |'
- en: '| `<first_tertiary_ignorable/>` | U+0000 | U+0000 |'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<first_tertiary_ignorable/>` | U+0000 | U+0000 |'
- en: '| `<last_tertiary_ignorable/>` | U+FE73 | U+FE73 |'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<last_tertiary_ignorable/>` | U+FE73 | U+FE73 |'
- en: '| `<first_trailing/>` | U+0000 | U+0000 |'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<first_trailing/>` | U+0000 | U+0000 |'
- en: '| `<last_trailing/>` | U+0000 | U+0000 |'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<last_trailing/>` | U+0000 | U+0000 |'
- en: '| `<first_variable/>` | U+0009 | U+0009 |'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<first_variable/>` | U+0009 | U+0009 |'
- en: '| `<last_variable/>` | U+2183 | U+1D371 |'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `<last_variable/>` | U+2183 | U+1D371 |'
- en: '| Logical Position | Unicode 4.0.0 Code Point | Unicode 5.2.0 Code Point |'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 逻辑位置 | Unicode 4.0.0 代码点 | Unicode 5.2.0 代码点 |'
- en: 'The `<collation>` element permits a `shift-after-method` attribute that affects
    character weight calculation for shift rules. The attribute has these permitted
    values:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<collation>`元素允许`shift-after-method`属性，该属性影响移位规则的字符权重计算。该属性有以下允许的值：'
- en: '`simple`: Calculate character weights as for reset rules that do not have a
    `before` attribute. This is the default if the attribute is not given.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`simple`: 计算字符权重，就像没有`before`属性的重置规则一样。如果未给出属性，则这是默认值。'
- en: '`expand`: Use expansions for shifts after reset rules.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expand`: 使用扩展来处理重置规则后的偏移。'
- en: 'Suppose that `''0''` and `''1''` have weights of `0E29` and `0E2A` and we want
    to put all basic Latin letters between `''0''` and `''1''`:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设`'0'`和`'1'`的权重分别为`0E29`和`0E2A`，我们想在`'0'`和`'1'`之间放置所有基本拉丁字母：
- en: '[PRE14]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For simple shift mode, weights are calculated as follows:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于简单的移位模式，权重计算如下：
- en: '[PRE15]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: However, there are not enough vacant positions to put 26 characters between
    `'0'` and `'1'`. The result is that digits and letters are intermixed.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，在`'0'`和`'1'`之间没有足够的空位来放置26个字符。结果是数字和字母混合在一起。
- en: 'To solve this, use `shift-after-method="expand"`. Then weights are calculated
    like this:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要解决这个问题，使用`shift-after-method="expand"`。然后权重计算如下：
- en: '[PRE16]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`233D` is the UCA 4.0.0 weight for character `0xA48C`, which is the last nonignorable
    character (a sort of the greatest character in the collation, excluding CJK).
    UCA 5.2.0 is similar but uses `3ACA`, for character `0x1342E`.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`233D` 是字符`0xA48C`的 UCA 4.0.0 权重，它是最后一个非可忽略字符（排序中最大的字符，不包括 CJK）。UCA 5.2.0 类似，但使用`3ACA`，对于字符`0x1342E`。'
- en: '**MySQL-Specific LDML Extensions**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**MySQL 特定的 LDML 扩展**'
- en: 'An extension to LDML rules permits the `<collation>` element to include an
    optional `version` attribute in `<collation>` tags to indicate the UCA version
    on which the collation is based. If the `version` attribute is omitted, its default
    value is `4.0.0`. For example, this specification indicates a collation that is
    based on UCA 5.2.0:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: LDML 规则的扩展允许`<collation>`元素在`<collation>`标签中包含一个可选的`version`属性，以指示排序所基于的 UCA
    版本。如果省略`version`属性，则其默认值为`4.0.0`。例如，此规范指示基于 UCA 5.2.0 的排序：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
