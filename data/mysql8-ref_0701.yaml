- en: 12.9.5 The utf16 Character Set (UTF-16 Unicode Encoding)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.9.5 `utf16`字符集（UTF-16 Unicode编码）
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-utf16.html](https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-utf16.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-utf16.html](https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-utf16.html)
- en: 'The `utf16` character set is the `ucs2` character set with an extension that
    enables encoding of supplementary characters:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`utf16`字符集是`ucs2`字符集的扩展，使其能够编码补充字符：'
- en: 'For a BMP character, `utf16` and `ucs2` have identical storage characteristics:
    same code values, same encoding, same length.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于BMP字符，`utf16`和`ucs2`具有相同的存储特性：相同的代码值，相同的编码，相同的长度。
- en: 'For a supplementary character, `utf16` has a special sequence for representing
    the character using 32 bits. This is called the “surrogate” mechanism: For a number
    greater than `0xffff`, take 10 bits and add them to `0xd800` and put them in the
    first 16-bit word, take 10 more bits and add them to `0xdc00` and put them in
    the next 16-bit word. Consequently, all supplementary characters require 32 bits,
    where the first 16 bits are a number between `0xd800` and `0xdbff`, and the last
    16 bits are a number between `0xdc00` and `0xdfff`. Examples are in Section [15.5
    Surrogates Area](http://www.unicode.org/versions/Unicode4.0.0/ch15.pdf) of the
    Unicode 4.0 document.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于补充字符，`utf16`有一个特殊的序列来使用32位表示字符。这被称为“代理”机制：对于大于`0xffff`的数字，取10位并将它们加到`0xd800`，放入第一个16位字中，再取10位并将它们加到`0xdc00`，放入下一个16位字中。因此，所有补充字符需要32位，其中前16位是介于`0xd800`和`0xdbff`之间的数字，后16位是介于`0xdc00`和`0xdfff`之间的数字。示例在Unicode
    4.0文档的第[15.5代理区](http://www.unicode.org/versions/Unicode4.0.0/ch15.pdf)中。
- en: 'Because `utf16` supports surrogates and `ucs2` does not, there is a validity
    check that applies only in `utf16`: You cannot insert a top surrogate without
    a bottom surrogate, or vice versa. For example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`utf16`支持代理而`ucs2`不支持，只有在`utf16`中才适用的有效性检查：您不能插入顶部代理而没有底部代理，反之亦然。例如：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There is no validity check for characters that are technically valid but are
    not true Unicode (that is, characters that Unicode considers to be “unassigned
    code points” or “private use” characters or even “illegals” like `0xffff`). For
    example, since `U+F8FF` is the Apple Logo, this is legal:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于技术上有效但不是真正Unicode的字符，没有有效性检查（即Unicode认为是“未分配代码点”或“私有使用”字符甚至“非法”字符，如`0xffff`）。例如，由于`U+F8FF`是苹果Logo，这是合法的：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Such characters cannot be expected to mean the same thing to everyone.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字符不能期望对每个人都有相同的含义。
- en: 'Because MySQL must allow for the worst case (that one character requires four
    bytes) the maximum length of a `utf16` column or index is only half of the maximum
    length for a `ucs2` column or index. For example, the maximum length of a `MEMORY`
    table index key is 3072 bytes, so these statements create tables with the longest
    permitted indexes for `ucs2` and `utf16` columns:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因为MySQL必须考虑最坏情况（一个字符需要四个字节），`utf16`列或索引的最大长度仅为`ucs2`列或索引的最大长度的一半。例如，`MEMORY`表索引键的最大长度为3072字节，因此这些语句创建具有`ucs2`和`utf16`列的最长允许索引的表：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
