- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/using-innodb-tables.html](https://dev.mysql.com/doc/refman/8.0/en/using-innodb-tables.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/using-innodb-tables.html](https://dev.mysql.com/doc/refman/8.0/en/using-innodb-tables.html)
- en: 17.6.1.1 Creating InnoDB Tables
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.6.1.1 创建InnoDB表
- en: '`InnoDB` tables are created using the [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") statement; for example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句创建`InnoDB`表；例如：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `ENGINE=InnoDB` clause is not required when `InnoDB` is defined as the
    default storage engine, which it is by default. However, the `ENGINE` clause is
    useful if the [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")
    statement is to be replayed on a different MySQL Server instance where the default
    storage engine is not `InnoDB` or is unknown. You can determine the default storage
    engine on a MySQL Server instance by issuing the following statement:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当`InnoDB`被定义为默认存储引擎时（默认情况下是这样），不需要`ENGINE=InnoDB`子句。但是，如果要在默认存储引擎不是`InnoDB`或未知的另一个MySQL服务器实例上重放[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句，则`ENGINE`子句很有用。您可以通过发出以下语句来确定MySQL服务器实例上的默认存储引擎：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`InnoDB` tables are created in file-per-table tablespaces by default. To create
    an `InnoDB` table in the `InnoDB` system tablespace, disable the [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    variable before creating the table. To create an `InnoDB` table in a general tablespace,
    use [`CREATE TABLE ... TABLESPACE`](create-table.html "15.1.20 CREATE TABLE Statement")
    syntax. For more information, see [Section 17.6.3, “Tablespaces”](innodb-tablespace.html
    "17.6.3 Tablespaces").'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`表默认在每个表的表空间中创建。要在`InnoDB`系统表空间中创建`InnoDB`表，请在创建表之前禁用[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)变量。要在一般表空间中创建`InnoDB`表，请使用[`CREATE
    TABLE ... TABLESPACE`](create-table.html "15.1.20 CREATE TABLE Statement")语法。更多信息，请参见[第17.6.3节，“表空间”](innodb-tablespace.html
    "17.6.3 Tablespaces")。'
- en: Row Formats
  id: totrans-7
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 行格式
- en: The row format of an `InnoDB` table determines how its rows are physically stored
    on disk. `InnoDB` supports four row formats, each with different storage characteristics.
    Supported row formats include `REDUNDANT`, `COMPACT`, `DYNAMIC`, and `COMPRESSED`.
    The `DYNAMIC` row format is the default. For information about row format characteristics,
    see [Section 17.10, “InnoDB Row Formats”](innodb-row-format.html "17.10 InnoDB
    Row Formats").
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`表的行格式决定了其行在磁盘上的物理存储方式。`InnoDB`支持四种行格式，每种都具有不同的存储特性。支持的行格式包括`REDUNDANT`、`COMPACT`、`DYNAMIC`和`COMPRESSED`。`DYNAMIC`行格式是默认的。有关行格式特性的信息，请参见[第17.10节，“InnoDB行格式”](innodb-row-format.html
    "17.10 InnoDB Row Formats")。'
- en: The [`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format)
    variable defines the default row format. The row format of a table can also be
    defined explicitly using the `ROW_FORMAT` table option in a `CREATE TABLE` or
    `ALTER TABLE` statement. See [Defining the Row Format of a Table](innodb-row-format.html#innodb-row-format-defining
    "Defining the Row Format of a Table").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format)变量定义了默认行格式。表的行格式也可以在`CREATE
    TABLE`或`ALTER TABLE`语句中使用`ROW_FORMAT`表选项显式定义。请参见[定义表的行格式](innodb-row-format.html#innodb-row-format-defining
    "Defining the Row Format of a Table")。'
- en: Primary Keys
  id: totrans-10
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 主键
- en: 'It is recommended that you define a primary key for each table that you create.
    When selecting primary key columns, choose columns with the following characteristics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 建议为创建的每个表定义一个主键。在选择主键列时，请选择具有以下特征的列：
- en: Columns that are referenced by the most important queries.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被最重要查询引用的列。
- en: Columns that are never left blank.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从不留空的列。
- en: Columns that never have duplicate values.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从不具有重复值的列。
- en: Columns that rarely if ever change value once inserted.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦插入后很少或几乎不会更改值的列。
- en: 'For example, in a table containing information about people, you would not
    create a primary key on `(firstname, lastname)` because more than one person can
    have the same name, a name column may be left blank, and sometimes people change
    their names. With so many constraints, often there is not an obvious set of columns
    to use as a primary key, so you create a new column with a numeric ID to serve
    as all or part of the primary key. You can declare an [auto-increment](glossary.html#glos_auto_increment
    "auto-increment") column so that ascending values are filled in automatically
    as rows are inserted:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在包含有关人员信息的表中，您不会在`(firstname, lastname)`上创建主键，因为可能有多个人具有相同的姓名，姓名列可能为空，有时人们会更改他们的姓名。由于有这么多的约束条件，通常没有明显的列集可用作主键，因此您可以创建一个新的带有数字
    ID 的列，作为主键的全部或部分。您可以声明一个[自增](glossary.html#glos_auto_increment "auto-increment")列，以便在插入行时自动填入升序值：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For more information about auto-increment columns, see [Section 17.6.1.6, “AUTO_INCREMENT
    Handling in InnoDB”](innodb-auto-increment-handling.html "17.6.1.6 AUTO_INCREMENT
    Handling in InnoDB").
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有关自增列的更多信息，请参阅[第 17.6.1.6 节，“AUTO_INCREMENT Handling in InnoDB”](innodb-auto-increment-handling.html
    "17.6.1.6 AUTO_INCREMENT Handling in InnoDB")。
- en: Although a table works correctly without defining a primary key, the primary
    key is involved with many aspects of performance and is a crucial design aspect
    for any large or frequently used table. It is recommended that you always specify
    a primary key in the [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE
    Statement") statement. If you create the table, load data, and then run [`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") to add a primary key
    later, that operation is much slower than defining the primary key when creating
    the table. For more information about primary keys, see [Section 17.6.2.1, “Clustered
    and Secondary Indexes”](innodb-index-types.html "17.6.2.1 Clustered and Secondary
    Indexes").
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然表在没有定义主键的情况下可以正常工作，但主键涉及到性能的许多方面，对于任何大型或经常使用的表来说，主键是一个关键的设计方面。建议您在[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句中始终指定主键。如果您创建表、加载数据，然后运行[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")以后添加主键，那么该操作比在创建表时定义主键要慢得多。有关主键的更多信息，请参阅[第
    17.6.2.1 节，“Clustered and Secondary Indexes”](innodb-index-types.html "17.6.2.1 Clustered
    and Secondary Indexes")。
- en: Viewing InnoDB Table Properties
  id: totrans-20
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 查看 InnoDB 表属性
- en: 'To view the properties of an `InnoDB` table, issue a [`SHOW TABLE STATUS`](show-table-status.html
    "15.7.7.38 SHOW TABLE STATUS Statement") statement:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`InnoDB`表的属性，请发出[`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW
    TABLE STATUS Statement")语句：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For information about [`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW
    TABLE STATUS Statement") output, see [Section 15.7.7.38, “SHOW TABLE STATUS Statement”](show-table-status.html
    "15.7.7.38 SHOW TABLE STATUS Statement").
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关于[`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW TABLE STATUS
    Statement")输出的信息，请参阅[第 15.7.7.38 节，“SHOW TABLE STATUS Statement”](show-table-status.html
    "15.7.7.38 SHOW TABLE STATUS Statement")。
- en: 'You can also access `InnoDB` table properties by querying the `InnoDB` Information
    Schema system tables:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过查询`InnoDB`信息模式系统表来访问`InnoDB`表属性：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For more information, see [Section 17.15.3, “InnoDB INFORMATION_SCHEMA Schema
    Object Tables”](innodb-information-schema-system-tables.html "17.15.3 InnoDB INFORMATION_SCHEMA
    Schema Object Tables").
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[第 17.15.3 节，“InnoDB INFORMATION_SCHEMA Schema Object Tables”](innodb-information-schema-system-tables.html
    "17.15.3 InnoDB INFORMATION_SCHEMA Schema Object Tables")。
