- en: 1\. Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 概述
- en: 原文：[https://sqlite.com/compile.html](https://sqlite.com/compile.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/compile.html](https://sqlite.com/compile.html)
- en: For most purposes, SQLite can be built just fine using the default compilation
    options. However, if required, the compile-time options documented below can be
    used to [omit SQLite features](#omitfeatures) (resulting in a [smaller compiled
    library size](footprint.html)) or to change the [default values](#defaults) of
    some parameters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数情况，SQLite 可以使用默认的编译选项正常构建。然而，如果需要，下文记录的编译时选项可以用来[省略 SQLite 的功能](#omitfeatures)（导致[编译后库的大小更小](footprint.html)），或者修改一些参数的[默认值](#defaults)。
- en: Every effort has been made to ensure that the various combinations of compilation
    options work harmoniously and produce a working library. Nevertheless, it is strongly
    recommended that the SQLite test-suite be executed to check for errors before
    using an SQLite library built with non-standard compilation options.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已尽一切努力确保各种编译选项的组合能和谐地工作并生成可用的库。然而，强烈建议在使用非标准编译选项构建的 SQLite 库之前，执行 SQLite 测试套件以检查错误。
- en: 2\. Recommended Compile-time Options
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 推荐的编译时选项
- en: The following compile-time options are recommended for applications that are
    able to use them, in order to minimized the number of CPU cycles and the bytes
    of memory used by SQLite. Not all of these compile-time options are usable by
    every application. For example, the SQLITE_THREADSAFE=0 option is only usable
    by applications that never access SQLite from more than one thread at a time.
    And the SQLITE_OMIT_PROGRESS_CALLBACK option is only usable by applications that
    do not use the [sqlite3_progress_handler()](c3ref/progress_handler.html) interface.
    And so forth.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐以下编译时选项给能够使用的应用程序，以减少 SQLite 使用的 CPU 循环数和内存字节数。并非每个应用程序都能使用所有这些编译时选项。例如，SQLITE_THREADSAFE=0
    选项只能被从不同时访问多个线程的应用程序使用。而 SQLITE_OMIT_PROGRESS_CALLBACK 选项只能被不使用 [sqlite3_progress_handler()](c3ref/progress_handler.html)
    接口的应用程序使用，等等。
- en: It is impossible to test every possible combination of compile-time options
    for SQLite. But the following set of compile-time options is one configuration
    that is always fully tested.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能测试每种 SQLite 的编译时选项组合。但下面的一组编译时选项是始终经过全面测试的配置之一。
- en: '**[SQLITE_DQS=0](compile.html#dqs)**. This setting disables the [double-quoted
    string literal](quirks.html#dblquote) misfeature.'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_DQS=0](compile.html#dqs)**。此设置禁用了[双引号字符串字面量](quirks.html#dblquote)的不良特性。'
- en: '**[SQLITE_THREADSAFE=0](compile.html#threadsafe)**. Setting -DSQLITE_THREADSAFE=0
    causes all of the mutex and thread-safety logic in SQLite to be omitted. This
    is the single compile-time option causes SQLite to run about 2% faster and also
    reduces the size of the library by about 2%. But the downside is that using the
    compile-time option means that SQLite can never be used by more than a single
    thread at a time, even if each thread has its own database connection.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_THREADSAFE=0](compile.html#threadsafe)**. 设置 -DSQLITE_THREADSAFE=0
    导致 SQLite 中的所有互斥和线程安全逻辑被省略。这个单一的编译时选项使 SQLite 运行速度提高约 2%，同时还减小了库的大小约 2%。但缺点是，使用这个编译时选项意味着
    SQLite 永远不能被多个线程同时使用，即使每个线程都有自己的数据库连接。'
- en: '**[SQLITE_DEFAULT_MEMSTATUS=0](compile.html#default_memstatus)**. This setting
    causes the [sqlite3_status()](c3ref/status.html) interfaces that track memory
    usage to be disabled. This helps the [sqlite3_malloc()](c3ref/free.html) routines
    run much faster, and since SQLite uses [sqlite3_malloc()](c3ref/free.html) internally,
    this helps to make the entire library faster.'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_DEFAULT_MEMSTATUS=0](compile.html#default_memstatus)**. 这个设置导致禁用跟踪内存使用的
    [sqlite3_status()](c3ref/status.html) 接口。这有助于使 [sqlite3_malloc()](c3ref/free.html)
    例程运行更快，而由于 SQLite 在内部使用 [sqlite3_malloc()](c3ref/free.html)，整个库的速度也会更快。'
- en: '**[SQLITE_DEFAULT_WAL_SYNCHRONOUS=1](compile.html#default_wal_synchronous)**.
    For maximum database safety following a power loss, the setting of [PRAGMA synchronous=FULL](pragma.html#pragma_synchronous)
    is recommended. However, in [WAL mode](wal.html), complete database integrity
    is guaranteed with [PRAGMA synchronous=NORMAL](pragma.html#pragma_synchronous).
    With [PRAGMA synchronous=NORMAL](pragma.html#pragma_synchronous) in [WAL mode](wal.html),
    recent changes to the database might be rolled back by a power loss, but the database
    will not be corrupted. Furthermore, transaction commit is much faster in WAL mode
    using synchronous=NORMAL than with the default synchronous=FULL. For these reasons,
    it is recommended that the synchronous setting be changed from FULL to NORMAL
    when switching to WAL mode. This compile-time option will accomplish that.'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_DEFAULT_WAL_SYNCHRONOUS=1](compile.html#default_wal_synchronous)**.
    为了在断电后最大限度地保证数据库安全，建议设置 [PRAGMA synchronous=FULL](pragma.html#pragma_synchronous)。然而，在
    [WAL 模式](wal.html) 下，使用 [PRAGMA synchronous=NORMAL](pragma.html#pragma_synchronous)
    可以保证完整的数据库一致性。在 [WAL 模式](wal.html) 下使用 [PRAGMA synchronous=NORMAL](pragma.html#pragma_synchronous)，数据库的最近更改可能会在断电后被回滚，但不会损坏数据库。此外，在
    WAL 模式下，使用 synchronous=NORMAL 比默认的 synchronous=FULL 提高了事务提交速度。因此，建议在切换到 WAL 模式时将
    synchronous 设置从 FULL 改为 NORMAL。这个编译时选项将实现这一目标。'
- en: '**[SQLITE_LIKE_DOESNT_MATCH_BLOBS](compile.html#like_doesnt_match_blobs)**.
    Historically, SQLite has allowed BLOB operands to the [LIKE](lang_expr.html#like)
    and [GLOB](lang_expr.html#glob) operators. But having a BLOB as an operand of
    [LIKE](lang_expr.html#like) or [GLOB](lang_expr.html#glob) complicates and slows
    the [LIKE optimization](optoverview.html#like_opt). When this option is set, it
    means that the LIKE and GLOB operators always return FALSE if either operand is
    a BLOB. That simplifies the implementation of the [LIKE optimization](optoverview.html#like_opt)
    and allows queries that use the [LIKE optimization](optoverview.html#like_opt)
    to run faster.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_LIKE_DOESNT_MATCH_BLOBS](compile.html#like_doesnt_match_blobs)**。历史上，SQLite
    允许 BLOB 作为 [LIKE](lang_expr.html#like) 和 [GLOB](lang_expr.html#glob) 操作符的操作数。但是，如果操作数之一是
    BLOB，将 BLOB 作为 [LIKE](lang_expr.html#like) 或 [GLOB](lang_expr.html#glob) 的操作数会使
    [LIKE 优化](optoverview.html#like_opt) 变得复杂且减慢速度。当设置此选项时，意味着如果任一操作数是 BLOB，LIKE 和
    GLOB 操作符始终返回 FALSE。这简化了 [LIKE 优化](optoverview.html#like_opt) 的实现，并允许使用 [LIKE 优化](optoverview.html#like_opt)
    的查询运行更快。'
- en: '**[SQLITE_MAX_EXPR_DEPTH=0](limits.html#max_expr_depth)**. Setting the maximum
    expression parse-tree depth to zero disables all checking of the expression parse-tree
    depth, which simplifies the code resulting in faster execution, and helps the
    parse tree to use less memory.'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_MAX_EXPR_DEPTH=0](limits.html#max_expr_depth)**。将最大表达式解析树深度设置为零会禁用对表达式解析树深度的所有检查，从而简化代码，提高执行速度，并减少解析树的内存使用。'
- en: '**[SQLITE_OMIT_DECLTYPE](compile.html#omit_decltype)**. By omitting the (seldom-needed)
    ability to return the declared type of columns from the result set of query, [prepared
    statements](c3ref/stmt.html) can be made to consume less memory.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_OMIT_DECLTYPE](compile.html#omit_decltype)**。通过省略从查询结果集的列返回声明类型（很少需要的能力），可以使
    [prepared statements](c3ref/stmt.html) 消耗的内存更少。'
- en: '**[SQLITE_OMIT_DEPRECATED](compile.html#omit_deprecated)**. Omitting deprecated
    interfaces and features will not help SQLite to run any faster. It will reduce
    the library footprint, however. And it is the right thing to do.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_OMIT_DEPRECATED](compile.html#omit_deprecated)**。省略弃用的接口和特性不会帮助 SQLite
    更快地运行。但是，它会减少库的占用空间，并且这是正确的做法。'
- en: '**[SQLITE_OMIT_PROGRESS_CALLBACK](compile.html#omit_progress_callback)**. The
    progress handler callback counter must be checked in the inner loop of the [bytecode
    engine](opcode.html). By omitting this interface, a single conditional is removed
    from the inner loop of the [bytecode engine](opcode.html), helping SQL statements
    to run slightly faster.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_OMIT_PROGRESS_CALLBACK](compile.html#omit_progress_callback)**。进度处理程序回调计数器必须在
    [bytecode engine](opcode.html) 的内部循环中进行检查。通过省略此接口，可以从 [bytecode engine](opcode.html)
    的内部循环中删除一个条件语句，从而帮助 SQL 语句运行稍快。'
- en: '**[SQLITE_OMIT_SHARED_CACHE](compile.html#omit_shared_cache)**. Omitting the
    possibility of using [shared cache](sharedcache.html) allows many conditionals
    in performance-critical sections of the code to be eliminated. This can give a
    noticeable improvement in performance.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_OMIT_SHARED_CACHE](compile.html#omit_shared_cache)**。省略使用 [shared
    cache](sharedcache.html) 的可能性允许在代码的性能关键部分消除许多条件分支。这可以显著提升性能。'
- en: '**[SQLITE_USE_ALLOCA](compile.html#use_alloca)**. Make use of alloca() for
    dynamically allocating temporary stack space for use within a single function,
    on systems that support alloca(). Without this option, temporary space is allocated
    from the heap.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_USE_ALLOCA](compile.html#use_alloca)**。在支持 alloca() 的系统上，利用 alloca()
    动态分配临时堆栈空间，用于单个函数内部的使用。如果不使用此选项，则临时空间从堆中分配。'
- en: '**[SQLITE_OMIT_AUTOINIT](compile.html#omit_autoinit)**. The SQLite library
    needs to be initialized using a call to [sqlite3_initialize()](c3ref/initialize.html)
    before certain interfaces are used. This initialization normally happens automatically
    the first time it is needed. However, with the SQLITE_OMIT_AUTOINIT option, the
    automatic initialization is omitted. This helps many API calls to run a little
    faster (since they do not have to check to see if initialization has already occurred
    and then run initialization if it has not previously been invoked) but it also
    means that the application must call [sqlite3_initialize()](c3ref/initialize.html)
    manually. If SQLite is compiled with -DSQLITE_OMIT_AUTOINIT and a routine like
    [sqlite3_malloc()](c3ref/free.html) or [sqlite3_vfs_find()](c3ref/vfs_find.html)
    or [sqlite3_open()](c3ref/open.html) is invoked without first calling [sqlite3_initialize()](c3ref/initialize.html),
    the likely result will be a segfault.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_OMIT_AUTOINIT](compile.html#omit_autoinit)**。SQLite 库需要在使用某些接口之前通过调用
    [sqlite3_initialize()](c3ref/initialize.html) 进行初始化。通常情况下，第一次需要时会自动进行初始化。然而，使用
    SQLITE_OMIT_AUTOINIT 选项时，自动初始化被省略。这使得许多 API 调用可以稍微快一些（因为它们不必检查初始化是否已经发生，如果尚未调用则运行初始化），但也意味着应用程序必须手动调用
    [sqlite3_initialize()](c3ref/initialize.html)。如果 SQLite 编译时使用了 -DSQLITE_OMIT_AUTOINIT，而在未先调用
    [sqlite3_initialize()](c3ref/initialize.html) 的情况下调用了像 [sqlite3_malloc()](c3ref/free.html)、[sqlite3_vfs_find()](c3ref/vfs_find.html)
    或 [sqlite3_open()](c3ref/open.html) 这样的例程，则可能导致段错误。'
- en: '**[SQLITE_STRICT_SUBTYPE=1](compile.html#strict_subtype)**. This option causes
    an error to be raised if an application defined function that does not have the
    [SQLITE_RESULT_SUBTYPE](c3ref/c_deterministic.html#sqliteresultsubtype) property
    invokes the [sqlite3_result_subtype()](c3ref/result_subtype.html) interface. The
    sqlite3_result_subtype() interface does not work reliably unless the function
    is registered with the SQLITE_RESULT_SUBTYPE property. This compile-time option
    is designed to bring this problem to the attention of developers early.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[SQLITE_STRICT_SUBTYPE=1](compile.html#strict_subtype)**. 这个选项会在应用程序定义的函数调用
    [sqlite3_result_subtype()](c3ref/result_subtype.html) 接口时，如果该函数没有设置 [SQLITE_RESULT_SUBTYPE](c3ref/c_deterministic.html#sqliteresultsubtype)
    属性，则会引发错误。但在注册了 SQLITE_RESULT_SUBTYPE 属性的函数中，sqlite3_result_subtype() 接口是可靠的。这个编译时选项旨在早期引起开发者对这个问题的关注。'
- en: When all of the recommended compile-time options above are used, the SQLite
    library will be approximately 3% smaller and use about 5% fewer CPU cycles. So
    these options do not make a huge difference. But in some design situations, every
    little bit helps.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用了上述所有推荐的编译时选项时，SQLite 库将减小约 3%，并且使用的 CPU 周期减少约 5%。因此，这些选项并不会带来巨大的差异。但在某些设计情况下，每一点帮助都很重要。
- en: Library-level configuration options, such as those listed above, may optionally
    be defined in a client-side header file. Defining SQLITE_CUSTOM_INCLUDE=myconfig.h
    (with no quotes) will cause sqlite3.c to include myconfig.h early on in the compilation
    process, enabling the client to customize the flags without having to explicitly
    pass all of them to the compiler.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 库级配置选项，例如上面列出的选项，可以选择地在客户端头文件中定义。定义 SQLITE_CUSTOM_INCLUDE=myconfig.h（不带引号）将导致
    sqlite3.c 在编译过程的早期包含 myconfig.h，使客户端能够自定义标志，而无需显式地将所有标志传递给编译器。
- en: 3\. Platform Configuration
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 平台配置
- en: '**_HAVE_SQLITE_CONFIG_H**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**_HAVE_SQLITE_CONFIG_H**'
- en: 'If the _HAVE_SQLITE_CONFIG_H macro is defined then the SQLite source code will
    attempt to #include a file named "sqlite_cfg.h". The "sqlite_cfg.h" file usually
    contains other configuration options, especially "HAVE_*INTERFACE*" type options
    generated by autoconf scripts. Note that this header is intended only for use
    for platform-level configuration, not library-level configuration. To set SQLite-level
    configuration flags in a custom header, define SQLITE_CUSTOM_INCLUDE=myconfig.h,
    as described in the previous section.'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '如果定义了 _HAVE_SQLITE_CONFIG_H 宏，那么 SQLite 源代码将尝试 #include 一个名为 "sqlite_cfg.h"
    的文件。通常情况下，"sqlite_cfg.h" 文件包含其他配置选项，特别是由 autoconf 脚本生成的 "HAVE_*INTERFACE*" 类型选项。请注意，此头文件仅用于平台级配置，而不是库级配置。要在自定义头文件中设置
    SQLite 级配置标志，请定义 SQLITE_CUSTOM_INCLUDE=myconfig.h，如前一节所述。'
- en: '**HAVE_FDATASYNC**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**HAVE_FDATASYNC**'
- en: If the HAVE_FDATASYNC compile-time option is true, then the default [VFS](vfs.html)
    for unix systems will attempt to use fdatasync() instead of fsync() where appropriate.
    If this flag is missing or false, then fsync() is always used.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `HAVE_FDATASYNC` 编译时选项为真，则 Unix 系统上默认的 [VFS](vfs.html) 尝试在适当的情况下使用 `fdatasync()`
    而不是 `fsync()`。如果此标志缺失或为假，则始终使用 `fsync()`。
- en: '**HAVE_GMTIME_R**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**HAVE_GMTIME_R**'
- en: If the HAVE_GMTIME_R option is true and if [SQLITE_OMIT_DATETIME_FUNCS](compile.html#omit_datetime_funcs)
    is true, then the CURRENT_TIME, CURRENT_DATE, and CURRENT_TIMESTAMP keywords will
    use the threadsafe "gmtime_r()" interface rather than "gmtime()". In the usual
    case where [SQLITE_OMIT_DATETIME_FUNCS](compile.html#omit_datetime_funcs) is not
    defined or is false, then the built-in [date and time functions](lang_datefunc.html)
    are used to implement the CURRENT_TIME, CURRENT_DATE, and CURRENT_TIMESTAMP keywords
    and neither gmtime_r() nor gmtime() is ever called.
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `HAVE_GMTIME_R` 选项为真，并且如果 [SQLITE_OMIT_DATETIME_FUNCS](compile.html#omit_datetime_funcs)
    为真，则 `CURRENT_TIME`、`CURRENT_DATE` 和 `CURRENT_TIMESTAMP` 关键字将使用线程安全的 `gmtime_r()`
    接口而不是 `gmtime()`。在通常情况下，如果未定义或为假，则使用内置的 [日期和时间函数](lang_datefunc.html) 来实现 `CURRENT_TIME`、`CURRENT_DATE`
    和 `CURRENT_TIMESTAMP` 关键字，不会调用 `gmtime_r()` 或 `gmtime()`。
- en: '**HAVE_ISNAN**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**HAVE_ISNAN**'
- en: If the HAVE_ISNAN option is true, then SQLite invokes the system library isnan()
    function to determine if a double-precision floating point value is a NaN. If
    HAVE_ISNAN is undefined or false, then SQLite substitutes its own home-grown implementation
    of isnan().
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `HAVE_ISNAN` 选项为真，则 SQLite 调用系统库中的 `isnan()` 函数来判断双精度浮点数是否为 NaN。如果 `HAVE_ISNAN`
    未定义或为假，则 SQLite 使用自己的实现来替代 `isnan()`。
- en: '**HAVE_LOCALTIME_R**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**HAVE_LOCALTIME_R**'
- en: If the HAVE_LOCALTIME_R option is true, then SQLite uses the threadsafe localtime_r()
    library routine instead of localtime() to help implement the [localtime modifier](lang_datefunc.html#localtime)
    to the built-in [date and time functions](lang_datefunc.html).
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `HAVE_LOCALTIME_R` 选项为真，则 SQLite 使用线程安全的 `localtime_r()` 库例程而不是 `localtime()`
    来帮助实现内置的 [本地时间修饰符](lang_datefunc.html#localtime) 到 [日期和时间函数](lang_datefunc.html)
    的实现。
- en: '**HAVE_LOCALTIME_S**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**HAVE_LOCALTIME_S**'
- en: If the HAVE_LOCALTIME_S option is true, then SQLite uses the threadsafe localtime_s()
    library routine instead of localtime() to help implement the [localtime modifier](lang_datefunc.html#localtime)
    to the built-in [date and time functions](lang_datefunc.html).
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `HAVE_LOCALTIME_S` 选项为真，则 SQLite 使用线程安全的 `localtime_s()` 库例程而不是 `localtime()`
    来帮助实现内置的 [本地时间修饰符](lang_datefunc.html#localtime) 到 [日期和时间函数](lang_datefunc.html)
    的实现。
- en: '**HAVE_MALLOC_USABLE_SIZE**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**HAVE_MALLOC_USABLE_SIZE**'
- en: If the HAVE_MALLOC_USABLE_SIZE option is true, then SQLite tries uses the malloc_usable_size()
    interface to find the size of a memory allocation obtained from the standard-library
    malloc() or realloc() routines. This option is only applicable if the standard-library
    malloc() is used. On Apple systems, "zone malloc" is used instead, and so this
    option is not applicable. And, of course, if the application supplies its own
    malloc implementation using [SQLITE_CONFIG_MALLOC](c3ref/c_config_covering_index_scan.html#sqliteconfigmalloc)
    then this option has no effect.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `HAVE_MALLOC_USABLE_SIZE` 选项为真，则 SQLite 尝试使用 malloc_usable_size() 接口来找到从标准库
    malloc() 或 realloc() 函数获取的内存分配的大小。此选项仅适用于使用标准库 malloc() 的情况。在 Apple 系统上，将使用 "zone
    malloc"，因此此选项不适用。当然，如果应用程序使用 [SQLITE_CONFIG_MALLOC](c3ref/c_config_covering_index_scan.html#sqliteconfigmalloc)
    提供自己的 malloc 实现，则此选项无效。
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If the HAVE_MALLOC_USABLE_SIZE option is omitted or is false, then SQLite uses
    a wrapper around system malloc() and realloc() that enlarges each allocation by
    8 bytes and writes the size of the allocation in the initial 8 bytes, and then
    SQLite also implements its own home-grown version of malloc_usable_size() that
    consults that 8-byte prefix to find the allocation size. This approach works but
    it is suboptimal. Applications are encouraged to use HAVE_MALLOC_USABLE_SIZE whenever
    possible.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `HAVE_MALLOC_USABLE_SIZE` 选项被省略或为假，则 SQLite 使用系统 malloc() 和 realloc() 的包装器，每次分配都会增加
    8 个字节，并在初始 8 个字节中写入分配的大小，然后 SQLite 还实现了自己的 malloc_usable_size() 版本，该版本查询这个 8 字节的前缀以获取分配的大小。这种方法可以工作，但不是最优的。建议应用尽可能使用
    `HAVE_MALLOC_USABLE_SIZE`。
- en: '**HAVE_STRCHRNUL**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**HAVE_STRCHRNUL**'
- en: If the HAVE_STRCHRNUL option is true, then SQLite uses the strchrnul() library
    function. If this option is missing or false, then SQLite substitutes its own
    home-grown implementation of strchrnul().
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `HAVE_STRCHRNUL` 选项为真，则 SQLite 使用 `strchrnul()` 库函数。如果该选项不存在或为假，则 SQLite
    使用自己的 strchrnul() 实现。
- en: '**HAVE_UTIME**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**HAVE_UTIME**'
- en: If the HAVE_UTIME option is true, then the built-in but non-standard "unix-dotfile"
    VFS will use the utime() system call, instead of utimes(), to set the last access
    time on the lock file.
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 `HAVE_UTIME` 选项为真，则内置但非标准的 "unix-dotfile" VFS 将使用 utime() 系统调用，而不是 utimes()，来设置锁文件的最后访问时间。
- en: '**SQLITE_BYTEORDER=*(0|1234|4321)***'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_BYTEORDER=*(0|1234|4321)***'
- en: 'SQLite needs to know if the native byte order of the target CPU is big-endian
    or little-ending. The SQLITE_BYTEORDER preprocessor is set to 4321 for big-endian
    machines and 1234 for little-endian machines, or it can be 0 to mean that the
    byte order must be determined at run-time. There are #ifdefs in the code that
    set SQLITE_BYTEORDER automatically for all common platforms and compilers. However,
    it may be advantageous to set SQLITE_BYTEORDER appropriately when compiling SQLite
    for obscure targets. If the target byte order cannot be determined at compile-time,
    then SQLite falls back to doing run-time checks, which always work, though with
    a small performance penalty.'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'SQLite 需要知道目标 CPU 的本地字节顺序是大端还是小端。如果目标字节顺序在运行时不能确定，则 SQLITE_BYTEORDER 预处理器设置为
    0；对于大端机器设置为 4321，对于小端机器设置为 1234。代码中有 #ifdef 用于为所有常见平台和编译器自动设置 SQLITE_BYTEORDER。然而，在为晦涩目标编译
    SQLite 时，适当设置 SQLITE_BYTEORDER 可能是有利的。如果目标字节顺序无法在编译时确定，则 SQLite 会退回到执行时检查，这始终有效，尽管会有小的性能损失。'
- en: 4\. Options To Set Default Parameter Values
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 选项设置默认参数值
- en: '**SQLITE_DEFAULT_AUTOMATIC_INDEX=*<0 or 1>***'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_AUTOMATIC_INDEX=*<0 或 1>***'
- en: This macro determines the initial setting for [PRAGMA automatic_index](pragma.html#pragma_automatic_index)
    for newly opened [database connections](c3ref/sqlite3.html). For all versions
    of SQLite through 3.7.17, automatic indices are normally enabled for new database
    connections if this compile-time option is omitted. However, that might change
    in future releases of SQLite.
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏确定了对于新打开的[数据库连接](c3ref/sqlite3.html)，[PRAGMA automatic_index](pragma.html#pragma_automatic_index)
    的初始设置。在所有 SQLite 版本中，通过 3.7.17，如果忽略了此编译时选项，新的数据库连接通常会启用自动索引。然而，这可能会在未来的 SQLite
    发布版本中改变。
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'See also: [SQLITE_OMIT_AUTOMATIC_INDEX](compile.html#omit_automatic_index)'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另见：[SQLITE_OMIT_AUTOMATIC_INDEX](compile.html#omit_automatic_index)
- en: '**SQLITE_DEFAULT_AUTOVACUUM=*<0 or 1 or 2>***'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_AUTOVACUUM=*<0 或 1 或 2>***'
- en: This macro determines if SQLite creates databases with the [auto_vacuum](pragma.html#pragma_auto_vacuum)
    flag set by default to OFF (0), FULL (1), or INCREMENTAL (2). The default value
    is 0 meaning that databases are created with auto-vacuum turned off. In any case
    the compile-time default may be overridden by the [PRAGMA auto_vacuum](pragma.html#pragma_auto_vacuum)
    command.
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏确定了 SQLite 是否默认创建数据库时将[auto_vacuum](pragma.html#pragma_auto_vacuum) 标志设置为
    OFF (0)、FULL (1) 或 INCREMENTAL (2)。默认值为 0，意味着创建数据库时自动清理被关闭。在任何情况下，编译时的默认值可能会被[PRAGMA
    auto_vacuum](pragma.html#pragma_auto_vacuum) 命令覆盖。
- en: '**SQLITE_DEFAULT_CACHE_SIZE=*<N>***'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_CACHE_SIZE=*<N>***'
- en: This macro sets the default maximum size of the page-cache for each attached
    database. A positive value means that the limit is N page. If N is negative that
    means to limit the cache size to -N*1024 bytes. The suggested maximum cache size
    can be overridden by the [PRAGMA cache_size](pragma.html#pragma_cache_size) command.
    The default value is -2000, which translates into a maximum of 2048000 bytes per
    cache.
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个宏设置了每个附加数据库的默认页面缓存的最大大小。正数表示限制为N页。如果N为负数，则表示将缓存大小限制为-N*1024字节。建议的最大缓存大小可以通过[PRAGMA
    cache_size](pragma.html#pragma_cache_size)命令覆盖。默认值为-2000，这意味着每个缓存最大为2048000字节。
- en: '**SQLITE_DEFAULT_FILE_FORMAT=*<1 or 4>***'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_FILE_FORMAT=*<1或4>***'
- en: The default [schema format number](fileformat2.html#schemaformat) used by SQLite
    when creating new database files is set by this macro. The schema formats are
    all very similar. The difference between formats 1 and 4 is that format 4 understands
    [descending indices](lang_createindex.html#descidx) and has a tighter encoding
    for boolean values.
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite在创建新数据库文件时使用的默认[模式格式编号](fileformat2.html#schemaformat)由此宏设置。这些模式格式都非常相似。格式1和格式4之间的区别在于，格式4理解[降序索引](lang_createindex.html#descidx)，并且对布尔值有更紧凑的编码。
- en: ''
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: All versions of SQLite since 3.3.0 (2006-01-10) can read and write any schema
    format between 1 and 4\. But older versions of SQLite might not be able to read
    formats greater than 1\. So that older versions of SQLite will be able to read
    and write database files created by newer versions of SQLite, the default schema
    format was set to 1 for SQLite versions through 3.7.9 (2011-11-01). Beginning
    with [version 3.7.10](releaselog/3_7_10.html) (2012-01-16), the default schema
    format is 4.
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自SQLite 3.3.0（2006-01-10）以来的所有版本都能读取和写入1到4之间的任何模式格式。但是旧版本的SQLite可能无法读取大于1的格式。为了确保旧版本的SQLite能够读取和写入由新版本的SQLite创建的数据库文件，默认模式格式在SQLite
    3.7.9（2011-11-01）之前的版本中设为1。从[版本3.7.10](releaselog/3_7_10.html)（2012-01-16）开始，默认的模式格式为4。
- en: ''
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The schema format number for a new database can be set at runtime using the
    [PRAGMA legacy_file_format](pragma.html#pragma_legacy_file_format) command.
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可以使用[PRAGMA legacy_file_format](pragma.html#pragma_legacy_file_format)命令在运行时设置新数据库的模式格式编号。
- en: '**SQLITE_DEFAULT_FILE_PERMISSIONS=*N***'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_FILE_PERMISSIONS=*N***'
- en: The default numeric file permissions for newly created database files under
    unix. If not specified, the default is 0644 which means that the files is globally
    readable but only writable by the creator.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在Unix下新创建的数据库文件的默认数字文件权限。如果未指定，则默认为0644，这意味着文件对全局可读，但只能由创建者可写。
- en: '**SQLITE_DEFAULT_FOREIGN_KEYS=*<0 or 1>***'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_FOREIGN_KEYS=*<0或1>***'
- en: This macro determines whether enforcement of [foreign key constraints](foreignkeys.html)
    is enabled or disabled by default for new database connections. Each database
    connection can always turn enforcement of foreign key constraints on and off and
    run-time using the [foreign_keys pragma](pragma.html#pragma_foreign_keys). Enforcement
    of foreign key constraints is normally off by default, but if this compile-time
    parameter is set to 1, enforcement of foreign key constraints will be on by default.
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏确定新数据库连接是否默认启用或禁用[外键约束](foreignkeys.html)的强制执行。每个数据库连接始终可以在运行时使用[foreign_keys
    pragma](pragma.html#pragma_foreign_keys)打开和关闭外键约束的强制执行。默认情况下，外键约束的强制执行通常是关闭的，但如果设置了这个编译时参数为1，则默认情况下外键约束的强制执行将打开。
- en: '**SQLITE_DEFAULT_MMAP_SIZE=*N***'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_MMAP_SIZE=*N***'
- en: This macro sets the default limit on the amount of memory that will be used
    for memory-mapped I/O for each open database file. If the *N* is zero, then memory
    mapped I/O is disabled by default. This compile-time limit and the [SQLITE_MAX_MMAP_SIZE](compile.html#max_mmap_size)
    can be modified at start-time using the [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MMAP_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize))
    call, or at run-time using the [mmap_size pragma](pragma.html#pragma_mmap_size).
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个宏设置了每个打开的数据库文件的内存映射I/O使用的默认限制。如果*N*为零，则默认情况下禁用内存映射I/O。这个编译时限制和[SQLITE_MAX_MMAP_SIZE](compile.html#max_mmap_size)可以在启动时通过[sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MMAP_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize))调用或在运行时使用[mmap_size
    pragma](pragma.html#pragma_mmap_size)进行修改。
- en: '**SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT=*<bytes>***'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT=*<bytes>***'
- en: This option sets the size limit on [rollback journal](lockingv3.html#rollback)
    files in [persistent journal mode](pragma.html#pragma_journal_mode) and [exclusive
    locking mode](pragma.html#pragma_locking_mode) and on the size of the write-ahead
    log file in [WAL mode](wal.html). When this compile-time option is omitted there
    is no upper bound on the size of the rollback journals or write-ahead logs. The
    journal file size limit can be changed at run-time using the [journal_size_limit
    pragma](pragma.html#pragma_journal_size_limit).
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项设置了在[持久日志模式](pragma.html#pragma_journal_mode)和[独占锁定模式](pragma.html#pragma_locking_mode)下的[回滚日志](lockingv3.html#rollback)文件以及在[WAL模式](wal.html)下写前日志文件的大小限制。当省略此编译时选项时，回滚日志或写前日志的大小没有上限。可以使用[journal_size_limit
    pragma](pragma.html#pragma_journal_size_limit)在运行时更改日志文件大小限制。
- en: '**SQLITE_DEFAULT_LOCKING_MODE=*<1 or 0>***'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_LOCKING_MODE=*<1 or 0>***'
- en: If set to 1, then the default [locking_mode](pragma.html#pragma_locking_mode)
    is set to EXCLUSIVE. If omitted or set to 0 then the default [locking_mode](pragma.html#pragma_locking_mode)
    is NORMAL.
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果设置为1，则默认的[locking_mode](pragma.html#pragma_locking_mode)为EXCLUSIVE。如果省略或设置为0，则默认的[locking_mode](pragma.html#pragma_locking_mode)为NORMAL。
- en: '**SQLITE_DEFAULT_LOOKASIDE=*SZ,N***'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_LOOKASIDE=*SZ,N***'
- en: Sets the default size of the [lookaside memory allocator](malloc.html#lookaside)
    memory pool to N entries of SZ bytes each. This setting can be modified at start-time
    using [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_LOOKASIDE](c3ref/c_config_covering_index_scan.html#sqliteconfiglookaside))
    and/or as each [database connection](c3ref/sqlite3.html) is opened using [sqlite3_db_config](c3ref/db_config.html)(db,
    [SQLITE_DBCONFIG_LOOKASIDE](c3ref/c_dbconfig_defensive.html#sqlitedbconfiglookaside)).
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 设置[lookaside内存分配器](malloc.html#lookaside)的默认内存池大小为每个 SZ 字节的 N 个条目。可以使用[sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_LOOKASIDE](c3ref/c_config_covering_index_scan.html#sqliteconfiglookaside))在启动时和/或在每个[数据库连接](c3ref/sqlite3.html)打开时使用[sqlite3_db_config](c3ref/db_config.html)(db,
    [SQLITE_DBCONFIG_LOOKASIDE](c3ref/c_dbconfig_defensive.html#sqlitedbconfiglookaside))进行修改。
- en: '**SQLITE_DEFAULT_MEMSTATUS=*<1 or 0>***'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_MEMSTATUS=*<1 or 0>***'
- en: This macro is used to determine whether or not the features enabled and disabled
    using the SQLITE_CONFIG_MEMSTATUS argument to [sqlite3_config()](c3ref/config.html)
    are available by default. The default value is 1 ([SQLITE_CONFIG_MEMSTATUS](c3ref/c_config_covering_index_scan.html#sqliteconfigmemstatus)
    related features enabled).
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏用于确定是否默认启用并禁用通过SQLITE_CONFIG_MEMSTATUS参数传递给[sqlite3_config()](c3ref/config.html)的功能。默认值为1（启用了与[SQLITE_CONFIG_MEMSTATUS](c3ref/c_config_covering_index_scan.html#sqliteconfigmemstatus)相关的功能）。
- en: ''
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [sqlite3_memory_used()](c3ref/memory_highwater.html) and [sqlite3_memory_highwater()](c3ref/memory_highwater.html)
    interfaces, the [sqlite3_status64](c3ref/status.html)([SQLITE_STATUS_MEMORY_USED](c3ref/c_status_malloc_count.html#sqlitestatusmemoryused))
    interface, and the [SQLITE_MAX_MEMORY](compile.html#max_memory) compile-time option
    are all non-functional when memory usage tracking is disabled.
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当内存使用跟踪被禁用时，[sqlite3_memory_used()](c3ref/memory_highwater.html)和[sqlite3_memory_highwater()](c3ref/memory_highwater.html)接口，[sqlite3_status64](c3ref/status.html)([SQLITE_STATUS_MEMORY_USED](c3ref/c_status_malloc_count.html#sqlitestatusmemoryused))接口以及[SQLITE_MAX_MEMORY](compile.html#max_memory)编译时选项都不可用。
- en: '**SQLITE_DEFAULT_PCACHE_INITSZ=*N***'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_PCACHE_INITSZ=*N***'
- en: This macro determines the number of pages initially allocated by the page cache
    module when [SQLITE_CONFIG_PAGECACHE](c3ref/c_config_covering_index_scan.html#sqliteconfigpagecache)
    configuration option is not use and memory for the page cache is obtained from
    [sqlite3_malloc()](c3ref/free.html) instead. The number of pages set by this macro
    are allocated in a single allocation, which reduces the load on the memory allocator.
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当[SQLITE_CONFIG_PAGECACHE](c3ref/c_config_covering_index_scan.html#sqliteconfigpagecache)配置选项未使用且页面缓存的内存来自[sqlite3_malloc()](c3ref/free.html)时，此宏确定页面缓存模块最初分配的页面数。此宏设置的页面数在单个分配中分配，从而减少了内存分配器的负载。
- en: '**SQLITE_DEFAULT_PAGE_SIZE=*<bytes>***'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_PAGE_SIZE=*<bytes>***'
- en: This macro is used to set the default page-size used when a database is created.
    The value assigned must be a power of 2\. The default value is 4096\. The compile-time
    default may be overridden at runtime by the [PRAGMA page_size](pragma.html#pragma_page_size)
    command.
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏用于设置创建数据库时使用的默认页面大小。分配的值必须是2的幂。默认值为 4096。编译时的默认值可以通过 [PRAGMA page_size](pragma.html#pragma_page_size)
    命令在运行时进行覆盖。
- en: '**SQLITE_DEFAULT_SYNCHRONOUS=*<0-3>***'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_SYNCHRONOUS=*<0-3>***'
- en: This macro determines the default value of the [PRAGMA synchronous](pragma.html#pragma_synchronous)
    setting. If not overridden at compile-time, the default setting is 2 (FULL).
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏确定了 [PRAGMA synchronous](pragma.html#pragma_synchronous) 设置的默认值。如果在编译时未被覆盖，则默认设置为
    2（FULL）。
- en: '**SQLITE_DEFAULT_WAL_SYNCHRONOUS=*<0-3>***'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_WAL_SYNCHRONOUS=*<0-3>***'
- en: This macro determines the default value of the [PRAGMA synchronous](pragma.html#pragma_synchronous)
    setting for database files that open in [WAL mode](wal.html). If not overridden
    at compile-time, this value is the same as [SQLITE_DEFAULT_SYNCHRONOUS](compile.html#default_synchronous).
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏确定在 [WAL 模式](wal.html) 下打开的数据库文件的 [PRAGMA synchronous](pragma.html#pragma_synchronous)
    设置的默认值。如果在编译时未被覆盖，则此值与 [SQLITE_DEFAULT_SYNCHRONOUS](compile.html#default_synchronous)
    相同。
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If SQLITE_DEFAULT_WAL_SYNCHRONOUS differs from SQLITE_DEFAULT_SYNCHRONOUS, and
    if the application has not modified the synchronous setting for the database file
    using the [PRAGMA synchronous](pragma.html#pragma_synchronous) statement, then
    the synchronous setting is changed to value defined by SQLITE_DEFAULT_WAL_SYNCHRONOUS
    when the database connection switches into WAL mode for the first time. If the
    SQLITE_DEFAULT_WAL_SYNCHRONOUS value is not overridden at compile-time, then it
    will always be the same as [SQLITE_DEFAULT_SYNCHRONOUS](compile.html#default_synchronous)
    and so no automatic synchronous setting changes will ever occur.
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 SQLITE_DEFAULT_WAL_SYNCHRONOUS 与 SQLITE_DEFAULT_SYNCHRONOUS 不同，并且应用程序未使用
    [PRAGMA synchronous](pragma.html#pragma_synchronous) 语句修改数据库文件的同步设置，那么当数据库连接首次切换到
    WAL 模式时，同步设置将会被改变为 SQLITE_DEFAULT_WAL_SYNCHRONOUS 定义的值。如果 SQLITE_DEFAULT_WAL_SYNCHRONOUS
    的值在编译时未被覆盖，则它将始终与 [SQLITE_DEFAULT_SYNCHRONOUS](compile.html#default_synchronous)
    相同，因此不会发生自动同步设置更改。
- en: '**SQLITE_DEFAULT_WAL_AUTOCHECKPOINT=*<pages>***'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_WAL_AUTOCHECKPOINT=*<pages>***'
- en: This macro sets the default page count for the [WAL](wal.html) [automatic checkpointing](wal.html#ckpt)
    feature. If unspecified, the default page count is 1000.
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏设置了 [WAL](wal.html) 自动检查点功能的默认页面计数。如果未指定，默认页面计数为 1000。
- en: '**SQLITE_DEFAULT_WORKER_THREADS=*N***'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEFAULT_WORKER_THREADS=*N***'
- en: This macro sets the default value for the [SQLITE_LIMIT_WORKER_THREADS](c3ref/c_limit_attached.html#sqlitelimitworkerthreads)
    parameter. The [SQLITE_LIMIT_WORKER_THREADS](c3ref/c_limit_attached.html#sqlitelimitworkerthreads)
    parameter sets the maximum number of auxiliary threads that a single [prepared
    statement](c3ref/stmt.html) will launch to assist it with a query. If not specified,
    the default maximum is 0. The value set here cannot be more than [SQLITE_MAX_WORKER_THREADS](compile.html#max_worker_threads).
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏设置了[SQLITE_LIMIT_WORKER_THREADS](c3ref/c_limit_attached.html#sqlitelimitworkerthreads)参数的默认值。
    [SQLITE_LIMIT_WORKER_THREADS](c3ref/c_limit_attached.html#sqlitelimitworkerthreads)参数设置了单个[预处理语句](c3ref/stmt.html)将启动的辅助线程的最大数量，以帮助其处理查询。如果未指定，默认最大值为0。此处设置的值不能超过[SQLITE_MAX_WORKER_THREADS](compile.html#max_worker_threads)。
- en: '**SQLITE_DQS=*N***'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DQS=*N***'
- en: This macro determines the default values for [SQLITE_DBCONFIG_DQS_DDL](c3ref/c_dbconfig_defensive.html#sqlitedbconfigdqsddl)
    and [SQLITE_DBCONFIG_DQS_DML](c3ref/c_dbconfig_defensive.html#sqlitedbconfigdqsdml),
    which in turn determine how SQLite handles each [double-quoted string literal](quirks.html#dblquote).
    The "DQS" name stands for "Double-Quoted String". The *N* argument should be an
    integer 0, 1, 2, or 3.
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏确定了[SQLITE_DBCONFIG_DQS_DDL](c3ref/c_dbconfig_defensive.html#sqlitedbconfigdqsddl)和[SQLITE_DBCONFIG_DQS_DML](c3ref/c_dbconfig_defensive.html#sqlitedbconfigdqsdml)的默认值，这些值进而决定了SQLite如何处理每个[双引号字符串字面量](quirks.html#dblquote)。
    "DQS"名称代表"双引号字符串"。 *N*参数应为整数0、1、2或3。
- en: ''
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| SQLITE_DQS | Double-Quoted Strings Allowed | Remarks |'
  id: totrans-93
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
  zh: '| SQLITE_DQS | 允许双引号字符串 | 备注 |'
- en: '| In DDL | In DML |'
  id: totrans-94
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
  zh: '| 在DDL中 | 在DML中 |'
- en: '| 3 | yes | yes | default |'
  id: totrans-95
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
  zh: '| 3 | 是 | 是 | 默认 |'
- en: '| 2 | yes | no |   |'
  id: totrans-96
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
  zh: '| 2 | 是 | 否 |   |'
- en: '| 1 | no | yes |   |'
  id: totrans-97
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
  zh: '| 1 | 否 | 是 |   |'
- en: '| 0 | no | no | recommended |'
  id: totrans-98
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
  zh: '| 0 | 否 | 否 | 推荐 |'
- en: ''
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The recommended setting is 0, meaning that double-quoted strings are disallowed
    in all contexts. However, the default setting is 3 for maximum compatibility with
    legacy applications.
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 推荐设置为0，表示在所有情况下都不允许双引号字符串。但是，默认设置为3，以最大兼容性支持旧应用程序。
- en: '**SQLITE_EXTRA_DURABLE**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_EXTRA_DURABLE**'
- en: The SQLITE_EXTRA_DURABLE compile-time option that used to cause the default
    [PRAGMA synchronous](pragma.html#pragma_synchronous) setting to be EXTRA, rather
    than FULL. This option is no longer supported. Use [SQLITE_DEFAULT_SYNCHRONOUS=3](compile.html#default_synchronous)
    instead.
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLITE_EXTRA_DURABLE编译时选项曾导致默认的[PRAGMA synchronous](pragma.html#pragma_synchronous)设置为EXTRA，而不是FULL。此选项已不再支持。请改用[SQLITE_DEFAULT_SYNCHRONOUS=3](compile.html#default_synchronous)。
- en: '**SQLITE_FTS3_MAX_EXPR_DEPTH=*N***'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_FTS3_MAX_EXPR_DEPTH=*N***'
- en: This macro sets the maximum depth of the search tree that corresponds to the
    right-hand side of the MATCH operator in an [FTS3](fts3.html) or [FTS4](fts3.html#fts4)
    full-text index. The full-text search uses a recursive algorithm, so the depth
    of the tree is limited to prevent using too much stack space. The default limit
    is 12\. This limit is sufficient for up to 4095 search terms on the right-hand
    side of the MATCH operator and it holds stack space usage to less than 2000 bytes.
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏设置搜索树的最大深度，该树对应于 [FTS3](fts3.html) 或 [FTS4](fts3.html#fts4) 全文索引中 MATCH 运算符右侧的内容。全文搜索使用递归算法，因此树的深度受限以防止使用过多的堆栈空间。默认限制为
    12。该限制对于 MATCH 运算符右侧多达 4095 个搜索项是足够的，并且保持堆栈空间使用低于 2000 字节。
- en: ''
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For ordinary FTS3/FTS4 queries, the search tree depth is approximately the base-2
    logarithm of the number of terms in the right-hand side of the MATCH operator.
    However, for [phrase queries](fts3.html#phrase) and [NEAR queries](fts3.html#near)
    the search tree depth is linear in the number of right-hand side terms. So the
    default depth limit of 12 is sufficient for up to 4095 ordinary terms on a MATCH,
    it is only sufficient for 11 or 12 phrase or NEAR terms. Even so, the default
    is more than enough for most application.
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于普通的 FTS3/FTS4 查询，搜索树的深度大约是 MATCH 运算符右侧项数目的以 2 为底的对数。然而，对于 [短语查询](fts3.html#phrase)
    和 [邻近查询](fts3.html#near)，搜索树的深度与右侧项的数目成线性关系。因此，12 的默认深度限制对于 MATCH 运算符右侧多达 4095
    个普通项是足够的，但对于 11 或 12 个短语或邻近项来说则仅足够。即便如此，默认值对大多数应用程序来说已经完全足够。
- en: '**SQLITE_JSON_MAX_DEPTH=*N***'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_JSON_MAX_DEPTH=*N***'
- en: This macro sets the maximum nesting depth for JSON objects and arrays. The default
    value is 1000.
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏设置 JSON 对象和数组的最大嵌套深度。默认值为 1000。
- en: ''
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [JSON SQL functions](json1.html) use a [recursive decent parser](https://en.wikipedia.org/wiki/Recursive_descent_parser).
    This means that deeply nested JSON might require a lot of stack space to parse.
    On systems with limited stack space, SQLite can be compiled with a greatly reduced
    maximum JSON nesting depth to avoid the possibility of a stack overflow, even
    from hostile inputs. A value of 10 or 20 is normally sufficient even for the most
    complex real-world JSON.
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[JSON SQL 函数](json1.html) 使用 [递归下降解析器](https://en.wikipedia.org/wiki/Recursive_descent_parser)。这意味着深度嵌套的
    JSON 可能需要大量堆栈空间来解析。在堆栈空间有限的系统上，SQLite 可以编译为具有大大减少的最大 JSON 嵌套深度，以避免可能的堆栈溢出，即使是来自恶意输入。通常情况下，10
    或 20 的值即足够处理最复杂的真实世界 JSON 数据。'
- en: '**SQLITE_LIKE_DOESNT_MATCH_BLOBS**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_LIKE_DOESNT_MATCH_BLOBS**'
- en: This compile-time option causes the [LIKE](lang_expr.html#like) operator to
    always return False if either operand is a BLOB. The default behavior of [LIKE](lang_expr.html#like)
    is that BLOB operands are cast to TEXT before the comparison is done.
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此编译时选项会导致 [LIKE](lang_expr.html#like) 操作符在其中一个操作数为 BLOB 时始终返回 False。[LIKE](lang_expr.html#like)
    的默认行为是在比较之前将 BLOB 操作数强制转换为 TEXT。
- en: ''
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This compile-time option makes SQLite run more efficiently when processing queries
    that use the [LIKE](lang_expr.html#like) operator, at the expense of breaking
    backwards compatibility. However, the backwards compatibility break may be only
    a technicality. There was a long-standing bug in the [LIKE](lang_expr.html#like)
    processing logic (see [https://www.sqlite.org/src/info/05f43be8fdda9f](https://www.sqlite.org/src/info/05f43be8fdda9f))
    that caused it to misbehavior for BLOB operands and nobody observed that bug in
    nearly 10 years of active use. So for more users, it is probably safe to enable
    this compile-time option and thereby save a little CPU time on LIKE queries.
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此编译时选项使得 SQLite 在处理使用 [LIKE](lang_expr.html#like) 操作符的查询时更加高效，但会牺牲向后兼容性。然而，这种向后兼容性的破坏可能仅仅是一个技术细节。在
    [LIKE](lang_expr.html#like) 处理逻辑中长期存在一个 bug（参见 [https://www.sqlite.org/src/info/05f43be8fdda9f](https://www.sqlite.org/src/info/05f43be8fdda9f)），导致对
    BLOB 操作数的处理不正确，并且在近 10 年的使用中没有人注意到这个 bug。因此，对于大多数用户来说，启用此编译时选项可能是安全的，并且能够节省一点
    CPU 时间在 LIKE 查询上。
- en: ''
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This compile-time option affects the SQL [LIKE](lang_expr.html#like) operator
    only and has no impact on the [sqlite3_strlike()](c3ref/strlike.html) C-language
    interface.
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此编译时选项仅影响 SQL [LIKE](lang_expr.html#like) 操作符，并且不会影响 [sqlite3_strlike()](c3ref/strlike.html)
    的 C 语言接口。
- en: '**SQLITE_MAX_MEMORY=*N***'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_MAX_MEMORY=*N***'
- en: This option limits the total amount of memory that SQLite will request from
    malloc() to *N* bytes. Any attempt by SQLite to allocate new memory that would
    cause the sum of all allocations held by SQLite to exceed *N* bytes will result
    in an out-of-memory error. This is a hard upper limit. See also the [sqlite3_soft_heap_limit()](c3ref/soft_heap_limit.html)
    interface.
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项限制了 SQLite 将从 malloc() 请求的总内存量为 *N* 字节。如果 SQLite 尝试分配新内存，使得 SQLite 持有的所有分配的总和超过
    *N* 字节，将导致内存不足错误。这是一个硬上限。另请参阅 [sqlite3_soft_heap_limit()](c3ref/soft_heap_limit.html)
    接口。
- en: ''
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This option is a limit on the *total* amount of memory allocated. See the [SQLITE_MAX_ALLOCATION_SIZE](compile.html#max_allocation_size)
    option for a limitation on the amount of memory allowed in any single memory allocation.
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项是 *总* 分配内存量的限制。参见 [SQLITE_MAX_ALLOCATION_SIZE](compile.html#max_allocation_size)
    选项，用于限制任何单个内存分配允许的内存量。
- en: ''
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This limit is only functional if memory usage statistics are available via the
    [sqlite3_memory_used()](c3ref/memory_highwater.html) and [sqlite3_status64](c3ref/status.html)([SQLITE_STATUS_MEMORY_USED](c3ref/c_status_malloc_count.html#sqlitestatusmemoryused))
    interfaces. Without that memory usage information, SQLite has no way of knowing
    when it is about to go over the limit, and thus is unable to prevent the excess
    memory allocation. Memory usage tracking is turned on by default, but can be disabled
    at compile-time using the [SQLITE_DEFAULT_MEMSTATUS](compile.html#default_memstatus)
    option, or at start-time using [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MEMSTATUS](c3ref/c_config_covering_index_scan.html#sqliteconfigmemstatus)).
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 只有在通过[sqlite3_memory_used()](c3ref/memory_highwater.html)和[sqlite3_status64](c3ref/status.html)([SQLITE_STATUS_MEMORY_USED](c3ref/c_status_malloc_count.html#sqlitestatusmemoryused))接口可用的内存使用统计信息时，此限制才能发挥作用。如果没有该内存使用信息，SQLite
    就无法知道何时即将超过限制，从而无法阻止过度的内存分配。默认情况下，内存使用跟踪已打开，但可以在编译时使用[SQLITE_DEFAULT_MEMSTATUS](compile.html#default_memstatus)选项或在启动时使用[sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MEMSTATUS](c3ref/c_config_covering_index_scan.html#sqliteconfigmemstatus))来禁用。
- en: '**SQLITE_MAX_MMAP_SIZE=*N***'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_MAX_MMAP_SIZE=*N***'
- en: This macro sets a hard upper bound on the amount of address space that can be
    used by any single database for memory-mapped I/O. Setting this value to 0 completely
    disables memory-mapped I/O and causes logic associated with memory-mapped I/O
    to be omitted from the build. This option does change the default memory-mapped
    I/O address space size (set by [SQLITE_DEFAULT_MMAP_SIZE](compile.html#default_mmap_size)
    or sqlite3_config([SQLITE_CONFIG_MMAP_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize))
    or the run-time memory-mapped I/O address space size (set by sqlite3_file_control([SQLITE_FCNTL_MMAP_SIZE](c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntlmmapsize))
    or [PRAGMA mmap_size](pragma.html#pragma_mmap_size)) as long as those other settings
    are less than the maximum value defined here.
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏设置了对内存映射I/O使用的地址空间的硬性上限。将此值设置为0将完全禁用内存映射I/O，并导致与内存映射I/O相关的逻辑在构建过程中被省略。只要其他设置的值小于此处定义的最大值，此选项就不会改变默认的内存映射I/O地址空间大小（由[SQLITE_DEFAULT_MMAP_SIZE](compile.html#default_mmap_size)或sqlite3_config([SQLITE_CONFIG_MMAP_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize))设置）或运行时的内存映射I/O地址空间大小（由sqlite3_file_control([SQLITE_FCNTL_MMAP_SIZE](c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntlmmapsize))或[PRAGMA
    mmap_size](pragma.html#pragma_mmap_size))。
- en: '**SQLITE_MAX_SCHEMA_RETRY=*N***'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_MAX_SCHEMA_RETRY=*N***'
- en: Whenever the database schema changes, prepared statements are automatically
    reprepared to accommodate the new schema. There is a race condition here in that
    if one thread is constantly changing the schema, another thread might spin on
    reparses and repreparations of a prepared statement and never get any real work
    done. This parameter prevents an infinite loop by forcing the spinning thread
    to give up after a fixed number of attempts at recompiling the prepared statement.
    The default setting is 50 which is more than adequate for most applications.
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每当数据库模式发生变化时，预编译语句会自动重新编译以适应新模式。这里存在竞争条件，如果一个线程不断更改模式，另一个线程可能会在预编译和重新编译预编译语句上旋转，而无法完成任何真正的工作。这个参数通过强制旋转线程在尝试重新编译预编译语句的固定次数后放弃，防止了无限循环。默认设置为50，对大多数应用程序来说完全足够。
- en: '**SQLITE_MAX_WORKER_THREADS=*N***'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_MAX_WORKER_THREADS=*N***'
- en: Set an upper bound on the [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_WORKER_THREADS](c3ref/c_limit_attached.html#sqlitelimitworkerthreads),N)
    setting that determines the maximum number of auxiliary threads that a single
    [prepared statement](c3ref/stmt.html) will use to aid with CPU-intensive computations
    (mostly sorting). See also the [SQLITE_DEFAULT_WORKER_THREADS](compile.html#default_worker_threads)
    options.
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 设置一个上限，用于限制单个[预编译语句](c3ref/stmt.html)在CPU密集型计算（主要是排序）中使用的最大辅助线程数，该设置由[sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_WORKER_THREADS](c3ref/c_limit_attached.html#sqlitelimitworkerthreads),N)确定。还请参阅[SQLITE_DEFAULT_WORKER_THREADS](compile.html#default_worker_threads)选项。
- en: '**SQLITE_MEMDB_DEFAULT_MAXSIZE=*N***'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_MEMDB_DEFAULT_MAXSIZE=*N***'
- en: Set the default size limit (in bytes) for in-memory databases created using
    [sqlite3_deserialize()](c3ref/deserialize.html). This is just the default. The
    limit can be changed at start-time using [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MEMDB_MAXSIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmemdbmaxsize),N)
    or at run-time for individual databases using the [SQLITE_FCNTL_SIZE_LIMIT](c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntlsizelimit)
    [file-control](c3ref/file_control.html). If no default is specified, 1073741824
    is used.
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 设置使用[sqlite3_deserialize()](c3ref/deserialize.html)创建的内存数据库的默认大小限制（以字节为单位）。这只是默认值。可以在启动时使用[sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MEMDB_MAXSIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmemdbmaxsize),N)或在运行时为单个数据库使用[SQLITE_FCNTL_SIZE_LIMIT](c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntlsizelimit)
    [file-control](c3ref/file_control.html)来更改限制。如果未指定默认值，则使用1073741824。
- en: '**SQLITE_MINIMUM_FILE_DESCRIPTOR=*N***'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_MINIMUM_FILE_DESCRIPTOR=*N***'
- en: The unix [VFS](vfs.html) will never use a file descriptor less than *N*. The
    default value of *N* is 3.
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Unix [VFS](vfs.html) 永远不会使用小于*N*的文件描述符。*N*的默认值为3。
- en: ''
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Avoiding the use of low-numbered file descriptors is a defense against accidental
    database corruption. If a database file was opened using file descriptor 2, for
    example, and then an assert() failed and invoked write(2,...), that would likely
    cause database corruption by overwriting part of the database file with the assertion
    error message. Using only higher-valued file descriptors avoids this potential
    problem. The protection against using low-numbered file descriptors can be disabled
    by setting this compile-time option to 0.
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 避免使用低编号文件描述符可以防止意外数据库损坏。例如，如果使用文件描述符 2 打开数据库文件，然后 assert() 失败并调用 write(2,...)，那么很可能会因为用断言错误消息覆盖数据库文件的一部分而导致数据库损坏。只使用较高值的文件描述符可以避免这种潜在问题。禁用防止使用低编号文件描述符的保护可以通过将编译时选项设置为
    0 来实现。
- en: '**SQLITE_POWERSAFE_OVERWRITE=*<0 or 1>***'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_POWERSAFE_OVERWRITE=*<0 或 1>* **'
- en: This option changes the default assumption about [powersafe overwrite](psow.html)
    for the underlying filesystems for the unix and windows [VFSes](vfs.html). Setting
    SQLITE_POWERSAFE_OVERWRITE to 1 causes SQLite to assume that application-level
    writes cannot changes bytes outside the range of bytes written even if the write
    occurs just before a power loss. With SQLITE_POWERSAFE_OVERWRITE set to 0, SQLite
    assumes that other bytes in the same sector with a written byte might be changed
    or damaged by a power loss.
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项更改了关于 [powersafe overwrite](psow.html) 在 unix 和 windows [VFSes](vfs.html)
    下的默认假设。将 SQLITE_POWERSAFE_OVERWRITE 设置为 1 会使 SQLite 假设应用级别的写入不会更改写入字节范围之外的字节，即使写入发生在断电之前。如果将
    SQLITE_POWERSAFE_OVERWRITE 设置为 0，则 SQLite 假设同一个扇区中其他字节可能会因断电而被更改或损坏。
- en: '**SQLITE_PRINTF_PRECISION_LIMIT=*N***'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_PRINTF_PRECISION_LIMIT=*N***'
- en: 'This option limits the maximum width and precision of substitutions for the
    [printf() SQL function](lang_corefunc.html#printf) and the other C-language string
    formatting functions such as [sqlite3_mprintf()](c3ref/mprintf.html) and [sqlite3_str_appendf()](c3ref/str_append.html).
    This is turn can prevent a hostile or malfunctioning script from using excessive
    memory by invoking a format such as: "`printf(''%*s'',2147483647,''hi'')`". A
    value for *N* of around 100000 is normally sufficient.'
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项限制了对 [printf() SQL function](lang_corefunc.html#printf) 和其他 C 语言字符串格式化函数（如
    [sqlite3_mprintf()](c3ref/mprintf.html) 和 [sqlite3_str_appendf()](c3ref/str_append.html)）的最大宽度和精度。这可以防止恶意或故障脚本通过调用如
    "`printf('%*s',2147483647,'hi')`" 这样的格式化字符串而导致内存使用过多。通常情况下，*N* 的值设为约 100000 就足够了。
- en: ''
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [printf() SQL function](lang_corefunc.html#printf) is subject to the [SQLITE_LIMIT_LENGTH](c3ref/c_limit_attached.html#sqlitelimitlength)
    limit of [sqlite3_limit()](c3ref/limit.html). Hence any printf() result with a
    width or precision more than the SQLITE_LIMIT_LENGTH will cause an [SQLITE_TOOBIG](rescode.html#toobig)
    error. However, the low-level formatting for the printf() function is done by
    a subroutine that does not have access to SQLITE_LIMIT_LENGTH. So the low-level
    formatting is done into a memory allocation that might be considerably larger
    than SQLITE_LIMIT_LENGTH and the SQLITE_LIMIT_LENGTH check is only performed after
    all formatting is complete. Thus there might be a transient buffer that exceeds
    SQLITE_LIMIT_LENGTH. The SQLITE_PRINTF_PRECISION_LIMIT option is an additional
    check that prevents excess sizes for the transient buffer used inside the low-level
    formatting subroutine, prior to the SQLITE_LIMIT_LENGTH check.
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[printf() SQL 函数](lang_corefunc.html#printf)受[SQLITE_LIMIT_LENGTH](c3ref/c_limit_attached.html#sqlitelimitlength)限制，该限制由[sqlite3_limit()](c3ref/limit.html)决定。因此，任何printf()结果的宽度或精度超过SQLITE_LIMIT_LENGTH都会导致[SQLITE_TOOBIG](rescode.html#toobig)错误。但是，printf()函数的底层格式化是由一个子程序完成的，该子程序无法访问SQLITE_LIMIT_LENGTH。因此，底层格式化会在一个可能比SQLITE_LIMIT_LENGTH大得多的内存分配中完成，并且只有在所有格式化完成后才会执行SQLITE_LIMIT_LENGTH检查。因此可能存在超过SQLITE_LIMIT_LENGTH的临时缓冲区。SQLITE_PRINTF_PRECISION_LIMIT选项是在SQLITE_LIMIT_LENGTH检查之前对底层格式化子程序内使用的临时缓冲区进行额外检查的一种方式。'
- en: ''
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Be careful not to set SQLITE_PRINTF_PRECISION_LIMIT too low. SQLite uses its
    [built-in printf()](printf.html) functionality to format the text of CREATE statements
    stored in the [sqlite_schema table](schematab.html). So SQLITE_PRINTF_PRECISION_LIMIT
    should be at least as big as the largest table, index, view, or trigger definition
    that you are likely to encounter.
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意不要将SQLITE_PRINTF_PRECISION_LIMIT设置得太低。SQLite使用其内置的[printf()](printf.html)功能来格式化存储在[sqlite_schema表](schematab.html)中的CREATE语句文本。因此，SQLITE_PRINTF_PRECISION_LIMIT应至少与您可能遇到的最大表、索引、视图或触发器定义大小相同。
- en: ''
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: No error is raised if a width or precision exceeds SQLITE_PRINTF_PRECISION_LIMIT.
    Instead, the large width or precision is silently truncated.
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果宽度或精度超过SQLITE_PRINTF_PRECISION_LIMIT，不会引发错误。相反，大宽度或精度会被静默截断。
- en: ''
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The default value for SQLITE_PRINTF_PRECISION_LIMIT is 2147483647 (0x7fffffff).
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLITE_PRINTF_PRECISION_LIMIT的默认值为2147483647（0x7fffffff）。
- en: '**SQLITE_QUERY_PLANNER_LIMIT=*N***'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_QUERY_PLANNER_LIMIT=*N***'
- en: As part of the query planning process, SQLite enumerates all usable combinations
    of indexes and WHERE-clause constraints. For certain pathological queries, the
    number of these index-and-constraint combinations can be very large, resulting
    in slow performance by the query planner. The SQLITE_QUERY_PLANNER_LIMIT value
    (in conjunction with the related [SQLITE_QUERY_PLANNER_LIMIT_INCR](compile.html#query_planner_limit_incr)
    setting) limits the number of index-and-constraint combinations that the query
    planner will consider, in order to prevent the query planner from using excess
    CPU time. The default value for SQLITE_QUERY_PLANNER_LIMIT is set high enough
    so that is never reached for real-world queries. The query planner search limit
    only applies to queries that are deliberately crafted to use excess planning time.
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在查询规划过程中，SQLite会枚举所有可用的索引和WHERE子句约束的组合。对于某些病态查询，这些索引和约束组合的数量可能非常大，导致查询规划器性能较慢。SQLITE_QUERY_PLANNER_LIMIT值（与相关的[SQLITE_QUERY_PLANNER_LIMIT_INCR](compile.html#query_planner_limit_incr)设置一起）限制了查询规划器将考虑的索引和约束组合的数量，以防止查询规划器使用过多的CPU时间。SQLITE_QUERY_PLANNER_LIMIT的默认值设置得足够高，以确保在实际查询中永远不会达到。查询规划器的搜索限制仅适用于故意设计以使用过多规划时间的查询。
- en: '**SQLITE_QUERY_PLANNER_LIMIT_INCR=*N***'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_QUERY_PLANNER_LIMIT_INCR=*N***'
- en: The [SQLITE_QUERY_PLANNER_LIMIT](compile.html#query_planner_limit) option sets
    an initial baseline value for the maximum number of index-and-constraint combinations
    that the query planner consider. The baseline query planner limit is increased
    by SQLITE_QUERY_PLANNER_LIMIT_INCR prior to processing each table of a join so
    that each table is guaranteed to be able to propose at least some index-and-constraint
    combinations to the optimizer even if prior tables of the join have exhausted
    the baseline limit. The default value for both this compile-time option and the
    [SQLITE_QUERY_PLANNER_LIMIT](compile.html#query_planner_limit) option are set
    high enough so that they should never be reached for real-world queries.
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[SQLITE_QUERY_PLANNER_LIMIT](compile.html#query_planner_limit)选项设定了查询规划器在考虑索引和约束组合时的初始基线值。在处理联接的每个表之前，基线查询规划器限制会通过SQLITE_QUERY_PLANNER_LIMIT_INCR递增，确保每个表至少能够向优化器提议一些索引和约束组合，即使联接中的先前表已经耗尽了基线限制。此编译时选项和[SQLITE_QUERY_PLANNER_LIMIT](compile.html#query_planner_limit)选项的默认值设置得足够高，以确保它们在实际查询中不会被达到。'
- en: '**SQLITE_REVERSE_UNORDERED_SELECTS**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_REVERSE_UNORDERED_SELECTS**'
- en: This option causes the [PRAGMA reverse_unordered_selects](pragma.html#pragma_reverse_unordered_selects)
    setting to be enabled by default. When enabled, [SELECT](lang_select.html) statements
    that lack an ORDER BY clause will run in reverse order.
  id: totrans-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项会默认启用[PRAGMA reverse_unordered_selects](pragma.html#pragma_reverse_unordered_selects)设置。当启用时，缺少ORDER
    BY子句的[SELECT](lang_select.html)语句将按照相反的顺序执行。
- en: ''
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This option is useful for detecting when applications (incorrectly) assume that
    the order of rows in a SELECT without an ORDER BY clause will always be the same.
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项可用于检测应用程序（错误地）假设SELECT语句中没有ORDER BY子句的行的顺序总是相同。
- en: '**SQLITE_SORTER_PMASZ=*N***'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_SORTER_PMASZ=*N***'
- en: If multi-threaded processing is enabled via the [PRAGMA threads](pragma.html#pragma_threads)
    setting, then sort operations will attempt to start helper threads when the amount
    of content to be sorted exceeds the minimum of the [cache_size](pragma.html#pragma_cache_size)
    and PMA Size determined by the [SQLITE_CONFIG_PMASZ](c3ref/c_config_covering_index_scan.html#sqliteconfigpmasz)
    start-time option. This compile-time option sets the default value for the [SQLITE_CONFIG_PMASZ](c3ref/c_config_covering_index_scan.html#sqliteconfigpmasz)
    start-time option. The default value is 250.
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果通过[PRAGMA threads](pragma.html#pragma_threads)设置启用了多线程处理，则在要排序的内容超过[cache_size](pragma.html#pragma_cache_size)和由[SQLITE_CONFIG_PMASZ](c3ref/c_config_covering_index_scan.html#sqliteconfigpmasz)启动时选项确定的PMA大小的最小值时，排序操作将尝试启动辅助线程。此编译时选项设置了[SQLITE_CONFIG_PMASZ](c3ref/c_config_covering_index_scan.html#sqliteconfigpmasz)起始时选项的默认值。默认值为250。
- en: '**SQLITE_STMTJRNL_SPILL=*N***'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_STMTJRNL_SPILL=*N***'
- en: The SQLITE_STMTJRNL_SPILL compile-time option determines the default setting
    of the [SQLITE_CONFIG_STMTJRNL_SPILL](c3ref/c_config_covering_index_scan.html#sqliteconfigstmtjrnlspill)
    start-time setting. That setting determines the size threshold above which [statement
    journals](tempfiles.html#stmtjrnl) are moved from memory to disk.
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLITE_STMTJRNL_SPILL 编译时选项确定了[SQLITE_CONFIG_STMTJRNL_SPILL](c3ref/c_config_covering_index_scan.html#sqliteconfigstmtjrnlspill)起始时设置的默认值。该设置决定了内存中[语句日志](tempfiles.html#stmtjrnl)移动到磁盘的大小阈值。
- en: '**SQLITE_WIN32_MALLOC**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_WIN32_MALLOC**'
- en: This option enables the use of the Windows Heap API functions for memory allocation
    instead of the standard library malloc() and free() routines.
  id: totrans-160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用了使用Windows Heap API函数进行内存分配而不是标准库malloc()和free()例程。
- en: '**YYSTACKDEPTH=*<max_depth>***'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**YYSTACKDEPTH=*<max_depth>***'
- en: This macro sets the maximum depth of the LALR(1) stack used by the SQL parser
    within SQLite. The default value is 100\. A typical application will use less
    than about 20 levels of the stack. Developers whose applications contain SQL statements
    that need more than 100 LALR(1) stack entries should seriously consider refactoring
    their SQL as it is likely to be well beyond the ability of any human to comprehend.
  id: totrans-162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏设置了SQLite中SQL解析器使用的LALR(1)栈的最大深度。默认值为100。典型应用程序将使用的栈深度不到20。包含需要超过100个LALR(1)栈条目的SQL语句的开发人员应认真考虑重构他们的SQL，因为它很可能远远超出任何人类理解的能力。
- en: 5\. Options To Set Size Limits
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 设置大小限制的选项
- en: There are compile-time options that will set upper bounds on the sizes of various
    structures in SQLite. The compile-time options normally set a hard upper bound
    that can be changed at run-time on individual [database connections](c3ref/sqlite3.html)
    using the [sqlite3_limit()](c3ref/limit.html) interface.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 编译时选项将设置SQLite中各种结构的大小上限。这些编译时选项通常设置一个硬性上限，可以在运行时通过单独的[数据库连接](c3ref/sqlite3.html)使用[sqlite3_limit()](c3ref/limit.html)接口进行更改。
- en: 'The compile-time options for setting upper bounds are [documented separately](limits.html).
    The following is a list of the available settings:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 编译时设置上限的选项被[单独记录](limits.html)。以下是可用设置的列表：
- en: '[SQLITE_MAX_ATTACHED](limits.html#max_attached)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_ATTACHED](limits.html#max_attached)'
- en: '[SQLITE_MAX_COLUMN](limits.html#max_column)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_COLUMN](limits.html#max_column)'
- en: '[SQLITE_MAX_COMPOUND_SELECT](limits.html#max_compound_select)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_COMPOUND_SELECT](limits.html#max_compound_select)'
- en: '[SQLITE_MAX_EXPR_DEPTH](limits.html#max_expr_depth)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_EXPR_DEPTH](limits.html#max_expr_depth)'
- en: '[SQLITE_MAX_FUNCTION_ARG](limits.html#max_function_arg)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_FUNCTION_ARG](limits.html#max_function_arg)'
- en: '[SQLITE_MAX_LENGTH](limits.html#max_length)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_LENGTH](limits.html#max_length)'
- en: '[SQLITE_MAX_LIKE_PATTERN_LENGTH](limits.html#max_like_pattern_length)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_LIKE_PATTERN_LENGTH](limits.html#max_like_pattern_length)'
- en: '[SQLITE_MAX_PAGE_COUNT](limits.html#max_page_count)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_PAGE_COUNT](limits.html#max_page_count)'
- en: '[SQLITE_MAX_SQL_LENGTH](limits.html#max_sql_length)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_SQL_LENGTH](limits.html#max_sql_length)'
- en: '[SQLITE_MAX_VARIABLE_NUMBER](limits.html#max_variable_number)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_VARIABLE_NUMBER](limits.html#max_variable_number)'
- en: 'There are also some size limits that cannot be modified using [sqlite3_limit()](c3ref/limit.html).
    See, for example:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些大小限制，无法使用[sqlite3_limit()](c3ref/limit.html)进行修改。例如：
- en: '[SQLITE_FTS3_MAX_EXPR_DEPTH](compile.html#fts3_max_expr_depth)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_FTS3_MAX_EXPR_DEPTH](compile.html#fts3_max_expr_depth)'
- en: '[SQLITE_JSON_MAX_DEPTH](compile.html#json_max_depth)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_JSON_MAX_DEPTH](compile.html#json_max_depth)'
- en: '[SQLITE_MAX_ALLOCATION_SIZE](compile.html#max_allocation_size)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_ALLOCATION_SIZE](compile.html#max_allocation_size)'
- en: '[SQLITE_MAX_MEMORY](compile.html#max_memory)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_MEMORY](compile.html#max_memory)'
- en: '[SQLITE_MAX_MMAP_SIZE](compile.html#max_mmap_size)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_MAX_MMAP_SIZE](compile.html#max_mmap_size)'
- en: '[SQLITE_PRINTF_PRECISION_LIMIT](compile.html#printf_precision_limit)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_PRINTF_PRECISION_LIMIT](compile.html#printf_precision_limit)'
- en: '[SQLITE_TRACE_SIZE_LIMIT](compile.html#trace_size_limit)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_TRACE_SIZE_LIMIT](compile.html#trace_size_limit)'
- en: '[YYSTACKDEPTH](compile.html#yystackdepth)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[YYSTACKDEPTH](compile.html#yystackdepth)'
- en: 6\. Options To Control Operating Characteristics
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 控制操作特性的选项
- en: '**SQLITE_4_BYTE_ALIGNED_MALLOC**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_4_BYTE_ALIGNED_MALLOC**'
- en: 'On most systems, the malloc() system call returns a buffer that is aligned
    to an 8-byte boundary. But on some systems (ex: windows) malloc() returns 4-byte
    aligned pointer. This compile-time option must be used on systems that return
    4-byte aligned pointers from malloc().'
  id: totrans-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在大多数系统上，malloc()系统调用返回的缓冲区对齐到8字节边界。但是在一些系统上（例如：Windows），malloc()返回4字节对齐的指针。这个编译时选项必须在从malloc()返回4字节对齐指针的系统上使用。
- en: '**SQLITE_CASE_SENSITIVE_LIKE**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_CASE_SENSITIVE_LIKE**'
- en: If this option is present, then the built-in [LIKE](lang_expr.html#like) operator
    will be case sensitive. This same effect can be achieved at run-time using the
    [case_sensitive_like pragma](pragma.html#pragma_case_sensitive_like).
  id: totrans-189
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果存在这个选项，则内置的[LIKE](lang_expr.html#like)运算符将区分大小写。可以在运行时使用[case_sensitive_like
    pragma](pragma.html#pragma_case_sensitive_like)实现相同效果。
- en: '**SQLITE_DIRECT_OVERFLOW_READ**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DIRECT_OVERFLOW_READ**'
- en: When this option is present, content contained in [overflow pages](fileformat2.html#ovflpgs)
    of the database file is read directly from disk, bypassing the [page cache](c3ref/pcache_methods2.html),
    during read transactions. In applications that do a lot of reads of large BLOBs
    or strings, this option improves read performance.
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当存在此选项时，在读取事务期间，直接从磁盘读取数据库文件中[溢出页面](fileformat2.html#ovflpgs)中的内容，绕过[页面缓存](c3ref/pcache_methods2.html)。在执行大量读取大型BLOB或字符串的应用程序中，此选项可提高读取性能。
- en: ''
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As of version 3.45.0 (2024-01-15), this option is enabled by default. To disable
    it, using -DSQLITE_DIRECT_OVERFLOW_READ=0.
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从版本3.45.0（2024-01-15）开始，默认情况下启用了此选项。要禁用它，请使用 -DSQLITE_DIRECT_OVERFLOW_READ=0。
- en: '**SQLITE_HAVE_ISNAN**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_HAVE_ISNAN**'
- en: If this option is present, then SQLite will use the isnan() function from the
    system math library. This is an alias for the [HAVE_ISNAN](compile.html#isnan)
    configuration option.
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果存在这个选项，则SQLite将使用系统数学库中的isnan()函数。这是[HAVE_ISNAN](compile.html#isnan)配置选项的别名。
- en: '**SQLITE_MAX_ALLOCATION_SIZE=*N***'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_MAX_ALLOCATION_SIZE=*N***'
- en: This compile-time option sets an upper bound on the size of memory allocations
    that can be requested using [sqlite3_malloc64()](c3ref/free.html), [sqlite3_realloc64()](c3ref/free.html),
    and similar. The default value is 2,147,483,391 (0x7ffffeff) and this should be
    considered an upper bound. Most applications can get by with a maximum allocation
    size of a few million bytes.
  id: totrans-197
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个编译时选项设置了可以使用[sqlite3_malloc64()](c3ref/free.html)、[sqlite3_realloc64()](c3ref/free.html)等请求的内存分配大小的上限。默认值为2,147,483,391（0x7ffffeff），应将其视为上限。大多数应用程序可以通过几百万字节的最大分配大小完成。
- en: ''
  id: totrans-198
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is a limit on the maximum size of any single memory allocation. It is *not*
    a limit on the total amount of memory allocated. See [SQLITE_MAX_MEMORY](compile.html#max_memory)
    for a limitation on the total amount of memory allocated.
  id: totrans-199
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这是任何单个内存分配的最大大小限制。这*不是*总内存分配量的限制。有关总内存分配量的限制，请参阅[SQLITE_MAX_MEMORY](compile.html#max_memory)。
- en: ''
  id: totrans-200
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Reducing the maximum size of individual memory allocations provides extra defense
    against denial-of-service attacks that attempt to exhaust system memory by doing
    many large allocations. It is also an extra layer of defense against application
    bugs where the size of a memory allocation is computed using a signed 32-bit integer
    that could overflow → with a small maximum allocation size, such buggy memory
    allocation size computations are likely to be spotted sooner due to out-of-memory
    errors and before the integer actually overflows.
  id: totrans-201
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 减少单个内存分配的最大大小可提供额外的防御，防止拒绝服务攻击试图通过执行许多大内存分配来耗尽系统内存。这也是对应用程序缺陷的额外防御层，其中内存分配的大小计算使用有符号32位整数，可能会溢出
    → 通过较小的最大分配大小，这种错误的内存分配大小计算很可能会因内存不足错误而更早地被发现，而不是在整数实际溢出之前。
- en: '**SQLITE_OS_OTHER=*<0 or 1>***'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OS_OTHER=*<0或1>***'
- en: The option causes SQLite to omit its built-in operating system interfaces for
    Unix, Windows, and OS/2\. The resulting library will have no default [operating
    system interface](c3ref/vfs.html). Applications must use [sqlite3_vfs_register()](c3ref/vfs_find.html)
    to register an appropriate interface before using SQLite. Applications must also
    supply implementations for the [sqlite3_os_init()](c3ref/initialize.html) and
    [sqlite3_os_end()](c3ref/initialize.html) interfaces. The usual practice is for
    the supplied [sqlite3_os_init()](c3ref/initialize.html) to invoke [sqlite3_vfs_register()](c3ref/vfs_find.html).
    SQLite will automatically invoke [sqlite3_os_init()](c3ref/initialize.html) when
    it initializes.
  id: totrans-203
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该选项导致SQLite省略其针对Unix、Windows和OS/2的内置操作系统接口。生成的库将没有默认的[操作系统接口](c3ref/vfs.html)。应用程序必须在使用SQLite之前使用[sqlite3_vfs_register()](c3ref/vfs_find.html)注册适当的接口。应用程序还必须为[sqlite3_os_init()](c3ref/initialize.html)和[sqlite3_os_end()](c3ref/initialize.html)接口提供实现。通常的做法是，提供的[sqlite3_os_init()](c3ref/initialize.html)调用[sqlite3_vfs_register()](c3ref/vfs_find.html)。SQLite初始化时会自动调用[sqlite3_os_init()](c3ref/initialize.html)。
- en: ''
  id: totrans-204
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This option is typically used when building SQLite for an embedded platform
    with a custom operating system.
  id: totrans-205
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当在构建具有自定义操作系统的嵌入式平台时，通常会使用此选项。
- en: '**SQLITE_SECURE_DELETE**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_SECURE_DELETE**'
- en: This compile-time option changes the default setting of the [secure_delete pragma](pragma.html#pragma_secure_delete).
    When this option is not used, secure_delete defaults to off. When this option
    is present, secure_delete defaults to on.
  id: totrans-207
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此编译时选项更改了[secure_delete pragma](pragma.html#pragma_secure_delete)的默认设置。如果未使用此选项，则secure_delete默认为关闭。如果存在此选项，则secure_delete默认为打开。
- en: ''
  id: totrans-208
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The secure_delete setting causes deleted content to be overwritten with zeros.
    There is a small performance penalty since additional I/O must occur. On the other
    hand, secure_delete can prevent fragments of sensitive information from lingering
    in unused parts of the database file after it has been deleted. See the documentation
    on the [secure_delete pragma](pragma.html#pragma_secure_delete) for additional
    information.
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: secure_delete 设置导致删除的内容被用零覆盖。由于需要额外的 I/O 操作，这会带来一些性能损耗。但另一方面，secure_delete 可以防止敏感信息的片段在数据库文件的未使用部分残留。更多信息请参阅关于
    [secure_delete pragma](pragma.html#pragma_secure_delete) 的文档。
- en: '**SQLITE_THREADSAFE=*<0 or 1 or 2>***'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_THREADSAFE=*<0 or 1 or 2>***'
- en: This option controls whether or not code is included in SQLite to enable it
    to operate safely in a multithreaded environment. The default is SQLITE_THREADSAFE=1
    which is safe for use in a multithreaded environment. When compiled with SQLITE_THREADSAFE=0
    all mutexing code is omitted and it is unsafe to use SQLite in a multithreaded
    program. When compiled with SQLITE_THREADSAFE=2, SQLite can be used in a multithreaded
    program so long as no two threads attempt to use the same [database connection](c3ref/sqlite3.html)
    (or any [prepared statements](c3ref/stmt.html) derived from that database connection)
    at the same time.
  id: totrans-211
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项控制 SQLite 是否包含代码以确保在多线程环境中安全运行。默认值是 SQLITE_THREADSAFE=1，适合在多线程环境中使用。当编译时设为
    SQLITE_THREADSAFE=0 时，所有互斥代码将被省略，因此在多线程程序中使用 SQLite 是不安全的。当编译时设为 SQLITE_THREADSAFE=2
    时，SQLite 可以在多线程程序中使用，只要没有两个线程同时尝试使用相同的 [数据库连接](c3ref/sqlite3.html)（或从该数据库连接派生的任何
    [prepared statements](c3ref/stmt.html)）。
- en: ''
  id: totrans-212
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To put it another way, SQLITE_THREADSAFE=1 sets the default [threading mode](threadsafe.html)
    to Serialized. SQLITE_THREADSAFE=2 sets the default [threading mode](threadsafe.html)
    to Multi-threaded. And SQLITE_THREADSAFE=0 sets the [threading mode](threadsafe.html)
    to Single-threaded.
  id: totrans-213
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 换句话说，SQLITE_THREADSAFE=1 将默认的 [线程模式](threadsafe.html) 设置为 Serialized。SQLITE_THREADSAFE=2
    将默认的 [线程模式](threadsafe.html) 设置为 Multi-threaded。而 SQLITE_THREADSAFE=0 则将 [线程模式](threadsafe.html)
    设置为 Single-threaded。
- en: ''
  id: totrans-214
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The value of SQLITE_THREADSAFE can be determined at run-time using the [sqlite3_threadsafe()](c3ref/threadsafe.html)
    interface.
  id: totrans-215
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可以使用 [sqlite3_threadsafe()](c3ref/threadsafe.html) 接口在运行时确定 SQLITE_THREADSAFE
    的值。
- en: ''
  id: totrans-216
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When SQLite has been compiled with SQLITE_THREADSAFE=1 or SQLITE_THREADSAFE=2
    then the [threading mode](threadsafe.html) can be altered at run-time using the
    [sqlite3_config()](c3ref/config.html) interface together with one of these verbs:'
  id: totrans-217
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当 SQLite 编译为 SQLITE_THREADSAFE=1 或 SQLITE_THREADSAFE=2 时，可以使用 [sqlite3_config()](c3ref/config.html)
    接口以及以下动词来在运行时更改 [线程模式](threadsafe.html)。
- en: ''
  id: totrans-218
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[SQLITE_CONFIG_SINGLETHREAD](c3ref/c_config_covering_index_scan.html#sqliteconfigsinglethread)'
  id: totrans-219
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_CONFIG_SINGLETHREAD](c3ref/c_config_covering_index_scan.html#sqliteconfigsinglethread)'
- en: '[SQLITE_CONFIG_MULTITHREAD](c3ref/c_config_covering_index_scan.html#sqliteconfigmultithread)'
  id: totrans-220
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_CONFIG_MULTITHREAD](c3ref/c_config_covering_index_scan.html#sqliteconfigmultithread)'
- en: '[SQLITE_CONFIG_SERIALIZED](c3ref/c_config_covering_index_scan.html#sqliteconfigserialized)'
  id: totrans-221
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_CONFIG_SERIALIZED](c3ref/c_config_covering_index_scan.html#sqliteconfigserialized)'
- en: ''
  id: totrans-222
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [SQLITE_OPEN_NOMUTEX](c3ref/c_open_autoproxy.html) and [SQLITE_OPEN_FULLMUTEX](c3ref/c_open_autoproxy.html)
    flags to [sqlite3_open_v2()](c3ref/open.html) can also be used to adjust the [threading
    mode](threadsafe.html) of individual [database connections](c3ref/sqlite3.html)
    at run-time.
  id: totrans-223
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[sqlite3_open_v2()](c3ref/open.html)的[SQLITE_OPEN_NOMUTEX](c3ref/c_open_autoproxy.html)和[SQLITE_OPEN_FULLMUTEX](c3ref/c_open_autoproxy.html)标志也可用于调整运行时个别[数据库连接](c3ref/sqlite3.html)的[线程模式](threadsafe.html)。'
- en: ''
  id: totrans-224
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that when SQLite is compiled with SQLITE_THREADSAFE=0, the code to make
    SQLite threadsafe is omitted from the build. When this occurs, it is impossible
    to change the [threading mode](threadsafe.html) at start-time or run-time.
  id: totrans-225
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意，当 SQLite 编译时使用 SQLITE_THREADSAFE=0，会从构建中省略使 SQLite 线程安全的代码。当出现这种情况时，不可能在启动时或运行时更改[线程模式](threadsafe.html)。
- en: ''
  id: totrans-226
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See the [threading mode](threadsafe.html) documentation for additional information
    on aspects of using SQLite in a multithreaded environment.
  id: totrans-227
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 查看[线程模式](threadsafe.html)文档，了解在多线程环境中使用 SQLite 的其他信息。
- en: '**SQLITE_TEMP_STORE=*<0 through 3>***'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_TEMP_STORE=*<0 到 3>***'
- en: 'This option controls whether temporary files are stored on disk or in memory.
    The meanings for various settings of this compile-time option are as follows:'
  id: totrans-229
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项控制临时文件是存储在磁盘上还是内存中。此编译时选项的各种设置含义如下：
- en: ''
  id: totrans-230
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| SQLITE_TEMP_STORE | Meaning |'
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| SQLITE_TEMP_STORE | 含义 |'
- en: '| 0 | Always use temporary files |'
  id: totrans-232
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 0 | 始终使用临时文件 |'
- en: '| 1 | Use files by default but allow the [PRAGMA temp_store](pragma.html#pragma_temp_store)
    command to override |'
  id: totrans-233
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 1 | 默认使用文件，但允许使用[PRAGMA temp_store](pragma.html#pragma_temp_store)命令进行覆盖
    |'
- en: '| 2 | Use memory by default but allow the [PRAGMA temp_store](pragma.html#pragma_temp_store)
    command to override |'
  id: totrans-234
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 2 | 默认使用内存，但允许使用[PRAGMA temp_store](pragma.html#pragma_temp_store)命令进行覆盖
    |'
- en: '| 3 | Always use memory |'
  id: totrans-235
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 3 | 始终使用内存 |'
- en: ''
  id: totrans-236
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The default setting is 1. Additional information can be found in [tempfiles.html](tempfiles.html#tempstore).
  id: totrans-237
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 默认设置为 1。可以在[tempfiles.html](tempfiles.html#tempstore)中找到更多信息。
- en: '**SQLITE_TRACE_SIZE_LIMIT=*N***'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_TRACE_SIZE_LIMIT=*N***'
- en: If this macro is defined to a positive integer *N*, then the length of strings
    and BLOB that are expanded into parameters in the output of [sqlite3_trace()](c3ref/profile.html)
    is limited to *N* bytes.
  id: totrans-239
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果将此宏定义为正整数 *N*，则在[sqlite3_trace()](c3ref/profile.html)输出中扩展为参数的字符串和 BLOB 的长度将限制为
    *N* 字节。
- en: '**SQLITE_TRUSTED_SCHEMA=*<0 or 1>***'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_TRUSTED_SCHEMA=*<0 或 1>***'
- en: This macro determines the default value for the [SQLITE_DBCONFIG_TRUSTED_SCHEMA](c3ref/c_dbconfig_defensive.html#sqlitedbconfigtrustedschema)
    and [PRAGMA trusted_schema](pragma.html#pragma_trusted_schema) setting. If no
    alternative is specified, the trusted-schema setting defaults to ON (a value of
    1) for legacy compatibility. However, for best security, systems that implement
    [application-defined SQL functions](appfunc.html) and/or [virtual tables](vtab.html)
    should consider changing the default to OFF.
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏确定了 [SQLITE_DBCONFIG_TRUSTED_SCHEMA](c3ref/c_dbconfig_defensive.html#sqlitedbconfigtrustedschema)
    和 [PRAGMA trusted_schema](pragma.html#pragma_trusted_schema) 设置的默认值。如果未指定替代方案，则受信模式设置默认为
    ON（值为 1），以保持与旧版兼容性。然而，为了最佳安全性，实现 [应用程序定义的 SQL 函数](appfunc.html) 和/或 [虚拟表](vtab.html)
    的系统应考虑将默认设置为 OFF。
- en: '**SQLITE_USE_URI**'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_USE_URI**'
- en: This option causes the [URI filename](uri.html) process logic to be enabled
    by default.
  id: totrans-243
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项导致默认启用 [URI 文件名](uri.html) 处理逻辑。
- en: 7\. Options To Enable Features Normally Turned Off
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 启用通常关闭的功能选项
- en: '**SQLITE_ALLOW_URI_AUTHORITY**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ALLOW_URI_AUTHORITY**'
- en: '[URI filenames](uri.html) normally throws an error if the authority section
    is not either empty or "localhost". However, if SQLite is compiled with the SQLITE_ALLOW_URI_AUTHORITY
    compile-time option, then the URI is converted into a Uniform Naming Convention
    (UNC) filename and passed down to the underlying operating system that way.'
  id: totrans-246
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[URI 文件名](uri.html) 如果其权限部分不为空或者为 "localhost"，通常会抛出错误。但是，如果SQLite在编译时使用了 SQLITE_ALLOW_URI_AUTHORITY
    选项，则URI会被转换为统一命名约定（UNC）文件名，并以这种方式传递给底层操作系统。'
- en: ''
  id: totrans-247
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Some future versions of SQLite may change to enable this feature by default.
  id: totrans-248
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一些未来版本的SQLite可能会更改，以默认启用此功能。
- en: '**SQLITE_ALLOW_COVERING_INDEX_SCAN=*<0 or 1>***'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ALLOW_COVERING_INDEX_SCAN=*<0 或 1>***'
- en: This C-preprocess macro determines the default setting of the [SQLITE_CONFIG_COVERING_INDEX_SCAN](c3ref/c_config_covering_index_scan.html#sqliteconfigcoveringindexscan)
    configuration setting. It defaults to 1 (on) which means that covering indices
    are used for full table scans where possible, in order to reduce I/O and improve
    performance. However, the use of a covering index for a full scan will cause results
    to appear in a different order from legacy, which could cause some (incorrectly-coded)
    legacy applications to break. Hence, the covering index scan option can be disabled
    at compile-time on systems that what to minimize their risk of exposing errors
    in legacy applications.
  id: totrans-250
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此 C 预处理宏确定了 [SQLITE_CONFIG_COVERING_INDEX_SCAN](c3ref/c_config_covering_index_scan.html#sqliteconfigcoveringindexscan)
    配置设置的默认值。它默认为 1（开启），这意味着在可能的情况下使用覆盖索引来进行全表扫描，以减少 I/O 并提高性能。然而，对于全扫描使用覆盖索引将导致结果与传统方式不同，这可能导致一些（编码不正确的）传统应用程序出现问题。因此，在希望最小化在传统应用程序中暴露错误风险的系统上，可以在编译时禁用覆盖索引扫描选项。
- en: '**SQLITE_ENABLE_8_3_NAMES=*<1 or 2>***'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_8_3_NAMES=*<1 或 2>***'
- en: If this C-preprocessor macro is defined, then extra code is included that allows
    SQLite to function on a filesystem that only support 8+3 filenames. If the value
    of this macro is 1, then the default behavior is to continue to use long filenames
    and to only use 8+3 filenames if the database connection is opened using [URI
    filenames](uri.html) with the "`8_3_names=1`" query parameter. If the value of
    this macro is 2, then the use of 8+3 filenames becomes the default but may be
    disabled on using the `8_3_names=0` query parameter.
  id: totrans-252
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了此C预处理宏，则包含额外的代码，允许SQLite在仅支持8+3文件名的文件系统上运行。如果此宏的值为1，则默认行为是继续使用长文件名，并仅在使用带有"`8_3_names=1`"查询参数的[URI文件名](uri.html)打开数据库连接时才使用8+3文件名。如果此宏的值为2，则使用8+3文件名成为默认行为，但可以通过使用`8_3_names=0`查询参数来禁用。
- en: '**SQLITE_ENABLE_API_ARMOR**'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_API_ARMOR**'
- en: When defined, this C-preprocessor macro activates extra code that attempts to
    detect misuse of the SQLite API, such as passing in NULL pointers to required
    parameters or using objects after they have been destroyed. When this option is
    enabled and an illegal API usage is detected, the interface will typically return
    SQLITE_MISUSE.
  id: totrans-254
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当定义了此C预处理宏时，将激活额外的代码，用于检测SQLite API的误用，例如将NULL指针传递给必需的参数或在对象被销毁后继续使用。启用此选项后，如果检测到非法的API使用，接口通常会返回SQLITE_MISUSE。
- en: ''
  id: totrans-255
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The SQLITE_ENABLE_API_ARMOR option does not guarantee that all illegal API usages
    will be detected. Even when SQLITE_ENABLE_API_ARMOR is enabled, passing incorrect
    values into the C-language APIs can cause a process crash due to segmentation
    fault or null-pointer deference or other reasons. The SQLITE_ENABLE_API_ARMOR
    compile-time option is intended as an aid for application testing and debugging
    option. Applications should not depend SQLITE_ENABLE_API_ARMOR for safety. SQLITE_ENABLE_API_ARMOR
    is appropriate as a second line of defense against application bugs, but it should
    not be the only defense. If any SQLite interface returns SQLITE_MISUSE, that indicates
    that the application is using SQLite contrary to the spec and that the application
    contains a bug. The SQLITE_MISUSE return provides the application with the opportunity
    to respond gracefully to that bug, rather than simply crashing the process or
    invoking undefined behavior, but nothing more. Applications should neither make
    use of nor depend upon SQLITE_MISUSE for routine processing.
  id: totrans-256
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLITE_ENABLE_API_ARMOR选项并不能保证检测到所有的非法API使用。即使启用了SQLITE_ENABLE_API_ARMOR，向C语言API传递不正确的值仍可能导致进程崩溃，如段错误或空指针解引用等其他原因。SQLITE_ENABLE_API_ARMOR编译时选项旨在帮助应用程序测试和调试。应用程序不应依赖SQLITE_ENABLE_API_ARMOR来确保安全性。SQLITE_ENABLE_API_ARMOR适合作为应用程序错误的第二道防线，但不应是唯一的防线。如果任何SQLite接口返回SQLITE_MISUSE，则表示应用程序使用SQLite与规范相违背，并且应用程序存在错误。SQLITE_MISUSE的返回提供了应用程序处理该错误的机会，而不是简单地使进程崩溃或调用未定义行为，但仅此而已。应用程序在常规处理中既不应使用也不依赖SQLITE_MISUSE。
- en: '**SQLITE_ENABLE_ATOMIC_WRITE**'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_ATOMIC_WRITE**'
- en: If this C-preprocessor macro is defined and if the xDeviceCharacteristics method
    of [sqlite3_io_methods](c3ref/io_methods.html) object for a database file reports
    (via one of the [SQLITE_IOCAP_ATOMIC](c3ref/c_iocap_atomic.html) bits) that the
    filesystem supports atomic writes and if a transaction involves a change to only
    a single page of the database file, then the transaction commits with just a single
    write request of a single page of the database and no rollback journal is created
    or written. On filesystems that support atomic writes, this optimization can result
    in significant speed improvements for small updates. However, few filesystems
    support this capability and the code paths that check for this capability slow
    down write performance on systems that lack atomic write capability, so this feature
    is disabled by default.
  id: totrans-258
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了此C预处理宏，并且如果数据库文件的[sqlite3_io_methods](c3ref/io_methods.html)对象的xDeviceCharacteristics方法（通过[SQLITE_IOCAP_ATOMIC](c3ref/c_iocap_atomic.html)位之一）报告文件系统支持原子写入，并且如果事务仅涉及对数据库文件的单个页面的更改，则事务将通过仅一个单页数据库的单个写请求提交，并且不会创建或写入回滚日志。在支持原子写入的文件系统上，这种优化可以显著提高小更新的速度。然而，很少有文件系统支持此功能，并且检查此功能的代码路径会减慢在缺乏原子写入能力的系统上的写入性能，因此此功能默认情况下被禁用。
- en: '**SQLITE_ENABLE_BATCH_ATOMIC_WRITE**'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_BATCH_ATOMIC_WRITE**'
- en: This compile-time option enables SQLite to take advantage batch atomic write
    capabilities in the underlying filesystem. As of SQLite version 3.21.0 (2017-10-24)
    this is only supported on [F2FS](https://en.wikipedia.org/wiki/F2FS). However,
    the interface is implemented generically, using [sqlite3_file_control()](c3ref/file_control.html)
    with [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE](c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntlbeginatomicwrite)
    and [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE](c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntlcommitatomicwrite)
    so the capability can be added to other filesystem times in the future. When this
    option is enabled, SQLite automatically detects that the underlying filesystem
    supports batch atomic writes, and when it does so it avoids writing the [rollback
    journal](lockingv3.html#rollback) for transaction control. This can make transactions
    over twice as fast, while simultaneously reducing wear on SSD storage devices.
  id: totrans-260
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此编译时选项使SQLite能够利用底层文件系统中的批量原子写入能力。从SQLite版本3.21.0（2017-10-24）开始，此功能仅在[F2FS](https://en.wikipedia.org/wiki/F2FS)上受支持。然而，接口是通用实现的，使用[sqlite3_file_control()](c3ref/file_control.html)与[SQLITE_FCNTL_BEGIN_ATOMIC_WRITE](c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntlbeginatomicwrite)和[SQLITE_FCNTL_COMMIT_ATOMIC_WRITE](c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntlcommitatomicwrite)，因此未来可以将此功能添加到其他文件系统中。当启用此选项时，SQLite会自动检测底层文件系统是否支持批量原子写入，并且在这样做时避免写入用于事务控制的[回滚日志](lockingv3.html#rollback)。这可以使事务速度提高两倍以上，同时减少SSD存储设备的磨损。
- en: ''
  id: totrans-261
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Future versions of SQLite might enable the batch-atomic-write capability by
    default, at which point this compile-time option will become superfluous.
  id: totrans-262
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite的未来版本可能会默认启用批量原子写入功能，届时此编译时选项将变得多余。
- en: '**SQLITE_ENABLE_BYTECODE_VTAB**'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_BYTECODE_VTAB**'
- en: This option enables the [bytecode and tables_used virtual tables](bytecodevtab.html).
  id: totrans-264
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用[bytecode和tables_used虚拟表](bytecodevtab.html)。
- en: '**SQLITE_ENABLE_COLUMN_METADATA**'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_COLUMN_METADATA**'
- en: 'When this C-preprocessor macro is defined, SQLite includes some additional
    APIs that provide convenient access to meta-data about tables and queries. The
    APIs that are enabled by this option are:'
  id: totrans-266
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当定义了这个C预处理宏时，SQLite会包含一些额外的API，这些API方便地提供了关于表和查询的元数据访问。此选项启用的API包括：
- en: ''
  id: totrans-267
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[sqlite3_column_database_name()](c3ref/column_database_name.html)'
  id: totrans-268
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_column_database_name()](c3ref/column_database_name.html)'
- en: '[sqlite3_column_database_name16()](c3ref/column_database_name.html)'
  id: totrans-269
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_column_database_name16()](c3ref/column_database_name.html)'
- en: '[sqlite3_column_table_name()](c3ref/column_database_name.html)'
  id: totrans-270
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_column_table_name()](c3ref/column_database_name.html)'
- en: '[sqlite3_column_table_name16()](c3ref/column_database_name.html)'
  id: totrans-271
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_column_table_name16()](c3ref/column_database_name.html)'
- en: '[sqlite3_column_origin_name()](c3ref/column_database_name.html)'
  id: totrans-272
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_column_origin_name()](c3ref/column_database_name.html)'
- en: '[sqlite3_column_origin_name16()](c3ref/column_database_name.html)'
  id: totrans-273
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_column_origin_name16()](c3ref/column_database_name.html)'
- en: '**SQLITE_ENABLE_DBPAGE_VTAB**'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_DBPAGE_VTAB**'
- en: This option enables the [SQLITE_DBPAGE virtual table](dbpage.html).
  id: totrans-275
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用[SQLITE_DBPAGE虚拟表](dbpage.html)。
- en: '**SQLITE_ENABLE_DBSTAT_VTAB**'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_DBSTAT_VTAB**'
- en: This option enables the [dbstat virtual table](dbstat.html).
  id: totrans-277
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用[dbstat虚拟表](dbstat.html)。
- en: '**SQLITE_ENABLE_DESERIALIZE**'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_DESERIALIZE**'
- en: This option was formerly used to enable the [sqlite3_serialize()](c3ref/serialize.html)
    and [sqlite3_deserialize()](c3ref/deserialize.html) interfaces. However, as of
    SQLite 3.36.0 (2021-06-18) those interfaces are enabled by default and a new compile-time
    option [SQLITE_OMIT_DESERIALIZE](compile.html#omit_deserialize) is added to omit
    them.
  id: totrans-279
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项曾经用于启用[sqlite3_serialize()](c3ref/serialize.html)和[sqlite3_deserialize()](c3ref/deserialize.html)接口。然而，从SQLite
    3.36.0（2021-06-18）开始，默认启用这些接口，并添加了一个新的编译时选项[SQLITE_OMIT_DESERIALIZE](compile.html#omit_deserialize)来省略它们。
- en: '**SQLITE_ENABLE_EXPLAIN_COMMENTS**'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_EXPLAIN_COMMENTS**'
- en: This option adds extra logic to SQLite that inserts comment text into the output
    of [EXPLAIN](lang_explain.html). These extra comments use extra memory, thus making
    [prepared statements](c3ref/stmt.html) larger and very slightly slower, and so
    they are turned off by default and in most application. But some applications,
    such as the [command-line shell](cli.html) for SQLite, value clarity of EXPLAIN
    output over raw performance and so this compile-time option is available to them.
    The SQLITE_ENABLE_EXPLAIN_COMMENTS compile-time option is also enabled automatically
    if [SQLITE_DEBUG](compile.html#debug) is enabled.
  id: totrans-281
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项向SQLite添加额外的逻辑，将注释文本插入[EXPLAIN](lang_explain.html)输出中。这些额外的注释会占用额外的内存，因此会使[预编译语句](c3ref/stmt.html)变得更大，稍微变慢，所以默认情况下大多数应用会关闭它们。但是一些应用程序，比如SQLite的[命令行
    shell](cli.html)，更注重EXPLAIN输出的清晰度，因此可以通过此编译时选项启用。如果启用了[SQLITE_DEBUG](compile.html#debug)，则会自动启用SQLITE_ENABLE_EXPLAIN_COMMENTS编译时选项。
- en: '**SQLITE_ENABLE_FTS3**'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_FTS3**'
- en: When this option is defined in the [amalgamation](amalgamation.html), versions
    3 and 4 of the full-text search engine are added to the build automatically.
  id: totrans-283
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当此选项在[合并](amalgamation.html)中定义时，全文搜索引擎的第3版和第4版将自动添加到构建中。
- en: '**SQLITE_ENABLE_FTS3_PARENTHESIS**'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_FTS3_PARENTHESIS**'
- en: This option modifies the query pattern parser in FTS3 such that it supports
    operators AND and NOT (in addition to the usual OR and NEAR) and also allows query
    expressions to contain nested parenthesis.
  id: totrans-285
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项修改了FTS3中的查询模式解析器，使其支持AND和NOT操作符（除了通常的OR和NEAR），并允许查询表达式包含嵌套括号。
- en: '**SQLITE_ENABLE_FTS3_TOKENIZER**'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_FTS3_TOKENIZER**'
- en: This option enables the two-argument version of the [fts3_tokenizer()](fts3.html#f3tknzr)
    interface. The second argument to fts3_tokenizer() is suppose to be a pointer
    to a function (encoded as a BLOB) that implements an application defined tokenizer.
    If hostile actors are able to run the two-argument version of fts3_tokenizer()
    with an arbitrary second argument, they could use crash or take control of the
    process.
  id: totrans-287
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用了[fts3_tokenizer()](fts3.html#f3tknzr)接口的双参数版本。fts3_tokenizer()的第二个参数应该是一个指向实现应用程序定义的分词器的函数（以BLOB编码）。如果恶意行为者能够使用任意的第二个参数运行fts3_tokenizer()的双参数版本，则可能导致崩溃或接管进程。
- en: ''
  id: totrans-288
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Because of security concerns, the two-argument fts3_tokenizer() feature was
    disabled beginning with [Version 3.11.0](releaselog/3_11_0.html) (2016-02-15)
    unless this compile-time option is used. [Version 3.12.0](releaselog/3_12_0.html)
    (2016-03-29) added the [sqlite3_db_config](c3ref/db_config.html)(db,[SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER](c3ref/c_dbconfig_defensive.html#sqlitedbconfigenablefts3tokenizer),1,0)
    interface that activates the two-argument version of [fts3_tokenizer()](fts3.html#f3tknzr)
    for a specific [database connection](c3ref/sqlite3.html) at run-time.
  id: totrans-289
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 出于安全考虑，除非使用此编译时选项，否则从[版本3.11.0](releaselog/3_11_0.html)（2016-02-15）开始，将禁用fts3_tokenizer()的双参数功能。[版本3.12.0](releaselog/3_12_0.html)（2016-03-29）添加了[sqlite3_db_config](c3ref/db_config.html)(db,[SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER](c3ref/c_dbconfig_defensive.html#sqlitedbconfigenablefts3tokenizer),1,0)接口，用于在运行时激活[fts3_tokenizer()](fts3.html#f3tknzr)的双参数版本，适用于特定的[数据库连接](c3ref/sqlite3.html)。
- en: '**SQLITE_ENABLE_FTS4**'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_FTS4**'
- en: When this option is defined in the [amalgamation](amalgamation.html), versions
    3 and 4 of the full-text search engine are added to the build automatically.
  id: totrans-291
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当此选项在[合并](amalgamation.html)中定义时，全文搜索引擎的第3版和第4版将自动添加到构建中。
- en: '**SQLITE_ENABLE_FTS5**'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_FTS5**'
- en: When this option is defined in the [amalgamation](amalgamation.html), versions
    5 of the full-text search engine ([fts5](fts5.html)) is added to the build automatically.
  id: totrans-293
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当此选项在[合并](amalgamation.html)中定义时，全文搜索引擎的第5版（[fts5](fts5.html)）将自动添加到构建中。
- en: '**SQLITE_ENABLE_GEOPOLY**'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_GEOPOLY**'
- en: When this option is defined in the [amalgamation](amalgamation.html), the [Geopoly
    extension](geopoly.html) is included in the build.
  id: totrans-295
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当此选项在[合并](amalgamation.html)中定义时，[Geopoly扩展](geopoly.html)将包含在构建中。
- en: '**SQLITE_ENABLE_HIDDEN_COLUMNS**'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_HIDDEN_COLUMNS**'
- en: When this option is defined in the [amalgamation](amalgamation.html), The [hidden
    columns](vtab.html#hiddencol) feature is enabled for virtual tables.
  id: totrans-297
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当在[合并](amalgamation.html)中定义此选项时，虚拟表启用了[隐藏列](vtab.html#hiddencol)功能。
- en: '**SQLITE_ENABLE_ICU**'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_ICU**'
- en: This option causes the [International Components for Unicode](https://icu.unicode.org)
    or "ICU" extension to SQLite to be added to the build.
  id: totrans-299
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项导致向 SQLite 中添加[国际组件](https://icu.unicode.org)或 "ICU" 扩展。
- en: '**SQLITE_ENABLE_IOTRACE**'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_IOTRACE**'
- en: When both the SQLite core and the [Command Line Interface](cli.html) (CLI) are
    both compiled with this option, then the CLI provides an extra command named ".iotrace"
    that provides a low-level log of I/O activity. This option is experimental and
    may be discontinued in a future release.
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当 SQLite 核心和[命令行界面](cli.html)（CLI）同时使用此选项编译时，CLI 提供一个名为 ".iotrace" 的额外命令，用于提供
    I/O 活动的低级日志。此选项是实验性的，可能在将来的版本中停止支持。
- en: '**SQLITE_ENABLE_MATH_FUNCTIONS**'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_MATH_FUNCTIONS**'
- en: This macro enables the [built-in SQL math functions](lang_mathfunc.html). This
    option is automatically added to the Makefile by the configure script on unix
    platforms, unless the --disable-math option is used. This option is also included
    on Windows builds using the "Makefile.msc" makefile for nmake.
  id: totrans-303
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏启用了[内置 SQL 数学函数](lang_mathfunc.html)。此选项会自动添加到 Unix 平台上的 Makefile 中的 configure
    脚本中，除非使用 --disable-math 选项。在使用 "Makefile.msc" 为 nmake 构建的 Windows 构建中也包括此选项。
- en: '**SQLITE_ENABLE_JSON1**'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_JSON1**'
- en: This compile-time option is a no-op. Prior to SQLite version 3.38.0 (2022-02-22),
    it was necessary to compile with this option in order to include the [JSON SQL
    functions](json1.html) in the build. However, beginning with SQLite version 3.38.0,
    those functions are included by default. Use the [-DSQLITE_OMIT_JSON](compile.html#omit_json)
    option to omit them.
  id: totrans-305
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个编译时选项是一个无操作。在 SQLite 版本 3.38.0（2022-02-22）之前，需要编译这个选项才能在构建中包含[JSON SQL 函数](json1.html)。然而，从
    SQLite 版本 3.38.0 开始，这些函数默认包含在内。使用 [-DSQLITE_OMIT_JSON](compile.html#omit_json)
    选项来排除它们。
- en: '**SQLITE_ENABLE_LOCKING_STYLE**'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_LOCKING_STYLE**'
- en: 'This option enables additional logic in the OS interface layer for Mac OS X.
    The additional logic attempts to determine the type of the underlying filesystem
    and choose and alternative locking strategy that works correctly for that filesystem
    type. Five locking strategies are available:'
  id: totrans-307
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项在 Mac OS X 的 OS 接口层启用了额外的逻辑。额外的逻辑试图确定底层文件系统的类型，并选择适当的锁定策略，以确保该文件系统类型正常工作。有五种锁定策略可用：
- en: ''
  id: totrans-308
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: POSIX locking style. This is the default locking style and the style used by
    other (non Mac OS X) Unixes. Locks are obtained and released using the fcntl()
    system call.
  id: totrans-309
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX 锁定样式。这是默认的锁定样式，也是其他（非 Mac OS X）Unix 使用的样式。使用 fcntl() 系统调用来获取和释放锁。
- en: AFP locking style. This locking style is used for network file systems that
    use the AFP (Apple Filing Protocol) protocol. Locks are obtained by calling the
    library function _AFPFSSetLock().
  id: totrans-310
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: AFP锁定样式。此锁定样式用于使用AFP（苹果文件共享协议）协议的网络文件系统。通过调用库函数_AFPFSSetLock()获取锁定。
- en: Flock locking style. This is used for file-systems that do not support POSIX
    locking style. Locks are obtained and released using the flock() system call.
  id: totrans-311
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flock锁定样式。此样式用于不支持POSIX锁定样式的文件系统。使用flock()系统调用获取和释放锁定。
- en: Dot-file locking style. This locking style is used when neither flock nor POSIX
    locking styles are supported by the file system. Database locks are obtained by
    creating and entry in the file-system at a well-known location relative to the
    database file (a "dot-file") and relinquished by deleting the same file.
  id: totrans-312
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点文件锁定样式。当文件系统既不支持flock也不支持POSIX锁定样式时，将使用此锁定样式。数据库锁通过在与数据库文件相关的已知位置（一个“点文件”）创建条目来获取，并通过删除相同文件来释放。
- en: No locking style. If none of the above can be supported, this locking style
    is used. No database locking mechanism is used. When this system is used it is
    not safe for a single database to be accessed by multiple clients.
  id: totrans-313
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无锁定样式。如果以上任何一种都无法支持，则使用此锁定样式。不使用任何数据库锁定机制。当使用此系统时，单个数据库不安全地可以由多个客户端访问。
- en: ''
  id: totrans-314
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Additionally, five extra [VFS](vfs.html) implementations are provided as well
    as the default. By specifying one of the extra VFS implementations when calling
    [sqlite3_open_v2()](c3ref/open.html), an application may bypass the file-system
    detection logic and explicitly select one of the above locking styles. The five
    extra [VFS](vfs.html) implementations are called "unix-posix", "unix-afp", "unix-flock",
    "unix-dotfile" and "unix-none".
  id: totrans-315
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此外，还提供了五种额外的[VFS](vfs.html)实现，以及默认的实现。在调用[sqlite3_open_v2()](c3ref/open.html)时，可以指定其中一种额外的VFS实现，应用程序可以绕过文件系统检测逻辑，显式选择上述五种锁定样式之一。这五种额外的[VFS](vfs.html)实现分别称为"unix-posix"、"unix-afp"、"unix-flock"、"unix-dotfile"和"unix-none"。
- en: '**SQLITE_ENABLE_MEMORY_MANAGEMENT**'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_MEMORY_MANAGEMENT**'
- en: This option adds extra logic to SQLite that allows it to release unused memory
    upon request. This option must be enabled in order for the [sqlite3_release_memory()](c3ref/release_memory.html)
    interface to work. If this compile-time option is not used, the [sqlite3_release_memory()](c3ref/release_memory.html)
    interface is a no-op.
  id: totrans-317
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项增加了SQLite的额外逻辑，允许其在请求时释放未使用的内存。必须启用此编译时选项才能使[sqlite3_release_memory()](c3ref/release_memory.html)接口工作。如果未使用此编译时选项，则[sqlite3_release_memory()](c3ref/release_memory.html)接口将是一个空操作。
- en: '**SQLITE_ENABLE_MEMSYS3**'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_MEMSYS3**'
- en: This option includes code in SQLite that implements an alternative memory allocator.
    This alternative memory allocator is only engaged when the [SQLITE_CONFIG_HEAP](c3ref/c_config_covering_index_scan.html#sqliteconfigheap)
    option to [sqlite3_config()](c3ref/config.html) is used to supply a large chunk
    of memory from which all memory allocations are taken. The MEMSYS3 memory allocator
    uses a hybrid allocation algorithm patterned after dlmalloc(). Only one of SQLITE_ENABLE_MEMSYS3
    and SQLITE_ENABLE_MEMSYS5 may be enabled at once.
  id: totrans-319
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项包含了在SQLite中实现替代内存分配器的代码。当使用[sqlite3_config()](c3ref/config.html)中的[SQLITE_CONFIG_HEAP](c3ref/c_config_covering_index_scan.html#sqliteconfigheap)选项提供一个大内存块作为所有内存分配的来源时，才会启用这个替代内存分配器。MEMSYS3内存分配器使用了一种混合分配算法，模仿了dlmalloc()。SQLITE_ENABLE_MEMSYS3和SQLITE_ENABLE_MEMSYS5只能同时启用一个。
- en: '**SQLITE_ENABLE_MEMSYS5**'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_MEMSYS5**'
- en: This option includes code in SQLite that implements an alternative memory allocator.
    This alternative memory allocator is only engaged when the [SQLITE_CONFIG_HEAP](c3ref/c_config_covering_index_scan.html#sqliteconfigheap)
    option to [sqlite3_config()](c3ref/config.html) is used to supply a large chunk
    of memory from which all memory allocations are taken. The MEMSYS5 module rounds
    all allocations up to the next power of two and uses a first-fit, buddy-allocator
    algorithm that provides strong guarantees against fragmentation and breakdown
    subject to certain operating constraints.
  id: totrans-321
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项包含了在SQLite中实现替代内存分配器的代码。当使用[sqlite3_config()](c3ref/config.html)中的[SQLITE_CONFIG_HEAP](c3ref/c_config_covering_index_scan.html#sqliteconfigheap)选项提供一个大内存块作为所有内存分配的来源时，才会启用这个替代内存分配器。MEMSYS5模块将所有分配都舍入到最接近的二的幂，并使用首次适配、伙伴分配算法，以在某些操作限制条件下提供强大的防碎片化和崩溃保证。
- en: '**SQLITE_ENABLE_NORMALIZE**'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_NORMALIZE**'
- en: This option includes the [sqlite3_normalized_sql()](c3ref/expanded_sql.html)
    API.
  id: totrans-323
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项包含了[sqlite3_normalized_sql()](c3ref/expanded_sql.html) API。
- en: '**SQLITE_ENABLE_NULL_TRIM**'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_NULL_TRIM**'
- en: This option enables an optimization that omits NULL columns at the ends of rows,
    for a space savings on disk.
  id: totrans-325
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用了一种优化，可以在磁盘上节省空间，省略行末尾的NULL列。
- en: ''
  id: totrans-326
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Databases generated with this option enabled are not readable by SQLite version
    3.1.6 (2005-03-17) and earlier. Also, databases generated with this option enabled
    are prone to triggering the [e6e962d6b0f06f46](https://www.sqlite.org/src/info/e6e962d6b0f06f46e)
    bug in the [sqlite3_blob_reopen()](c3ref/blob_reopen.html) interface. For those
    reasons, this optimization is disabled by default. However, this optimization
    may be enabled by default in a future release of SQLite.
  id: totrans-327
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用此选项生成的数据库无法被SQLite版本3.1.6（2005-03-17）及更早的版本读取。此外，使用此选项生成的数据库可能会触发[sqlite3_blob_reopen()](c3ref/blob_reopen.html)接口中的[e6e962d6b0f06f46](https://www.sqlite.org/src/info/e6e962d6b0f06f46e)漏洞。因此，默认情况下禁用此优化。不过，未来的SQLite版本可能会默认启用此优化。
- en: '**SQLITE_ENABLE_OFFSET_SQL_FUNC**'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_OFFSET_SQL_FUNC**'
- en: This option enables support for the [sqlite_offset(X)](lang_corefunc.html#sqlite_offset)
    SQL function.
  id: totrans-329
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用了[sqlite_offset(X)](lang_corefunc.html#sqlite_offset) SQL函数的支持。
- en: ''
  id: totrans-330
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [sqlite_offset(X)](lang_corefunc.html#sqlite_offset) SQL function requires
    a new interface on the B-tree storage engine, a new opcode in the [virtual machine](opcode.html)
    that runs SQL statements, and a new conditional in a critical path of the code
    generator. To avoid that overhead in applications that do not need the utility
    of sqlite_offset(X), the function is disabled by default.
  id: totrans-331
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[sqlite_offset(X)](lang_corefunc.html#sqlite_offset) SQL函数需要B-tree存储引擎上的新接口，在运行SQL语句的[虚拟机](opcode.html)中需要一个新的操作码，并且在代码生成器的关键路径中需要一个新的条件。为了避免在不需要sqlite_offset(X)的应用程序中出现的开销，该函数默认情况下被禁用。'
- en: '**SQLITE_ENABLE_PREUPDATE_HOOK**'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_PREUPDATE_HOOK**'
- en: This option enables [several new APIs](c3ref/preupdate_blobwrite.html) that
    provide callbacks prior to any change to a [rowid table](rowidtable.html). The
    callbacks can be used to record the state of the row before the change occurs.
  id: totrans-333
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用了[几个新的API](c3ref/preupdate_blobwrite.html)，它们在对[行ID表](rowidtable.html)进行任何更改之前提供回调。这些回调可用于记录变更发生之前行的状态。
- en: ''
  id: totrans-334
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The action of the preupdate hook is similar to the [update hook](c3ref/update_hook.html)
    except that the callback is invoked before the change, not afterwards, and the
    preupdate hook interfaces are omitted unless this compile-time option is used.
  id: totrans-335
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Preupdate钩子的操作类似于[更新钩子](c3ref/update_hook.html)，但是回调是在变更之前调用的，而不是之后，并且只有在使用了这个编译时选项时才会提供preupdate钩子接口。
- en: ''
  id: totrans-336
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The preupdate hook interfaces were originally added to support the [session](sessionintro.html)
    extension.
  id: totrans-337
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最初添加preupdate钩子接口是为了支持[session扩展](sessionintro.html)。
- en: '**SQLITE_ENABLE_QPSG**'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_QPSG**'
- en: This option causes the [query planner stability guarantee](queryplanner-ng.html#qpstab)
    (QPSG) to be on by default. Normally the QPSG is off and must be activated at
    run-time using the [SQLITE_DBCONFIG_ENABLE_QPSG](c3ref/c_dbconfig_defensive.html#sqlitedbconfigenableqpsg)
    option to the [sqlite3_db_config()](c3ref/db_config.html) interface.
  id: totrans-339
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项导致查询规划器稳定性保证(QPSG)默认启用。通常情况下，QPSG处于关闭状态，必须在运行时使用[SQLITE_DBCONFIG_ENABLE_QPSG](c3ref/c_dbconfig_defensive.html#sqlitedbconfigenableqpsg)选项通过[sqlite3_db_config()](c3ref/db_config.html)接口激活。
- en: '**SQLITE_ENABLE_RBU**'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_RBU**'
- en: Enable the code the implements the [RBU extension](rbu.html).
  id: totrans-341
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 启用实现[RBU扩展](rbu.html)的代码。
- en: '**SQLITE_ENABLE_RTREE**'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_RTREE**'
- en: This option causes SQLite to include support for the [R*Tree index extension](rtree.html).
  id: totrans-343
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项导致SQLite包含对[R*Tree索引扩展](rtree.html)的支持。
- en: '**SQLITE_ENABLE_SESSION**'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_SESSION**'
- en: This option enables the [session extension](sessionintro.html).
  id: totrans-345
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用了[session扩展](sessionintro.html)。
- en: '**SQLITE_ENABLE_SNAPSHOT**'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_SNAPSHOT**'
- en: 'This option enables the code to support the [sqlite3_snapshot](c3ref/snapshot.html)
    object and its related interfaces:'
  id: totrans-347
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用了支持[sqlite3_snapshot](c3ref/snapshot.html)对象及其相关接口的代码：
- en: ''
  id: totrans-348
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[sqlite3_snapshot_get()](c3ref/snapshot_get.html) (constructor)'
  id: totrans-349
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_snapshot_get()](c3ref/snapshot_get.html) (构造函数)'
- en: '[sqlite3_snapshot_free()](c3ref/snapshot_free.html) (destructor)'
  id: totrans-350
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_snapshot_free()](c3ref/snapshot_free.html)（析构函数）'
- en: '[sqlite3_snapshot_open()](c3ref/snapshot_open.html)'
  id: totrans-351
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_snapshot_open()](c3ref/snapshot_open.html)'
- en: '[sqlite3_snapshot_cmp()](c3ref/snapshot_cmp.html)'
  id: totrans-352
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_snapshot_cmp()](c3ref/snapshot_cmp.html)'
- en: '[sqlite3_snapshot_recover()](c3ref/snapshot_recover.html)'
  id: totrans-353
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_snapshot_recover()](c3ref/snapshot_recover.html)'
- en: '**SQLITE_ENABLE_SORTER_REFERENCES**'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_SORTER_REFERENCES**'
- en: This option activates an optimization that reduces the memory required by the
    sorter at the cost of doing additional B-tree lookups after the sort has occurred.
  id: totrans-355
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项激活了一种优化，减少了排序器所需的内存，但会在排序后进行额外的 B 树查找。
- en: ''
  id: totrans-356
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The default sorting procedure is to gather all information that will ultimately
    be output into a "record" and pass that complete record to the sorter. But in
    some cases, for example if some of the output columns consists of large BLOB values,
    the size of the each record can be large, which means that the sorter has to either
    use more memory, and/or write more content to temporary storage.
  id: totrans-357
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 默认的排序过程是将最终输出的所有信息聚集到一个“记录”中，并将完整的记录传递给排序器。但在某些情况下，例如如果一些输出列包含大的 BLOB 值，每个记录的大小可能会很大，这意味着排序器必须使用更多的内存和/或将更多内容写入临时存储。
- en: ''
  id: totrans-358
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When SQLITE_ENABLE_SORTER_REFERENCES is enabled, the records passed to the sorter
    often contain only a [ROWID](lang_createtable.html#rowid) value. Such records
    are much smaller. This means the sorter has much less "payload" to deal with and
    can run faster. After sorting has occurred, the ROWID is used to look up the output
    column values in the original table. That requires another search into the table,
    and could potentially result in a slowdown. Or, it might be a performance win,
    depending on how large the values are.
  id: totrans-359
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当启用 SQLITE_ENABLE_SORTER_REFERENCES 时，传递给排序器的记录通常只包含 [ROWID](lang_createtable.html#rowid)
    值。这样的记录要小得多。这意味着排序器处理的“有效载荷”大大减少，因此可以运行得更快。排序完成后，ROWID 用于在原始表中查找输出列的值。这需要再次搜索表，可能导致减速，也可能提升性能，这取决于值的大小。
- en: ''
  id: totrans-360
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Even when the SQLITE_ENABLE_SORTER_REFERENCES compile-time option is on, sorter
    references are still disabled by default. To use sorter references, the application
    must set a sorter reference size threshold using the [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_SORTERREF_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigsorterrefsize))
    interface at start-time.
  id: totrans-361
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 即使在编译时启用了 SQLITE_ENABLE_SORTER_REFERENCES 选项，排序器引用仍然默认禁用。要使用排序器引用，应用程序必须在启动时使用
    [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_SORTERREF_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigsorterrefsize))
    接口设置排序器引用大小阈值。
- en: ''
  id: totrans-362
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Because the SQLite developers do not know whether the SQLITE_ENABLE_SORTER_REFERENCES
    option will help or hurt performance, it is disabled by default at this time (2018-05-04).
    It might be enabled by default in some future release, depending on what is learned
    about its impact on performance.
  id: totrans-363
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因为SQLite开发人员不知道SQLITE_ENABLE_SORTER_REFERENCES选项是否有助于或损害性能，因此当前（2018-05-04）默认情况下禁用。根据对其对性能影响的了解，它可能在未来的某个版本中默认启用。
- en: '**SQLITE_ENABLE_STMT_SCANSTATUS**'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_STMT_SCANSTATUS**'
- en: This option enables the [sqlite3_stmt_scanstatus()](c3ref/stmt_scanstatus.html)
    and [sqlite3_stmt_scanstatus_v2()](c3ref/stmt_scanstatus.html) interfaces. Those
    interfaces are normally omitted from the build because they imposes a performance
    penalty, even on statements that do not use the feature.
  id: totrans-365
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用[sqlite3_stmt_scanstatus()](c3ref/stmt_scanstatus.html)和[sqlite3_stmt_scanstatus_v2()](c3ref/stmt_scanstatus.html)接口。这些接口通常会被从构建中省略，因为它们会对即使不使用该功能的语句也会施加性能惩罚。
- en: '**SQLITE_ENABLE_STMTVTAB**'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_STMTVTAB**'
- en: This compile-time option enables the [SQLITE_STMT virtual table](stmt.html)
    logic.
  id: totrans-367
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此编译时选项启用[SQLITE_STMT虚拟表](stmt.html)逻辑。
- en: '**SQLITE_RTREE_INT_ONLY**'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_RTREE_INT_ONLY**'
- en: This compile-time option is deprecated and untested.
  id: totrans-369
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此编译时选项已被弃用且未经测试。
- en: '**SQLITE_ENABLE_SQLLOG**'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_SQLLOG**'
- en: This option enables extra code (especially the [SQLITE_CONFIG_SQLLOG](c3ref/c_config_covering_index_scan.html#sqliteconfigsqllog)
    option to [sqlite3_config()](c3ref/config.html)) that can be used to create logs
    of all SQLite processing performed by an application. These logs can be useful
    in doing off-line analysis of the behavior of an application, and especially for
    performance analysis. In order for the SQLITE_ENABLE_SQLLOG option to be useful,
    some extra code is required. The ["test_sqllog.c"](https://www.sqlite.org/src/doc/trunk/src/test_sqllog.c)
    source code file in the SQLite source tree is a working example of the required
    extra code. On unix and windows systems, a developer can append the text of the
    "test_sqllog.c" source code file to the end of an "sqlite3.c" amalgamation, recompile
    the application using the -DSQLITE_ENABLE_SQLLOG option, then control logging
    using environment variables. See the header comment on the "test_sqllog.c" source
    file for additional detail.
  id: totrans-371
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用额外的代码（尤其是[SQLITE_CONFIG_SQLLOG](c3ref/c_config_covering_index_scan.html#sqliteconfigsqllog)选项），可用于创建应用程序执行的所有SQLite处理的日志。这些日志对于离线分析应用程序行为特别有用，尤其是用于性能分析。为了使SQLITE_ENABLE_SQLLOG选项有用，需要一些额外的代码。SQLite源代码树中的["test_sqllog.c"](https://www.sqlite.org/src/doc/trunk/src/test_sqllog.c)源代码文件是所需额外代码的工作示例。在Unix和Windows系统上，开发人员可以将"test_sqllog.c"源代码文件的文本附加到"sqlite3.c"合并文件的末尾，使用-DSQLITE_ENABLE_SQLLOG选项重新编译应用程序，然后使用环境变量控制日志记录。有关更多详细信息，请参阅"test_sqllog.c"源文件的标题注释。
- en: '**SQLITE_ENABLE_STAT2**'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_STAT2**'
- en: This option used to cause the [ANALYZE](lang_analyze.html) command to collect
    index histogram data in the **sqlite_stat2** table. But that functionality was
    superseded by [SQLITE_ENABLE_STAT3](compile.html#enable_stat3) as of SQLite [version
    3.7.9](releaselog/3_7_9.html) (2011-11-01). The SQLITE_ENABLE_STAT2 compile-time
    option is now a no-op.
  id: totrans-373
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项曾经导致[ANALYZE](lang_analyze.html)命令在**sqlite_stat2**表中收集索引直方图数据。但此功能在SQLite
    [版本 3.7.9](releaselog/3_7_9.html)（2011-11-01）以后被[SQLITE_ENABLE_STAT3](compile.html#enable_stat3)所取代。现在，SQLITE_ENABLE_STAT2编译时选项已经是无效操作。
- en: '**SQLITE_ENABLE_STAT3**'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_STAT3**'
- en: This option used to cause the [ANALYZE](lang_analyze.html) command to collect
    index histogram data in the **sqlite_stat3** table. But that functionality was
    superseded by [SQLITE_ENABLE_STAT4](compile.html#enable_stat4) as of SQLite [version
    3.8.1](releaselog/3_8_1.html) (2013-10-17). The SQLITE_ENABLE_STAT3 compile-time
    option continued to be supported through [version 3.29.0](releaselog/3_29_0.html)
    (2019-07-10) but has now become a no-op.
  id: totrans-375
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项曾经导致[ANALYZE](lang_analyze.html)命令在**sqlite_stat3**表中收集索引直方图数据。但此功能在SQLite
    [版本 3.8.1](releaselog/3_8_1.html)（2013-10-17）以后被[SQLITE_ENABLE_STAT4](compile.html#enable_stat4)所取代。尽管SQLITE_ENABLE_STAT3编译时选项在[版本
    3.29.0](releaselog/3_29_0.html)（2019-07-10）之前仍然得到支持，但现在已经是无效操作。
- en: '**SQLITE_ENABLE_STAT4**'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_STAT4**'
- en: This option adds additional logic to the [ANALYZE](lang_analyze.html) command
    and to the [query planner](optoverview.html) that can help SQLite to chose a better
    query plan under certain situations. The [ANALYZE](lang_analyze.html) command
    is enhanced to collect histogram data from all columns of every index and store
    that data in the [sqlite_stat4](fileformat2.html#stat4tab) table. The query planner
    will then use the histogram data to help it make better index choices. The downside
    of this compile-time option is that it violates the [query planner stability guarantee](queryplanner-ng.html#qpstab)
    making it more difficult to ensure consistent performance in mass-produced applications.
  id: totrans-377
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项为[ANALYZE](lang_analyze.html)命令和[查询规划器](optoverview.html)增加了额外的逻辑，有助于SQLite在特定情况下选择更好的查询计划。[ANALYZE](lang_analyze.html)命令被改进以从每个索引的所有列收集直方图数据，并将这些数据存储在[sqlite_stat4](fileformat2.html#stat4tab)表中。查询规划器随后将使用直方图数据来帮助它做出更好的索引选择。这个编译时选项的缺点是违反了[查询规划器稳定性保证](queryplanner-ng.html#qpstab)，使得在大规模生产应用中确保一致的性能变得更加困难。
- en: ''
  id: totrans-378
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SQLITE_ENABLE_STAT4 is an enhancement of [SQLITE_ENABLE_STAT3](compile.html#enable_stat3).
    STAT3 only recorded histogram data for the left-most column of each index whereas
    the STAT4 enhancement records histogram data from all columns of each index. The
    [SQLITE_ENABLE_STAT3](compile.html#enable_stat3) compile-time option has become
    a no-op.
  id: totrans-379
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLITE_ENABLE_STAT4是[SQLITE_ENABLE_STAT3](compile.html#enable_stat3)的增强版本。STAT3仅为每个索引的最左列记录直方图数据，而STAT4增强版记录每个索引的所有列的直方图数据。[SQLITE_ENABLE_STAT3](compile.html#enable_stat3)编译时选项现在已经是无效操作。
- en: '**SQLITE_ENABLE_TREE_EXPLAIN**'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_TREE_EXPLAIN**'
- en: This compile-time option is no longer used.
  id: totrans-381
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此编译时选项已不再使用。
- en: '**SQLITE_ENABLE_UPDATE_DELETE_LIMIT**'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_UPDATE_DELETE_LIMIT**'
- en: This option enables an optional ORDER BY and LIMIT clause on [UPDATE](lang_update.html)
    and [DELETE](lang_delete.html) statements.
  id: totrans-383
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项允许在[UPDATE](lang_update.html)和[DELETE](lang_delete.html)语句中使用可选的ORDER BY和LIMIT子句。
- en: ''
  id: totrans-384
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If this option is defined, then it must also be defined when using the [Lemon
    parser generator](lemon.html) tool to generate a parse.c file. Because of this,
    this option may only be used when the library is built from source, not from the
    [amalgamation](amalgamation.html) or from the collection of pre-packaged C files
    provided for non-Unix like platforms on the website.
  id: totrans-385
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了此选项，则在使用Lemon解析器生成器生成parse.c文件时也必须定义。因此，此选项仅在从源代码构建库时可用，而不适用于从[合并版本](amalgamation.html)或网站上为非类Unix平台提供的预打包的C文件集合构建时使用。
- en: '**SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION**'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION**'
- en: When the SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION compile-time option is activated,
    SQLite will suppress "unknown function" errors when running an [EXPLAIN](lang_explain.html)
    or [EXPLAIN QUERY PLAN](eqp.html). Instead of throwing an error, SQLite will insert
    a substitute no-op function named "unknown()". The substitution of "unknown()"
    in place of unrecognized functions only occurs on [EXPLAIN](lang_explain.html)
    and [EXPLAIN QUERY PLAN](eqp.html), not on ordinary statements.
  id: totrans-387
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当启用了编译时选项SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION时，在运行[EXPLAIN](lang_explain.html)或[EXPLAIN
    QUERY PLAN](eqp.html)时，SQLite将抑制“未知函数”错误。在抛出错误之前，SQLite会插入一个名为“unknown()”的替代空操作函数。仅在[EXPLAIN](lang_explain.html)和[EXPLAIN
    QUERY PLAN](eqp.html)上才会用“unknown()”替换未识别的函数，而在普通语句中不会发生。
- en: ''
  id: totrans-388
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When used in the [command-line shell](cli.html), the SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION
    feature allows SQL text that contains application-defined functions to be pasted
    into the shell for analysis and debugging without having to create and load an
    extension that implements the application-defined functions.
  id: totrans-389
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当在[命令行 shell](cli.html)中使用时，SQLITE_ENABLE_UNKNOWN_SQL_FUNCTION功能允许将包含应用程序定义函数的
    SQL 文本粘贴到 shell 中进行分析和调试，而无需创建并加载实现应用程序定义函数的扩展。
- en: '**SQLITE_ENABLE_UNLOCK_NOTIFY**'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ENABLE_UNLOCK_NOTIFY**'
- en: This option enables the [sqlite3_unlock_notify()](c3ref/unlock_notify.html)
    interface and its associated functionality. See the documentation titled [Using
    the SQLite Unlock Notification Feature](unlock_notify.html) for additional information.
  id: totrans-391
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用了[sqlite3_unlock_notify()](c3ref/unlock_notify.html)接口及其相关功能。请参阅标题为[Using
    the SQLite Unlock Notification Feature](unlock_notify.html)的文档获取更多信息。
- en: '**SQLITE_INTROSPECTION_PRAGMAS**'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_INTROSPECTION_PRAGMAS**'
- en: This option is obsolete. It used to enable some extra some extra PRAGMA statements
    such as [PRAGMA function_list](pragma.html#pragma_function_list), [PRAGMA module_list](pragma.html#pragma_module_list),
    and [PRAGMA pragma_list](pragma.html#pragma_pragma_list), but those pragmas are
    now all enabled by default. See [SQLITE_OMIT_INTROSPECTION_PRAGMAS](compile.html#omit_introspection_pragmas).
  id: totrans-393
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项已过时。曾经启用了一些额外的 PRAGMA 语句，如[PRAGMA function_list](pragma.html#pragma_function_list)，[PRAGMA
    module_list](pragma.html#pragma_module_list)和[PRAGMA pragma_list](pragma.html#pragma_pragma_list)，但这些
    PRAGMA 现在都默认启用。参见[SQLITE_OMIT_INTROSPECTION_PRAGMAS](compile.html#omit_introspection_pragmas)。
- en: '**SQLITE_SOUNDEX**'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_SOUNDEX**'
- en: This option enables the [soundex() SQL function](lang_corefunc.html#soundex).
  id: totrans-395
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项启用了[soundex() SQL 函数](lang_corefunc.html#soundex)。
- en: '**SQLITE_STRICT_SUBTYPE=1**'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_STRICT_SUBTYPE=1**'
- en: This option causes [application-defined SQL functions](appfunc.html) to raise
    an SQL error if they invoke the [sqlite3_result_subtype()](c3ref/result_subtype.html)
    interface but where not registered with the [SQLITE_RESULT_SUBTYPE](c3ref/c_deterministic.html#sqliteresultsubtype)
    property. This recommended option helps to identify problems in the implementation
    of application-defined SQL functions early in the development cycle.
  id: totrans-397
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项导致[应用定义的 SQL 函数](appfunc.html)在调用[sqlite3_result_subtype()](c3ref/result_subtype.html)接口时引发
    SQL 错误，但未使用[SQLITE_RESULT_SUBTYPE](c3ref/c_deterministic.html#sqliteresultsubtype)属性注册。这个推荐选项有助于在开发周期的早期识别应用程序定义的
    SQL 函数实现中的问题。
- en: '**SQLITE_USE_ALLOCA**'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_USE_ALLOCA**'
- en: If this option is enabled, then the alloca() memory allocator will be used in
    a few situations where it is appropriate. This results in a slightly smaller and
    faster binary. The SQLITE_USE_ALLOCA compile-time only works, of course, on systems
    that support alloca().
  id: totrans-399
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果启用此选项，则在适当的情况下将使用alloca()内存分配器。这将导致二进制文件稍小且速度稍快。当然，SQLITE_USE_ALLOCA 编译时仅在支持alloca()的系统上有效。
- en: '**SQLITE_USE_FCNTL_TRACE**'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_USE_FCNTL_TRACE**'
- en: This option causes SQLite to issue extra [SQLITE_FCNTL_TRACE](c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntltrace)
    file controls to provide supplementary information to the VFS. The "vfslog.c"
    extension makes use of this to provide enhanced logs of VFS activity.
  id: totrans-401
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项导致 SQLite 发出额外的[SQLITE_FCNTL_TRACE](c3ref/c_fcntl_begin_atomic_write.html#sqlitefcntltrace)文件控制，以向
    VFS 提供补充信息。"vfslog.c" 扩展程序利用此功能提供增强的 VFS 活动日志。
- en: '**SQLITE_USE_SEH**'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_USE_SEH**'
- en: This option used to be a toggle to enable what is now controlled by [SQLITE_OMIT_SEH](compile.html#omit_seh).
    Client code should not use this define, as it is used internally by the library.
  id: totrans-403
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项曾经是一个开关，用于启用现在由[SQLITE_OMIT_SEH](compile.html#omit_seh)控制的功能。客户端代码不应使用此定义，因为它仅在库内部使用。
- en: '**SQLITE_HAVE_ZLIB**'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_HAVE_ZLIB**'
- en: This option causes some extensions to link against the [zlib compression library](https://zlib.net).
  id: totrans-405
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项导致某些扩展链接到[zlib 压缩库](https://zlib.net)。
- en: ''
  id: totrans-406
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This option has no effect on the SQLite core. It is only used by extensions.
    This is option is necessary for the compression and decompression functions that
    are part of [SQL Archive](sqlar.html) support in the [command-line shell](cli.html).
  id: totrans-407
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项对 SQLite 核心没有影响，仅用于扩展。此选项对于 [SQL Archive](sqlar.html) 在 [命令行 shell](cli.html)
    中支持的压缩和解压缩函数是必需的。
- en: ''
  id: totrans-408
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When compiling with this option, it will normally be necessary to add a linker
    option to include the zlib library in the build. Normal this option is "-lz" but
    might be different on different systems.
  id: totrans-409
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用此选项进行编译时，通常需要添加一个链接器选项以将 zlib 库包含到构建中。通常这个选项是 "-lz"，但在不同系统上可能会有所不同。
- en: ''
  id: totrans-410
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When building with MSVC on Windows systems, one can put the zlib source code
    in the compat/zlib subdirectory of the source tree and then add the USE_ZLIB=1
    option to the nmake command to cause the Makefile.msc to automatically build and
    use an appropriate zlib library implementation.
  id: totrans-411
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Windows 系统上使用 MSVC 编译时，可以将 zlib 源代码放在源树的 compat/zlib 子目录中，然后在 nmake 命令中添加
    USE_ZLIB=1 选项，使得 Makefile.msc 自动构建和使用适当的 zlib 库实现。
- en: '**YYTRACKMAXSTACKDEPTH**'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '**YYTRACKMAXSTACKDEPTH**'
- en: This option causes the LALR(1) parser stack depth to be tracked and reported
    using the [sqlite3_status](c3ref/status.html)([SQLITE_STATUS_PARSER_STACK](c3ref/c_status_malloc_count.html#sqlitestatusparserstack),...)
    interface. SQLite's LALR(1) parser has a fixed stack depth (determined at compile-time
    using the [YYSTACKDEPTH](compile.html#yystackdepth) options). This option can
    be used to help determine if an application is getting close to exceeding the
    maximum LALR(1) stack depth.
  id: totrans-413
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项使得 LALR(1) 解析器的堆栈深度可以通过 [sqlite3_status](c3ref/status.html)([SQLITE_STATUS_PARSER_STACK](c3ref/c_status_malloc_count.html#sqlitestatusparserstack),...)
    接口进行跟踪和报告。SQLite 的 LALR(1) 解析器具有固定的堆栈深度（在编译时使用 [YYSTACKDEPTH](compile.html#yystackdepth)
    选项确定）。此选项可用于帮助确定应用程序是否接近超过最大的 LALR(1) 堆栈深度。
- en: 8\. Options To Disable Features Normally Turned On
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. 禁用通常开启的功能的选项
- en: '**SQLITE_DISABLE_LFS**'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DISABLE_LFS**'
- en: If this C-preprocessor macro is defined, large file support is disabled.
  id: totrans-416
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了这个 C 预处理宏，将禁用大文件支持。
- en: '**SQLITE_DISABLE_DIRSYNC**'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DISABLE_DIRSYNC**'
- en: If this C-preprocessor macro is defined, directory syncs are disabled. SQLite
    typically attempts to sync the parent directory when a file is deleted to ensure
    the directory entries are updated immediately on disk.
  id: totrans-418
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了这个 C 预处理宏，目录同步将被禁用。SQLite 通常在删除文件时尝试同步父目录，以确保目录条目立即更新到磁盘上。
- en: '**SQLITE_DISABLE_FTS3_UNICODE**'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DISABLE_FTS3_UNICODE**'
- en: If this C-preprocessor macro is defined, the [unicode61](fts3.html#unicode61)
    tokenizer in [FTS3](fts3.html) is omitted from the build and is unavailable to
    applications.
  id: totrans-420
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了这个 C 预处理宏，则在构建中会省略 [FTS3](fts3.html) 中的 [unicode61](fts3.html#unicode61)
    分词器，并且对应用程序不可用。
- en: '**SQLITE_DISABLE_FTS4_DEFERRED**'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DISABLE_FTS4_DEFERRED**'
- en: If this C-preprocessor macro disables the "deferred token" optimization in [FTS4](fts3.html#fts4).
    The "deferred token" optimization avoids loading massive posting lists for terms
    that are in most documents of the collection and instead simply scans for those
    tokens in the document source. [FTS4](fts3.html#fts4) should get exactly the same
    answer both with and without this optimization.
  id: totrans-422
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果此 C 预处理宏禁用了[FTS4](fts3.html#fts4)中的“延迟标记”优化。“延迟标记”优化避免了加载集合中大部分文档中存在的术语的大型
    posting 列表，而是在文档源中简单地扫描这些标记。[FTS4](fts3.html#fts4)在有或无此优化的情况下应该得到完全相同的答案。
- en: '**SQLITE_DISABLE_INTRINSIC**'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DISABLE_INTRINSIC**'
- en: This option disables the use of compiler-specific built-in functions such as
    __builtin_bswap32() and __builtin_add_overflow() in GCC and Clang, or _byteswap_ulong()
    and _ReadWriteBarrier() with MSVC.
  id: totrans-424
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项禁用了在 GCC 和 Clang 中的特定于编译器的内建函数的使用，例如 __builtin_bswap32() 和 __builtin_add_overflow()，或者在
    MSVC 中的 _byteswap_ulong() 和 _ReadWriteBarrier()。
- en: '**SQLITE_DISABLE_PAGECACHE_OVERFLOW_STATS**'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DISABLE_PAGECACHE_OVERFLOW_STATS**'
- en: This option disables the collection of the [sqlite3_status()](c3ref/status.html)
    [SQLITE_STATUS_PAGECACHE_OVERFLOW](c3ref/c_status_malloc_count.html#sqlitestatuspagecacheoverflow)
    and [SQLITE_STATUS_PAGECACHE_SIZE](c3ref/c_status_malloc_count.html#sqlitestatuspagecachesize)
    statistics. Setting this option has been shown to increase performance in high
    concurrency multi-threaded applications.
  id: totrans-426
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项禁用了对[sqlite3_status()](c3ref/status.html)的收集，其中包括[SQLITE_STATUS_PAGECACHE_OVERFLOW](c3ref/c_status_malloc_count.html#sqlitestatuspagecacheoverflow)和[SQLITE_STATUS_PAGECACHE_SIZE](c3ref/c_status_malloc_count.html#sqlitestatuspagecachesize)统计信息。设置此选项已显示在高并发多线程应用中提高性能。
- en: 9\. Options To Omit Features
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9\. 省略功能的选项
- en: The following options can be used to [reduce the size of the compiled library](footprint.html)
    by omitting unused features. This is probably only useful in embedded systems
    where space is especially tight, as even with all features included the SQLite
    library is relatively small. Don't forget to tell your compiler to optimize for
    binary size! (the -Os option if using GCC). Telling your compiler to optimize
    for size usually has a much larger impact on library footprint than employing
    any of these compile-time options. You should also verify that [debugging options](#debugoptions)
    are disabled.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的选项可以通过省略未使用的功能来[减少编译库的大小](footprint.html)。这可能只在嵌入式系统中特别空间紧张时才有用，因为即使包含所有功能，SQLite
    库也相对较小。不要忘记告诉你的编译器优化二进制大小！（如果使用 GCC，则使用 -Os 选项）。告诉编译器优化大小通常比使用任何这些编译时选项的影响要大得多。你还应该验证[调试选项](#debugoptions)是否已禁用。
- en: 'The macros in this section do not require values. The following compilation
    switches all have the same effect:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的宏不需要值。以下编译开关都有相同的效果：
- en: -DSQLITE_OMIT_ALTERTABLE
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: -DSQLITE_OMIT_ALTERTABLE
- en: -DSQLITE_OMIT_ALTERTABLE=1
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: -DSQLITE_OMIT_ALTERTABLE=1
- en: -DSQLITE_OMIT_ALTERTABLE=0
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: -DSQLITE_OMIT_ALTERTABLE=0
- en: If any of these options are defined, then the same set of SQLITE_OMIT_* options
    must also be defined when using the [Lemon parser generator](lemon.html) tool
    to generate the parse.c file and when compiling the 'mkkeywordhash' tool which
    generates the keywordhash.h file. Because of this, these options may only be used
    when the library is built from canonical source, not from the [amalgamation](amalgamation.html).
    Some SQLITE_OMIT_* options might work, or appear to work, when used with the [amalgamation](amalgamation.html).
    But this is not guaranteed. In general, always compile from canonical sources
    in order to take advantage of SQLITE_OMIT_* options.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 如果定义了任何这些选项，那么在使用 [Lemon parser generator](lemon.html) 工具生成 parse.c 文件以及编译生成
    keywordhash.h 文件的 'mkkeywordhash' 工具时，必须同时定义相同的 SQLITE_OMIT_* 选项。因此，这些选项只能在库从规范源构建时使用，而不是从
    [合并](amalgamation.html) 构建。一些 SQLITE_OMIT_* 选项可能在与 [合并](amalgamation.html) 使用时工作，或者看起来工作。但这并不保证。总的来说，为了利用
    SQLITE_OMIT_* 选项，始终从规范源文件编译。
- en: '***Important Note:** The SQLITE_OMIT_* options may not work with the [amalgamation](amalgamation.html).
    SQLITE_OMIT_* compile-time options usually work correctly only when SQLite is
    built from canonical source files.*'
  id: totrans-434
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***重要提示：** SQLITE_OMIT_* 选项可能不适用于 [合并](amalgamation.html)。SQLITE_OMIT_* 编译时选项通常仅在从规范源文件构建
    SQLite 时才能正常工作。*'
- en: 'Special versions of the SQLite amalgamation that do work with a predetermined
    set of SQLITE_OMIT_* options can be generated. To do so, make a copy of the Makefile.linux-gcc
    makefile template in the canonical source code distribution. Change the name of
    your copy to simply "Makefile". Then edit "Makefile" to set up appropriate compile-time
    options. Then type:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 可以生成特定版本的 SQLite 合并，它们可以使用预定的一组 SQLITE_OMIT_* 选项。要执行此操作，请在规范源代码分发中复制 Makefile.linux-gcc
    的 makefile 模板。将您的副本命名为简单的 "Makefile"。然后编辑 "Makefile" 设置适当的编译时选项。然后键入：
- en: '[PRE0]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The resulting "sqlite3.c" amalgamation code file (and its associated header
    file "sqlite3.h") can then be moved to a non-unix platform for final compilation
    using a native compiler.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，生成的 "sqlite3.c" 合并代码文件（及其相关的头文件 "sqlite3.h"）可以移动到非 Unix 平台，使用本地编译器进行最终编译。
- en: 'The SQLITE_OMIT_* options are unsupported. By this we mean that an SQLITE_OMIT_*
    option that omits code from the build in the current release might become a no-op
    in the next release. Or the other way around: an SQLITE_OMIT_* that is a no-op
    in the current release might cause code to be excluded in the next release. Also,
    not all SQLITE_OMIT_* options are tested. Some SQLITE_OMIT_* options might cause
    SQLite to malfunction and/or provide incorrect answers.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: SQLITE_OMIT_* 选项不受支持。这意味着在当前版本中，从构建中省略代码的 SQLITE_OMIT_* 选项可能在下一个版本中成为无操作选项。或者反过来：在当前版本中无操作的
    SQLITE_OMIT_* 选项可能会导致下一个版本中排除代码。此外，并非所有 SQLITE_OMIT_* 选项都经过测试。一些 SQLITE_OMIT_*
    选项可能会导致 SQLite 发生故障和/或提供不正确的答案。
- en: '***Important Note:** The SQLITE_OMIT_* compile-time options are mostly unsupported.*'
  id: totrans-439
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***重要提示：** SQLITE_OMIT_* 编译选项大多数情况下不受支持。*'
- en: 'The following are the available OMIT options:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 下列为可用的 OMIT 选项：
- en: '**SQLITE_OMIT_ALTERTABLE**'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_ALTERTABLE**'
- en: When this option is defined, the [ALTER TABLE](lang_altertable.html) command
    is not included in the library. Executing an [ALTER TABLE](lang_altertable.html)
    statement causes a parse error.
  id: totrans-442
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当定义此选项时，[ALTER TABLE](lang_altertable.html) 命令不包含在库中。执行 [ALTER TABLE](lang_altertable.html)
    语句会导致解析错误。
- en: '**SQLITE_OMIT_ANALYZE**'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_ANALYZE**'
- en: When this option is defined, the [ANALYZE](lang_analyze.html) command is omitted
    from the build.
  id: totrans-444
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当定义此选项时，[ANALYZE](lang_analyze.html) 命令将从构建中省略。
- en: '**SQLITE_OMIT_ATTACH**'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_ATTACH**'
- en: When this option is defined, the [ATTACH](lang_attach.html) and [DETACH](lang_detach.html)
    commands are omitted from the build.
  id: totrans-446
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当定义此选项时，[ATTACH](lang_attach.html) 和 [DETACH](lang_detach.html) 命令将从构建中省略。
- en: '**SQLITE_OMIT_AUTHORIZATION**'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_AUTHORIZATION**'
- en: Defining this option omits the authorization callback feature from the library.
    The [sqlite3_set_authorizer()](c3ref/set_authorizer.html) API function is not
    present in the library.
  id: totrans-448
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义此选项会从库中省略授权回调功能。库中不存在 [sqlite3_set_authorizer()](c3ref/set_authorizer.html)
    API 函数。
- en: '**SQLITE_OMIT_AUTOINCREMENT**'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_AUTOINCREMENT**'
- en: This option is omits the [AUTOINCREMENT](autoinc.html) feature. When this is
    macro is defined, columns declared as "[INTEGER PRIMARY KEY](lang_createtable.html#rowid)
    AUTOINCREMENT" behave in the same way as columns declared as "[INTEGER PRIMARY
    KEY](lang_createtable.html#rowid)" when a NULL is inserted. The sqlite_sequence
    system table is neither created, nor respected if it already exists.
  id: totrans-450
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了 [AUTOINCREMENT](autoinc.html) 功能。当定义此宏时，声明为 "[INTEGER PRIMARY KEY](lang_createtable.html#rowid)
    AUTOINCREMENT" 的列在插入 NULL 时表现与声明为 "[INTEGER PRIMARY KEY](lang_createtable.html#rowid)"
    的列相同。sqlite_sequence 系统表既不会被创建，也不会被尊重（如果已存在）。
- en: '**SQLITE_OMIT_AUTOINIT**'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_AUTOINIT**'
- en: For backwards compatibility with older versions of SQLite that lack the [sqlite3_initialize()](c3ref/initialize.html)
    interface, the [sqlite3_initialize()](c3ref/initialize.html) interface is called
    automatically upon entry to certain key interfaces such as [sqlite3_open()](c3ref/open.html),
    [sqlite3_vfs_register()](c3ref/vfs_find.html), and [sqlite3_mprintf()](c3ref/mprintf.html).
    The overhead of invoking [sqlite3_initialize()](c3ref/initialize.html) automatically
    in this way may be omitted by building SQLite with the SQLITE_OMIT_AUTOINIT C-preprocessor
    macro. When built using SQLITE_OMIT_AUTOINIT, SQLite will not automatically initialize
    itself and the application is required to invoke [sqlite3_initialize()](c3ref/initialize.html)
    directly prior to beginning use of the SQLite library.
  id: totrans-452
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了与不具备 [sqlite3_initialize()](c3ref/initialize.html) 接口的旧版本 SQLite 向后兼容，[sqlite3_initialize()](c3ref/initialize.html)
    接口会在进入某些关键接口（如 [sqlite3_open()](c3ref/open.html)、[sqlite3_vfs_register()](c3ref/vfs_find.html)
    和 [sqlite3_mprintf()](c3ref/mprintf.html)）时自动调用。以这种方式自动调用 [sqlite3_initialize()](c3ref/initialize.html)
    的开销可以通过使用 SQLITE_OMIT_AUTOINIT C 预处理宏来省略。当使用 SQLITE_OMIT_AUTOINIT 构建时，SQLite 不会自动初始化自身，应用程序需要在开始使用
    SQLite 库之前直接调用 [sqlite3_initialize()](c3ref/initialize.html)。
- en: '**SQLITE_OMIT_AUTOMATIC_INDEX**'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_AUTOMATIC_INDEX**'
- en: 'This option is used to omit the [automatic indexing](optoverview.html#autoindex)
    functionality. See also: [SQLITE_DEFAULT_AUTOMATIC_INDEX](compile.html#default_automatic_index).'
  id: totrans-454
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项用于省略 [automatic indexing](optoverview.html#autoindex) 功能。另请参见：[SQLITE_DEFAULT_AUTOMATIC_INDEX](compile.html#default_automatic_index)。
- en: '**SQLITE_OMIT_AUTORESET**'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_AUTORESET**'
- en: By default, the [sqlite3_step()](c3ref/step.html) interface will automatically
    invoke [sqlite3_reset()](c3ref/reset.html) to reset the [prepared statement](c3ref/stmt.html)
    if necessary. This compile-time option changes that behavior so that [sqlite3_step()](c3ref/step.html)
    will return [SQLITE_MISUSE](rescode.html#misuse) if it called again after returning
    anything other than [SQLITE_ROW](rescode.html#row), [SQLITE_BUSY](rescode.html#busy),
    or [SQLITE_LOCKED](rescode.html#locked) unless there was an intervening call to
    [sqlite3_reset()](c3ref/reset.html).
  id: totrans-456
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 默认情况下，[sqlite3_step()](c3ref/step.html) 接口将在必要时自动调用 [sqlite3_reset()](c3ref/reset.html)
    来重置 [prepared statement](c3ref/stmt.html)。此编译时选项更改了此行为，使得在 [sqlite3_step()](c3ref/step.html)
    返回除了 [SQLITE_ROW](rescode.html#row), [SQLITE_BUSY](rescode.html#busy) 或 [SQLITE_LOCKED](rescode.html#locked)
    之外的值后再次调用它时，它将返回 [SQLITE_MISUSE](rescode.html#misuse)，除非期间有调用 [sqlite3_reset()](c3ref/reset.html)。
- en: ''
  id: totrans-457
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In SQLite [version 3.6.23.1](releaselog/3_6_23_1.html) (2010-03-26) and earlier,
    [sqlite3_step()](c3ref/step.html) used to always return [SQLITE_MISUSE](rescode.html#misuse)
    if it was invoked again after returning anything other than [SQLITE_ROW](rescode.html#row)
    without an intervening call to [sqlite3_reset()](c3ref/reset.html). This caused
    problems on some poorly written smartphone applications which did not correctly
    handle the [SQLITE_LOCKED](rescode.html#locked) and [SQLITE_BUSY](rescode.html#busy)
    error returns. Rather than fix the many defective smartphone applications, the
    behavior of SQLite was changed in 3.6.23.2 to automatically reset the prepared
    statement. But that changed caused issues in other improperly implemented applications
    that were actually looking for an [SQLITE_MISUSE](rescode.html#misuse) return
    to terminate their query loops. (Anytime an application gets an SQLITE_MISUSE
    error code from SQLite, that means the application is misusing the SQLite interface
    and is thus incorrectly implemented.) The SQLITE_OMIT_AUTORESET interface was
    added to SQLite [version 3.7.5](releaselog/3_7_5.html) (2011-02-01) in an effort
    to get all of the (broken) applications to work again without having to actually
    fix the applications.
  id: totrans-458
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在SQLite [version 3.6.23.1](releaselog/3_6_23_1.html) (2010-03-26)及更早版本中，[sqlite3_step()](c3ref/step.html)如果在返回除[SQLITE_ROW](rescode.html#row)之外的任何其他内容后再次调用且没有调用[sqlite3_reset()](c3ref/reset.html)之间，它将始终返回[SQLITE_MISUSE](rescode.html#misuse)。这在一些编写不良的智能手机应用程序上造成了问题，这些应用程序没有正确处理[SQLITE_LOCKED](rescode.html#locked)和[SQLITE_BUSY](rescode.html#busy)的错误返回。为了不必修复许多有缺陷的智能手机应用程序，SQLite在3.6.23.2中更改了其行为，以自动重置准备好的语句。但是，这种变化在其他不正确实现的应用程序中引起了问题，这些应用程序实际上是在寻找[SQLITE_MISUSE](rescode.html#misuse)返回来终止其查询循环。
    （每当应用程序从SQLite获得SQLITE_MISUSE错误代码时，这意味着应用程序正在误用SQLite接口，因此实现是不正确的。）在SQLite [version
    3.7.5](releaselog/3_7_5.html) (2011-02-01)中添加了SQLITE_OMIT_AUTORESET接口，以尝试使所有（损坏的）应用程序重新工作，而无需实际修复这些应用程序。
- en: '**SQLITE_OMIT_AUTOVACUUM**'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_AUTOVACUUM**'
- en: If this option is defined, the library cannot create or write to databases that
    support [auto_vacuum](pragma.html#pragma_auto_vacuum). Executing a [PRAGMA auto_vacuum](pragma.html#pragma_auto_vacuum)
    statement is not an error (since unknown PRAGMAs are silently ignored), but does
    not return a value or modify the auto-vacuum flag in the database file. If a database
    that supports auto-vacuum is opened by a library compiled with this option, it
    is automatically opened in read-only mode.
  id: totrans-460
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了此选项，库将无法创建或写入支持[auto_vacuum](pragma.html#pragma_auto_vacuum)的数据库。执行[PRAGMA
    auto_vacuum](pragma.html#pragma_auto_vacuum)语句不会报错（因为未知的PRAGMA会被静默忽略），但不会返回值或修改数据库文件中的自动清理标志。如果使用此选项编译的库打开支持自动清理的数据库，则会自动以只读模式打开。
- en: '**SQLITE_OMIT_BETWEEN_OPTIMIZATION**'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_BETWEEN_OPTIMIZATION**'
- en: This option disables the use of indices with WHERE clause terms that employ
    the BETWEEN operator.
  id: totrans-462
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项禁用了在使用BETWEEN运算符的WHERE子句中使用索引的功能。
- en: '**SQLITE_OMIT_BLOB_LITERAL**'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_BLOB_LITERAL**'
- en: When this option is defined, it is not possible to specify a blob in an SQL
    statement using the X'ABCD' syntax.
  id: totrans-464
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当定义了这个选项时，不可能使用 X'ABCD' 语法在 SQL 语句中指定一个 blob。
- en: '**SQLITE_OMIT_BTREECOUNT**'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_BTREECOUNT**'
- en: This option is no longer used for anything. It is a no-op.
  id: totrans-466
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项现在不再用于任何内容。它是一个空操作。
- en: '**SQLITE_OMIT_BUILTIN_TEST**'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_BUILTIN_TEST**'
- en: This compile-time option has been renamed to [SQLITE_UNTESTABLE](compile.html#untestable).
  id: totrans-468
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个编译时选项已重命名为 [SQLITE_UNTESTABLE](compile.html#untestable)。
- en: '**SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA**'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_CASE_SENSITIVE_LIKE_PRAGMA**'
- en: This compile-time option disables the [PRAGMA case_sensitive_like](pragma.html#pragma_case_sensitive_like)
    command.
  id: totrans-470
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个编译时选项禁用了 [PRAGMA case_sensitive_like](pragma.html#pragma_case_sensitive_like)
    命令。
- en: '**SQLITE_OMIT_CAST**'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_CAST**'
- en: This option causes SQLite to omit support for the CAST operator.
  id: totrans-472
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项导致 SQLite 省略对 CAST 运算符的支持。
- en: '**SQLITE_OMIT_CHECK**'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_CHECK**'
- en: This option causes SQLite to omit support for CHECK constraints. The parser
    will still accept CHECK constraints in SQL statements, they will just not be enforced.
  id: totrans-474
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项导致 SQLite 省略对 CHECK 约束的支持。解析器仍然会接受 SQL 语句中的 CHECK 约束，但不会强制执行。
- en: '**SQLITE_OMIT_COMPILEOPTION_DIAGS**'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_COMPILEOPTION_DIAGS**'
- en: This option is used to omit the compile-time option diagnostics available in
    SQLite, including the [sqlite3_compileoption_used()](c3ref/compileoption_get.html)
    and [sqlite3_compileoption_get()](c3ref/compileoption_get.html) C/C++ functions,
    the [sqlite_compileoption_used()](lang_corefunc.html#sqlite_compileoption_used)
    and [sqlite_compileoption_get()](lang_corefunc.html#sqlite_compileoption_get)
    SQL functions, and the [compile_options pragma](pragma.html#pragma_compile_options).
  id: totrans-476
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项用于省略 SQLite 中可用的编译时选项诊断，包括 [sqlite3_compileoption_used()](c3ref/compileoption_get.html)
    和 [sqlite3_compileoption_get()](c3ref/compileoption_get.html) C/C++ 函数，以及 [sqlite_compileoption_used()](lang_corefunc.html#sqlite_compileoption_used)
    和 [sqlite_compileoption_get()](lang_corefunc.html#sqlite_compileoption_get) SQL
    函数，以及 [compile_options pragma](pragma.html#pragma_compile_options)。
- en: '**SQLITE_OMIT_COMPLETE**'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_COMPLETE**'
- en: This option causes the [sqlite3_complete()](c3ref/complete.html) and [sqlite3_complete16()](c3ref/complete.html)
    interfaces to be omitted.
  id: totrans-478
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项会导致 [sqlite3_complete()](c3ref/complete.html) 和 [sqlite3_complete16()](c3ref/complete.html)
    接口被省略。
- en: '**SQLITE_OMIT_COMPOUND_SELECT**'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_COMPOUND_SELECT**'
- en: This option is used to omit the compound [SELECT](lang_select.html) functionality.
    [SELECT](lang_select.html) statements that use the UNION, UNION ALL, INTERSECT
    or EXCEPT compound SELECT operators will cause a parse error.
  id: totrans-480
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项用于省略复合 [SELECT](lang_select.html) 功能。使用 UNION、UNION ALL、INTERSECT 或 EXCEPT
    复合 SELECT 操作符的 SELECT 语句将导致解析错误。
- en: ''
  id: totrans-481
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An [INSERT](lang_insert.html) statement with multiple values in the VALUES clause
    is implemented internally as a compound SELECT. Hence, this option also disables
    the ability to insert more than a single row using an INSERT INTO ... VALUES ...
    statement.
  id: totrans-482
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 VALUES 子句中有多个值的 [INSERT](lang_insert.html) 语句在内部被实现为一个复合 SELECT。因此，这个选项还禁用了使用
    INSERT INTO ... VALUES ... 语句插入多行的能力。
- en: '**SQLITE_OMIT_CTE**'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_CTE**'
- en: This option causes support for [common table expressions](lang_with.html) to
    be omitted.
  id: totrans-484
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项会导致省略对 [common table expressions](lang_with.html) 的支持。
- en: '**SQLITE_OMIT_DATETIME_FUNCS**'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_DATETIME_FUNCS**'
- en: If this option is defined, SQLite's built-in date and time manipulation functions
    are omitted. Specifically, the SQL functions julianday(), date(), time(), datetime()
    and strftime() are not available. The default column values CURRENT_TIME, CURRENT_DATE
    and CURRENT_TIMESTAMP are still available.
  id: totrans-486
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了这个选项，SQLite 内置的日期和时间操作函数会被省略。具体而言，SQL 函数 julianday()、date()、time()、datetime()
    和 strftime() 将不可用。默认列值 CURRENT_TIME、CURRENT_DATE 和 CURRENT_TIMESTAMP 仍然可用。
- en: '**SQLITE_OMIT_DECLTYPE**'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_DECLTYPE**'
- en: This option causes SQLite to omit support for the [sqlite3_column_decltype()](c3ref/column_decltype.html)
    and [sqlite3_column_decltype16()](c3ref/column_decltype.html) interfaces.
  id: totrans-488
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项会导致 SQLite 省略对 [sqlite3_column_decltype()](c3ref/column_decltype.html) 和
    [sqlite3_column_decltype16()](c3ref/column_decltype.html) 接口的支持。
- en: '**SQLITE_OMIT_DEPRECATED**'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_DEPRECATED**'
- en: This option causes SQLite to omit support for interfaces marked as deprecated.
    This includes [sqlite3_aggregate_count()](c3ref/aggregate_count.html), [sqlite3_expired()](c3ref/aggregate_count.html),
    [sqlite3_transfer_bindings()](c3ref/aggregate_count.html), [sqlite3_global_recover()](c3ref/aggregate_count.html),
    [sqlite3_thread_cleanup()](c3ref/aggregate_count.html) and [sqlite3_memory_alarm()](c3ref/aggregate_count.html)
    interfaces and [PRAGMA](pragma.html#syntax) statements [PRAGMA count_changes](pragma.html#pragma_count_changes),
    [PRAGMA data_store_directory](pragma.html#pragma_data_store_directory), [PRAGMA
    default_cache_size](pragma.html#pragma_default_cache_size), [PRAGMA empty_result_callbacks](pragma.html#pragma_empty_result_callbacks),
    [PRAGMA full_column_names](pragma.html#pragma_full_column_names), [PRAGMA short_column_names](pragma.html#pragma_short_column_names),
    and [PRAGMA temp_store_directory](pragma.html#pragma_temp_store_directory).
  id: totrans-490
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项会导致 SQLite 省略对标记为过时的接口的支持。包括 [sqlite3_aggregate_count()](c3ref/aggregate_count.html)、[sqlite3_expired()](c3ref/aggregate_count.html)、[sqlite3_transfer_bindings()](c3ref/aggregate_count.html)、[sqlite3_global_recover()](c3ref/aggregate_count.html)、[sqlite3_thread_cleanup()](c3ref/aggregate_count.html)
    和 [sqlite3_memory_alarm()](c3ref/aggregate_count.html) 接口以及 [PRAGMA](pragma.html#syntax)
    语句 [PRAGMA count_changes](pragma.html#pragma_count_changes)、[PRAGMA data_store_directory](pragma.html#pragma_data_store_directory)、[PRAGMA
    default_cache_size](pragma.html#pragma_default_cache_size)、[PRAGMA empty_result_callbacks](pragma.html#pragma_empty_result_callbacks)、[PRAGMA
    full_column_names](pragma.html#pragma_full_column_names)、[PRAGMA short_column_names](pragma.html#pragma_short_column_names)
    和 [PRAGMA temp_store_directory](pragma.html#pragma_temp_store_directory)。
- en: '**SQLITE_OMIT_DESERIALIZE**'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_DESERIALIZE**'
- en: This option causes the [sqlite3_serialize()](c3ref/serialize.html) and [sqlite3_deserialize()](c3ref/deserialize.html)
    interfaces to be omitted from the build.
  id: totrans-492
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个选项会导致构建过程中省略 [sqlite3_serialize()](c3ref/serialize.html) 和 [sqlite3_deserialize()](c3ref/deserialize.html)
    接口。
- en: '**SQLITE_OMIT_DISKIO**'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_DISKIO**'
- en: This option omits all support for writing to the disk and forces databases to
    exist in memory only. This option has not been maintained and probably does not
    work with newer versions of SQLite.
  id: totrans-494
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了所有写入磁盘的支持，并强制数据库仅存在于内存中。此选项未被维护，可能不适用于SQLite的新版本。
- en: '**SQLITE_OMIT_EXPLAIN**'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_EXPLAIN**'
- en: Defining this option causes the [EXPLAIN](lang_explain.html) command to be omitted
    from the library. Attempting to execute an [EXPLAIN](lang_explain.html) statement
    will cause a parse error.
  id: totrans-496
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义此选项会导致库中的[EXPLAIN](lang_explain.html)命令被省略。尝试执行[EXPLAIN](lang_explain.html)语句会导致解析错误。
- en: '**SQLITE_OMIT_FLAG_PRAGMAS**'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_FLAG_PRAGMAS**'
- en: This option omits support for a subset of [PRAGMA](pragma.html#syntax) commands
    that query and set boolean properties.
  id: totrans-498
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了一些查询和设置布尔属性的[PRAGMA](pragma.html#syntax)命令的支持子集。
- en: '**SQLITE_OMIT_FLOATING_POINT**'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_FLOATING_POINT**'
- en: This option is used to omit floating-point number support from the SQLite library.
    When specified, specifying a floating point number as a literal (i.e. "1.01")
    results in a parse error.
  id: totrans-500
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项用于在SQLite库中省略对浮点数的支持。当指定时，将浮点数作为文字（即"1.01"）会导致解析错误。
- en: ''
  id: totrans-501
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the future, this option may also disable other floating point functionality,
    for example the [sqlite3_result_double()](c3ref/result_blob.html), [sqlite3_bind_double()](c3ref/bind_blob.html),
    [sqlite3_value_double()](c3ref/value_blob.html) and [sqlite3_column_double()](c3ref/column_blob.html)
    API functions.
  id: totrans-502
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 未来，该选项可能还会禁用其他浮点功能，例如[sqlite3_result_double()](c3ref/result_blob.html)，[sqlite3_bind_double()](c3ref/bind_blob.html)，[sqlite3_value_double()](c3ref/value_blob.html)和[sqlite3_column_double()](c3ref/column_blob.html)
    API函数。
- en: '**SQLITE_OMIT_FOREIGN_KEY**'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_FOREIGN_KEY**'
- en: If this option is defined, then [foreign key constraint](foreignkeys.html) syntax
    is not recognized.
  id: totrans-504
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了此选项，则不会识别[外键约束](foreignkeys.html)语法。
- en: '**SQLITE_OMIT_GENERATED_COLUMNS**'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_GENERATED_COLUMNS**'
- en: If this option is defined, then [generated column](gencol.html) syntax is not
    recognized.
  id: totrans-506
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了此选项，则不会识别[生成列](gencol.html)语法。
- en: '**SQLITE_OMIT_GET_TABLE**'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_GET_TABLE**'
- en: This option causes support for [sqlite3_get_table()](c3ref/free_table.html)
    and [sqlite3_free_table()](c3ref/free_table.html) to be omitted.
  id: totrans-508
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该选项导致[sqlite3_get_table()](c3ref/free_table.html)和[sqlite3_free_table()](c3ref/free_table.html)的支持被省略。
- en: '**SQLITE_OMIT_HEX_INTEGER**'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_HEX_INTEGER**'
- en: This option omits support for [hexadecimal integer literals](lang_expr.html#hexint).
  id: totrans-510
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该选项省略了对[十六进制整数文字](lang_expr.html#hexint)的支持。
- en: '**SQLITE_OMIT_INCRBLOB**'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_INCRBLOB**'
- en: This option causes support for [incremental BLOB I/O](c3ref/blob.html) to be
    omitted.
  id: totrans-512
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该选项导致对[增量 BLOB I/O](c3ref/blob.html)的支持被省略。
- en: '**SQLITE_OMIT_INTEGRITY_CHECK**'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_INTEGRITY_CHECK**'
- en: This option omits support for the [integrity_check pragma](pragma.html#pragma_integrity_check).
  id: totrans-514
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了对[integrity_check pragma](pragma.html#pragma_integrity_check)的支持。
- en: '**SQLITE_OMIT_INTROSPECTION_PRAGMAS**'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_INTROSPECTION_PRAGMAS**'
- en: This option omits support for [PRAGMA function_list](pragma.html#pragma_function_list),
    [PRAGMA module_list](pragma.html#pragma_module_list), and [PRAGMA pragma_list](pragma.html#pragma_pragma_list).
  id: totrans-516
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了对[PRAGMA function_list](pragma.html#pragma_function_list)、[PRAGMA module_list](pragma.html#pragma_module_list)和[PRAGMA
    pragma_list](pragma.html#pragma_pragma_list)的支持。
- en: '**SQLITE_OMIT_JSON**'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_JSON**'
- en: This option omits the [JSON SQL functions](json1.html) from the build.
  id: totrans-518
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项从构建中省略了[JSON SQL 函数](json1.html)。
- en: '**SQLITE_OMIT_LIKE_OPTIMIZATION**'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_LIKE_OPTIMIZATION**'
- en: This option disables the ability of SQLite to use indices to help resolve [LIKE](lang_expr.html#like)
    and [GLOB](lang_expr.html#glob) operators in a WHERE clause.
  id: totrans-520
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项禁用了 SQLite 使用索引来帮助解析 WHERE 子句中的[LIKE](lang_expr.html#like)和[GLOB](lang_expr.html#glob)操作符的能力。
- en: '**SQLITE_OMIT_LOAD_EXTENSION**'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_LOAD_EXTENSION**'
- en: This option omits the entire extension loading mechanism from SQLite, including
    [sqlite3_enable_load_extension()](c3ref/enable_load_extension.html) and [sqlite3_load_extension()](c3ref/load_extension.html)
    interfaces.
  id: totrans-522
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项从 SQLite 中省略了整个扩展加载机制，包括[sqlite3_enable_load_extension()](c3ref/enable_load_extension.html)和[sqlite3_load_extension()](c3ref/load_extension.html)接口。
- en: '**SQLITE_OMIT_LOCALTIME**'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_LOCALTIME**'
- en: This option omits the "localtime" modifier from the date and time functions.
    This option is sometimes useful when trying to compile the date and time functions
    on a platform that does not support the concept of local time.
  id: totrans-524
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了日期和时间函数中的"localtime"修饰符。在尝试在不支持本地时间概念的平台上编译日期和时间函数时，此选项有时会很有用。
- en: '**SQLITE_OMIT_LOOKASIDE**'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_LOOKASIDE**'
- en: This option omits the [lookaside memory allocator](malloc.html#lookaside).
  id: totrans-526
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了"lookaside"内存分配器的使用。
- en: '**SQLITE_OMIT_MEMORYDB**'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_MEMORYDB**'
- en: When this is defined, the library does not respect the special database name
    ":memory:" (normally used to create an [in-memory database](inmemorydb.html)).
    If ":memory:" is passed to [sqlite3_open()](c3ref/open.html), [sqlite3_open16()](c3ref/open.html),
    or [sqlite3_open_v2()](c3ref/open.html), a file with this name will be opened
    or created.
  id: totrans-528
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当定义此选项时，库不会对特殊的数据库名称":memory:"（通常用于创建[内存数据库](inmemorydb.html)）给予特殊处理。如果":memory:"传递给[sqlite3_open()](c3ref/open.html)、[sqlite3_open16()](c3ref/open.html)或[sqlite3_open_v2()](c3ref/open.html)，将打开或创建一个文件以此名称。
- en: '**SQLITE_OMIT_OR_OPTIMIZATION**'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_OR_OPTIMIZATION**'
- en: This option disables the ability of SQLite to use an index together with terms
    of a WHERE clause connected by the OR operator.
  id: totrans-530
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项禁用了 SQLite 使用索引来处理 WHERE 子句中由 OR 连接的项的能力。
- en: '**SQLITE_OMIT_PAGER_PRAGMAS**'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_PAGER_PRAGMAS**'
- en: Defining this option omits pragmas related to the pager subsystem from the build.
  id: totrans-532
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义此选项会从构建中省略与分页子系统相关的编译指令。
- en: '**SQLITE_OMIT_PRAGMA**'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_PRAGMA**'
- en: This option is used to omit the [PRAGMA](pragma.html#syntax) command from the
    library. Note that it is useful to define the macros that omit specific pragmas
    in addition to this, as they may also remove supporting code in other sub-systems.
    This macro removes the [PRAGMA](pragma.html#syntax) command only.
  id: totrans-534
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项用于省略库中的[PRAGMA](pragma.html#syntax)命令。请注意，定义这些宏以省略特定 pragma 也是很有用的，因为它们可能还会移除其他子系统中的支持代码。该宏仅移除[PRAGMA](pragma.html#syntax)命令。
- en: '**SQLITE_OMIT_PROGRESS_CALLBACK**'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_PROGRESS_CALLBACK**'
- en: This option may be defined to omit the capability to issue "progress" callbacks
    during long-running SQL statements. The [sqlite3_progress_handler()](c3ref/progress_handler.html)
    API function is not present in the library.
  id: totrans-536
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项可能定义为省略在长时间运行的 SQL 语句期间发出“进度”回调的能力。库中不包含[sqlite3_progress_handler()](c3ref/progress_handler.html)
    API 函数。
- en: '**SQLITE_OMIT_QUICKBALANCE**'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_QUICKBALANCE**'
- en: This option omits an alternative, faster B-Tree balancing routine. Using this
    option makes SQLite slightly smaller at the expense of making it run slightly
    slower.
  id: totrans-538
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了一种替代、更快的 B-Tree 平衡算法。使用此选项会使 SQLite 稍微变小，但运行速度略有降低。
- en: '**SQLITE_OMIT_REINDEX**'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_REINDEX**'
- en: When this option is defined, the [REINDEX](lang_reindex.html) command is not
    included in the library. Executing a [REINDEX](lang_reindex.html) statement causes
    a parse error.
  id: totrans-540
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当定义此选项时，库中不包含[REINDEX](lang_reindex.html)命令。执行[REINDEX](lang_reindex.html)语句将导致解析错误。
- en: '**SQLITE_OMIT_SCHEMA_PRAGMAS**'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_SCHEMA_PRAGMAS**'
- en: Defining this option omits pragmas for querying the database schema from the
    build.
  id: totrans-542
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义此选项将省略用于查询数据库模式的 pragma。
- en: '**SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS**'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS**'
- en: Defining this option omits pragmas for querying and modifying the database schema
    version and user version from the build. Specifically, the [schema_version](pragma.html#pragma_schema_version)
    and [user_version](pragma.html#pragma_user_version) PRAGMAs are omitted.
  id: totrans-544
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义此选项将省略用于查询和修改数据库模式版本和用户版本的 pragma。具体而言，[schema_version](pragma.html#pragma_schema_version)
    和[user_version](pragma.html#pragma_user_version) PRAGMA 都会被省略。
- en: '**SQLITE_OMIT_SHARED_CACHE**'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_SHARED_CACHE**'
- en: This option builds SQLite without support for [shared cache mode](sharedcache.html).
    The [sqlite3_enable_shared_cache()](c3ref/enable_shared_cache.html) is omitted
    along with a fair amount of logic within the B-Tree subsystem associated with
    shared cache management.
  id: totrans-546
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项构建的 SQLite 不支持[共享缓存模式](sharedcache.html)。[sqlite3_enable_shared_cache()](c3ref/enable_shared_cache.html)
    函数以及与共享缓存管理相关的大量 B-Tree 子系统逻辑均被省略。
- en: ''
  id: totrans-547
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This compile-time option is recommended most applications as it results in improved
    performance and reduced library footprint.
  id: totrans-548
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此编译时选项建议大多数应用程序使用，因为它可以提升性能并减少库的占用空间。
- en: '**SQLITE_OMIT_SEH**'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_SEH**'
- en: If defined, Structured Exception Handling (SEH) is disabled on Windows builds.
    SEH is a Windows-specific technique for catching exceptions raised while accessing
    a memory-mapped file. SEH is used to intercept errors that might occur while accessing
    the memory-mapped [shm file](walformat.html#shm) that are part of [WAL mode](wal.html)
    processing. If the operating system raised errors while SQLite is trying to access
    the shm file, this option causes those errors to be caught and dealt with by SQLite,
    rather than aborting the whole process.
  id: totrans-550
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了此选项，在Windows版本中将禁用结构化异常处理（SEH）。SEH是一种Windows特有的技术，用于捕获访问内存映射文件时引发的异常。SEH用于拦截在访问与[WAL模式](wal.html)处理相关的内存映射[shm文件](walformat.html#shm)时可能发生的错误。如果操作系统在SQLite尝试访问shm文件时引发错误，此选项会使这些错误被SQLite捕获并处理，而不会中止整个进程。
- en: ''
  id: totrans-551
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This has no effect except when compiling on Windows using MSVC.
  id: totrans-552
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这只在使用MSVC编译Windows时才会生效。
- en: '**SQLITE_OMIT_SUBQUERY**'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_SUBQUERY**'
- en: If defined, support for sub-selects and the IN() operator are omitted.
  id: totrans-554
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了此宏，则省略对子查询和IN()运算符的支持。
- en: '**SQLITE_OMIT_TCL_VARIABLE**'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_TCL_VARIABLE**'
- en: If this macro is defined, then the special "$<variable-name>" syntax used to
    automatically bind SQL variables to TCL variables is omitted.</variable-name>
  id: totrans-556
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果定义了此宏，则省略了用于自动将SQL变量绑定到TCL变量的特殊"$<variable-name>"语法。</variable-name>
- en: '**SQLITE_OMIT_TEMPDB**'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_TEMPDB**'
- en: This option omits support for TEMP or TEMPORARY tables.
  id: totrans-558
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了对TEMP或TEMPORARY表的支持。
- en: '**SQLITE_OMIT_TRACE**'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_TRACE**'
- en: This option omits support for the [sqlite3_profile()](c3ref/profile.html) and
    [sqlite3_trace()](c3ref/profile.html) interfaces and their associated logic.
  id: totrans-560
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了对[sqlite3_profile()](c3ref/profile.html)和[sqlite3_trace()](c3ref/profile.html)接口及其相关逻辑的支持。
- en: '**SQLITE_OMIT_TRIGGER**'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_TRIGGER**'
- en: Defining this option omits support for TRIGGER objects. Neither the [CREATE
    TRIGGER](lang_createtrigger.html) or [DROP TRIGGER](lang_droptrigger.html) commands
    are available in this case, and attempting to execute either will result in a
    parse error. This option also disables enforcement of [foreign key constraints](foreignkeys.html),
    since the code that implements triggers and which is omitted by this option is
    also used to implement [foreign key actions](foreignkeys.html#fk_actions).
  id: totrans-562
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义此选项会省略对TRIGGER对象的支持。在这种情况下，既不支持[CREATE TRIGGER](lang_createtrigger.html)命令，也不支持[DROP
    TRIGGER](lang_droptrigger.html)命令，尝试执行任何这些命令都会导致语法错误。此选项还禁用了对[外键约束](foreignkeys.html)的执行，因为实现触发器的代码（此选项所省略的代码）也用于实现[外键动作](foreignkeys.html#fk_actions)。
- en: '**SQLITE_OMIT_TRUNCATE_OPTIMIZATION**'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_TRUNCATE_OPTIMIZATION**'
- en: A default build of SQLite, if a [DELETE](lang_delete.html) statement has no
    WHERE clause and operates on a table with no triggers, an optimization occurs
    that causes the DELETE to occur by dropping and recreating the table. Dropping
    and recreating a table is usually much faster than deleting the table content
    row by row. This is the "truncate optimization".
  id: totrans-564
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 默认的SQLite构建中，如果[DELETE](lang_delete.html)语句没有WHERE子句并且作用于没有触发器的表，则会发生优化，导致通过删除并重新创建表来执行DELETE操作。删除并重新创建表通常比逐行删除表内容要快得多。这就是“截断优化”。
- en: '**SQLITE_OMIT_UTF16**'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_UTF16**'
- en: This macro is used to omit support for UTF16 text encoding. When this is defined
    all API functions that return or accept UTF16 encoded text are unavailable. These
    functions can be identified by the fact that they end with '16', for example [sqlite3_prepare16()](c3ref/prepare.html),
    [sqlite3_column_text16()](c3ref/column_blob.html) and [sqlite3_bind_text16()](c3ref/bind_blob.html).
  id: totrans-566
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏用于省略对UTF16文本编码的支持。当定义此宏时，所有返回或接受UTF16编码文本的API函数都不可用。可以通过这些函数的名称以'16'结尾来识别这些函数，例如[sqlite3_prepare16()](c3ref/prepare.html)，[sqlite3_column_text16()](c3ref/column_blob.html)和[sqlite3_bind_text16()](c3ref/bind_blob.html)。
- en: '**SQLITE_OMIT_VACUUM**'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_VACUUM**'
- en: When this option is defined, the [VACUUM](lang_vacuum.html) command is not included
    in the library. Executing a [VACUUM](lang_vacuum.html) statement causes a parse
    error.
  id: totrans-568
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当定义此选项时，库中不包括[VACUUM](lang_vacuum.html)命令。执行[VACUUM](lang_vacuum.html)语句会导致解析错误。
- en: '**SQLITE_OMIT_VIEW**'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_VIEW**'
- en: Defining this option omits support for VIEW objects. Neither the [CREATE VIEW](lang_createview.html)
    nor the [DROP VIEW](lang_dropview.html) commands are available in this case, and
    attempting to execute either will result in a parse error.
  id: totrans-570
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定义此选项将省略对VIEW对象的支持。在这种情况下，[CREATE VIEW](lang_createview.html)和[DROP VIEW](lang_dropview.html)命令都不可用，并且尝试执行任何这些命令都会导致解析错误。
- en: ''
  id: totrans-571
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'WARNING: If this macro is defined, it will not be possible to open a database
    for which the schema contains VIEW objects.'
  id: totrans-572
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 警告：如果定义了此宏，则无法打开包含VIEW对象的模式的数据库。
- en: '**SQLITE_OMIT_VIRTUALTABLE**'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_VIRTUALTABLE**'
- en: This option omits support for the [Virtual Table](c3ref/vtab.html) mechanism
    in SQLite.
  id: totrans-574
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了SQLite中的虚拟表机制的支持。
- en: '**SQLITE_OMIT_WAL**'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_WAL**'
- en: This option omits the "[write-ahead log](wal.html)" (a.k.a. "[WAL](wal.html)")
    capability.
  id: totrans-576
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了“写前日志”（即“WAL”）功能。
- en: '**SQLITE_OMIT_WINDOWFUNC**'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_WINDOWFUNC**'
- en: This option omits [window functions](windowfunctions.html) from the build.
  id: totrans-578
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项从构建中省略了[窗口函数](windowfunctions.html)的支持。
- en: '**SQLITE_OMIT_WSD**'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_WSD**'
- en: This option builds a version of the SQLite library that contains no Writable
    Static Data (WSD). WSD is global variables and/or static variables. Some platforms
    do not support WSD, and this option is necessary in order for SQLite to work those
    platforms.
  id: totrans-580
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项构建的SQLite库版本不包含可写静态数据（WSD）。WSD指全局变量和/或静态变量。一些平台不支持WSD，在这些平台上，此选项对SQLite的正常工作是必要的。
- en: ''
  id: totrans-581
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unlike other OMIT options which make the SQLite library smaller, this option
    actually increases the size of SQLite and makes it run a little slower. Only use
    this option if SQLite is being built for an embedded target that does not support
    WSD.
  id: totrans-582
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 与其他省略选项不同，这个选项实际上会增加 SQLite 的大小，并使其运行速度稍慢。只有当 SQLite 被构建为不支持 WSD 的嵌入式目标时，才使用此选项。
- en: '**SQLITE_OMIT_XFER_OPT**'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_OMIT_XFER_OPT**'
- en: This option omits support for optimizations that help statements of the form
    "INSERT INTO ... SELECT ..." run faster.
  id: totrans-584
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项省略了支持优化的功能，有助于使 "INSERT INTO ... SELECT ..." 形式的语句运行更快。
- en: '**SQLITE_UNTESTABLE**'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_UNTESTABLE**'
- en: A standard SQLite build includes a small amount of logic associated with [sqlite3_test_control()](c3ref/test_control.html)
    to exercise parts of the SQLite core that are otherwise difficult to validate.
    This compile-time option omits that extra testing logic. This compile-time option
    was called "SQLITE_OMIT_BUILTIN_TEST" prior to SQLite version 3.16.0 (2017-01-02).
    The name was changed to better describe the implications of using it.
  id: totrans-586
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 标准的 SQLite 构建包括与 [sqlite3_test_control()](c3ref/test_control.html) 相关的少量逻辑，用于验证
    SQLite 核心中其他难以验证的部分。此编译时选项省略了这些额外的测试逻辑。在 SQLite 版本 3.16.0（2017-01-02）之前，此编译时选项被称为
    "SQLITE_OMIT_BUILTIN_TEST"。更改名称是为了更好地描述使用该选项的影响。
- en: ''
  id: totrans-587
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Setting this compile-time option prevents SQLite from being fully testable.
    Branch test coverage drops from 100% down to about 95%.
  id: totrans-588
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 设置此编译时选项会导致无法对 SQLite 进行全面测试。分支测试覆盖率从 100% 下降到约 95%。
- en: ''
  id: totrans-589
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SQLite developers follow the NASA principle of "fly what you test and test what
    you fly". This principle is violated if this option is enabled for delivery but
    disabled for testing. But if this option is enabled during testing, not all branches
    are reachable. Therefore, the use of this compile-time option is discouraged.
  id: totrans-590
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite 开发者遵循 "飞行测试你所飞行的，测试你所飞行的" 的 NASA 原则。如果在交付时启用此选项但在测试时禁用，则违反了此原则。但如果在测试期间启用此选项，则不会到达所有分支。因此，不鼓励使用此编译时选项。
- en: '**SQLITE_ZERO_MALLOC**'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_ZERO_MALLOC**'
- en: This option omits both the [default memory allocator](malloc.html#defaultalloc)
    and the [debugging memory allocator](malloc.html#memdebug) from the build and
    substitutes a stub memory allocator that always fails. SQLite will not run with
    this stub memory allocator since it will be unable to allocate memory. But this
    stub can be replaced at start-time using [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MALLOC](c3ref/c_config_covering_index_scan.html#sqliteconfigmalloc),...)
    or [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_HEAP](c3ref/c_config_covering_index_scan.html#sqliteconfigheap),...).
    So the net effect of this compile-time option is that it allows SQLite to be compiled
    and linked against a system library that does not support malloc(), free(), and/or
    realloc().
  id: totrans-592
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项将在构建过程中省略默认内存分配器（[默认分配器](malloc.html#defaultalloc)）和调试内存分配器（[调试分配器](malloc.html#memdebug)），并替换为一个总是失败的存根内存分配器。SQLite
    将无法使用这个存根内存分配器运行，因为它无法分配内存。但可以在启动时使用 [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MALLOC](c3ref/c_config_covering_index_scan.html#sqliteconfigmalloc),...)
    或 [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_HEAP](c3ref/c_config_covering_index_scan.html#sqliteconfigheap),...)
    替换这个存根。因此，这个编译时选项的净效果是允许 SQLite 编译并链接到一个不支持 malloc()、free() 和/或 realloc() 的系统库。
- en: 10\. Analysis and Debugging Options
  id: totrans-593
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10\. 分析和调试选项
- en: '**SQLITE_DEBUG**'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_DEBUG**'
- en: The SQLite source code contains literally thousands of assert() statements used
    to verify internal assumptions and subroutine preconditions and postconditions.
    These assert() statements are normally turned off (they generate no code) since
    turning them on makes SQLite run approximately three times slower. But for testing
    and analysis, it is useful to turn the assert() statements on. The SQLITE_DEBUG
    compile-time option does this.
  id: totrans-595
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite 源代码包含成千上万的 assert() 语句，用于验证内部假设和子程序的前置条件和后置条件。这些 assert() 语句通常是关闭的（它们不生成代码），因为打开它们会使
    SQLite 运行速度大约慢三倍。但是对于测试和分析，打开 assert() 语句是很有用的。SQLITE_DEBUG 编译时选项就是用来实现这一点。
- en: ''
  id: totrans-596
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SQLITE_DEBUG also enables some other debugging features, such as special [PRAGMA](pragma.html#syntax)
    statements that turn on tracing and listing features used for troubleshooting
    and analysis of the [VDBE](opcode.html) and code generator.
  id: totrans-597
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLITE_DEBUG 还启用了一些其他调试功能，例如特殊的 [PRAGMA](pragma.html#syntax) 语句，用于开启用于故障排除和分析
    [VDBE](opcode.html) 和代码生成器的跟踪和列表功能。
- en: '**SQLITE_MEMDEBUG**'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_MEMDEBUG**'
- en: The SQLITE_MEMDEBUG option causes an instrumented [debugging memory allocator](malloc.html#memdebug)
    to be used as the default memory allocator within SQLite. The instrumented memory
    allocator checks for misuse of dynamically allocated memory. Examples of misuse
    include using memory after it is freed, writing off the ends of a memory allocation,
    freeing memory not previously obtained from the memory allocator, or failing to
    initialize newly allocated memory.
  id: totrans-599
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLITE_MEMDEBUG 选项导致 SQLite 内部使用一个带有检测功能的 [调试内存分配器](malloc.html#memdebug) 作为默认内存分配器。这个带有检测功能的内存分配器检查动态分配内存的误用。误用的示例包括在释放后继续使用内存、在内存分配结束后写入数据、释放未从内存分配器获取的内存或未初始化新分配的内存。
- en: 11\. Windows-Specific Options
  id: totrans-600
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11\. Windows 特定选项
- en: '**SQLITE_WIN32_HEAP_CREATE**'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_WIN32_HEAP_CREATE**'
- en: This option forces the Win32 native memory allocator, when enabled, to create
    a private heap to hold all memory allocations.
  id: totrans-602
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当启用时，此选项强制 Win32 原生内存分配器创建一个私有堆来保存所有内存分配。
- en: '**SQLITE_WIN32_MALLOC_VALIDATE**'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_WIN32_MALLOC_VALIDATE**'
- en: This option forces the Win32 native memory allocator, when enabled, to make
    strategic calls into the HeapValidate() function if assert() is also enabled.
  id: totrans-604
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当启用时，此选项强制 Win32 原生内存分配器在调用 assert() 时进行策略性调用 HeapValidate() 函数。
- en: 12\. Compiler Linkage and Calling Convention Control
  id: totrans-605
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12\. 编译器链接和调用约定控制
- en: The following macros specify interface details for certain kinds of SQLite builds.
    The Makefiles will normally handle setting these macros automatically. Application
    developers should not need to worry with these macros. The following documentation
    about these macros is included for completeness.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 下列宏指定了某些类型的 SQLite 构建的接口细节。Makefiles 通常会自动设置这些宏。应用程序开发者通常不需要关注这些宏。以下文档关于这些宏的描述仅为完整性考虑。
- en: '**SQLITE_API**'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_API**'
- en: This macro identifies an externally visible interface for SQLite. This macro
    is sometimes set to "extern". But the definition is compiler-specific.
  id: totrans-608
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏标识了 SQLite 的外部可见接口。有时此宏被设置为 "extern"。但其定义取决于编译器。
- en: '**SQLITE_APICALL**'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_APICALL**'
- en: This macro identifies the calling convention used by public interface routines
    in SQLite which accept a fixed number of arguments. This macro is normally defined
    to be nothing, though on Windows builds it can sometimes be set to "__cdecl" or
    "__stdcall". The "__cdecl" setting is the default, but "__stdcall" is used when
    SQLite is intended to be compiled as a Windows system library.
  id: totrans-610
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏标识了 SQLite 中公共接口例程所使用的调用约定，这些接口接受固定数量的参数。通常此宏被定义为空，不过在 Windows 平台上的构建中，有时会被设置为
    "__cdecl" 或 "__stdcall"。默认情况下是 "__cdecl"，但当 SQLite 被编译为 Windows 系统库时会使用 "__stdcall"。
- en: ''
  id: totrans-611
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A single function declaration should contain no more than one of the following:
    [SQLITE_APICALL](compile.html#apicall), [SQLITE_CDECL](compile.html#cdecl), or
    [SQLITE_SYSAPI](compile.html#sysapi).'
  id: totrans-612
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 单个函数声明中应当包含以下其中之一：[SQLITE_APICALL](compile.html#apicall)，[SQLITE_CDECL](compile.html#cdecl)，或者[SQLITE_SYSAPI](compile.html#sysapi)。
- en: '**SQLITE_CALLBACK**'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_CALLBACK**'
- en: This macro specifies the calling convention used with callback pointers in SQLite.
    This macro is normally defined to be nothing, though on Windows builds it can
    sometimes be set to "__cdecl" or "__stdcall". The "__cdecl" setting is the default,
    but "__stdcall" is used when SQLite is intended to be compiled as a Windows system
    library.
  id: totrans-614
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏指定了 SQLite 中回调指针所使用的调用约定。通常此宏被定义为空，不过在 Windows 平台上的构建中，有时会被设置为 "__cdecl" 或
    "__stdcall"。默认情况下是 "__cdecl"，但当 SQLite 被编译为 Windows 系统库时会使用 "__stdcall"。
- en: '**SQLITE_CDECL**'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_CDECL**'
- en: This macro specifies the calling convention used by varargs interface routines
    in SQLite. This macro is normally defined to be nothing, though on Windows builds
    it can sometimes be set to "__cdecl". This macro is used on varargs routines and
    so cannot be set to "__stdcall" since the __stdcall calling convention does not
    support varargs functions.
  id: totrans-616
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏指定 SQLite 中 varargs 接口例程使用的调用约定。通常情况下，此宏被定义为空，但在 Windows 构建中有时会设置为 "__cdecl"。此宏用于
    varargs 例程，因此不能设置为 "__stdcall"，因为 "__stdcall" 调用约定不支持 varargs 函数。
- en: ''
  id: totrans-617
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A single function declaration should contain no more than one of the following:
    [SQLITE_APICALL](compile.html#apicall), [SQLITE_CDECL](compile.html#cdecl), or
    [SQLITE_SYSAPI](compile.html#sysapi).'
  id: totrans-618
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 单个函数声明中应包含以下选项之一：[SQLITE_APICALL](compile.html#apicall)、[SQLITE_CDECL](compile.html#cdecl)
    或 [SQLITE_SYSAPI](compile.html#sysapi)。
- en: '**SQLITE_EXTERN**'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_EXTERN**'
- en: This macro specifies linkage for public interface variables in SQLite. It should
    normally be allowed to default to "extern".
  id: totrans-620
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏指定 SQLite 中公共接口变量的链接。通常应默认为 "extern"。
- en: '**SQLITE_STDCALL**'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_STDCALL**'
- en: This macro is no longer used and is now deprecated.
  id: totrans-622
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏已不再使用，现在已经被弃用。
- en: '**SQLITE_SYSAPI**'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_SYSAPI**'
- en: This macro identifies the calling convention used by operating system interfaces
    for the target platform for an SQLite build. This macro is normally defined to
    be nothing, though on Windows builds it can sometimes be set to "__stdcall".
  id: totrans-624
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏标识 SQLite 构建的目标平台的操作系统接口所使用的调用约定。通常情况下，此宏被定义为空，但在 Windows 构建中有时会设置为 "__stdcall"。
- en: ''
  id: totrans-625
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A single function declaration should contain no more than one of the following:
    [SQLITE_APICALL](compile.html#apicall), [SQLITE_CDECL](compile.html#cdecl), or
    [SQLITE_SYSAPI](compile.html#sysapi).'
  id: totrans-626
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 单个函数声明中应包含以下选项之一：[SQLITE_APICALL](compile.html#apicall)、[SQLITE_CDECL](compile.html#cdecl)
    或 [SQLITE_SYSAPI](compile.html#sysapi)。
- en: '**SQLITE_TCLAPI**'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLITE_TCLAPI**'
- en: This macro specifies the calling convention used by the [TCL](http://www.tcl.tk)
    library interface routines. This macro is not used by the SQLite core, but only
    by the [TCL Interface](tclsqlite.html) and [TCL test suite](testing.html#tcl).
    This macro is normally defined to be nothing, though on Windows builds it can
    sometimes be set to "__cdecl". This macro is used on TCL library interface routines
    which are always compiled as __cdecl, even on platforms that prefer to use __stdcall,
    so this macro should not be set to __stdcall unless the platform has a custom
    TCL library build that supports __stdcall.
  id: totrans-628
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏指定 [TCL](http://www.tcl.tk) 库接口例程所使用的调用约定。SQLite 核心不使用此宏，仅供 [TCL 接口](tclsqlite.html)
    和 [TCL 测试套件](testing.html#tcl) 使用。通常情况下，此宏被定义为空，但在 Windows 构建中有时会设置为 "__cdecl"。此宏用于
    TCL 库接口例程，这些例程始终作为 __cdecl 编译，即使在偏好使用 __stdcall 的平台上也是如此，因此除非平台具有支持 __stdcall
    的自定义 TCL 库构建，否则不应将此宏设置为 __stdcall。
- en: ''
  id: totrans-629
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This macro may not be used in combination with any of [SQLITE_APICALL](compile.html#apicall),
    [SQLITE_CALLBACK](compile.html#callback), [SQLITE_CDECL](compile.html#cdecl) or
    [SQLITE_SYSAPI](compile.html#sysapi).
  id: totrans-630
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此宏不能与[SQLITE_APICALL](compile.html#apicall)，[SQLITE_CALLBACK](compile.html#callback)，[SQLITE_CDECL](compile.html#cdecl)或[SQLITE_SYSAPI](compile.html#sysapi)的任何组合一起使用。
