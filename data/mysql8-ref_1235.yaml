- en: 17.11.4 Defragmenting a Table
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.11.4 表碎片整理
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-file-defragmenting.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-file-defragmenting.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-file-defragmenting.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-file-defragmenting.html)
- en: Random insertions into or deletions from a secondary index can cause the index
    to become fragmented. Fragmentation means that the physical ordering of the index
    pages on the disk is not close to the index ordering of the records on the pages,
    or that there are many unused pages in the 64-page blocks that were allocated
    to the index.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随机插入或从二级索引中删除可能导致索引碎片化。碎片化意味着磁盘上索引页面的物理排序与页面上记录的索引排序不接近，或者在为索引分配的 64 页块中有许多未使用的页面。
- en: 'One symptom of fragmentation is that a table takes more space than it “should”
    take. How much that is exactly, is difficult to determine. All `InnoDB` data and
    indexes are stored in [B-trees](glossary.html#glos_b_tree "B-tree"), and their
    [fill factor](glossary.html#glos_fill_factor "fill factor") may vary from 50%
    to 100%. Another symptom of fragmentation is that a table scan such as this takes
    more time than it “should” take:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 碎片化的一个症状是表占用的空间比“应该”占用的空间多。确切的数量很难确定。所有 `InnoDB` 数据和索引都存储在[B 树](glossary.html#glos_b_tree
    "B-tree")中，它们的[填充因子](glossary.html#glos_fill_factor "fill factor")可能从 50% 变化到
    100%。碎片化的另一个症状是像这样的表扫描所需的时间比“应该”花费的时间更长：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding query requires MySQL to perform a full table scan, the slowest
    type of query for a large table.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的查询需要 MySQL 执行完整表扫描，这是针对大表最慢的查询类型。
- en: 'To speed up index scans, you can periodically perform a “null” [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") operation, which causes MySQL to rebuild the table:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为加快索引扫描速度，您可以定期执行“null”[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement")操作，这会导致 MySQL 重建表：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can also use [`ALTER TABLE *`tbl_name`* FORCE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") to perform a “null” alter operation that rebuilds the table.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用[`ALTER TABLE *`tbl_name`* FORCE`](alter-table.html "15.1.9 ALTER TABLE
    Statement")执行“null” alter 操作，重建表。
- en: Both [`ALTER TABLE *`tbl_name`* ENGINE=INNODB`](alter-table.html "15.1.9 ALTER
    TABLE Statement") and [`ALTER TABLE *`tbl_name`* FORCE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") use [online DDL](innodb-online-ddl.html "17.12 InnoDB and Online
    DDL"). For more information, see [Section 17.12, “InnoDB and Online DDL”](innodb-online-ddl.html
    "17.12 InnoDB and Online DDL").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ALTER TABLE *`tbl_name`* ENGINE=INNODB`](alter-table.html "15.1.9 ALTER TABLE
    Statement") 和 [`ALTER TABLE *`tbl_name`* FORCE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") 都使用[在线 DDL](innodb-online-ddl.html "17.12 InnoDB and Online
    DDL")。有关更多信息，请参见[Section 17.12, “InnoDB and Online DDL”](innodb-online-ddl.html
    "17.12 InnoDB and Online DDL")。'
- en: Another way to perform a defragmentation operation is to use [**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program") to dump the table to a text file,
    drop the table, and reload it from the dump file.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种执行碎片整理操作的方法是使用[**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database
    Backup Program")将表转储到文本文件中，删除表，并从转储文件重新加载。
- en: If the insertions into an index are always ascending and records are deleted
    only from the end, the `InnoDB` filespace management algorithm guarantees that
    fragmentation in the index does not occur.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对索引的插入始终是升序的，并且仅从末尾删除记录，则 `InnoDB` 文件空间管理算法保证索引不会发生碎片化。
