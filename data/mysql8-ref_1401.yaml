- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-binlog-encryption-encryption-keys.html](https://dev.mysql.com/doc/refman/8.0/en/replication-binlog-encryption-encryption-keys.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-binlog-encryption-encryption-keys.html](https://dev.mysql.com/doc/refman/8.0/en/replication-binlog-encryption-encryption-keys.html)
- en: 19.3.2.2 Binary Log Encryption Keys
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 19.3.2.2 二进制日志加密密钥
- en: The binary log encryption keys used to encrypt the file passwords for the log
    files are 256-bit keys that are generated specifically for each MySQL server instance
    using MySQL Server's keyring service (see [Section 8.4.4, “The MySQL Keyring”](keyring.html
    "8.4.4 The MySQL Keyring")). The keyring service handles the creation, retrieval,
    and deletion of the binary log encryption keys. A server instance only creates
    and removes keys generated for itself, but it can read keys generated for other
    instances if they are stored in the keyring, as in the case of a server instance
    that has been cloned by file copying.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 用于加密日志文件的文件密码的二进制日志加密密钥是为每个 MySQL 服务器实例专门生成的 256 位密钥，使用 MySQL 服务器的密钥环服务生成（参见[第
    8.4.4 节，“MySQL 密钥环”](keyring.html "8.4.4 MySQL 密钥环")）。密钥环服务处理二进制日志加密密钥的创建、检索和删除。服务器实例仅为自身创建和删除生成的密钥，但如果存储在密钥环中，则可以读取为其他实例生成的密钥，例如通过文件复制克隆的服务器实例的情况。
- en: Important
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The binary log encryption keys for a MySQL server instance must be included
    in your backup and recovery procedures, because if the keys required to decrypt
    the file passwords for current and retained binary log files or relay log files
    are lost, it might not be possible to start the server.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 服务器实例的二进制日志加密密钥必须包含在您的备份和恢复程序中，因为如果丢失了解密当前和保留的二进制日志文件或中继日志文件的文件密码所需的密钥，可能无法启动服务器。
- en: 'The format of binary log encryption keys in the keyring is as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥环中二进制日志加密密钥的格式如下：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`{UUID}` is the true UUID generated by the MySQL server (the value of the [`server_uuid`](replication-options.html#sysvar_server_uuid)
    system variable). `{SEQ_NO}` is the sequence number for the binary log encryption
    key, which is incremented by 1 for each new key that is generated on the server.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`{UUID}` 是由 MySQL 服务器生成的真实 UUID（[`server_uuid`](replication-options.html#sysvar_server_uuid)
    系统变量的值）。`{SEQ_NO}` 是二进制日志加密密钥的序列号，对于在服务器上生成的每个新密钥，该序列号递增 1。'
- en: The binary log encryption key that is currently in use on the server is called
    the binary log master key. The sequence number for the current binary log master
    key is stored in the keyring. The binary log master key is used to encrypt each
    new log file's file password, which is a randomly generated 32-byte file password
    specific to the log file that is used to encrypt the file data. The file password
    is encrypted using AES-CBC (AES Cipher Block Chaining mode) with the 256-bit binary
    log encryption key and a random initialization vector (IV), and is stored in the
    log file's file header. The file data is encrypted using AES-CTR (AES Counter
    mode) with a 256-bit key generated from the file password and a nonce also generated
    from the file password. It is technically possible to decrypt an encrypted file
    offline, if the binary log encryption key used to encrypt the file password is
    known, by using tools available in the OpenSSL cryptography toolkit.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目前在服务器上使用的二进制日志加密密钥称为二进制日志主密钥。当前二进制日志主密钥的序列号存储在密钥环中。二进制日志主密钥用于加密每个新日志文件的文件密码，这是一个特定于用于加密文件数据的日志文件的随机生成的
    32 字节文件密码。文件密码使用 AES-CBC（AES 密码块链接模式）使用 256 位二进制日志加密密钥和随机初始化向量（IV）进行加密，并存储在日志文件的文件头中。文件数据使用从文件密码生成的
    256 位密钥和从文件密码生成的随机数也生成的随机数使用 AES-CTR（AES 计数器模式）进行加密。如果知道用于加密文件密码的二进制日志加密密钥，则可以使用
    OpenSSL 密码工具包中提供的工具离线解密加密文件。
- en: If you use file copying to clone a MySQL server instance that has encryption
    active so its binary log files and relay log files are encrypted, ensure that
    the keyring is also copied, so that the clone server can read the binary log encryption
    keys from the source server. When encryption is activated on the clone server
    (either at startup or subsequently), the clone server recognizes that the binary
    log encryption keys used with the copied files include the generated UUID of the
    source server. It automatically generates a new binary log encryption key using
    its own generated UUID, and uses this to encrypt the file passwords for subsequent
    binary log files and relay log files. The copied files continue to be read using
    the source server's keys.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用文件复制来克隆一个具有加密功能的 MySQL 服务器实例，使其二进制日志文件和中继日志文件被加密，请确保也复制了密钥环，以便克隆服务器可以从源服务器读取二进制日志加密密钥。当在克隆服务器上激活加密（无论是在启动时还是随后），克隆服务器会意识到与复制文件一起使用的二进制日志加密密钥包括源服务器的生成的
    UUID。它会自动生成一个新的二进制日志加密密钥，使用自己生成的 UUID，并将其用于加密后续的二进制日志文件和中继日志文件的文件密码。复制的文件将继续使用源服务器的密钥进行读取。
