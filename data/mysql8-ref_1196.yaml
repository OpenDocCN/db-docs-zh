- en: 17.7.6 Transaction Scheduling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.7.6 事务调度
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-scheduling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-scheduling.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-scheduling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-scheduling.html)
- en: '`InnoDB` uses the Contention-Aware Transaction Scheduling (CATS) algorithm
    to prioritize transactions that are waiting for locks. When multiple transactions
    are waiting for a lock on the same object, the CATS algorithm determines which
    transaction receives the lock first.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`使用Contenion-Aware Transaction Scheduling (CATS)算法来优先处理等待锁的事务。当多个事务等待同一对象上的锁时，CATS算法确定哪个事务首先获得锁。'
- en: The CATS algorithm prioritizes waiting transactions by assigning a scheduling
    weight, which is computed based on the number of transactions that a transaction
    blocks. For example, if two transactions are waiting for a lock on the same object,
    the transaction that blocks the most transactions is assigned a greater scheduling
    weight. If weights are equal, priority is given to the longest waiting transaction.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: CATS算法通过分配调度权重来优先处理等待事务，该权重是基于事务阻塞的事务数量计算的。例如，如果两个事务正在等待同一对象上的锁，那么阻塞最多事务的事务将被分配更大的调度权重。如果权重相等，则优先考虑等待时间最长的事务。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Prior to MySQL 8.0.20, `InnoDB` also uses a First In First Out (FIFO) algorithm
    to schedule transactions, and the CATS algorithm is used under heavy lock contention
    only. CATS algorithm enhancements in MySQL 8.0.20 rendered the FIFO algorithm
    redundant, permitting its removal. Transaction scheduling previously performed
    by the FIFO algorithm is performed by the CATS algorithm as of MySQL 8.0.20\.
    In some cases, this change may affect the order in which transactions are granted
    locks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.20之前，`InnoDB`还使用先进先出（FIFO）算法来调度事务，并且CATS算法仅在锁争用严重时使用。MySQL 8.0.20中的CATS算法增强使FIFO算法变得多余，允许其移除。MySQL
    8.0.20之后，由FIFO算法执行的事务调度由CATS算法执行。在某些情况下，此更改可能会影响事务获得锁的顺序。
- en: You can view transaction scheduling weights by querying the `TRX_SCHEDULE_WEIGHT`
    column in the Information Schema [`INNODB_TRX`](information-schema-innodb-trx-table.html
    "28.4.28 The INFORMATION_SCHEMA INNODB_TRX Table") table. Weights are computed
    for waiting transactions only. Waiting transactions are those in a `LOCK WAIT`
    transaction execution state, as reported by the `TRX_STATE` column. A transaction
    that is not waiting for a lock reports a NULL `TRX_SCHEDULE_WEIGHT` value.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查询信息模式[`INNODB_TRX`](information-schema-innodb-trx-table.html "28.4.28 INFORMATION_SCHEMA
    INNODB_TRX表")表中的`TRX_SCHEDULE_WEIGHT`列来查看事务调度权重。权重仅针对等待事务计算。等待事务是指处于`LOCK WAIT`事务执行状态的事务，如`TRX_STATE`列所报告的那样。不等待锁的事务报告NULL的`TRX_SCHEDULE_WEIGHT`值。
- en: '[`INNODB_METRICS`](information-schema-innodb-metrics-table.html "28.4.21 The
    INFORMATION_SCHEMA INNODB_METRICS Table") counters are provided for monitoring
    of code-level transaction scheduling events. For information about using [`INNODB_METRICS`](information-schema-innodb-metrics-table.html
    "28.4.21 The INFORMATION_SCHEMA INNODB_METRICS Table") counters, see [Section 17.15.6,
    “InnoDB INFORMATION_SCHEMA Metrics Table”](innodb-information-schema-metrics-table.html
    "17.15.6 InnoDB INFORMATION_SCHEMA Metrics Table").'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[`INNODB_METRICS`](information-schema-innodb-metrics-table.html "28.4.21 INFORMATION_SCHEMA
    INNODB_METRICS表")提供了用于监视代码级事务调度事件的计数器。有关使用[`INNODB_METRICS`](information-schema-innodb-metrics-table.html
    "28.4.21 INFORMATION_SCHEMA INNODB_METRICS表")计数器的信息，请参见[第17.15.6节，“InnoDB INFORMATION_SCHEMA
    Metrics Table”](innodb-information-schema-metrics-table.html "17.15.6 InnoDB INFORMATION_SCHEMA
    Metrics Table")。'
- en: '`lock_rec_release_attempts`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lock_rec_release_attempts`'
- en: The number of attempts to release record locks. A single attempt may lead to
    zero or more record locks being released, as there may be zero or more record
    locks in a single structure.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 释放记录锁的尝试次数。一次尝试可能导致释放零个或多个记录锁，因为单个结构中可能存在零个或多个记录锁。
- en: '`lock_rec_grant_attempts`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lock_rec_grant_attempts`'
- en: The number of attempts to grant record locks. A single attempt may result in
    zero or more record locks being granted.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试授予记录锁的次数。一次尝试可能导致授予零个或多个记录锁。
- en: '`lock_schedule_refreshes`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lock_schedule_refreshes`'
- en: The number of times the wait-for graph was analyzed to update the scheduled
    transaction weights.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分析等待图以更新调度事务权重的次数。
