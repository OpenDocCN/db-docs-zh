- en: Memory-Mapped I/O
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存映射I/O
- en: 原文：[https://sqlite.com/mmap.html](https://sqlite.com/mmap.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/mmap.html](https://sqlite.com/mmap.html)
- en: The default mechanism by which SQLite accesses and updates database disk files
    is the xRead() and xWrite() methods of the [sqlite3_io_methods](c3ref/io_methods.html)
    VFS object. These methods are typically implemented as "read()" and "write()"
    system calls which cause the operating system to copy disk content between the
    kernel buffer cache and user space.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite访问和更新数据库磁盘文件的默认机制是通过[sqlite3_io_methods](c3ref/io_methods.html) VFS对象的xRead()和xWrite()方法。这些方法通常实现为导致操作系统在内核缓冲区高速缓存和用户空间之间复制磁盘内容的“read()”和“write()”系统调用。
- en: Beginning with [version 3.7.17](releaselog/3_7_17.html) (2013-05-20), SQLite
    has the option of accessing disk content directly using memory-mapped I/O and
    the new xFetch() and xUnfetch() methods on [sqlite3_io_methods](c3ref/io_methods.html).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从[版本3.7.17](releaselog/3_7_17.html)（2013-05-20）开始，SQLite具有通过内存映射I/O直接访问磁盘内容的选项，并在[sqlite3_io_methods](c3ref/io_methods.html)上使用新的xFetch()和xUnfetch()方法。
- en: 'There are advantages and disadvantages to using memory-mapped I/O. Advantages
    include:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内存映射I/O的优缺点各有所见。优点包括：
- en: Many operations, especially I/O intensive operations, can be faster since content
    need not be copied between kernel space and user space.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 许多操作，特别是I/O密集型操作，可能更快，因为内容无需在内核空间和用户空间之间复制。
- en: The SQLite library may need less RAM since it shares pages with the operating-system
    page cache and does not always need its own copy of working pages.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于SQLite库与操作系统页面缓存共享页面，并且不始终需要其自己的工作页面副本，因此SQLite库可能需要更少的RAM。
- en: 'But there are also disadvantages:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但也存在一些缺点：
- en: An I/O error on a memory-mapped file cannot be caught and dealt with by SQLite.
    Instead, the I/O error causes a signal which, if not caught by the application,
    results in a program crash.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内存映射文件上的I/O错误无法被SQLite捕获和处理。相反，I/O错误会导致信号，如果应用程序没有捕获到该信号，则会导致程序崩溃。
- en: The operating system must have a unified buffer cache in order for the memory-mapped
    I/O extension to work correctly, especially in situations where two processes
    are accessing the same database file and one process is using memory-mapped I/O
    while the other is not. Not all operating systems have a unified buffer cache.
    In some operating systems that claim to have a unified buffer cache, the implementation
    is buggy and can lead to corrupt databases.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作系统必须具有统一的缓冲区高速缓存，以确保内存映射I/O扩展正常工作，特别是在两个进程访问同一数据库文件的情况下，其中一个进程使用内存映射I/O，而另一个进程不使用。并非所有操作系统都具有统一的缓冲区高速缓存。在某些声称具有统一缓冲区高速缓存的操作系统中，实现可能存在错误，并可能导致数据库损坏。
- en: Performance does not always increase with memory-mapped I/O. In fact, it is
    possible to construct test cases where performance is reduced by the use of memory-mapped
    I/O.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 性能并非总是随着内存映射I/O的使用而增加。事实上，可以构造测试用例，证明内存映射I/O的使用会降低性能。
- en: Windows is unable to truncate a memory-mapped file. Hence, on Windows, if an
    operation such as [VACUUM](lang_vacuum.html) or [auto_vacuum](pragma.html#pragma_auto_vacuum)
    tries to reduce the size of a memory-mapped database file, the size reduction
    attempt will silently fail, leaving unused space at the end of the database file.
    No data is lost due to this problem, and the unused space will be reused again
    the next time the database grows. However if a version of SQLite prior to 3.7.0
    runs [PRAGMA integrity_check](pragma.html#pragma_integrity_check) on such a database,
    it will (incorrectly) report database corruption due to the unused space at the
    end. Or if a version of SQLite prior to 3.7.0 writes to the database while it
    still has unused space at the end, it may make that unused space inaccessible
    and unavailable for reuse until after the next [VACUUM](lang_vacuum.html).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows无法截断内存映射文件。因此，在Windows上，如果执行诸如[VACUUM](lang_vacuum.html)或[auto_vacuum](pragma.html#pragma_auto_vacuum)之类的操作试图减少内存映射数据库文件的大小，则大小减少尝试将悄无声息地失败，使得数据库文件末尾留下未使用的空间。由于此问题不会导致数据丢失，并且未使用的空间将在数据库再次增长时重新使用。但是，如果在SQLite
    3.7.0之前的版本上运行[PRAGMA integrity_check](pragma.html#pragma_integrity_check)来检查这样的数据库，则会（错误地）报告由于数据库末尾的未使用空间而导致的数据库损坏。或者如果在SQLite
    3.7.0之前的版本中在数据库仍有未使用空间时对其进行写入，则可能使该未使用空间变得不可访问并在下一次[VACUUM](lang_vacuum.html)之后再次可用。
- en: Because of the potential disadvantages, memory-mapped I/O is disabled by default.
    To activate memory-mapped I/O, use the [mmap_size pragma](pragma.html#pragma_mmap_size)
    and set the mmap_size to some large number, usually 256MB or larger, depending
    on how much address space your application can spare. The rest is automatic. The
    [PRAGMA mmap_size](pragma.html#pragma_mmap_size) statement will be a silent no-op
    on systems that do not support memory-mapped I/O.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于潜在的缺点，内存映射 I/O 默认是禁用的。要激活内存映射 I/O，请使用 [mmap_size pragma](pragma.html#pragma_mmap_size)
    并将 mmap_size 设置为一些较大的数字，通常是 256MB 或更大，具体取决于应用程序可以提供多少地址空间。其余工作是自动完成的。在不支持内存映射
    I/O 的系统上，[PRAGMA mmap_size](pragma.html#pragma_mmap_size) 语句将是一个静默的空操作。
- en: How Memory-Mapped I/O Works
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存映射 I/O 的工作原理
- en: To read a page of database content using the legacy xRead() method, SQLite first
    allocates a page-size chunk of heap memory then invokes the xRead() method which
    causes the database page content to be copied into the newly allocated heap memory.
    This involves (at a minimum) a copy of the entire page.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用传统的 xRead() 方法读取数据库内容的页面，SQLite 首先分配一个页面大小的堆内存块，然后调用 xRead() 方法，导致数据库页面内容被复制到新分配的堆内存中。这至少涉及整个页面的复制。
- en: But if SQLite wants to access a page of the database file and memory mapped
    I/O is enabled, it first calls the xFetch() method. The xFetch() method asks the
    operating system to return a pointer to the requested page, if possible. If the
    requested page has been or can be mapped into the application address space, then
    xFetch returns a pointer to that page for SQLite to use without having to copy
    anything. Skipping the copy step is what makes memory mapped I/O faster.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果 SQLite 想要访问数据库文件的某一页并启用了内存映射 I/O，则首先调用 xFetch() 方法。xFetch() 方法请求操作系统返回所请求页面的指针，如果可能的话。如果请求的页面已经被映射到应用程序地址空间中，那么
    xFetch 返回该页面的指针供 SQLite 使用，而无需复制任何内容。跳过复制步骤是内存映射 I/O 更快的原因。
- en: SQLite does not assume that the xFetch() method will work. If a call to xFetch()
    returns a NULL pointer (indicating that the requested page is not currently mapped
    into the applications address space) then SQLite silently falls back to using
    xRead(). An error is only reported if xRead() also fails.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 不假定 xFetch() 方法会起作用。如果调用 xFetch() 返回一个空指针（表示请求的页面当前未映射到应用程序地址空间），那么 SQLite
    会静默地回退到使用 xRead()。只有在 xRead() 也失败时才会报错。
- en: When updating the database file, SQLite always makes a copy of the page content
    into heap memory before modifying the page. This is necessary for two reasons.
    First, changes to the database are not supposed to be visible to other processes
    until after the transaction commits and so the changes must occur in private memory.
    Second, SQLite uses a read-only memory map to prevent stray pointers in the application
    from overwriting and corrupting the database file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当更新数据库文件时，SQLite 总是在修改页面之前将页面内容复制到堆内存中。这是出于两个原因的必要性。首先，数据库的更改在事务提交之前不应对其他进程可见，因此更改必须发生在私有内存中。其次，SQLite
    使用只读内存映射来防止应用程序中的杂散指针覆盖和损坏数据库文件。
- en: After all needed changes are completed, xWrite() is used to move the content
    back into the database file. Hence the use of memory mapped I/O does not significantly
    change the performance of database changes. Memory mapped I/O is mostly a benefit
    for queries.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有必要的更改之后，xWrite() 用于将内容移回数据库文件。因此，使用内存映射 I/O 不会显著改变数据库更改的性能。内存映射 I/O 主要对查询有益。
- en: Configuring Memory-Mapped I/O
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置内存映射 I/O
- en: The "mmap_size" is the maximum number of bytes of the database file that SQLite
    will try to map into the process address space at one time. The mmap_size applies
    separately to each database file, so the total amount of process address space
    that could potentially be used is the mmap_size times the number of open database
    files.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '"mmap_size" 是 SQLite 尝试在进程地址空间中一次映射的数据库文件的最大字节数。mmap_size 分别适用于每个数据库文件，因此可以潜在使用的进程地址空间总量为
    mmap_size 乘以打开的数据库文件数。'
- en: 'To activate memory-mapped I/O, an application can set the mmap_size to some
    large value. For example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活内存映射 I/O，应用程序可以将 mmap_size 设置为较大的值。例如：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To disable memory-mapped I/O, simply set the mmap_size to zero:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用内存映射 I/O，只需将 mmap_size 设置为零：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If mmap_size is set to N then all current implementations map the first N bytes
    of the database file and use legacy xRead() calls for any content beyond N bytes.
    If the database file is smaller than N bytes, then the entire file is mapped.
    In the future, new OS interfaces could, in theory, map regions of the file other
    than the first N bytes, but no such implementation currently exists.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 mmap_size 设置为 N，则所有当前的实现都会将数据库文件的前 N 字节映射到内存，并对超出 N 字节的内容使用传统的 xRead() 调用。如果数据库文件小于
    N 字节，则整个文件都会被映射。未来，理论上新的操作系统接口可以映射文件除了前 N 字节之外的区域，但目前尚无此类实现。
- en: The mmap_size is set separately for each database file using the "[PRAGMA mmap_size](pragma.html#pragma_mmap_size)"
    statement. The usual default mmap_size is zero, meaning that memory mapped I/O
    is disabled by default. However, the default mmap_size can be increased either
    at compile-time using the [SQLITE_DEFAULT_MMAP_SIZE](compile.html#default_mmap_size)
    macro or at start-time using the [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MMAP_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize),...)
    interface.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '"[PRAGMA mmap_size](pragma.html#pragma_mmap_size)" 语句用于分别为每个数据库文件设置 mmap_size。通常，默认的
    mmap_size 是零，意味着默认情况下禁用内存映射 I/O。但是，可以在编译时使用 [SQLITE_DEFAULT_MMAP_SIZE](compile.html#default_mmap_size)
    宏或在启动时使用 [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MMAP_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize),...)
    接口来增加默认的 mmap_size。'
- en: 'SQLite also maintains a hard upper bound on the mmap_size. Attempts to increase
    the mmap_size above this hard upper bound (using [PRAGMA mmap_size](pragma.html#pragma_mmap_size))
    will automatically cap the mmap_size at the hard upper bound. If the hard upper
    bound is zero, then memory mapped I/O is impossible. The hard upper bound can
    be set at compile-time using the [SQLITE_MAX_MMAP_SIZE](compile.html#max_mmap_size)
    macro. If [SQLITE_MAX_MMAP_SIZE](compile.html#max_mmap_size) is set to zero, then
    the code used to implement memory mapped I/O is omitted from the build. The hard
    upper bound is automatically set to zero on certain platforms (ex: OpenBSD) where
    memory mapped I/O does not work due to the lack of a unified buffer cache.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 还保持对 mmap_size 的硬上限。尝试将 mmap_size 增加到这个硬上限之上（使用 [PRAGMA mmap_size](pragma.html#pragma_mmap_size)）会自动将
    mmap_size 限制在硬上限之内。如果硬上限为零，则无法进行内存映射 I/O。硬上限可以在编译时使用 [SQLITE_MAX_MMAP_SIZE](compile.html#max_mmap_size)
    宏进行设置。如果 [SQLITE_MAX_MMAP_SIZE](compile.html#max_mmap_size) 设置为零，则用于实现内存映射 I/O
    的代码将被省略。在某些平台（例如 OpenBSD）上，由于缺乏统一的缓冲区缓存，硬上限会自动设置为零，从而导致内存映射 I/O 不起作用。
- en: If the hard upper bound on mmap_size is non-zero at compilation time, it may
    still be reduced or zeroed at start-time using the [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MMAP_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize),X,Y)
    interface. The X and Y parameters must both be 64-bit signed integers. The X parameter
    is the default mmap_size of the process and the Y is the new hard upper bound.
    The hard upper bound cannot be increased above its compile-time setting using
    [SQLITE_CONFIG_MMAP_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize)
    but it can be reduced or zeroed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在编译时 mmap_size 的硬上限不为零，可以在启动时使用 [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_MMAP_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize),X,Y)
    接口来减少或将其归零。X 和 Y 参数必须都是 64 位有符号整数。X 参数是进程的默认 mmap_size，Y 是新的硬上限。使用 [SQLITE_CONFIG_MMAP_SIZE](c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize)
    不能将硬上限增加到编译时的设置之上，但可以减少或归零。
