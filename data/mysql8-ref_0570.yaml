- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimize-character.html](https://dev.mysql.com/doc/refman/8.0/en/optimize-character.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimize-character.html](https://dev.mysql.com/doc/refman/8.0/en/optimize-character.html)
- en: 10.4.2.2 Optimizing for Character and String Types
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.4.2.2 优化字符和字符串类型
- en: 'For character and string columns, follow these guidelines:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于字符和字符串列，请遵循以下准则：
- en: Use binary collation order for fast comparison and sort operations, when you
    do not need language-specific collation features. You can use the [`BINARY`](cast-functions.html#operator_binary)
    operator to use binary collation within a particular query.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用二进制排序顺序进行快速比较和排序操作，当您不需要特定于语言的排序功能时。您可以在特定查询中使用[`BINARY`](cast-functions.html#operator_binary)运算符来使用二进制排序。
- en: When comparing values from different columns, declare those columns with the
    same character set and collation wherever possible, to avoid string conversions
    while running the query.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在比较来自不同列的值时，尽可能声明这些列具有相同的字符集和排序规则，以避免在运行查询时进行字符串转换。
- en: For column values less than 8KB in size, use binary `VARCHAR` instead of `BLOB`.
    The `GROUP BY` and `ORDER BY` clauses can generate temporary tables, and these
    temporary tables can use the `MEMORY` storage engine if the original table does
    not contain any `BLOB` columns.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于大小小于8KB的列值，请使用二进制`VARCHAR`而不是`BLOB`。`GROUP BY`和`ORDER BY`子句可以生成临时表，如果原始表不包含任何`BLOB`列，则这些临时表可以使用`MEMORY`存储引擎。
- en: If a table contains string columns such as name and address, but many queries
    do not retrieve those columns, consider splitting the string columns into a separate
    table and using join queries with a foreign key when necessary. When MySQL retrieves
    any value from a row, it reads a data block containing all the columns of that
    row (and possibly other adjacent rows). Keeping each row small, with only the
    most frequently used columns, allows more rows to fit in each data block. Such
    compact tables reduce disk I/O and memory usage for common queries.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个表包含字符串列，如姓名和地址，但许多查询不检索这些列，请考虑将字符串列拆分到一个单独的表中，并在必要时使用带有外键的连接查询。当MySQL从一行中检索任何值时，它会读取包含该行所有列（以及可能其他相邻行）的数据块。保持每行小，只包含最常用的列，可以使更多的行适合每个数据块中。这样的紧凑表减少了常见查询的磁盘I/O和内存使用。
- en: When you use a randomly generated value as a primary key in an `InnoDB` table,
    prefix it with an ascending value such as the current date and time if possible.
    When consecutive primary values are physically stored near each other, `InnoDB`
    can insert and retrieve them faster.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您在`InnoDB`表中将随机生成的值用作主键时，最好将其前缀设置为一个递增值，例如当前日期和时间。当连续的主键值在物理上靠近时，`InnoDB`可以更快地插入和检索它们。
- en: See [Section 10.4.2.1, “Optimizing for Numeric Data”](optimize-numeric.html
    "10.4.2.1 Optimizing for Numeric Data") for reasons why a numeric column is usually
    preferable to an equivalent string column.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[Section 10.4.2.1, “Optimizing for Numeric Data”](optimize-numeric.html "10.4.2.1 Optimizing
    for Numeric Data")，了解为什么数值列通常优于等效的字符串列。
