- en: 10.12.1 Optimizing Disk I/O
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.12.1 优化磁盘I/O
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/disk-issues.html](https://dev.mysql.com/doc/refman/8.0/en/disk-issues.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/disk-issues.html](https://dev.mysql.com/doc/refman/8.0/en/disk-issues.html)
- en: This section describes ways to configure storage devices when you can devote
    more and faster storage hardware to the database server. For information about
    optimizing an `InnoDB` configuration to improve I/O performance, see [Section 10.5.8,
    “Optimizing InnoDB Disk I/O”](optimizing-innodb-diskio.html "10.5.8 Optimizing
    InnoDB Disk I/O").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了当你可以为数据库服务器提供更多和更快的存储硬件时如何配置存储设备。有关优化`InnoDB`配置以提高I/O性能的信息，请参见[第10.5.8节，“优化InnoDB磁盘I/O”](optimizing-innodb-diskio.html
    "10.5.8 优化InnoDB磁盘I/O")。
- en: Disk seeks are a huge performance bottleneck. This problem becomes more apparent
    when the amount of data starts to grow so large that effective caching becomes
    impossible. For large databases where you access data more or less randomly, you
    can be sure that you need at least one disk seek to read and a couple of disk
    seeks to write things. To minimize this problem, use disks with low seek times.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘寻道是一个巨大的性能瓶颈。当数据量变得如此之大以至于有效缓存变得不可能时，这个问题变得更加明显。对于访问数据比较随机的大型数据库，你可以确信你至少需要一个磁盘寻道来读取数据，以及几个磁盘寻道来写入数据。为了最小化这个问题，使用寻道时间较低的磁盘。
- en: 'Increase the number of available disk spindles (and thereby reduce the seek
    overhead) by either symlinking files to different disks or striping the disks:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加可用磁盘轴承的数量（从而减少寻道开销），可以通过将文件符号链接到不同的磁盘或者对磁盘进行条带化来实现：
- en: Using symbolic links
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用符号链接
- en: This means that, for `MyISAM` tables, you symlink the index file and data files
    from their usual location in the data directory to another disk (that may also
    be striped). This makes both the seek and read times better, assuming that the
    disk is not used for other purposes as well. See [Section 10.12.2, “Using Symbolic
    Links”](symbolic-links.html "10.12.2 Using Symbolic Links").
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着，对于`MyISAM`表，你可以将索引文件和数据文件从它们在数据目录中的通常位置创建符号链接到另一个磁盘（也可以进行条带化）。假设该磁盘没有用于其他目的，这将使寻道和读取时间更好。参见[第10.12.2节，“使用符号链接”](symbolic-links.html
    "10.12.2 使用符号链接")。
- en: Symbolic links are not supported for use with `InnoDB` tables. However, it is
    possible to place `InnoDB` data and log files on different physical disks. For
    more information, see [Section 10.5.8, “Optimizing InnoDB Disk I/O”](optimizing-innodb-diskio.html
    "10.5.8 Optimizing InnoDB Disk I/O").
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InnoDB`表不支持使用符号链接。但是，可以将`InnoDB`数据和日志文件放在不同的物理磁盘上。更多信息，请参见[第10.5.8节，“优化InnoDB磁盘I/O”](optimizing-innodb-diskio.html
    "10.5.8 优化InnoDB磁盘I/O")。'
- en: Striping
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条带化
- en: Striping means that you have many disks and put the first block on the first
    disk, the second block on the second disk, and the *`N`*-th block on the (`*`N`*
    MOD *`number_of_disks`*`) disk, and so on. This means if your normal data size
    is less than the stripe size (or perfectly aligned), you get much better performance.
    Striping is very dependent on the operating system and the stripe size, so benchmark
    your application with different stripe sizes. See [Section 10.13.2, “Using Your
    Own Benchmarks”](custom-benchmarks.html "10.13.2 Using Your Own Benchmarks").
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 条带化意味着你有许多磁盘，并且将第一个块放在第一个磁盘上，第二个块放在第二个磁盘上，第*`N`*个块放在（*`N`* MOD *`磁盘数量`*）磁盘上，依此类推。这意味着如果你的正常数据大小小于条带大小（或者完全对齐），你将获得更好的性能。条带化非常依赖于操作系统和条带大小，因此请使用不同的条带大小对你的应用程序进行基准测试。参见[第10.13.2节，“使用自己的基准测试”](custom-benchmarks.html
    "10.13.2 使用自己的基准测试")。
- en: The speed difference for striping is *very* dependent on the parameters. Depending
    on how you set the striping parameters and number of disks, you may get differences
    measured in orders of magnitude. You have to choose to optimize for random or
    sequential access.
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 条带化的速度差异*非常*依赖于参数。根据你设置的条带化参数和磁盘数量，你可能会得到数量级差异的结果。你必须选择优化随机访问还是顺序访问。
- en: For reliability, you may want to use RAID 0+1 (striping plus mirroring), but
    in this case, you need 2 × *`N`* drives to hold *`N`* drives of data. This is
    probably the best option if you have the money for it. However, you may also have
    to invest in some volume-management software to handle it efficiently.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了可靠性，你可能希望使用RAID 0+1（条带化加镜像），但在这种情况下，你需要2×*`N`*个驱动器来存储*`N`*个驱动器的数据。如果你有资金，这可能是最好的选��。然而，你可能还需要投资一些卷管理软件来有效处理它。
- en: A good option is to vary the RAID level according to how critical a type of
    data is. For example, store semi-important data that can be regenerated on a RAID
    0 disk, but store really important data such as host information and logs on a
    RAID 0+1 or RAID *`N`* disk. RAID *`N`* can be a problem if you have many writes,
    due to the time required to update the parity bits.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据数据类型的重要性，可以根据RAID级别进行调整。例如，将可以重新生成的半重要数据存储在RAID 0磁盘上，但将主机信息和日志等真正重要的数据存储在RAID
    0+1或RAID *`N`* 磁盘上。如果有许多写操作，RAID *`N`* 可能会成为问题，因为更新奇偶校验位需要时间。
- en: 'You can also set the parameters for the file system that the database uses:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以设置数据库使用的文件系统的参数：
- en: If you do not need to know when files were last accessed (which is not really
    useful on a database server), you can mount your file systems with the `-o noatime`
    option. That skips updates to the last access time in inodes on the file system,
    which avoids some disk seeks.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您不需要知道文件上次访问的时间（这在数据库服务器上并不真正有用），您可以使用`-o noatime`选项挂载文件系统。这样可以跳过对文件系统中inode上的最后访问时间的更新，从而避免一些磁盘寻道。
- en: On many operating systems, you can set a file system to be updated asynchronously
    by mounting it with the `-o async` option. If your computer is reasonably stable,
    this should give you better performance without sacrificing too much reliability.
    (This flag is on by default on Linux.)
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在许多操作系统上，您可以通过使用`-o async`选项挂载文件系统来异步更新文件系统。如果您的计算机相当稳定，这应该可以在不牺牲太多可靠性的情况下提供更好的性能。（在Linux上，默认情况下启用此标志。）
- en: Using NFS with MySQL
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用NFS与MySQL
- en: 'You should be cautious when considering whether to use NFS with MySQL. Potential
    issues, which vary by operating system and NFS version, include the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑是否与MySQL一起使用NFS时应谨慎。潜在问题因操作系统和NFS版本而异，包括以下内容：
- en: MySQL data and log files placed on NFS volumes becoming locked and unavailable
    for use. Locking issues may occur in cases where multiple instances of MySQL access
    the same data directory or where MySQL is shut down improperly, due to a power
    outage, for example. NFS version 4 addresses underlying locking issues with the
    introduction of advisory and lease-based locking. However, sharing a data directory
    among MySQL instances is not recommended.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置在NFS卷上的MySQL数据和日志文件被锁定并无法使用。在多个MySQL实例访问相同数据目录或MySQL因不当关闭（例如由于断电）而发生锁定问题的情况下可能会发生。NFS版本4通过引入咨询和基于租约的锁定来解决潜在的锁定问题。然而，不建议在多个MySQL实例之间共享数据目录。
- en: Data inconsistencies introduced due to messages received out of order or lost
    network traffic. To avoid this issue, use TCP with `hard` and `intr` mount options.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于消息接收顺序混乱或网络流量丢失而引入的数据不一致性。为避免此问题，请使用带有`hard`和`intr`挂载选项的TCP。
- en: Maximum file size limitations. NFS Version 2 clients can only access the lowest
    2GB of a file (signed 32 bit offset). NFS Version 3 clients support larger files
    (up to 64 bit offsets). The maximum supported file size also depends on the local
    file system of the NFS server.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大文件大小限制。NFS版本2客户端只能访问文件的最低2GB（带符号32位偏移）。NFS版本3客户端支持更大的文件（最多64位偏移）。支持的最大文件大小还取决于NFS服务器的本地文件系统。
- en: Using NFS within a professional SAN environment or other storage system tends
    to offer greater reliability than using NFS outside of such an environment. However,
    NFS within a SAN environment may be slower than directly attached or bus-attached
    non-rotational storage.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在专业SAN环境或其他存储系统中使用NFS往往比在此类环境之外使用NFS提供更高的可靠性。然而，在SAN环境中使用NFS可能比直接连接或总线连接的非旋转存储慢。
- en: If you choose to use NFS, NFS Version 4 or later is recommended, as is testing
    your NFS setup thoroughly before deploying into a production environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择使用NFS，建议使用NFS版本4或更高版本，并在部署到生产环境之前彻底测试您的NFS设置。
