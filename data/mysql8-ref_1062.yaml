- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html](https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html](https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html)
- en: 15.7.3.4 OPTIMIZE TABLE Statement
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.7.3.4 OPTIMIZE TABLE 语句
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    reorganizes the physical storage of table data and associated index data, to reduce
    storage space and improve I/O efficiency when accessing the table. The exact changes
    made to each table depend on the [storage engine](glossary.html#glos_storage_engine
    "storage engine") used by that table.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE 语句")重新组织表数据和相关索引数据的物理存储，以减少存储空间并在访问表时提高I/O效率。对每个表所做的确切更改取决于该表使用的[存储引擎](glossary.html#glos_storage_engine
    "存储引擎")。'
- en: 'Use [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    in these cases, depending on the type of table:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下使用[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE 语句")，取决于表的类型：
- en: After doing substantial insert, update, or delete operations on an `InnoDB`
    table that has its own [.ibd file](glossary.html#glos_ibd_file ".ibd file") because
    it was created with the [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    option enabled. The table and indexes are reorganized, and disk space can be reclaimed
    for use by the operating system.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对启用了[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)选项创建了自己的[.ibd文件](glossary.html#glos_ibd_file
    ".ibd文件")的`InnoDB`表上进行大量插入、更新或删除操作之后。表和索引将重新组织，并且磁盘空间可以被回收供操作系统使用。
- en: After doing substantial insert, update, or delete operations on columns that
    are part of a `FULLTEXT` index in an `InnoDB` table. Set the configuration option
    [`innodb_optimize_fulltext_only=1`](innodb-parameters.html#sysvar_innodb_optimize_fulltext_only)
    first. To keep the index maintenance period to a reasonable time, set the [`innodb_ft_num_word_optimize`](innodb-parameters.html#sysvar_innodb_ft_num_word_optimize)
    option to specify how many words to update in the search index, and run a sequence
    of `OPTIMIZE TABLE` statements until the search index is fully updated.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对`InnoDB`表中的`FULLTEXT`索引的列进行大量插入、更新或删除操作之后。首先设置配置选项[`innodb_optimize_fulltext_only=1`](innodb-parameters.html#sysvar_innodb_optimize_fulltext_only)。为了保持索引维护时间在合理范围内，设置[`innodb_ft_num_word_optimize`](innodb-parameters.html#sysvar_innodb_ft_num_word_optimize)选项以指定要更新搜索索引中的单词数量，并运行一系列`OPTIMIZE
    TABLE`语句，直到搜索索引完全更新。
- en: After deleting a large part of a `MyISAM` or `ARCHIVE` table, or making many
    changes to a `MyISAM` or `ARCHIVE` table with variable-length rows (tables that
    have [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types"), or [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") columns).
    Deleted rows are maintained in a linked list and subsequent [`INSERT`](insert.html
    "15.2.7 INSERT Statement") operations reuse old row positions. You can use [`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement") to reclaim the
    unused space and to defragment the data file. After extensive changes to a table,
    this statement may also improve performance of statements that use the table,
    sometimes significantly.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在删除`MyISAM`或`ARCHIVE`表的大部分内容，或对具有可变长度行的`MyISAM`或`ARCHIVE`表进行许多更改（具有[`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")、[`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types")、[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")或[`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")列的表）。已删除的行将保留在链表中，并且后续的[`INSERT`](insert.html
    "15.2.7 INSERT Statement")操作将重用旧的行位置。您可以使用[`OPTIMIZE TABLE`](optimize-table.html
    "15.7.3.4 OPTIMIZE TABLE 语句")来回收未使用的空间并对数据文件进行碎片整理。在对表进行大量更改后，此语句有时也可以显著改善使用该表的语句的性能。
- en: This statement requires [`SELECT`](privileges-provided.html#priv_select) and
    [`INSERT`](privileges-provided.html#priv_insert) privileges for the table.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句需要表的[`SELECT`](privileges-provided.html#priv_select)和[`INSERT`](privileges-provided.html#priv_insert)权限。
- en: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    works for [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage
    Engine"), [`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine"),
    and [`ARCHIVE`](archive-storage-engine.html "18.5 The ARCHIVE Storage Engine")
    tables. [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    is also supported for dynamic columns of in-memory [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") tables. It does not work for fixed-width columns
    of in-memory tables, nor does it work for Disk Data tables. The performance of
    `OPTIMIZE` on NDB Cluster tables can be tuned using [`--ndb-optimization-delay`](mysql-cluster-options-variables.html#option_mysqld_ndb-optimization-delay),
    which controls the length of time to wait between processing batches of rows by
    [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement"). For
    more information, see [Section 25.2.7.11, “Previous NDB Cluster Issues Resolved
    in NDB Cluster 8.0”](mysql-cluster-limitations-resolved.html "25.2.7.11 Previous
    NDB Cluster Issues Resolved in NDB Cluster 8.0").'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")适用于[`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine")、[`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine")和[`ARCHIVE`](archive-storage-engine.html "18.5 The
    ARCHIVE Storage Engine")表。[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement")也支持内存中动态列的[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0")表。它不适用于内存表的固定宽度列，也不适用于磁盘数据表。可以使用[`--ndb-optimization-delay`](mysql-cluster-options-variables.html#option_mysqld_ndb-optimization-delay)来调整NDB
    Cluster表上`OPTIMIZE`的性能，该选项控制[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement")处理批处理行之间等待的时间长度。有关更多信息，请参见[第25.2.7.11节，“NDB Cluster 8.0中解决的以前的NDB
    Cluster问题”](mysql-cluster-limitations-resolved.html "25.2.7.11 Previous NDB Cluster
    Issues Resolved in NDB Cluster 8.0")。'
- en: For NDB Cluster tables, [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement") can be interrupted by (for example) killing the SQL thread performing
    the `OPTIMIZE` operation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于NDB Cluster表，[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE
    Statement")可以被（例如）终止执行`OPTIMIZE`操作的SQL线程所中断。
- en: By default, [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE
    Statement") does *not* work for tables created using any other storage engine
    and returns a result indicating this lack of support. You can make [`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement") work for other
    storage engines by starting [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL
    Server") with the [`--skip-new`](server-options.html#option_mysqld_skip-new) option.
    In this case, [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE
    Statement") is just mapped to [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")不适用于使用任何其他存储引擎创建的表，并返回指示此不支持的结果。您可以通过使用[`--skip-new`](server-options.html#option_mysqld_skip-new)选项启动[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")来使[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement")适用于其他存储引擎。在这种情况下，[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement")只是映射到[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")。
- en: This statement does not work with views.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句不适用于视图。
- en: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    is supported for partitioned tables. For information about using this statement
    with partitioned tables and table partitions, see [Section 26.3.4, “Maintenance
    of Partitions”](partitioning-maintenance.html "26.3.4 Maintenance of Partitions").'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")支持分区表。有关在分区表和表分区中使用此语句的信息，请参见[第26.3.4节，“分区的维护”](partitioning-maintenance.html
    "26.3.4 Maintenance of Partitions")。'
- en: By default, the server writes [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement") statements to the binary log so that they replicate to replicas.
    To suppress logging, specify the optional `NO_WRITE_TO_BINLOG` keyword or its
    alias `LOCAL`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，服务器会将[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")语句写入二进制日志，以便在副本中复制。要禁止记录日志，请指定可选的`NO_WRITE_TO_BINLOG`关键字或其别名`LOCAL`。
- en: '[OPTIMIZE TABLE Output](optimize-table.html#optimize-table-output "OPTIMIZE
    TABLE Output")'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OPTIMIZE TABLE 输出](optimize-table.html#optimize-table-output "OPTIMIZE TABLE
    Output")'
- en: '[InnoDB Details](optimize-table.html#optimize-table-innodb-details "InnoDB
    Details")'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[InnoDB 详细信息](optimize-table.html#optimize-table-innodb-details "InnoDB Details")'
- en: '[MyISAM Details](optimize-table.html#optimize-table-myisam-details "MyISAM
    Details")'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MyISAM 详细信息](optimize-table.html#optimize-table-myisam-details "MyISAM Details")'
- en: '[Other Considerations](optimize-table.html#optimize-table-other-considerations
    "Other Considerations")'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[其他考虑因素](optimize-table.html#optimize-table-other-considerations "其他考虑因素")'
- en: OPTIMIZE TABLE Output
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: OPTIMIZE TABLE 输出
- en: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    returns a result set with the columns shown in the following table.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE 语句") 返回一个结果集，其中包含下表所示的列。'
- en: '| Column | Value |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 列 | 值 |'
- en: '| `Table` | The table name |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `Table` | 表名 |'
- en: '| `Op` | Always `optimize` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `Op` | 始终为 `optimize` |'
- en: '| `Msg_type` | `status`, `error`, `info`, `note`, or `warning` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `Msg_type` | `status`, `error`, `info`, `note`, 或 `warning` |'
- en: '| `Msg_text` | An informational message |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `Msg_text` | 一个信息性消息 |'
- en: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    table catches and throws any errors that occur while copying table statistics
    from the old file to the newly created file. For example. if the user ID of the
    owner of the `.MYD` or `.MYI` file is different from the user ID of the [**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server") process, [`OPTIMIZE TABLE`](optimize-table.html
    "15.7.3.4 OPTIMIZE TABLE Statement") generates a "cannot change ownership of the
    file" error unless [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")
    is started by the `root` user.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE 语句") 表捕获并抛出在从旧文件复制表统计信息到新创建的文件时发生的任何错误。例如，如果`.MYD`或`.MYI`文件的所有者用户
    ID 与 [**mysqld**](mysqld.html "6.3.1 mysqld — MySQL 服务器") 进程的用户 ID 不同，[`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE 语句") 会生成“无法更改文件所有权”错误，除非
    [**mysqld**](mysqld.html "6.3.1 mysqld — MySQL 服务器") 是由 `root` 用户启动的。'
- en: InnoDB Details
  id: totrans-27
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: InnoDB 详情
- en: 'For `InnoDB` tables, [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement") is mapped to [`ALTER TABLE ... FORCE`](alter-table.html "15.1.9 ALTER
    TABLE Statement"), which rebuilds the table to update index statistics and free
    unused space in the clustered index. This is displayed in the output of [`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement") when you run
    it on an `InnoDB` table, as shown here:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `InnoDB` 表，[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE
    语句") 被映射为 [`ALTER TABLE ... FORCE`](alter-table.html "15.1.9 ALTER TABLE 语句")，该操作重建表以更新索引统计信息并释放聚簇索引中未使用的空间。当你在
    `InnoDB` 表上运行 [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE
    语句") 时，输出中会显示这一点：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    uses [online DDL](innodb-online-ddl.html "17.12 InnoDB and Online DDL") for regular
    and partitioned `InnoDB` tables, which reduces downtime for concurrent DML operations.
    The table rebuild triggered by [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement") is completed in place. An exclusive table lock is only taken
    briefly during the prepare phase and the commit phase of the operation. During
    the prepare phase, metadata is updated and an intermediate table is created. During
    the commit phase, table metadata changes are committed.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE 语句") 使用[在线
    DDL](innodb-online-ddl.html "17.12 InnoDB 和在线 DDL")来对常规和分区的 `InnoDB` 表进行重建，从而减少并发
    DML 操作的停机时间。由 [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE
    语句") 触发的表重建是就地完成的。在操作的准备阶段和提交阶段仅短暂地获取独占表锁。在准备阶段，元数据被更新并创建一个中间表。在提交阶段，表元数据更改被提交。'
- en: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    rebuilds the table using the table copy method under the following conditions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下条件下，[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE 语句")
    使用表复制方法重建表：
- en: When the [`old_alter_table`](server-system-variables.html#sysvar_old_alter_table)
    system variable is enabled.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当启用 [`old_alter_table`](server-system-variables.html#sysvar_old_alter_table)
    系统变量时。
- en: When the server is started with the [`--skip-new`](server-options.html#option_mysqld_skip-new)
    option.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当服务器使用 [`--skip-new`](server-options.html#option_mysqld_skip-new) 选项启动时。
- en: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    using [online DDL](innodb-online-ddl.html "17.12 InnoDB and Online DDL") is not
    supported for `InnoDB` tables that contain `FULLTEXT` indexes. The table copy
    method is used instead.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[在线 DDL](innodb-online-ddl.html "17.12 InnoDB 和在线 DDL")的 [`OPTIMIZE TABLE`](optimize-table.html
    "15.7.3.4 OPTIMIZE TABLE 语句") 不支持包含 `FULLTEXT` 索引的 `InnoDB` 表。而是使用表复制方法。
- en: '`InnoDB` stores data using a page-allocation method and does not suffer from
    fragmentation in the same way that legacy storage engines (such as `MyISAM`) do.
    When considering whether or not to run optimize, consider the workload of transactions
    that your server is expected to process:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` 使用页面分配方法存储数据，并且不像传统存储引擎（如`MyISAM`）那样受到碎片化的影响。在考虑是否运行优化时，请考虑服务器预计要处理的事务工作负载：'
- en: Some level of fragmentation is expected. `InnoDB` only fills [pages](glossary.html#glos_page
    "page") 93% full, to leave room for updates without having to split pages.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一定程度的碎片化是可以预期的。`InnoDB`只将[页面](glossary.html#glos_page "page")填充到93%的容量，以便为更新留出空间，而无需分割页面。
- en: Delete operations might leave gaps that leave pages less filled than desired,
    which could make it worthwhile to optimize the table.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除操作可能会留下间隙，导致页面填充不足，这可能值得优化表格。
- en: Updates to rows usually rewrite the data within the same page, depending on
    the data type and row format, when sufficient space is available. See [Section 17.9.1.5,
    “How Compression Works for InnoDB Tables”](innodb-compression-internals.html "17.9.1.5 How
    Compression Works for InnoDB Tables") and [Section 17.10, “InnoDB Row Formats”](innodb-row-format.html
    "17.10 InnoDB Row Formats").
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对行的更新通常会在同一页面内重写数据，取决于数据类型和行格式，在有足够空间的情况下。请参阅[Section 17.9.1.5, “How Compression
    Works for InnoDB Tables”](innodb-compression-internals.html "17.9.1.5 How Compression
    Works for InnoDB Tables") 和 [Section 17.10, “InnoDB Row Formats”](innodb-row-format.html
    "17.10 InnoDB Row Formats")。
- en: High-concurrency workloads might leave gaps in indexes over time, as `InnoDB`
    retains multiple versions of the same data due through its [MVCC](glossary.html#glos_mvcc
    "MVCC") mechanism. See [Section 17.3, “InnoDB Multi-Versioning”](innodb-multi-versioning.html
    "17.3 InnoDB Multi-Versioning").
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高并发工作负载可能会随着时间的推移在索引中留下间隙，因为`InnoDB`通过其[MVCC](glossary.html#glos_mvcc "MVCC")机制保留了相同数据的多个版本。请参阅[Section 17.3,
    “InnoDB Multi-Versioning”](innodb-multi-versioning.html "17.3 InnoDB Multi-Versioning")。
- en: MyISAM Details
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: MyISAM 详细信息
- en: 'For `MyISAM` tables, [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement") works as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`MyISAM`表，[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE
    Statement") 的工作方式如下：
- en: If the table has deleted or split rows, repair the table.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果表中有已删除或已分割的行，请修复表格。
- en: If the index pages are not sorted, sort them.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果索引页面未排序，请对其进行排序。
- en: If the table's statistics are not up to date (and the repair could not be accomplished
    by sorting the index), update them.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果表格的统计数据不是最新的（且无法通过对索引进行排序来修复），请更新它们。
- en: Other Considerations
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 其他考虑事项
- en: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    is performed online for regular and partitioned `InnoDB` tables. Otherwise, MySQL
    [locks the table](glossary.html#glos_table_lock "table lock") during the time
    [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement") is
    running.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    用于在线执行常规和分区的`InnoDB`表。否则，在运行[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement") 时，MySQL会[锁定表格](glossary.html#glos_table_lock "table lock")。'
- en: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    does not sort R-tree indexes, such as spatial indexes on `POINT` columns. (Bug
    #23578)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    不会对R-tree索引进行排序，例如`POINT`列上的空间索引。（Bug #23578）'
