- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/pattern-matching.html](https://dev.mysql.com/doc/refman/8.0/en/pattern-matching.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/pattern-matching.html](https://dev.mysql.com/doc/refman/8.0/en/pattern-matching.html)
- en: 5.3.4.7 Pattern Matching
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5.3.4.7 模式匹配
- en: MySQL provides standard SQL pattern matching as well as a form of pattern matching
    based on extended regular expressions similar to those used by Unix utilities
    such as **vi**, **grep**, and **sed**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供标准SQL模式匹配以及一种基于扩展正则表达式的模式匹配形式，类似于Unix实用程序（如**vi**，**grep**和**sed**）中使用的形式。
- en: SQL pattern matching enables you to use `_` to match any single character and
    `%` to match an arbitrary number of characters (including zero characters). In
    MySQL, SQL patterns are case-insensitive by default. Some examples are shown here.
    Do not use `=` or `<>` when you use SQL patterns. Use the [`LIKE`](string-comparison-functions.html#operator_like)
    or [`NOT LIKE`](string-comparison-functions.html#operator_not-like) comparison
    operators instead.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQL模式匹配使您可以使用`_`匹配任意单个字符和`%`匹配任意数量的字符（包括零个字符）。在MySQL中，默认情况下，SQL模式是不区分大小写的。这里显示了一些示例。在使用SQL模式时，请不要使用`=`或`<>`。请改用[`LIKE`](string-comparison-functions.html#operator_like)或[`NOT
    LIKE`](string-comparison-functions.html#operator_not-like)比较运算符。
- en: 'To find names beginning with `b`:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找以`b`开头的名称：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To find names ending with `fy`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找以`fy`结尾的名称：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To find names containing a `w`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找包含`w`的名称：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To find names containing exactly five characters, use five instances of the
    `_` pattern character:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找包含正好五个字符的名称，请使用五个`_`模式字符的实例：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The other type of pattern matching provided by MySQL uses extended regular expressions.
    When you test for a match for this type of pattern, use the [`REGEXP_LIKE()`](regexp.html#function_regexp-like)
    function (or the [`REGEXP`](regexp.html#operator_regexp) or [`RLIKE`](regexp.html#operator_regexp)
    operators, which are synonyms for [`REGEXP_LIKE()`](regexp.html#function_regexp-like)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供的另一种模式匹配类型使用扩展正则表达式。当您测试此类型模式的匹配时，请使用[`REGEXP_LIKE()`](regexp.html#function_regexp-like)函数（或[`REGEXP`](regexp.html#operator_regexp)或[`RLIKE`](regexp.html#operator_regexp)运算符，它们是[`REGEXP_LIKE()`](regexp.html#function_regexp-like)的同义词）。
- en: 'The following list describes some characteristics of extended regular expressions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了扩展正则表达式的一些特征：
- en: '`.` matches any single character.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.`匹配任意单个字符。'
- en: A character class `[...]` matches any character within the brackets. For example,
    `[abc]` matches `a`, `b`, or `c`. To name a range of characters, use a dash. `[a-z]`
    matches any letter, whereas `[0-9]` matches any digit.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符类`[...]`匹配括号内的任何字符。例如，`[abc]`匹配`a`，`b`或`c`。要命名一系列字符，请使用短划线。`[a-z]`匹配任何字母，而`[0-9]`匹配任何数字。
- en: '`*` matches zero or more instances of the thing preceding it. For example,
    `x*` matches any number of `x` characters, `[0-9]*` matches any number of digits,
    and `.*` matches any number of anything.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`匹配其前面的内容的零个或多个实例。例如，`x*`匹配任意数量的`x`字符，`[0-9]*`匹配任意数量的数字，`.*`匹配任意数量的任何内容。'
- en: A regular expression pattern match succeeds if the pattern matches anywhere
    in the value being tested. (This differs from a [`LIKE`](string-comparison-functions.html#operator_like)
    pattern match, which succeeds only if the pattern matches the entire value.)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果正则表达式模式匹配值的任何位置，则正则表达式模式匹配成功。（这与[`LIKE`](string-comparison-functions.html#operator_like)模式匹配不同，后者仅在模式完全匹配值时才成功。）
- en: To anchor a pattern so that it must match the beginning or end of the value
    being tested, use `^` at the beginning or `$` at the end of the pattern.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要锚定模式，使其必须匹配值的开头或结尾，请在模式的开头使用`^`或在结尾使用`$`。
- en: To demonstrate how extended regular expressions work, the [`LIKE`](string-comparison-functions.html#operator_like)
    queries shown previously are rewritten here to use [`REGEXP_LIKE()`](regexp.html#function_regexp-like).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示扩展正则表达式的工作原理，先前显示的[`LIKE`](string-comparison-functions.html#operator_like)查询在这里重新编写为使用[`REGEXP_LIKE()`](regexp.html#function_regexp-like)。
- en: 'To find names beginning with `b`, use `^` to match the beginning of the name:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找以`b`开头的名称，请使用`^`匹配名称的开头：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To force a regular expression comparison to be case-sensitive, use a case-sensitive
    collation, or use the [`BINARY`](cast-functions.html#operator_binary) keyword
    to make one of the strings a binary string, or specify the `c` match-control character.
    Each of these queries matches only lowercase `b` at the beginning of a name:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制正则表达式比较区分大小写，请使用区分大小写的排序规则，或使用[`BINARY`](cast-functions.html#operator_binary)关键字使其中一个字符串成为二进制字符串，或指定`c`匹配控制字符。每个查询仅匹配名称开头的小写`b`：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To find names ending with `fy`, use `$` to match the end of the name:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找以`fy`结尾的名称，请使用`$`来匹配名称的结尾：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To find names containing a `w`, use this query:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找包含`w`的名称，请使用此查询：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Because a regular expression pattern matches if it occurs anywhere in the value,
    it is not necessary in the previous query to put a wildcard on either side of
    the pattern to get it to match the entire value as would be true with an SQL pattern.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因为正则表达式模式匹配的是值中的任何位置，所以在前面的查询中，不需要在模式的两侧放置通配符来使其匹配整个值，这与 SQL 模式不同。
- en: 'To find names containing exactly five characters, use `^` and `$` to match
    the beginning and end of the name, and five instances of `.` in between:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找恰好包含五个字符的名称，请使用`^`和`$`来匹配名称的开头和结尾，并在中间使用五个`.`的实例：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You could also write the previous query using the `{*`n`*}` (“repeat-*`n`*-times”)
    operator:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`{*n*}`（“重复-*n*-次”)操作符，你也可以编写前面的查询：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For more information about the syntax for regular expressions, see [Section 14.8.2,
    “Regular Expressions”](regexp.html "14.8.2 Regular Expressions").
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有关正则表达式语法的更多信息，请参见[第 14.8.2 节，“正则表达式”](regexp.html "14.8.2 Regular Expressions")。
