- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html](https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html](https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html)
- en: 15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement
- en: 'If you specify an `ON DUPLICATE KEY UPDATE` clause and a row to be inserted
    would cause a duplicate value in a `UNIQUE` index or `PRIMARY KEY`, an [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") of the old row occurs. For example, if column `a`
    is declared as `UNIQUE` and contains the value `1`, the following two statements
    have similar effect:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您指定了一个`ON DUPLICATE KEY UPDATE`子句，并且要插入的行会导致在`UNIQUE`索引或`PRIMARY KEY`中出现重复值，则会更新旧行。例如，如果列`a`被声明为`UNIQUE`并包含值`1`，则以下两个语句具有类似的效果：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The effects are not quite identical: For an `InnoDB` table where `a` is an
    auto-increment column, the `INSERT` statement increases the auto-increment value
    but the `UPDATE` does not.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 效果并不完全相同：对于`InnoDB`表，其中`a`是自增列，`INSERT`语句会增加自增值，但`UPDATE`不会。
- en: 'If column `b` is also unique, the [`INSERT`](insert.html "15.2.7 INSERT Statement")
    is equivalent to this [`UPDATE`](update.html "15.2.17 UPDATE Statement") statement
    instead:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列`b`也是唯一的，那么[`INSERT`](insert.html "15.2.7 INSERT Statement")等同于这个[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")语句：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If `a=1 OR b=2` matches several rows, only *one* row is updated. In general,
    you should try to avoid using an `ON DUPLICATE KEY UPDATE` clause on tables with
    multiple unique indexes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`a=1 OR b=2`匹配多行，只会更新*一行*。一般来说，应尽量避免在具有多个唯一索引的表上使用`ON DUPLICATE KEY UPDATE`子句。
- en: With `ON DUPLICATE KEY UPDATE`, the affected-rows value per row is 1 if the
    row is inserted as a new row, 2 if an existing row is updated, and 0 if an existing
    row is set to its current values. If you specify the `CLIENT_FOUND_ROWS` flag
    to the [`mysql_real_connect()`](/doc/c-api/8.0/en/mysql-real-connect.html) C API
    function when connecting to [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL
    Server"), the affected-rows value is 1 (not 0) if an existing row is set to its
    current values.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ON DUPLICATE KEY UPDATE`，每行的受影响行数为1，如果该行被插入为新行，则为2，如果更新现有行，则为0。如果在连接到[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")时，通过在[`mysql_real_connect()`](/doc/c-api/8.0/en/mysql-real-connect.html)
    C API函数中指定`CLIENT_FOUND_ROWS`标志，受影响行数为1（而不是0），如果将现有行设置为其当前值。
- en: If a table contains an `AUTO_INCREMENT` column and [`INSERT ... ON DUPLICATE
    KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE
    Statement") inserts or updates a row, the [`LAST_INSERT_ID()`](information-functions.html#function_last-insert-id)
    function returns the `AUTO_INCREMENT` value.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表中包含一个`AUTO_INCREMENT`列，并且[`INSERT ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement")插入或更新一行，则[`LAST_INSERT_ID()`](information-functions.html#function_last-insert-id)函数将返回`AUTO_INCREMENT`值。
- en: The `ON DUPLICATE KEY UPDATE` clause can contain multiple column assignments,
    separated by commas.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`ON DUPLICATE KEY UPDATE`子句可以包含多个列赋值，用逗号分隔。'
- en: 'In assignment value expressions in the `ON DUPLICATE KEY UPDATE` clause, you
    can use the [`VALUES(*`col_name`*)`](miscellaneous-functions.html#function_values)
    function to refer to column values from the [`INSERT`](insert.html "15.2.7 INSERT
    Statement") portion of the [`INSERT ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement") statement. In other words,
    [`VALUES(*`col_name`*)`](miscellaneous-functions.html#function_values) in the
    `ON DUPLICATE KEY UPDATE` clause refers to the value of *`col_name`* that would
    be inserted, had no duplicate-key conflict occurred. This function is especially
    useful in multiple-row inserts. The [`VALUES()`](miscellaneous-functions.html#function_values)
    function is meaningful only in the `ON DUPLICATE KEY UPDATE` clause or [`INSERT`](insert.html
    "15.2.7 INSERT Statement") statements and returns `NULL` otherwise. Example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ON DUPLICATE KEY UPDATE`子句中的赋值表达式中，您可以使用[`VALUES(*`col_name`*)`](miscellaneous-functions.html#function_values)函数引用[`INSERT`](insert.html
    "15.2.7 INSERT Statement")部分的列值。换句话说，在`ON DUPLICATE KEY UPDATE`子句中，[`VALUES(*`col_name`*)`](miscellaneous-functions.html#function_values)指的是如果没有发生重复键冲突，将要插入的*`col_name`*的值。这个函数在多行插入中特别有用。[`VALUES()`](miscellaneous-functions.html#function_values)函数只在`ON
    DUPLICATE KEY UPDATE`子句或[`INSERT`](insert.html "15.2.7 INSERT Statement")语句中有意义，否则返回`NULL`。例如：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That statement is identical to the following two statements:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句与以下两个语句相同：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The use of [`VALUES()`](miscellaneous-functions.html#function_values) to refer
    to the new row and columns is deprecated beginning with MySQL 8.0.20, and is subject
    to removal in a future version of MySQL. Instead, use row and column aliases,
    as described in the next few paragraphs of this section.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.20开始，使用[`VALUES()`](miscellaneous-functions.html#function_values)来引用新行和列已经不推荐，并且可能在未来的MySQL版本中被移除。相反，使用行和列别名，如本节接下来几段所述。
- en: 'Beginning with MySQL 8.0.19, it is possible to use an alias for the row, with,
    optionally, one or more of its columns to be inserted, following the `VALUES`
    or `SET` clause, and preceded by the `AS` keyword. Using the row alias `new`,
    the statement shown previously using `VALUES()` to access the new column values
    can be written in the form shown here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.19开始，可以使用行别名，可选地，在`VALUES`或`SET`子句后面插入一个或多个列，并在`AS`关键字之前。使用行别名`new`，之前使用`VALUES()`访问新列值的语句可以以这种形式编写：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If, in addition, you use the column aliases `m`, `n`, and `p`, you can omit
    the row alias in the assignment clause and write the same statement like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此外，你使用列别名`m`、`n`和`p`，你可以在赋值子句中省略行别名，并像这样编写相同的语句：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When using column aliases in this fashion, you must still use a row alias following
    the `VALUES` clause, even if you do not make direct use of it in the assignment
    clause.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下使用列别名时，即使在赋值子句中没有直接使用它，你仍然必须在`VALUES`子句后面使用行别名。
- en: 'Beginning with MySQL 8.0.20, an `INSERT ... SELECT ... ON DUPLICATE KEY UPDATE`
    statement that uses `VALUES()` in the `UPDATE` clause, like this one, throws a
    warning:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.20开始，使用`UPDATE`子句中的`VALUES()`的`INSERT ... SELECT ... ON DUPLICATE
    KEY UPDATE`语句会发出警告：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can eliminate such warnings by using a subquery instead, like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用子查询来消除此类警告，如下所示：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also use row and column aliases with a `SET` clause, as mentioned previously.
    Employing `SET` instead of `VALUES` in the two `INSERT ... ON DUPLICATE KEY UPDATE`
    statements just shown can be done as shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在`SET`子句中使用行和列别名，如前面提到的。刚刚显示的两个`INSERT ... ON DUPLICATE KEY UPDATE`语句中使用`SET`而不是`VALUES`可以像这样完成：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The row alias must not be the same as the name of the table. If column aliases
    are not used, or if they are the same as the column names, they must be distinguished
    using the row alias in the `ON DUPLICATE KEY UPDATE` clause. Column aliases must
    be unique with regard to the row alias to which they apply (that is, no column
    aliases referring to columns of the same row may be the same).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 行别名不能与表名相同。如果不使用列别名，或者如果它们与列名相同，则必须在`ON DUPLICATE KEY UPDATE`子句中使用行别名来区分它们。列别名必须与它们应用的行别名唯一（即，不得有指向同一行列的相同列别名）。
- en: 'For [`INSERT ... SELECT`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON
    DUPLICATE KEY UPDATE Statement") statements, these rules apply regarding acceptable
    forms of `SELECT` query expressions that you can refer to in an `ON DUPLICATE
    KEY UPDATE` clause:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`INSERT ... SELECT`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE
    KEY UPDATE Statement")语句，在`ON DUPLICATE KEY UPDATE`子句中可以引用的`SELECT`查询表达式的可接受形式如下：
- en: References to columns from queries on a single table, which may be a derived
    table.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用单个表查询中的列，该表可能是一个派生表。
- en: References to columns from queries on a join over multiple tables.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用跨多个表连接的查询中的列。
- en: References to columns from `DISTINCT` queries.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用`DISTINCT`查询中的列。
- en: References to columns in other tables, as long as the [`SELECT`](select.html
    "15.2.13 SELECT Statement") does not use `GROUP BY`. One side effect is that you
    must qualify references to nonunique column names.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用其他表中的列，只要[`SELECT`](select.html "15.2.13 SELECT Statement")没有使用`GROUP BY`。一个副作用是你必须限定对非唯一列名的引用。
- en: 'References to columns from a [`UNION`](union.html "15.2.18 UNION Clause") are
    not supported. To work around this restriction, rewrite the [`UNION`](union.html
    "15.2.18 UNION Clause") as a derived table so that its rows can be treated as
    a single-table result set. For example, this statement produces an error:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不支持从[`UNION`](union.html "15.2.18 UNION Clause")中引用列。为了解决这个限制，将[`UNION`](union.html
    "15.2.18 UNION Clause")重写为派生表，以便其行可以被视为单表结果集。例如，这个语句会产生错误：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Instead, use an equivalent statement that rewrites the [`UNION`](union.html
    "15.2.18 UNION Clause") as a derived table:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，使用等效语句将[`UNION`](union.html "15.2.18 UNION Clause")重写为派生表：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The technique of rewriting a query as a derived table also enables references
    to columns from `GROUP BY` queries.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将查询重写为派生表的技术还可以使`GROUP BY`查询中的列引用成为可能。
- en: 'Because the results of [`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT
    ... SELECT Statement") statements depend on the ordering of rows from the [`SELECT`](select.html
    "15.2.13 SELECT Statement") and this order cannot always be guaranteed, it is
    possible when logging [`INSERT ... SELECT ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement") statements for the source
    and the replica to diverge. Thus, [`INSERT ... SELECT ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement") statements are flagged
    as unsafe for statement-based replication. Such statements produce a warning in
    the error log when using statement-based mode and are written to the binary log
    using the row-based format when using `MIXED` mode. An [`INSERT ... ON DUPLICATE
    KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE
    Statement") statement against a table having more than one unique or primary key
    is also marked as unsafe. (Bug #11765650, Bug #58637)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '因为[`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement")语句的结果取决于[`SELECT`](select.html
    "15.2.13 SELECT Statement")中行的排序，而这种顺序并不总是能够保证，所以在记录源和副本的[`INSERT ... SELECT ON
    DUPLICATE KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE
    KEY UPDATE Statement")语句时可能会出现分歧。因此，当使用基于语句的复制时，[`INSERT ... SELECT ON DUPLICATE
    KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE
    Statement")语句被标记为不安全。这种语句在使用基于语句的模式时会在错误日志中产生警告，并在使用`MIXED`模式时以基于行的格式写入二进制日志。对于针对具有多个唯一或主键的表的[`INSERT
    ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON
    DUPLICATE KEY UPDATE Statement")语句也被标记为不安全。（Bug #11765650, Bug #58637）'
- en: See also [Section 19.2.1.1, “Advantages and Disadvantages of Statement-Based
    and Row-Based Replication”](replication-sbr-rbr.html "19.2.1.1 Advantages and
    Disadvantages of Statement-Based and Row-Based Replication").
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Section 19.2.1.1, “基于语句和基于行的复制的优缺点”](replication-sbr-rbr.html "19.2.1.1 Advantages
    and Disadvantages of Statement-Based and Row-Based Replication")。
