- en: 10.5.5 Bulk Data Loading for InnoDB Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.5.5 InnoDB表的批量数据加载
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-bulk-data-loading.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-bulk-data-loading.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-bulk-data-loading.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-bulk-data-loading.html)
- en: These performance tips supplement the general guidelines for fast inserts in
    [Section 10.2.5.1, “Optimizing INSERT Statements”](insert-optimization.html "10.2.5.1 Optimizing
    INSERT Statements").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些性能提示补充了快速插入的一般准则，详见[Section 10.2.5.1, “优化INSERT语句”](insert-optimization.html
    "10.2.5.1 Optimizing INSERT Statements")。
- en: 'When importing data into `InnoDB`, turn off autocommit mode, because it performs
    a log flush to disk for every insert. To disable autocommit during your import
    operation, surround it with [`SET autocommit`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements") and [`COMMIT`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements") statements:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将数据导入`InnoDB`时，关闭自动提交模式，因为它会为每次插入执行一次日志刷新到磁盘。在导入操作期间禁用自动提交，请使用[`SET autocommit`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")和[`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")语句包围它：
- en: '[PRE0]'
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    option [`--opt`](mysqldump.html#option_mysqldump_opt) creates dump files that
    are fast to import into an `InnoDB` table, even without wrapping them with the
    [`SET autocommit`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK
    Statements") and [`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT, and
    ROLLBACK Statements") statements.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")选项[`--opt`](mysqldump.html#option_mysqldump_opt)创建的转储文件可以快速导入到`InnoDB`表中，即使没有用[`SET
    autocommit`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")和[`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")语句包装它们。'
- en: 'If you have `UNIQUE` constraints on secondary keys, you can speed up table
    imports by temporarily turning off the uniqueness checks during the import session:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在次要键上有`UNIQUE`约束，则可以在导入会话期间暂时关闭唯一性检查以加快表导入速度：
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For big tables, this saves a lot of disk I/O because `InnoDB` can use its change
    buffer to write secondary index records in a batch. Be certain that the data contains
    no duplicate keys.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于大表，这样可以节省大量磁盘I/O，因为`InnoDB`可以使用其更改缓冲区批量写入次要索引记录。确保数据不包含重复键。
- en: 'If you have `FOREIGN KEY` constraints in your tables, you can speed up table
    imports by turning off the foreign key checks for the duration of the import session:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的表中有`FOREIGN KEY`约束，可以通过在导入会话期间关闭外键检查来加快表导入速度：
- en: '[PRE2]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For big tables, this can save a lot of disk I/O.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于大��，这可以节省大量磁盘I/O。
- en: 'Use the multiple-row [`INSERT`](insert.html "15.2.7 INSERT Statement") syntax
    to reduce communication overhead between the client and the server if you need
    to insert many rows:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要插入许多行，请使用多行[`INSERT`](insert.html "15.2.7 INSERT Statement")语法以减少客户端和服务器之间的通信开销：
- en: '[PRE3]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This tip is valid for inserts into any table, not just `InnoDB` tables.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个提示适用于任何表的插入，不仅仅是`InnoDB`表。
- en: When doing bulk inserts into tables with auto-increment columns, set [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    to 2 (interleaved) instead of 1 (consecutive). See [Section 17.6.1.6, “AUTO_INCREMENT
    Handling in InnoDB”](innodb-auto-increment-handling.html "17.6.1.6 AUTO_INCREMENT
    Handling in InnoDB") for details.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对具有自增列的表进行批量插入时，将[`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)设置为2（交错）而不是1（连续）。有关详细信息，请参阅[Section 17.6.1.6,
    “InnoDB中的AUTO_INCREMENT处理”](innodb-auto-increment-handling.html "17.6.1.6 AUTO_INCREMENT
    Handling in InnoDB")。
- en: When performing bulk inserts, it is faster to insert rows in `PRIMARY KEY` order.
    `InnoDB` tables use a [clustered index](glossary.html#glos_clustered_index "clustered
    index"), which makes it relatively fast to use data in the order of the `PRIMARY
    KEY`. Performing bulk inserts in `PRIMARY KEY` order is particularly important
    for tables that do not fit entirely within the buffer pool.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行批量插入时，按`PRIMARY KEY`顺序插入行会更快。`InnoDB`表使用[聚簇索引](glossary.html#glos_clustered_index
    "clustered index")，这使得按`PRIMARY KEY`顺序使用数据相对快速。按`PRIMARY KEY`顺序执行批量插入对于完全不适合缓冲池的表格尤为重要。
- en: 'For optimal performance when loading data into an `InnoDB` `FULLTEXT` index,
    follow this set of steps:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将数据加载到`InnoDB`的`FULLTEXT`索引时，为了获得最佳性能，请按照以下步骤进行：
- en: 'Define a column `FTS_DOC_ID` at table creation time, of type `BIGINT UNSIGNED
    NOT NULL`, with a unique index named `FTS_DOC_ID_INDEX`. For example:'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表创建时定义一个名为`FTS_DOC_ID`的列，类型为`BIGINT UNSIGNED NOT NULL`，并创建一个名为`FTS_DOC_ID_INDEX`的唯一索引。例如：
- en: '[PRE4]'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Load the data into the table.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据加载到表中。
- en: Create the `FULLTEXT` index after the data is loaded.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据加载后创建`FULLTEXT`索引。
- en: Note
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: When adding `FTS_DOC_ID` column at table creation time, ensure that the `FTS_DOC_ID`
    column is updated when the `FULLTEXT` indexed column is updated, as the `FTS_DOC_ID`
    must increase monotonically with each [`INSERT`](insert.html "15.2.7 INSERT Statement")
    or [`UPDATE`](update.html "15.2.17 UPDATE Statement"). If you choose not to add
    the `FTS_DOC_ID` at table creation time and have `InnoDB` manage DOC IDs for you,
    `InnoDB` adds the `FTS_DOC_ID` as a hidden column with the next [`CREATE FULLTEXT
    INDEX`](create-index.html "15.1.15 CREATE INDEX Statement") call. This approach,
    however, requires a table rebuild which can impact performance.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表创建时添加`FTS_DOC_ID`列时，请确保在更新`FULLTEXT`索引列时更新`FTS_DOC_ID`列，因为`FTS_DOC_ID`必须随着每个[`INSERT`](insert.html
    "15.2.7 INSERT Statement")或[`UPDATE`](update.html "15.2.17 UPDATE Statement")而单调递增。如果选择不在表创建时添加`FTS_DOC_ID`并让`InnoDB`为您管理
    DOC ID，`InnoDB`会在下一次[`CREATE FULLTEXT INDEX`](create-index.html "15.1.15 CREATE
    INDEX Statement")调用时添加`FTS_DOC_ID`作为隐藏列。然而，这种方法需要重建表，可能会影响性能。
- en: If loading data into a *new* MySQL instance, consider disabling redo logging
    using [`ALTER INSTANCE {ENABLE|DISABLE} INNODB REDO_LOG`](alter-instance.html
    "15.1.5 ALTER INSTANCE Statement") syntax. Disabling redo logging helps speed
    up data loading by avoiding redo log writes. For more information, see [Disabling
    Redo Logging](innodb-redo-log.html#innodb-disable-redo-logging "Disabling Redo
    Logging").
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果要将数据加载到一个*新的* MySQL 实例中，请考虑使用[`ALTER INSTANCE {ENABLE|DISABLE} INNODB REDO_LOG`](alter-instance.html
    "15.1.5 ALTER INSTANCE Statement")语法来禁用重做日志记录。禁用重做日志记录有助于加快数据加载速度，避免重做日志写入。更多信息，请参见[禁用重做日志记录](innodb-redo-log.html#innodb-disable-redo-logging
    "Disabling Redo Logging")。
- en: Warning
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: This feature is intended only for loading data into a new MySQL instance. *Do
    not disable redo logging on a production system.* It is permitted to shutdown
    and restart the server while redo logging is disabled, but an unexpected server
    stoppage while redo logging is disabled can cause data loss and instance corruption.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此功能仅用于将数据加载到新的 MySQL 实例中。*不要在生产系统上禁用重做日志记录*。允许在禁用重做日志记录时关闭并重新启动服务器，但在禁用重做日志记录时发生意外服务器停止可能会导致数据丢失和实例损坏。
- en: Use MySQL Shell to import data. MySQL Shell's parallel table import utility
    `util.importTable()` provides rapid data import to a MySQL relational table for
    large data files. MySQL Shell's dump loading utility `util.loadDump()` also offers
    parallel load capabilities. See [MySQL Shell Utilities](/doc/mysql-shell/8.0/en/mysql-shell-utilities.html).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MySQL Shell 导入数据。MySQL Shell 的并行表导入实用程序`util.importTable()`为大型数据文件提供了快速数据导入到
    MySQL 关系表的功能。MySQL Shell 的转储加载实用程序`util.loadDump()`也提供了并行加载功能。请参见[MySQL Shell
    实用程序](/doc/mysql-shell/8.0/en/mysql-shell-utilities.html)。
