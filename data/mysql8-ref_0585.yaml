- en: 10.5.6 Optimizing InnoDB Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.5.6 优化InnoDB查询
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-queries.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-queries.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-queries.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-queries.html)
- en: 'To tune queries for `InnoDB` tables, create an appropriate set of indexes on
    each table. See [Section 10.3.1, “How MySQL Uses Indexes”](mysql-indexes.html
    "10.3.1 How MySQL Uses Indexes") for details. Follow these guidelines for `InnoDB`
    indexes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要为`InnoDB`表调整查询，为每个表创建适当的索引集。有关详细信息，请参见[第10.3.1节，“MySQL如何使用索引”](mysql-indexes.html
    "10.3.1 How MySQL Uses Indexes")。遵循这些`InnoDB`索引指南：
- en: Because each `InnoDB` table has a [primary key](glossary.html#glos_primary_key
    "primary key") (whether you request one or not), specify a set of primary key
    columns for each table, columns that are used in the most important and time-critical
    queries.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为每个`InnoDB`表都有一个[主键](glossary.html#glos_primary_key "primary key")（无论您是否请求），请为每个表指定一组主键列，这些列在最重要和时间关键的查询中使用。
- en: Do not specify too many or too long columns in the primary key, because these
    column values are duplicated in each secondary index. When an index contains unnecessary
    data, the I/O to read this data and memory to cache it reduce the performance
    and scalability of the server.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在主键中指定太多或太长的列，因为这些列值会在每个二级索引中重复。当索引包含不必要的数据时，读取这些数据的I/O和缓存它的内存会降低服务器的性能和可伸缩性。
- en: Do not create a separate [secondary index](glossary.html#glos_secondary_index
    "secondary index") for each column, because each query can only make use of one
    index. Indexes on rarely tested columns or columns with only a few different values
    might not be helpful for any queries. If you have many queries for the same table,
    testing different combinations of columns, try to create a small number of [concatenated
    indexes](glossary.html#glos_concatenated_index "concatenated index") rather than
    a large number of single-column indexes. If an index contains all the columns
    needed for the result set (known as a [covering index](glossary.html#glos_covering_index
    "covering index")), the query might be able to avoid reading the table data at
    all.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要为每一列创建单独的[二级索引](glossary.html#glos_secondary_index "secondary index")，因为每个查询只能使用一个索引。很少被测试的列或者只有少量不同值的列上的索引可能对任何查询都没有帮助。如果对同一表有许多查询，测试不同列的组合，请尝试创建少量的[连接索引](glossary.html#glos_concatenated_index
    "concatenated index")而不是大量的单列索引。如果一个索引包含了结果集所需的所有列（称为[覆盖索引](glossary.html#glos_covering_index
    "covering index")），查询可能可以完全避免读取表数据。
- en: If an indexed column cannot contain any `NULL` values, declare it as `NOT NULL`
    when you create the table. The optimizer can better determine which index is most
    effective to use for a query, when it knows whether each column contains `NULL`
    values.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个索引列不能包含任何`NULL`值，请在创建表时将其声明为`NOT NULL`。当优化器知道每列是否包含`NULL`值时，可以更好地确定哪个索引对查询最有效。
- en: You can optimize single-query transactions for `InnoDB` tables, using the technique
    in [Section 10.5.3, “Optimizing InnoDB Read-Only Transactions”](innodb-performance-ro-txn.html
    "10.5.3 Optimizing InnoDB Read-Only Transactions").
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用[第10.5.3节，“优化InnoDB只读事务”](innodb-performance-ro-txn.html "10.5.3 Optimizing
    InnoDB Read-Only Transactions")中的技术，为`InnoDB`表优化单个查询事务。
