- en: 25.2.1 NDB Cluster Core Concepts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 25.2.1 NDB集群核心概念
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-basics.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-basics.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-basics.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-basics.html)
- en: '[`NDBCLUSTER`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") (also
    known as [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")) is an
    in-memory storage engine offering high-availability and data-persistence features.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NDBCLUSTER`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")（也称为[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")）是一种提供高可用性和数据持久性功能的内存存储引擎。'
- en: The [`NDBCLUSTER`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") storage
    engine can be configured with a range of failover and load-balancing options,
    but it is easiest to start with the storage engine at the cluster level. NDB Cluster's
    [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") storage engine
    contains a complete set of data, dependent only on other data within the cluster
    itself.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NDBCLUSTER`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")存储引擎可以配置一系列故障转移和负载平衡选项，但最简单的方法是从集群级别开始配置存储引擎。NDB集群的[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")存储引擎包含完整的数据集，仅依赖于集群内部的其他数据。'
- en: The “Cluster” portion of NDB Cluster is configured independently of the MySQL
    servers. In an NDB Cluster, each part of the cluster is considered to be a node.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: NDB集群的“Cluster”部分独立于MySQL服务器进行配置。在NDB集群中，集群的每个部分被视为一个节点。
- en: Note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In many contexts, the term “node” is used to indicate a computer, but when discussing
    NDB Cluster it means a *process*. It is possible to run multiple nodes on a single
    computer; for a computer on which one or more cluster nodes are being run we use
    the term cluster host.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情境中，“节点”一词用于指代计算机，但在讨论NDB集群时，它指的是一个*进程*。可以在单台计算机上运行多个节点；对于运行一个或多个集群节点的计算机，我们使用术语集群主机。
- en: 'There are three types of cluster nodes, and in a minimal NDB Cluster configuration,
    there are at least three nodes, one of each of these types:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种类型的集群节点，在最小的NDB集群配置中，至少有三个节点，每种类型一个：
- en: 'Management node: The role of this type of node is to manage the other nodes
    within the NDB Cluster, performing such functions as providing configuration data,
    starting and stopping nodes, and running backups. Because this node type manages
    the configuration of the other nodes, a node of this type should be started first,
    before any other node. A management node is started with the command [**ndb_mgmd**](mysql-cluster-programs-ndb-mgmd.html
    "25.5.4 ndb_mgmd — The NDB Cluster Management Server Daemon").'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理节点：这种类型的节点的角色是管理NDB集群中的其他节点，执行提供配置数据、启动和停止节点以及运行备份等功能。由于这种节点类型管理其他节点的配置，因此应首先启动此类型的节点，然后再启动任何其他节点。管理节点使用命令[**ndb_mgmd**](mysql-cluster-programs-ndb-mgmd.html
    "25.5.4 ndb_mgmd — The NDB Cluster Management Server Daemon")启动。
- en: 'Data node: This type of node stores cluster data. There are as many data nodes
    as there are fragment replicas, times the number of fragments (see [Section 25.2.2,
    “NDB Cluster Nodes, Node Groups, Fragment Replicas, and Partitions”](mysql-cluster-nodes-groups.html
    "25.2.2 NDB Cluster Nodes, Node Groups, Fragment Replicas, and Partitions")).
    For example, with two fragment replicas, each having two fragments, you need four
    data nodes. One fragment replica is sufficient for data storage, but provides
    no redundancy; therefore, it is recommended to have two (or more) fragment replicas
    to provide redundancy, and thus high availability. A data node is started with
    the command [**ndbd**](mysql-cluster-programs-ndbd.html "25.5.1 ndbd — The NDB
    Cluster Data Node Daemon") (see [Section 25.5.1, “ndbd — The NDB Cluster Data
    Node Daemon”](mysql-cluster-programs-ndbd.html "25.5.1 ndbd — The NDB Cluster
    Data Node Daemon")) or [**ndbmtd**](mysql-cluster-programs-ndbmtd.html "25.5.3 ndbmtd
    — The NDB Cluster Data Node Daemon (Multi-Threaded)") (see [Section 25.5.3, “ndbmtd
    — The NDB Cluster Data Node Daemon (Multi-Threaded)”](mysql-cluster-programs-ndbmtd.html
    "25.5.3 ndbmtd — The NDB Cluster Data Node Daemon (Multi-Threaded)")).'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据节点：此类型节点存储集群数据。数据节点的数量与片段副本的数量相同，乘以片段的数量（参见[第 25.2.2 节，“NDB Cluster 节点、节点组、片段副本和分区”](mysql-cluster-nodes-groups.html
    "25.2.2 NDB Cluster Nodes, Node Groups, Fragment Replicas, and Partitions")）。例如，具有两个片段副本，每个副本有两个片段，您需要四个数据节点。一个片段副本足以用于数据存储，但不提供冗余；因此，建议具有两个（或更多）片段副本以提供冗余性，从而提供高可用性。数据节点使用命令[**ndbd**](mysql-cluster-programs-ndbd.html
    "25.5.1 ndbd — The NDB Cluster Data Node Daemon")（参见[第 25.5.1 节，“ndbd — The NDB
    Cluster Data Node Daemon”](mysql-cluster-programs-ndbd.html "25.5.1 ndbd — The
    NDB Cluster Data Node Daemon")）或[**ndbmtd**](mysql-cluster-programs-ndbmtd.html
    "25.5.3 ndbmtd — The NDB Cluster Data Node Daemon (Multi-Threaded)")（参见[第 25.5.3
    节，“ndbmtd — The NDB Cluster Data Node Daemon (Multi-Threaded)”](mysql-cluster-programs-ndbmtd.html
    "25.5.3 ndbmtd — The NDB Cluster Data Node Daemon (Multi-Threaded)")）启动。
- en: NDB Cluster tables are normally stored completely in memory rather than on disk
    (this is why we refer to NDB Cluster as an in-memory database). However, some
    NDB Cluster data can be stored on disk; see [Section 25.6.11, “NDB Cluster Disk
    Data Tables”](mysql-cluster-disk-data.html "25.6.11 NDB Cluster Disk Data Tables"),
    for more information.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NDB Cluster 表通常完全存储在内存中，而不是在磁盘上（这就是为什么我们将 NDB Cluster 称为内存数据库）。然而，一些 NDB Cluster
    数据可以存储在磁盘上；有关更多信息，请参见[第 25.6.11 节，“NDB Cluster 磁盘数据表”](mysql-cluster-disk-data.html
    "25.6.11 NDB Cluster Disk Data Tables")。
- en: 'SQL node: This is a node that accesses the cluster data. In the case of NDB
    Cluster, an SQL node is a traditional MySQL server that uses the [`NDBCLUSTER`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") storage engine. An SQL node is a [**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server") process started with the [`--ndbcluster`](mysql-cluster-options-variables.html#option_mysqld_ndbcluster)
    and `--ndb-connectstring` options, which are explained elsewhere in this chapter,
    possibly with additional MySQL server options as well.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL 节点：这是访问集群数据的节点。在 NDB Cluster 的情况下，SQL 节点是使用 [`NDBCLUSTER`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") 存储引擎的传统 MySQL 服务器。SQL 节点是使用 [`--ndbcluster`](mysql-cluster-options-variables.html#option_mysqld_ndbcluster)
    和 `--ndb-connectstring` 选项启动的 [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL
    Server") 进程，这些选项在本章的其他地方有解释，可能还有其他 MySQL 服务器选项。
- en: An SQL node is actually just a specialized type of API node, which designates
    any application which accesses NDB Cluster data. Another example of an API node
    is the [**ndb_restore**](mysql-cluster-programs-ndb-restore.html "25.5.23 ndb_restore
    — Restore an NDB Cluster Backup") utility that is used to restore a cluster backup.
    It is possible to write such applications using the NDB API. For basic information
    about the NDB API, see [Getting Started with the NDB API](/doc/ndbapi/en/ndb-getting-started.html).
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL 节点实际上只是一种专门类型的 API 节点，用于指定任何访问 NDB Cluster 数据的应用程序。另一个 API 节点的示例是[**ndb_restore**](mysql-cluster-programs-ndb-restore.html
    "25.5.23 ndb_restore — Restore an NDB Cluster Backup") 实用程序，用于恢复集群备份。可以使用 NDB
    API 编写此类应用程序。有关 NDB API 的基本信息，请参见[使用 NDB API 入门](/doc/ndbapi/en/ndb-getting-started.html)。
- en: Important
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: It is not realistic to expect to employ a three-node setup in a production environment.
    Such a configuration provides no redundancy; to benefit from NDB Cluster's high-availability
    features, you must use multiple data and SQL nodes. The use of multiple management
    nodes is also highly recommended.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中不现实期望使用三节点设置。这种配置不提供冗余性；要从 NDB Cluster 的高可用性功能中受益，必须使用多个数据和 SQL 节点。强烈建议使用多个管理节点。
- en: For a brief introduction to the relationships between nodes, node groups, fragment
    replicas, and partitions in NDB Cluster, see [Section 25.2.2, “NDB Cluster Nodes,
    Node Groups, Fragment Replicas, and Partitions”](mysql-cluster-nodes-groups.html
    "25.2.2 NDB Cluster Nodes, Node Groups, Fragment Replicas, and Partitions").
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 关于NDB集群中节点、节点组、片段副本和分区之间关系的简要介绍，请参见[Section 25.2.2, “NDB Cluster Nodes, Node
    Groups, Fragment Replicas, and Partitions”](mysql-cluster-nodes-groups.html "25.2.2
    NDB Cluster Nodes, Node Groups, Fragment Replicas, and Partitions")。
- en: Configuration of a cluster involves configuring each individual node in the
    cluster and setting up individual communication links between nodes. NDB Cluster
    is currently designed with the intention that data nodes are homogeneous in terms
    of processor power, memory space, and bandwidth. In addition, to provide a single
    point of configuration, all configuration data for the cluster as a whole is located
    in one configuration file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 集群的配置涉及配置集群中的每个单独节点，并设置节点之间的单独通信链接。NDB集群当前设计的目的是数据节点在处理器性能、内存空间和带宽方面是同质的。此外，为了提供单一的配置点，集群作为整体的所有配置数据都位于一个配置文件中。
- en: The management server manages the cluster configuration file and the cluster
    log. Each node in the cluster retrieves the configuration data from the management
    server, and so requires a way to determine where the management server resides.
    When interesting events occur in the data nodes, the nodes transfer information
    about these events to the management server, which then writes the information
    to the cluster log.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 管理服务器管理集群配置文件和集群日志。集群中的每个节点从管理服务器检索配置数据，因此需要一种确定管理服务器位置的方式。当数据节点发生有趣的事件时，节点会将有关这些事件的信息传输到管理服务器，然后管理服务器将信息写入集群日志。
- en: In addition, there can be any number of cluster client processes or applications.
    These include standard MySQL clients, `NDB`-specific API programs, and management
    clients. These are described in the next few paragraphs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以有任意数量的集群客户端进程或应用程序。这些包括标准MySQL客户端、`NDB`特定的API程序和管理客户端。下面几段将对这些进行描述。
- en: '**Standard MySQL clients. ** NDB Cluster can be used with existing MySQL applications
    written in PHP, Perl, C, C++, Java, Python, and so on. Such client applications
    send SQL statements to and receive responses from MySQL servers acting as NDB
    Cluster SQL nodes in much the same way that they interact with standalone MySQL
    servers.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**标准MySQL客户端。** NDB集群可以与使用PHP、Perl、C、C++、Java、Python等编写的现有MySQL应用程序一起使用。这些客户端应用程序向MySQL服务器发送SQL语句，并从充当NDB集群SQL节点的MySQL服务器接收响应，方式与它们与独立的MySQL服务器交互的方式基本相同。'
- en: MySQL clients using an NDB Cluster as a data source can be modified to take
    advantage of the ability to connect with multiple MySQL servers to achieve load
    balancing and failover. For example, Java clients using Connector/J 5.0.6 and
    later can use `jdbc:mysql:loadbalance://` URLs (improved in Connector/J 5.1.7)
    to achieve load balancing transparently; for more information about using Connector/J
    with NDB Cluster, see [Using Connector/J with NDB Cluster](/doc/ndbapi/en/mccj-using-connectorj.html).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NDB集群作为数据源的MySQL客户端可以修改以利用与多个MySQL服务器连接以实现负载平衡和故障转移的能力。例如，使用Connector/J 5.0.6及更高版本的Java客户端可以使用`jdbc:mysql:loadbalance://`
    URL（在Connector/J 5.1.7中改进）透明地实现负载平衡；有关使用Connector/J与NDB集群的更多信息，请参见[Using Connector/J
    with NDB Cluster](/doc/ndbapi/en/mccj-using-connectorj.html)。
- en: '**NDB client programs. ** Client programs can be written that access NDB Cluster
    data directly from the `NDBCLUSTER` storage engine, bypassing any MySQL Servers
    that may be connected to the cluster, using the NDB API, a high-level C++ API.
    Such applications may be useful for specialized purposes where an SQL interface
    to the data is not needed. For more information, see [The NDB API](/doc/ndbapi/en/ndbapi.html).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**NDB客户端程序。** 可以编写客户端程序，直接从`NDBCLUSTER`存储引擎访问NDB集群数据，绕过可能连接到集群的任何MySQL服务器，使用NDB
    API，一个高级C++ API。这样的应用程序可能对不需要数据的SQL接口的专用目的很有用。有关更多信息，请参见[The NDB API](/doc/ndbapi/en/ndbapi.html)。'
- en: '`NDB`-specific Java applications can also be written for NDB Cluster using
    the NDB Cluster Connector for Java. This NDB Cluster Connector includes ClusterJ,
    a high-level database API similar to object-relational mapping persistence frameworks
    such as Hibernate and JPA that connect directly to `NDBCLUSTER`, and so does not
    require access to a MySQL Server. See [Java and NDB Cluster](/doc/ndbapi/en/mccj-overview-java.html),
    and [The ClusterJ API and Data Object Model](/doc/ndbapi/en/mccj-overview-clusterj-object-models.html),
    for more information.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用NDB Cluster Connector for Java为NDB Cluster编写`NDB`特定的Java应用程序。这个NDB Cluster
    Connector包括ClusterJ，一个类似于Hibernate和JPA等对象关系映射持久性框架的高级数据库API，直接连接到`NDBCLUSTER`，因此不需要访问MySQL服务器。有关更多信息，请参阅[Java和NDB
    Cluster](/doc/ndbapi/en/mccj-overview-java.html)，以及[ClusterJ API和数据对象模型](/doc/ndbapi/en/mccj-overview-clusterj-object-models.html)。
- en: NDB Cluster also supports applications written in JavaScript using Node.js.
    The MySQL Connector for JavaScript includes adapters for direct access to the
    `NDB` storage engine and as well as for the MySQL Server. Applications using this
    Connector are typically event-driven and use a domain object model similar in
    many ways to that employed by ClusterJ. For more information, see [MySQL NoSQL
    Connector for JavaScript](/doc/ndbapi/en/ndb-nodejs.html).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: NDB Cluster还支持使用Node.js编写的JavaScript应用程序。MySQL Connector for JavaScript包括适配器，用于直接访问`NDB`存储引擎以及MySQL服务器。使用此连接器的应用程序通常是事件驱动的，并且使用类似于ClusterJ所采用的领域对象模型。有关更多信息，请参阅[MySQL
    NoSQL Connector for JavaScript](/doc/ndbapi/en/ndb-nodejs.html)。
- en: '**Management clients. ** These clients connect to the management server and
    provide commands for starting and stopping nodes gracefully, starting and stopping
    message tracing (debug versions only), showing node versions and status, starting
    and stopping backups, and so on. An example of this type of program is the [**ndb_mgm**](mysql-cluster-programs-ndb-mgm.html
    "25.5.5 ndb_mgm — The NDB Cluster Management Client") management client supplied
    with NDB Cluster (see [Section 25.5.5, “ndb_mgm — The NDB Cluster Management Client”](mysql-cluster-programs-ndb-mgm.html
    "25.5.5 ndb_mgm — The NDB Cluster Management Client")). Such applications can
    be written using the MGM API, a C-language API that communicates directly with
    one or more NDB Cluster management servers. For more information, see [The MGM
    API](/doc/ndbapi/en/mgm-api.html).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**管理客户端。** 这些客户端连接到管理服务器，并提供命令以优雅地启动和停止节点，启动和停止消息跟踪（仅限调试版本），显示节点版本和状态，启动和停止备份等。这种类型程序的示例是NDB
    Cluster提供的[**ndb_mgm**](mysql-cluster-programs-ndb-mgm.html "25.5.5 ndb_mgm —
    The NDB Cluster Management Client")管理客户端（请参阅[Section 25.5.5，“ndb_mgm — NDB Cluster管理客户端”](mysql-cluster-programs-ndb-mgm.html
    "25.5.5 ndb_mgm — The NDB Cluster Management Client")）。此类应用程序可以使用MGM API编写，这是一个与一个或多个NDB
    Cluster管理服务器直接通信的C语言API。有关更多信息，请参阅[MGM API](/doc/ndbapi/en/mgm-api.html)。'
- en: Oracle also makes available MySQL Cluster Manager, which provides an advanced
    command-line interface simplifying many complex NDB Cluster management tasks,
    such restarting an NDB Cluster with a large number of nodes. The MySQL Cluster
    Manager client also supports commands for getting and setting the values of most
    node configuration parameters as well as [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") server options and variables relating to NDB Cluster. MySQL
    Cluster Manager 8.0 provides support for NDB 8.0\. See [MySQL Cluster Manager
    8.0.36 User Manual](/doc/mysql-cluster-manager/8.0/en/), for more information.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle还提供了MySQL Cluster Manager，它提供了一个高级命令行界面，简化了许多复杂的NDB Cluster管理任务，比如重新启动具有大量节点的NDB
    Cluster。MySQL Cluster Manager客户端还支持获取和设置大多数节点配置参数以及与NDB Cluster相关的[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")服务器选项和变量的命令。MySQL Cluster Manager 8.0支持NDB 8.0。有关更多信息，请参阅[MySQL
    Cluster Manager 8.0.36用户手册](/doc/mysql-cluster-manager/8.0/en/)。
- en: '**Event logs. ** NDB Cluster logs events by category (startup, shutdown, errors,
    checkpoints, and so on), priority, and severity. A complete listing of all reportable
    events may be found in [Section 25.6.3, “Event Reports Generated in NDB Cluster”](mysql-cluster-event-reports.html
    "25.6.3 Event Reports Generated in NDB Cluster"). Event logs are of the two types
    listed here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件日志。** NDB Cluster按类别（启动、关闭、错误、检查点等）、优先级和严重性记录事件。所有可报告事件的完整列表可在[Section 25.6.3，“NDB
    Cluster生成的事件报告”](mysql-cluster-event-reports.html "25.6.3 Event Reports Generated
    in NDB Cluster")中找到。事件日志有以下两种类型：'
- en: 'Cluster log: Keeps a record of all desired reportable events for the cluster
    as a whole.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群日志：记录整个集群的所有所需报告事件。
- en: 'Node log: A separate log which is also kept for each individual node.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点日志：每个单独节点都保留的单独日志。
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Under normal circumstances, it is necessary and sufficient to keep and examine
    only the cluster log. The node logs need be consulted only for application development
    and debugging purposes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常情况下，只需保留和检查集群日志即可。节点日志只需在应用程序开发和调试目的时进行查看。
- en: '**Checkpoint. ** Generally speaking, when data is saved to disk, it is said
    that a checkpoint has been reached. More specific to NDB Cluster, a checkpoint
    is a point in time where all committed transactions are stored on disk. With regard
    to the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") storage
    engine, there are two types of checkpoints which work together to ensure that
    a consistent view of the cluster''s data is maintained. These are shown in the
    following list:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查点。** 一般来说，当数据保存到磁盘时，就说达到了一个检查点。更具体地说，对于NDB集群，检查点是一个时间点，所有已提交的事务都存储在磁盘上。关于[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB集群8.0")存储引擎，有两种类型的检查点共同工作，以确保维护集群数据的一致视图。这些显示在以下列表中：'
- en: 'Local Checkpoint (LCP): This is a checkpoint that is specific to a single node;
    however, LCPs take place for all nodes in the cluster more or less concurrently.
    An LCP usually occurs every few minutes; the precise interval varies, and depends
    upon the amount of data stored by the node, the level of cluster activity, and
    other factors.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地检查点（LCP）：这是特定于单个节点的检查点；然而，LCP几乎同时发生在集群中的所有节点上。LCP通常每隔几分钟发生一次；确切的间隔会有所变化，取决于节点存储的数据量、集群活动水平和其他因素。
- en: NDB 8.0 supports partial LCPs, which can significantly improve performance under
    some conditions. See the descriptions of the [`EnablePartialLcp`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-enablepartiallcp)
    and [`RecoveryWork`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-recoverywork)
    configuration parameters which enable partial LCPs and control the amount of storage
    they use.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NDB 8.0支持部分LCP，可以在某些条件下显著提高性能。请参阅[`EnablePartialLcp`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-enablepartiallcp)和[`RecoveryWork`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-recoverywork)配置参数的描述，这些参数启用部分LCP并控制它们使用的存储量。
- en: 'Global Checkpoint (GCP): A GCP occurs every few seconds, when transactions
    for all nodes are synchronized and the redo-log is flushed to disk.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局检查点（GCP）：每隔几秒钟会发生一次GCP，当所有节点的事务同步并且重做日志刷新到磁盘时。
- en: For more information about the files and directories created by local checkpoints
    and global checkpoints, see [NDB Cluster Data Node File System Directory](/doc/ndb-internals/en/ndb-internals-ndbd-filesystemdir-files.html).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本地检查点和全局检查点创建的文件和目录的更多信息，请参阅[NDB集群数据节点文件系统目录](/doc/ndb-internals/en/ndb-internals-ndbd-filesystemdir-files.html)。
- en: '**Transporter. ** We use the term transporter for the data transport mechanism
    employed between data nodes. MySQL NDB Cluster 8.0 supports three of these, which
    are listed here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**传输器。** 我们使用传输器一词来表示数据节点之间使用的数据传输机制。MySQL NDB集群8.0支持以下三种传输器：'
- en: '*TCP/IP over Ethernet*. See [Section 25.4.3.10, “NDB Cluster TCP/IP Connections”](mysql-cluster-tcp-definition.html
    "25.4.3.10 NDB Cluster TCP/IP Connections").'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*以太网上的TCP/IP*。参见[第25.4.3.10节，“NDB集群TCP/IP连接”](mysql-cluster-tcp-definition.html
    "25.4.3.10 NDB集群TCP/IP连接")。'
- en: '*Direct TCP/IP*. Uses machine-to-machine connections. See [Section 25.4.3.11,
    “NDB Cluster TCP/IP Connections Using Direct Connections”](mysql-cluster-tcp-definition-direct.html
    "25.4.3.11 NDB Cluster TCP/IP Connections Using Direct Connections").'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*直接TCP/IP*。使用机器到机器的连接。参见[第25.4.3.11节，“NDB集群使用直接连接的TCP/IP连接”](mysql-cluster-tcp-definition-direct.html
    "25.4.3.11 NDB集群使用直接连接的TCP/IP连接")。'
- en: Although this transporter uses the same TCP/IP protocol as mentioned in the
    previous item, it requires setting up the hardware differently and is configured
    differently as well. For this reason, it is considered a separate transport mechanism
    for NDB Cluster.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管这个传输器使用与前一项提到的相同的TCP/IP协议，但需要不同的硬件设置和不同的配置。因此，它被认为是NDB集群的一个独立传输机制。
- en: '*Shared memory (SHM)*. See [Section 25.4.3.12, “NDB Cluster Shared-Memory Connections”](mysql-cluster-shm-definition.html
    "25.4.3.12 NDB Cluster Shared-Memory Connections").'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*共享内存（SHM）*。参见[第25.4.3.12节，“NDB集群共享内存连接”](mysql-cluster-shm-definition.html
    "25.4.3.12 NDB集群共享内存连接")。'
- en: Because it is ubiquitous, most users employ TCP/IP over Ethernet for NDB Cluster.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是无处不在的，大多数用户在NDB集群中使用TCP/IP over Ethernet。
- en: Regardless of the transporter used, `NDB` attempts to make sure that communication
    between data node processes is performed using chunks that are as large as possible
    since this benefits all types of data transmission.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用何种传输器，`NDB` 都会尽力确保数据节点进程之间的通信使用尽可能大的块进行，因为这有利于所有类型的数据传输。
