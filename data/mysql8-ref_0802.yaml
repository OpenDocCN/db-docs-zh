- en: 14.8 String Functions and Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.8 字符串函数和运算符
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/string-functions.html](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/string-functions.html](https://dev.mysql.com/doc/refman/8.0/en/string-functions.html)
- en: '[14.8.1 String Comparison Functions and Operators](string-comparison-functions.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[14.8.1 字符串比较函数和运算符](string-comparison-functions.html)'
- en: '[14.8.2 Regular Expressions](regexp.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[14.8.2 正则表达式](regexp.html)'
- en: '[14.8.3 Character Set and Collation of Function Results](string-functions-charset.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[14.8.3 函数结果的字符集和排序规则](string-functions-charset.html)'
- en: '**Table 14.12 String Functions and Operators**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.12 字符串函数和运算符**'
- en: '| Name | Description |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`ASCII()`](string-functions.html#function_ascii) | Return numeric value
    of left-most character |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`ASCII()`](string-functions.html#function_ascii) | 返回最左字符的数值 |'
- en: '| [`BIN()`](string-functions.html#function_bin) | Return a string containing
    binary representation of a number |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`BIN()`](string-functions.html#function_bin) | 返回包含数字二进制表示的字符串 |'
- en: '| [`BIT_LENGTH()`](string-functions.html#function_bit-length) | Return length
    of argument in bits |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`BIT_LENGTH()`](string-functions.html#function_bit-length) | 返回参数的位长度 |'
- en: '| [`CHAR()`](string-functions.html#function_char) | Return the character for
    each integer passed |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`CHAR()`](string-functions.html#function_char) | 返回每个传递整数的字符 |'
- en: '| [`CHAR_LENGTH()`](string-functions.html#function_char-length) | Return number
    of characters in argument |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`CHAR_LENGTH()`](string-functions.html#function_char-length) | 返回参数中的字符数
    |'
- en: '| [`CHARACTER_LENGTH()`](string-functions.html#function_character-length) |
    Synonym for CHAR_LENGTH() |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`CHARACTER_LENGTH()`](string-functions.html#function_character-length) |
    CHAR_LENGTH()的同义词 |'
- en: '| [`CONCAT()`](string-functions.html#function_concat) | Return concatenated
    string |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`CONCAT()`](string-functions.html#function_concat) | 返回连接的字符串 |'
- en: '| [`CONCAT_WS()`](string-functions.html#function_concat-ws) | Return concatenate
    with separator |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`CONCAT_WS()`](string-functions.html#function_concat-ws) | 返回带有分隔符的连接字符串
    |'
- en: '| [`ELT()`](string-functions.html#function_elt) | Return string at index number
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`ELT()`](string-functions.html#function_elt) | 返回索引号处的字符串 |'
- en: '| [`EXPORT_SET()`](string-functions.html#function_export-set) | Return a string
    such that for every bit set in the value bits, you get an on string and for every
    unset bit, you get an off string |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`EXPORT_SET()`](string-functions.html#function_export-set) | 返回一个字符串，对于值位设置的每个位，您会得到一个打开的字符串，对于未设置的位，您会得到一个关闭的字符串
    |'
- en: '| [`FIELD()`](string-functions.html#function_field) | Index (position) of first
    argument in subsequent arguments |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`FIELD()`](string-functions.html#function_field) | 第一个参数在后续参数中的索引（位置） |'
- en: '| [`FIND_IN_SET()`](string-functions.html#function_find-in-set) | Index (position)
    of first argument within second argument |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`FIND_IN_SET()`](string-functions.html#function_find-in-set) | 第一个参数在第二个参数中的索引（位置）
    |'
- en: '| [`FORMAT()`](string-functions.html#function_format) | Return a number formatted
    to specified number of decimal places |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`FORMAT()`](string-functions.html#function_format) | 返回格式化为指定小数位数的数字 |'
- en: '| [`FROM_BASE64()`](string-functions.html#function_from-base64) | Decode base64
    encoded string and return result |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`FROM_BASE64()`](string-functions.html#function_from-base64) | 解码base64编码的字符串并返回结果
    |'
- en: '| [`HEX()`](string-functions.html#function_hex) | Hexadecimal representation
    of decimal or string value |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`HEX()`](string-functions.html#function_hex) | 十进制或字符串值的十六进制表示 |'
- en: '| [`INSERT()`](string-functions.html#function_insert) | Insert substring at
    specified position up to specified number of characters |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`INSERT()`](string-functions.html#function_insert) | 在指定位置插入子字符串，最多指定数量的字符
    |'
- en: '| [`INSTR()`](string-functions.html#function_instr) | Return the index of the
    first occurrence of substring |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`INSTR()`](string-functions.html#function_instr) | 返回子字符串的第一个出现的索引 |'
- en: '| [`LCASE()`](string-functions.html#function_lcase) | Synonym for LOWER() |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`LCASE()`](string-functions.html#function_lcase) | LOWER()的同义词 |'
- en: '| [`LEFT()`](string-functions.html#function_left) | Return the leftmost number
    of characters as specified |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`LEFT()`](string-functions.html#function_left) | 返回指定数量的最左字符 |'
- en: '| [`LENGTH()`](string-functions.html#function_length) | Return the length of
    a string in bytes |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`LENGTH()`](string-functions.html#function_length) | 返回字符串的字节长度 |'
- en: '| [`LIKE`](string-comparison-functions.html#operator_like) | Simple pattern
    matching |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`LIKE`](string-comparison-functions.html#operator_like) | 简单的模式匹配 |'
- en: '| [`LOAD_FILE()`](string-functions.html#function_load-file) | Load the named
    file |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`LOAD_FILE()`](string-functions.html#function_load-file) | 加载指定文件 |'
- en: '| [`LOCATE()`](string-functions.html#function_locate) | Return the position
    of the first occurrence of substring |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`LOCATE()`](string-functions.html#function_locate) | 返回子字符串的第一个出现位置 |'
- en: '| [`LOWER()`](string-functions.html#function_lower) | Return the argument in
    lowercase |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`LOWER()`](string-functions.html#function_lower) | 返回小写参数 |'
- en: '| [`LPAD()`](string-functions.html#function_lpad) | Return the string argument,
    left-padded with the specified string |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`LPAD()`](string-functions.html#function_lpad) | 返回左侧填充了指定字符串的字符串参数 |'
- en: '| [`LTRIM()`](string-functions.html#function_ltrim) | Remove leading spaces
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`LTRIM()`](string-functions.html#function_ltrim) | 移除前导空格 |'
- en: '| [`MAKE_SET()`](string-functions.html#function_make-set) | Return a set of
    comma-separated strings that have the corresponding bit in bits set |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`MAKE_SET()`](string-functions.html#function_make-set) | 返回一组逗号分隔的字符串，其中对应位在
    bits 中设置 |'
- en: '| [`MATCH()`](fulltext-search.html#function_match) | Perform full-text search
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`MATCH()`](fulltext-search.html#function_match) | 执行全文搜索 |'
- en: '| [`MID()`](string-functions.html#function_mid) | Return a substring starting
    from the specified position |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`MID()`](string-functions.html#function_mid) | 返回从指定位置开始的子字符串 |'
- en: '| [`NOT LIKE`](string-comparison-functions.html#operator_not-like) | Negation
    of simple pattern matching |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`NOT LIKE`](string-comparison-functions.html#operator_not-like) | 简单模式匹配的否定
    |'
- en: '| [`NOT REGEXP`](regexp.html#operator_not-regexp) | Negation of REGEXP |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`NOT REGEXP`](regexp.html#operator_not-regexp) | REGEXP 的否定 |'
- en: '| [`OCT()`](string-functions.html#function_oct) | Return a string containing
    octal representation of a number |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`OCT()`](string-functions.html#function_oct) | 返回包含数字的八进制表示的字符串 |'
- en: '| [`OCTET_LENGTH()`](string-functions.html#function_octet-length) | Synonym
    for LENGTH() |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`OCTET_LENGTH()`](string-functions.html#function_octet-length) | LENGTH()
    的同义词 |'
- en: '| [`ORD()`](string-functions.html#function_ord) | Return character code for
    leftmost character of the argument |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`ORD()`](string-functions.html#function_ord) | 返回参数的最左字符的字符代码 |'
- en: '| [`POSITION()`](string-functions.html#function_position) | Synonym for LOCATE()
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`POSITION()`](string-functions.html#function_position) | LOCATE() 的同义词 |'
- en: '| [`QUOTE()`](string-functions.html#function_quote) | Escape the argument for
    use in an SQL statement |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`QUOTE()`](string-functions.html#function_quote) | 为在 SQL 语句中使用而转义参数 |'
- en: '| [`REGEXP`](regexp.html#operator_regexp) | Whether string matches regular
    expression |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`REGEXP`](regexp.html#operator_regexp) | 字符串是否匹配正则表达式 |'
- en: '| [`REGEXP_INSTR()`](regexp.html#function_regexp-instr) | Starting index of
    substring matching regular expression |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`REGEXP_INSTR()`](regexp.html#function_regexp-instr) | 返回匹配正则表达式的子字符串的起始索引
    |'
- en: '| [`REGEXP_LIKE()`](regexp.html#function_regexp-like) | Whether string matches
    regular expression |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`REGEXP_LIKE()`](regexp.html#function_regexp-like) | 字符串是否匹配正则表达式 |'
- en: '| [`REGEXP_REPLACE()`](regexp.html#function_regexp-replace) | Replace substrings
    matching regular expression |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`REGEXP_REPLACE()`](regexp.html#function_regexp-replace) | 替换与正则表达式匹配的子字符串
    |'
- en: '| [`REGEXP_SUBSTR()`](regexp.html#function_regexp-substr) | Return substring
    matching regular expression |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`REGEXP_SUBSTR()`](regexp.html#function_regexp-substr) | 返回匹配正则表达式的子字符串
    |'
- en: '| [`REPEAT()`](string-functions.html#function_repeat) | Repeat a string the
    specified number of times |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`REPEAT()`](string-functions.html#function_repeat) | 重复指定次数的字符串 |'
- en: '| [`REPLACE()`](string-functions.html#function_replace) | Replace occurrences
    of a specified string |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`REPLACE()`](string-functions.html#function_replace) | 替换指定字符串的出现次数 |'
- en: '| [`REVERSE()`](string-functions.html#function_reverse) | Reverse the characters
    in a string |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`REVERSE()`](string-functions.html#function_reverse) | 反转字符串中的字符 |'
- en: '| [`RIGHT()`](string-functions.html#function_right) | Return the specified
    rightmost number of characters |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`RIGHT()`](string-functions.html#function_right) | 返回指定右侧字符数 |'
- en: '| [`RLIKE`](regexp.html#operator_regexp) | Whether string matches regular expression
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`RLIKE`](regexp.html#operator_regexp) | 字符串是否匹配正则表达式 |'
- en: '| [`RPAD()`](string-functions.html#function_rpad) | Append string the specified
    number of times |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`RPAD()`](string-functions.html#function_rpad) | 追加指定次数的字符串 |'
- en: '| [`RTRIM()`](string-functions.html#function_rtrim) | Remove trailing spaces
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`RTRIM()`](string-functions.html#function_rtrim) | 移除尾部空格 |'
- en: '| [`SOUNDEX()`](string-functions.html#function_soundex) | Return a soundex
    string |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`SOUNDEX()`](string-functions.html#function_soundex) | 返回一个 Soundex 字符串
    |'
- en: '| [`SOUNDS LIKE`](string-functions.html#operator_sounds-like) | Compare sounds
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`SOUNDS LIKE`](string-functions.html#operator_sounds-like) | 比较声音 |'
- en: '| [`SPACE()`](string-functions.html#function_space) | Return a string of the
    specified number of spaces |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`SPACE()`](string-functions.html#function_space) | 返回指定数量的空格字符串 |'
- en: '| [`STRCMP()`](string-comparison-functions.html#function_strcmp) | Compare
    two strings |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`STRCMP()`](string-comparison-functions.html#function_strcmp) | 比较两个字符串
    |'
- en: '| [`SUBSTR()`](string-functions.html#function_substr) | Return the substring
    as specified |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`SUBSTR()`](string-functions.html#function_substr) | 返回指定的子字符串 |'
- en: '| [`SUBSTRING()`](string-functions.html#function_substring) | Return the substring
    as specified |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`SUBSTRING()`](string-functions.html#function_substring) | 返回指定的子字符串 |'
- en: '| [`SUBSTRING_INDEX()`](string-functions.html#function_substring-index) | Return
    a substring from a string before the specified number of occurrences of the delimiter
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`SUBSTRING_INDEX()`](string-functions.html#function_substring-index) | 返回指定分隔符之前的字符串子串
    |'
- en: '| [`TO_BASE64()`](string-functions.html#function_to-base64) | Return the argument
    converted to a base-64 string |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`TO_BASE64()`](string-functions.html#function_to-base64) | 返回转换为base-64字符串的参数
    |'
- en: '| [`TRIM()`](string-functions.html#function_trim) | Remove leading and trailing
    spaces |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`TRIM()`](string-functions.html#function_trim) | 删除前导和尾随空格 |'
- en: '| [`UCASE()`](string-functions.html#function_ucase) | Synonym for UPPER() |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`UCASE()`](string-functions.html#function_ucase) | UPPER()的同义词 |'
- en: '| [`UNHEX()`](string-functions.html#function_unhex) | Return a string containing
    hex representation of a number |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`UNHEX()`](string-functions.html#function_unhex) | 返回包含数字的十六进制表示的字符串 |'
- en: '| [`UPPER()`](string-functions.html#function_upper) | Convert to uppercase
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`UPPER()`](string-functions.html#function_upper) | 转换为大写 |'
- en: '| [`WEIGHT_STRING()`](string-functions.html#function_weight-string) | Return
    the weight string for a string |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`WEIGHT_STRING()`](string-functions.html#function_weight-string) | 返回字符串的权重字符串
    |'
- en: '| Name | Description |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: String-valued functions return `NULL` if the length of the result would be greater
    than the value of the [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)
    system variable. See [Section 7.1.1, “Configuring the Server”](server-configuration.html
    "7.1.1 Configuring the Server").
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果的长度大于[`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)系统变量的值，则返回`NULL`。有关详细信息，请参阅[第7.1.1节，“配置服务器”](server-configuration.html
    "7.1.1 配置服务器")。
- en: For functions that operate on string positions, the first position is numbered
    1.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于操作字符串位置的函数，第一个位置编号为1。
- en: For functions that take length arguments, noninteger arguments are rounded to
    the nearest integer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要长度参数的函数，非整数参数将四舍五入为最接近的整数。
- en: '[`ASCII(*`str`*)`](string-functions.html#function_ascii)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ASCII(*`str`*)`](string-functions.html#function_ascii)'
- en: Returns the numeric value of the leftmost character of the string *`str`*. Returns
    `0` if *`str`* is the empty string. Returns `NULL` if *`str`* is `NULL`. [`ASCII()`](string-functions.html#function_ascii)
    works for 8-bit characters.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`str`*的最左字符的数值。如果*`str`*为空字符串，则返回`0`。如果*`str`*为`NULL`，则返回`NULL`。[`ASCII()`](string-functions.html#function_ascii)适用于8位字符。
- en: '[PRE0]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: See also the [`ORD()`](string-functions.html#function_ord) function.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见[`ORD()`](string-functions.html#function_ord)函数。
- en: '[`BIN(*`N`*)`](string-functions.html#function_bin)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIN(*`N`*)`](string-functions.html#function_bin)'
- en: Returns a string representation of the binary value of *`N`*, where *`N`* is
    a longlong ([`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")) number. This is equivalent
    to [`CONV(*`N`*,10,2)`](mathematical-functions.html#function_conv). Returns `NULL`
    if *`N`* is `NULL`.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`N`*的二进制值的字符串表示，其中*`N`*是长整型([`BIGINT`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"))数字。这等效于[`CONV(*`N`*,10,2)`](mathematical-functions.html#function_conv)。如果*`N`*为`NULL`，则返回`NULL`。
- en: '[PRE1]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`BIT_LENGTH(*`str`*)`](string-functions.html#function_bit-length)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIT_LENGTH(*`str`*)`](string-functions.html#function_bit-length)'
- en: Returns the length of the string *`str`* in bits. Returns `NULL` if *`str`*
    is `NULL`.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`str`*的位数。如果*`str`*为`NULL`，则返回`NULL`。
- en: '[PRE2]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`CHAR(*`N`*,... [USING *`charset_name`*])`](string-functions.html#function_char)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CHAR(*`N`*,... [USING *`charset_name`*])`](string-functions.html#function_char)'
- en: '[`CHAR()`](string-functions.html#function_char) interprets each argument *`N`*
    as an integer and returns a string consisting of the characters given by the code
    values of those integers. `NULL` values are skipped.'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CHAR()`](string-functions.html#function_char)将每个参数*`N`*解释为整数，并返回由这些整数的代码值给出的字符组成的字符串。跳过`NULL`值。'
- en: '[PRE3]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'By default, [`CHAR()`](string-functions.html#function_char) returns a binary
    string. To produce a string in a given character set, use the optional `USING`
    clause:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，[`CHAR()`](string-functions.html#function_char)返回一个二进制字符串。要生成给定字符集中的字符串，请使用可选的`USING`子句：
- en: '[PRE4]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If `USING` is given and the result string is illegal for the given character
    set, a warning is issued. Also, if strict SQL mode is enabled, the result from
    [`CHAR()`](string-functions.html#function_char) becomes `NULL`.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果提供了`USING`并且结果字符串对于给定的字符集是非法的，则会发出警告。此外，如果启用了严格的SQL模式，则[`CHAR()`](string-functions.html#function_char)的结果将变为`NULL`。
- en: If [`CHAR()`](string-functions.html#function_char) is invoked from within the
    [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") client,
    binary strings display using hexadecimal notation, depending on the value of the
    [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex). For
    more information about that option, see [Section 6.5.1, “mysql — The MySQL Command-Line
    Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端内调用[`CHAR()`](string-functions.html#function_char)，二进制字符串将根据[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值以十六进制表示。有关该选项的更多信息，请参见[Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`CHAR()`](string-functions.html#function_char) arguments larger than 255 are
    converted into multiple result bytes. For example, [`CHAR(256)`](string-functions.html#function_char)
    is equivalent to [`CHAR(1,0)`](string-functions.html#function_char), and [`CHAR(256*256)`](string-functions.html#function_char)
    is equivalent to [`CHAR(1,0,0)`](string-functions.html#function_char):'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大于255的[`CHAR()`](string-functions.html#function_char)参数将转换为多个结果字节。例如，[`CHAR(256)`](string-functions.html#function_char)等同于[`CHAR(1,0)`](string-functions.html#function_char)，而[`CHAR(256*256)`](string-functions.html#function_char)等同于[`CHAR(1,0,0)`](string-functions.html#function_char)：
- en: '[PRE5]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[`CHAR_LENGTH(*`str`*)`](string-functions.html#function_char-length)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CHAR_LENGTH(*`str`*)`](string-functions.html#function_char-length)'
- en: 'Returns the length of the string *`str`*, measured in code points. A multibyte
    character counts as a single code point. This means that, for a string containing
    two 3-byte characters, [`LENGTH()`](string-functions.html#function_length) returns
    `6`, whereas [`CHAR_LENGTH()`](string-functions.html#function_char-length) returns
    `2`, as shown here:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`str`*的字符串长度，以代码点计算。多字节字符计为一个代码点。这意味着，对于包含两个3字节字符的字符串，[`LENGTH()`](string-functions.html#function_length)返回`6`，而[`CHAR_LENGTH()`](string-functions.html#function_char-length)返回`2`，如下所示：
- en: '[PRE6]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`CHAR_LENGTH()` returns `NULL` if *`str`* is `NULL`.'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`str`*为`NULL`，则`CHAR_LENGTH()`返回`NULL`。
- en: '[`CHARACTER_LENGTH(*`str`*)`](string-functions.html#function_character-length)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CHARACTER_LENGTH(*`str`*)`](string-functions.html#function_character-length)'
- en: '[`CHARACTER_LENGTH()`](string-functions.html#function_character-length) is
    a synonym for [`CHAR_LENGTH()`](string-functions.html#function_char-length).'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CHARACTER_LENGTH()`](string-functions.html#function_character-length)是[`CHAR_LENGTH()`](string-functions.html#function_char-length)的同义词。'
- en: '[`CONCAT(*`str1`*,*`str2`*,...)`](string-functions.html#function_concat)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CONCAT(*`str1`*,*`str2`*,...)`](string-functions.html#function_concat)'
- en: Returns the string that results from concatenating the arguments. May have one
    or more arguments. If all arguments are nonbinary strings, the result is a nonbinary
    string. If the arguments include any binary strings, the result is a binary string.
    A numeric argument is converted to its equivalent nonbinary string form.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回从连接参数结果的字符串。可能有一个或多个参数。如果所有参数都是非二进制字符串，则结果是非二进制字符串。如果参数包含任何二进制字符串，则结果是二进制字符串。数值参数转换为其等效的非二进制字符串形式。
- en: '[`CONCAT()`](string-functions.html#function_concat) returns `NULL` if any argument
    is `NULL`.'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果任何参数为`NULL`，[`CONCAT()`](string-functions.html#function_concat)返回`NULL`。
- en: '[PRE7]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For quoted strings, concatenation can be performed by placing the strings next
    to each other:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于带引号的字符串，可以通过将字符串放在一起来执行连接：
- en: '[PRE8]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If [`CONCAT()`](string-functions.html#function_concat) is invoked from within
    the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") client,
    binary string results display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端内调用[`CONCAT()`](string-functions.html#function_concat)，二进制字符串结果将根据[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值以十六进制表示。有关该选项的更多信息，请参见[Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`CONCAT_WS(*`separator`*,*`str1`*,*`str2`*,...)`](string-functions.html#function_concat-ws)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CONCAT_WS(*`分隔符`*,*`str1`*,*`str2`*,...)`](string-functions.html#function_concat-ws)'
- en: '[`CONCAT_WS()`](string-functions.html#function_concat-ws) stands for Concatenate
    With Separator and is a special form of [`CONCAT()`](string-functions.html#function_concat).
    The first argument is the separator for the rest of the arguments. The separator
    is added between the strings to be concatenated. The separator can be a string,
    as can the rest of the arguments. If the separator is `NULL`, the result is `NULL`.'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CONCAT_WS()`](string-functions.html#function_concat-ws)代表带分隔符连接，是[`CONCAT()`](string-functions.html#function_concat)的特殊形式。第一个参数是其余参数的分隔符。分隔符添加在要连接的字符串之间。分隔符可以是字符串，其余参数也可以是字符串。如果分隔符为`NULL`，则结果为`NULL`。'
- en: '[PRE9]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[`CONCAT_WS()`](string-functions.html#function_concat-ws) does not skip empty
    strings. However, it does skip any `NULL` values after the separator argument.'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CONCAT_WS()`](string-functions.html#function_concat-ws)不会跳过空字符串。但是，在分隔符参数之后，它会跳过任何`NULL`值。'
- en: '[`ELT(*`N`*,*`str1`*,*`str2`*,*`str3`*,...)`](string-functions.html#function_elt)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ELT(*`N`*,*`str1`*,*`str2`*,*`str3`*,...)`](string-functions.html#function_elt)'
- en: '[`ELT()`](string-functions.html#function_elt) returns the *`N`*th element of
    the list of strings: *`str1`* if *`N`* = `1`, *`str2`* if *`N`* = `2`, and so
    on. Returns `NULL` if *`N`* is less than `1`, greater than the number of arguments,
    or `NULL`. [`ELT()`](string-functions.html#function_elt) is the complement of
    [`FIELD()`](string-functions.html#function_field).'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ELT()`](string-functions.html#function_elt)返回字符串列表中第*`N`*个元素：如果*`N`* = `1`，则返回*`str1`*，如果*`N`*
    = `2`，则返回*`str2`*，依此类推。如果*`N`*小于`1`，大于参数数量或为`NULL`，则返回`NULL`。[`ELT()`](string-functions.html#function_elt)是[`FIELD()`](string-functions.html#function_field)的补充。'
- en: '[PRE10]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[`EXPORT_SET(*`bits`*,*`on`*,*`off`*[,*`separator`*[,*`number_of_bits`*]])`](string-functions.html#function_export-set)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`EXPORT_SET(*`bits`*,*`on`*,*`off`*[,*`separator`*[,*`number_of_bits`*]])`](string-functions.html#function_export-set)'
- en: Returns a string such that for every bit set in the value *`bits`*, you get
    an *`on`* string and for every bit not set in the value, you get an *`off`* string.
    Bits in *`bits`* are examined from right to left (from low-order to high-order
    bits). Strings are added to the result from left to right, separated by the *`separator`*
    string (the default being the comma character `,`). The number of bits examined
    is given by *`number_of_bits`*, which has a default of 64 if not specified. *`number_of_bits`*
    is silently clipped to 64 if larger than 64\. It is treated as an unsigned integer,
    so a value of −1 is effectively the same as 64.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回一个字符串，对于值*`bits`*中设置的每个位，您会得到一个*`on`*字符串，对于值中未设置的每个位，您会得到一个*`off`*字符串。从右到左（从低位到高位）检查*`bits`*中的位。字符串从左到右添加到结果中，由*`separator`*字符串分隔（默认为逗号字符`,`）。检查的位数由*`number_of_bits`*给出，如果未指定，默认为`64`。如果*`number_of_bits`*大于`64`，则会被静默截断为`64`。它被视为无符号整数，因此值为−1实际上等同于`64`。
- en: '[PRE11]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[`FIELD(*`str`*,*`str1`*,*`str2`*,*`str3`*,...)`](string-functions.html#function_field)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FIELD(*`str`*,*`str1`*,*`str2`*,*`str3`*,...)`](string-functions.html#function_field)'
- en: Returns the index (position) of *`str`* in the *`str1`*, *`str2`*, *`str3`*,
    `...` list. Returns `0` if *`str`* is not found.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`str`*在*`str1`*、*`str2`*、*`str3`*、`...`列表中的索引（位置）。如果未找到*`str`*，则返回`0`。
- en: If all arguments to [`FIELD()`](string-functions.html#function_field) are strings,
    all arguments are compared as strings. If all arguments are numbers, they are
    compared as numbers. Otherwise, the arguments are compared as double.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果[`FIELD()`](string-functions.html#function_field)的所有参数都是字符串，则所有参数将作为字符串进行比较。如果所有参数都是数字，则它们将作为数字进行比较。否则，参数将作为双精度数进行比较。
- en: If *`str`* is `NULL`, the return value is `0` because `NULL` fails equality
    comparison with any value. [`FIELD()`](string-functions.html#function_field) is
    the complement of [`ELT()`](string-functions.html#function_elt).
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`str`*为`NULL`，则返回值为`0`，因为`NULL`与任何值的相等比较失败。[`FIELD()`](string-functions.html#function_field)是[`ELT()`](string-functions.html#function_elt)的补充。
- en: '[PRE12]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[`FIND_IN_SET(*`str`*,*`strlist`*)`](string-functions.html#function_find-in-set)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FIND_IN_SET(*`str`*,*`strlist`*)`](string-functions.html#function_find-in-set)'
- en: Returns a value in the range of 1 to *`N`* if the string *`str`* is in the string
    list *`strlist`* consisting of *`N`* substrings. A string list is a string composed
    of substrings separated by `,` characters. If the first argument is a constant
    string and the second is a column of type [`SET`](set.html "13.3.6 The SET Type"),
    the [`FIND_IN_SET()`](string-functions.html#function_find-in-set) function is
    optimized to use bit arithmetic. Returns `0` if *`str`* is not in *`strlist`*
    or if *`strlist`* is the empty string. Returns `NULL` if either argument is `NULL`.
    This function does not work properly if the first argument contains a comma (`,`)
    character.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果字符串*`str`*在由*`N`*个子字符串组成的字符串列表*`strlist`*中，则返回1到*`N`*的值。字符串列表是由`,`字符分隔的子字符串组成的字符串。如果第一个参数是常量字符串，第二个参数是[`SET`](set.html
    "13.3.6 The SET Type")类型的列，则[`FIND_IN_SET()`](string-functions.html#function_find-in-set)函数会优化使用位运算。如果*`str`*不在*`strlist`*中或*`strlist`*为空字符串，则返回`0`。如果任一参数为`NULL`，则返回`NULL`。如果第一个参数包含逗号（`,`）字符，则此函数无法正常工作。
- en: '[PRE13]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[`FORMAT(*`X`*,*`D`*[,*`locale`*])`](string-functions.html#function_format)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FORMAT(*`X`*,*`D`*[,*`locale`*])`](string-functions.html#function_format)'
- en: Formats the number *`X`* to a format like `'#,###,###.##'`, rounded to *`D`*
    decimal places, and returns the result as a string. If *`D`* is `0`, the result
    has no decimal point or fractional part. If *`X`* or *`D`* is `NULL`, the function
    returns `NULL`.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将数字*`X`*格式化为类似`'#,###,###.##'`的格式，四舍五入到*`D`*位小数，并将结果作为字符串返回。如果*`D`*为`0`，则结果没有小数点或小数部分。如果*`X`*或*`D`*为`NULL`，则函数返回`NULL`。
- en: The optional third parameter enables a locale to be specified to be used for
    the result number's decimal point, thousands separator, and grouping between separators.
    Permissible locale values are the same as the legal values for the [`lc_time_names`](server-system-variables.html#sysvar_lc_time_names)
    system variable (see [Section 12.16, “MySQL Server Locale Support”](locale-support.html
    "12.16 MySQL Server Locale Support")). If the locale is `NULL` or not specified,
    the default locale is `'en_US'`.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的第三个参数允许指定要用于结果数字的小数点、千位分隔符和分隔符之间的分组的区域设置。允许的区域设置值与[`lc_time_names`](server-system-variables.html#sysvar_lc_time_names)系统变量的合法值相同（请参阅[第12.16节，“MySQL服务器区域设置支持”](locale-support.html
    "12.16 MySQL Server Locale Support")）。如果区域设置为`NULL`或未指定，则默认区域设置为`'en_US'`。
- en: '[PRE14]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[`FROM_BASE64(*`str`*)`](string-functions.html#function_from-base64)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FROM_BASE64(*`str`*)`](string-functions.html#function_from-base64)'
- en: Takes a string encoded with the base-64 encoded rules used by [`TO_BASE64()`](string-functions.html#function_to-base64)
    and returns the decoded result as a binary string. The result is `NULL` if the
    argument is `NULL` or not a valid base-64 string. See the description of [`TO_BASE64()`](string-functions.html#function_to-base64)
    for details about the encoding and decoding rules.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将一个使用[`TO_BASE64()`](string-functions.html#function_to-base64)使用的base-64编码规则编码的字符串解码，并将解码结果作为二进制字符串返回。如果参数为`NULL`或不是有效的base-64字符串，则结果为`NULL`。有关编码和解码规则的详细信息，请参阅[`TO_BASE64()`](string-functions.html#function_to-base64)的描述。
- en: '[PRE15]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If [`FROM_BASE64()`](string-functions.html#function_from-base64) is invoked
    from within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation. You can disable this
    behavior by setting the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)
    to `0` when starting the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") client. For more information about that option, see [Section 6.5.1, “mysql
    — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client").
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端内部调用[`FROM_BASE64()`](string-functions.html#function_from-base64)，二进制字符串将使用十六进制表示。您可以通过在启动[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")客户端时将[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值设置为`0`来禁用此行为。有关该选项的更多信息，请参阅[第6.5.1节，“mysql
    — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`HEX(*`str`*)`](string-functions.html#function_hex), [`HEX(*`N`*)`](string-functions.html#function_hex)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`HEX(*`str`*)`](string-functions.html#function_hex), [`HEX(*`N`*)`](string-functions.html#function_hex)'
- en: For a string argument *`str`*, [`HEX()`](string-functions.html#function_hex)
    returns a hexadecimal string representation of *`str`* where each byte of each
    character in *`str`* is converted to two hexadecimal digits. (Multibyte characters
    therefore become more than two digits.) The inverse of this operation is performed
    by the [`UNHEX()`](string-functions.html#function_unhex) function.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于字符串参数*`str`*，[`HEX()`](string-functions.html#function_hex) 返回一个十六进制字符串表示*`str`*，其中*`str`*中每个字符的每个字节都转换为两个十六进制数字。（因此，多字节字符会变成两个以上的数字。）此操作的逆操作由[`UNHEX()`](string-functions.html#function_unhex)
    函数执行。
- en: For a numeric argument *`N`*, [`HEX()`](string-functions.html#function_hex)
    returns a hexadecimal string representation of the value of *`N`* treated as a
    longlong ([`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) -
    INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")) number. This is equivalent
    to [`CONV(*`N`*,10,16)`](mathematical-functions.html#function_conv). The inverse
    of this operation is performed by [`CONV(HEX(*`N`*),16,10)`](mathematical-functions.html#function_conv).
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于数值参数*`N`*，[`HEX()`](string-functions.html#function_hex) 返回将*`N`*的值视为长整型（[`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT")）数字的十六进制字符串表示。这等效于[`CONV(*`N`*,10,16)`](mathematical-functions.html#function_conv)。此操作的逆操作由[`CONV(HEX(*`N`*),16,10)`](mathematical-functions.html#function_conv)执行。
- en: For a `NULL` argument, this function returns `NULL`.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`NULL`参数，此函数返回`NULL`。
- en: '[PRE16]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[`INSERT(*`str`*,*`pos`*,*`len`*,*`newstr`*)`](string-functions.html#function_insert)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INSERT(*`str`*,*`pos`*,*`len`*,*`newstr`*)`](string-functions.html#function_insert)'
- en: Returns the string *`str`*, with the substring beginning at position *`pos`*
    and *`len`* characters long replaced by the string *`newstr`*. Returns the original
    string if *`pos`* is not within the length of the string. Replaces the rest of
    the string from position *`pos`* if *`len`* is not within the length of the rest
    of the string. Returns `NULL` if any argument is `NULL`.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`str`*，从位置*`pos`*开始的子字符串，长度为*`len`*个字符，被字符串*`newstr`*替换。如果*`pos`*不在字符串长度范围内，则返回原始字符串。如果*`len`*不在剩余字符串的长度范围内，则从位置*`pos`*开始替换剩余字符串。如果任何参数为`NULL`，则返回`NULL`。
- en: '[PRE17]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This function is multibyte safe.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数支持多字节字符。
- en: '[`INSTR(*`str`*,*`substr`*)`](string-functions.html#function_instr)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INSTR(*`str`*,*`substr`*)`](string-functions.html#function_instr)'
- en: Returns the position of the first occurrence of substring *`substr`* in string
    *`str`*. This is the same as the two-argument form of [`LOCATE()`](string-functions.html#function_locate),
    except that the order of the arguments is reversed.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`str`*中子字符串*`substr`*第一次出现的位置。这与[`LOCATE()`](string-functions.html#function_locate)的两参数形式相同，只是参数的顺序相反。
- en: '[PRE18]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This function is multibyte safe, and is case-sensitive only if at least one
    argument is a binary string. If either argument is `NULL`, this functions returns
    `NULL`.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数支持多字节字符，仅在至少一个参数为二进制字符串时区分大小写。如果任一参数为`NULL`，此函数返回`NULL`。
- en: '[`LCASE(*`str`*)`](string-functions.html#function_lcase)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LCASE(*`str`*)`](string-functions.html#function_lcase)'
- en: '[`LCASE()`](string-functions.html#function_lcase) is a synonym for [`LOWER()`](string-functions.html#function_lower).'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`LCASE()`](string-functions.html#function_lcase) 是 [`LOWER()`](string-functions.html#function_lower)
    的同义词。'
- en: '`LCASE()` used in a view is rewritten as `LOWER()` when storing the view''s
    definition. (Bug #12844279)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在视图中使用的`LCASE()`在存储视图定义时会被重写为`LOWER()`。（Bug #12844279）'
- en: '[`LEFT(*`str`*,*`len`*)`](string-functions.html#function_left)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LEFT(*`str`*,*`len`*)`](string-functions.html#function_left)'
- en: Returns the leftmost *`len`* characters from the string *`str`*, or `NULL` if
    any argument is `NULL`.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`str`*中最左边的*`len`*个字符，如果任何参数为`NULL`，则返回`NULL`。
- en: '[PRE19]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This function is multibyte safe.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数支持多字节字符。
- en: '[`LENGTH(*`str`*)`](string-functions.html#function_length)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LENGTH(*`str`*)`](string-functions.html#function_length)'
- en: Returns the length of the string *`str`*, measured in bytes. A multibyte character
    counts as multiple bytes. This means that for a string containing five 2-byte
    characters, [`LENGTH()`](string-functions.html#function_length) returns `10`,
    whereas [`CHAR_LENGTH()`](string-functions.html#function_char-length) returns
    `5`. Returns `NULL` if *`str`* is `NULL`.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`str`*的长度，以字节为单位。多字节字符计为多个字节。这意味着对于包含五个2字节字符的字符串，[`LENGTH()`](string-functions.html#function_length)
    返回`10`，而[`CHAR_LENGTH()`](string-functions.html#function_char-length) 返回`5`。如果*`str`*为`NULL`，则返回`NULL`。
- en: '[PRE20]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The `Length()` OpenGIS spatial function is named [`ST_Length()`](gis-linestring-property-functions.html#function_st-length)
    in MySQL.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Length()` OpenGIS 空间函数在 MySQL 中被命名为[`ST_Length()`](gis-linestring-property-functions.html#function_st-length)。'
- en: '[`LOAD_FILE(*`file_name`*)`](string-functions.html#function_load-file)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LOAD_FILE(*`file_name`*)`](string-functions.html#function_load-file)'
- en: Reads the file and returns the file contents as a string. To use this function,
    the file must be located on the server host, you must specify the full path name
    to the file, and you must have the [`FILE`](privileges-provided.html#priv_file)
    privilege. The file must be readable by the server and its size less than [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)
    bytes. If the [`secure_file_priv`](server-system-variables.html#sysvar_secure_file_priv)
    system variable is set to a nonempty directory name, the file to be loaded must
    be located in that directory. (Prior to MySQL 8.0.17, the file must be readable
    by all, not just readable by the server.)
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 读取文件并将文件内容作为字符串返回。要使用此函数，文件必须位于服务器主机上，必须指定文件的完整路径名，并且必须具有[`FILE`](privileges-provided.html#priv_file)权限。文件必须可被服务器读取，且其大小必须小于[`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)字节。如果[`secure_file_priv`](server-system-variables.html#sysvar_secure_file_priv)系统变量设置为非空目录名称，则要加载的文件必须位于该目录中。（在MySQL
    8.0.17之前，文件必须可被所有人读取，而不仅仅是服务器可读取。）
- en: If the file does not exist or cannot be read because one of the preceding conditions
    is not satisfied, the function returns `NULL`.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果文件不存在或由于不满足前述条件之一而无法读取，则函数返回`NULL`。
- en: The [`character_set_filesystem`](server-system-variables.html#sysvar_character_set_filesystem)
    system variable controls interpretation of file names that are given as literal
    strings.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`character_set_filesystem`](server-system-variables.html#sysvar_character_set_filesystem)系统变量控制给定为文字字符串的文件名的解释。'
- en: '[PRE21]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[`LOCATE(*`substr`*,*`str`*)`](string-functions.html#function_locate), [`LOCATE(*`substr`*,*`str`*,*`pos`*)`](string-functions.html#function_locate)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LOCATE(*`substr`*,*`str`*)`](string-functions.html#function_locate), [`LOCATE(*`substr`*,*`str`*,*`pos`*)`](string-functions.html#function_locate)'
- en: The first syntax returns the position of the first occurrence of substring *`substr`*
    in string *`str`*. The second syntax returns the position of the first occurrence
    of substring *`substr`* in string *`str`*, starting at position *`pos`*. Returns
    `0` if *`substr`* is not in *`str`*. Returns `NULL` if any argument is `NULL`.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个语法返回子字符串*`substr`*在字符串*`str`*中第一次出现的位置。第二个语法返回子字符串*`substr`*在字符串*`str`*中从位置*`pos`*开始第一次出现的位置。如果*`str`*中没有*`substr`*，则返回`0`。如果任何参数为`NULL`，则返回`NULL`。
- en: '[PRE22]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This function is multibyte safe, and is case-sensitive only if at least one
    argument is a binary string.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数是多字节安全的，仅在至少一个参数为二进制字符串时区分大小写。
- en: '[`LOWER(*`str`*)`](string-functions.html#function_lower)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LOWER(*`str`*)`](string-functions.html#function_lower)'
- en: Returns the string *`str`* with all characters changed to lowercase according
    to the current character set mapping, or `NULL` if *`str`* is `NULL`. The default
    character set is `utf8mb4`.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回根据当前字符集映射将所有字符更改为小写的字符串*`str`*，如果*`str`*为`NULL`，则返回`NULL`。默认字符集为`utf8mb4`。
- en: '[PRE23]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[`LOWER()`](string-functions.html#function_lower) (and [`UPPER()`](string-functions.html#function_upper))
    are ineffective when applied to binary strings ([`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types")). To perform lettercase conversion of a binary string, first
    convert it to a nonbinary string using a character set appropriate for the data
    stored in the string:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当应用于二进制字符串（[`BINARY`](binary-varbinary.html "13.3.3 二进制和VARBINARY类型"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 二进制和VARBINARY类型"), [`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")）时，[`LOWER()`](string-functions.html#function_lower)（和[`UPPER()`](string-functions.html#function_upper)）是无效的。要对二进制字符串执行大小写转换，首先使用适合存储在字符串中的数据的字符集将其转换为非二进制字符串：
- en: '[PRE24]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: For collations of Unicode character sets, [`LOWER()`](string-functions.html#function_lower)
    and [`UPPER()`](string-functions.html#function_upper) work according to the Unicode
    Collation Algorithm (UCA) version in the collation name, if there is one, and
    UCA 4.0.0 if no version is specified. For example, `utf8mb4_0900_ai_ci` and `utf8mb3_unicode_520_ci`
    work according to UCA 9.0.0 and 5.2.0, respectively, whereas `utf8mb3_unicode_ci`
    works according to UCA 4.0.0\. See [Section 12.10.1, “Unicode Character Sets”](charset-unicode-sets.html
    "12.10.1 Unicode Character Sets").
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Unicode字符集的排序规则，如果在排序规则名称中指定了Unicode排序算法（UCA）版本，则[`LOWER()`](string-functions.html#function_lower)和[`UPPER()`](string-functions.html#function_upper)将按照该版本的UCA工作，如果未指定版本，则按照UCA
    4.0.0工作。例如，`utf8mb4_0900_ai_ci`和`utf8mb3_unicode_520_ci`分别按照UCA 9.0.0和5.2.0工作，而`utf8mb3_unicode_ci`按照UCA
    4.0.0工作。参见[第12.10.1节，“Unicode字符集”](charset-unicode-sets.html "12.10.1 Unicode字符集")。
- en: This function is multibyte safe.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数是多字节安全的。
- en: '`LCASE()` used within views is rewritten as `LOWER()`.'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在视图中使用的`LCASE()`被重写为`LOWER()`。
- en: '[`LPAD(*`str`*,*`len`*,*`padstr`*)`](string-functions.html#function_lpad)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LPAD(*`str`*,*`len`*,*`padstr`*)`](string-functions.html#function_lpad)'
- en: Returns the string *`str`*, left-padded with the string *`padstr`* to a length
    of *`len`* characters. If *`str`* is longer than *`len`*, the return value is
    shortened to *`len`* characters.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回左填充了字符串*`padstr`*到长度为*`len`*字符的字符串*`str`*。如果*`str`*比*`len`*长，则返回值被缩短为*`len`*个字符。
- en: '[PRE25]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Returns `NULL` if any of its arguments are `NULL`.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果其任何参数为`NULL`，则返回`NULL`。
- en: '[`LTRIM(*`str`*)`](string-functions.html#function_ltrim)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LTRIM(*`str`*)`](string-functions.html#function_ltrim)'
- en: Returns the string *`str`* with leading space characters removed. Returns `NULL`
    if *`str`* is `NULL`.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回去除前导空格字符的字符串*`str`*。如果*`str`*为`NULL`，则返回`NULL`。
- en: '[PRE26]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This function is multibyte safe.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数是多字节安全的。
- en: '[`MAKE_SET(*`bits`*,*`str1`*,*`str2`*,...)`](string-functions.html#function_make-set)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MAKE_SET(*`bits`*,*`str1`*,*`str2`*,...)`](string-functions.html#function_make-set)'
- en: Returns a set value (a string containing substrings separated by `,` characters)
    consisting of the strings that have the corresponding bit in *`bits`* set. *`str1`*
    corresponds to bit 0, *`str2`* to bit 1, and so on. `NULL` values in *`str1`*,
    *`str2`*, `...` are not appended to the result.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回一个集合值（一个包含由`,`字符分隔的子字符串的字符串），其中包含具有对应位在*`bits`*中设置的字符串。*`str1`*对应于位0，*`str2`*对应于位1���依此类推。*`str1`*、*`str2`*、`...`中的`NULL`值不会附加到结果中。
- en: '[PRE27]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[`MID(*`str`*,*`pos`*,*`len`*)`](string-functions.html#function_mid)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MID(*`str`*,*`pos`*,*`len`*)`](string-functions.html#function_mid)'
- en: '[`MID(*`str`*,*`pos`*,*`len`*)`](string-functions.html#function_mid) is a synonym
    for [`SUBSTRING(*`str`*,*`pos`*,*`len`*)`](string-functions.html#function_substring).'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MID(*`str`*,*`pos`*,*`len`*)`](string-functions.html#function_mid)是[`SUBSTRING(*`str`*,*`pos`*,*`len`*)`](string-functions.html#function_substring)的同义词。'
- en: '[`OCT(*`N`*)`](string-functions.html#function_oct)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`OCT(*`N`*)`](string-functions.html#function_oct)'
- en: Returns a string representation of the octal value of *`N`*, where *`N`* is
    a longlong ([`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")) number. This is equivalent
    to [`CONV(*`N`*,10,8)`](mathematical-functions.html#function_conv). Returns `NULL`
    if *`N`* is `NULL`.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`N`*的八进制值的字符串表示，其中*`N`*是一个长长整型([`BIGINT`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"))数字。这等同于[`CONV(*`N`*,10,8)`](mathematical-functions.html#function_conv)。如果*`N`*为`NULL`，则返回`NULL`。
- en: '[PRE28]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[`OCTET_LENGTH(*`str`*)`](string-functions.html#function_octet-length)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`OCTET_LENGTH(*`str`*)`](string-functions.html#function_octet-length)'
- en: '[`OCTET_LENGTH()`](string-functions.html#function_octet-length) is a synonym
    for [`LENGTH()`](string-functions.html#function_length).'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`OCTET_LENGTH()`](string-functions.html#function_octet-length)是[`LENGTH()`](string-functions.html#function_length)的同义词。'
- en: '[`ORD(*`str`*)`](string-functions.html#function_ord)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ORD(*`str`*)`](string-functions.html#function_ord)'
- en: 'If the leftmost character of the string *`str`* is a multibyte character, returns
    the code for that character, calculated from the numeric values of its constituent
    bytes using this formula:'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果字符串*`str`*的最左边字符是一个多字节字符，则返回该字符的代码，使用以下公式从其组成字节的数值计算：
- en: '[PRE29]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If the leftmost character is not a multibyte character, [`ORD()`](string-functions.html#function_ord)
    returns the same value as the [`ASCII()`](string-functions.html#function_ascii)
    function. The function returns `NULL` if *`str`* is `NULL`.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果最左边的字符不是一个多字节字符，[`ORD()`](string-functions.html#function_ord)返回与[`ASCII()`](string-functions.html#function_ascii)函数相同的值。如果*`str`*为`NULL`，则函数返回`NULL`。
- en: '[PRE30]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[`POSITION(*`substr`* IN *`str`*)`](string-functions.html#function_position)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`POSITION(*`substr`* IN *`str`*)`](string-functions.html#function_position)'
- en: '[`POSITION(*`substr`* IN *`str`*)`](string-functions.html#function_position)
    is a synonym for [`LOCATE(*`substr`*,*`str`*)`](string-functions.html#function_locate).'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`POSITION(*`substr`* IN *`str`*)`](string-functions.html#function_position)是[`LOCATE(*`substr`*,*`str`*)`](string-functions.html#function_locate)的同义词。'
- en: '[`QUOTE(*`str`*)`](string-functions.html#function_quote)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`QUOTE(*`str`*)`](string-functions.html#function_quote)'
- en: Quotes a string to produce a result that can be used as a properly escaped data
    value in an SQL statement. The string is returned enclosed by single quotation
    marks and with each instance of backslash (`\`), single quote (`'`), ASCII `NUL`,
    and Control+Z preceded by a backslash. If the argument is `NULL`, the return value
    is the word “NULL” without enclosing single quotation marks.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用一个字符串以生成一个结果，该结果可以作为SQL语句中的正确转义数据值使用。返回的字符串用单引号括起来，并且每个反斜杠(`\`)、单引号(`'`)、ASCII
    `NUL`和Control+Z的实例前面都有一个反斜杠。如果参数为`NULL`，返回值是不用单引号括起来的单词“NULL”。
- en: '[PRE31]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: For comparison, see the quoting rules for literal strings and within the C API
    in [Section 11.1.1, “String Literals”](string-literals.html "11.1.1 String Literals"),
    and [mysql_real_escape_string_quote()](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html).
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关比较，请参阅[第11.1.1节，“字符串文字”](string-literals.html "11.1.1 字符串文字")中的文字引用规则以及C API中的[mysql_real_escape_string_quote()](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html)。
- en: '[`REPEAT(*`str`*,*`count`*)`](string-functions.html#function_repeat)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REPEAT(*`str`*,*`count`*)`](string-functions.html#function_repeat)'
- en: Returns a string consisting of the string *`str`* repeated *`count`* times.
    If *`count`* is less than 1, returns an empty string. Returns `NULL` if *`str`*
    or *`count`* is `NULL`.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回由字符串*`str`*重复*`count`*次组成的字符串。如果*`count`*小于1，则返回空字符串。如果*`str`*或*`count`*是`NULL`，则返回`NULL`。
- en: '[PRE32]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[`REPLACE(*`str`*,*`from_str`*,*`to_str`*)`](string-functions.html#function_replace)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REPLACE(*`str`*,*`from_str`*,*`to_str`*)`](string-functions.html#function_replace)'
- en: Returns the string *`str`* with all occurrences of the string *`from_str`* replaced
    by the string *`to_str`*. [`REPLACE()`](string-functions.html#function_replace)
    performs a case-sensitive match when searching for *`from_str`*.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回将所有出现的字符串*`from_str`*替换为字符串*`to_str`*的字符串*`str`*。在搜索*`from_str`*时，[`REPLACE()`](string-functions.html#function_replace)执行区分大小写的匹配。
- en: '[PRE33]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This function is multibyte safe. It returns `NULL` if any of its arguments are
    `NULL`.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数是多字节安全的。如果任何参数是`NULL`，则返回`NULL`。
- en: '[`REVERSE(*`str`*)`](string-functions.html#function_reverse)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REVERSE(*`str`*)`](string-functions.html#function_reverse)'
- en: Returns the string *`str`* with the order of the characters reversed, or `NULL`
    if *`str`* is `NULL`.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`str`*的字符顺序颠倒，如果*`str`*是`NULL`，则返回`NULL`。
- en: '[PRE34]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This function is multibyte safe.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数是多字节安全的。
- en: '[`RIGHT(*`str`*,*`len`*)`](string-functions.html#function_right)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RIGHT(*`str`*,*`len`*)`](string-functions.html#function_right)'
- en: Returns the rightmost *`len`* characters from the string *`str`*, or `NULL`
    if any argument is `NULL`.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`str`*中最右边的*`len`*个字符，如果任何参数���`NULL`，则返回`NULL`。
- en: '[PRE35]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This function is multibyte safe.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数是多字节安全的。
- en: '[`RPAD(*`str`*,*`len`*,*`padstr`*)`](string-functions.html#function_rpad)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RPAD(*`str`*,*`len`*,*`padstr`*)`](string-functions.html#function_rpad)'
- en: Returns the string *`str`*, right-padded with the string *`padstr`* to a length
    of *`len`* characters. If *`str`* is longer than *`len`*, the return value is
    shortened to *`len`* characters. If *`str`*, *`padstr`*, or *`len`* is `NULL`,
    the function returns `NULL`.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`str`*，右侧用字符串*`padstr`*填充到长度为*`len`*个字符。如果*`str`*比*`len`*长，则返回值被缩短为*`len`*个字符。如果*`str`*、*`padstr`*或*`len`*是`NULL`，则函数返回`NULL`。
- en: '[PRE36]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This function is multibyte safe.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数是多字节安全的。
- en: '[`RTRIM(*`str`*)`](string-functions.html#function_rtrim)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RTRIM(*`str`*)`](string-functions.html#function_rtrim)'
- en: Returns the string *`str`* with trailing space characters removed.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回删除尾随空格字符的字符串*`str`*。
- en: '[PRE37]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This function is multibyte safe, and returns `NULL` if *`str`* is `NULL`.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数是多字节安全的，如果*`str`*是`NULL`，则返回`NULL`。
- en: '[`SOUNDEX(*`str`*)`](string-functions.html#function_soundex)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SOUNDEX(*`str`*)`](string-functions.html#function_soundex)'
- en: Returns a soundex string from *`str`*, or `NULL` if *`str`* is `NULL`. Two strings
    that sound almost the same should have identical soundex strings. A standard soundex
    string is four characters long, but the [`SOUNDEX()`](string-functions.html#function_soundex)
    function returns an arbitrarily long string. You can use [`SUBSTRING()`](string-functions.html#function_substring)
    on the result to get a standard soundex string. All nonalphabetic characters in
    *`str`* are ignored. All international alphabetic characters outside the A-Z range
    are treated as vowels.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从*`str`*返回一个soundex字符串，如果*`str`*是`NULL`，则返回`NULL`。两个听起来几乎相同的字符串应该具有相同的soundex字符串。标准的soundex字符串长度为四个字符，但[`SOUNDEX()`](string-functions.html#function_soundex)函数返回一个任意长的字符串。您可以对结果使用[`SUBSTRING()`](string-functions.html#function_substring)来获取标准的soundex字符串。*`str`*中的所有非字母字符都将被忽略。所有A-Z范围之外的国际字母字符都被视为元音。
- en: Important
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要
- en: 'When using [`SOUNDEX()`](string-functions.html#function_soundex), you should
    be aware of the following limitations:'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用[`SOUNDEX()`](string-functions.html#function_soundex)时，您应该注意以下限制：
- en: This function, as currently implemented, is intended to work well with strings
    that are in the English language only. Strings in other languages may not produce
    reliable results.
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此函数目前的实现仅适用于英语语言的字符串。其他语言的字符串可能产生不可靠的结果。
- en: 'This function is not guaranteed to provide consistent results with strings
    that use multibyte character sets, including `utf-8`. See Bug #22638 for more
    information.'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '不能保证此函数与使用多字节字符集（包括`utf-8`）的字符串提供一致的结果。有关更多信息，请参见Bug #22638。'
- en: '[PRE38]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This function implements the original Soundex algorithm, not the more popular
    enhanced version (also described by D. Knuth). The difference is that original
    version discards vowels first and duplicates second, whereas the enhanced version
    discards duplicates first and vowels second.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数实现原始Soundex算法，而不是更流行的增强版本（也由D. Knuth描述）。区别在于原始版本首先丢弃元音，其次是重复字符，而增强版本首先丢弃重复字符，其次是元音。
- en: '[`*`expr1`* SOUNDS LIKE *`expr2`*`](string-functions.html#operator_sounds-like)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`expr1`* SOUNDS LIKE *`expr2`*`](string-functions.html#operator_sounds-like)'
- en: This is the same as [`SOUNDEX(*`expr1`*) = SOUNDEX(*`expr2`*)`](string-functions.html#function_soundex).
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这与[`SOUNDEX(*`expr1`*) = SOUNDEX(*`expr2`*)`](string-functions.html#function_soundex)相同。
- en: '[`SPACE(*`N`*)`](string-functions.html#function_space)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SPACE(*`N`*)`](string-functions.html#function_space)'
- en: Returns a string consisting of *`N`* space characters, or `NULL` if *`N`* is
    `NULL`.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回由*`N`*个空格字符组成的字符串，如果*`N`*为`NULL`，则返回`NULL`。
- en: '[PRE39]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[`SUBSTR(*`str`*,*`pos`*)`](string-functions.html#function_substr), [`SUBSTR(*`str`*
    FROM *`pos`*)`](string-functions.html#function_substr), [`SUBSTR(*`str`*,*`pos`*,*`len`*)`](string-functions.html#function_substr),
    [`SUBSTR(*`str`* FROM *`pos`* FOR *`len`*)`](string-functions.html#function_substr)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SUBSTR(*`str`*,*`pos`*)`](string-functions.html#function_substr), [`SUBSTR(*`str`*
    FROM *`pos`*)`](string-functions.html#function_substr), [`SUBSTR(*`str`*,*`pos`*,*`len`*)`](string-functions.html#function_substr),
    [`SUBSTR(*`str`* FROM *`pos`* FOR *`len`*)`](string-functions.html#function_substr)'
- en: '[`SUBSTR()`](string-functions.html#function_substr) is a synonym for [`SUBSTRING()`](string-functions.html#function_substring).'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SUBSTR()`](string-functions.html#function_substr)是[`SUBSTRING()`](string-functions.html#function_substring)的同义词。'
- en: '[`SUBSTRING(*`str`*,*`pos`*)`](string-functions.html#function_substring), [`SUBSTRING(*`str`*
    FROM *`pos`*)`](string-functions.html#function_substring), [`SUBSTRING(*`str`*,*`pos`*,*`len`*)`](string-functions.html#function_substring),
    [`SUBSTRING(*`str`* FROM *`pos`* FOR *`len`*)`](string-functions.html#function_substring)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SUBSTRING(*`str`*,*`pos`*)`](string-functions.html#function_substring), [`SUBSTRING(*`str`*
    FROM *`pos`*)`](string-functions.html#function_substring), [`SUBSTRING(*`str`*,*`pos`*,*`len`*)`](string-functions.html#function_substring),
    [`SUBSTRING(*`str`* FROM *`pos`* FOR *`len`*)`](string-functions.html#function_substring)'
- en: The forms without a *`len`* argument return a substring from string *`str`*
    starting at position *`pos`*. The forms with a *`len`* argument return a substring
    *`len`* characters long from string *`str`*, starting at position *`pos`*. The
    forms that use `FROM` are standard SQL syntax. It is also possible to use a negative
    value for *`pos`*. In this case, the beginning of the substring is *`pos`* characters
    from the end of the string, rather than the beginning. A negative value may be
    used for *`pos`* in any of the forms of this function. A value of 0 for *`pos`*
    returns an empty string.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有*`len`*参数的形式返回从位置*`pos`*开始的字符串*`str`*的子字符串。有*`len`*参数的形式返回从位置*`pos`*开始，长度为*`len`*的子字符串。使用`FROM`的形式是标准的SQL语法。也可以对*`pos`*使用负值。在这种情况下，子字符串的开头是距离字符串末尾*`pos`*个字符，而不是距离开头。在这个函数的任何形式中，*`pos`*都可以使用负值。*`pos`*的值为0时返回空字符串。
- en: For all forms of [`SUBSTRING()`](string-functions.html#function_substring),
    the position of the first character in the string from which the substring is
    to be extracted is reckoned as `1`.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`SUBSTRING()`](string-functions.html#function_substring)的所有形式，要提取子字符串的字符串中第一个字符的位置被认为是`1`。
- en: '[PRE40]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This function is multibyte safe. It returns `NULL` if any of its arguments are
    `NULL`.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数是多字节安全的。如果其任何参数为`NULL`，则返回`NULL`。
- en: If *`len`* is less than 1, the result is the empty string.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`len`*小于1，则结果为空字符串。
- en: '[`SUBSTRING_INDEX(*`str`*,*`delim`*,*`count`*)`](string-functions.html#function_substring-index)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SUBSTRING_INDEX(*`str`*,*`delim`*,*`count`*)`](string-functions.html#function_substring-index)'
- en: Returns the substring from string *`str`* before *`count`* occurrences of the
    delimiter *`delim`*. If *`count`* is positive, everything to the left of the final
    delimiter (counting from the left) is returned. If *`count`* is negative, everything
    to the right of the final delimiter (counting from the right) is returned. [`SUBSTRING_INDEX()`](string-functions.html#function_substring-index)
    performs a case-sensitive match when searching for *`delim`*.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`str`*中在定界符*`delim`*出现*`count`*次之前的子字符串。如果*`count`*为正数，则返回最终定界符（从左边计数）左侧的所有内容。如果*`count`*为负数，则返回最终定界符（从右边计数）右侧的所有内容。在搜索*`delim`*时，[`SUBSTRING_INDEX()`](string-functions.html#function_substring-index)执行区分大小写的匹配。
- en: '[PRE41]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This function is multibyte safe.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数是多字节安全的。
- en: '`SUBSTRING_INDEX()` returns `NULL` if any of its arguments are `NULL`.'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`SUBSTRING_INDEX()`的任何参数为`NULL`，则返回`NULL`。
- en: '[`TO_BASE64(*`str`*)`](string-functions.html#function_to-base64)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TO_BASE64(*`str`*)`](string-functions.html#function_to-base64)'
- en: Converts the string argument to base-64 encoded form and returns the result
    as a character string with the connection character set and collation. If the
    argument is not a string, it is converted to a string before conversion takes
    place. The result is `NULL` if the argument is `NULL`. Base-64 encoded strings
    can be decoded using the [`FROM_BASE64()`](string-functions.html#function_from-base64)
    function.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串参数转换为base-64编码形式，并将结果作为具有连接字符集和排序规则的字符字符串返回。如果参数不是字符串，则在进行转换之前将其转换为字符串。如果参数为`NULL`，则结果为`NULL`。可以使用[`FROM_BASE64()`](string-functions.html#function_from-base64)函数解码base-64编码的字符串。
- en: '[PRE42]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Different base-64 encoding schemes exist. These are the encoding and decoding
    rules used by [`TO_BASE64()`](string-functions.html#function_to-base64) and [`FROM_BASE64()`](string-functions.html#function_from-base64):'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 存在不同的base-64编码方案。这些是[`TO_BASE64()`](string-functions.html#function_to-base64)和[`FROM_BASE64()`](string-functions.html#function_from-base64)使用的编码和解码规则：
- en: The encoding for alphabet value 62 is `'+'`.
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字母值为62的编码为`'+'`。
- en: The encoding for alphabet value 63 is `'/'`.
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字母值为63的编码为`'/'`。
- en: Encoded output consists of groups of 4 printable characters. Each 3 bytes of
    the input data are encoded using 4 characters. If the last group is incomplete,
    it is padded with `'='` characters to a length of 4.
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码输出由4个可打印字符组成。每3个字节的输入数据使用4个字符进行编码。如果最后一组不完整，则使用`'='`字符填充至长度为4。
- en: A newline is added after each 76 characters of encoded output to divide long
    output into multiple lines.
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每76个编码输出字符后添加一个换行符，将长输出分成多行。
- en: Decoding recognizes and ignores newline, carriage return, tab, and space.
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解码识别并忽略换行符、回车符、制表符和空格。
- en: '[`TRIM([{BOTH | LEADING | TRAILING} [*`remstr`*] FROM] *`str`*)`](string-functions.html#function_trim),
    [`TRIM([*`remstr`* FROM] *`str`*)`](string-functions.html#function_trim)'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TRIM([{BOTH | LEADING | TRAILING} [*`remstr`*] FROM] *`str`*)`](string-functions.html#function_trim),
    [`TRIM([*`remstr`* FROM] *`str`*)`](string-functions.html#function_trim)'
- en: Returns the string *`str`* with all *`remstr`* prefixes or suffixes removed.
    If none of the specifiers `BOTH`, `LEADING`, or `TRAILING` is given, `BOTH` is
    assumed. *`remstr`* is optional and, if not specified, spaces are removed.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回去除所有*`remstr`*前缀或后缀的字符串*`str`*。如果未给出`BOTH`、`LEADING`或`TRAILING`中的任何一个标识符，则假定为`BOTH`。*`remstr`*是可选的，如果未指定，则删除空格。
- en: '[PRE43]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This function is multibyte safe. It returns `NULL` if any of its arguments are
    `NULL`.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数是多字节安全的。如果其任何参数为`NULL`，则返回`NULL`。
- en: '[`UCASE(*`str`*)`](string-functions.html#function_ucase)'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UCASE(*`str`*)`](string-functions.html#function_ucase)'
- en: '[`UCASE()`](string-functions.html#function_ucase) is a synonym for [`UPPER()`](string-functions.html#function_upper).'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`UCASE()`](string-functions.html#function_ucase)是[`UPPER()`](string-functions.html#function_upper)的同义词。'
- en: '`UCASE()` used within views is rewritten as `UPPER()`.'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在视图中使用的`UCASE()`会被重写为`UPPER()`。
- en: '[`UNHEX(*`str`*)`](string-functions.html#function_unhex)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UNHEX(*`str`*)`](string-functions.html#function_unhex)'
- en: For a string argument *`str`*, [`UNHEX(*`str`*)`](string-functions.html#function_unhex)
    interprets each pair of characters in the argument as a hexadecimal number and
    converts it to the byte represented by the number. The return value is a binary
    string.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于字符串参数*`str`*，[`UNHEX(*`str`*)`](string-functions.html#function_unhex)将参数中的每对字符解释为十六进制数，并将其转换为由该数字表示的字节。返回值是一个二进制字符串。
- en: '[PRE44]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The characters in the argument string must be legal hexadecimal digits: `''0''`
    .. `''9''`, `''A''` .. `''F''`, `''a''` .. `''f''`. If the argument contains any
    nonhexadecimal digits, or is itself `NULL`, the result is `NULL`:'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数字符串中的字符必须是合法的十六进制数字：`'0'` .. `'9'`，`'A'` .. `'F'`，`'a'` .. `'f'`。如果参数包含任何非十六进制数字，或者本身为`NULL`，则结果为`NULL`：
- en: '[PRE45]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: A `NULL` result can also occur if the argument to [`UNHEX()`](string-functions.html#function_unhex)
    is a [`BINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types")
    column, because values are padded with `0x00` bytes when stored but those bytes
    are not stripped on retrieval. For example, `'41'` is stored into a `CHAR(3)`
    column as `'41 '` and retrieved as `'41'` (with the trailing pad space stripped),
    so [`UNHEX()`](string-functions.html#function_unhex) for the column value returns
    `X'41'`. By contrast, `'41'` is stored into a `BINARY(3)` column as `'41\0'` and
    retrieved as `'41\0'` (with the trailing pad `0x00` byte not stripped). `'\0'`
    is not a legal hexadecimal digit, so [`UNHEX()`](string-functions.html#function_unhex)
    for the column value returns `NULL`.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果[`UNHEX()`](string-functions.html#function_unhex)的参数是[`BINARY`](binary-varbinary.html
    "13.3.3 二进制和VARBINARY类型")列，则还可能出现`NULL`结果，因为存储时值会使用`0x00`字节进行填充，但在检索时这些字节不会被去除。例如，`'41'`被存储到`CHAR(3)`列中为`'41 '`，检索时为`'41'`（去除了尾随填充空格），因此列值的[`UNHEX()`](string-functions.html#function_unhex)返回`X'41'`。相比之下，`'41'`被存储到`BINARY(3)`列中为`'41\0'`，检索时为`'41\0'`（尾随填充`0x00`字节未被去除）。`'\0'`不是合法的十六进制数字，因此列值的[`UNHEX()`](string-functions.html#function_unhex)返回`NULL`。
- en: For a numeric argument *`N`*, the inverse of [`HEX(*`N`*)`](string-functions.html#function_hex)
    is not performed by [`UNHEX()`](string-functions.html#function_unhex). Use [`CONV(HEX(*`N`*),16,10)`](mathematical-functions.html#function_conv)
    instead. See the description of [`HEX()`](string-functions.html#function_hex).
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于数值参数*`N`*，[`UNHEX()`](string-functions.html#function_unhex)不执行[`HEX(*`N`*)`](string-functions.html#function_hex)的逆操作。请改用[`CONV(HEX(*`N`*),16,10)`](mathematical-functions.html#function_conv)。请参阅[`HEX()`](string-functions.html#function_hex)的描述。
- en: If [`UNHEX()`](string-functions.html#function_unhex) is invoked from within
    the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") client,
    binary strings display using hexadecimal notation, depending on the value of the
    [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex). For
    more information about that option, see [Section 6.5.1, “mysql — The MySQL Command-Line
    Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — MySQL命令行客户端")客户端中调用[`UNHEX()`](string-functions.html#function_unhex)，二进制字符串将以十六进制表示形式显示，具体取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参阅[第6.5.1节，“mysql
    — MySQL命令行客户端”](mysql.html "6.5.1 mysql — MySQL命令行客户端")。
- en: '[`UPPER(*`str`*)`](string-functions.html#function_upper)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UPPER(*`str`*)`](string-functions.html#function_upper)'
- en: Returns the string *`str`* with all characters changed to uppercase according
    to the current character set mapping, or `NULL` if *`str`* is `NULL`. The default
    character set is `utf8mb4`.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回根据当前字符集映射将所有字符更改为大写的字符串*`str`*，如果*`str`*为`NULL`则返回`NULL`。默认字符集为`utf8mb4`。
- en: '[PRE46]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: See the description of [`LOWER()`](string-functions.html#function_lower) for
    information that also applies to [`UPPER()`](string-functions.html#function_upper).
    This included information about how to perform lettercase conversion of binary
    strings ([`BINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types"),
    [`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types"),
    [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")) for which these functions
    are ineffective, and information about case folding for Unicode character sets.
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关如何对二进制字符串（[`BINARY`](binary-varbinary.html "13.3.3 二进制和VARBINARY类型"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 二进制和VARBINARY类型"), [`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")）执行大小写转换以及有关Unicode字符集的大小写折叠的信息，请参阅[`LOWER()`](string-functions.html#function_lower)的描述，这些信息也适用于[`UPPER()`](string-functions.html#function_upper)。
- en: This function is multibyte safe.
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数支持多字节。
- en: '`UCASE()` used within views is rewritten as `UPPER()`.'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在视图中使用的`UCASE()`将被重写为`UPPER()`。
- en: '[`WEIGHT_STRING(*`str`* [AS {CHAR|BINARY}(*`N`*)] [*`flags`*])`](string-functions.html#function_weight-string)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`WEIGHT_STRING(*`str`* [AS {CHAR|BINARY}(*`N`*)] [*`flags`*])`](string-functions.html#function_weight-string)'
- en: 'This function returns the weight string for the input string. The return value
    is a binary string that represents the comparison and sorting value of the string,
    or `NULL` if the argument is `NULL`. It has these properties:'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数返回输入字符串的权重字符串。返回值是一个二进制字符串，表示字符串的比较和排序值，如果参数为`NULL`则返回`NULL`。具有以下属性：
- en: If [`WEIGHT_STRING(*`str1`*)`](string-functions.html#function_weight-string)
    = [`WEIGHT_STRING(*`str2`*)`](string-functions.html#function_weight-string), then
    `*`str1`* = *`str2`*` (*`str1`* and *`str2`* are considered equal)
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 [`WEIGHT_STRING(*`str1`*)`](string-functions.html#function_weight-string)
    = [`WEIGHT_STRING(*`str2`*)`](string-functions.html#function_weight-string)，那么
    `*`str1`* = *`str2`*`（*`str1`* 和 *`str2`* 被视为相等）
- en: If [`WEIGHT_STRING(*`str1`*)`](string-functions.html#function_weight-string)
    < [`WEIGHT_STRING(*`str2`*)`](string-functions.html#function_weight-string), then
    `*`str1`* < *`str2`*` (*`str1`* sorts before *`str2`*)
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 [`WEIGHT_STRING(*`str1`*)`](string-functions.html#function_weight-string)
    < [`WEIGHT_STRING(*`str2`*)`](string-functions.html#function_weight-string)，那么
    `*`str1`* < *`str2`*`（*`str1`* 在 *`str2`* 之前排序）
- en: '[`WEIGHT_STRING()`](string-functions.html#function_weight-string) is a debugging
    function intended for internal use. Its behavior can change without notice between
    MySQL versions. It can be used for testing and debugging of collations, especially
    if you are adding a new collation. See [Section 12.14, “Adding a Collation to
    a Character Set”](adding-collation.html "12.14 Adding a Collation to a Character
    Set").'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`WEIGHT_STRING()`](string-functions.html#function_weight-string) 是一个用于内部调试的函数。其行为可能会在
    MySQL 版本之间发生变化而无需通知。它可用于测试和调试排序规则，特别是在添加新的排序规则时。参见 [第 12.14 节，“向字符集添加排序规则”](adding-collation.html
    "12.14 Adding a Collation to a Character Set")。'
- en: This list briefly summarizes the arguments. More details are given in the discussion
    following the list.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个列表简要总结了参数。更多细节在列表后的讨论中给出。
- en: '*`str`*: The input string expression.'
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`str`*：输入字符串表达式。'
- en: '`AS` clause: Optional; cast the input string to a given type and length.'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AS` 子句：可选；将输入字符串转换为给定类型和长度。'
- en: '*`flags`*: Optional; unused.'
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`flags`*：可选；未使用。'
- en: The input string, *`str`*, is a string expression. If the input is a nonbinary
    (character) string such as a [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), or [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") value, the return value contains the collation
    weights for the string. If the input is a binary (byte) string such as a [`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), or [`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types") value, the return value is the same as the input (the weight
    for each byte in a binary string is the byte value). If the input is `NULL`, [`WEIGHT_STRING()`](string-functions.html#function_weight-string)
    returns `NULL`.
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入字符串 *`str`* 是一个字符串表达式。如果输入是非二进制（字符）字符串，如 [`CHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types")、[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")
    或 [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") 值，则返回值包含字符串的排序规则权重。如果输入是二进制（字节）字符串，如
    [`BINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types")、[`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") 或 [`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types") 值，则返回值与输入相同（二进制字符串中每个字节的权重是字节值）。如果输入为 `NULL`，[`WEIGHT_STRING()`](string-functions.html#function_weight-string)
    返回 `NULL`。
- en: 'Examples:'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE47]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The preceding examples use [`HEX()`](string-functions.html#function_hex) to
    display the [`WEIGHT_STRING()`](string-functions.html#function_weight-string)
    result. Because the result is a binary value, [`HEX()`](string-functions.html#function_hex)
    can be especially useful when the result contains nonprinting values, to display
    it in printable form:'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的示例使用 [`HEX()`](string-functions.html#function_hex) 来显示 [`WEIGHT_STRING()`](string-functions.html#function_weight-string)
    的结果。因为结果是一个二进制值，当结果包含不可打印的值时，[`HEX()`](string-functions.html#function_hex) 尤其有用，可以将其显示为可打印形式：
- en: '[PRE51]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: For non-`NULL` return values, the data type of the value is [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") if its length is within the maximum length
    for [`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types"),
    otherwise the data type is [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types").
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于非`NULL`的返回值，如果值的长度在 [`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY
    and VARBINARY Types") 的最大长度内，则值的数据类型为 [`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types")，否则数据类型为 [`BLOB`](blob.html "13.3.4 The BLOB and TEXT
    Types")。
- en: 'The `AS` clause may be given to cast the input string to a nonbinary or binary
    string and to force it to a given length:'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AS` 子句可以用于将输入字符串转换为非二进制或二进制字符串，并强制其达到给定长度：'
- en: '`AS CHAR(*`N`*)` casts the string to a nonbinary string and pads it on the
    right with spaces to a length of *`N`* characters. *`N`* must be at least 1\.
    If *`N`* is less than the length of the input string, the string is truncated
    to *`N`* characters. No warning occurs for truncation.'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AS CHAR(*`N`*)` 将字符串转换为非二进制字符串，并在右侧用空格填充到长度为 *`N`* 个字符。*`N`* 必须至少为 1。如果 *`N`*
    小于输入字符串的长度，则字符串将被截断为 *`N`* 个字符。截断不会发出警告。'
- en: '`AS BINARY(*`N`*)` is similar but casts the string to a binary string, *`N`*
    is measured in bytes (not characters), and padding uses `0x00` bytes (not spaces).'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AS BINARY(*`N`*)` 类似，但将字符串转换为二进制字符串，*`N`* 以字节为单位（而非字符），填充使用 `0x00` 字节（而非空格）。'
- en: '[PRE52]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The *`flags`* clause currently is unused.
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`flags`* 子句目前未被使用。'
- en: If [`WEIGHT_STRING()`](string-functions.html#function_weight-string) is invoked
    from within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端中调用[`WEIGHT_STRING()`](string-functions.html#function_weight-string)，二进制字符串将以十六进制表示，具体取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参见[第
    6.5.1 节，“mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The
    MySQL Command-Line Client")。
