- en: 14.20.2 Window Function Concepts and Syntax
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.20.2 窗口函数概念和语法
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html](https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html](https://dev.mysql.com/doc/refman/8.0/en/window-functions-usage.html)
- en: 'This section describes how to use window functions. Examples use the same sales
    information data set as found in the discussion of the [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    function in [Section 14.19.2, “GROUP BY Modifiers”](group-by-modifiers.html "14.19.2 GROUP
    BY Modifiers"):'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了如何使用窗口函数。示例使用与[第14.19.2节，“GROUP BY修饰符”](group-by-modifiers.html "14.19.2 GROUP
    BY修饰符")中的[`GROUPING()`](miscellaneous-functions.html#function_grouping)函数讨论中找到的相同销售信息数据集：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A window function performs an aggregate-like operation on a set of query rows.
    However, whereas an aggregate operation groups query rows into a single result
    row, a window function produces a result for each query row:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数在一组查询行上执行类似聚合的操作。然而，聚合操作将查询行分组为单个结果行，而窗口函数为每个查询行产生一个结果：
- en: The row for which function evaluation occurs is called the current row.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数评估发生的行称为当前行。
- en: The query rows related to the current row over which function evaluation occurs
    comprise the window for the current row.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与函数评估相关的当前行的查询行构成了当前行的窗口。
- en: 'For example, using the sales information table, these two queries perform aggregate
    operations that produce a single global sum for all rows taken as a group, and
    sums grouped per country:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用销售信息表，这两个查询执行产生所有行作为一组的单个全局总和的聚合操作，以及按国家分组的总和：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'By contrast, window operations do not collapse groups of query rows to a single
    output row. Instead, they produce a result for each row. Like the preceding queries,
    the following query uses [`SUM()`](aggregate-functions.html#function_sum), but
    this time as a window function:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，窗口操作不会将查询行的组合折叠为单个输出行。相反，它们为每一行产生一个结果。与前面的查询一样，以下查询使用[`SUM()`](aggregate-functions.html#function_sum)，但这次作为一个窗口函数：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Each window operation in the query is signified by inclusion of an `OVER` clause
    that specifies how to partition query rows into groups for processing by the window
    function:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 查询中的每个窗口操作都通过包含指定如何将查询行分组以供窗口函数处理的`OVER`子句来表示：
- en: The first `OVER` clause is empty, which treats the entire set of query rows
    as a single partition. The window function thus produces a global sum, but does
    so for each row.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个`OVER`子句为空，这将整个查询行集视为单个分区。因此，窗口函数为每一行产生一个全局总和。
- en: The second `OVER` clause partitions rows by country, producing a sum per partition
    (per country). The function produces this sum for each partition row.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个`OVER`子句按国家对行进行分区，为每个分区（每个国家）产生一个总和。该函数为每个分区行产生这个总和。
- en: Window functions are permitted only in the select list and `ORDER BY` clause.
    Query result rows are determined from the `FROM` clause, after `WHERE`, `GROUP
    BY`, and `HAVING` processing, and windowing execution occurs before `ORDER BY`,
    `LIMIT`, and `SELECT DISTINCT`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数仅允许在选择列表和`ORDER BY`子句中使用。查询结果行是从`FROM`子句中确定的，在`WHERE`、`GROUP BY`和`HAVING`处理之后，窗口执行发生在`ORDER
    BY`、`LIMIT`和`SELECT DISTINCT`之前。
- en: 'The `OVER` clause is permitted for many aggregate functions, which therefore
    can be used as window or nonwindow functions, depending on whether the `OVER`
    clause is present or absent:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`OVER`子句允许许多聚合函数，因此可以根据`OVER`子句的存在与否将其用作窗口函数或非窗口函数：'
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For details about each aggregate function, see [Section 14.19.1, “Aggregate
    Function Descriptions”](aggregate-functions.html "14.19.1 Aggregate Function Descriptions").
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个聚合函数的详细信息，请参见[第14.19.1节，“聚合函数描述”](aggregate-functions.html "14.19.1 聚合函数描述")。
- en: 'MySQL also supports nonaggregate functions that are used only as window functions.
    For these, the `OVER` clause is mandatory:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL还支持仅用作窗口函数的非聚合函数。对于这些函数，`OVER`子句是强制的：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For details about each nonaggregate function, see [Section 14.20.1, “Window
    Function Descriptions”](window-function-descriptions.html "14.20.1 Window Function
    Descriptions").
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个非聚合函数的详细信息，请参见[第14.20.1节，“窗口函数描述”](window-function-descriptions.html "14.20.1 窗口函数描述")。
- en: 'As an example of one of those nonaggregate window functions, this query uses
    [`ROW_NUMBER()`](window-function-descriptions.html#function_row-number), which
    produces the row number of each row within its partition. In this case, rows are
    numbered per country. By default, partition rows are unordered and row numbering
    is nondeterministic. To sort partition rows, include an `ORDER BY` clause within
    the window definition. The query uses unordered and ordered partitions (the `row_num1`
    and `row_num2` columns) to illustrate the difference between omitting and including
    `ORDER BY`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为那些非聚合窗口函数之一的示例，此查询使用[`ROW_NUMBER()`](window-function-descriptions.html#function_row-number)，它生成每个分区内每行的行号。在本例中，行按国家编号。默认情况下，分区行是无序的，行编号是不确定的。要对分区行进行排序，请在窗口定义中包含一个`ORDER
    BY`子句。查询使用无序和有序分区（`row_num1`和`row_num2`列）来说明省略和包含`ORDER BY`之间的差异：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As mentioned previously, to use a window function (or treat an aggregate function
    as a window function), include an `OVER` clause following the function call. The
    `OVER` clause has two forms:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，要使用窗口函数（或将聚合函数视为窗口函数），请在函数调用后包含一个`OVER`子句。`OVER`子句有两种形式：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Both forms define how the window function should process query rows. They differ
    in whether the window is defined directly in the `OVER` clause, or supplied by
    a reference to a named window defined elsewhere in the query:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种形式定义了窗口函数如何处理查询行。它们的区别在于窗口是直接在`OVER`子句中定义，还是通过引用在查询中其他地方定义的命名窗口提供：
- en: In the first case, the window specification appears directly in the `OVER` clause,
    between the parentheses.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一种情况下，窗口规范直接出现在括号之间的`OVER`子句中。
- en: In the second case, *`window_name`* is the name for a window specification defined
    by a `WINDOW` clause elsewhere in the query. For details, see [Section 14.20.4,
    “Named Windows”](window-functions-named-windows.html "14.20.4 Named Windows").
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二种情况下，*`window_name`*是查询中其他地方由`WINDOW`子句定义的窗口规范的名称。有关详细信息，请参见[第14.20.4节，“命名窗口”](window-functions-named-windows.html
    "14.20.4 命名窗口")。
- en: 'For `OVER (*`window_spec`*)` syntax, the window specification has several parts,
    all optional:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`OVER (*`window_spec`*)`语法，窗口规范有几个部分，都是可选的：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If `OVER()` is empty, the window consists of all query rows and the window
    function computes a result using all rows. Otherwise, the clauses present within
    the parentheses determine which query rows are used to compute the function result
    and how they are partitioned and ordered:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`OVER()`为空，则窗口包含所有查询行，窗口函数使用所有行计算结果。否则，括号内的子句确定用于计算函数结果的查询行以及它们如何分区和排序：
- en: '*`window_name`*: The name of a window defined by a `WINDOW` clause elsewhere
    in the query. If *`window_name`* appears by itself within the `OVER` clause, it
    completely defines the window. If partitioning, ordering, or framing clauses are
    also given, they modify interpretation of the named window. For details, see [Section 14.20.4,
    “Named Windows”](window-functions-named-windows.html "14.20.4 Named Windows").'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`window_name`*：查询中其他地方由`WINDOW`子句定义的窗口的名称。如果*`window_name`*单独出现在`OVER`子句中，它完全定义了窗口。如果还提供了分区、排序或帧子句，则它们修改了命名窗口的解释。有关详细信息，请参见[第14.20.4节，“命名窗口”](window-functions-named-windows.html
    "14.20.4 命名窗口")。'
- en: '*`partition_clause`*: A `PARTITION BY` clause indicates how to divide the query
    rows into groups. The window function result for a given row is based on the rows
    of the partition that contains the row. If `PARTITION BY` is omitted, there is
    a single partition consisting of all query rows.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`partition_clause`*：`PARTITION BY`子句指示如何将查询行分成组。给定行的窗口函数结果基于包含该行的分区的行。如果省略`PARTITION
    BY`，则有一个包含所有查询行的单个分区。'
- en: Note
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Partitioning for window functions differs from table partitioning. For information
    about table partitioning, see [Chapter 26, *Partitioning*](partitioning.html "Chapter 26 Partitioning").
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 窗口函数的分区与表分区不同。有关表分区的信息，请参见[第26章，*分区*](partitioning.html "第26章 分区")。
- en: '*`partition_clause`* has this syntax:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`partition_clause`*的语法如下：'
- en: '[PRE8]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Standard SQL requires `PARTITION BY` to be followed by column names only. A
    MySQL extension is to permit expressions, not just column names. For example,
    if a table contains a [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") column named `ts`, standard SQL permits `PARTITION BY ts`
    but not `PARTITION BY HOUR(ts)`, whereas MySQL permits both.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标准 SQL 要求 `PARTITION BY` 后面只能跟列名。MySQL 的扩展允许表达式，而不仅仅是列名。例如，如果一个表包含名为 `ts` 的
    [`TIMESTAMP`](datetime.html "13.2.2 日期、时间和时间戳类型") 列，标准 SQL 允许 `PARTITION BY ts`，但不允许
    `PARTITION BY HOUR(ts)`，而 MySQL 允许两者。
- en: '*`order_clause`*: An `ORDER BY` clause indicates how to sort rows in each partition.
    Partition rows that are equal according to the `ORDER BY` clause are considered
    peers. If `ORDER BY` is omitted, partition rows are unordered, with no processing
    order implied, and all partition rows are peers.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`order_clause`*: `ORDER BY` 子句指示如何对每个分区的行进行排序。根据 `ORDER BY` 子句相等的分区行被视为对等。如果省略
    `ORDER BY`，分区行是无序的，没有暗示任何处理顺序，并且所有分区行都是对等的。'
- en: '*`order_clause`* has this syntax:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`order_clause`* 的语法如下：'
- en: '[PRE9]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each `ORDER BY` expression optionally can be followed by `ASC` or `DESC` to
    indicate sort direction. The default is `ASC` if no direction is specified. `NULL`
    values sort first for ascending sorts, last for descending sorts.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个 `ORDER BY` 表达式可选择跟随 `ASC` 或 `DESC` 表示排序方向。如果未指定方向，则默认为 `ASC`。对于升序排序，`NULL`
    值排在最前面，对于降序排序，排在最后面。
- en: An `ORDER BY` in a window definition applies within individual partitions. To
    sort the result set as a whole, include an `ORDER BY` at the query top level.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 窗口定义中的 `ORDER BY` 适用于各个分区。要对整个结果集进行排序，请在查询顶层包含一个 `ORDER BY`。
- en: '*`frame_clause`*: A frame is a subset of the current partition and the frame
    clause specifies how to define the subset. The frame clause has many subclauses
    of its own. For details, see [Section 14.20.3, “Window Function Frame Specification”](window-functions-frames.html
    "14.20.3 Window Function Frame Specification").'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`frame_clause`*: 一个框架是当前分区的子集，框架子句指定如何定义这个子集。框架子句有许多自己的子句。详情请参见[Section 14.20.3,
    “窗口函数框架规范”](window-functions-frames.html "14.20.3 窗口函数框架规范")。'
