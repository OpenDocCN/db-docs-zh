- en: 17.20.2 InnoDB memcached Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.20.2 InnoDB memcached架构
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-intro.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-intro.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-intro.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-intro.html)
- en: The `InnoDB` **memcached** plugin implements **memcached** as a MySQL plugin
    daemon that accesses the `InnoDB` storage engine directly, bypassing the MySQL
    SQL layer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` **memcached**插件将**memcached**实现为直接访问`InnoDB`存储引擎的MySQL插件守护程序，绕过MySQL
    SQL层。'
- en: The following diagram illustrates how an application accesses data through the
    `daemon_memcached` plugin, compared with SQL.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了应用程序如何通过`daemon_memcached`插件访问数据，与SQL相比。
- en: '**Figure 17.4 MySQL Server with Integrated memcached Server**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**图17.4 集成memcached服务器的MySQL服务器**'
- en: '![Shows an application accessing data in the InnoDB storage engine using both
    SQL and the memcached protocol. Using SQL, the application accesses data through
    the MySQL Server and Handler API. Using the memcached protocol, the application
    bypasses the MySQL Server, accessing data through the memcached plugin and InnoDB
    API. The memcached plugin is comprised of the innodb_memcache interface and optional
    local cache.](../Images/7c02551dcf039bf3724a19046c076a7b.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![显示应用程序使用SQL和memcached协议访问InnoDB存储引擎中的数据。使用SQL，应用程序通过MySQL服务器和Handler API访问数据。使用memcached协议，应用程序绕过MySQL服务器，通过memcached插件和InnoDB
    API访问数据。memcached插件由innodb_memcache接口和可选的本地缓存组成。](../Images/7c02551dcf039bf3724a19046c076a7b.png)'
- en: 'Features of the `daemon_memcached` plugin:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`daemon_memcached`插件的特点：'
- en: '**memcached** as a daemon plugin of [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server"). Both [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL
    Server") and **memcached** run in the same process space, with very low latency
    access to data.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**memcached**作为[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")的守护插件。[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")和**memcached**在同一进程空间中运行，对数据具有非常低的延迟访问。'
- en: Direct access to `InnoDB` tables, bypassing the SQL parser, the optimizer, and
    even the Handler API layer.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接访问`InnoDB`表，绕过SQL解析器、优化器，甚至Handler API层。
- en: Standard **memcached** protocols, including the text-based protocol and the
    binary protocol. The `daemon_memcached` plugin passes all 55 compatibility tests
    of the **memcapable** command.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准的**memcached**协议，包括基于文本的协议和二进制协议。`daemon_memcached`插件通过了**memcapable**命令的所有55个兼容性测试。
- en: Multi-column support. You can map multiple columns into the “value” part of
    the key-value store, with column values delimited by a user-specified separator
    character.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多列支持。您可以将多列映射到键值存储的“值”部分，列值由用户指定的分隔符字符分隔。
- en: By default, the **memcached** protocol is used to read and write data directly
    to `InnoDB`, letting MySQL manage in-memory caching using the `InnoDB` [buffer
    pool](glossary.html#glos_buffer_pool "buffer pool"). The default settings represent
    a combination of high reliability and the fewest surprises for database applications.
    For example, default settings avoid uncommitted data on the database side, or
    stale data returned for **memcached** `get` requests.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，使用**memcached**协议直接读写数据到`InnoDB`，让MySQL使用`InnoDB`[缓冲池](glossary.html#glos_buffer_pool
    "缓冲池")管理内存缓存。默认设置代表了高可靠性和数据库应用程序最少惊喜的组合。例如，默认设置避免了数据库端未提交数据，或者为**memcached**的`get`请求返回陈旧数据。
- en: Advanced users can configure the system as a traditional **memcached** server,
    with all data cached only in the **memcached** engine (memory caching), or use
    a combination of the “**memcached** engine” (memory caching) and the `InnoDB`
    **memcached** engine (`InnoDB` as back-end persistent storage).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级用户可以将系统配置为传统的**memcached**服务器，所有数据仅缓存在**memcached**引擎（内存缓存）中，或者同时使用“**memcached**引擎”（内存缓存）和`InnoDB`
    **memcached**引擎（`InnoDB`作为后端持久存储）的组合。
- en: Control over how often data is passed back and forth between `InnoDB` and **memcached**
    operations through the [`innodb_api_bk_commit_interval`](innodb-parameters.html#sysvar_innodb_api_bk_commit_interval),
    [`daemon_memcached_r_batch_size`](innodb-parameters.html#sysvar_daemon_memcached_r_batch_size),
    and [`daemon_memcached_w_batch_size`](innodb-parameters.html#sysvar_daemon_memcached_w_batch_size)
    configuration options. Batch size options default to a value of 1 for maximum
    reliability.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制数据在`InnoDB`和**memcached**操作之间传递频率的配置选项包括[`innodb_api_bk_commit_interval`](innodb-parameters.html#sysvar_innodb_api_bk_commit_interval)，[`daemon_memcached_r_batch_size`](innodb-parameters.html#sysvar_daemon_memcached_r_batch_size)，和[`daemon_memcached_w_batch_size`](innodb-parameters.html#sysvar_daemon_memcached_w_batch_size)。批量大小选项默认值为1，以确保最大可靠性。
- en: The ability to specify **memcached** options through the [`daemon_memcached_option`](innodb-parameters.html#sysvar_daemon_memcached_option)
    configuration parameter. For example, you can change the port that **memcached**
    listens on, reduce the maximum number of simultaneous connections, change the
    maximum memory size for a key-value pair, or enable debugging messages for the
    error log.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过[`daemon_memcached_option`](innodb-parameters.html#sysvar_daemon_memcached_option)配置参数指定**memcached**选项的能力。例如，您可以更改**memcached**监听的端口，减少最大同时连接数，更改键值对的最大内存大小，或为错误日志启用调试消息。
- en: The [`innodb_api_trx_level`](innodb-parameters.html#sysvar_innodb_api_trx_level)
    configuration option controls the transaction [isolation level](glossary.html#glos_isolation_level
    "isolation level") on queries processed by **memcached**. Although **memcached**
    has no concept of [transactions](glossary.html#glos_transaction "transaction"),
    you can use this option to control how soon **memcached** sees changes caused
    by SQL statements issued on the table used by the **daemon_memcached** plugin.
    By default, [`innodb_api_trx_level`](innodb-parameters.html#sysvar_innodb_api_trx_level)
    is set to [`READ UNCOMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-uncommitted).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_api_trx_level`](innodb-parameters.html#sysvar_innodb_api_trx_level)配置选项控制由**memcached**处理的查询的事务[隔离级别](glossary.html#glos_isolation_level
    "isolation level")。虽然**memcached**没有[事务](glossary.html#glos_transaction "transaction")的概念，但您可以使用此选项来控制**memcached**何时看到由**daemon_memcached**插件使用的表上发出的SQL语句引起的更改。默认情况下，[`innodb_api_trx_level`](innodb-parameters.html#sysvar_innodb_api_trx_level)设置为[`READ
    UNCOMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-uncommitted)。'
- en: The [`innodb_api_enable_mdl`](innodb-parameters.html#sysvar_innodb_api_enable_mdl)
    option can be used to lock the table at the MySQL level, so that the mapped table
    cannot be dropped or altered by [DDL](glossary.html#glos_ddl "DDL") through the
    SQL interface. Without the lock, the table can be dropped from the MySQL layer,
    but kept in `InnoDB` storage until **memcached** or some other user stops using
    it. “MDL” stands for “metadata locking”.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_api_enable_mdl`](innodb-parameters.html#sysvar_innodb_api_enable_mdl)选项可用于在MySQL级别锁定表，以防止通过SQL接口对映射表进行[DDL](glossary.html#glos_ddl
    "DDL")的删除或更改。如果没有锁定，表可以从MySQL层删除，但在**memcached**或其他用户停止使用之前，仍保留在`InnoDB`存储中。“MDL”代表“metadata
    locking”。'
