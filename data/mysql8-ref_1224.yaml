- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-compression-tuning.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-compression-tuning.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-compression-tuning.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-compression-tuning.html)
- en: 17.9.1.3 Tuning Compression for InnoDB Tables
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.9.1.3 调整InnoDB表的压缩
- en: 'Most often, the internal optimizations described in [InnoDB Data Storage and
    Compression](innodb-compression-internals.html#innodb-compression-internals-storage
    "InnoDB Data Storage and Compression") ensure that the system runs well with compressed
    data. However, because the efficiency of compression depends on the nature of
    your data, you can make decisions that affect the performance of compressed tables:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，[InnoDB数据存储和压缩](innodb-compression-internals.html#innodb-compression-internals-storage
    "InnoDB数据存储和压缩")中描述的内部优化确保系统能够很好地运行压缩数据。然而，由于压缩的效率取决于您的数据性质，您可以做出影响压缩表性能的决策：
- en: Which tables to compress.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些表需要压缩。
- en: What compressed page size to use.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用何种压缩页大小。
- en: Whether to adjust the size of the buffer pool based on run-time performance
    characteristics, such as the amount of time the system spends compressing and
    uncompressing data. Whether the workload is more like a [data warehouse](glossary.html#glos_data_warehouse
    "data warehouse") (primarily queries) or an [OLTP](glossary.html#glos_oltp "OLTP")
    system (mix of queries and [DML](glossary.html#glos_dml "DML")).
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据运行时性能特征调整缓冲池大小的时机，例如系统花费在压缩和解压数据上的时间量。工作负载更像是[数据仓库](glossary.html#glos_data_warehouse
    "数据仓库")（主要是查询）还是[OLTP](glossary.html#glos_oltp "OLTP")系统（查询和[DML](glossary.html#glos_dml
    "DML")混合）。
- en: If the system performs DML operations on compressed tables, and the way the
    data is distributed leads to expensive [compression failures](glossary.html#glos_compression_failure
    "compression failure") at runtime, you might adjust additional advanced configuration
    options.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果系统在压缩表上执行DML操作，并且数据分布方式导致运行时昂贵的[压缩失败](glossary.html#glos_compression_failure
    "压缩失败")，则可能需要调整其他高级配置选项。
- en: Use the guidelines in this section to help make those architectural and configuration
    choices. When you are ready to conduct long-term testing and put compressed tables
    into production, see [Section 17.9.1.4, “Monitoring InnoDB Table Compression at
    Runtime”](innodb-compression-tuning-monitoring.html "17.9.1.4 Monitoring InnoDB
    Table Compression at Runtime") for ways to verify the effectiveness of those choices
    under real-world conditions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本节中的指南来帮助做出这些架构和配置选择。当您准备进行长期测试并将压缩表投入生产时，请参阅[第17.9.1.4节，“监视InnoDB表在运行时的压缩”](innodb-compression-tuning-monitoring.html
    "17.9.1.4 监视InnoDB表在运行时的压缩")，以验证这些选择在实际条件下的有效性。
- en: When to Use Compression
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 何时使用压缩
- en: In general, compression works best on tables that include a reasonable number
    of character string columns and where the data is read far more often than it
    is written. Because there are no guaranteed ways to predict whether or not compression
    benefits a particular situation, always test with a specific [workload](glossary.html#glos_workload
    "workload") and data set running on a representative configuration. Consider the
    following factors when deciding which tables to compress.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，压缩最适合包含合理数量的字符列并且数据读取频率远远高于写入频率的表。因为没有确切的方法来预测压缩是否对特定情况有益，所以始终要使用特定的[工作负载](glossary.html#glos_workload
    "工作负载")和数据集在代表性配置上进行测试。在决定哪些表需要压缩时，请考虑以下因素。
- en: Data Characteristics and Compression
  id: totrans-10
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 数据特征和压缩
- en: A key determinant of the efficiency of compression in reducing the size of data
    files is the nature of the data itself. Recall that compression works by identifying
    repeated strings of bytes in a block of data. Completely randomized data is the
    worst case. Typical data often has repeated values, and so compresses effectively.
    Character strings often compress well, whether defined in `CHAR`, `VARCHAR`, `TEXT`
    or `BLOB` columns. On the other hand, tables containing mostly binary data (integers
    or floating point numbers) or data that is previously compressed (for example
    <acronym class="acronym">JPEG</acronym> or <acronym class="acronym">PNG</acronym>
    images) may not generally compress well, significantly or at all.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩在减小数据文件大小方面的效率的一个关键因素是数据本身的性质。请记住，压缩通过识别数据块中重复的字节字符串来工作。完全随机化的数据是最糟糕的情况。典型数据通常具有重复值，因此可以有效地压缩。字符字符串通常压缩得很好，无论是在`CHAR`、`VARCHAR`、`TEXT`还是`BLOB`列中定义。另一方面，包含大部分二进制数据（整数或浮点数）或先前压缩的数据（例如<acronym
    class="acronym">JPEG</acronym>或<acronym class="acronym">PNG</acronym>图像）的表通常可能不会有效地压缩，或者根本不会压缩。
- en: You choose whether to turn on compression for each InnoDB table. A table and
    all of its indexes use the same (compressed) [page size](glossary.html#glos_page_size
    "page size"). It might be that the [primary key](glossary.html#glos_primary_key
    "primary key") (clustered) index, which contains the data for all columns of a
    table, compresses more effectively than the secondary indexes. For those cases
    where there are long rows, the use of compression might result in long column
    values being stored “off-page”, as discussed in [DYNAMIC Row Format](innodb-row-format.html#innodb-row-format-dynamic
    "DYNAMIC Row Format"). Those overflow pages may compress well. Given these considerations,
    for many applications, some tables compress more effectively than others, and
    you might find that your workload performs best only with a subset of tables compressed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择是否为每个InnoDB表启用压缩。一个表及其所有索引使用相同的（压缩的）[页面大小](glossary.html#glos_page_size
    "页面大小")。也许[主键](glossary.html#glos_primary_key "主键")（聚簇）索引，其中包含表的所有列的数据，比次要索引更有效地压缩。对于那些存在长行的情况，使用压缩可能导致长列值被存储在“页外”，如[DYNAMIC行格式](innodb-row-format.html#innodb-row-format-dynamic
    "动态行格式")中所讨论的那样。这些溢出页面可能会压缩得很好。考虑到这些因素，对于许多应用程序，一些表比其他表更有效地压缩，你可能会发现你的工作负载只有在一部分表被压缩时才能表现最佳。
- en: To determine whether or not to compress a particular table, conduct experiments.
    You can get a rough estimate of how efficiently your data can be compressed by
    using a utility that implements LZ77 compression (such as `gzip` or WinZip) on
    a copy of the [.ibd file](glossary.html#glos_ibd_file ".ibd file") for an uncompressed
    table. You can expect less compression from a MySQL compressed table than from
    file-based compression tools, because MySQL compresses data in chunks based on
    the [page size](glossary.html#glos_page_size "page size"), 16KB by default. In
    addition to user data, the page format includes some internal system data that
    is not compressed. File-based compression utilities can examine much larger chunks
    of data, and so might find more repeated strings in a huge file than MySQL can
    find in an individual page.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定是否压缩特定表，进行实验。你可以通过使用实现LZ77压缩的实用程序（如`gzip`或WinZip）对未压缩表的[.ibd文件](glossary.html#glos_ibd_file
    ".ibd文件")进行压缩的粗略估计。你可以期望MySQL压缩表的压缩效率比基于文件的压缩工具要低，因为MySQL根据默认的[页面大小](glossary.html#glos_page_size
    "页面大小")（16KB）对数据进行分块压缩。除了用户数据，页面格式还包括一些未压缩的内部系统数据。基于文件的压缩工具可以检查更大的数据块，因此可能会在一个巨大的文件中找到比MySQL在一个单独页面中找到的更多重复字符串。
- en: 'Another way to test compression on a specific table is to copy some data from
    your uncompressed table to a similar, compressed table (having all the same indexes)
    in a [file-per-table](glossary.html#glos_file_per_table "file-per-table") tablespace
    and look at the size of the resulting `.ibd` file. For example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种测试特定表的压缩的方法是将一些数据从未压缩的表复制到一个类似的、压缩的表（具有完全相同的索引）中，该表位于[file-per-table](glossary.html#glos_file_per_table
    "每个表一个文件")表空间中，并查看生成的`.ibd`文件的大小。例如：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This experiment produced the following numbers, which of course could vary
    considerably depending on your table structure and data:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实验产生了以下数字，当然这些数字可能会有很大的变化，取决于你的表结构和数据：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To see whether compression is efficient for your particular [workload](glossary.html#glos_workload
    "workload"):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看压缩是否对你特定的[工作负载](glossary.html#glos_workload "工作负载")有效：
- en: For simple tests, use a MySQL instance with no other compressed tables and run
    queries against the Information Schema [`INNODB_CMP`](information-schema-innodb-cmp-table.html
    "28.4.6 The INFORMATION_SCHEMA INNODB_CMP and INNODB_CMP_RESET Tables") table.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单的测试，使用一个没有其他压缩表的 MySQL 实例，并运行查询来访问信息模式[`INNODB_CMP`](information-schema-innodb-cmp-table.html
    "28.4.6 INFORMATION_SCHEMA INNODB_CMP 和 INNODB_CMP_RESET 表")表。
- en: For more elaborate tests involving workloads with multiple compressed tables,
    run queries against the Information Schema [`INNODB_CMP_PER_INDEX`](information-schema-innodb-cmp-per-index-table.html
    "28.4.8 The INFORMATION_SCHEMA INNODB_CMP_PER_INDEX and INNODB_CMP_PER_INDEX_RESET
    Tables") table. Because the statistics in the `INNODB_CMP_PER_INDEX` table are
    expensive to collect, you must enable the configuration option [`innodb_cmp_per_index_enabled`](innodb-parameters.html#sysvar_innodb_cmp_per_index_enabled)
    before querying that table, and you might restrict such testing to a development
    server or a non-critical replica server.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对涉及多个压缩表的更复杂测试，运行查询来访问信息模式[`INNODB_CMP_PER_INDEX`](information-schema-innodb-cmp-per-index-table.html
    "28.4.8 INFORMATION_SCHEMA INNODB_CMP_PER_INDEX 和 INNODB_CMP_PER_INDEX_RESET 表")表。因为`INNODB_CMP_PER_INDEX`表中的统计信息收集起来很昂贵，你必须在查询该表之前启用配置选项[`innodb_cmp_per_index_enabled`](innodb-parameters.html#sysvar_innodb_cmp_per_index_enabled)，并且你可能会将这样的测试限制在开发服务器或非关键复制服务器上。
- en: Run some typical SQL statements against the compressed table you are testing.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行一些典型的 SQL 语句来测试你正在测试的压缩表。
- en: Examine the ratio of successful compression operations to overall compression
    operations by querying [`INFORMATION_SCHEMA.INNODB_CMP`](information-schema-innodb-cmp-table.html
    "28.4.6 The INFORMATION_SCHEMA INNODB_CMP and INNODB_CMP_RESET Tables") or [`INFORMATION_SCHEMA.INNODB_CMP_PER_INDEX`](information-schema-innodb-cmp-per-index-table.html
    "28.4.8 The INFORMATION_SCHEMA INNODB_CMP_PER_INDEX and INNODB_CMP_PER_INDEX_RESET
    Tables"), and comparing `COMPRESS_OPS` to `COMPRESS_OPS_OK`.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过查询[`INFORMATION_SCHEMA.INNODB_CMP`](information-schema-innodb-cmp-table.html
    "28.4.6 INFORMATION_SCHEMA INNODB_CMP 和 INNODB_CMP_RESET 表")或[`INFORMATION_SCHEMA.INNODB_CMP_PER_INDEX`](information-schema-innodb-cmp-per-index-table.html
    "28.4.8 INFORMATION_SCHEMA INNODB_CMP_PER_INDEX 和 INNODB_CMP_PER_INDEX_RESET 表")来检查成功压缩操作与总体压缩操作的比率，并比较`COMPRESS_OPS`和`COMPRESS_OPS_OK`。
- en: If a high percentage of compression operations complete successfully, the table
    might be a good candidate for compression.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果高比例的压缩操作成功完成，该表可能是压缩的一个良好候选。
- en: If you get a high proportion of [compression failures](glossary.html#glos_compression_failure
    "compression failure"), you can adjust [`innodb_compression_level`](innodb-parameters.html#sysvar_innodb_compression_level),
    [`innodb_compression_failure_threshold_pct`](innodb-parameters.html#sysvar_innodb_compression_failure_threshold_pct),
    and [`innodb_compression_pad_pct_max`](innodb-parameters.html#sysvar_innodb_compression_pad_pct_max)
    options as described in [Section 17.9.1.6, “Compression for OLTP Workloads”](innodb-performance-compression-oltp.html
    "17.9.1.6 Compression for OLTP Workloads"), and try further tests.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你得到高比例的[压缩失败](glossary.html#glos_compression_failure "压缩失败")，你可以根据[17.9.1.6
    节，“OLTP 工作负载的压缩”](innodb-performance-compression-oltp.html "17.9.1.6 OLTP 工作负载的压缩")中描述的方式调整[`innodb_compression_level`](innodb-parameters.html#sysvar_innodb_compression_level)、[`innodb_compression_failure_threshold_pct`](innodb-parameters.html#sysvar_innodb_compression_failure_threshold_pct)
    和 [`innodb_compression_pad_pct_max`](innodb-parameters.html#sysvar_innodb_compression_pad_pct_max)
    选项，并尝试进一步的测试。
- en: Database Compression versus Application Compression
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 数据库压缩与应用程序压缩
- en: Decide whether to compress data in your application or in the table; do not
    use both types of compression for the same data. When you compress the data in
    the application and store the results in a compressed table, extra space savings
    are extremely unlikely, and the double compression just wastes CPU cycles.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 决定是在应用程序中压缩数据还是在表中压缩数据；不要同时对相同数据使用两种类型的压缩。当你在应用程序中压缩数据并将结果存储在压缩表中时，额外的空间节省是极不可能的，双重压缩只会浪费
    CPU 周期。
- en: Compressing in the Database
  id: totrans-27
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 在数据库中进行压缩
- en: When enabled, MySQL table compression is automatic and applies to all columns
    and index values. The columns can still be tested with operators such as `LIKE`,
    and sort operations can still use indexes even when the index values are compressed.
    Because indexes are often a significant fraction of the total size of a database,
    compression could result in significant savings in storage, I/O or processor time.
    The compression and decompression operations happen on the database server, which
    likely is a powerful system that is sized to handle the expected load.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 启用时，MySQL 表压缩是自动的，并适用于所有列和索引值。列仍然可以使用`LIKE`等运算符进行测试，排序操作仍然可以使用索引，即使索引值已经被压缩。由于索引通常占数据库总大小的相当大比例，压缩可能会在存储、I/O
    或处理器时间上带来显著的节省。压缩和解压缩操作发生在数据库服务器上，该服务器可能是一个强大的系统，大小适合处理预期的负载。
- en: Compressing in the Application
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 在应用程序中进行压缩
- en: If you compress data such as text in your application, before it is inserted
    into the database, You might save overhead for data that does not compress well
    by compressing some columns and not others. This approach uses CPU cycles for
    compression and uncompression on the client machine rather than the database server,
    which might be appropriate for a distributed application with many clients, or
    where the client machine has spare CPU cycles.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在将数据插入数据库之前在应用程序中压缩数据，您可能会通过对某些列进行压缩而对其他列不进行压缩来节省不易压缩的数据的开销。这种方法在客户端机器上使用
    CPU 周期进行压缩和解压缩，而不是在数据库服务器上进行，这可能适用于具有许多客户端的分布式应用程序，或者客户端机器有多余 CPU 周期的情况。
- en: Hybrid Approach
  id: totrans-31
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 混合方法
- en: Of course, it is possible to combine these approaches. For some applications,
    it may be appropriate to use some compressed tables and some uncompressed tables.
    It may be best to externally compress some data (and store it in uncompressed
    tables) and allow MySQL to compress (some of) the other tables in the application.
    As always, up-front design and real-life testing are valuable in reaching the
    right decision.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也可以结合这些方法。对于某些应用程序，可能适合使用一些压缩表和一些未压缩表。最好是对一些数据进行外部压缩（并将其存储在未压缩表中），并允许 MySQL
    在应用程序中压缩（部分）其他表。一如既往，提前设计和实际测试对于做出正确决策是有价值的。
- en: Workload Characteristics and Compression
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 工作负载特征和压缩
- en: In addition to choosing which tables to compress (and the page size), the workload
    is another key determinant of performance. If the application is dominated by
    reads, rather than updates, fewer pages need to be reorganized and recompressed
    after the index page runs out of room for the per-page “modification log” that
    MySQL maintains for compressed data. If the updates predominantly change non-indexed
    columns or those containing `BLOB`s or large strings that happen to be stored
    “off-page”, the overhead of compression may be acceptable. If the only changes
    to a table are `INSERT`s that use a monotonically increasing primary key, and
    there are few secondary indexes, there is little need to reorganize and recompress
    index pages. Since MySQL can “delete-mark” and delete rows on compressed pages
    “in place” by modifying uncompressed data, `DELETE` operations on a table are
    relatively efficient.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 除了选择哪些表进行压缩（以及页面大小）之外，工作负载是性能的另一个关键决定因素。如果应用程序主要由读操作组成，而不是更新操作，那么在索引页用完每页“修改日志”空间后，需要重新组织和重新压缩的页面就会减少。如果更新主要更改非索引列或包含`BLOB`或大字符串的列（恰好存储在“页外”），则压缩的开销可能是可以接受的。如果对表的唯一更改是使用单调递增主键进行的`INSERT`，并且几乎没有次要索引，那么几乎没有必要重新组织和重新压缩索引页。由于
    MySQL 可以通过修改未压缩数据“原地”在压缩页面上“标记删除”和删除行，对表进行的`DELETE`操作相对高效。
- en: For some environments, the time it takes to load data can be as important as
    run-time retrieval. Especially in data warehouse environments, many tables may
    be read-only or read-mostly. In those cases, it might or might not be acceptable
    to pay the price of compression in terms of increased load time, unless the resulting
    savings in fewer disk reads or in storage cost is significant.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些环境来说，加载数据所需的时间与运行时检索一样重要。特别是在数据仓库环境中，许多表可能是只读或读取频繁的。在这种情况下，除非减少磁盘读取或存储成本的节省显著，否则在加载时间上付出压缩的代价可能是可以接受的，也可能不可接受。
- en: Fundamentally, compression works best when the CPU time is available for compressing
    and uncompressing data. Thus, if your workload is I/O bound, rather than CPU-bound,
    you might find that compression can improve overall performance. When you test
    your application performance with different compression configurations, test on
    a platform similar to the planned configuration of the production system.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，压缩在 CPU 时间可用于压缩和解压数据时效果最佳。因此，如果您的工作负载受限于 I/O，而不是 CPU，您可能会发现压缩可以提高整体性能。在测试不同压缩配置的应用程序性能时，请在与生产系统计划配置相似的平台上进行测试。
- en: Configuration Characteristics and Compression
  id: totrans-37
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 配置特性和压缩
- en: Reading and writing database [pages](glossary.html#glos_page "page") from and
    to disk is the slowest aspect of system performance. Compression attempts to reduce
    I/O by using CPU time to compress and uncompress data, and is most effective when
    I/O is a relatively scarce resource compared to processor cycles.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从磁盘读取和写入数据库[页](glossary.html#glos_page "page")是系统性能中最慢的部分。压缩试图通过使用 CPU 时间来压缩和解压数据来减少
    I/O，并且在 I/O 相对稀缺的情况下，与处理器周期相比，效果最佳。
- en: This is often especially the case when running in a multi-user environment with
    fast, multi-core CPUs. When a page of a compressed table is in memory, MySQL often
    uses additional memory, typically 16KB, in the [buffer pool](glossary.html#glos_buffer_pool
    "buffer pool") for an uncompressed copy of the page. The adaptive LRU algorithm
    attempts to balance the use of memory between compressed and uncompressed pages
    to take into account whether the workload is running in an I/O-bound or CPU-bound
    manner. Still, a configuration with more memory dedicated to the buffer pool tends
    to run better when using compressed tables than a configuration where memory is
    highly constrained.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当在具有快速、多核 CPU 的多用户环境中运行时，通常尤其如此。当压缩表的一页在内存中时，MySQL通常会使用额外的内存，通常为16KB，在[缓冲池](glossary.html#glos_buffer_pool
    "buffer pool")中存储一页的未压缩副本。自适应 LRU 算法试图在压缩和未压缩页之间平衡内存使用，考虑到工作负载是以 I/O 为限还是以 CPU
    为限。然而，与内存高度受限的配置相比，将更多内存专用于缓冲池的配置在使用压缩表时往往运行得更好。
- en: Choosing the Compressed Page Size
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 选择压缩页大小
- en: The optimal setting of the compressed page size depends on the type and distribution
    of data that the table and its indexes contain. The compressed page size should
    always be bigger than the maximum record size, or operations may fail as noted
    in [Compression of B-Tree Pages](innodb-compression-internals.html#innodb-compression-internals-storage-btree
    "Compression of B-Tree Pages").
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩页大小的最佳设置取决于表及其索引包含的数据类型和分布。压缩页大小应始终大于最大记录大小，否则操作可能会失败，如[压缩 B-Tree 页](innodb-compression-internals.html#innodb-compression-internals-storage-btree
    "Compression of B-Tree Pages")中所述。
- en: Setting the compressed page size too large wastes some space, but the pages
    do not have to be compressed as often. If the compressed page size is set too
    small, inserts or updates may require time-consuming recompression, and the [B-tree](glossary.html#glos_b_tree
    "B-tree") nodes may have to be split more frequently, leading to bigger data files
    and less efficient indexing.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 设置压缩页大小过大会浪费一些空间，但页面不必经常压缩。如果压缩页大小设置过小，则插入或更新可能需要耗时的重新压缩，并且[B 树](glossary.html#glos_b_tree
    "B-tree")节点可能需要更频繁地拆分，导致更大的数据文件和不太有效的索引。
- en: Typically, you set the compressed page size to 8K or 4K bytes. Given that the
    maximum row size for an InnoDB table is around 8K, `KEY_BLOCK_SIZE=8` is usually
    a safe choice.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您将压缩页大小设置为8K或4K字节。鉴于 InnoDB 表的最大行大小约为8K，`KEY_BLOCK_SIZE=8`通常是一个安全选择。
