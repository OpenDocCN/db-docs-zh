- en: 10.3.5 Column Indexes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.3.5 列索引
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html](https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html](https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html)
- en: The most common type of index involves a single column, storing copies of the
    values from that column in a data structure, allowing fast lookups for the rows
    with the corresponding column values. The B-tree data structure lets the index
    quickly find a specific value, a set of values, or a range of values, corresponding
    to operators such as `=`, `>`, `≤`, `BETWEEN`, `IN`, and so on, in a `WHERE` clause.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的索引类型涉及单个列，在数据结构中存储该列的值的副本，允许快速查找具有相应列值的行。B树数据结构让索引可以快速找到特定值、一组值或一系列值，对应于`=`、`>`、`≤`、`BETWEEN`、`IN`等操作符，在`WHERE`子句中使用。
- en: The maximum number of indexes per table and the maximum index length is defined
    per storage engine. See [Chapter 17, *The InnoDB Storage Engine*](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine"), and [Chapter 18, *Alternative Storage
    Engines*](storage-engines.html "Chapter 18 Alternative Storage Engines"). All
    storage engines support at least 16 indexes per table and a total index length
    of at least 256 bytes. Most storage engines have higher limits.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表的最大索引数和最大索引长度由存储引擎定义。请参见[第 17 章，“InnoDB存储引擎”](innodb-storage-engine.html
    "第 17 章 InnoDB存储引擎")和[第 18 章，“替代存储引擎”](storage-engines.html "第 18 章 替代存储引擎")。所有存储引擎至少支持每个表
    16 个索引和至少 256 字节的总索引长度。大多数存储引擎具有更高的限制。
- en: For additional information about column indexes, see [Section 15.1.15, “CREATE
    INDEX Statement”](create-index.html "15.1.15 CREATE INDEX Statement").
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有关列索引的更多信息，请参见[第 15.1.15 节，“CREATE INDEX 语句”](create-index.html "15.1.15 CREATE
    INDEX 语句")。
- en: '[Index Prefixes](column-indexes.html#column-indexes-prefix "Index Prefixes")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[索引前缀](column-indexes.html#column-indexes-prefix "索引前缀")'
- en: '[FULLTEXT Indexes](column-indexes.html#column-indexes-fulltext "FULLTEXT Indexes")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[全文索引](column-indexes.html#column-indexes-fulltext "全文索引")'
- en: '[Spatial Indexes](column-indexes.html#column-indexes-spatial "Spatial Indexes")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[空间索引](column-indexes.html#column-indexes-spatial "空间索引")'
- en: '[Indexes in the MEMORY Storage Engine](column-indexes.html#column-indexes-memory-storage-engine
    "Indexes in the MEMORY Storage Engine")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MEMORY存储引擎中的索引](column-indexes.html#column-indexes-memory-storage-engine "MEMORY存储引擎中的索引")'
- en: Index Prefixes
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 索引前缀
- en: 'With `*`col_name`*(*`N`*)` syntax in an index specification for a string column,
    you can create an index that uses only the first *`N`* characters of the column.
    Indexing only a prefix of column values in this way can make the index file much
    smaller. When you index a [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")
    or [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") column, you *must* specify
    a prefix length for the index. For example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`*`col_name`*(*`N`*)`语法在字符串列的索引规范中，您可以创建一个仅使用列的前 *`N`* 个字符的索引。以这种方式仅对列值的前缀进行索引可以使索引文件变得更小。当您对[`BLOB`](blob.html
    "13.3.4 BLOB和TEXT类型")或[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")列进行索引时，*必须*为索引指定前缀长度。例如：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Prefixes can be up to 767 bytes long for `InnoDB` tables that use the `[REDUNDANT](glossary.html#glos_redundant_row_format
    "redundant row format")` or `[COMPACT](glossary.html#glos_compact_row_format "compact
    row format")` row format. The prefix length limit is 3072 bytes for `InnoDB` tables
    that use the `[DYNAMIC](glossary.html#glos_dynamic_row_format "dynamic row format")`
    or `[COMPRESSED](glossary.html#glos_compressed_row_format "compressed row format")`
    row format. For MyISAM tables, the prefix length limit is 1000 bytes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用`[REDUNDANT](glossary.html#glos_redundant_row_format "冗余行格式")`或`[COMPACT](glossary.html#glos_compact_row_format
    "紧凑行格式")`行格式的`InnoDB`表，前缀最长可达 767 字节。对于使用`[DYNAMIC](glossary.html#glos_dynamic_row_format
    "动态行格式")`或`[COMPRESSED](glossary.html#glos_compressed_row_format "压缩行格式")`行格式的`InnoDB`表，前缀长度限制为
    3072 字节。对于MyISAM表，前缀长度限制为 1000 字节。
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Prefix limits are measured in bytes, whereas the prefix length in [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement"), [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement"), and [`CREATE INDEX`](create-index.html "15.1.15 CREATE INDEX
    Statement") statements is interpreted as number of characters for nonbinary string
    types ([`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), [`TEXT`](blob.html "13.3.4 The BLOB and
    TEXT Types")) and number of bytes for binary string types ([`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types")). Take this into account when specifying a prefix length for
    a nonbinary string column that uses a multibyte character set.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前缀限制以字节为单位，而在[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")、[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")和[`CREATE INDEX`](create-index.html
    "15.1.15 CREATE INDEX Statement")语句中，前缀长度被解释为非二进制字符串类型（[`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types")、[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")、[`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")）的字符数和二进制字符串类型的字节数（[`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types")、[`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types")、[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")）。在为使用多字节字符集的非二进制字符串列指定前缀长度时，请考虑这一点。
- en: If a search term exceeds the index prefix length, the index is used to exclude
    non-matching rows, and the remaining rows are examined for possible matches.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果搜索词超过索引前缀长度，则使用索引来排除不匹配的行，然后检查剩余行以查找可能的匹配项。
- en: For additional information about index prefixes, see [Section 15.1.15, “CREATE
    INDEX Statement”](create-index.html "15.1.15 CREATE INDEX Statement").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有关索引前缀的更多信息，请参见[Section 15.1.15, “CREATE INDEX Statement”](create-index.html
    "15.1.15 CREATE INDEX Statement")。
- en: FULLTEXT Indexes
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 全文索引
- en: '`FULLTEXT` indexes are used for full-text searches. Only the [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") and [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine") storage engines support `FULLTEXT` indexes and
    only for [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), and [`TEXT`](blob.html "13.3.4 The BLOB
    and TEXT Types") columns. Indexing always takes place over the entire column and
    column prefix indexing is not supported. For details, see [Section 14.9, “Full-Text
    Search Functions”](fulltext-search.html "14.9 Full-Text Search Functions").'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`FULLTEXT`索引用于全文搜索。只有[`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine")和[`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM
    Storage Engine")存储引擎支持`FULLTEXT`索引，且仅适用于[`CHAR`](char.html "13.3.2 The CHAR and
    VARCHAR Types")、[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")和[`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")列。索引始终在整个列上进行，不支持列前缀索引。有关详细信息，请参见[Section 14.9,
    “Full-Text Search Functions”](fulltext-search.html "14.9 Full-Text Search Functions")。'
- en: 'Optimizations are applied to certain kinds of `FULLTEXT` queries against single
    `InnoDB` tables. Queries with these characteristics are particularly efficient:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 优化应用于针对单个`InnoDB`表的某些类型的`FULLTEXT`查询。具有以下特征的查询特别高效：
- en: '`FULLTEXT` queries that only return the document ID, or the document ID and
    the search rank.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅返回文档 ID 或文档 ID 和搜索排名的`FULLTEXT`查询。
- en: '`FULLTEXT` queries that sort the matching rows in descending order of score
    and apply a `LIMIT` clause to take the top N matching rows. For this optimization
    to apply, there must be no `WHERE` clauses and only a single `ORDER BY` clause
    in descending order.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将匹配行按得分降序排序并应用`LIMIT`子句以获取前 N 个匹配行的`FULLTEXT`查询。要应用此优化，`WHERE`子句中不能有`WHERE`子句，且仅有一个按降序排序的`ORDER
    BY`子句。
- en: '`FULLTEXT` queries that retrieve only the `COUNT(*)` value of rows matching
    a search term, with no additional `WHERE` clauses. Code the `WHERE` clause as
    `WHERE MATCH(*`text`*) AGAINST (''*`other_text`*'')`, without any `> 0` comparison
    operator.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅检索与搜索词匹配的行的`COUNT(*)`值的`FULLTEXT`查询，没有额外的`WHERE`子句。将`WHERE`子句编码为`WHERE MATCH(*`text`*)
    AGAINST ('*`other_text`*')`，不包含任何`> 0`比较运算符。
- en: For queries that contain full-text expressions, MySQL evaluates those expressions
    during the optimization phase of query execution. The optimizer does not just
    look at full-text expressions and make estimates, it actually evaluates them in
    the process of developing an execution plan.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含全文表达式的查询，MySQL在查询执行的优化阶段评估这些表达式。优化器不仅查看全文表达式并进行估计，而且在制定执行计划的过程中实际评估它们。
- en: An implication of this behavior is that [`EXPLAIN`](explain.html "15.8.2 EXPLAIN
    Statement") for full-text queries is typically slower than for non-full-text queries
    for which no expression evaluation occurs during the optimization phase.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为的一个影响是，对于全文查询，[`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement") 通常比对于在优化阶段不进行表达式评估的非全文查询慢。
- en: '[`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement") for full-text queries
    may show `Select tables optimized away` in the `Extra` column due to matching
    occurring during optimization; in this case, no table access need occur during
    later execution.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于全文查询，[`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement") 可能会在 `Extra` 列中显示
    `选择表已优化`，这是由于匹配发生在优化期间；在这种情况下，后续执行时不需要访问表。
- en: Spatial Indexes
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 空间索引
- en: You can create indexes on spatial data types. `MyISAM` and `InnoDB` support
    R-tree indexes on spatial types. Other storage engines use B-trees for indexing
    spatial types (except for `ARCHIVE`, which does not support spatial type indexing).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在空间数据类型上创建索引。`MyISAM` 和 `InnoDB` 支持空间类型的 R 树索引。其他存储引擎使用 B 树来索引空间类型（除了 `ARCHIVE`
    不支持空间类型索引）。
- en: Indexes in the MEMORY Storage Engine
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内存存储引擎中的索引
- en: The `MEMORY` storage engine uses `HASH` indexes by default, but also supports
    `BTREE` indexes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY` 存储引擎默认使用 `HASH` 索引，但也支持 `BTREE` 索引。'
