- en: Isolation In SQLite
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite 中的隔离
- en: 原文：[https://sqlite.com/isolation.html](https://sqlite.com/isolation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/isolation.html](https://sqlite.com/isolation.html)
- en: The "isolation" property of a database determines when changes made to the database
    by one operation become visible to other concurrent operations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的 "隔离" 属性决定了一个操作对数据库所做的更改何时对其他并发操作可见。
- en: Isolation Between Database Connections
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库连接之间的隔离
- en: If the same database is being read and written using two different [database
    connections](c3ref/sqlite3.html) (two different [sqlite3](c3ref/sqlite3.html)
    objects returned by separate calls to [sqlite3_open()](c3ref/open.html)) and the
    two database connections do not have a [shared cache](sharedcache.html), then
    the reader is only able to see complete committed transactions from the writer.
    Partial changes by the writer that have not been committed are invisible to the
    reader. This is true regardless of whether the two database connections are in
    the same thread, in different threads of the same process, or in different processes.
    This is the usual and expected behavior for SQL database systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同一个数据库通过两个不同的 [数据库连接](c3ref/sqlite3.html)（通过分别调用 [sqlite3_open()](c3ref/open.html)
    返回的两个不同的 [sqlite3](c3ref/sqlite3.html) 对象）进行读取和写入，并且这两个数据库连接没有 [共享缓存](sharedcache.html)，那么读取者只能看到写入者完整提交的事务。写入者未提交的部分更改对于读取者是不可见的。这一点不论这两个数据库连接是否在同一个线程中，不同线程的同一进程中，还是不同进程中，对于
    SQL 数据库系统来说，这是通常且预期的行为。
- en: The previous paragraph is also true (separate database connections are isolated
    from one another) in [shared cache mode](sharedcache.html) as long as the [read_uncommitted
    pragma](pragma.html#pragma_read_uncommitted) remains turned off. The [read_uncommitted
    pragma](pragma.html#pragma_read_uncommitted) is off by default and so if the application
    does nothing to turn it on, it will remain off. Hence, unless the [read_uncommitted
    pragma](pragma.html#pragma_read_uncommitted) is used to change the default behavior,
    changes made by one database connection are invisible to readers on a different
    database connection sharing the same cache until the writer commits its transaction.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [共享缓存模式](sharedcache.html) 下，只要 [read_uncommitted pragma](pragma.html#pragma_read_uncommitted)
    保持关闭，前一段也是真实的（单独的数据库连接彼此隔离）。[read_uncommitted pragma](pragma.html#pragma_read_uncommitted)
    默认关闭，因此如果应用程序没有执行任何操作将其打开，它将保持关闭。因此，除非使用 [read_uncommitted pragma](pragma.html#pragma_read_uncommitted)
    改变默认行为，否则一个数据库连接所做的更改对于共享同一缓存的另一个数据库连接的读取者是不可见的，直到写入者提交其事务。
- en: If two database connections share the same cache and the reader has enabled
    the [read_uncommitted pragma](pragma.html#pragma_read_uncommitted), then the reader
    will be able to see changes made by the writer before the writer transaction commits.
    The combined use of [shared cache mode](sharedcache.html) and the [read_uncommitted
    pragma](pragma.html#pragma_read_uncommitted) is the only way that one database
    connection can see uncommitted changes on a different database connection. In
    all other circumstances, separate database connections are completely isolated
    from one another.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个数据库连接共享相同的缓存，并且读者已启用了[read_uncommitted pragma](pragma.html#pragma_read_uncommitted)，那么读者就能够在写者事务提交之前看到写者所做的更改。[共享缓存模式](sharedcache.html)和[read_uncommitted
    pragma](pragma.html#pragma_read_uncommitted)的组合是一个数据库连接能够看到另一个数据库连接的未提交更改的唯一方式。在所有其他情况下，各个数据库连接彼此完全隔离。
- en: Except in the case of [shared cache](sharedcache.html) database connections
    with [PRAGMA read_uncommitted](pragma.html#pragma_read_uncommitted) turned on,
    all transactions in SQLite show "serializable" isolation. SQLite implements serializable
    transactions by actually serializing the writes. There can only be a single writer
    at a time to an SQLite database. There can be multiple database connections open
    at the same time, and all of those database connections can write to the database
    file, but they have to take turns. SQLite uses locks to serialize the writes automatically;
    this is not something that the applications using SQLite need to worry about.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 除了[共享缓存](sharedcache.html)数据库连接开启[PRAGMA read_uncommitted](pragma.html#pragma_read_uncommitted)的情况外，SQLite
    中的所有事务都显示为“可串行化”隔离。SQLite 通过实际序列化写操作来实现可串行化事务。SQLite 数据库一次只能有一个写者，虽然可以同时打开多个数据库连接，并且所有这些数据库连接都可以写入数据库文件，但它们必须轮流进行。SQLite
    使用锁来自动序列化写操作；这不是使用 SQLite 的应用程序需要担心的事情。
- en: Isolation And Concurrency
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隔离与并发
- en: SQLite implements isolation and concurrency control (and atomicity) using transient
    journal files that appear in the same directory as the database file. There are
    two major "journal modes". The older "rollback mode" corresponds to using the
    "DELETE", "PERSIST", or "TRUNCATE" options to the [journal_mode pragma](pragma.html#pragma_journal_mode).
    In rollback mode, changes are written directly into the database file, while simultaneously
    a separate rollback journal file is constructed that is able to restore the database
    to its original state if the transaction rolls back. Rollback mode (specifically
    DELETE mode, meaning that the rollback journal is deleted from disk at the conclusion
    of each transaction) is the current default behavior.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 使用临时日志文件来实现隔离和并发控制（以及原子性），这些日志文件出现在与数据库文件相同的目录中。有两种主要的“日志模式”。较旧的“回滚模式”对应于使用
    [journal_mode pragma](pragma.html#pragma_journal_mode) 中的“DELETE”、“PERSIST”或“TRUNCATE”选项。在回滚模式下，更改直接写入数据库文件，同时构建一个单独的回滚日志文件，如果事务回滚，可以将数据库恢复到其原始状态。回滚模式（特别是
    DELETE 模式，意味着回滚日志在每个事务结束时从磁盘上删除）是当前的默认行为。
- en: Since [version 3.7.0](releaselog/3_7_0.html) (2010-07-21), SQLite also supports
    "[WAL mode](wal.html)". In WAL mode, changes are not written to the original database
    file. Instead, changes go into a separate "write-ahead log" or "WAL" file. Later,
    after the transaction commits, those changes will be moved from the WAL file back
    into the original database in an operation called "checkpoint". WAL mode is enabled
    by running "[PRAGMA journal_mode=WAL](pragma.html#pragma_journal_mode)".
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自 [版本 3.7.0](releaselog/3_7_0.html)（2010-07-21）起，SQLite 还支持“WAL 模式”（wal.html）。在
    WAL 模式下，更改不会写入原始数据库文件。而是写入一个单独的“预写日志”或“WAL”文件。稍后，在事务提交后，这些更改将从 WAL 文件移回原始数据库，称为“checkpoint”操作。通过运行
    “[PRAGMA journal_mode=WAL](pragma.html#pragma_journal_mode)” 可以启用 WAL 模式。
- en: In rollback mode, SQLite implements isolation by locking the database file and
    preventing any reads by other database connections while each write transaction
    is underway. Readers can be active at the beginning of a write, before any content
    is flushed to disk and while all changes are still held in the writer's private
    memory space. But before any changes are made to the database file on disk, all
    readers must be (temporarily) expelled in order to give the writer exclusive access
    to the database file. Hence, readers are prohibited from seeing incomplete transactions
    by virtue of being locked out of the database while the transaction is being written
    to disk. Only after the transaction is completely written and synced to disk and
    committed are the readers allowed back into the database. Hence readers never
    get a chance to see partially written changes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在回滚模式下，SQLite 通过锁定数据库文件并阻止其他数据库连接的任何读取来实现隔离，而每个写事务正在进行中。 读者可以在写入之前活跃，在任何内容刷新到磁盘之前，而所有更改仍然保留在写者的私有内存空间中。
    但在任何更改被写入磁盘文件之前，所有读者必须暂时被驱逐，以便给予写者对数据库文件的独占访问权限。 因此，通过被拒绝数据库访问，读者被禁止看到不完整的事务。
    只有在事务完全写入并同步到磁盘并提交后，读者才被允许重新进入数据库。 因此，读者永远不会有机会看到部分写入的更改。
- en: WAL mode permits simultaneous readers and writers. It can do this because changes
    do not overwrite the original database file, but rather go into the separate write-ahead
    log file. That means that readers can continue to read the old, original, unaltered
    content from the original database file at the same time that the writer is appending
    to the write-ahead log. In [WAL mode](wal.html), SQLite exhibits "snapshot isolation".
    When a read transaction starts, that reader continues to see an unchanging "snapshot"
    of the database file as it existed at the moment in time when the read transaction
    started. Any write transactions that commit while the read transaction is active
    are still invisible to the read transaction, because the reader is seeing a snapshot
    of database file from a prior moment in time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: WAL 模式允许同时进行读操作和写操作。 它之所以能够做到这一点，是因为更改不会覆盖原始数据库文件，而是进入单独的 “预写日志” 文件中。 这意味着读者可以继续从原始数据库文件中读取旧的、未经改变的内容，同时写者正在向
    “预写日志” 追加内容。在[WAL 模式](wal.html)下，SQLite 展示了“快照隔离”。 当读事务开始时，该读者将继续看到数据库文件的一个不变的
    “快照”，即在读事务开始时的数据库文件的时刻。 任何在活动读事务时提交的写事务对于读事务仍然是不可见的，因为读者正在看到以前某个时刻的数据库文件的 “快照”。
- en: 'An example: Suppose there are two database connections X and Y. X starts a
    read transaction using [BEGIN](lang_transaction.html) followed by one or more
    [SELECT](lang_select.html) statements. Then Y comes along and runs an [UPDATE](lang_update.html)
    statement to modify the database. X can subsequently do a [SELECT](lang_select.html)
    against the records that Y modified but X will see the older unmodified entries
    because Y''s changes are all invisible to X while X is holding a read transaction.
    If X wants to see the changes that Y made, then X must end its read transaction
    and start a new one (by running [COMMIT](lang_transaction.html) followed by another
    [BEGIN](lang_transaction.html).)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 举例：假设有两个数据库连接 X 和 Y。X 使用[BEGIN](lang_transaction.html)开始一个读取事务，然后跟着一个或多个[SELECT](lang_select.html)语句。然后
    Y 来了，并运行一个[UPDATE](lang_update.html)语句来修改数据库。X随后可以对Y修改的记录进行[SELECT](lang_select.html)，但X将看到旧的未修改的条目，因为在X持有读取事务时，Y的更改对X来说是看不见的。如果X想要看到Y所做的更改，那么X必须结束它的读取事务，并开始一个新的事务（通过运行[COMMIT](lang_transaction.html)然后另一个[BEGIN](lang_transaction.html)）。
- en: 'Another example: X starts a read transaction using [BEGIN](lang_transaction.html)
    and [SELECT](lang_select.html), then Y makes a changes to the database using [UPDATE](lang_update.html).
    Then X tries to make a change to the database using [UPDATE](lang_update.html).
    The attempt by X to escalate its transaction from a read transaction to a write
    transaction fails with an [SQLITE_BUSY_SNAPSHOT](rescode.html#busy_snapshot) error
    because the snapshot of the database being viewed by X is no longer the latest
    version of the database. If X were allowed to write, it would fork the history
    of the database file, which is something SQLite does not support. In order for
    X to write to the database, it must first release its snapshot (using [ROLLBACK](lang_transaction.html)
    for example) then start a new transaction with a subsequent [BEGIN](lang_transaction.html).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子：X使用[BEGIN](lang_transaction.html)和[SELECT](lang_select.html)开始一个读取事务，然后Y使用[UPDATE](lang_update.html)对数据库进行更改。然后X试图使用[UPDATE](lang_update.html)对数据库进行更改。X试图将其事务从读取事务升级为写入事务的尝试，会因[SQLITE_BUSY_SNAPSHOT](rescode.html#busy_snapshot)错误失败，因为X所观察的数据库快照不再是数据库的最新版本。如果允许X进行写入，它将分叉数据库文件的历史，这是SQLite不支持的。为了X能够对数据库进行写入，它必须首先释放它的快照（例如使用[ROLLBACK](lang_transaction.html)），然后启动一个新的事务，并接着使用[BEGIN](lang_transaction.html)。
- en: If X starts a transaction that will initially only read but X knows it will
    eventually want to write and does not want to be troubled with possible SQLITE_BUSY_SNAPSHOT
    errors that arise because another connection jumped ahead of it in line, then
    X can issue [BEGIN IMMEDIATE](lang_transaction.html#immediate) to start its transaction
    instead of just an ordinary BEGIN. The [BEGIN IMMEDIATE](lang_transaction.html#immediate)
    command goes ahead and starts a write transaction, and thus blocks all other writers.
    If the [BEGIN IMMEDIATE](lang_transaction.html#immediate) operation succeeds,
    then no subsequent operations in that transaction will ever fail with an [SQLITE_BUSY](rescode.html#busy)
    error.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果X开始一个事务，最初只读取但X知道最终会想要写入，并且不想被可能出现的SQLITE_BUSY_SNAPSHOT错误所困扰（因为另一个连接已经排在它前面），那么X可以发出[即时开始](lang_transaction.html#immediate)来启动它的事务，而不仅仅是普通的BEGIN。[即时开始](lang_transaction.html#immediate)命令继续并启动写入事务，从而阻止所有其他写入者。如果[即时开始](lang_transaction.html#immediate)操作成功，那么该事务中的后续操作将不会因为[SQLITE_BUSY](rescode.html#busy)错误而失败。
- en: No Isolation Between Operations On The Same Database Connection
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在同一数据库连接上的操作之间不存在隔离。
- en: SQLite provides isolation between operations in separate database connections.
    However, there is no isolation between operations that occur within the same database
    connection.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite在不同数据库连接的操作之间提供隔离。然而，在同一数据库连接内部的操作之间没有隔离。
- en: In other words, if X begins a write transaction using [BEGIN IMMEDIATE](lang_transaction.html#immediate)
    then issues one or more [UPDATE](lang_update.html), [DELETE](lang_delete.html),
    and/or [INSERT](lang_insert.html) statements, then those changes are visible to
    subsequent [SELECT](lang_select.html) statements that are evaluated in database
    connection X. [SELECT](lang_select.html) statements on a different database connection
    Y will show no changes until the X transaction commits. But [SELECT](lang_select.html)
    statements in X will show the changes prior to the commit.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果X使用[即时开始](lang_transaction.html#immediate)开始写入事务，然后发出一个或多个[UPDATE](lang_update.html)，[DELETE](lang_delete.html)和/或[INSERT](lang_insert.html)语句，那么这些更改将对在数据库连接X中评估的后续[SELECT](lang_select.html)语句可见。在不同数据库连接Y上的[SELECT](lang_select.html)语句将在X事务提交之前不显示任何更改。但是X中的[SELECT](lang_select.html)语句将显示提交之前的更改。
- en: Within a single database connection X, a SELECT statement always sees all changes
    to the database that are completed prior to the start of the SELECT statement,
    whether committed or uncommitted. And the SELECT statement obviously does not
    see any changes that occur after the SELECT statement completes. But what about
    changes that occur while the SELECT statement is running? What if a SELECT statement
    is started and the [sqlite3_step()](c3ref/step.html) interface steps through roughly
    half of its output, then some [UPDATE](lang_update.html) statements are run by
    the application that modify the table that the SELECT statement is reading, then
    more calls to [sqlite3_step()](c3ref/step.html) are made to finish out the SELECT
    statement? Will the later steps of the SELECT statement see the changes made by
    the UPDATE or not? The answer is that this behavior is undefined. In particular,
    whether or not the SELECT statement sees the concurrent changes depends on which
    release of SQLite is running, the schema of the database file, whether or not
    [ANALYZE](lang_analyze.html) has been run, and the details of the query. In some
    cases, it might depend on the content of the database file, too. There is no good
    way to know whether or not a SELECT statement will see changes that were made
    to the database by the same database connection after the SELECT statement was
    started. And hence, developers should diligently avoid writing applications that
    make assumptions about what will occur in that circumstance.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个数据库连接 X 中，SELECT 语句始终可以看到在 SELECT 语句开始之前已经完成的数据库所有更改，无论这些更改是已提交还是未提交的。而且，显然
    SELECT 语句不会看到在 SELECT 语句完成之后发生的任何更改。但是，当 SELECT 语句正在运行时会发生什么呢？如果一个 SELECT 语句启动并且
    [sqlite3_step()](c3ref/step.html) 接口大约完成了其输出的一半，然后应用程序运行了一些 [UPDATE](lang_update.html)
    语句来修改 SELECT 语句正在读取的表，然后再次调用 [sqlite3_step()](c3ref/step.html) 来完成 SELECT 语句的后续步骤呢？后续步骤会看到
    UPDATE 所做的更改吗？答案是这种行为是未定义的。特别地，SELECT 语句是否看到并发更改取决于运行的 SQLite 版本、数据库文件的模式、是否运行了
    [ANALYZE](lang_analyze.html)，以及查询的详细信息。在某些情况下，还可能取决于数据库文件的内容。没有很好的方法可以知道 SELECT
    语句是否会看到由同一数据库连接在 SELECT 语句启动后对数据库所做的更改。因此，开发人员应该认真避免编写基于该情况假设的应用程序。
- en: If an application issues a SELECT statement on a single table like "*SELECT
    rowid, * FROM table WHERE ...*" and starts stepping through the output of that
    statement using [sqlite3_step()](c3ref/step.html) and examining each row, then
    it is safe for the application to delete the current row or any prior row using
    "DELETE FROM table WHERE rowid=?". It is also safe (in the sense that it will
    not harm the database) for the application to delete a row that expected to appear
    later in the query but has not appeared yet. If a future row is deleted, however,
    it might happen that the row turns up after a subsequent sqlite3_step(), even
    after it has allegedly been deleted. Or it might not. That behavior is undefined.
    The application can also INSERT new rows into the table while the SELECT statement
    is running, but whether or not the new rows appear in subsequent sqlite3_step()s
    of the query is undefined. And the application can UPDATE the current row or any
    prior row, though doing so might cause that row to reappear in a subsequent sqlite3_step().
    As long as the application is prepared to deal with these ambiguities, the operations
    themselves are safe and will not harm the database file.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序在单个表上发出类似"*SELECT rowid, * FROM table WHERE ...*"的SELECT语句，并开始通过[sqlite3_step()](c3ref/step.html)逐步检查该语句的输出并检查每一行，那么应用程序可以安全地删除当前行或任何先前的行，使用"DELETE
    FROM table WHERE rowid=?"。应用程序也可以安全地（在不损害数据库的意义上）删除预期在查询中稍后出现但尚未出现的行。然而，如果将来的某一行被删除，可能会在随后的sqlite3_step()之后出现该行，即使它据称已被删除。也可能不会。这种行为是未定义的。应用程序还可以在SELECT语句运行时向表中插入新行，但是新行是否出现在后续的sqlite3_step()查询中是未定义的。应用程序还可以更新当前行或任何先前的行，尽管这样做可能会导致该行在后续的sqlite3_step()中重新出现。只要应用程序准备好处理这些模糊性，这些操作本身是安全的，不会损害数据库文件。
- en: For the purposes of the previous two paragraphs, two database connections that
    have the same [shared cache](sharedcache.html) and which have enabled [PRAGMA
    read_uncommitted](pragma.html#pragma_read_uncommitted) are considered to be the
    same database connection.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前两段的目的，具有相同的[共享缓存](sharedcache.html)并启用[PRAGMA read_uncommitted](pragma.html#pragma_read_uncommitted)的两个数据库连接被视为同一数据库连接。
- en: Summary
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Transactions in SQLite are SERIALIZABLE.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SQLite中的事务是串行化的。
- en: Changes made in one database connection are invisible to all other database
    connections prior to commit.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提交之前，对一个数据库连接所做的更改对所有其他数据库连接是不可见的。
- en: A query sees all changes that are completed on the same database connection
    prior to the start of the query, regardless of whether or not those changes have
    been committed.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询在查询开始之前对同一数据库连接上完成的所有更改都可见，无论这些更改是否已提交。
- en: If changes occur on the same database connection after a query starts running
    but before the query completes, then it is undefined whether or not the query
    will see those changes.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在查询开始运行之后但在查询完成之前对同一数据库连接进行了更改，则不确定查询是否会看到这些更改。
- en: If changes occur on the same database connection after a query starts running
    but before the query completes, then the query might return a changed row more
    than once, or it might return a row that was previously deleted.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在查询开始运行后但在查询完成之前，在同一个数据库连接上发生了更改，那么该查询可能会多次返回已更改的行，或者返回先前已删除的行。
- en: For the purposes of the previous four items, two database connections that use
    the same [shared cache](sharedcache.html) and which enable [PRAGMA read_uncommitted](pragma.html#pragma_read_uncommitted)
    are considered to be the same database connection, not separate database connections.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于前面四条目的目的，使用相同的[共享缓存](sharedcache.html)并启用[PRAGMA read_uncommitted](pragma.html#pragma_read_uncommitted)的两个数据库连接被视为同一个数据库连接，而不是分开的数据库连接。
