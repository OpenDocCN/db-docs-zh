- en: Using the SQLite Online Backup API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQLite在线备份API
- en: 原文：[https://sqlite.com/backup.html](https://sqlite.com/backup.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/backup.html](https://sqlite.com/backup.html)
- en: 'Historically, backups (copies) of SQLite databases have been created using
    the following method:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，使用以下方法创建SQLite数据库的备份（副本）：
- en: Establish a shared lock on the database file using the SQLite API (i.e. the
    shell tool).
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用SQLite API（即shell工具）在数据库文件上建立共享锁。
- en: Copy the database file using an external tool (for example the unix 'cp' utility
    or the DOS 'copy' command).
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用外部工具（例如Unix的'cp'实用程序或DOS的'copy'命令）复制数据库文件。
- en: Relinquish the shared lock on the database file obtained in step 1.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一步获取的数据库文件上放弃共享锁。
- en: 'This procedure works well in many scenarios and is usually very fast. However,
    this technique has the following shortcomings:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这一过程在许多场景中表现良好，通常非常快速。然而，这种技术有以下缺点：
- en: Any database clients wishing to write to the database file while a backup is
    being created must wait until the shared lock is relinquished.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在创建备份时，任何希望向数据库文件写入的数据库客户端必须等待共享锁被放弃。
- en: It cannot be used to copy data to or from in-memory databases.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能用于从或向内存数据库复制数据。
- en: If a power failure or operating system failure occurs while copying the database
    file the backup database may be corrupted following system recovery.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在复制数据库文件时发生断电或操作系统故障，系统恢复后备份数据库可能会损坏。
- en: The [Online Backup API](c3ref/backup_finish.html#sqlite3backupinit) was created
    to address these concerns. The online backup API allows the contents of one database
    to be copied into another database file, replacing any original contents of the
    target database. The copy operation may be done incrementally, in which case the
    source database does not need to be locked for the duration of the copy, only
    for the brief periods of time when it is actually being read from. This allows
    other database users to continue without excessive delays while a backup of an
    online database is made.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建[在线备份API](c3ref/backup_finish.html#sqlite3backupinit)旨在解决这些问题。在线备份API允许将一个数据库的内容复制到另一个数据库文件中，替换目标数据库的任何原始内容。复制操作可以是增量的，这样源数据库在复制期间不需要锁定，只在实际读取时需要短暂锁定。这使得在创建在线数据库备份时，其他数据库用户可以继续而无需过多延迟。
- en: The effect of completing the backup call sequence is to make the destination
    a bit-wise identical copy of the source database as it was when the copying commenced.
    (The destination becomes a "snapshot.")
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完成备份调用序列的效果是使目标成为源数据库在复制开始时的位完全相同的副本。 （目标变成“快照”。）
- en: The online backup API is [documented here](c3ref/backup_finish.html#sqlite3backupinit).
    The remainder of this page contains two C language examples illustrating common
    uses of the API and discussions thereof. Reading these examples is no substitute
    for reading the API documentation!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里[文档化了在线备份API](c3ref/backup_finish.html#sqlite3backupinit)。本页的其余部分包含两个C语言示例，说明了API的常见用途及其讨论。阅读这些示例并不代替阅读API文档！
- en: 'Update: The [VACUUM INTO](lang_vacuum.html#vacuuminto) command introduced in
    SQLite version 3.27.0 (2019-02-07) can serve as an alternative to the backup API.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 更新：在SQLite版本3.27.0（2019-02-07）中引入的[VACUUM INTO](lang_vacuum.html#vacuuminto)命令可以作为备份API的替代方法。
- en: 'Example 1: Loading and Saving In-Memory Databases'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例1：加载和保存内存数据库
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The C function to the right demonstrates one of the simplest, and most common,
    uses of the backup API: loading and saving the contents of an in-memory database
    to a file on disk. The backup API is used as follows in this example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的C函数演示了备份API的最简单和最常见的用法之一：将内存数据库的内容加载并保存到磁盘上的文件中。在此示例中，备份API的使用如下：
- en: Function [sqlite3_backup_init()](c3ref/backup_finish.html#sqlite3backupinit)
    is called to create an [sqlite3_backup](c3ref/backup.html) object to copy data
    between the two databases (either from a file and into the in-memory database,
    or vice-versa).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用函数[sqlite3_backup_init()](c3ref/backup_finish.html#sqlite3backupinit)以创建一个[sqlite3_backup](c3ref/backup.html)对象，用于在两个数据库之间复制数据（从文件到内存数据库，或反之）。
- en: Function [sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep)
    is called with a parameter of `-1` to copy the entire source database to the destination.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用带有参数`-1`的函数[sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep)以将整个源数据库复制到目标数据库。
- en: Function [sqlite3_backup_finish()](c3ref/backup_finish.html#sqlite3backupfinish)
    is called to clean up resources allocated by [sqlite3_backup_init()](c3ref/backup_finish.html#sqlite3backupinit).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用sqlite3_backup_finish()来清理由sqlite3_backup_init()分配的资源。
- en: '**Error handling**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误处理**'
- en: If an error occurs in any of the three main backup API routines then the [error
    code](rescode.html) and [message](c3ref/errcode.html) are attached to the destination
    [database connection](c3ref/sqlite3.html). Additionally, if [sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep)
    encounters an error, then the [error code](rescode.html) is returned by both the
    [sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep) call itself,
    and by the subsequent call to [sqlite3_backup_finish()](c3ref/backup_finish.html#sqlite3backupfinish).
    So a call to [sqlite3_backup_finish()](c3ref/backup_finish.html#sqlite3backupfinish)
    does not overwrite an [error code](rescode.html) stored in the destination [database
    connection](c3ref/sqlite3.html) by [sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep).
    This feature is used in the example code to reduce amount of error handling required.
    The return values of the [sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep)
    and [sqlite3_backup_finish()](c3ref/backup_finish.html#sqlite3backupfinish) calls
    are ignored and the error code indicating the success or failure of the copy operation
    collected from the destination [database connection](c3ref/sqlite3.html) afterward.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果三个主要的备份API例程中发生错误，则错误代码和消息会附加到目标数据库连接。此外，如果sqlite3_backup_step()遇到错误，则sqlite3_backup_step()调用本身和随后的sqlite3_backup_finish()调用都将返回错误代码。因此，sqlite3_backup_finish()调用不会覆盖sqlite3_backup_step()存储在目标数据库连接中的错误代码。此功能在示例代码中用于减少所需的错误处理量。忽略sqlite3_backup_step()和sqlite3_backup_finish()调用的返回值，并从目标数据库连接中收集指示复制操作成功或失败的错误代码。
- en: '**Possible Enhancements**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**可能的增强**'
- en: 'The implementation of this function could be enhanced in at least two ways:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 至少可以通过两种方式增强此函数的实现：
- en: Failing to obtain the lock on database file zFilename (an [SQLITE_BUSY](rescode.html#busy)
    error) could be handled, and
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库文件zFilename上无法获取锁（SQLITE_BUSY错误）可能需要处理，
- en: Cases where the page-sizes of database pInMemory and zFilename are different
    could be handled better.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库pInMemory和zFilename的页面大小不同的情况可能需要更好地处理。
- en: Since database zFilename is a file on disk, then it may be accessed externally
    by another process. This means that when the call to sqlite3_backup_step() attempts
    to read from or write data to it, it may fail to obtain the required file lock.
    If this happens, this implementation will fail, returning SQLITE_BUSY immediately.
    The solution would be to register a busy-handler callback or timeout with [database
    connection](c3ref/sqlite3.html) pFile using [sqlite3_busy_handler()](c3ref/busy_handler.html)
    or [sqlite3_busy_timeout()](c3ref/busy_timeout.html) as soon as it is opened.
    If it fails to obtain a required lock immediately, [sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep)
    uses any registered busy-handler callback or timeout in the same way as [sqlite3_step()](c3ref/step.html)
    or [sqlite3_exec()](c3ref/exec.html) does.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据库zFilename是磁盘上的文件，可能会被另一个进程外部访问。这意味着当调用sqlite3_backup_step()试图从中读取或写入数据时，可能会无法获得所需的文件锁。如果这种情况发生，该实现将失败，并立即返回SQLITE_BUSY。解决方法是在打开它时使用sqlite3_busy_handler()或sqlite3_busy_timeout()为数据库连接pFile注册一个繁忙处理程序回调或超时。如果立即无法获取所需的锁，sqlite3_backup_step()会像sqlite3_step()或sqlite3_exec()一样使用任何已注册的繁忙处理程序回调或超时。
- en: Usually, it does not matter if the page-sizes of the source database and the
    destination database are different before the contents of the destination are
    overwritten. The page-size of the destination database is simply changed as part
    of the backup operation. The exception is if the destination database happens
    to be an in-memory database. In this case, if the page sizes are not the same
    at the start of the backup operation, then the operation fails with an SQLITE_READONLY
    error. Unfortunately, this could occur when loading a database image from a file
    into an in-memory database using function loadOrSaveDb().
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在目标内容被覆盖之前，源数据库和目标数据库的页面大小是否不同并不重要。目标数据库的页面大小仅作为备份操作的一部分进行更改。唯一的例外是目标数据库恰好是内存数据库的情况。在这种情况下，如果备份操作开始时页面大小不同，则操作将以
    SQLITE_READONLY 错误失败。不幸的是，在使用函数 loadOrSaveDb() 将数据库图像从文件加载到内存数据库时，可能会发生这种情况。
- en: However, if in-memory database pInMemory has just been opened (and is therefore
    completely empty) before being passed to function loadOrSaveDb(), then it is still
    possible to change its page size using an SQLite "PRAGMA page_size" command. Function
    loadOrSaveDb() could detect this case, and attempt to set the page-size of the
    in-memory database to the page-size of database zFilename before invoking the
    online backup API functions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果内存数据库 pInMemory 刚刚被打开（因此完全为空）并且在传递给函数 loadOrSaveDb() 之前，那么仍然可以使用 SQLite
    的 "PRAGMA page_size" 命令来更改其页面大小。函数 loadOrSaveDb() 可以检测到这种情况，并尝试将内存数据库的页面大小设置为数据库
    zFilename 的页面大小，然后调用在线备份 API 函数。
- en: 'Example 2: Online Backup of a Running Database'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 2：正在运行的数据库的在线备份
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The function presented in the previous example copies the entire source database
    in one call to [sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep).
    This requires holding a read-lock on the source database file for the duration
    of the operation, preventing any other database user from writing to the database.
    It also holds the mutex associated with database pInMemory throughout the copy,
    preventing any other thread from using it. The C function in this section, designed
    to be called by a background thread or process for creating a backup of an online
    database, avoids these problems using the following approach:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前面示例中呈现的函数通过一次调用 [sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep)
    将整个源数据库复制。这需要在操作期间保持对源数据库文件的读锁，阻止任何其他数据库用户写入数据库。它还通过复制过程中持有与数据库 pInMemory 关联的互斥体，阻止任何其他线程使用它。本节中的
    C 函数旨在由后台线程或进程调用，用于创建在线数据库备份，通过以下方法避免这些问题：
- en: Function [sqlite3_backup_init()](c3ref/backup_finish.html#sqlite3backupinit)
    is called to create an [sqlite3_backup](c3ref/backup.html) object to copy data
    from database pDb to the backup database file identified by zFilename.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用函数 [sqlite3_backup_init()](c3ref/backup_finish.html#sqlite3backupinit) 创建一个
    [sqlite3_backup](c3ref/backup.html) 对象，用于将数据库 pDb 的数据复制到由 zFilename 标识的备份数据库文件中。
- en: Function [sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep)
    is called with a parameter of 5 to copy 5 pages of database pDb to the backup
    database (file zFilename).
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数 [sqlite3_backup_step()](c3ref/backup_finish.html#sqlite3backupstep) 被调用，参数为
    5，将数据库 pDb 的 5 个页面复制到备份数据库（文件 zFilename）。
- en: If there are still more pages to copy from database pDb, then the function sleeps
    for 250 milliseconds (using the [sqlite3_sleep()](c3ref/sleep.html) utility) and
    then returns to step 2.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果数据库 pDb 还有更多页面需要复制，则函数将休眠 250 毫秒（使用 [sqlite3_sleep()](c3ref/sleep.html) 实用工具），然后返回到步骤
    2。
- en: Function [sqlite3_backup_finish()](c3ref/backup_finish.html#sqlite3backupfinish)
    is called to clean up resources allocated by [sqlite3_backup_init()](c3ref/backup_finish.html#sqlite3backupinit).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用函数 [sqlite3_backup_finish()](c3ref/backup_finish.html#sqlite3backupfinish)
    清理由 [sqlite3_backup_init()](c3ref/backup_finish.html#sqlite3backupinit) 分配的资源。
- en: '**File and Database Connection Locking**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件和数据库连接锁定**'
- en: During the 250 ms sleep in step 3 above, no read-lock is held on the database
    file and the mutex associated with pDb is not held. This allows other threads
    to use [database connection](c3ref/sqlite3.html) pDb and other connections to
    write to the underlying database file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述步骤 3 中的 250 毫秒休眠期间，不会持有数据库文件的读锁，并且不会持有与 pDb 关联的互斥体。这允许其他线程使用 [数据库连接](c3ref/sqlite3.html)
    pDb 和其他连接来写入底层数据库。
- en: 'If another thread or process writes to the source database while this function
    is sleeping, then SQLite detects this and usually restarts the backup process
    when sqlite3_backup_step() is next called. There is one exception to this rule:
    If the source database is not an in-memory database, and the write is performed
    from within the same process as the backup operation and uses the same database
    handle (pDb), then the destination database (the one opened using connection pFile)
    is automatically updated along with the source. The backup process may then be
    continued after the sqlite3_sleep() call returns as if nothing had happened.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果另一个线程或进程在此函数休眠时向源数据库写入，则 SQLite 会检测到并且通常会在下次调用 sqlite3_backup_step() 时重新启动备份过程。这条规则有一个例外：如果源数据库不是内存数据库，并且写入是在与备份操作相同的进程内部使用相同的数据库句柄（pDb）执行的，则目标数据库（使用连接
    pFile 打开的数据库）会自动与源数据库一起更新。然后可以在 sqlite3_sleep() 调用返回后继续备份过程，就好像什么都没有发生一样。
- en: 'Whether or not the backup process is restarted as a result of writes to the
    source database mid-backup, the user can be sure that when the backup operation
    is completed the backup database contains a consistent and up-to-date snapshot
    of the original. However:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 无论备份过程是否因中途对源数据库的写入而重新启动，用户可以确信，当备份操作完成时，备份数据库包含的是原始数据库的一致且最新的快照。然而：
- en: Writes to an in-memory source database, or writes to a file-based source database
    by an external process or thread using a database connection other than pDb are
    significantly more expensive than writes made to a file-based source database
    using pDb (as the entire backup operation must be restarted in the former two
    cases).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过内存源数据库写入，或者通过使用与 pDb 不同的数据库连接的外部进程或线程写入基于文件的源数据库，比使用 pDb 写入基于文件的源数据库显著更昂贵（因为在前两种情况下必须重新启动整个备份操作）。
- en: If the backup process is restarted frequently enough it may never run to completion
    and the backupDb() function may never return.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果备份过程频繁重新启动，它可能永远不会完成，并且 backupDb() 函数可能永远不会返回。
- en: '**backup_remaining() and backup_pagecount()**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**backup_remaining() 和 backup_pagecount()**'
- en: 'The backupDb() function uses the sqlite3_backup_remaining() and sqlite3_backup_pagecount()
    functions to report its progress via the user-supplied xProgress() callback. Function
    sqlite3_backup_remaining() returns the number of pages left to copy and sqlite3_backup_pagecount()
    returns the total number of pages in the source database (in this case the database
    opened by pDb). So the percentage completion of the process may be calculated
    as:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: backupDb() 函数使用 sqlite3_backup_remaining() 和 sqlite3_backup_pagecount() 函数通过用户提供的
    xProgress() 回调报告其进度。函数 sqlite3_backup_remaining() 返回剩余要复制的页数，sqlite3_backup_pagecount()
    返回源数据库中的总页数（在这种情况下是由 pDb 打开的数据库）。因此，可以计算出进程的完成百分比：
- en: Completion = 100% * (pagecount() - remaining()) / pagecount()
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 完成度 = 100% * (pagecount() - remaining()) / pagecount()
- en: The sqlite3_backup_remaining() and sqlite3_backup_pagecount() APIs report values
    stored by the previous call to sqlite3_backup_step(), they do not actually inspect
    the source database file. This means that if the source database is written to
    by another thread or process after the call to sqlite3_backup_step() returns but
    before the values returned by sqlite3_backup_remaining() and sqlite3_backup_pagecount()
    are used, the values may be technically incorrect. This is not usually a problem.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3_backup_remaining() 和 sqlite3_backup_pagecount() API 报告的是由前一个对 sqlite3_backup_step()
    的调用存储的值，它们实际上并不检查源数据库文件。这意味着如果在 sqlite3_backup_step() 返回后但在 sqlite3_backup_remaining()
    和 sqlite3_backup_pagecount() 返回的值被使用之前，源数据库被另一个线程或进程写入，那么这些值可能是技术上不正确的。通常情况下这不是问题。
