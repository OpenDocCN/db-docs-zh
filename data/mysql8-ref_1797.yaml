- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-ndbinfo-memory-per-fragment.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-ndbinfo-memory-per-fragment.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-ndbinfo-memory-per-fragment.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-ndbinfo-memory-per-fragment.html)
- en: 25.6.16.46 The ndbinfo memory_per_fragment Table
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 25.6.16.46 ndbinfo memory_per_fragment 表
- en: '[memory_per_fragment Table: Notes](mysql-cluster-ndbinfo-memory-per-fragment.html#mysql-cluster-ndbinfo-memory-per-fragment-notes
    "memory_per_fragment Table: Notes")'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[memory_per_fragment 表：注释](mysql-cluster-ndbinfo-memory-per-fragment.html#mysql-cluster-ndbinfo-memory-per-fragment-notes
    "memory_per_fragment Table: Notes")'
- en: '[memory_per_fragment Table: Examples](mysql-cluster-ndbinfo-memory-per-fragment.html#mysql-cluster-ndbinfo-memory-per-fragment-examples
    "memory_per_fragment Table: Examples")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[memory_per_fragment 表：示例](mysql-cluster-ndbinfo-memory-per-fragment.html#mysql-cluster-ndbinfo-memory-per-fragment-examples
    "memory_per_fragment Table: Examples")'
- en: 'The `memory_per_fragment` table provides information about the usage of memory
    by individual fragments. See the [Notes](mysql-cluster-ndbinfo-memory-per-fragment.html#mysql-cluster-ndbinfo-memory-per-fragment-notes
    "memory_per_fragment Table: Notes") later in this section to see how you can use
    this to find out how much memory is used by `NDB` tables.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`memory_per_fragment` 表提供有关单个片段内存使用情况的信息。请参阅本节后面的 [注释](mysql-cluster-ndbinfo-memory-per-fragment.html#mysql-cluster-ndbinfo-memory-per-fragment-notes
    "memory_per_fragment Table: Notes") 以了解如何使用此信息查找 `NDB` 表使用了多少内存。'
- en: 'The `memory_per_fragment` table contains the following columns:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`memory_per_fragment` 表包含以下列：'
- en: '`fq_name`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fq_name`'
- en: Name of this fragment
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此片段的名称
- en: '`parent_fq_name`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent_fq_name`'
- en: Name of this fragment's parent
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此片段的父级名称
- en: '`type`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`'
- en: Dictionary object type ([`Object::Type`](/doc/ndbapi/en/ndb-object.html#ndb-object-type),
    in the NDB API) used for this fragment; one of `System table`, `User table`, `Unique
    hash index`, `Hash index`, `Unique ordered index`, `Ordered index`, `Hash index
    trigger`, `Subscription trigger`, `Read only constraint`, `Index trigger`, `Reorganize
    trigger`, `Tablespace`, `Log file group`, `Data file`, `Undo file`, `Hash map`,
    `Foreign key definition`, `Foreign key parent trigger`, `Foreign key child trigger`,
    or `Schema transaction`.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于此片段的字典对象类型（[`Object::Type`](/doc/ndbapi/en/ndb-object.html#ndb-object-type)，在
    NDB API 中）之一：`System table`、`User table`、`Unique hash index`、`Hash index`、`Unique
    ordered index`、`Ordered index`、`Hash index trigger`、`Subscription trigger`、`Read
    only constraint`、`Index trigger`、`Reorganize trigger`、`Tablespace`、`Log file group`、`Data
    file`、`Undo file`、`Hash map`、`Foreign key definition`、`Foreign key parent trigger`、`Foreign
    key child trigger` 或 `Schema transaction`。
- en: You can also obtain this list by executing [`TABLE`](table.html "15.2.16 TABLE
    Statement") [`ndbinfo.dict_obj_types`](mysql-cluster-ndbinfo-dict-obj-types.html
    "25.6.16.26 The ndbinfo dict_obj_types Table") in the [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") client.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还可以通过在 [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    客户端中执行 [`TABLE`](table.html "15.2.16 TABLE Statement") [`ndbinfo.dict_obj_types`](mysql-cluster-ndbinfo-dict-obj-types.html
    "25.6.16.26 The ndbinfo dict_obj_types Table") 来获取此列表。
- en: '`table_id`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_id`'
- en: Table ID for this table
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此表的表 ID
- en: '`node_id`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_id`'
- en: Node ID for this node
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此节点的节点 ID
- en: '`block_instance`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`block_instance`'
- en: NDB kernel block instance ID; you can use this number to obtain information
    about specific threads from the [`threadblocks`](mysql-cluster-ndbinfo-threadblocks.html
    "25.6.16.61 The ndbinfo threadblocks Table") table.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NDB 内核块实例 ID；您可以使用此数字从 [`threadblocks`](mysql-cluster-ndbinfo-threadblocks.html
    "25.6.16.61 The ndbinfo threadblocks Table") 表中获取有关特定线程的信息。
- en: '`fragment_num`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fragment_num`'
- en: Fragment ID (number)
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 片段 ID（数字）
- en: '`fixed_elem_alloc_bytes`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed_elem_alloc_bytes`'
- en: Number of bytes allocated for fixed-sized elements
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为固定大小元素分配的字节数
- en: '`fixed_elem_free_bytes`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed_elem_free_bytes`'
- en: Free bytes remaining in pages allocated to fixed-size elements
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分配给固定大小元素的页面中剩余的空闲字节数
- en: '`fixed_elem_size_bytes`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed_elem_size_bytes`'
- en: Length of each fixed-size element in bytes
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个固定大小元素的字节长度
- en: '`fixed_elem_count`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed_elem_count`'
- en: Number of fixed-size elements
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 固定大小元素的数量
- en: '`fixed_elem_free_count`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed_elem_free_count`'
- en: Number of free rows for fixed-size elements
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于固定大小元素的空闲行数
- en: '`var_elem_alloc_bytes`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var_elem_alloc_bytes`'
- en: Number of bytes allocated for variable-size elements
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为可变大小元素分配的字节数
- en: '`var_elem_free_bytes`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var_elem_free_bytes`'
- en: Free bytes remaining in pages allocated to variable-size elements
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分配给可变大小元素的页面中剩余的空闲字节数
- en: '`var_elem_count`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var_elem_count`'
- en: Number of variable-size elements
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可变大小元素的数量
- en: '`hash_index_alloc_bytes`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hash_index_alloc_bytes`'
- en: Number of bytes allocated to hash indexes
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为哈希索引分配的字节数
- en: 'memory_per_fragment Table: Notes'
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: memory_per_fragment 表：注释
- en: The `memory_per_fragment` table contains one row for every table fragment replica
    and every index fragment replica in the system; this means that, for example,
    when [`NoOfReplicas=2`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-noofreplicas),
    there are normally two fragment replicas for each fragment. This is true as long
    as all data nodes are running and connected to the cluster; for a data node that
    is missing, there are no rows for the fragment replicas that it hosts.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`memory_per_fragment` 表包含系统中每个表片段副本和每个索引片段副本的一行；这意味着，例如，当[`NoOfReplicas=2`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-noofreplicas)时，通常每个片段都有两个片段副本。只要所有数据节点都在运行并连接到集群，这一点就成立；对于缺失的数据节点，它承载的片段副本没有行。'
- en: 'The columns of the `memory_per_fragment` table can be grouped according to
    their function or purpose as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`memory_per_fragment` 表的列可以根据其功能或目的分组如下：'
- en: '*Key columns*: `fq_name`, `type`, `table_id`, `node_id`, `block_instance`,
    and `fragment_num`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*键列*：`fq_name`、`type`、`table_id`、`node_id`、`block_instance`和`fragment_num`'
- en: '*Relationship column*: `parent_fq_name`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*关系列*：`parent_fq_name`'
- en: '*Fixed-size storage columns*: `fixed_elem_alloc_bytes`, `fixed_elem_free_bytes`,
    `fixed_elem_size_bytes`, `fixed_elem_count`, and `fixed_elem_free_count`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*固定大小存储列*：`fixed_elem_alloc_bytes`、`fixed_elem_free_bytes`、`fixed_elem_size_bytes`、`fixed_elem_count`和`fixed_elem_free_count`'
- en: '*Variable-sized storage columns*: `var_elem_alloc_bytes`, `var_elem_free_bytes`,
    and `var_elem_count`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可变大小存储列*：`var_elem_alloc_bytes`、`var_elem_free_bytes`和`var_elem_count`'
- en: '*Hash index column*: `hash_index_alloc_bytes`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*哈希索引列*：`hash_index_alloc_bytes`'
- en: The `parent_fq_name` and `fq_name` columns can be used to identify indexes associated
    with a table. Similar schema object hierarchy information is available in other
    `ndbinfo` tables.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`parent_fq_name` 和 `fq_name` 列可用于识别与表关联的索引。类似的模式对象层次结构信息在其他`ndbinfo`表中也可用。'
- en: 'Table and index fragment replicas allocate [`DataMemory`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-datamemory)
    in 32KB pages. These memory pages are managed as listed here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表和索引片段副本以32KB页面分配[`DataMemory`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-datamemory)。这些内存页面的管理如下所示：
- en: '*Fixed-size pages*: These store the fixed-size parts of rows stored in a given
    fragment. Every row has a fixed-size part.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*固定大小页*：这些存储在给定片段中存储的行的固定大小部分。每行都有一个固定大小部分。'
- en: '*Variable-sized pages*: These store variable-sized parts for rows in the fragment.
    Every row having one or more variable-sized, one or more dynamic columns (or both)
    has a variable-sized part.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可变大小页*：这些为片段中的行存储可变大小部分。每行具有一个或多个可变大小部分，一个或多个动态列（或两者都有）的行具有可变大小部分。'
- en: '*Hash index pages*: These are allocated as 8 KB subpages, and store the primary
    key hash index structure.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*哈希索引页*：这些被分配为8 KB子页，存储主键哈希索引结构。'
- en: Each row in an `NDB` table has a fixed-size part, consisting of a row header,
    and one or more fixed-size columns. The row may also contain one or more variable-size
    part references, one or more disk part references, or both. Each row also has
    a primary key hash index entry (corresponding to the hidden primary key that is
    part of every `NDB` table).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDB`表中的每行都有一个固定大小部分，包括行头和一个或多个固定大小列。该行还可能包含一个或多个变量大小部分引用，一个或多个磁盘部分引用，或两者都有。每行还有一个主键哈希索引条目（对应于每个`NDB`表中的隐藏主键）。'
- en: 'From the foregoing we can see that each table fragment and index fragment together
    allocate the amount of [`DataMemory`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-datamemory)
    calculated as shown here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从前述内容我们可以看到，每个表片段和索引片段一起分配了根据此处计算的[`DataMemory`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-datamemory)数量：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since `fixed_elem_alloc_bytes` and `var_elem_alloc_bytes` are always multiples
    of 32768 bytes, we can further determine that `*`number_of_fixed_pages`* = fixed_elem_alloc_bytes
    / 32768` and `*`number_of_var_pages`* = var_elem_alloc_bytes / 32768`. `hash_index_alloc_bytes`
    is always a multiple of 8192 bytes, so `*`number_of_hash_pages`* = hash_index_alloc_bytes
    / 8192`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`fixed_elem_alloc_bytes`和`var_elem_alloc_bytes`始终是32768字节的倍数，我们可以进一步确定`*`number_of_fixed_pages`*
    = fixed_elem_alloc_bytes / 32768`和`*`number_of_var_pages`* = var_elem_alloc_bytes
    / 32768`。`hash_index_alloc_bytes`始终是8192字节的倍数，因此`*`number_of_hash_pages`* = hash_index_alloc_bytes
    / 8192`。
- en: 'A fixed size page has an internal header and a number of fixed-size slots,
    each of which can contain one row''s fixed-size part. The size of a given row''s
    fixed size part is schema-dependent, and is provided by the `fixed_elem_size_bytes`
    column; the number of fixed-size slots per page can be determined by calculating
    the total number of slots and the total number of pages, like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 固定大小页具有内部标头和多个固定大小槽，每个槽可以包含一行的固定大小部分。给定行的固定大小部分的大小取决于模式，并由`fixed_elem_size_bytes`列提供；每页的固定大小槽数量可以通过计算总槽数量和总页数来确定，如下所示：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`fixed_elem_count` is in effect the row count for a given table fragment, since
    each row has 1 fixed element, `fixed_elem_free_count` is the total number of free
    fixed-size slots across the allocated pages. `fixed_elem_free_bytes` is equal
    to `fixed_elem_free_count * fixed_elem_size_bytes`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`fixed_elem_count`实际上是给定表碎片的行数，因为每行有1个固定元素，`fixed_elem_free_count`是分配的页中所有固定大小空槽的总数。`fixed_elem_free_bytes`等于`fixed_elem_free_count
    * fixed_elem_size_bytes`。'
- en: 'A fragment can have any number of fixed-size pages; when the last row on a
    fixed-size page is deleted, the page is released to the `DataMemory` page pool.
    Fixed-size pages can be fragmented, with more pages allocated than is required
    by the number of fixed-size slots in use. You can check whether this is the case
    by comparing the pages required to the pages allocated, which you can calculate
    like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个碎片可以有任意数量的固定大小页；当固定大小页上的最后一行被删除时，该页将释放到`DataMemory`页池中。固定大小页可以被碎片化，分配的页比实际使用的固定大小槽数量多。您可以通过比较所需页数和分配的页数来检查是否是这种情况，计算方法如下：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A variable-sized page has an internal header and uses the remaining space to
    store one or more variable-sized row parts; the number of parts stored depends
    on the schema and the actual data stored. Since not all schemas or rows have a
    variable-sized part, `var_elem_count` can be less than `fixed_elem_count`. The
    total free space available on all variable-sized pages in the fragment is shown
    by the `var_elem_free_bytes` column; because this space may be spread over multiple
    pages, it cannot necessarily be used to store an entry of a particular size. Each
    variable-sized page is reorganized as needed to fit the changing size of variable-sized
    row parts as they are inserted, updated, and deleted; if a given row part grows
    too large for the page it is in, it can be moved to a different page.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可变大小页具有内部标头，并使用剩余空间存储一个或多个可变大小行部分；存储的部分数量取决于模式和实际存储的数据。由于并非所有模式或行都有可变大小部分，`var_elem_count`可能小于`fixed_elem_count`。碎片中所有可变大小页上的总可用空间由`var_elem_free_bytes`列显示；因为此空间可能分布在多个页上，所以不能必然用于存储特定大小的条目。根据需要重新组织每个可变大小页，以适应插入、更新和删除可变大小行部分的变化大小；如果给定行部分增长到超出所在页的大小，则可以将其移动到另一页。
- en: 'Variable-sized page utilisation can be calculated as shown here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可变大小页的利用率可以按照这里所示进行计算：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can obtain the average variable part size per row like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式获得每行的平均可变部分大小：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Secondary unique indexes are implemented internally as independent tables with
    the following schema:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 次要唯一索引在内部实现为具有以下模式的独立表：
- en: '*Primary key*: Indexed columns in base table.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*主键*：基表中的索引列。'
- en: '*Values*: Primary key columns from base table.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*值*：基表中的主键列。'
- en: These tables are distributed and fragmented as normal. This means that their
    fragment replicas use fixed, variable, and hash index pages as with any other
    `NDB` table.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表像普通表一样分布和碎片化。这意味着它们的碎片副本使用固定、可变和哈希索引页，就像任何其他`NDB`表一样。
- en: 'Secondary ordered indexes are fragmented and distributed in the same way as
    the base table. Ordered index fragments are T-tree structures which maintain a
    balanced tree containing row references in the order implied by the indexed columns.
    Since the tree contains references rather than actual data, the T-tree storage
    cost is not dependent on the size or number of indexed columns, but is rather
    a function of the number of rows. The tree is constructed using fixed-size node
    structures, each of which may contain a number of row references; the number of
    nodes required depends on the number of rows in the table, and the tree structure
    necessary to represent the ordering. In the `memory_per_fragment` table, we can
    see that ordered indexes allocate only fixed-size pages, so as usual the relevant
    columns from this table are as listed here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 次序有序索引与基表相同方式进行碎片化和分布。有序索引片段是维护平衡树的 T 树结构，其中包含按索引列暗示的顺序包含行引用。由于树包含引用而不是实际数据，因此
    T 树存储成本不取决于索引列的大小或数量，而是取决于行数。树是使用固定大小节点结构构建的，每个节点可以包含多个行引用；所需的节点数量取决于表中的行数，以及表示排序所需的树结构。在`memory_per_fragment`表中，我们可以看到有序索引仅分配固定大小页面，因此像往常一样，此表中相关列如下所列：
- en: '`fixed_elem_alloc_bytes`: This is equal to 32768 times the number of fixed-size
    pages.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed_elem_alloc_bytes`: 这等于固定大小页面的数量乘以32768。'
- en: '`fixed_elem_count`: The number of T-tree nodes in use.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed_elem_count`: 正在使用的 T 树节点数。'
- en: '`fixed_elem_size_bytes`: The number of bytes per T-tree node.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed_elem_size_bytes`: 每个 T 树节点的字节数。'
- en: '`fixed_elem_free_count`: The number of T-tree node slots available in the pages
    allocated.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed_elem_free_count`: 分配的页面中可用的 T 树节点槽位数。'
- en: '`fixed_elem_free_bytes`: This is equal to `fixed_elem_free_count * fixed_elem_size_bytes`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixed_elem_free_bytes`: 这等于`fixed_elem_free_count * fixed_elem_size_bytes`。'
- en: If free space in a page is fragmented, the page is defragmented. [`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement") can be used to
    defragment a table's variable-sized pages; this moves row variable-sized parts
    between pages so that some whole pages can be freed for re-use.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果页面中的空闲空间是碎片化的，则页面将被整理。[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement")可用于整理表的可变大小页面；这将在页面之间移动行的可变大小部分，以便一些整个页面可以被释放以供重新使用。
- en: 'memory_per_fragment Table: Examples'
  id: totrans-77
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: memory_per_fragment 表：示例
- en: '[Getting general information about fragments and memory usage](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-memory-general
    "Getting general information about fragments and memory usage")'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[获取有关片段和内存使用情况的一般信息](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-memory-general
    "获取有关片段和内存使用情况的一般信息")'
- en: '[Finding a table and its indexes](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-table-indexes
    "Finding a table and its indexes")'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找表及其索引](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-table-indexes
    "查找表及其索引")'
- en: '[Finding the memory allocated by schema elements](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-memory-allocated-per-element
    "Finding the memory allocated by schema elements")'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找模式元素分配的内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-memory-allocated-per-element
    "查找模式元素分配的内存")'
- en: '[Finding the memory allocated for a table and all indexes](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-table-indexes-all
    "Finding the memory allocated for a table and all indexes")'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找表及其所有索引分配的内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-table-indexes-all
    "查找表及其所有索引分配的内存")'
- en: '[Finding the memory allocated per row](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-total-per-row
    "Finding the memory allocated per row")'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找每行分配的内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-total-per-row
    "查找每行分配的内存")'
- en: '[Finding the total memory in use per row](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-total-in-use-per-row
    "Finding the total memory in use per row")'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找每行使用的总内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-total-in-use-per-row
    "查找每行使用的总内存")'
- en: '[Finding the memory allocated per element](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-allocated-per-element
    "Finding the memory allocated per element")'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找每个元素分配的内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-allocated-per-element
    "查找每个元素分配的内存")'
- en: '[Finding the average memory allocated per row, by element](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-average-allocated-per-row-by-element
    "Finding the average memory allocated per row, by element")'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[按元素查找每行分配的平均内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-average-allocated-per-row-by-element
    "按元素查找每行分配的平均内存")'
- en: '[Finding the average memory allocated per row](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-average-allocated-per-row
    "Finding the average memory allocated per row")'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找每行分配的平均内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-average-allocated-per-row
    "查找每行分配的平均内存")'
- en: '[Finding the average memory allocated per row for a table](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-allocated-per-row-for-table
    "Finding the average memory allocated per row for a table")'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找表格每行分配的平均内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-allocated-per-row-for-table
    "查找表格每行分配的平均内存")'
- en: '[Finding the memory in use by each schema element](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-in-use-per-element
    "Finding the memory in use by each schema element")'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[按每个模式元素查找使用的内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-in-use-per-element
    "按每个模式元素查找使用的内存")'
- en: '[Finding the average memory in use by each schema element](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-avaerage-in-use-per-element
    "Finding the average memory in use by each schema element")'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[按每个模式元素查找使用的平均内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-avaerage-in-use-per-element
    "按每个模式元素查找使用的平均内存")'
- en: '[Finding the average memory in use per row, by element](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-average-in-use-per-row-by-element
    "Finding the average memory in use per row, by element")'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[按元素查找每行使用的平均内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-average-in-use-per-row-by-element
    "按元素查找每行使用的平均内存")'
- en: '[Finding the total average memory in use per row](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-total-average-in-use-per-row
    "Finding the total average memory in use per row")'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找每行使用的总平均内存](mysql-cluster-ndbinfo-memory-per-fragment.html#memory-per-fragment-total-average-in-use-per-row
    "查找每行使用的总平均内存")'
- en: 'For the following examples, we create a simple table with three integer columns,
    one of which has a primary key, one having a unique index, and one with no indexes,
    as well as one [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") column
    with no indexes, as shown here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下示例，我们创建一个简单的表格，包含三个整数列，其中一个具有主键，一个具有唯一索引，一个没有索引，以及一个没有索引的[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")列，如下所示：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Following creation of the table, we insert 50,000 rows containing random data;
    the precise method of generating and inserting these rows makes no practical difference,
    and we leave the method of accomplishing as an exercise for the user.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 创建表格后，我们插入包含随机数据的50,000行；生成和插入这些行的确切方法在实际上没有任何区别，我们将完成方法的实现留给用户作为练习。
- en: Getting general information about fragments and memory usage
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 获取片段和内存使用的一般信息
- en: 'This query shows general information about memory usage for each fragment:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询显示每个片段的内存使用情况的一般信息：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finding a table and its indexes
  id: totrans-98
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 查找表格及其索引
- en: 'This query can be used to find a specific table and its indexes:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询可用于查找特定表格及其索引：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finding the memory allocated by schema elements
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 查找模式元素分配的内存
- en: 'This query shows the memory allocated by each schema element (in total across
    all replicas):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询显示每个模式元素分配的内存（在所有副本中总计）：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finding the memory allocated for a table and all indexes
  id: totrans-104
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 查找为表格及所有索引分配的内存
- en: 'The sum of memory allocated for the table and all its indexes (in total across
    all replicas) can be obtained using the query shown here:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下查询获取为表格及其所有索引分配的内存总和（在所有副本中总计）：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is an abbreviated version of the previous query which shows only the total
    memory used by the table:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前一个查询的简化版本，仅显示表格使用的总内存：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finding the memory allocated per row
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 查找每行分配的内存
- en: 'The following query shows the total memory allocated per row (across all replicas):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下查询显示每行分配的总内存（在所有副本中）：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finding the total memory in use per row
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 查找每行使用的总内存
- en: 'To obtain the total memory in use per row (across all replicas), we need the
    total memory used divided by the row count, which is the `fixed_elem_count` for
    the base table like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取每行使用的总内存（在所有副本中），我们需要将总内存使用量除以行数，即基本表的`fixed_elem_count`，如下所示：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Finding the memory allocated per element
  id: totrans-115
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 查找每个元素分配的内存
- en: 'The memory allocated by each schema element (in total across all replicas)
    can be found using the following query:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模式元素分配的内存（在所有副本中总共）可以使用以下查询找到：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finding the average memory allocated per row, by element
  id: totrans-118
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 按元素查找每行分配的平均内存
- en: 'To obtain the average memory allocated per row by each schema element (in total
    across all replicas), we use a subquery to get the base table fixed element count
    each time to get an average per row since `fixed_elem_count` for the indexes is
    not necessarily the same as for the base table, as shown here:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取每个模式元素分配的平均每行内存（在所有副本中），我们使用子查询每次获取基本表固定元素计数以获得每行平均值，因为索引的`fixed_elem_count`不一定与基本表相同，如下所示：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finding the average memory allocated per row
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 按行查找每行分配的平均内存
- en: 'Average memory allocated per row (in total across all replicas):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 每行分配的平均内存（在所有副本中总共）：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finding the average memory allocated per row for a table
  id: totrans-124
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 查找表格每行分配的平均内存
- en: 'To get the average amount of memory allocated per row for the entire table
    across all replicas, we can use the query shown here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取整个表中每行分配的平均内存（在所有副本中），我们可以使用这里显示的查询：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Finding the memory in use by each schema element
  id: totrans-127
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 查找每个模式元素使用的内存
- en: 'To obtain the memory in use per schema element across all replicas, we need
    to sum the difference between allocated and free memory for each element, like
    this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取所有副本中每个模式元素使用的内存，我们需要对每个元素的分配和空闲内存之间的差值求和，如下所示：
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Finding the average memory in use by each schema element
  id: totrans-130
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 按每个模式元素查找使用的平均内存
- en: 'This query gets the average memory in use per schema element across all replicas:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询获取所有副本中每个模式元素使用的平均内存：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Finding the average memory in use per row, by element
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 按元素查找每行使用的平均内存
- en: 'This query gets the average memory in use per row, by element, across all replicas:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询获取所有副本中每行按元素使用的平均内存：
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Finding the total average memory in use per row
  id: totrans-136
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 查找每行使用的总平均内存
- en: 'This query obtains the total average memory in use, per row:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询获取每行使用的总平均内存：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
