- en: 15.1.21 CREATE TABLESPACE Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.1.21 创建表空间语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html](https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html](https://dev.mysql.com/doc/refman/8.0/en/create-tablespace.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This statement is used to create a tablespace. The precise syntax and semantics
    depend on the storage engine used. In standard MySQL releases, this is always
    an [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    tablespace. MySQL NDB Cluster also supports tablespaces using the [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") storage engine.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句用于创建一个表空间。精确的语法和语义取决于所使用的存储引擎。在标准MySQL版本中，这始终是一个[`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine")表空间。MySQL NDB Cluster还支持使用[`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0")存储引擎的表空间。
- en: '[Considerations for InnoDB](create-tablespace.html#create-tablespace-innodb
    "Considerations for InnoDB")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[InnoDB的考虑事项](create-tablespace.html#create-tablespace-innodb "Considerations
    for InnoDB")'
- en: '[Considerations for NDB Cluster](create-tablespace.html#create-tablespace-ndb
    "Considerations for NDB Cluster")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NDB Cluster的考虑事项](create-tablespace.html#create-tablespace-ndb "Considerations
    for NDB Cluster")'
- en: '[Options](create-tablespace.html#create-tablespace-options "Options")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[选项](create-tablespace.html#create-tablespace-options "Options")'
- en: '[Notes](create-tablespace.html#create-tablespace-notes "Notes")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[注意事项](create-tablespace.html#create-tablespace-notes "Notes")'
- en: '[InnoDB Examples](create-tablespace.html#create-tablespace-innodb-examples
    "InnoDB Examples")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[InnoDB示例](create-tablespace.html#create-tablespace-innodb-examples "InnoDB
    Examples")'
- en: '[NDB Example](create-tablespace.html#create-tablespace-ndb-examples "NDB Example")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NDB示例](create-tablespace.html#create-tablespace-ndb-examples "NDB Example")'
- en: Considerations for InnoDB
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: InnoDB的考虑事项
- en: '[`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE Statement")
    syntax is used to create general tablespaces or undo tablespaces. The `UNDO` keyword,
    introduced in MySQL 8.0.14, must be specified to create an undo tablespace.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE Statement")语法用于创建通用表空间或撤销表空间。在MySQL
    8.0.14中引入的`UNDO`关键字必须指定以创建撤销表空间。'
- en: A general tablespace is a shared tablespace. It can hold multiple tables, and
    supports all table row formats. General tablespaces can be created in a location
    relative to or independent of the data directory.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通用表空间是一个共享表空间。它可以容纳多个表，并支持所有表行格式。通用表空间可以相对于数据目录或独立于数据目录创建。
- en: After creating an `InnoDB` general tablespace, use [`CREATE TABLE *`tbl_name`*
    ... TABLESPACE [=] *`tablespace_name`*`](create-table.html "15.1.20 CREATE TABLE
    Statement") or [`ALTER TABLE *`tbl_name`* TABLESPACE [=] *`tablespace_name`*`](alter-table.html
    "15.1.9 ALTER TABLE Statement") to add tables to the tablespace. For more information,
    see [Section 17.6.3.3, “General Tablespaces”](general-tablespaces.html "17.6.3.3 General
    Tablespaces").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`InnoDB`通用表空间后，使用[`CREATE TABLE *`tbl_name`* ... TABLESPACE [=] *`tablespace_name`*`](create-table.html
    "15.1.20 CREATE TABLE Statement")或[`ALTER TABLE *`tbl_name`* TABLESPACE [=] *`tablespace_name`*`](alter-table.html
    "15.1.9 ALTER TABLE Statement")来将表添加到表空间中。更多信息，请参见[第17.6.3.3节，“通用表空间”](general-tablespaces.html
    "17.6.3.3 General Tablespaces")。
- en: Undo tablespaces contain undo logs. Undo tablespaces can be created in a chosen
    location by specifying a fully qualified data file path. For more information,
    see [Section 17.6.3.4, “Undo Tablespaces”](innodb-undo-tablespaces.html "17.6.3.4 Undo
    Tablespaces").
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销表空间包含撤销日志。可以通过指定完全限定的数据文件路径在所选位置创建撤销表空间。更多信息，请参见[第17.6.3.4节，“撤销表空间”](innodb-undo-tablespaces.html
    "17.6.3.4 Undo Tablespaces")。
- en: Considerations for NDB Cluster
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: NDB Cluster的考虑事项
- en: This statement is used to create a tablespace, which can contain one or more
    data files, providing storage space for NDB Cluster Disk Data tables (see [Section 25.6.11,
    “NDB Cluster Disk Data Tables”](mysql-cluster-disk-data.html "25.6.11 NDB Cluster
    Disk Data Tables")). One data file is created and added to the tablespace using
    this statement. Additional data files may be added to the tablespace by using
    the [`ALTER TABLESPACE`](alter-tablespace.html "15.1.10 ALTER TABLESPACE Statement")
    statement (see [Section 15.1.10, “ALTER TABLESPACE Statement”](alter-tablespace.html
    "15.1.10 ALTER TABLESPACE Statement")).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句用于创建一个表空间，可以包含一个或多个数据文件，为NDB Cluster Disk Data表提供存储空间（参见[第25.6.11节，“NDB Cluster
    Disk Data Tables”](mysql-cluster-disk-data.html "25.6.11 NDB Cluster Disk Data
    Tables")）。使用此语句创建一个数据文件并将其添加到表空间中。可以使用[`ALTER TABLESPACE`](alter-tablespace.html
    "15.1.10 ALTER TABLESPACE Statement")语句（参见[第15.1.10节，“ALTER TABLESPACE Statement”](alter-tablespace.html
    "15.1.10 ALTER TABLESPACE Statement")）向表空间添加其他数据文件。
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All NDB Cluster Disk Data objects share the same namespace. This means that
    *each Disk Data object* must be uniquely named (and not merely each Disk Data
    object of a given type). For example, you cannot have a tablespace and a log file
    group with the same name, or a tablespace and a data file with the same name.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有NDB集群磁盘数据对象共享相同的命名空间。这意味着*每个磁盘数据对象*必须具有唯一的名称（而不仅仅是给定类型的每个磁盘数据对象）。例如，您不能拥有具有相同名称的表空间和日志文件组，或者具有相同名称的表空间和数据文件。
- en: A log file group of one or more `UNDO` log files must be assigned to the tablespace
    to be created with the `USE LOGFILE GROUP` clause. *`logfile_group`* must be an
    existing log file group created with [`CREATE LOGFILE GROUP`](create-logfile-group.html
    "15.1.16 CREATE LOGFILE GROUP Statement") (see [Section 15.1.16, “CREATE LOGFILE
    GROUP Statement”](create-logfile-group.html "15.1.16 CREATE LOGFILE GROUP Statement")).
    Multiple tablespaces may use the same log file group for `UNDO` logging.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个`UNDO`日志文件的日志文件组必须分配给要使用`USE LOGFILE GROUP`子句创建的表空间。*`logfile_group`*必须是使用[`CREATE
    LOGFILE GROUP`](create-logfile-group.html "15.1.16 CREATE LOGFILE GROUP Statement")创建的现有日志文件组（参见[Section 15.1.16,
    “CREATE LOGFILE GROUP Statement”](create-logfile-group.html "15.1.16 CREATE LOGFILE
    GROUP Statement")）。多个表空间可以使用相同的日志文件组进行`UNDO`日志记录。
- en: When setting `EXTENT_SIZE` or `INITIAL_SIZE`, you may optionally follow the
    number with a one-letter abbreviation for an order of magnitude, similar to those
    used in `my.cnf`. Generally, this is one of the letters `M` (for megabytes) or
    `G` (for gigabytes).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置`EXTENT_SIZE`或`INITIAL_SIZE`时，您可以选择在数字后面跟随一个数量级的单字母缩写，类似于`my.cnf`中使用的缩写。通常，这是`M`（表示兆字节）或`G`（表示千兆字节）中的一个字母。
- en: '`INITIAL_SIZE` and `EXTENT_SIZE` are subject to rounding as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`INITIAL_SIZE`和`EXTENT_SIZE`将按以下方式进行四舍五入：'
- en: '`EXTENT_SIZE` is rounded up to the nearest whole multiple of 32K.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXTENT_SIZE`四舍五入到最接近的32K的整数倍。'
- en: '`INITIAL_SIZE` is rounded *down* to the nearest whole multiple of 32K; this
    result is rounded up to the nearest whole multiple of `EXTENT_SIZE` (after any
    rounding).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INITIAL_SIZE`向下四舍五入到最接近的32K的整数倍；此结果向上四舍五入到最接近`EXTENT_SIZE`的整数倍（在任何四舍五入之后）。'
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") reserves 4%
    of a tablespace for data node restart operations. This reserved space cannot be
    used for data storage.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")为数据节点重新启动操作保留了表空间的4%。此保留空间不能用于数据存储。'
- en: The rounding just described is done explicitly, and a warning is issued by the
    MySQL Server when any such rounding is performed. The rounded values are also
    used by the NDB kernel for calculating [`INFORMATION_SCHEMA.FILES`](information-schema-files-table.html
    "28.3.15 The INFORMATION_SCHEMA FILES Table") column values and other purposes.
    However, to avoid an unexpected result, we suggest that you always use whole multiples
    of 32K in specifying these options.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 描述的四舍五入是显式完成的，并且当MySQL服务器执行任何此类四舍五入时会发出警告。这些四舍五入的值也被NDB内核用于计算[`INFORMATION_SCHEMA.FILES`](information-schema-files-table.html
    "28.3.15 The INFORMATION_SCHEMA FILES Table")列值和其他用途。然而，为了避免意外结果，我们建议您在指定这些选项时始终使用32K的整数倍。
- en: When [`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE
    Statement") is used with `ENGINE [=] NDB`, a tablespace and associated data file
    are created on each Cluster data node. You can verify that the data files were
    created and obtain information about them by querying the Information Schema [`FILES`](information-schema-files-table.html
    "28.3.15 The INFORMATION_SCHEMA FILES Table") table. (See the example later in
    this section.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`ENGINE [=] NDB`进行[`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE
    TABLESPACE Statement")时，在每个集群数据节点上创建一个表空间和关联的数据文件。您可以通过查询信息模式[`FILES`](information-schema-files-table.html
    "28.3.15 The INFORMATION_SCHEMA FILES Table")表来验证数据文件是否已创建并获取有关它们的信息。（请参见本节后面的示例。）
- en: (See [Section 28.3.15, “The INFORMATION_SCHEMA FILES Table”](information-schema-files-table.html
    "28.3.15 The INFORMATION_SCHEMA FILES Table").)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: （请参见[Section 28.3.15, “The INFORMATION_SCHEMA FILES Table”](information-schema-files-table.html
    "28.3.15 The INFORMATION_SCHEMA FILES Table")。）
- en: Options
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选项
- en: '`ADD DATAFILE`: Defines the name of a tablespace data file. This option is
    always required when creating an `NDB` tablespace; for `InnoDB` in MySQL 8.0.14
    and later, it is required only when creating an undo tablespace. The `*`file_name`*`,
    including any specified path, must be quoted with single or double quotation marks.
    File names (not counting the file extension) and directory names must be at least
    one byte in length. Zero length file names and directory names are not supported.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADD DATAFILE`：定义表空间数据文件的名称。在创建`NDB`表空间时，此选项始终是必需的；对于MySQL 8.0.14及更高版本的`InnoDB`，仅在创建撤销表空间时才是必需的。`*`file_name`*`，包括任何指定的路径，必须用单引号或双引号括起来。文件名（不包括文件扩展名）和目录名必须至少为一个字节的长度。不支持零长度的文件名和目录名。'
- en: Because there are considerable differences in how `InnoDB` and `NDB` treat data
    files, the two storage engines are covered separately in the discussion that follows.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于`InnoDB`和`NDB`在处理数据文件方面存在相当大的差异，因此在接下来的讨论中，这两种存储引擎将分别进行讨论。
- en: '**InnoDB data files. ** An `InnoDB` tablespace supports only a single data
    file, whose name must include a `.ibd` extension.'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**InnoDB数据文件。** 一个`InnoDB`表空间仅支持单个数据文件，其名称必须包含`.ibd`扩展名。'
- en: To place an `InnoDB` general tablespace data file in a location outside of the
    data directory, include a fully qualified path or a path relative to the data
    directory. Only a fully qualified path is permitted for undo tablespaces. If you
    do not specify a path, a general tablespace is created in the data directory.
    An undo tablespace created without specifying a path is created in the directory
    defined by the [`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)
    variable. If the [`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)
    variable is undefined, undo tablespaces are created in the data directory.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将`InnoDB`通用表空间数据文件放在数据目录之外的位置，包括完全限定的路径或相对于数据目录的路径。仅允许为撤销表空间指定完全限定路径。如果不指定路径，则通用表空间将在数据目录中创建。未指定路径创建的撤销表空间将在由[`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)变量定义的目录中创建。如果未定义[`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)变量，则撤销表空间将在数据目录中创建。
- en: To avoid conflicts with implicitly created file-per-table tablespaces, creating
    an `InnoDB` general tablespace in a subdirectory under the data directory is not
    supported. When creating a general tablespace or undo tablespace outside of the
    data directory, the directory must exist and must be known to `InnoDB` prior to
    creating the tablespace. To make a directory known to `InnoDB`, add it to the
    [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories) value
    or to one of the variables whose values are appended to the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    value. [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    is a read-only variable. Configuring it requires restarting the server.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为避免与隐式创建的按表创建文件表空间发生冲突，不支持在数据目录的子目录下创建`InnoDB`通用表空间。在数据目录之外创建通用表空间或撤销表空间时，目录必须存在，并且在创建表空间之前必须为`InnoDB`所知。要使目录为`InnoDB`所知，将其添加到[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)值或将其添加到其值附加到[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)值的变量之一。[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)是一个只读变量。配置它需要重新启动服务器。
- en: If the `ADD DATAFILE` clause is not specified when creating an `InnoDB` tablespace,
    a tablespace data file with a unique file name is created implicitly. The unique
    file name is a 128 bit UUID formatted into five groups of hexadecimal numbers
    separated by dashes (*`aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee`*). A file extension
    is added if required by the storage engine. An `.ibd` file extension is added
    for `InnoDB` general tablespace data files. In a replication environment, the
    data file name created on the replication source server is not the same as the
    data file name created on the replica.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在创建`InnoDB`表空间时未指定`ADD DATAFILE`子句，则将隐式创建具有唯一文件名的表空间数据文件。唯一文件名是一个128位UUID，格式为由短横线分隔的五组十六进制数字。如果存储引擎需要，将添加文件扩展名。对于`InnoDB`通用表空间数据文件，将添加`.ibd`文件扩展名。在复制环境中，在复制源服务器上创建的数据文件名与在副本上创建的数据文件名不同。
- en: 'As of MySQL 8.0.17, the `ADD DATAFILE` clause does not permit circular directory
    references when creating an `InnoDB` tablespace. For example, the circular directory
    reference (`/../`) in the following statement is not permitted:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.17，`ADD DATAFILE`子句在创建`InnoDB`表空间时不允许循环目录引用。例如，以下语句中的循环目录引用（`/../`）是不允许的：
- en: '[PRE1]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: An exception to this restriction exists on Linux, where a circular directory
    reference is permitted if the preceding directory is a symbolic link. For example,
    the data file path in the example above is permitted if *`any_directory`* is a
    symbolic link. (It is still permitted for data file paths to begin with '`../`'.)
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Linux上存在一个例外，如果前面的目录是一个符号链接，则允许循环目录引用。例如，如果*`any_directory`*是一个符号链接，则上面示例中的数据文件路径是允许的。（数据文件路径仍然可以以'`../`'开头。）
- en: '**NDB data files. ** An `NDB` tablespace supports multiple data files which
    can have any legal file names; more data files can be added to an NDB Cluster
    tablespace following its creation by using an [`ALTER TABLESPACE`](alter-tablespace.html
    "15.1.10 ALTER TABLESPACE Statement") statement.'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**NDB数据文件。** 一个`NDB`表空间支持多个数据文件，这些文件可以具有任何合法的文件名；可以使用[`ALTER TABLESPACE`](alter-tablespace.html
    "15.1.10 ALTER TABLESPACE Statement")语句在创建后向NDB集群表空间添加更多数据文件。'
- en: An `NDB` tablespace data file is created by default in the data node file system
    directory—that is, the directory named `ndb_*`nodeid`*_fs/TS` under the data node's
    data directory ([`DataDir`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-datadir)),
    where *`nodeid`* is the data node's [`NodeId`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-nodeid).
    To place the data file in a location other than the default, include an absolute
    directory path or a path relative to the default location. If the directory specified
    does not exist, `NDB` attempts to create it; the system user account under which
    the data node process is running must have the appropriate permissions to do so.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，`NDB`表空间数据文件会在数据节点文件系统目录中创建，即在数据节点的数据目录（[`DataDir`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-datadir)）下名为`ndb_*`nodeid`*_fs/TS`的目录中，其中*`nodeid`*是数据节点的[`NodeId`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-nodeid)。要将数据文件放在除默认位置之外的位置，请包含绝对目录路径或相对于默认位置的路径。如果指定的目录不存在，`NDB`会尝试创建它；数据节点进程正在运行的系统用户帐户必须具有适当的权限才能这样做。
- en: Note
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: When determining the path used for a data file, `NDB` does not expand the `~`
    (tilde) character.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在确定数据文件路径时，`NDB`不会展开`~`（波浪号）字符。
- en: 'When multiple data nodes are run on the same physical host, the following considerations
    apply:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在同一物理主机上运行多个数据节点时，以下注意事项适用：
- en: You cannot specify an absolute path when creating a data file.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据文件时不能指定绝对路径。
- en: It is not possible to create tablespace data files outside the data node file
    system directory, unless each data node has a separate data directory.
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非每个数据节点都有单独的数据目录，否则无法在数据节点文件系统目录之外创建表空间数据文件。
- en: If each data node has its own data directory, data files can be created anywhere
    within this directory.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果每个数据节点都有自己的数据目录，则数据文件可以在该目录的任何位置创建。
- en: If each data node has its own data directory, it may also be possible to create
    a data file outside the node's data directory using a relative path, as long as
    this path resolves to a unique location on the host file system for each data
    node running on that host.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果每个数据节点都有自己的数据目录，那么也可以通过相对路径在节点的数据目录之外创建数据文件，只要这个路径对于在主机文件系统上运行的每个数据节点来说都解析为唯一位置。
- en: '`FILE_BLOCK_SIZE`: This option—which is specific to `InnoDB` general tablespaces,
    and is ignored by `NDB`—defines the block size for the tablespace data file. Values
    can be specified in bytes or kilobytes. For example, an 8 kilobyte file block
    size can be specified as 8192 or 8K. If you do not specify this option, `FILE_BLOCK_SIZE`
    defaults to the [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    value. `FILE_BLOCK_SIZE` is required when you intend to use the tablespace for
    storing compressed `InnoDB` tables (`ROW_FORMAT=COMPRESSED`). In this case, you
    must define the tablespace `FILE_BLOCK_SIZE` when creating the tablespace.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FILE_BLOCK_SIZE`：此选项专门针对`InnoDB`通用表空间，对于`NDB`是被忽略的，它定义了表空间数据文件的块大小。值可以用字节或千字节来指定。例如，可以将8千字节的文件块大小指定为8192或8K。如果不指定此选项，`FILE_BLOCK_SIZE`默认为[`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)的值。当您打算将表空间用于存储压缩的`InnoDB`表（`ROW_FORMAT=COMPRESSED`）时，必须定义表空间的`FILE_BLOCK_SIZE`。'
- en: If `FILE_BLOCK_SIZE` is equal the [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    value, the tablespace can contain only tables having an uncompressed row format
    (`COMPACT`, `REDUNDANT`, and `DYNAMIC`). Tables with a `COMPRESSED` row format
    have a different physical page size than uncompressed tables. Therefore, compressed
    tables cannot coexist in the same tablespace as uncompressed tables.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`FILE_BLOCK_SIZE`等于[`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)值，则表空间只能包含具有未压缩行格式（`COMPACT`，`REDUNDANT`和`DYNAMIC`）的表。具有`COMPRESSED`行格式的表具有与未压缩表不同的物理页大小。因此，压缩表不能与未压缩表共存于同一表空间中。
- en: For a general tablespace to contain compressed tables, `FILE_BLOCK_SIZE` must
    be specified, and the `FILE_BLOCK_SIZE` value must be a valid compressed page
    size in relation to the [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    value. Also, the physical page size of the compressed table (`KEY_BLOCK_SIZE`)
    must be equal to `FILE_BLOCK_SIZE/1024`. For example, if [`innodb_page_size=16K`](innodb-parameters.html#sysvar_innodb_page_size),
    and `FILE_BLOCK_SIZE=8K`, the `KEY_BLOCK_SIZE` of the table must be 8\. For more
    information, see [Section 17.6.3.3, “General Tablespaces”](general-tablespaces.html
    "17.6.3.3 General Tablespaces").
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于包含压缩表的通用表空间，必须指定`FILE_BLOCK_SIZE`，并且`FILE_BLOCK_SIZE`的值必须是与[`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)值相关的有效压缩页大小。此外，压缩表的物理页大小（`KEY_BLOCK_SIZE`）必须等于`FILE_BLOCK_SIZE/1024`。例如，如果[`innodb_page_size=16K`](innodb-parameters.html#sysvar_innodb_page_size)，而`FILE_BLOCK_SIZE=8K`，则表的`KEY_BLOCK_SIZE`必须为8。更多信息，请参见[Section 17.6.3.3,
    “通用表空间”](general-tablespaces.html "17.6.3.3 通用表空间")。
- en: '`USE LOGFILE GROUP`: Required for `NDB`, this is the name of a log file group
    previously created using [`CREATE LOGFILE GROUP`](create-logfile-group.html "15.1.16 CREATE
    LOGFILE GROUP Statement"). Not supported for `InnoDB`, where it fails with an
    error.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USE LOGFILE GROUP`：对于`NDB`必需，这是先前使用[`CREATE LOGFILE GROUP`](create-logfile-group.html
    "15.1.16 CREATE LOGFILE GROUP Statement")创建的日志文件组的名称。对于`InnoDB`不支持，会导致错误。'
- en: '`EXTENT_SIZE`: This option is specific to NDB, and is not supported by InnoDB,
    where it fails with an error. `EXTENT_SIZE` sets the size, in bytes, of the extents
    used by any files belonging to the tablespace. The default value is 1M. The minimum
    size is 32K, and theoretical maximum is 2G, although the practical maximum size
    depends on a number of factors. In most cases, changing the extent size does not
    have any measurable effect on performance, and the default value is recommended
    for all but the most unusual situations.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXTENT_SIZE`：此选项特定于NDB，在InnoDB中不受支持，会导致错误。`EXTENT_SIZE`设置表空间中任何文件使用的extent的大小（以字节为单位）。默认值为1M。最小大小为32K，理论上的最大值为2G，尽管实际最大大小取决于许多因素。在大多数情况下，更改extent大小对性能没有任何可测量的影响，建议除了最不寻常的情况外，使用默认值。'
- en: An extent is a unit of disk space allocation. One extent is filled with as much
    data as that extent can contain before another extent is used. In theory, up to
    65,535 (64K) extents may used per data file; however, the recommended maximum
    is 32,768 (32K). The recommended maximum size for a single data file is 32G—that
    is, 32K extents × 1 MB per extent. In addition, once an extent is allocated to
    a given partition, it cannot be used to store data from a different partition;
    an extent cannot store data from more than one partition. This means, for example
    that a tablespace having a single datafile whose `INITIAL_SIZE` (described in
    the following item) is 256 MB and whose `EXTENT_SIZE` is 128M has just two extents,
    and so can be used to store data from at most two different disk data table partitions.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个extent是磁盘空间分配的单位。一个extent填满尽可能多的数据，然后使用另一个extent。理论上，每个数据文件最多可以使用65,535（64K）个extent；然而，建议的最大值为32,768（32K）。单个数据文件的建议最大大小为32G，即32K
    extents × 每个extent 1MB。此外，一旦将extent分配给给定分区，就不能用于存储来自不同分区的数据；一个extent不能存储来自多个分区的数据。这意味着，例如，一个具有单个数据文件的表空间，其`INITIAL_SIZE`（在下一项中描述）为256
    MB，`EXTENT_SIZE`为128M，只有两个extent，因此最多可以用于存储来自最多两个不同磁盘数据表分区的数据。
- en: You can see how many extents remain free in a given data file by querying the
    Information Schema [`FILES`](information-schema-files-table.html "28.3.15 The
    INFORMATION_SCHEMA FILES Table") table, and so derive an estimate for how much
    space remains free in the file. For further discussion and examples, see [Section 28.3.15,
    “The INFORMATION_SCHEMA FILES Table”](information-schema-files-table.html "28.3.15 The
    INFORMATION_SCHEMA FILES Table").
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过查询信息模式[`FILES`](information-schema-files-table.html "28.3.15 The INFORMATION_SCHEMA
    FILES Table")表，您可以看到给定数据文件中剩余的空间有多少，从而估算文件中剩余的空间量。有关进一步讨论和示例，请参见[Section 28.3.15,
    “The INFORMATION_SCHEMA FILES Table”](information-schema-files-table.html "28.3.15 The
    INFORMATION_SCHEMA FILES Table")。
- en: '`INITIAL_SIZE`: This option is specific to `NDB`, and is not supported by `InnoDB`,
    where it fails with an error.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INITIAL_SIZE`：此选项特定于`NDB`，不受`InnoDB`支持，在那里会出现错误。'
- en: The `INITIAL_SIZE` parameter sets the total size in bytes of the data file that
    was specific using `ADD DATATFILE`. Once this file has been created, its size
    cannot be changed; however, you can add more data files to the tablespace using
    [`ALTER TABLESPACE ... ADD DATAFILE`](alter-tablespace.html "15.1.10 ALTER TABLESPACE
    Statement").
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`INITIAL_SIZE`参数设置了使用`ADD DATATFILE`指定的数据文件的总大小（以字节为单位）。创建了此文件后，其大小不能更改；但是，您可以使用[`ALTER
    TABLESPACE ... ADD DATAFILE`](alter-tablespace.html "15.1.10 ALTER TABLESPACE
    Statement")向表空间添加更多数据文件。'
- en: '`INITIAL_SIZE` is optional; its default value is 134217728 (128 MB).'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`INITIAL_SIZE`是可选的；其默认值为134217728（128 MB）。'
- en: On 32-bit systems, the maximum supported value for `INITIAL_SIZE` is 4294967296
    (4 GB).
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在32位系统上，`INITIAL_SIZE`的最大支持值为4294967296（4 GB）。
- en: '`AUTOEXTEND_SIZE`: Ignored by MySQL prior to MySQL 8.0.23; From MySQL 8.0.23,
    defines the amount by which `InnoDB` extends the size of the tablespace when it
    becomes full. The setting must be a multiple of 4MB. The default setting is 0,
    which causes the tablespace to be extended according to the implicit default behavior.
    For more information, see [Section 17.6.3.9, “Tablespace AUTOEXTEND_SIZE Configuration”](innodb-tablespace-autoextend-size.html
    "17.6.3.9 Tablespace AUTOEXTEND_SIZE Configuration").'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOEXTEND_SIZE`：在MySQL 8.0.23之前被MySQL忽略；从MySQL 8.0.23开始，定义了`InnoDB`在表空间变满时扩展的量。设置必须是4MB的倍数。默认设置为0，这将导致表空间根据隐式默认行为进行扩展。有关更多信息，请参见[Section 17.6.3.9,
    “Tablespace AUTOEXTEND_SIZE Configuration”](innodb-tablespace-autoextend-size.html
    "17.6.3.9 Tablespace AUTOEXTEND_SIZE Configuration")。'
- en: Has no effect in any release of MySQL NDB Cluster 8.0, regardless of the storage
    engine used.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在任何MySQL NDB Cluster 8.0的版本中都没有任何影响，无论使用的存储引擎是什么。
- en: '`MAX_SIZE`: Currently ignored by MySQL; reserved for possible future use. Has
    no effect in any release of MySQL 8.0 or MySQL NDB Cluster 8.0, regardless of
    the storage engine used.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAX_SIZE`：当前MySQL忽略；保留以备可能的将来使用。在MySQL 8.0或MySQL NDB Cluster 8.0的任何版本中都没有任何影响，无论使用的存储引擎是什么。'
- en: '`NODEGROUP`: Currently ignored by MySQL; reserved for possible future use.
    Has no effect in any release of MySQL 8.0 or MySQL NDB Cluster 8.0, regardless
    of the storage engine used.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NODEGROUP`：当前MySQL忽略；保留以备可能的将来使用。在MySQL 8.0或MySQL NDB Cluster 8.0的任何版本中都没有任何影响，无论使用的存储引擎是什么。'
- en: '`WAIT`: Currently ignored by MySQL; reserved for possible future use. Has no
    effect in any release of MySQL 8.0 or MySQL NDB Cluster 8.0, regardless of the
    storage engine used.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WAIT`：当前MySQL忽略；保留以备可能的将来使用。在MySQL 8.0或MySQL NDB Cluster 8.0的任何版本中都没有任何影响，无论使用的存储引擎是什么。'
- en: '`COMMENT`: Currently ignored by MySQL; reserved for possible future use. Has
    no effect in any release of MySQL 8.0 or MySQL NDB Cluster 8.0, regardless of
    the storage engine used.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COMMENT`：当前MySQL忽略；保留以备可能的将来使用。在MySQL 8.0或MySQL NDB Cluster 8.0的任何版本中都没有任何影响，无论使用的存储引擎是什么。'
- en: The `ENCRYPTION` clause enables or disables page-level data encryption for an
    `InnoDB` general tablespace. Encryption support for general tablespaces was introduced
    in MySQL 8.0.13.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENCRYPTION`子句为`InnoDB`通用表空间启用或禁用页面级数据加密。MySQL 8.0.13引入了对通用表空间的加密支持。'
- en: As of MySQL 8.0.16, if the `ENCRYPTION` clause is not specified, the [`default_table_encryption`](server-system-variables.html#sysvar_default_table_encryption)
    setting controls whether encryption is enabled. The `ENCRYPTION` clause overrides
    the [`default_table_encryption`](server-system-variables.html#sysvar_default_table_encryption)
    setting. However, if the [`table_encryption_privilege_check`](server-system-variables.html#sysvar_table_encryption_privilege_check)
    variable is enabled, the [`TABLE_ENCRYPTION_ADMIN`](privileges-provided.html#priv_table-encryption-admin)
    privilege is required to use an `ENCRYPTION` clause setting that differs from
    the [`default_table_encryption`](server-system-variables.html#sysvar_default_table_encryption)
    setting.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.16，如果未指定 `ENCRYPTION` 子句，则[`default_table_encryption`](server-system-variables.html#sysvar_default_table_encryption)
    设置控制是否启用加密。`ENCRYPTION` 子句会覆盖[`default_table_encryption`](server-system-variables.html#sysvar_default_table_encryption)
    设置。但是，如果启用了[`table_encryption_privilege_check`](server-system-variables.html#sysvar_table_encryption_privilege_check)
    变量，则需要[`TABLE_ENCRYPTION_ADMIN`](privileges-provided.html#priv_table-encryption-admin)
    权限才能使用与[`default_table_encryption`](server-system-variables.html#sysvar_default_table_encryption)
    设置不同的 `ENCRYPTION` 子句设置。
- en: A keyring plugin must be installed and configured before an encryption-enabled
    tablespace can be created.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 必须在创建启用加密的表空间之前安装和配置一个密钥环插件。
- en: When a general tablespace is encrypted, all tables residing in the tablespace
    are encrypted. Likewise, a table created in an encrypted tablespace is encrypted.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当通用表空间加密时，驻留在表空间中的所有表都会被加密。同样，创建在加密表空间中的表也会被加密。
- en: For more information, see [Section 17.13, “InnoDB Data-at-Rest Encryption”](innodb-data-encryption.html
    "17.13 InnoDB Data-at-Rest Encryption")
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参见 [第 17.13 节，“InnoDB 数据静态加密”](innodb-data-encryption.html "17.13 InnoDB
    Data-at-Rest Encryption")
- en: '`ENGINE`: Defines the storage engine which uses the tablespace, where *`engine_name`*
    is the name of the storage engine. Currently, only the `InnoDB` storage engine
    is supported by standard MySQL 8.0 releases. MySQL NDB Cluster supports both `NDB`
    and `InnoDB` tablespaces. The value of the [`default_storage_engine`](server-system-variables.html#sysvar_default_storage_engine)
    system variable is used for `ENGINE` if the option is not specified.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENGINE`：定义使用表空间的存储引擎，其中 *`engine_name`* 是存储引擎的名称。目前，标准 MySQL 8.0 发行版仅支持 `InnoDB`
    存储引擎。MySQL NDB Cluster 支持 `NDB` 和 `InnoDB` 表空间。如果未指定选项，则 `ENGINE` 使用 [`default_storage_engine`](server-system-variables.html#sysvar_default_storage_engine)
    系统变量的值。'
- en: The `ENGINE_ATTRIBUTE` option (available as of MySQL 8.0.21) is used to specify
    tablespace attributes for primary storage engines. The option is reserved for
    future use.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENGINE_ATTRIBUTE` 选项（自 MySQL 8.0.21 起可用）用于指定主存储引擎的表空间属性。该选项保留供将来使用。'
- en: Permitted values are a string literal containing a valid `JSON` document or
    an empty string (''). Invalid `JSON` is rejected.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许的值是包含有效`JSON`文档的字符串文字或空字符串（''）。无效的`JSON`会被拒绝。
- en: '[PRE2]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`ENGINE_ATTRIBUTE` values can be repeated without error. In this case, the
    last specified value is used.'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ENGINE_ATTRIBUTE` 值可以重复而不会出错。在这种情况下，将使用最后指定的值。'
- en: '`ENGINE_ATTRIBUTE` values are not checked by the server, nor are they cleared
    when the table''s storage engine is changed.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ENGINE_ATTRIBUTE` 值不会被服务器检查，也不会在表的存储引擎更改时清除。'
- en: Notes
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For the rules covering the naming of MySQL tablespaces, see [Section 11.2, “Schema
    Object Names”](identifiers.html "11.2 Schema Object Names"). In addition to these
    rules, the slash character (“/”) is not permitted, nor can you use names beginning
    with `innodb_`, as this prefix is reserved for system use.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 MySQL 表空间命名规则，请参见 [第 11.2 节，“模式对象名称”](identifiers.html "11.2 Schema Object
    Names")。除了这些规则外，斜杠字符（“/”）不允许使用，也不能使用以 `innodb_` 开头的名称，因为此前缀保留供系统使用。
- en: Creation of temporary general tablespaces is not supported.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建临时通用表空间不受支持。
- en: General tablespaces do not support temporary tables.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用表空间不支持临时表。
- en: The `TABLESPACE` option may be used with [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") or [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") to assign an `InnoDB` table partition or subpartition to a file-per-table
    tablespace. All partitions must belong to the same storage engine. Assigning table
    partitions to shared `InnoDB` tablespaces is not supported. Shared tablespaces
    include the `InnoDB` system tablespace and general tablespaces.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLESPACE`选项可用于将`InnoDB`表分区或子分区分配给文件-每表表空间，可与[`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement")或[`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement")一起使用。所有分区必须属于相同的存储引擎。不支持将表分区分配给共享的InnoDB表空间。共享表空间包括InnoDB系统表空间和通用表空间。'
- en: General tablespaces support the addition of tables of any row format using [`CREATE
    TABLE ... TABLESPACE`](create-table.html "15.1.20 CREATE TABLE Statement"). [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    does not need to be enabled.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用表空间支持使用[`CREATE TABLE ... TABLESPACE`](create-table.html "15.1.20 CREATE TABLE
    Statement")添加任何行格式的表。不需要启用[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)。
- en: '[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode) is
    not applicable to general tablespaces. Tablespace management rules are strictly
    enforced independently of [`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode).
    If `CREATE TABLESPACE` parameters are incorrect or incompatible, the operation
    fails regardless of the [`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)
    setting. When a table is added to a general tablespace using [`CREATE TABLE ...
    TABLESPACE`](create-table.html "15.1.20 CREATE TABLE Statement") or [`ALTER TABLE
    ... TABLESPACE`](alter-table.html "15.1.9 ALTER TABLE Statement"), [`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)
    is ignored but the statement is evaluated as if [`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)
    is enabled.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)不适用于通用表空间。表空间管理规则严格执行，与[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)无关。如果`CREATE
    TABLESPACE`参数不正确或不兼容，则无论[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)设置如何，操作都会失败。当使用[`CREATE
    TABLE ... TABLESPACE`](create-table.html "15.1.20 CREATE TABLE Statement")或[`ALTER
    TABLE ... TABLESPACE`](alter-table.html "15.1.9 ALTER TABLE Statement")将表添加到通用表空间时，将忽略[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)，但该语句将被评估为启用了[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)。'
- en: Use `DROP TABLESPACE` to remove a tablespace. All tables must be dropped from
    a tablespace using [`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE Statement")
    prior to dropping the tablespace. Before dropping an NDB Cluster tablespace you
    must also remove all its data files using one or more [`ALTER TABLESPACE ... DROP
    DATATFILE`](alter-tablespace.html "15.1.10 ALTER TABLESPACE Statement") statements.
    See [Section 25.6.11.1, “NDB Cluster Disk Data Objects”](mysql-cluster-disk-data-objects.html
    "25.6.11.1 NDB Cluster Disk Data Objects").
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`DROP TABLESPACE`来删除表空间。在删除表空间之前，必须使用[`DROP TABLE`](drop-table.html "15.1.32 DROP
    TABLE Statement")删除表空间中的所有表。在删除NDB Cluster表空间之前，还必须使用一个或多个[`ALTER TABLESPACE ...
    DROP DATATFILE`](alter-tablespace.html "15.1.10 ALTER TABLESPACE Statement")语句删除所有数据文件。参见[Section 25.6.11.1,
    “NDB Cluster Disk Data Objects”](mysql-cluster-disk-data-objects.html "25.6.11.1 NDB
    Cluster Disk Data Objects")。
- en: All parts of an `InnoDB` table added to an `InnoDB` general tablespace reside
    in the general tablespace, including indexes and [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") pages.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加到InnoDB通用表空间的InnoDB表的所有部分都驻留在通用表空间中，包括索引和[`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types")页面。
- en: For an `NDB` table assigned to a tablespace, only those columns which are not
    indexed are stored on disk, and actually use the tablespace data files. Indexes
    and indexed columns for all `NDB` tables are always kept in memory.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于分配给表空间的NDB表，只有未建立索引的列存储在磁盘上，并实际使用表空间数据文件。所有NDB表的索引和已建立索引的列始终保留在内存中。
- en: Similar to the system tablespace, truncating or dropping tables stored in a
    general tablespace creates free space internally in the general tablespace [.ibd
    data file](glossary.html#glos_ibd_file ".ibd file") which can only be used for
    new `InnoDB` data. Space is not released back to the operating system as it is
    for file-per-table tablespaces.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与系统表空间类似，截断或删除存储在通用表空间中的表会在通用表空间的.ibd数据文件中创建内部的可用空间，该空间只能用于新的InnoDB数据。与文件-每表表空间不同，空间不会像对操作系统释放那样被释放。
- en: A general tablespace is not associated with any database or schema.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用表空间不与任何数据库或模式相关联。
- en: '[`ALTER TABLE ... DISCARD TABLESPACE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") and [`ALTER TABLE ...IMPORT TABLESPACE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") are not supported for tables that belong to a general tablespace.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ALTER TABLE ... DISCARD TABLESPACE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") 和 [`ALTER TABLE ...IMPORT TABLESPACE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") 不支持属于通用表空间的表。'
- en: The server uses tablespace-level metadata locking for DDL that references general
    tablespaces. By comparison, the server uses table-level metadata locking for DDL
    that references file-per-table tablespaces.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器对引用通用表空间的DDL使用表空间级元数据锁定。相比之下，服务器对引用每个表的文件表空间的DDL使用表级元数据锁定。
- en: A generated or existing tablespace cannot be changed to a general tablespace.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的或现有的表空间不能更改为通用表空间。
- en: There is no conflict between general tablespace names and file-per-table tablespace
    names. The “/” character, which is present in file-per-table tablespace names,
    is not permitted in general tablespace names.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用表空间名称与每个表的文件表空间名称之间没有冲突。通用表空间名称中不允许出现文件表空间名称中的“/”字符。
- en: '[**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    and [**mysqlpump**](mysqlpump.html "6.5.6 mysqlpump — A Database Backup Program")
    do not dump `InnoDB` [`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE
    TABLESPACE Statement") statements.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    和 [**mysqlpump**](mysqlpump.html "6.5.6 mysqlpump — A Database Backup Program")
    不会转储`InnoDB` [`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE
    Statement")语句。'
- en: InnoDB Examples
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: InnoDB 示例
- en: This example demonstrates creating a general tablespace and adding three uncompressed
    tables of different row formats.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例演示了创建一个通用表空间，并添加三个不同行格式的未压缩表。
- en: '[PRE3]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This example demonstrates creating a general tablespace and adding a compressed
    table. The example assumes a default [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    value of 16K. The `FILE_BLOCK_SIZE` of 8192 requires that the compressed table
    have a `KEY_BLOCK_SIZE` of 8.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例演示了创建一个通用表空间并添加一个压缩表。该示例假定默认的[`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)值为16K。8192的`FILE_BLOCK_SIZE`要求压缩表具有8的`KEY_BLOCK_SIZE`。
- en: '[PRE4]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This example demonstrates creating a general tablespace without specifying the
    `ADD DATAFILE` clause, which is optional as of MySQL 8.0.14.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例演示了创建一个通用表空间而不指定`ADD DATAFILE`子句，这在MySQL 8.0.14中是可选的。
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This example demonstrates creating an undo tablespace.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例演示了创建撤销表空间。
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: NDB Example
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: NDB 示例
- en: 'Suppose that you wish to create an NDB Cluster Disk Data tablespace named `myts`
    using a datafile named `mydata-1.dat`. An `NDB` tablespace always requires the
    use of a log file group consisting of one or more undo log files. For this example,
    we first create a log file group named `mylg` that contains one undo long file
    named `myundo-1.dat`, using the [`CREATE LOGFILE GROUP`](create-logfile-group.html
    "15.1.16 CREATE LOGFILE GROUP Statement") statement shown here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您希望使用名为`mydata-1.dat`的数据文件创建一个名为`myts`的NDB Cluster磁盘数据表空间。一个`NDB`表空间总是需要使用一个或多个撤销日志文件组的日志文件。对于此示例，我们首先创建一个名为`mylg`的日志文件组，其中包含一个名为`myundo-1.dat`的撤销长文件，使用此处显示的[`CREATE
    LOGFILE GROUP`](create-logfile-group.html "15.1.16 CREATE LOGFILE GROUP Statement")语句：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you can create the tablespace previously described using the following
    statement:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下语句创建先前描述的表空间：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can now create a Disk Data table using a [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statement with the `TABLESPACE` and `STORAGE
    DISK` options, similar to what is shown here:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用带有`TABLESPACE`和`STORAGE DISK`选项的[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement")语句来创建一个磁盘数据表，类似于下面显示的内容：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It is important to note that only the `dob` and `joined` columns from `mytable`
    are actually stored on disk, due to the fact that the `id`, `lname`, and `fname`
    columns are all indexed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，由于`id`、`lname`和`fname`列都被索引，因此`mytable`中只有`dob`和`joined`列实际上存储在磁盘上。
- en: 'As mentioned previously, when `CREATE TABLESPACE` is used with `ENGINE [=]
    NDB`, a tablespace and associated data file are created on each NDB Cluster data
    node. You can verify that the data files were created and obtain information about
    them by querying the Information Schema [`FILES`](information-schema-files-table.html
    "28.3.15 The INFORMATION_SCHEMA FILES Table") table, as shown here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当`CREATE TABLESPACE`与`ENGINE [=] NDB`一起使用时，将在每个NDB Cluster数据节点上创建一个表空间和相关的数据文件。您可以通过查询信息模式[`FILES`](information-schema-files-table.html
    "28.3.15 The INFORMATION_SCHEMA FILES Table")表来验证数据文件是否已创建并获取有关它们的信息，如下所示：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For additional information and examples, see [Section 25.6.11.1, “NDB Cluster
    Disk Data Objects”](mysql-cluster-disk-data-objects.html "25.6.11.1 NDB Cluster
    Disk Data Objects").
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参见[第 25.6.11.1 节，“NDB 集群磁盘数据对象”](mysql-cluster-disk-data-objects.html
    "25.6.11.1 NDB Cluster Disk Data Objects")。
