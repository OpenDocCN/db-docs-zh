- en: 'A.15 MySQL 8.0 FAQ: MySQL Enterprise Thread Pool'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'A.15 MySQL 8.0 FAQ: MySQL企业线程池'
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/faqs-thread-pool.html](https://dev.mysql.com/doc/refman/8.0/en/faqs-thread-pool.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/faqs-thread-pool.html](https://dev.mysql.com/doc/refman/8.0/en/faqs-thread-pool.html)
- en: A.15.1\. [What is the Thread Pool and what problem does it solve?](faqs-thread-pool.html#faq-thread-pool-what-solve)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: A.15.1\. [什么是线程池，它解决了什么问题？](faqs-thread-pool.html#faq-thread-pool-what-solve)
- en: A.15.2\. [How does the Thread Pool limit and manage concurrent sessions and
    transactions for optimal performance and throughput?](faqs-thread-pool.html#faq-thread-pool-how-manage-operation)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: A.15.2\. [线程池如何限制和管理并发会话和事务，以实现最佳性能和吞吐量？](https://dev.mysql.com/doc/refman/8.0/en/faqs-thread-pool.html#faq-thread-pool-how-manage-operation)
- en: A.15.3\. [How is the Thread Pool different from the client side Connection Pool?](faqs-thread-pool.html#faq-thread-pool-how-diff-connector-pool)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: A.15.3\. [线程池与客户端端连接池有何不同？](faqs-thread-pool.html#faq-thread-pool-how-diff-connector-pool)
- en: A.15.4\. [When should I use the Thread Pool?](faqs-thread-pool.html#faq-thread-pool-when-use)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: A.15.4\. [何时应该使用线程池？](faqs-thread-pool.html#faq-thread-pool-when-use)
- en: A.15.5\. [Are there recommended Thread Pool configurations?](faqs-thread-pool.html#faq-thread-pool-what-config-recommend)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: A.15.5\. [有推荐的线程池配置吗？](faqs-thread-pool.html#faq-thread-pool-what-config-recommend)
- en: '| **A.15.1.** | What is the Thread Pool and what problem does it solve? |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| **A.15.1.** | 什么是线程池，它解决了什么问题？'
- en: '|  | The MySQL Thread Pool is a MySQL server plugin that extends the default
    connection-handling capabilities of the MySQL server to limit the number of concurrently
    executing statements/queries and transactions to ensure that each has sufficient
    CPU and memory resources to fulfill its task. For MySQL 8.0, the Thread Pool plugin
    is included in MySQL Enterprise Edition, a commercial product.The default thread-handling
    model in MySQL Server executes statements using one thread per client connection.
    As more clients connect to the server and execute statements, overall performance
    degrades. The Thread Pool plugin provides an alternative thread-handling model
    designed to reduce overhead and improve performance. The Thread Pool plugin increases
    server performance by efficiently managing statement execution threads for large
    numbers of client connections, especially on modern multi-CPU/Core systems.For
    more information, see [Section 7.6.3, “MySQL Enterprise Thread Pool”](thread-pool.html
    "7.6.3 MySQL Enterprise Thread Pool"). |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|  | MySQL线程池是一个MySQL服务器插件，扩展了MySQL服务器的默认连接处理能力，限制了同时执行的语句/查询和事务的数量，以确保每个都有足够的CPU和内存资源来完成其任务。对于MySQL
    8.0，线程池插件包含在MySQL企业版中，这是一个商业产品。MySQL服务器中的默认线程处理模型使用一个线程来执行每个客户端连接的语句。随着更多客户端连接到服务器并执行语句，整体性能会下降。线程池插件提供了一种旨在减少开销并提高性能的替代线程处理模型。线程池插件通过有效地管理大量客户端连接的语句执行线程来提高服务器性能，特别是在现代多CPU/核心系统上。更多信息，请参见[Section 7.6.3，“MySQL企业线程池”](thread-pool.html
    "7.6.3 MySQL Enterprise Thread Pool")。'
- en: '| **A.15.2.** | How does the Thread Pool limit and manage concurrent sessions
    and transactions for optimal performance and throughput? |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| **A.15.2.** | 线程池如何限制和管理并发会话和事务，以实现最佳性能和吞吐量？'
- en: '|  | The Thread Pool uses a “divide and conquer” approach to limiting and balancing
    concurrency. Unlike the default connection handling of the MySQL Server, the Thread
    Pool separates connections and threads, so there is no fixed relationship between
    connections and the threads that execute statements received from those connections.
    The Thread Pool then manages client connections within configurable thread groups,
    where they are prioritized and queued based on the nature of the work they were
    submitted to accomplish.For more information, see [Section 7.6.3.3, “Thread Pool
    Operation”](thread-pool-operation.html "7.6.3.3 Thread Pool Operation"). |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|  | 线程池使用“分而治之”的方法来限制和平衡并发。与MySQL服务器的默认连接处理不同，线程池将连接和线程分开，因此连接和执行来自这些连接的语句的线程之间没有固定的关系。然后，线程池在可配置的线程组内管理客户端连接，根据它们被提交以完成的工作的性质进行优先级排序和排队。更多信息，请参见[Section 7.6.3.3，“线程池操作”](thread-pool-operation.html
    "7.6.3.3 Thread Pool Operation")。'
- en: '| **A.15.3.** | How is the Thread Pool different from the client side Connection
    Pool? |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| **A.15.3.** | 线程池与客户端端连接池有何不同？'
- en: '|  | The MySQL Connection Pool operates on the client side to ensure that a
    MySQL client does not constantly connect to and disconnect from the MySQL server.
    It is designed to cache idle connections in the MySQL client for use by other
    users as they are needed. This minimizes the overhead and expense of establishing
    and tearing down connections as queries are submitted to the MySQL server. The
    MySQL Connection Pool has no visibility as to the query handling capabilities
    or load of the back-end MySQL server. By contrast, the Thread Pool operates on
    the MySQL server side and is designed to manage the execution of inbound concurrent
    connections and queries as they are received from the client connections accessing
    the back-end MySQL database. Because of the separation of duties, the MySQL Connection
    Pool and Thread Pool are orthogonal and can be used independent of each other.MySQL
    Connection Pooling via the MySQL Connectors is covered in [Chapter 31, *Connectors
    and APIs*](connectors-apis.html "Chapter 31 Connectors and APIs"). |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|  | MySQL 连接池在客户端上运行，以确保 MySQL 客户端不会不断连接到并断开与 MySQL 服务器的连接。它旨在在 MySQL 客户端中缓存空闲连接，以供其他用户在需要时使用。这最小化了在将查询提交给
    MySQL 服务器时建立和拆除连接的开销和费用。MySQL 连接池无法看到后端 MySQL 服务器的查询处理能力或负载。相比之下，线程池在 MySQL 服务器端运行，旨在管理从访问后端
    MySQL 数据库的客户端连接接收到的入站并发连接和查询的执行。由于职责的分离，MySQL 连接池和线程池是正交的，可以独立使用。通过 MySQL 连接器进行
    MySQL 连接池化在 [第 31 章，“连接器和 API”](connectors-apis.html "第 31 章 连接器和 API") 中有介绍。
    |'
- en: '| **A.15.4.** | When should I use the Thread Pool? |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| **A.15.4.** | 我何时应该使用线程池？ |'
- en: '|  | There are a few rules of thumb to consider for optimal Thread Pool use
    cases:The MySQL [`Threads_running`](server-status-variables.html#statvar_Threads_running)
    variable keeps track of the number of concurrent statements currently executing
    in the MySQL Server. If this variable consistently exceeds a region where the
    server won''t operate optimally (usually going beyond 40 for InnoDB workloads),
    the Thread Pool should be beneficial, especially in extreme parallel overload
    situations.If you are using the [`innodb_thread_concurrency`](innodb-parameters.html#sysvar_innodb_thread_concurrency)
    to limit the number of concurrently executing statements, you should find that
    the Thread Pool solves the same problem, only better, by assigning connections
    to thread groups, then queuing executions based on transactional content, user
    defined designations, and so forth.Lastly, if your workload comprises mainly short
    queries, the Thread Pool should be beneficial.To learn more, see [Section 7.6.3.4,
    “Thread Pool Tuning”](thread-pool-tuning.html "7.6.3.4 Thread Pool Tuning"). |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|  | 有一些经验法则可供考虑以获得最佳的线程池使用情况：MySQL [`Threads_running`](server-status-variables.html#statvar_Threads_running)
    变量跟踪当前在 MySQL 服务器中执行的并发语句数量。如果这个变量持续超过服务器无法正常运行的区域（通常对 InnoDB 工作负载超过 40），线程池应该是有益的，特别是在极端的并行过载情况下。如果您正在使用
    [`innodb_thread_concurrency`](innodb-parameters.html#sysvar_innodb_thread_concurrency)
    来限制同时执行语句的数量，您应该发现线程池解决了同样的问题，只是更好地通过将连接分配给线程组，然后根据事务内容、用户定义的指定等排队执行。最后，如果您的工作负载主要由短查询组成，线程池应该是有益的。要了解更多信息，请参见
    [第 7.6.3.4 节，“线程池调优”](thread-pool-tuning.html "7.6.3.4 线程池调优")。 |'
- en: '| **A.15.5.** | Are there recommended Thread Pool configurations? |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **A.15.5.** | 是否有推荐的线程池配置？ |'
- en: '|  | The Thread Pool has a number of user case driven configuration parameters
    that affect its performance. To learn about these and tips on tuning, see [Section 7.6.3.4,
    “Thread Pool Tuning”](thread-pool-tuning.html "7.6.3.4 Thread Pool Tuning"). |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '|  | 线程池具有一些用户案例驱动的配置参数，这些参数会影响其性能。要了解这些参数以及调优技巧，请参见 [第 7.6.3.4 节，“线程池调优”](thread-pool-tuning.html
    "7.6.3.4 线程池调优")。 |'
