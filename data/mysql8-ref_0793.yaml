- en: 14.4.1 Operator Precedence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.4.1 运算符优先级
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html](https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html](https://dev.mysql.com/doc/refman/8.0/en/operator-precedence.html)
- en: Operator precedences are shown in the following list, from highest precedence
    to the lowest. Operators that are shown together on a line have the same precedence.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符优先级按照以下列表从最高优先级到最低优先级显示。在同一行上显示在一起的运算符具有相同的优先级。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The precedence of `=` depends on whether it is used as a comparison operator
    ([`=`](comparison-operators.html#operator_equal)) or as an assignment operator
    ([`=`](assignment-operators.html#operator_assign-equal)). When used as a comparison
    operator, it has the same precedence as [`<=>`](comparison-operators.html#operator_equal-to),
    [`>=`](comparison-operators.html#operator_greater-than-or-equal), [`>`](comparison-operators.html#operator_greater-than),
    [`<=`](comparison-operators.html#operator_less-than-or-equal), [`<`](comparison-operators.html#operator_less-than),
    [`<>`](comparison-operators.html#operator_not-equal), [`!=`](comparison-operators.html#operator_not-equal),
    [`IS`](comparison-operators.html#operator_is), [`LIKE`](string-comparison-functions.html#operator_like),
    [`REGEXP`](regexp.html#operator_regexp), and [`IN()`](comparison-operators.html#operator_in).
    When used as an assignment operator, it has the same precedence as [`:=`](assignment-operators.html#operator_assign-value).
    [Section 15.7.6.1, “SET Syntax for Variable Assignment”](set-variable.html "15.7.6.1 SET
    Syntax for Variable Assignment"), and [Section 11.4, “User-Defined Variables”](user-variables.html
    "11.4 User-Defined Variables"), explain how MySQL determines which interpretation
    of `=` should apply.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`=`的优先级取决于它是作为比较运算符([`=`](comparison-operators.html#operator_equal))还是作为赋值运算符([`=`](assignment-operators.html#operator_assign-equal))使用。当作为比较运算符使用时，它与[`<=>`](comparison-operators.html#operator_equal-to)、[`>=`](comparison-operators.html#operator_greater-than-or-equal)、[`>`](comparison-operators.html#operator_greater-than)、[`<=`](comparison-operators.html#operator_less-than-or-equal)、[`<`](comparison-operators.html#operator_less-than)、[`<>`](comparison-operators.html#operator_not-equal)、[`!=`](comparison-operators.html#operator_not-equal)、[`IS`](comparison-operators.html#operator_is)、[`LIKE`](string-comparison-functions.html#operator_like)、[`REGEXP`](regexp.html#operator_regexp)和[`IN()`](comparison-operators.html#operator_in)具有相同的优先级。当作为赋值运算符使用时，它与[`:=`](assignment-operators.html#operator_assign-value)具有相同的优先级。[“变量赋值的SET语法”](set-variable.html
    "15.7.6.1 SET Syntax for Variable Assignment")和[“用户定义变量”](user-variables.html
    "11.4 User-Defined Variables")部分解释了MySQL如何确定应该应用哪种`=`的解释。'
- en: For operators that occur at the same precedence level within an expression,
    evaluation proceeds left to right, with the exception that assignments evaluate
    right to left.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在表达式中具有相同优先级的运算符，计算从左到右进行，但赋值运算符的计算是从右到左进行。
- en: 'The precedence and meaning of some operators depends on the SQL mode:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一些运算符的优先级和含义取决于SQL模式：
- en: By default, [`||`](logical-operators.html#operator_or) is a logical [`OR`](logical-operators.html#operator_or)
    operator. With [`PIPES_AS_CONCAT`](sql-mode.html#sqlmode_pipes_as_concat) enabled,
    [`||`](logical-operators.html#operator_or) is string concatenation, with a precedence
    between [`^`](bit-functions.html#operator_bitwise-xor) and the unary operators.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，[`||`](logical-operators.html#operator_or)是逻辑[`OR`](logical-operators.html#operator_or)运算符。启用[`PIPES_AS_CONCAT`](sql-mode.html#sqlmode_pipes_as_concat)后，[`||`](logical-operators.html#operator_or)是字符串连接运算符，优先级介于[`^`](bit-functions.html#operator_bitwise-xor)和一元运算符之间。
- en: By default, [`!`](logical-operators.html#operator_not) has a higher precedence
    than `NOT`. With [`HIGH_NOT_PRECEDENCE`](sql-mode.html#sqlmode_high_not_precedence)
    enabled, [`!`](logical-operators.html#operator_not) and `NOT` have the same precedence.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，[`!`](logical-operators.html#operator_not)的优先级高于`NOT`。启用[`HIGH_NOT_PRECEDENCE`](sql-mode.html#sqlmode_high_not_precedence)后，[`!`](logical-operators.html#operator_not)和`NOT`具有相同的优先级。
- en: See [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server SQL Modes").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[“服务器SQL模式”](sql-mode.html "7.1.11 Server SQL Modes")第7.1.11节。
- en: 'The precedence of operators determines the order of evaluation of terms in
    an expression. To override this order and group terms explicitly, use parentheses.
    For example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符的优先级确定了表达式中项的计算顺序。要覆盖这个顺序并显式地分组项，请使用括号。例如：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
