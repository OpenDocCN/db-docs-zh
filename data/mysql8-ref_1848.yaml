- en: 26.2.4 HASH Partitioning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 26.2.4 哈希分区
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-hash.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-hash.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-hash.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-hash.html)
- en: '[26.2.4.1 LINEAR HASH Partitioning](partitioning-linear-hash.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.2.4.1 线性哈希分区](partitioning-linear-hash.html)'
- en: Partitioning by `HASH` is used primarily to ensure an even distribution of data
    among a predetermined number of partitions. With range or list partitioning, you
    must specify explicitly which partition a given column value or set of column
    values should be stored in; with hash partitioning, this decision is taken care
    of for you, and you need only specify a column value or expression based on a
    column value to be hashed and the number of partitions into which the partitioned
    table is to be divided.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 主要使用`HASH`分区来确保数据在预定数量的分区之间均匀分布。使用范围或列表分区，您必须明确指定给定列值或一组列值应存储在哪个分区；使用哈希分区，这个决定已经为您处理，您只需指定一个基于列值的列值或表达式进行哈希处理，以及要将分区表分成的分区数。
- en: To partition a table using `HASH` partitioning, it is necessary to append to
    the [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement
    a `PARTITION BY HASH (*`expr`*)` clause, where *`expr`* is an expression that
    returns an integer. This can simply be the name of a column whose type is one
    of MySQL's integer types. In addition, you most likely want to follow this with
    `PARTITIONS *`num`*`, where *`num`* is a positive integer representing the number
    of partitions into which the table is to be divided.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`HASH`分区对表进行分区，必须在[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE
    Statement")语句中追加一个`PARTITION BY HASH (*`expr`*)`子句，其中*`expr`*是返回整数的表达式。这可以简单地是MySQL整数类型之一的列名。此外，您很可能希望在此之后跟上`PARTITIONS
    *`num`*`，其中*`num`*是表示要将表分成的分区数的正整数。
- en: Note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For simplicity, the tables in the examples that follow do not use any keys.
    You should be aware that, if a table has any unique keys, every column used in
    the partitioning expression for this table must be part of every unique key, including
    the primary key. See [Section 26.6.1, “Partitioning Keys, Primary Keys, and Unique
    Keys”](partitioning-limitations-partitioning-keys-unique-keys.html "26.6.1 Partitioning
    Keys, Primary Keys, and Unique Keys"), for more information.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为简单起见，接下来的示例中的表不使用任何键。您应该知道，如果表具有任何唯一键，那么用于此表的分区表达式中的每一列都必须是每个唯一键的一部分，包括主键。有关更多信息，请参见[第26.6.1节“分区键、主键和唯一键”](partitioning-limitations-partitioning-keys-unique-keys.html
    "26.6.1 分区键、主键和唯一键")。
- en: 'The following statement creates a table that uses hashing on the `store_id`
    column and is divided into 4 partitions:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句创建了一个表，该表在`store_id`列上使用哈希分区，并分为4个分区：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you do not include a `PARTITIONS` clause, the number of partitions defaults
    to `1`; using the `PARTITIONS` keyword without a number following it results in
    a syntax error.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不包括`PARTITIONS`子句，则分区数默认为`1`；在`PARTITIONS`关键字后没有跟随数字会导致语法错误。
- en: 'You can also use an SQL expression that returns an integer for *`expr`*. For
    instance, you might want to partition based on the year in which an employee was
    hired. This can be done as shown here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用返回整数的SQL表达式作为*`expr`*。例如，您可能希望根据雇员入职的年份进行分区。可以按照这里所示进行操作：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*`expr`* must return a nonconstant, nonrandom integer value (in other words,
    it should be varying but deterministic), and must not contain any prohibited constructs
    as described in [Section 26.6, “Restrictions and Limitations on Partitioning”](partitioning-limitations.html
    "26.6 Restrictions and Limitations on Partitioning"). You should also keep in
    mind that this expression is evaluated each time a row is inserted or updated
    (or possibly deleted); this means that very complex expressions may give rise
    to performance issues, particularly when performing operations (such as batch
    inserts) that affect a great many rows at one time.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*`expr`*必须返回一个非常量、非随机的整数值（换句话说，它应该是变化的但确定的），并且不得包含任何禁止的构造，如[第26.6节“分区的限制和限制”](partitioning-limitations.html
    "26.6 分区的限制和限制")中所述。您还应该记住，每次插入、更新（或可能删除）一行时，都会评估此表达式；这意味着非常复杂的表达式可能会导致性能问题，特别是在执行影响大量行的操作（如批量插入）时。'
- en: The most efficient hashing function is one which operates upon a single table
    column and whose value increases or decreases consistently with the column value,
    as this allows for “pruning” on ranges of partitions. That is, the more closely
    that the expression varies with the value of the column on which it is based,
    the more efficiently MySQL can use the expression for hash partitioning.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最有效的哈希函数是一个仅作用于单个表列的函数，其值随着列值的增加或减少而一致变化，因为这允许在分区范围上进行“修剪”。也就是说，表达式与其基于的列值的变化越密切，MySQL就能更有效地使用该表达式进行哈希分区。
- en: For example, where `date_col` is a column of type [`DATE`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types"), then the expression [`TO_DAYS(date_col)`](date-and-time-functions.html#function_to-days)
    is said to vary directly with the value of `date_col`, because for every change
    in the value of `date_col`, the value of the expression changes in a consistent
    manner. The variance of the expression [`YEAR(date_col)`](date-and-time-functions.html#function_year)
    with respect to `date_col` is not quite as direct as that of [`TO_DAYS(date_col)`](date-and-time-functions.html#function_to-days),
    because not every possible change in `date_col` produces an equivalent change
    in [`YEAR(date_col)`](date-and-time-functions.html#function_year). Even so, [`YEAR(date_col)`](date-and-time-functions.html#function_year)
    is a good candidate for a hashing function, because it varies directly with a
    portion of `date_col` and there is no possible change in `date_col` that produces
    a disproportionate change in [`YEAR(date_col)`](date-and-time-functions.html#function_year).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当`date_col`是[`DATE`](datetime.html "13.2.2 日期、时间和时间戳类型")类型的列时，表达式[`TO_DAYS(date_col)`](date-and-time-functions.html#function_to-days)被认为与`date_col`的值直接变化，因为对于`date_col`值的每一次变化，表达式的值都以一种一致的方式变化。与`date_col`相关的表达式[`YEAR(date_col)`](date-and-time-functions.html#function_year)的变化与`date_col`不像[`TO_DAYS(date_col)`](date-and-time-functions.html#function_to-days)那么直接，因为并非每一次`date_col`的变化都会产生与[`YEAR(date_col)`](date-and-time-functions.html#function_year)等效的变化。即便如此，[`YEAR(date_col)`](date-and-time-functions.html#function_year)是一个很好的哈希函数候选，因为它与`date_col`的一部分直接变化，并且没有任何可能的`date_col`变化会导致[`YEAR(date_col)`](date-and-time-functions.html#function_year)的不成比例变化。
- en: By way of contrast, suppose that you have a column named `int_col` whose type
    is [`INT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER, INT,
    SMALLINT, TINYINT, MEDIUMINT, BIGINT"). Now consider the expression [`POW(5-int_col,3)
    + 6`](mathematical-functions.html#function_pow). This would be a poor choice for
    a hashing function because a change in the value of `int_col` is not guaranteed
    to produce a proportional change in the value of the expression. Changing the
    value of `int_col` by a given amount can produce widely differing changes in the
    value of the expression. For example, changing `int_col` from `5` to `6` produces
    a change of `-1` in the value of the expression, but changing the value of `int_col`
    from `6` to `7` produces a change of `-7` in the expression value.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，假设你有一个名为`int_col`的列，其类型是[`INT`](integer-types.html "13.1.2 整数类型（精确值） -
    INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")。现在考虑表达式[`POW(5-int_col,3) + 6`](mathematical-functions.html#function_pow)。这将是一个糟糕的哈希函数选择，因为`int_col`值的变化不能保证产生表达式值的成比例变化。通过给定量改变`int_col`的值可能会导致表达式值的差异很大。例如，将`int_col`从`5`更改为`6`会导致表达式值减少`-1`，但将`int_col`的值从`6`更改为`7`会导致表达式值减少`-7`。
- en: In other words, the more closely the graph of the column value versus the value
    of the expression follows a straight line as traced by the equation `y=*`c`*x`
    where *`c`* is some nonzero constant, the better the expression is suited to hashing.
    This has to do with the fact that the more nonlinear an expression is, the more
    uneven the distribution of data among the partitions it tends to produce.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，列值与表达式值之间的图形越接近由方程`y=*`c`*x`跟踪的直线，其中*`c`*是某个非零常数，表达式越适合用于哈希。这与表达式越非线性，数据在分区之间分布越不均匀有关。
- en: In theory, pruning is also possible for expressions involving more than one
    column value, but determining which of such expressions are suitable can be quite
    difficult and time-consuming. For this reason, the use of hashing expressions
    involving multiple columns is not particularly recommended.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，对涉及多个列值的表达式也可以进行修剪，但确定哪些表达式适合可能会非常困难和耗时。因此，不建议特别使用涉及多个列的哈希表达式。
- en: 'When `PARTITION BY HASH` is used, the storage engine determines which partition
    of *`num`* partitions to use based on the modulus of the result of the expression.
    In other words, for a given expression *`expr`*, the partition in which the record
    is stored is partition number *`N`*, where `*`N`* = MOD(*`expr`*, *`num`*)`. Suppose
    that table `t1` is defined as follows, so that it has 4 partitions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`PARTITION BY HASH`时，存储引擎根据表达式的结果的模数确定使用哪个*`num`*分区。换句话说，对于给定的表达式*`expr`*，记录存储在分区号*`N`*中，其中`*`N`*
    = MOD(*`expr`*, *`num`*)`。假设表`t1`定义如下，因此有4个分区：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you insert a record into `t1` whose `col3` value is `''2005-09-15''`, then
    the partition in which it is stored is determined as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向`t1`插入一个`col3`值为`'2005-09-15'`的记录，则存储它的分区如下确定：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: MySQL 8.0 also supports a variant of `HASH` partitioning known as linear hashing
    which employs a more complex algorithm for determining the placement of new rows
    inserted into the partitioned table. See [Section 26.2.4.1, “LINEAR HASH Partitioning”](partitioning-linear-hash.html
    "26.2.4.1 LINEAR HASH Partitioning"), for a description of this algorithm.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0 还支持一种称为线性哈希的`HASH`分区的变体，它采用更复杂的算法来确定插入到分区表中的新行的位置。请参阅[Section 26.2.4.1,
    “线性哈希分区”](partitioning-linear-hash.html "26.2.4.1 线性哈希分区")，了解此算法的描述。
- en: The user-supplied expression is evaluated each time a record is inserted or
    updated. It may also—depending on the circumstances—be evaluated when records
    are deleted.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用户提供的表达式在每次插入或更新记录时进行评估。根据情况，当记录被删除时也可能进行评估。
