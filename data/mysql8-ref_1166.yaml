- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-index-types.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-index-types.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-index-types.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-index-types.html)
- en: 17.6.2.1 Clustered and Secondary Indexes
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.6.2.1 聚簇和二级索引
- en: Each `InnoDB` table has a special index called the clustered index that stores
    row data. Typically, the clustered index is synonymous with the primary key. To
    get the best performance from queries, inserts, and other database operations,
    it is important to understand how `InnoDB` uses the clustered index to optimize
    the common lookup and DML operations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`InnoDB`表都有一个特殊的索引，称为聚簇索引，用于存储行数据。通常，聚簇索引与主键是同义词。为了从查询、插入和其他数据库操作中获得最佳性能，重要的是了解`InnoDB`如何利用聚簇索引来优化常见的查找和DML操作。
- en: When you define a `PRIMARY KEY` on a table, `InnoDB` uses it as the clustered
    index. A primary key should be defined for each table. If there is no logical
    unique and non-null column or set of columns to use a the primary key, add an
    auto-increment column. Auto-increment column values are unique and are added automatically
    as new rows are inserted.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在表上定义`PRIMARY KEY`时，`InnoDB`将其用作聚簇索引。每个表应该定义一个主键。如果没有逻辑上唯一且非空的列或列集可用作主键，则添加一个自增列。自增列的值是唯一的，并在插入新行时自动添加。
- en: If you do not define a `PRIMARY KEY` for a table, `InnoDB` uses the first `UNIQUE`
    index with all key columns defined as `NOT NULL` as the clustered index.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有为表定义`PRIMARY KEY`，`InnoDB`将使用第一个所有关键列定义为`NOT NULL`的`UNIQUE`索引作为聚簇索引。
- en: If a table has no `PRIMARY KEY` or suitable `UNIQUE` index, `InnoDB` generates
    a hidden clustered index named `GEN_CLUST_INDEX` on a synthetic column that contains
    row ID values. The rows are ordered by the row ID that `InnoDB` assigns. The row
    ID is a 6-byte field that increases monotonically as new rows are inserted. Thus,
    the rows ordered by the row ID are physically in order of insertion.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果表没有`PRIMARY KEY`或合适的`UNIQUE`索引，`InnoDB`会在一个包含行ID值的合成列上生成一个隐藏的聚簇索引，该列包含行ID值。行按`InnoDB`分配的行ID递增有序。因此，按行ID排序的行在物理上是按插入顺序排列的。
- en: How the Clustered Index Speeds Up Queries
  id: totrans-6
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 聚簇索引如何加速查询
- en: Accessing a row through the clustered index is fast because the index search
    leads directly to the page that contains the row data. If a table is large, the
    clustered index architecture often saves a disk I/O operation when compared to
    storage organizations that store row data using a different page from the index
    record.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过聚簇索引访问行非常快，因为索引搜索直接导向包含行数据的页面。如果表很大，与使用不同页面存储行数据的存储组织相比，聚簇索引架构通常可以节省磁盘I/O操作。
- en: How Secondary Indexes Relate to the Clustered Index
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 二级索引与聚簇索引的关系
- en: Indexes other than the clustered index are known as secondary indexes. In `InnoDB`,
    each record in a secondary index contains the primary key columns for the row,
    as well as the columns specified for the secondary index. `InnoDB` uses this primary
    key value to search for the row in the clustered index.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了聚簇索引之外的索引称为二级索引。在`InnoDB`中，二级索引中的每个记录都包含行的主键列，以及为二级索引指定的列。`InnoDB`使用这个主键值在聚簇索引中搜索行。
- en: If the primary key is long, the secondary indexes use more space, so it is advantageous
    to have a short primary key.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主键很长，二级索引会占用更多空间，因此拥有一个较短的主键是有利的。
- en: For guidelines to take advantage of `InnoDB` clustered and secondary indexes,
    see [Section 10.3, “Optimization and Indexes”](optimization-indexes.html "10.3 Optimization
    and Indexes").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有关利用`InnoDB`聚簇和二级索引的指导方针，请参见[第10.3节，“优化和索引”](optimization-indexes.html "10.3 Optimization
    and Indexes")。
