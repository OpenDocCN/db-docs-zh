- en: SQLite As An Application File Format
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite 作为应用程序文件格式
- en: 原文：[https://sqlite.com/appfileformat.html](https://sqlite.com/appfileformat.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/appfileformat.html](https://sqlite.com/appfileformat.html)
- en: Executive Summary
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行摘要
- en: 'An SQLite database file with a defined schema often makes an excellent application
    file format. Here are a dozen reasons why this is so:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具有定义的模式的 SQLite 数据库文件通常是一个出色的应用程序文件格式。以下是为何如此的十几个理由：
- en: Simplified Application Development
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简化应用开发
- en: Single-File Documents
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单文件文档
- en: High-Level Query Language
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高级查询语言
- en: Accessible Content
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可访问的内容
- en: Cross-Platform
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跨平台
- en: Atomic Transactions
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原子事务
- en: Incremental And Continuous Updates
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增量和连续更新
- en: Easily Extensible
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 易于扩展
- en: Performance
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 性能
- en: Concurrent Use By Multiple Processes
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多进程并发使用
- en: Multiple Programming Languages
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多种编程语言
- en: Better Applications
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更好的应用程序
- en: Each of these points will be described in more detail below, after first considering
    more closely the meaning of "application file format". See also the [short version](aff_short.html)
    of this whitepaper.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细描述这些点之前，我们先更仔细地考虑“应用程序文件格式”的含义。另请参阅本白皮书的[简短版本](aff_short.html)。
- en: What Is An Application File Format?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是应用程序文件格式？
- en: 'An "application file format" is the file format used to persist application
    state to disk or to exchange information between programs. There are thousands
    of application file formats in use today. Here are just a few examples:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “应用程序文件格式”是用于将应用程序状态持久化到磁盘或在程序之间交换信息的文件格式。今天有成千上万种应用程序文件格式在使用中。以下仅是一些示例：
- en: DOC - Word Perfect and Microsoft Office documents
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOC - Word Perfect 和 Microsoft Office 文档
- en: DWG - AutoCAD drawings
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DWG - AutoCAD 绘图
- en: PDF - Portable Document Format from Adobe
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDF - Adobe 的便携式文档格式
- en: XLS - Microsoft Excel Spreadsheet
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XLS - Microsoft Excel 电子表格
- en: GIT - Git source code repository
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GIT - Git 源代码仓库
- en: EPUB - The Electronic Publication format used by non-Kindle eBooks
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EPUB - 非 Kindle 电子书使用的电子出版格式
- en: ODT - The Open Document format used by OpenOffice and others
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ODT - OpenOffice 和其他应用使用的开放文档格式
- en: PPT - Microsoft PowerPoint presentations
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PPT - Microsoft PowerPoint 演示文稿
- en: ODP - The Open Document presentation format used by OpenOffice and others
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ODP - OpenOffice 和其他应用使用的开放文档演示格式
- en: We make a distinction between a "file format" and an "application format". A
    file format is used to store a single object. So, for example, a GIF or JPEG file
    stores a single image, and an XHTML file stores text, so those are "file formats"
    and not "application formats". An EPUB file, in contrast, stores both text and
    images (as contained XHTML and GIF/JPEG files) and so it is considered an "application
    format". This article is about "application formats".
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们区分“文件格式”和“应用程序格式”。文件格式用于存储单个对象。因此，例如，GIF 或 JPEG 文件存储单个图像，XHTML 文件存储文本，因此它们是“文件格式”，而不是“应用程序格式”。相比之下，EPUB
    文件存储文本和图像（作为包含的 XHTML 和 GIF/JPEG 文件），因此被视为“应用程序格式”。本文讨论的是“应用程序格式”。
- en: The boundary between a file format and an application format is fuzzy. This
    article calls JPEG a file format, but for an image editor, JPEG might be considered
    the application format. Much depends on context. For this article, let us say
    that a file format stores a single object and an application format stores many
    different objects and their relationships to one another.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 文件格式和应用程序格式之间的边界并不清晰。本文将JPEG称为文件格式，但对于图像编辑器来说，JPEG可能被视为应用程序格式。很大程度上取决于上下文。对于本文，让我们说文件格式存储一个单一对象，而应用程序格式存储许多不同的对象及它们之间的关系。
- en: 'Most application formats fit into one of these three categories:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序格式可归为以下三类：
- en: '**Fully Custom Formats.** Custom formats are specifically designed for a single
    application. DOC, DWG, PDF, XLS, and PPT are examples of custom formats. Custom
    formats are usually contained within a single file, for ease of transport. They
    are also usually binary, though the DWG format is a notable exception. Custom
    file formats require specialized application code to read and write and are not
    normally accessible from commonly available tools such as unix command-line programs
    and text editors. In other words, custom formats are usually "opaque blobs". To
    access the content of a custom application file format, one needs a tool specifically
    engineered to read and/or write that format.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完全自定义格式。** 自定义格式专门为单个应用程序设计。DOC、DWG、PDF、XLS和PPT是自定义格式的例子。自定义格式通常包含在单个文件中，方便传输。它们通常是二进制的，尽管DWG格式是一个值得注意的例外。自定义文件格式需要专门的应用程序代码来读取和写入，并且通常无法访问常用工具（例如unix命令行程序和文本编辑器）。换句话说，自定义格式通常是"不透明的数据块"。要访问自定义应用程序文件格式的内容，需要一个专门设计用于读取和/或写入该格式的工具。'
- en: '**Pile-of-Files Formats.** Sometimes the application state is stored as a hierarchy
    of files. Git is a prime example of this, though the phenomenon occurs frequently
    in one-off and bespoke applications. A pile-of-files format essentially uses the
    filesystem as a key/value database, storing small chunks of information into separate
    files. This gives the advantage of making the content more accessible to common
    utility programs such as text editors or "awk" or "grep". But even if many of
    the files in a pile-of-files format are easily readable, there are usually some
    files that have their own custom format (example: Git "Packfiles") and are hence
    "opaque blobs" that are not readable or writable without specialized tools. It
    is also much less convenient to move a pile-of-files from one place or machine
    to another, than it is to move a single file. And it is hard to make a pile-of-files
    document into an email attachment, for example. Finally, a pile-of-files format
    breaks the "document metaphor": there is no one file that a user can point to
    that is "the document".'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文件堆叠格式**。有时候应用程序状态被存储为一个文件层次结构。Git就是一个典型的例子，虽然这种现象经常在一次性和定制的应用程序中出现。文件堆叠格式实质上是将文件系统用作键/值数据库，将小块信息存储到单独的文件中。这使得内容更容易被常见的实用程序（如文本编辑器或者"awk"或者"grep"）访问。但即使在文件堆叠格式中许多文件是容易读取的，通常也会有一些文件有着自己的自定义格式（例如：Git的"Packfiles"）因此是"不透明的块"，没有专门的工具是不可读或可写的。另外，将文件堆叠从一处或一台机器移到另一处或另一台机器上并不是那么方便，而将一个单一文件移动则更为方便。比如，将文件堆叠文档作为邮件附件发送也是很困难的。最后，文件堆叠格式破坏了"文件隐喻"：没有一个用户可以指出的文件是"该文件"。'
- en: '**Wrapped Pile-of-Files Formats.** Some applications use a Pile-of-Files that
    is then encapsulated into some kind of single-file container, usually a ZIP archive.
    EPUB, ODT,and ODP are examples of this approach. An EPUB book is really just a
    ZIP archive that contains various XHTML files for the text of book chapters, GIF
    and JPEG images for the artwork, and a specialized catalog file that tells the
    eBook reader how all the XML and image files fit together. OpenOffice documents
    (ODT and ODP) are also ZIP archives containing XML and images that represent their
    content as well as "catalog" files that show the interrelationships between the
    component parts.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**封装的文件堆叠格式**。一些应用程序使用文件堆叠，然后封装到某种单一文件容器中，通常是ZIP档案。EPUB、ODT和ODP就是这种方法的例子。EPUB书籍实际上就是一个包含书籍章节文本的各种XHTML文件、艺术作品的GIF和JPEG图像以及一个告诉电子书阅读器所有XML和图像文件如何组合在一起的专门目录文件的ZIP档案。OpenOffice文档（ODT和ODP）也是包含XML和图像表示其内容的ZIP档案，以及显示组成部分之间相互关系的"目录"文件。'
- en: A wrapped pile-of-files format is a compromise between a full custom file format
    and a pure pile-of-files format. A wrapped pile-of-files format is not an opaque
    blob in the same sense as a custom format, since the component parts can still
    be accessed using any common ZIP archiver, but the format is not quite as accessible
    as a pure pile-of-files format because one does still need the ZIP archiver, and
    one cannot normally use command-line tools like "find" on the file hierarchy without
    first un-zipping it. On the other hand, a wrapped pile-of-files format does preserve
    the document metaphor by putting all content into a single disk file. And because
    it is compressed, the wrapped pile-of-files format tends to be more compact.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包装的文件堆格式是完全自定义文件格式和纯粹的文件堆格式之间的折衷。包装的文件堆格式在某种程度上不像自定义格式中的不透明数据块那样，因为组件部分仍然可以使用任何常见的
    ZIP 压缩工具访问，但该格式不像纯粹的文件堆格式那样易于访问，因为使用该格式仍然需要 ZIP 压缩工具，并且通常不能直接在文件层次结构上使用诸如 "find"
    这样的命令行工具而不先解压它。另一方面，包装的文件堆格式通过将所有内容放入单个磁盘文件中来保留文档隐喻。并且由于其压缩，包装的文件堆格式往往更紧凑。
- en: As with custom file formats, and unlike pure pile-of-file formats, a wrapped
    pile-of-files format is not as easy to edit, since usually the entire file must
    be rewritten in order to change any component part.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与自定义文件格式一样，与纯粹的文件堆格式不同，包装的文件堆格式不容易编辑，因为通常必须重写整个文件才能更改任何组件部分。
- en: 'The purpose of this document is to argue in favor of a fourth new category
    of application file format: An SQLite database file.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在支持第四种新类别的应用文件格式：SQLite 数据库文件。
- en: SQLite As The Application File Format
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLite 作为应用文件格式
- en: 'Any application state that can be recorded in a pile-of-files can also be recorded
    in an SQLite database with a simple key/value schema like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以记录在文件堆中的应用状态也可以记录在具有简单键/值模式的 SQLite 数据库中，如下所示：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the content is compressed, then such an [SQLite Archive](sqlar.html) database
    is [the same size](affcase1.html#smaller) (±1%) as an equivalent ZIP archive,
    and it has the advantage of being able to update individual "files" without rewriting
    the entire document.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果内容经过压缩，那么这种 [SQLite 归档](sqlar.html) 数据库会与等效的 ZIP 归档 [大小相同](affcase1.html#smaller)（±1%），并且具有能够更新单独的
    "文件" 而无需重写整个文档的优势。
- en: But an SQLite database is not limited to a simple key/value structure like a
    pile-of-files database. An SQLite database can have dozens or hundreds or thousands
    of different tables, with dozens or hundreds or thousands of fields per table,
    each with different datatypes and constraints and particular meanings, all cross-referencing
    each other, appropriately and automatically indexed for rapid retrieval, and all
    stored efficiently and compactly in a single disk file. And all of this structure
    is succinctly documented for humans by the SQL schema.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，SQLite 数据库并不仅限于简单的键/值结构，如文件堆积数据库。一个 SQLite 数据库可以有数十个、数百个或数千个不同的表，每个表都可以有数十个、数百个或数千个字段，每个字段都具有不同的数据类型、约束和特定含义，彼此交叉引用，适当地和自动地索引以便快速检索，而且所有数据高效且紧凑地存储在一个单独的磁盘文件中。而所有这些结构都通过
    SQL 模式简洁地为人类文档化。
- en: In other words, an SQLite database can do everything that a pile-of-files or
    wrapped pile-of-files format can do, plus much more, and with greater lucidity.
    An SQLite database is a more versatile container than key/value filesystem or
    a ZIP archive. (For a detailed example, see the [OpenOffice case study](affcase1.html)
    essay.)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，SQLite 数据库可以做到文件堆积或包装文件堆积格式所能做的一切，而且更多，且更加清晰明了。SQLite 数据库是比键/值文件系统或ZIP档案更为多才多艺的容器。（详细示例请参阅[OpenOffice
    案例研究](affcase1.html)论文。）
- en: The power of an SQLite database could, in theory, be achieved using a custom
    file format. But any custom file format that is as expressive as a relational
    database would likely require an enormous design specification and many tens or
    hundreds of thousands of lines of code to implement. And the end result would
    be an "opaque blob" that is inaccessible without specialized tools.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上可以通过自定义文件格式实现 SQLite 数据库的强大功能。但是，任何一个与关系数据库同样表达能力的自定义文件格式很可能需要一个庞大的设计规范，并且需要许多数万行的代码来实现。而最终的结果将是一个需要专门工具才能访问的“不透明块”。
- en: 'Hence, in comparison to other approaches, the use of an SQLite database as
    an application file format has compelling advantages. Here are a few of these
    advantages, enumerated and expounded:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 相对于其他方法，将 SQLite 数据库作为应用文件格式具有明显的优势。以下是其中几点优势，逐条列举并详细说明：
- en: '**Simplified Application Development.** No new code is needed for reading or
    writing the application file. One has merely to link against the SQLite library,
    or include the [single "sqlite3.c" source file](amalgamation.html) with the rest
    of the application C code, and SQLite will take care of all of the application
    file I/O. This can reduce application code size by many thousands of lines, with
    corresponding saving in development and maintenance costs.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**简化应用程序开发。** 读取或写入应用程序文件不需要编写新代码。只需链接 SQLite 库，或者将 [单一的 "sqlite3.c" 源文件](amalgamation.html)
    包含到应用程序的其余 C 代码中，SQLite 将负责处理所有应用程序文件的 I/O 操作。这可以大大减少应用程序代码的行数，从而节省开发和维护成本。'
- en: SQLite is one of the [most used](mostdeployed.html) software libraries in the
    world. There are literally tens of billions of SQLite database files in use daily,
    on smartphones and gadgets and in desktop applications. SQLite is [carefully tested](testing.html)
    and proven reliable. It is not a component that needs much tuning or debugging,
    allowing developers to stay focused on application logic.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 是世界上[使用最广泛](mostdeployed.html)的软件库之一。每天在智能手机、设备和桌面应用程序中使用的 SQLite 数据库文件数量可达数十亿之多。SQLite
    经过[严格测试](testing.html)，被证明非常可靠。它不需要太多的调优或调试，使开发者可以集中精力解决应用程序逻辑。
- en: '**Single-File Documents.** An SQLite database is contained in a single file,
    which is easily copied or moved or attached. The "document" metaphor is preserved.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**单文件文档。** SQLite 数据库包含在单个文件中，可以轻松复制、移动或附加。保留了“文档”比喻。'
- en: SQLite does not have any file naming requirements and so the application can
    use any custom file suffix that it wants to help identify the file as "belonging"
    to the application. SQLite database files contain a 4-byte [Application ID](fileformat2.html#appid)
    in their headers that can be set to an application-defined value and then used
    to identify the "type" of the document for utility programs such as [file(1)](http://linux.die.net/man/1/file),
    further enhancing the document metaphor.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 没有任何文件命名要求，因此应用程序可以使用任何自定义文件后缀来帮助识别文件作为应用程序的一部分。SQLite 数据库文件在其头部包含一个
    4 字节的[应用程序 ID](fileformat2.html#appid)，可以设置为应用程序定义的值，然后用于诸如[file(1)](http://linux.die.net/man/1/file)之类的实用程序中，进一步增强文档的比喻。
- en: '**High-Level Query Language.** SQLite is a complete relational database engine,
    which means that the application can access content using high-level queries.
    Application developers need not spend time thinking about "how" to retrieve the
    information they need from a document. Developers write SQL that expresses "what"
    information they want and let the database engine to figure out how to best retrieve
    that content. This helps developers operate "heads up" and remain focused on solving
    the user''s problem, and avoid time spent "heads down" fiddling with low-level
    file formatting details.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**高级查询语言。** SQLite 是完整的关系数据库引擎，这意味着应用程序可以使用高级查询访问内容。应用开发者无需花费时间考虑如何从文档中检索所需信息。开发者编写
    SQL 来表达他们想要的信息，让数据库引擎来决定如何最好地检索内容。这有助于开发者保持“高效操作”，集中精力解决用户问题，避免花费时间在低级文件格式化细节上。'
- en: A pile-of-files format can be viewed as a key/value database. A key/value database
    is better than no database at all. But without transactions or indices or a high-level
    query language or a proper schema, it is much harder and more error prone to use
    a key/value database than a relational database.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 堆栈文件格式可以被视为键/值数据库。键/值数据库比没有数据库好得多。但是没有事务、索引、高级查询语言或适当的模式，使用键/值数据库比关系数据库更难且更容易出错。
- en: '**Accessible Content.** Information held in an SQLite database file is accessible
    using commonly available open-source command-line tools - tools that are installed
    by default on Mac and Linux systems and that are freely available as a self-contained
    EXE file on Windows. Unlike custom file formats, application-specific programs
    are not required to read or write content in an SQLite database. An SQLite database
    file is not an opaque blob. It is true that command-line tools such as text editors
    or "grep" or "awk" are not useful on an SQLite database, but the SQL query language
    is a much more powerful and convenient way for examining the content, so the inability
    to use "grep" and "awk" and the like is not seen as a loss.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可访问内容。** 存储在SQLite数据库文件中的信息可以使用常见的开源命令行工具访问 - 这些工具默认安装在Mac和Linux系统上，并作为一个独立的EXE文件在Windows上免费提供。与自定义文件格式不同，不需要特定于应用程序的程序来读取或写入SQLite数据库中的内容。SQLite数据库文件不是一个不透明的块。的确，像文本编辑器、"grep"或"awk"之类的命令行工具在SQLite数据库上不起作用，但SQL查询语言是一种更强大和方便的查看内容的方式，因此不能使用
    "grep"、"awk"等工具不被视为损失。'
- en: An SQLite database is a [well-defined and well-documented](fileformat2.html)
    file format that is in widespread use by literally millions of applications and
    is backwards compatible to its inception in 2004 and which promises to continue
    to be compatible in decades to come. The longevity of SQLite database files is
    particularly important to bespoke applications, since it allows the document content
    to be accessed far in the future, long after all traces of the original application
    have been lost. Data lives longer than code. SQLite databases are [recommended
    by the US Library of Congress](locrsf.html) as a storage format for long-term
    preservation of digital content.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite数据库是[定义明确且有文档支持](fileformat2.html)的文件格式，目前被数百万应用广泛使用，并且向后兼容至2004年的发布，并承诺在未来几十年内仍然保持兼容性。对于定制应用程序来说，SQLite数据库文件的长寿特别重要，因为它可以在原始应用程序的所有痕迹都丢失后的未来很长时间内访问文档内容。数据比代码更持久。SQLite数据库被[美国国会图书馆](locrsf.html)推荐作为长期保存数字内容的存储格式。
- en: '**Cross-Platform.** SQLite database files are portable between 32-bit and 64-bit
    machines and between big-endian and little-endian architectures and between any
    of the various flavors of Windows and Unix-like operating systems. The application
    using an SQLite application file format can store binary numeric data without
    having to worry about the byte-order of integers or floating point numbers. Text
    content can be read or written as UTF-8, UTF-16LE, or UTF-16BE and SQLite will
    automatically perform any necessary translations on-the-fly.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**跨平台。** SQLite数据库文件在32位和64位机器之间、大端和小端架构之间、以及各种风格的Windows和类Unix操作系统之间都是可移植的。使用SQLite应用文件格式的应用程序可以存储二进制数字数据，而不必担心整数或浮点数的字节顺序。文本内容可以按UTF-8、UTF-16LE或UTF-16BE读取或写入，并且SQLite会自动进行必要的即时转换。'
- en: '**Atomic Transactions.** Writes to an SQLite database are [atomic](atomiccommit.html).
    They either happen completely or not at all, even during system crashes or power
    failures. So there is no danger of corrupting a document just because the power
    happened to go out at the same instant that a change was being written to disk.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**原子事务。** 写入 SQLite 数据库的操作是[原子性的](atomiccommit.html)。它们要么完全发生，要么完全不发生，即使在系统崩溃或断电时也是如此。因此，即使在将更改写入磁盘的同时电源突然中断，也不会因此而损坏文档。'
- en: SQLite is transactional, meaning that multiple changes can be grouped together
    such that either all or none of them occur, and so that the changes can be rolled
    back if a problem is found prior to commit. This allows an application to make
    a change incrementally, then run various sanity and consistency checks on the
    resulting data prior to committing the changes to disk. The [Fossil](http://www.fossil-scm.org/)
    DVCS [uses this technique](http://www.fossil-scm.org/fossil/doc/tip/www/selfcheck.wiki)
    to verify that no repository history has been lost prior to each change.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 是事务性的，意味着可以将多个更改组合在一起，要么全部发生，要么全部不发生，并且如果在提交之前发现问题，则可以回滚更改。这允许应用程序逐步进行更改，然后在将更改提交到磁盘之前对生成的数据进行各种健全性和一致性检查。[Fossil](http://www.fossil-scm.org/)
    分布式版本控制系统 [使用这种技术](http://www.fossil-scm.org/fossil/doc/tip/www/selfcheck.wiki)
    来验证在每次更改之前未丢失任何存储库历史。
- en: '**Incremental And Continuous Updates.** When writing to an SQLite database
    file, only those parts of the file that actually change are written out to disk.
    This makes the writing happen faster and saves wear on SSDs. This is an enormous
    advantage over custom and wrapped pile-of-files formats, both of which usually
    require a rewrite of the entire document in order to change a single byte. Pure
    pile-of-files formats can also do incremental updates to some extent, though the
    granularity of writes is usually larger with pile-of-file formats (a single file)
    than with SQLite (a single page).'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**增量和连续更新。** 当向 SQLite 数据库文件写入时，只会将实际更改的部分写入磁盘。这使得写入速度更快，并减少了对 SSD 的磨损。这与自定义和封装的文件堆格式相比具有巨大的优势，后者通常需要重新编写整个文档才能更改单个字节。纯文件堆格式在某种程度上也可以进行增量更新，尽管与
    SQLite（单个页面）相比，写入的粒度通常更大。'
- en: SQLite also supports continuous update. Instead of collecting changes in memory
    and then writing them to disk only on a File/Save action, changes can be written
    back to the disk as they occur. This avoids loss of work on a system crash or
    power failure. An [automated undo/redo stack](undoredo.html), managed using triggers,
    can be kept in the on-disk database, meaning that undo/redo can occur across session
    boundaries.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 还支持连续更新。不是将更改收集在内存中，然后仅在执行“文件/保存”操作时将其写入磁盘，而是可以在发生更改时立即将其写回磁盘。这样可以避免在系统崩溃或断电时丢失工作。一个使用触发器管理的[自动化撤销/重做堆栈](undoredo.html)可以保留在磁盘上的数据库中，这意味着可以跨会话边界进行撤销/重做。
- en: '**Easily Extensible.** As an application grows, new features can be added to
    an SQLite application file format simply by adding new tables to the schema or
    by adding new columns to existing tables. Adding columns or tables does not change
    the meaning of prior queries, so with a modicum of care to ensuring that the meaning
    of legacy columns and tables are preserved, backwards compatibility is maintained.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**易于扩展。** 随着应用程序的增长，可以通过向模式添加新表或向现有表添加新列，简单地扩展 SQLite 应用程序文件格式。添加列或表不会改变先前查询的含义，因此只需小心确保保留旧列和表的含义，就可以保持向后兼容性。'
- en: It is possible to extend custom or pile-of-files formats too, of course, but
    doing is often much harder. If indices are added, then all application code that
    changes the corresponding tables must be located and modified to keep those indices
    up-to-date. If columns are added, then all application code that accesses the
    corresponding table must be located and modified to take into account the new
    columns.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当然，自定义或一堆文件格式也可以扩展，但这样做通常要困难得多。如果添加了索引，那么必须定位并修改所有更改相应表的应用程序代码，以保持这些索引的最新状态。如果添加了列，则必须定位并修改所有访问相应表的应用程序代码，以考虑新列。
- en: '**Performance.** In many cases, an SQLite application file format will be [faster
    than a pile-of-files format](fasterthanfs.html) or a custom format. In addition
    to being faster for raw read and writes, SQLite can often dramatically improves
    start-up times because instead of having to read and parse the entire document
    into memory, the application can do queries to extract only the information needed
    for the initial screen. As the application progresses, it only needs to load as
    much material as is needed to draw the next screen, and can discard information
    from prior screens that is no longer in use. This helps keep the memory footprint
    of the application under control.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**性能。** 在许多情况下，SQLite 应用程序文件格式比[一堆文件格式](fasterthanfs.html)或自定义格式**更快**。除了在原始读写操作上更快之外，SQLite
    通常还会显著改善启动时间，因为应用程序无需读取并解析整个文档到内存中，而是可以通过查询仅提取初始化屏幕所需的信息。随着应用程序的进行，它只需加载足够绘制下一个屏幕所需的内容，并且可以丢弃不再使用的先前屏幕的信息。这有助于保持应用程序的内存占用量在控制范围内。'
- en: A pile-of-files format can be read incrementally just like SQLite. But many
    developers are surprised to learn that SQLite can read and write smaller BLOBs
    (less than about 100KB in size) from its database faster than those same blobs
    can be read or written as separate files from the filesystem. (See [35% Faster
    Than The Filesystem](fasterthanfs.html) and [Internal Versus External BLOBs](intern-v-extern-blob.html)
    for further information.) There is overhead associated with operating a relational
    database engine, however one should not assume that direct file I/O is faster
    than SQLite database I/O, as often it is not.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像 SQLite 一样，可以逐步读取堆叠文件格式。但许多开发人员惊讶地发现，SQLite 可以更快地从其数据库中读取和写入较小的 BLOB（小于约 100KB
    的大小），而不是从文件系统中作为单独文件读取或写入这些 BLOB。 (参见 [比文件系统快35%](fasterthanfs.html) 和 [内部与外部
    BLOB](intern-v-extern-blob.html) 以获取更多信息。) 然而，操作关系数据库引擎会带来一定的开销，但不应假设直接文件 I/O
    比 SQLite 数据库 I/O 更快，因为通常情况下并非如此。
- en: In either case, if performance problems do arise in an SQLite application those
    problems can often be resolved by adding one or two [CREATE INDEX](lang_createindex.html)
    statements to the schema or perhaps running [ANALYZE](lang_analyze.html) one time
    and without having to touch a single line of application code. But if a performance
    problem comes up in a custom or pile-of-files format, the fix will often require
    extensive changes to application code to add and maintain new indices or to extract
    information using different algorithms.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无论哪种情况，如果在 SQLite 应用中出现性能问题，通常可以通过向模式添加一两个 [CREATE INDEX](lang_createindex.html)
    语句或者运行 [ANALYZE](lang_analyze.html) 一次来解决这些问题，而无需触及任何一行应用代码。但是，如果在自定义或堆叠文件格式中出现性能问题，则通常需要对应用代码进行大量更改，以添加和维护新的索引或使用不同的算法提取信息。
- en: '**Concurrent Use By Multiple Processes.** SQLite automatically coordinates
    concurrent access to the same document from multiple threads and/or processes.
    Two or more applications can connect and read from the same document at the same
    time. Writes are serialized, but as writes normally only take milliseconds, applications
    simply take turns writing. SQLite automatically ensures that the low-level format
    of the document is uncorrupted. Accomplishing the same with a custom or pile-of-files
    format, in contrast, requires extensive support in the application. And the application
    logic needed to support concurrency is a notorious bug-magnet.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**多进程并发使用。** SQLite 自动协调多个线程和/或进程从同一文档中进行并发访问。两个或更多应用程序可以同时连接并从同一文档中读取。写操作是串行化的，但由于写操作通常只需毫秒级时间，因此应用程序只需轮流进行写操作。SQLite
    自动确保文档的底层格式不被破坏。相比之下，在自定义或堆叠文件格式中实现相同功能需要应用程序中的大量支持。而支持并发性所需的应用逻辑是一个臭名昭著的错误源。'
- en: '**Multiple Programming Languages.** Though SQLite is itself written in ANSI-C,
    interfaces exist for just about every other programming language you can think
    of: C++, C#, Objective-C, Java, Tcl, Perl, Python, Ruby, Erlang, JavaScript, and
    so forth. So programmers can develop in whatever language they are most comfortable
    with and which best matches the needs of the project.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**多种编程语言。** 虽然SQLite本身是用ANSI-C编写的，但几乎可以为你所能想到的每一种编程语言提供接口：C++、C#、Objective-C、Java、Tcl、Perl、Python、Ruby、Erlang、JavaScript等等。因此，程序员可以使用他们最熟悉且最适合项目需求的任何语言进行开发。'
- en: An SQLite application file format is a great choice in cases where there is
    a collection or "federation" of separate programs, often written in different
    languages and by different development teams. This comes up commonly in research
    or laboratory environments where one team is responsible for data acquisition
    and other teams are responsible for various stages of analysis. Each team can
    use whatever hardware, operating system, programming language and development
    methodology that they are most comfortable with, and as long as all programs use
    an SQLite database with a common schema, they can all interoperate.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在存在一组或“联邦”独立程序的情况下，SQLite应用程序文件格式是一个极佳的选择，这种情况在研究或实验室环境中经常出现，其中一个团队负责数据采集，其他团队负责各个分析阶段。每个团队可以使用他们最熟悉的硬件、操作系统、编程语言和开发方法论，只要所有程序使用具有共同模式的SQLite数据库，它们就可以互操作。
- en: '**Better Applications.** If the application file format is an SQLite database,
    the complete documentation for that file format consists of the database schema,
    with perhaps a few extra words about what each table and column represents. The
    description of a custom file format, on the other hand, typically runs on for
    hundreds of pages. A pile-of-files format, while much simpler and easier to describe
    than a fully custom format, still tends to be much larger and more complex than
    an SQL schema dump, since the names and format for the individual files must still
    be described.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更好的应用程序。** 如果应用程序文件格式是一个SQLite数据库，那么该文件格式的完整文档包括数据库模式，可能还会有一些关于每个表和列代表的额外说明。另一方面，自定义文件格式的描述通常会延续数百页。虽然文件堆叠格式比完全自定义格式简单得多且更容易描述，但仍然比SQL模式转储要大得多且更复杂，因为仍需描述各个文件的名称和格式。'
- en: 'This is not a trivial point. A clear, concise, and easy to understand file
    format is a crucial part of any application design. Fred Brooks, in his all-time
    best-selling computer science text, *The Mythical Man-Month* says:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这并非一个琐碎的观点。清晰、简洁且易于理解的文件格式是任何应用程序设计中至关重要的一部分。在他有史以来最畅销的计算机科学著作《人月神话》中，Fred Brooks如是说：
- en: '*Representation is the essence of computer programming.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*表达是计算机编程的本质。'
- en: '...'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '...'
- en: Show me your flowcharts and conceal your tables, and I shall continue to be
    mystified. Show me your tables, and I won't usually need your flowcharts; they'll
    be obvious.*
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*给我看你的流程图，隐藏你的表，我将继续感到困惑。给我看你的表，我通常就不需要你的流程图；它们会很明显。*'
- en: 'Rob Pike, in his *Rules of Programming* expresses the same idea this way:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 罗布·派克在他的*编程规则*中以这样的方式表达了相同的观点：
- en: '*Data dominates. If you''ve chosen the right data structures and organized
    things well, the algorithms will almost always be self-evident. Data structures,
    not algorithms, are central to programming.*'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*数据至上。如果你选择了合适的数据结构并组织得当，算法几乎总是不言自明的。数据结构，而不是算法，是编程的核心。*'
- en: 'Linus Torvalds used different words to say much the same thing on the Git mailing
    list on 2006-06-27:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Linus Torvalds 在 2006-06-27 年的 Git 邮件列表上用不同的措辞表达了同样的观点：
- en: '*Bad programmers worry about the code. Good programmers worry about data structures
    and their relationships.*'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*糟糕的程序员担心代码。好的程序员关心数据结构及其关系。*'
- en: 'The point is this: an SQL database schema almost always does a far better job
    of defining and organizing the tables and data structures and their relationships.
    And having clear, concise, and well-defined representation almost always results
    in an application that performs better, has fewer problems, and is easier to develop
    and maintain.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关键在于：一个 SQL 数据库模式几乎总是更好地定义和组织表和数据结构及其关系。拥有清晰、简明和明确定义的表示几乎总是会导致一个性能更好、问题更少、更易开发和维护的应用程序。
- en: Conclusion
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: SQLite is not the perfect application file format for every situation. But in
    many cases, SQLite is a far better choice than either a custom file format, a
    pile-of-files, or a wrapped pile-of-files. SQLite is a high-level, stable, reliable,
    cross-platform, widely-deployed, extensible, performant, accessible, concurrent
    file format. It deserves your consideration as the standard file format on your
    next application design.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种情况，SQLite 都不是完美的应用文件格式。但在许多情况下，SQLite 是远比自定义文件格式、一堆文件或包装一堆文件更好的选择。SQLite
    是一个高级、稳定、可靠、跨平台、广泛部署、可扩展、高性能、易访问、并发的文件格式。在你的下一个应用设计中，它值得成为标准文件格式。
