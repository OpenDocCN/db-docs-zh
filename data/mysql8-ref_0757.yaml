- en: 13.3.6 The SET Type
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.3.6 `SET`类型
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/set.html](https://dev.mysql.com/doc/refman/8.0/en/set.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/set.html](https://dev.mysql.com/doc/refman/8.0/en/set.html)
- en: A `SET` is a string object that can have zero or more values, each of which
    must be chosen from a list of permitted values specified when the table is created.
    `SET` column values that consist of multiple set members are specified with members
    separated by commas (`,`). A consequence of this is that `SET` member values should
    not themselves contain commas.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`SET`是一个字符串对象，可以具有零个或多个值，每个值必须从创建表时指定的允许值列表中选择。由于`SET`列值由逗号（`,`）分隔的成员指定，因此`SET`成员值本身不应包含逗号。'
- en: 'For example, a column specified as `SET(''one'', ''two'') NOT NULL` can have
    any of these values:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，指定为`SET('one', 'two') NOT NULL`的列可以具有以下任何值：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A [`SET`](set.html "13.3.6 The SET Type") column can have a maximum of 64 distinct
    members.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SET`](set.html "13.3.6 `SET`类型")列最多可以有64个不同的成员。'
- en: Duplicate values in the definition cause a warning, or an error if strict SQL
    mode is enabled.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 定义中的重复值会导致警告，如果启用了严格的SQL模式，则会导致错误。
- en: Trailing spaces are automatically deleted from `SET` member values in the table
    definition when a table is created.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建表时，`SET`成员值的尾随空格会自动删除。
- en: See [String Type Storage Requirements](storage-requirements.html#data-types-storage-reqs-strings
    "String Type Storage Requirements") for storage requirements for the [`SET`](set.html
    "13.3.6 The SET Type") type.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[`SET`](set.html "13.3.6 `SET`类型")类型的存储要求，请参见[字符串类型存储要求](storage-requirements.html#data-types-storage-reqs-strings
    "字符串类型存储要求")。
- en: See [Section 13.3.1, “String Data Type Syntax”](string-type-syntax.html "13.3.1 String
    Data Type Syntax") for [`SET`](set.html "13.3.6 The SET Type") type syntax and
    length limits.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[`SET`](set.html "13.3.6 `SET`类型")类型的语法和长度限制，请参见[第13.3.1节，“字符串数据类型语法”](string-type-syntax.html
    "13.3.1 字符串数据类型语法")。
- en: When retrieved, values stored in a `SET` column are displayed using the lettercase
    that was used in the column definition. Note that `SET` columns can be assigned
    a character set and collation. For binary or case-sensitive collations, lettercase
    is taken into account when assigning values to the column.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当检索时，存储在`SET`列中的值将以列定义中使用的大小写形式显示。请注意，`SET`列可以分配字符集和排序规则。对于二进制或区分大小写的排序规则，分配值给列时会考虑大小写。
- en: 'MySQL stores `SET` values numerically, with the low-order bit of the stored
    value corresponding to the first set member. If you retrieve a `SET` value in
    a numeric context, the value retrieved has bits set corresponding to the set members
    that make up the column value. For example, you can retrieve numeric values from
    a `SET` column like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL以数字形式存储`SET`值，存储值的低位对应于第一个集合成员。如果在数字上下文中检索`SET`值，则检索到的值具有对应于构成列值的集合成员的位设置。例如，可以像这样从`SET`列中检索数值：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If a number is stored into a `SET` column, the bits that are set in the binary
    representation of the number determine the set members in the column value. For
    a column specified as `SET('a','b','c','d')`, the members have the following decimal
    and binary values.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将数字存储到`SET`列中，则在数字的二进制表示中设置的位确定列值中的集合成员。对于指定为`SET('a','b','c','d')`的列，成员具有以下十进制和二进制值。
- en: '| `SET` Member | Decimal Value | Binary Value |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `SET`成员 | 十进制值 | 二进制值 |'
- en: '| `''a''` | `1` | `0001` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `''a''` | `1` | `0001` |'
- en: '| `''b''` | `2` | `0010` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `''b''` | `2` | `0010` |'
- en: '| `''c''` | `4` | `0100` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `''c''` | `4` | `0100` |'
- en: '| `''d''` | `8` | `1000` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `''d''` | `8` | `1000` |'
- en: If you assign a value of `9` to this column, that is `1001` in binary, so the
    first and fourth `SET` value members `'a'` and `'d'` are selected and the resulting
    value is `'a,d'`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将值`9`分配给此列，即二进制为`1001`，因此选择第一个和第四个`SET`值成员`'a'`和`'d'`，得到的值为`'a,d'`。
- en: 'For a value containing more than one `SET` element, it does not matter what
    order the elements are listed in when you insert the value. It also does not matter
    how many times a given element is listed in the value. When the value is retrieved
    later, each element in the value appears once, with elements listed according
    to the order in which they were specified at table creation time. Suppose that
    a column is specified as `SET(''a'',''b'',''c'',''d'')`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含多个`SET`元素的值，插入值时元素的顺序无关紧要。同样，给定元素在值中列出的次数也无关紧要。稍后检索值时，值中的每个元素只出现一次，并且元素按照在创建表时指定的顺序列出。假设列被指定为`SET('a','b','c','d')`：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you insert the values `''a,d''`, `''d,a''`, `''a,d,d''`, `''a,d,a''`, and
    `''d,a,d''`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果插入值`'a,d'`、`'d,a'`、`'a,d,d'`、`'a,d,a'`和`'d,a,d'`：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then all these values appear as `''a,d''` when retrieved:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后检索这些值时，所有这些值都显示为`'a,d'`：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you set a `SET` column to an unsupported value, the value is ignored and
    a warning is issued:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`SET`列设置为不支持的值，则该值将被忽略并发出警告：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If strict SQL mode is enabled, attempts to insert invalid `SET` values result
    in an error.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了严格的SQL模式，则尝试插入无效的`SET`值将导致错误。
- en: '`SET` values are sorted numerically. `NULL` values sort before non-`NULL` `SET`
    values.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`SET`值按数字顺序排序。`NULL`值在非`NULL` `SET`值之前排序。'
- en: Functions such as [`SUM()`](aggregate-functions.html#function_sum) or [`AVG()`](aggregate-functions.html#function_avg)
    that expect a numeric argument cast the argument to a number if necessary. For
    `SET` values, the cast operation causes the numeric value to be used.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如[`SUM()`](aggregate-functions.html#function_sum)或[`AVG()`](aggregate-functions.html#function_avg)之类的期望数值参数的函数，如果需要，将参数转换为数字。对于`SET`值，转换操作会导致使用数值值。
- en: 'Normally, you search for `SET` values using the [`FIND_IN_SET()`](string-functions.html#function_find-in-set)
    function or the [`LIKE`](string-comparison-functions.html#operator_like) operator:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您可以使用[`FIND_IN_SET()`](string-functions.html#function_find-in-set)函数或[`LIKE`](string-comparison-functions.html#operator_like)运算符来搜索`SET`值：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first statement finds rows where *`set_col`* contains the *`value`* set
    member. The second is similar, but not the same: It finds rows where *`set_col`*
    contains *`value`* anywhere, even as a substring of another set member.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条语句查找包含*`value`*集合成员的行。第二条类似，但不完全相同：它查找包含*`value`*的任何地方的行，即使作为另一个集合成员的子字符串。
- en: 'The following statements also are permitted:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句也是允许的：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first of these statements looks for values containing the first set member.
    The second looks for an exact match. Be careful with comparisons of the second
    type. Comparing set values to `'*`val1`*,*`val2`*'` returns different results
    than comparing values to `'*`val2`*,*`val1`*'`. You should specify the values
    in the same order they are listed in the column definition.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句中的第一个查找包含第一个集合成员的值。第二个查找精确匹配。对于第二种类型的比较要小心。将集合值与`'*`val1`*,*`val2`*'`进行比较会产生不同的结果，与将值与`'*`val2`*,*`val1`*'`进行比较不同。您应该按照它们在列定义中列出的顺序指定值。
- en: To determine all possible values for a `SET` column, use `SHOW COLUMNS FROM
    *`tbl_name`* LIKE *`set_col`*` and parse the `SET` definition in the `Type` column
    of the output.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定`SET`列的所有可能值，请使用`SHOW COLUMNS FROM *`tbl_name`* LIKE *`set_col`*`并解析输出的`Type`列中的`SET`定义。
- en: In the C API, `SET` values are returned as strings. For information about using
    result set metadata to distinguish them from other strings, see [C API Basic Data
    Structures](/doc/c-api/8.0/en/c-api-data-structures.html).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在C API中，`SET`值以字符串形式返回。有关使用结果集元数据将其与其他字符串区分开的信息，请参阅[C API基本数据结构](/doc/c-api/8.0/en/c-api-data-structures.html)。
