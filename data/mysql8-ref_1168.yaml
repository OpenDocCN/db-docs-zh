- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/sorted-index-builds.html](https://dev.mysql.com/doc/refman/8.0/en/sorted-index-builds.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/sorted-index-builds.html](https://dev.mysql.com/doc/refman/8.0/en/sorted-index-builds.html)
- en: 17.6.2.3 Sorted Index Builds
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.6.2.3 排序索引构建
- en: '`InnoDB` performs a bulk load instead of inserting one index record at a time
    when creating or rebuilding indexes. This method of index creation is also known
    as a sorted index build. Sorted index builds are not supported for spatial indexes.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`在创建或重建索引时执行批量加载，而不是逐个插入一个索引记录。这种索引创建方法也被称为排序索引构建。排序索引构建不支持空间索引。'
- en: There are three phases to an index build. In the first phase, the [clustered
    index](glossary.html#glos_clustered_index "clustered index") is scanned, and index
    entries are generated and added to the sort buffer. When the [sort buffer](glossary.html#glos_sort_buffer
    "sort buffer") becomes full, entries are sorted and written out to a temporary
    intermediate file. This process is also known as a “run”. In the second phase,
    with one or more runs written to the temporary intermediate file, a merge sort
    is performed on all entries in the file. In the third and final phase, the sorted
    entries are inserted into the [B-tree](glossary.html#glos_b_tree "B-tree").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 索引构建有三个阶段。在第一阶段中，扫描[聚集索引](glossary.html#glos_clustered_index "clustered index")，生成索引条目并添加到排序缓冲区。当[排序缓冲区](glossary.html#glos_sort_buffer
    "sort buffer")变满时，条目被排序并写入临时中间文件。这个过程也被称为“运行”。在第二阶段，将一个或多个运行写入临时中间文件后，在文件中对所有条目执行合并排序。在第三和最后阶段，排序的条目被插入到[B
    树](glossary.html#glos_b_tree "B-tree")中。
- en: Prior to the introduction of sorted index builds, index entries were inserted
    into the B-tree one record at a time using insert APIs. This method involved opening
    a B-tree [cursor](glossary.html#glos_cursor "cursor") to find the insert position
    and then inserting entries into a B-tree page using an [optimistic](glossary.html#glos_optimistic
    "optimistic") insert. If an insert failed due to a page being full, a [pessimistic](glossary.html#glos_pessimistic
    "pessimistic") insert would be performed, which involves opening a B-tree cursor
    and splitting and merging B-tree nodes as necessary to find space for the entry.
    The drawbacks of this “top-down” method of building an index are the cost of searching
    for an insert position and the constant splitting and merging of B-tree nodes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入排序索引构建之前，索引条目是使用插入 API 逐个插入到 B 树中的。这种方法涉及打开一个 B 树[游标](glossary.html#glos_cursor
    "cursor")以找到插入位置，然后使用[乐观](glossary.html#glos_optimistic "optimistic")插入将条目插入到
    B 树页中。如果由于页面已满而插入失败，则会执行[悲观](glossary.html#glos_pessimistic "pessimistic")插入，这涉及打开一个
    B 树游标，并根据需要拆分和合并 B 树节点以为条目找到空间。构建索引的这种“自顶向下”方法的缺点是搜索插入位置的成本以及不断拆分和合并 B 树节点。
- en: Sorted index builds use a “bottom-up” approach to building an index. With this
    approach, a reference to the right-most leaf page is held at all levels of the
    B-tree. The right-most leaf page at the necessary B-tree depth is allocated and
    entries are inserted according to their sorted order. Once a leaf page is full,
    a node pointer is appended to the parent page and a sibling leaf page is allocated
    for the next insert. This process continues until all entries are inserted, which
    may result in inserts up to the root level. When a sibling page is allocated,
    the reference to the previously pinned leaf page is released, and the newly allocated
    leaf page becomes the right-most leaf page and new default insert location.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 排序索引构建使用“自底向上”的方法构建索引。采用这种方法，B 树的所有级别都保存对最右叶页的引用。在必要的 B 树深度上分配最右叶页，并根据它们的排序顺序插入条目。一旦叶页已满，就会向父页附加一个节点指针，并为下一个插入分配一个兄弟叶页。这个过程会一直持续，直到所有条目都被插入，这可能导致插入到根级别。当分配一个兄弟页时，之前固定的叶页的引用会被释放，新分配的叶页成为最右叶页和新的默认插入位置。
- en: Reserving B-tree Page Space for Future Index Growth
  id: totrans-6
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 为未来索引增长保留 B 树页空间
- en: To set aside space for future index growth, you can use the [`innodb_fill_factor`](innodb-parameters.html#sysvar_innodb_fill_factor)
    variable to reserve a percentage of B-tree page space. For example, setting [`innodb_fill_factor`](innodb-parameters.html#sysvar_innodb_fill_factor)
    to 80 reserves 20 percent of the space in B-tree pages during a sorted index build.
    This setting applies to both B-tree leaf and non-leaf pages. It does not apply
    to external pages used for [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")
    or [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") entries. The amount of
    space that is reserved may not be exactly as configured, as the [`innodb_fill_factor`](innodb-parameters.html#sysvar_innodb_fill_factor)
    value is interpreted as a hint rather than a hard limit.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为未来的索引增长留出空间，您可以使用[`innodb_fill_factor`](innodb-parameters.html#sysvar_innodb_fill_factor)变量来保留B-Tree页面空间的百分比。例如，将[`innodb_fill_factor`](innodb-parameters.html#sysvar_innodb_fill_factor)设置为80会在排序索引构建期间保留B-Tree页面中20％的空间。此设置适用于B-Tree叶子和非叶子页面。它不适用于用于[`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")或[`BLOB`](blob.html "13.3.4 The BLOB and TEXT
    Types")条目的外部页面。保留的空间量可能不会完全按照配置，因为[`innodb_fill_factor`](innodb-parameters.html#sysvar_innodb_fill_factor)值被解释为提示而不是硬限制。
- en: Sorted Index Builds and Full-Text Index Support
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 排序索引构建和全文索引支持
- en: Sorted index builds are supported for [fulltext indexes](glossary.html#glos_fulltext_index
    "FULLTEXT index"). Previously, SQL was used to insert entries into a fulltext
    index.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 支持对[全文索引](glossary.html#glos_fulltext_index "FULLTEXT index")进行排序。以前，SQL用于向全文索引插入条目。
- en: Sorted Index Builds and Compressed Tables
  id: totrans-10
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 排序索引构建和压缩表
- en: For [compressed tables](glossary.html#glos_compression "compression"), the previous
    index creation method appended entries to both compressed and uncompressed pages.
    When the modification log (representing free space on the compressed page) became
    full, the compressed page would be recompressed. If compression failed due to
    a lack of space, the page would be split. With sorted index builds, entries are
    only appended to uncompressed pages. When an uncompressed page becomes full, it
    is compressed. Adaptive padding is used to ensure that compression succeeds in
    most cases, but if compression fails, the page is split and compression is attempted
    again. This process continues until compression is successful. For more information
    about compression of B-Tree pages, see [Section 17.9.1.5, “How Compression Works
    for InnoDB Tables”](innodb-compression-internals.html "17.9.1.5 How Compression
    Works for InnoDB Tables").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[压缩表](glossary.html#glos_compression "compression")，先前的索引创建方法将条目附加到压缩和未压缩页面。当修改日志（表示压缩页面上的空闲空间）变满时，压缩页面将被重新压缩。如果由于空间不足而导致压缩失败，则页面将被分割。通过排序索引构建，条目仅附加到未压缩页面。当未压缩页面变满时，它将被压缩。自适应填充用于确保在大多数情况下压缩成功，但如果压缩失败，则页面将被分割，并再次尝试压缩。此过程将持续，直到压缩成功。有关InnoDB表B-Tree页面压缩的更多信息，请参见[第17.9.1.5节，“InnoDB表的压缩工作原理”](innodb-compression-internals.html
    "17.9.1.5 How Compression Works for InnoDB Tables")。
- en: Sorted Index Builds and Redo Logging
  id: totrans-12
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 排序索引构建和重做日志
- en: '[Redo logging](glossary.html#glos_redo_log "redo log") is disabled during a
    sorted index build. Instead, there is a [checkpoint](glossary.html#glos_checkpoint
    "checkpoint") to ensure that the index build can withstand an unexpected exit
    or failure. The checkpoint forces a write of all dirty pages to disk. During a
    sorted index build, the [page cleaner](glossary.html#glos_page_cleaner "page cleaner")
    thread is signaled periodically to flush [dirty pages](glossary.html#glos_dirty_page
    "dirty page") to ensure that the checkpoint operation can be processed quickly.
    Normally, the page cleaner thread flushes dirty pages when the number of clean
    pages falls below a set threshold. For sorted index builds, dirty pages are flushed
    promptly to reduce checkpoint overhead and to parallelize I/O and CPU activity.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在排序索引构建期间，[重做日志](glossary.html#glos_redo_log "redo log")被禁用。相反，存在一个[检查点](glossary.html#glos_checkpoint
    "checkpoint")以确保索引构建可以经受意外退出或失败。检查点强制将所有脏页写入磁盘。在排序索引构建期间，会定期向[页面清理器](glossary.html#glos_page_cleaner
    "page cleaner")线程发出信号，以刷新[脏页](glossary.html#glos_dirty_page "dirty page")以确保检查点操作可以快速处理。通常情况下，当干净页面数量低于设定阈值时，页面清理器线程会刷新脏页。对于排序索引构建，脏页会被迅速刷新以减少检查点开销并并行化I/O和CPU活动。
- en: Sorted Index Builds and Optimizer Statistics
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 排序索引构建和优化器统计
- en: Sorted index builds may result in [optimizer](glossary.html#glos_optimizer "optimizer")
    statistics that differ from those generated by the previous method of index creation.
    The difference in statistics, which is not expected to affect workload performance,
    is due to the different algorithm used to populate the index.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 排序索引构建可能导致与以前的索引创建方法生成的[优化器](glossary.html#glos_optimizer "optimizer")统计数据不同。统计数据的差异不会影响工作负载性能，这是由于用于填充索引的不同算法所致。
