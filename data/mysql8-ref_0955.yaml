- en: 15.2.14 Set Operations with UNION, INTERSECT, and EXCEPT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.2.14 使用 UNION、INTERSECT 和 EXCEPT 的集合操作
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/set-operations.html](https://dev.mysql.com/doc/refman/8.0/en/set-operations.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/set-operations.html](https://dev.mysql.com/doc/refman/8.0/en/set-operations.html)
- en: '[Result Set Column Names and Data Types](set-operations.html#set-operations-result-set-columns
    "Result Set Column Names and Data Types")'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结果集列名和数据类型](set-operations.html#set-operations-result-set-columns "结果集列名和数据类型")'
- en: '[Set Operations with TABLE and VALUES Statements](set-operations.html#set-operations-table-values
    "Set Operations with TABLE and VALUES Statements")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 TABLE 和 VALUES 语句进行集合操作](set-operations.html#set-operations-table-values
    "使用 TABLE 和 VALUES 语句进行集合操作")'
- en: '[Set Operations using DISTINCT and ALL](set-operations.html#set-operations-distinct-all
    "Set Operations using DISTINCT and ALL")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 DISTINCT 和 ALL 的集合操作](set-operations.html#set-operations-distinct-all "使用
    DISTINCT 和 ALL 的集合操作")'
- en: '[Set Operations with ORDER BY and LIMIT](set-operations.html#set-operations-order-by-limit
    "Set Operations with ORDER BY and LIMIT")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 ORDER BY 和 LIMIT 的集合操作](set-operations.html#set-operations-order-by-limit
    "使用 ORDER BY 和 LIMIT 的集合操作")'
- en: '[Limitations of Set Operations](set-operations.html#set-operations-limitations
    "Limitations of Set Operations")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[集合操作的限制](set-operations.html#set-operations-limitations "集合操作的限制")'
- en: SQL set operations combine the results of multiple query blocks into a single
    result. A *query block*, sometimes also known as a *simple table*, is any SQL
    statement that returns a result set, such as [`SELECT`](select.html "15.2.13 SELECT
    Statement"). MySQL 8.0 (8.0.19 and later) also supports [`TABLE`](table.html "15.2.16 TABLE
    Statement") and [`VALUES`](values.html "15.2.19 VALUES Statement") statements.
    See the individual descriptions of these statements elsewhere in this chapter
    for additional information.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 集合操作将多个查询块的结果合并为单个结果。查询块，有时也称为简单表，是任何返回结果集的 SQL 语句，例如 [`SELECT`](select.html
    "15.2.13 SELECT 语句")。MySQL 8.0（8.0.19 及更高版本）还支持 [`TABLE`](table.html "15.2.16 TABLE
    语句") 和 [`VALUES`](values.html "15.2.19 VALUES 语句") 语句。有关这些语句的详细信息，请参见本章其他部分中的各自描述。
- en: 'The SQL standard defines the following three set operations:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 标准定义了以下三种集合操作：
- en: '[`UNION`](union.html "15.2.18 UNION Clause"): Combine all results from two
    query blocks into a single result, omitting any duplicates.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UNION`](union.html "15.2.18 UNION 子句")：将两个查询块的所有结果合并为单个结果，省略任何重复项。'
- en: '[`INTERSECT`](intersect.html "15.2.8 INTERSECT Clause"): Combine only those
    rows which the results of two query blocks have in common, omitting any duplicates.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INTERSECT`](intersect.html "15.2.8 INTERSECT 子句")：仅合并两个查询块结果中共有的行，省略任何重复项。'
- en: '[`EXCEPT`](except.html "15.2.4 EXCEPT Clause"): For two query blocks *`A`*
    and *`B`*, return all results from *`A`* which are not also present in *`B`*,
    omitting any duplicates.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`EXCEPT`](except.html "15.2.4 EXCEPT 子句")：对于两个查询块 *`A`* 和 *`B`*，返回 *`A`* 中不在
    *`B`* 中出现的所有结果，省略任何重复项。'
- en: (Some database systems, such as Oracle, use `MINUS` for the name of this operator.
    This is not supported in MySQL.)
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （一些数据库系统，如 Oracle，使用 `MINUS` 作为此运算符的名称。MySQL 不支持此功能。）
- en: MySQL has long supported `UNION`; MySQL 8.0 adds support for `INTERSECT` and
    `EXCEPT` (MySQL 8.0.31 and later).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 长期支持 `UNION`；MySQL 8.0 添加了对 `INTERSECT` 和 `EXCEPT` 的支持（MySQL 8.0.31 及更高版本）。
- en: Each of these set operators supports an `ALL` modifier. When the `ALL` keyword
    follows a set operator, this causes duplicates to be included in the result. See
    the following sections covering the individual operators for more information
    and examples.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个集合运算符都支持 `ALL` 修饰符。当 `ALL` 关键字跟随一个集合运算符时，这会导致结果中包含重复项。有关更多信息和示例，请参阅涵盖各个运算符的以下部分。
- en: All three set operators also support a `DISTINCT` keyword, which suppresses
    duplicates in the result. Since this is the default behavior for set operators,
    it is usually not necessary to specify `DISTINCT` explicitly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三个集合运算符还支持 `DISTINCT` 关键字，用于在结果中消除重复项。由于这是集合运算符的默认行为，通常不需要显式指定 `DISTINCT`。
- en: 'In general, query blocks and set operations can be combined in any number and
    order. A greatly simplified representation is shown here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，查询块和集合操作可以以任意数量和顺序组合。这里展示了一个大大简化的表示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This can be represented more accurately, and in greater detail, like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以更准确地表示，并更详细地描述如下：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You should be aware that `INTERSECT` is evaluated before `UNION` or `EXCEPT`.
    This means that, for example, `TABLE x UNION TABLE y INTERSECT TABLE z` is always
    evaluated as `TABLE x UNION (TABLE y INTERSECT TABLE z)`. See [Section 15.2.8,
    “INTERSECT Clause”](intersect.html "15.2.8 INTERSECT Clause"), for more information.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该知道`INTERSECT`在`UNION`或`EXCEPT`之前进行评估。这意味着，例如，`TABLE x UNION TABLE y INTERSECT
    TABLE z`总是被评估为`TABLE x UNION (TABLE y INTERSECT TABLE z)`。有关更多信息，请参见[第15.2.8节，“INTERSECT子句”](intersect.html
    "15.2.8 INTERSECT Clause")。
- en: 'In addition, you should keep in mind that, while the `UNION` and `INTERSECT`
    set operators are commutative (ordering is not significant), `EXCEPT` is not (order
    of operands affects the outcome). In other words, all of the following statements
    are true:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您应该记住，虽然`UNION`和`INTERSECT`集合运算符是可交换的（顺序不重要），但`EXCEPT`不是（操作数的顺序会影响结果）。换句话说，以下所有语句都是正确的：
- en: '`TABLE x UNION TABLE y` and `TABLE y UNION TABLE x` produce the same result,
    although the ordering of the rows may differ. You can force them to be the same
    using `ORDER BY`; see [ORDER BY and LIMIT in Unions](/doc/refman/5.7/en/union.html#union-order-by-limit).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE x UNION TABLE y`和`TABLE y UNION TABLE x`产生相同的结果，尽管行的排序可能不同。您可以使用`ORDER
    BY`强制它们相同；请参见[联合中的ORDER BY和LIMIT](/doc/refman/5.7/en/union.html#union-order-by-limit)。'
- en: '`TABLE x INTERSECT TABLE y` and `TABLE y INTERSECT TABLE x` return the same
    result.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE x INTERSECT TABLE y`和`TABLE y INTERSECT TABLE x`返回相同的结果。'
- en: '`TABLE x EXCEPT TABLE y` and `TABLE y EXCEPT TABLE x` do *not* yield the same
    result. See [Section 15.2.4, “EXCEPT Clause”](except.html "15.2.4 EXCEPT Clause"),
    for an example.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE x EXCEPT TABLE y`和`TABLE y EXCEPT TABLE x`不会产生相同的结果。请参见[第15.2.4节，“EXCEPT子句”](except.html
    "15.2.4 EXCEPT Clause")，以获取示例。'
- en: More information and examples can be found in the sections that follow.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息和示例可以在接下来的章节中找到。
- en: Result Set Column Names and Data Types
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 结果集列名和数据类型
- en: 'The column names for the result of a set operation are taken from the column
    names of the first query block. Example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 集合操作的结果的列名取自第一个查询块的列名。示例：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is true for `UNION`, `EXCEPT`, and `INTERSECT` queries.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`UNION`、`EXCEPT`和`INTERSECT`查询都是如此。
- en: 'Selected columns listed in corresponding positions of each query block should
    have the same data type. For example, the first column selected by the first statement
    should have the same type as the first column selected by the other statements.
    If the data types of corresponding result columns do not match, the types and
    lengths of the columns in the result take into account the values retrieved by
    all of the query blocks. For example, the column length in the result set is not
    constrained to the length of the value from the first statement, as shown here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个查询块中列的选定位置应具有相同的数据类型。例如，第一个语句选择的第一列应与其他语句选择的第一列具有相同的类型。如果相应结果列的数据类型不匹配，则结果中的列的类型和长度将考虑所有查询块检索的值。例如，结果集中的列长度不受限于第一个语句中的值的长度，如下所示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Set Operations with TABLE and VALUES Statements
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`TABLE`和`VALUES`语句进行集合操作
- en: 'Beginning with MySQL 8.0.19, you can also use a [`TABLE`](table.html "15.2.16 TABLE
    Statement") statement or [`VALUES`](values.html "15.2.19 VALUES Statement") statement
    wherever you can employ the equivalent [`SELECT`](select.html "15.2.13 SELECT
    Statement") statement. Assume that tables `t1` and `t2` are created and populated
    as shown here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.19开始，您还可以在可以使用等效的[`SELECT`](select.html "15.2.13 SELECT Statement")语句的地方使用[`TABLE`](table.html
    "15.2.16 TABLE Statement")语句或[`VALUES`](values.html "15.2.19 VALUES Statement")语句。假设表`t1`和`t2`如下所示创建和填充：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding being the case, and disregarding the column names in the output
    of the queries beginning with [`VALUES`](values.html "15.2.19 VALUES Statement"),
    all of the following `UNION` queries yield the same result:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在忽略以[`VALUES`](values.html "15.2.19 VALUES Statement")开头的查询输出中的列名的情况下，以下所有`UNION`查询都产生相同的结果：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To force the column names to be the same, wrap the query block on the left-hand
    side in a `SELECT` statement, and use aliases, like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制列名相同，请将左侧的查询块包装在`SELECT`语句中，并使用别名，如下所示：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Set Operations using DISTINCT and ALL
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`DISTINCT`和`ALL`进行集合操作
- en: By default, duplicate rows are removed from results of set operations. The optional
    `DISTINCT` keyword has the same effect but makes it explicit. With the optional
    `ALL` keyword, duplicate-row removal does not occur and the result includes all
    matching rows from all queries in the union.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，集合操作的结果中会删除重复行。可选的`DISTINCT`关键字具有相同的效果，但使其显式化。使用可选的`ALL`关键字，不会删除重复行，结果将包含联合中所有查询的所有匹配行。
- en: You can mix `ALL` and `DISTINCT` in the same query. Mixed types are treated
    such that a set operation using `DISTINCT` overrides any such operation using
    `ALL` to its left. A `DISTINCT` set can be produced explicitly by using `DISTINCT`
    with [`UNION`](union.html "15.2.18 UNION Clause"), [`INTERSECT`](intersect.html
    "15.2.8 INTERSECT Clause"), or [`EXCEPT`](except.html "15.2.4 EXCEPT Clause"),
    or implicitly by using the set operations with no following `DISTINCT` or `ALL`
    keyword.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在同一查询中混合使用`ALL`和`DISTINCT`。混合类型的处理方式是，使用`DISTINCT`的集合操作会覆盖左侧使用`ALL`的任何操作。可以通过在[`UNION`](union.html
    "15.2.18 UNION Clause")、[`INTERSECT`](intersect.html "15.2.8 INTERSECT Clause")或[`EXCEPT`](except.html
    "15.2.4 EXCEPT Clause")后显式地使用`DISTINCT`，或者在没有跟随`DISTINCT`或`ALL`关键字的情况下隐式地使用集合操作来生成`DISTINCT`集合。
- en: In MySQL 8.0.19 and later, set operations work the same way when one or more
    [`TABLE`](table.html "15.2.16 TABLE Statement") statements, [`VALUES`](values.html
    "15.2.19 VALUES Statement") statements, or both, are used to generate the set.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.19及更高版本中，当一个或多个[`TABLE`](table.html "15.2.16 TABLE Statement")语句、[`VALUES`](values.html
    "15.2.19 VALUES Statement")语句或两者用于生成集合时，集合操作的工作方式相同。
- en: Set Operations with ORDER BY and LIMIT
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用`ORDER BY`和`LIMIT`的集合操作
- en: 'To apply an `ORDER BY` or `LIMIT` clause to an individual query block used
    as part of a union, intersection, or other set operation, parenthesize the query
    block, placing the clause inside the parentheses, like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要对作为联合、交集或其他集合操作的一部分使用的单个查询块应用`ORDER BY`或`LIMIT`子句，请将查询块括在括号中，并将子句放在括号内，就像这样：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Use of `ORDER BY` for individual query blocks or statements implies nothing
    about the order in which the rows appear in the final result because the rows
    produced by a set operation are by default unordered. Therefore, `ORDER BY` in
    this context typically is used in conjunction with `LIMIT`, to determine the subset
    of the selected rows to retrieve, even though it does not necessarily affect the
    order of those rows in the final result. If `ORDER BY` appears without `LIMIT`
    within a query block, it is optimized away because it has no effect in any case.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单个查询块或语句使用`ORDER BY`并不意味着结果中行的顺序，因为默认情况下，集合操作生成的行是无序的。因此，在这种情况下，`ORDER BY`通常与`LIMIT`结合使用，以确定要检索的所选行的子集，即使它并不一定影响这些行在最终结果中的顺序。如果在查询块中没有`LIMIT`出现`ORDER
    BY`，则会被优化掉，因为在任何情况下都没有影响。
- en: 'To use an `ORDER BY` or `LIMIT` clause to sort or limit the entire result of
    a set operation, place the `ORDER BY` or `LIMIT` after the last statement:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要对整个集合操作的结果进行排序或限制，请将`ORDER BY`或`LIMIT`放在最后一个语句之后：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If one or more individual statements make use of `ORDER BY`, `LIMIT`, or both,
    and, in addition, you wish to apply an ORDER BY, LIMIT, or both to the entire
    result, then each such individual statement must be enclosed in parentheses.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个或多个单独的语句使用了`ORDER BY`、`LIMIT`或两者，并且另外，你希望对整个结果应用`ORDER BY`、`LIMIT`或两者，则必须将每个这样的单独语句括在括号中。
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A statement with no `ORDER BY` or `LIMIT` clause does need to be parenthesized;
    replacing `TABLE t2` with `(TABLE t2)` in the second statement of the two just
    shown does not alter the result of the `UNION`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 没有`ORDER BY`或`LIMIT`子句的语句不需要括号；在刚刚显示的两个语句的第二个语句中用`(TABLE t2)`替换`TABLE t2`不会改变`UNION`的结果。
- en: 'You can also use `ORDER BY` and `LIMIT` with [`VALUES`](values.html "15.2.19 VALUES
    Statement") statements in set operations, as shown in this example using the [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") client:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在集合操作中使用`ORDER BY`和`LIMIT`，就像在这个使用[**mysql**](mysql.html "6.5.1 mysql —
    The MySQL Command-Line Client")客户端的示例中所示的那样：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: (You should keep in mind that neither `TABLE` statements nor `VALUES` statements
    accept a `WHERE` clause.)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: （请记住，`TABLE`语句和`VALUES`语句都不接受`WHERE`子句。）
- en: This kind of `ORDER BY` cannot use column references that include a table name
    (that is, names in *`tbl_name`*.*`col_name`* format). Instead, provide a column
    alias in the first query block, and refer to the alias in the `ORDER BY` clause.
    (You can also refer to the column in the `ORDER BY` clause using its column position,
    but such use of column positions is deprecated, and thus subject to eventual removal
    in a future MySQL release.)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的`ORDER BY`不能使用包含表名的列引用（即以*`tbl_name`*.*`col_name`*格式的名称）。相反，在第一个查询块中提供一个列别名，并在`ORDER
    BY`子句中引用该别名。 （你也可以在`ORDER BY`子句中使用列位置引用该列，但这种列位置的使用已被弃用，因此可能在未来的MySQL版本中被移除。）
- en: 'If a column to be sorted is aliased, the `ORDER BY` clause *must* refer to
    the alias, not the column name. The first of the following statements is permitted,
    but the second fails with an `Unknown column ''a'' in ''order clause''` error:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要排序的列被别名，`ORDER BY`子句*必须*引用别名，而不是列名。以下两个语句中第一个是允许的，但第二个会因为`Unknown column
    'a' in 'order clause'`错误而失败：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To cause rows in a [`UNION`](union.html "15.2.18 UNION Clause") result to consist
    of the sets of rows retrieved by each query block one after the other, select
    an additional column in each query block to use as a sort column and add an `ORDER
    BY` clause that sorts on that column following the last query block:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使[`UNION`](union.html "15.2.18 UNION Clause")结果的行由每个查询块检索的行集合依次组成，需要在每个查询块中选择一个额外的列作为排序列，并在最后一个查询块后添加一个按照该列排序的`ORDER
    BY`子句：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To maintain sort order within individual results, add a secondary column to
    the `ORDER BY` clause:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在各个结果中保持排序顺序，向`ORDER BY`子句添加一个次要列：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Use of an additional column also enables you to determine which query block
    each row comes from. Extra columns can provide other identifying information as
    well, such as a string that indicates a table name.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用额外的列还可以让你确定每行来自哪个查询块。额外的列还可以提供其他标识信息，比如指示表名的字符串。
- en: Limitations of Set Operations
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 集合操作的限制
- en: Set operations in MySQL are subject to some limitations, which are described
    in the next few paragraphs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL中的集合操作受到一些限制，这些限制在接下来的几段中描述。
- en: 'Set operations including [`SELECT`](select.html "15.2.13 SELECT Statement")
    statements have the following limitations:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 包括[`SELECT`](select.html "15.2.13 SELECT Statement")语句在内的集合操作有以下限制：
- en: '`HIGH_PRIORITY` in the first `SELECT` has no effect. `HIGH_PRIORITY` in any
    subsequent `SELECT` produces a syntax error.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个`SELECT`中的`HIGH_PRIORITY`没有效果。任何后续`SELECT`中的`HIGH_PRIORITY`都会产生语法错误。
- en: Only the last `SELECT` statement can use an `INTO` clause. However, the entire
    `UNION` result is written to the `INTO` output destination.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅最后一个`SELECT`语句可以使用`INTO`子句。然而，整个`UNION`结果将被写入`INTO`输出目的地。
- en: 'As of MySQL 8.0.20, these two `UNION` variants containing `INTO` are deprecated;
    you should expect support for them to be removed in a future version of MySQL:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.20，这两个包含`INTO`的`UNION`变体已被弃用；你应该期待它们在未来的MySQL版本中被移除的支持：
- en: 'In the trailing query block of a query expression, use of `INTO` before `FROM`
    produces a warning. Example:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在查询表达式的尾随查询块中，在`FROM`之前使用`INTO`会产生警告。例如：
- en: '[PRE14]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In a parenthesized trailing block of a query expression, use of `INTO` (regardless
    of its position relative to `FROM`) produces a warning. Example:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在查询表达式的括号尾随块中，使用`INTO`（无论其相对于`FROM`的位置如何）都会产生警告。例如：
- en: '[PRE15]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Those variants are deprecated because they are confusing, as if they collect
    information from the named table rather than the entire query expression (the
    `UNION`).
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些变体已经被弃用，因为它们很令人困惑，好像它们收集的信息来自命名表而不是整个查询表达式（`UNION`）。
- en: 'Set operations with an aggregate function in an `ORDER BY` clause are rejected
    with [`ER_AGGREGATE_ORDER_FOR_UNION`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_aggregate_order_for_union).
    Although the error name might suggest that this is exclusive to `UNION` queries,
    the preceding is also true for `EXCEPT` and `INTERSECT` queries, as shown here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ORDER BY`子句中使用聚合函数的集合操作将被拒绝，并显示[`ER_AGGREGATE_ORDER_FOR_UNION`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_aggregate_order_for_union)。虽然错误名称可能暗示这仅适用于`UNION`查询，但前述情况也适用于`EXCEPT`和`INTERSECT`查询，如下所示：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: A locking clause (such as `FOR UPDATE` or `LOCK IN SHARE MODE`) applies to the
    query block it follows. This means that, in a `SELECT` statement used with set
    operations, a locking clause can be used only if the query block and locking clause
    are enclosed in parentheses.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 锁定子句（比如`FOR UPDATE`或`LOCK IN SHARE MODE`）适用于其后的查询块。这意味着，在与集合操作一起使用的`SELECT`语句中，只有在查询块和锁定子句被括号括起来时才能使用锁定子句。
