- en: 20.7.5 Message Fragmentation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 20.7.5 消息分段
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-replication-performance-message-fragmentation.html](https://dev.mysql.com/doc/refman/8.0/en/group-replication-performance-message-fragmentation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-replication-performance-message-fragmentation.html](https://dev.mysql.com/doc/refman/8.0/en/group-replication-performance-message-fragmentation.html)
- en: When an abnormally large message is sent between Group Replication group members,
    it can result in some group members being reported as failed and expelled from
    the group. This is because the single thread used by Group Replication's group
    communication engine (XCom, a Paxos variant) is occupied processing the message
    for too long, so some of the group members might report the receiver as failed.
    From MySQL 8.0.16, by default, large messages are automatically split into fragments
    that are sent separately and reassembled by the recipients.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Group Replication组成员之间发送异常大的消息时，可能导致一些组成员被报告为失败并从组中驱逐。这是因为Group Replication的组通信引擎（XCom，一种Paxos变体）使用的单个线程在处理消息时占用时间过长，因此一些组成员可能会将接收者报告为失败。从MySQL
    8.0.16开始，默认情况下，大消息会自动分割成单独发送并由接收方重新组装的片段。
- en: The system variable [`group_replication_communication_max_message_size`](group-replication-system-variables.html#sysvar_group_replication_communication_max_message_size)
    specifies a maximum message size for Group Replication communications, above which
    messages are fragmented. The default maximum message size is 10485760 bytes (10
    MiB). The greatest permitted value is the same as the maximum value of the [`replica_max_allowed_packet`](replication-options-replica.html#sysvar_replica_max_allowed_packet)
    and [`slave_max_allowed_packet`](replication-options-replica.html#sysvar_slave_max_allowed_packet)
    system variables, which is 1073741824 bytes (1 GB). The setting for [`group_replication_communication_max_message_size`](group-replication-system-variables.html#sysvar_group_replication_communication_max_message_size)
    must be less than the [`replica_max_allowed_packet`](replication-options-replica.html#sysvar_replica_max_allowed_packet)
    or [`slave_max_allowed_packet`](replication-options-replica.html#sysvar_slave_max_allowed_packet)
    setting, because the applier thread cannot handle message fragments larger than
    the maximum permitted packet size. To switch off fragmentation, specify a zero
    value for [`group_replication_communication_max_message_size`](group-replication-system-variables.html#sysvar_group_replication_communication_max_message_size).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 系统变量[`group_replication_communication_max_message_size`](group-replication-system-variables.html#sysvar_group_replication_communication_max_message_size)指定了Group
    Replication通信的最大消息大小，超过该大小的消息将被分段。默认的最大消息大小为10485760字节（10 MiB）。允许的最大值与[`replica_max_allowed_packet`](replication-options-replica.html#sysvar_replica_max_allowed_packet)和[`slave_max_allowed_packet`](replication-options-replica.html#sysvar_slave_max_allowed_packet)系统变量的最大值相同，即1073741824字节（1
    GB）。[`group_replication_communication_max_message_size`](group-replication-system-variables.html#sysvar_group_replication_communication_max_message_size)的设置必须小于[`replica_max_allowed_packet`](replication-options-replica.html#sysvar_replica_max_allowed_packet)或[`slave_max_allowed_packet`](replication-options-replica.html#sysvar_slave_max_allowed_packet)的设置，因为应用程序线程无法处理大于最大允许数据包大小的消息片段。要关闭分段，为[`group_replication_communication_max_message_size`](group-replication-system-variables.html#sysvar_group_replication_communication_max_message_size)指定零值。
- en: 'As with most other Group Replication system variables, you must restart the
    Group Replication plugin for the change to take effect. For example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数其他Group Replication系统变量一样，必须重新启动Group Replication插件才能使更改生效。例如：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Message delivery for a fragmented message is considered complete when all the
    fragments of the message have been received and reassembled by all the group members.
    Fragmented messages include information in their headers that enables a member
    joining during message transmission to recover the earlier fragments that were
    sent before it joined. If the joining member fails to recover the fragments, it
    expels itself from the group.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 分段消息的消息传递在所有组成员接收并重新组装消息的所有片段后被视为完成。分段消息在其标头中包含信息，使得在消息传输过程中加入的成员能够恢复其加入之前发送的早期片段。如果加入的成员未能恢复片段，则会自行从组中退出。
- en: In order for a replication group to use fragmentation, all group members must
    be at MySQL 8.0.16 or above, and the Group Replication communication protocol
    version in use by the group must allow fragmentation. You can inspect the communication
    protocol in use by a group by using the [`group_replication_get_communication_protocol()`](group-replication-functions-for-communication-protocol.html#function_group-replication-get-communication-protocol)
    function, which returns the oldest MySQL Server version that the group supports.
    Versions from MySQL 5.7.14 allow compression of messages, and versions from MySQL
    8.0.16 also allow fragmentation of messages. If all group members are at MySQL
    8.0.16 or above and there is no requirement to allow members at earlier releases
    to join, you can use the [`group_replication_set_communication_protocol()`](group-replication-functions-for-communication-protocol.html#function_group-replication-set-communication-protocol)
    function to set the communication protocol version to MySQL 8.0.16 or above in
    order to allow fragmentation. For more information, see [Section 20.5.1.4, “Setting
    a Group's Communication Protocol Version”](group-replication-communication-protocol.html
    "20.5.1.4 Setting a Group's Communication Protocol Version").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使复制组使用分片，所有组成员必须在MySQL 8.0.16或更高版本，并且组使用的Group Replication通信协议版本必须允许分片。您可以使用[`group_replication_get_communication_protocol()`](group-replication-functions-for-communication-protocol.html#function_group-replication-get-communication-protocol)函数检查组使用的通信协议，该函数返回组支持的最旧的MySQL
    Server版本。从MySQL 5.7.14版本开始允许消息压缩，从MySQL 8.0.16版本开始还允许消息分片。如果所有组成员都在MySQL 8.0.16或更高版本，并且没有要求允许早期版本的成员加入，您可以使用[`group_replication_set_communication_protocol()`](group-replication-functions-for-communication-protocol.html#function_group-replication-set-communication-protocol)函数将通信协议版本设置为MySQL
    8.0.16或更高版本，以允许分片。有关更多信息，请参见[第20.5.1.4节，“设置组的通信协议版本”](group-replication-communication-protocol.html
    "20.5.1.4 设置组的通信协议版本")。
- en: If a replication group cannot use fragmentation because some members do not
    support it, the system variable [`group_replication_transaction_size_limit`](group-replication-system-variables.html#sysvar_group_replication_transaction_size_limit)
    can be used to limit the maximum size of transactions the group accepts. In MySQL
    8.0, the default setting is approximately 143 MB. Transactions above this size
    are rolled back. You can also use the system variable [`group_replication_member_expel_timeout`](group-replication-system-variables.html#sysvar_group_replication_member_expel_timeout)
    to allow additional time (up to an hour) before a member under suspicion of having
    failed is expelled from the group.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个复制组由于某些成员不支持而无法使用分片，系统变量[`group_replication_transaction_size_limit`](group-replication-system-variables.html#sysvar_group_replication_transaction_size_limit)可以用来限制组接受的事务的最大大小。在MySQL
    8.0中，默认设置约为143 MB。超过此大小的事务将被回滚。您还可以使用系统变量[`group_replication_member_expel_timeout`](group-replication-system-variables.html#sysvar_group_replication_member_expel_timeout)来允许额外的时间（最长一小时），在怀疑已经失败的成员被从组中驱逐之前。
