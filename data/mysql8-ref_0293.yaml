- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/thread-pool-operation.html](https://dev.mysql.com/doc/refman/8.0/en/thread-pool-operation.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/thread-pool-operation.html](https://dev.mysql.com/doc/refman/8.0/en/thread-pool-operation.html)
- en: 7.6.3.3 Thread Pool Operation
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 7.6.3.3 线程池操作
- en: The thread pool consists of a number of thread groups, each of which manages
    a set of client connections. As connections are established, the thread pool assigns
    them to thread groups in round-robin fashion.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 线程池由多个线程组组成，每个组管理一组客户端连接。随着连接的建立，线程池以轮询方式将它们分配给线程组。
- en: 'The thread pool exposes system variables that may be used to configure its
    operation:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 线程池公开了可用于配置其操作的系统变量：
- en: '[`thread_pool_algorithm`](server-system-variables.html#sysvar_thread_pool_algorithm):
    The concurrency algorithm to use for scheduling.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_algorithm`](server-system-variables.html#sysvar_thread_pool_algorithm):
    用于调度的并发算法。'
- en: '[`thread_pool_dedicated_listeners`](server-system-variables.html#sysvar_thread_pool_dedicated_listeners):
    Dedicates a listener thread in each thread group to listen for incoming statements
    from connections assigned to the group.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_dedicated_listeners`](server-system-variables.html#sysvar_thread_pool_dedicated_listeners):
    在每个线程组中专门指定一个监听线程，以监听分配给该组的连接的传入语句。'
- en: '[`thread_pool_high_priority_connection`](server-system-variables.html#sysvar_thread_pool_high_priority_connection):
    How to schedule statement execution for a session.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_high_priority_connection`](server-system-variables.html#sysvar_thread_pool_high_priority_connection):
    如何为会话安排语句执行。'
- en: '[`thread_pool_max_active_query_threads`](server-system-variables.html#sysvar_thread_pool_max_active_query_threads):
    How many active threads per group to permit.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_max_active_query_threads`](server-system-variables.html#sysvar_thread_pool_max_active_query_threads):
    每组允许的活动线程数。'
- en: '[`thread_pool_max_transactions_limit`](server-system-variables.html#sysvar_thread_pool_max_transactions_limit):
    The maximum number of transactions permitted by the thread pool plugin.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_max_transactions_limit`](server-system-variables.html#sysvar_thread_pool_max_transactions_limit):
    线程池插件允许的最大事务数。'
- en: '[`thread_pool_max_unused_threads`](server-system-variables.html#sysvar_thread_pool_max_unused_threads):
    How many sleeping threads to permit.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_max_unused_threads`](server-system-variables.html#sysvar_thread_pool_max_unused_threads):
    允许的休眠线程数。'
- en: '[`thread_pool_prio_kickup_timer`](server-system-variables.html#sysvar_thread_pool_prio_kickup_timer):
    How long before the thread pool moves a statement awaiting execution from the
    low-priority queue to the high-priority queue.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_prio_kickup_timer`](server-system-variables.html#sysvar_thread_pool_prio_kickup_timer):
    在低优先级队列中等待执行的语句移动到高优先级队列之前的时间。'
- en: '[`thread_pool_query_threads_per_group`](server-system-variables.html#sysvar_thread_pool_query_threads_per_group):
    The number of query threads permitted in a thread group (the default is a single
    query thread). Consider increasing the value if you experience slower response
    times due to long-running transactions.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_query_threads_per_group`](server-system-variables.html#sysvar_thread_pool_query_threads_per_group):
    在线程组中允许的查询线程数（默认为单个查询线程）。如果由于长时间运行的事务导致响应时间变慢，考虑增加该值。'
- en: '[`thread_pool_size`](server-system-variables.html#sysvar_thread_pool_size):
    The number of thread groups in the thread pool. This is the most important parameter
    controlling thread pool performance.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_size`](server-system-variables.html#sysvar_thread_pool_size):
    线程池中线程组的数量。这是控制线程池性能最重要的参数。'
- en: '[`thread_pool_stall_limit`](server-system-variables.html#sysvar_thread_pool_stall_limit):
    The time before an executing statement is considered to be stalled.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_stall_limit`](server-system-variables.html#sysvar_thread_pool_stall_limit):
    执行语句被视为停滞之前的时间。'
- en: '[`thread_pool_transaction_delay`](server-system-variables.html#sysvar_thread_pool_transaction_delay):
    The delay period before starting a new transaction.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_transaction_delay`](server-system-variables.html#sysvar_thread_pool_transaction_delay):
    开始新事务之前的延迟时间。'
- en: To configure the number of thread groups, use the [`thread_pool_size`](server-system-variables.html#sysvar_thread_pool_size)
    system variable. The default number of groups is 16\. For guidelines on setting
    this variable, see [Section 7.6.3.4, “Thread Pool Tuning”](thread-pool-tuning.html
    "7.6.3.4 Thread Pool Tuning").
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置线程组的数量，请使用[`thread_pool_size`](server-system-variables.html#sysvar_thread_pool_size)系统变量。默认组数为16。有关设置此变量的指导，请参见[第7.6.3.4节“线程池调优”](thread-pool-tuning.html
    "7.6.3.4 线程池调优")。
- en: The maximum number of threads per group is 4096 (or 4095 on some systems where
    one thread is used internally).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组的最大线程数为4096（在某些系统上为4095，其中一个线程在内部使用）。
- en: The thread pool separates connections and threads, so there is no fixed relationship
    between connections and the threads that execute statements received from those
    connections. This differs from the default thread-handling model that associates
    one thread with one connection such that a given thread executes all statements
    from its connection.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 线程池将连接和线程分开，因此连接和执行来自这些连接的语句的线程之间没有固定关系。这与默认的线程处理模型不同，后者将一个线程与一个连接关联起来，以便给定线程执行来自其连接的所有语句。
- en: 'By default, the thread pool tries to ensure a maximum of one thread executing
    in each group at any time, but sometimes permits more threads to execute temporarily
    for best performance:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，线程池尝试确保每个组中最多有一个线程在任何时候执行，但有时允许更多线程暂时执行以获得最佳性能：
- en: 'Each thread group has a listener thread that listens for incoming statements
    from the connections assigned to the group. When a statement arrives, the thread
    group either begins executing it immediately or queues it for later execution:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个线程组都有一个监听线程，用于监听分配给该组的连接的传入语句。当语句到达时，线程组要么立即开始执行它，要么将其排队以供稍后执行：
- en: Immediate execution occurs if the statement is the only one received, and there
    are no statements queued or currently executing.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果接收到的语句是唯一的，并且没有排队或当前正在执行的语句，则会立即执行。
- en: From MySQL 8.0.31, immediate execution can be delayed by configuring `thread_pool_transaction_delay`,
    which has a throttling effect on transactions. For more information, refer to
    the description of this variable in the discussion that follows.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.31 开始，可以通过配置`thread_pool_transaction_delay`来延迟立即执行，这对事务有限制作用。有关更多信息，请参考后续讨论中对该变量的描述。
- en: Queuing occurs if the statement cannot begin executing immediately due to concurrently
    queued or executing statements.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果语句由于同时排队或执行的语句而无法立即开始执行，则会发生排队。
- en: The [`thread_pool_transaction_delay`](server-system-variables.html#sysvar_thread_pool_transaction_delay)
    variable specifies a transaction delay in milliseconds. Worker threads sleep for
    the specified period before executing a new transaction.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_transaction_delay`](server-system-variables.html#sysvar_thread_pool_transaction_delay)
    变量指定了以毫秒为单位的事务延迟。工作线程在执行新事务之前会休眠指定的时间段。'
- en: A transaction delay can be used in cases where parallel transactions affect
    the performance of other operations due to resource contention. For example, if
    parallel transactions affect index creation or an online buffer pool resizing
    operation, you can configure a transaction delay to reduce resource contention
    while those operations are running. The delay has a throttling effect on transactions.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在并行事务影响其他操作的性能的情况下，可以使用事务延迟。例如，如果并行事务影响索引创建或在线缓冲池调整操作，可以配置事务延迟以减少资源争用。延迟对事务有限制作用。
- en: The `thread_pool_transaction_delay` setting does not affect queries issued from
    a privileged connection (a connection assigned to the `Admin` thread group). These
    queries are not subject to a configured transaction delay.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`thread_pool_transaction_delay` 设置不影响从特权连接（分配给`Admin`线程组的连接）发出的查询。这些查询不受配置的事务延迟影响。'
- en: If immediate execution occurs, the listener thread performs it. (This means
    that temporarily no thread in the group is listening.) If the statement finishes
    quickly, the executing thread returns to listening for statements. Otherwise,
    the thread pool considers the statement stalled and starts another thread as a
    listener thread (creating it if necessary). To ensure that no thread group becomes
    blocked by stalled statements, the thread pool has a background thread that regularly
    monitors thread group states.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果立即执行发生，则监听线程执行它。（这意味着暂时没有线程在组中监听。）如果语句很快完成，执行线程将返回到监听语句。否则，线程池会认为语句被阻塞，并启动另一个线程作为监听线程（必要时创建）。为了确保没有线程组被阻塞在被阻塞的语句上，线程池有一个定期监视线程组状态的后台线程。
- en: By using the listening thread to execute a statement that can begin immediately,
    there is no need to create an additional thread if the statement finishes quickly.
    This ensures the most efficient execution possible in the case of a low number
    of concurrent threads.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过使用监听线程执行可以立即开始的语句，如果语句很快完成，则无需创建额外的线程。这确保在并发线程数量较低的情况下实现最有效的执行。
- en: When the thread pool plugin starts, it creates one thread per group (the listener
    thread), plus the background thread. Additional threads are created as necessary
    to execute statements.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当线程池插件启动时，它会为每个组创建一个线程（监听线程），以及后台线程。根据需要创建额外的线程来执行语句。
- en: The value of the [`thread_pool_stall_limit`](server-system-variables.html#sysvar_thread_pool_stall_limit)
    system variable determines the meaning of “finishes quickly” in the previous item.
    The default time before threads are considered stalled is 60ms but can be set
    to a maximum of 6s. This parameter is configurable to enable you to strike a balance
    appropriate for the server work load. Short wait values permit threads to start
    more quickly. Short values are also better for avoiding deadlock situations. Long
    wait values are useful for workloads that include long-running statements, to
    avoid starting too many new statements while the current ones execute.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`thread_pool_stall_limit`](server-system-variables.html#sysvar_thread_pool_stall_limit)系统变量的值确定了前一项中“快速完成”的含义。在被视为停顿之前的默认时间为60ms，但可以设置为最大6秒。此参数可配置，以便您能够在服务器工作负载中找到适当的平衡。较短的等待值允许线程更快地启动。较短的值也更有利于避免死锁情况。较长的等待值对包含长期运行语句的工作负载很有用，以避免在当前语句执行时启动过多的新语句。'
- en: If [`thread_pool_max_active_query_threads`](server-system-variables.html#sysvar_thread_pool_max_active_query_threads)
    is 0, the default algorithm applies as just described for determining the maximum
    number of active threads per group. The default algorithm takes stalled threads
    into account and may temporarily permit more active threads. If [`thread_pool_max_active_query_threads`](server-system-variables.html#sysvar_thread_pool_max_active_query_threads)
    is greater than 0, it places a limit on the number of active threads per group.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果[`thread_pool_max_active_query_threads`](server-system-variables.html#sysvar_thread_pool_max_active_query_threads)为0，则默认算法适用于确定每个组的活动线程的最大数量，就像前面描述的那样。默认算法考虑了停顿的线程，并可能暂时允许更多的活动线程。如果[`thread_pool_max_active_query_threads`](server-system-variables.html#sysvar_thread_pool_max_active_query_threads)大于0，则它会限制每个组的活动线程数量。
- en: The thread pool focuses on limiting the number of concurrent short-running statements.
    Before an executing statement reaches the stall time, it prevents other statements
    from beginning to execute. If the statement executes past the stall time, it is
    permitted to continue but no longer prevents other statements from starting. In
    this way, the thread pool tries to ensure that in each thread group there is never
    more than one short-running statement, although there might be multiple long-running
    statements. It is undesirable to let long-running statements prevent other statements
    from executing because there is no limit on the amount of waiting that might be
    necessary. For example, on a replication source server, a thread that is sending
    binary log events to a replica effectively runs forever.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程池专注于限制并发短期运行的语句数量。在执行语句达到停顿时间之前，它会阻止其他语句开始执行。如果语句执行超过停顿时间，它将被允许继续执行，但不再阻止其他语句开始。通过这种方式，线程池试图确保在每个线程组中永远不会有多个短期运行的语句，尽管可能存在多个长期运行的语句。让长期运行的语句阻止其他语句执行是不可取的，因为可能需要等待的时间没有限制。例如，在复制源服务器上，负责向副本发送二进制日志事件的线程实际上会永远运行。
- en: A statement becomes blocked if it encounters a disk I/O operation or a user
    level lock (row lock or table lock). The block would cause the thread group to
    become unused, so there are callbacks to the thread pool to ensure that the thread
    pool can immediately start a new thread in this group to execute another statement.
    When a blocked thread returns, the thread pool permits it to restart immediately.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果语句遇到磁盘I/O操作或用户级锁（行锁或表锁），则该语句将被阻塞。阻塞将导致线程组变为未使用状态，因此会有回调到线程池，以确保线程池可以立即在该组中启动一个新线程来执行另一个语句。当阻塞的线程返回时，线程池允许其立即重新启动。
- en: There are two queues, a high-priority queue and a low-priority queue. The first
    statement in a transaction goes to the low-priority queue. Any following statements
    for the transaction go to the high-priority queue if the transaction is ongoing
    (statements for it have begun executing), or to the low-priority queue otherwise.
    Queue assignment can be affected by enabling the [`thread_pool_high_priority_connection`](server-system-variables.html#sysvar_thread_pool_high_priority_connection)
    system variable, which causes all queued statements for a session to go into the
    high-priority queue.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有两个队列，一个高优先级队列和一个低优先级队列。事务中的第一条语句进入低优先级队列。如果事务正在进行中（其语句已开始执行），则事务的任何后续语句进入高优先级队列，否则进入低优先级队列。通过启用[`thread_pool_high_priority_connection`](server-system-variables.html#sysvar_thread_pool_high_priority_connection)系统变量，可以影响队列分配，导致会话的所有排队语句进入高优先级队列。
- en: Statements for a nontransactional storage engine, or a transactional engine
    if [`autocommit`](server-system-variables.html#sysvar_autocommit) is enabled,
    are treated as low-priority statements because in this case each statement is
    a transaction. Thus, given a mix of statements for `InnoDB` and `MyISAM` tables,
    the thread pool prioritizes those for `InnoDB` over those for `MyISAM` unless
    [`autocommit`](server-system-variables.html#sysvar_autocommit) is enabled. With
    [`autocommit`](server-system-variables.html#sysvar_autocommit) enabled, all statements
    have low priority.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对非事务性存储引擎的语句，或者如果启用了[`autocommit`](server-system-variables.html#sysvar_autocommit)的事务性引擎，被视为低优先级语句，因为在这种情况下每条语句都是一个事务。因此，对于`InnoDB`和`MyISAM`表的语句混合，线程池优先处理`InnoDB`表的语句而不是`MyISAM`表的语句，除非启用了[`autocommit`](server-system-variables.html#sysvar_autocommit)。启用[`autocommit`](server-system-variables.html#sysvar_autocommit)后，所有语句都具有低优先级。
- en: When the thread group selects a queued statement for execution, it first looks
    in the high-priority queue, then in the low-priority queue. If a statement is
    found, it is removed from its queue and begins to execute.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当线程组选择一个排队的语句进行执行时，首先查看高优先级队列，然后查看低优先级队列。如果找到一条语句，则将其从队列中移除并开始执行。
- en: If a statement stays in the low-priority queue too long, the thread pool moves
    to the high-priority queue. The value of the [`thread_pool_prio_kickup_timer`](server-system-variables.html#sysvar_thread_pool_prio_kickup_timer)
    system variable controls the time before movement. For each thread group, a maximum
    of one statement per 10ms (100 per second) is moved from the low-priority queue
    to the high-priority queue.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一条语句在低优先级队列中停留时间过长，线程池将移动到高优先级队列。[`thread_pool_prio_kickup_timer`](server-system-variables.html#sysvar_thread_pool_prio_kickup_timer)系统变量的值控制移动前的时间。对于每个线程组，每10ms（每秒100次）最多将一条语句从低优先级队列移动到高优先级队列。
- en: The thread pool reuses the most active threads to obtain a much better use of
    CPU caches. This is a small adjustment that has a great impact on performance.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程池重复使用最活跃的线程以更好地利用CPU缓存。这是一个对性能有很大影响的小调整。
- en: While a thread executes a statement from a user connection, Performance Schema
    instrumentation accounts thread activity to the user connection. Otherwise, Performance
    Schema accounts activity to the thread pool.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个线程执行来自用户连接的语句时，性能模式仪表化将线程活动归因于用户连接。否则，性能模式将活动归因于线程池。
- en: 'Here are examples of conditions under which a thread group might have multiple
    threads started to execute statements:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是线程组可能启动多个线程执行语句的条件示例：
- en: One thread begins executing a statement, but runs long enough to be considered
    stalled. The thread group permits another thread to begin executing another statement
    even through the first thread is still executing.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个线程开始执行一条语句，但运行时间足够长以被视为停滞。线程组允许另一个线程开始执行另一条语句，即使第一个线程仍在执行。
- en: One thread begins executing a statement, then becomes blocked and reports this
    back to the thread pool. The thread group permits another thread to begin executing
    another statement.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个线程开始执行一条语句，然后变为阻塞状态并将此情况报告给线程池。线程组允许另一个线程开始执行另一条语句。
- en: One thread begins executing a statement, becomes blocked, but does not report
    back that it is blocked because the block does not occur in code that has been
    instrumented with thread pool callbacks. In this case, the thread appears to the
    thread group to be still running. If the block lasts long enough for the statement
    to be considered stalled, the group permits another thread to begin executing
    another statement.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个线程开始执行一个语句，变得阻塞，但没有报告它被阻塞，因为阻塞不发生在已经使用线程池回调进行仪器化的代码中。在这种情况下，该线程对线程组来说仍在运行。如果阻塞持续时间足够长，使语句被视为停滞不前，组允许另一个线程开始执行另一个语句。
- en: 'The thread pool is designed to be scalable across an increasing number of connections.
    It is also designed to avoid deadlocks that can arise from limiting the number
    of actively executing statements. It is important that threads that do not report
    back to the thread pool do not prevent other statements from executing and thus
    cause the thread pool to become deadlocked. Examples of such statements follow:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 线程池设计为可扩展到越来越多的连接。它还设计为避免由于限制活动执行语句的数量而可能产生的死锁。重要的是，不向线程池报告的线程不应该阻止其他语句的执行，从而导致线程池陷入死锁。以下是此类语句的示例：
- en: Long-running statements. These would lead to all resources used by only a few
    statements and they could prevent all others from accessing the server.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长时间运行的语句。这些将导致仅有少数语句使用所有资源，它们可能阻止其他所有人访问服务器。
- en: Binary log dump threads that read the binary log and send it to replicas. This
    is a kind of long-running “statement” that runs for a very long time, and that
    should not prevent other statements from executing.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取二进制日志并将其发送到副本的二进制日志转储线程。这是一种长时间运行的“语句”，运行时间很长，不应该阻止其他语句的执行。
- en: Statements blocked on a row lock, table lock, sleep, or any other blocking activity
    that has not been reported back to the thread pool by MySQL Server or a storage
    engine.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行锁、表锁、休眠或任何其他未被MySQL服务器或存储引擎报告给线程池的阻塞活动上被阻塞的语句。
- en: In each case, to prevent deadlock, the statement is moved to the stalled category
    when it does not complete quickly, so that the thread group can permit another
    statement to begin executing. With this design, when a thread executes or becomes
    blocked for an extended time, the thread pool moves the thread to the stalled
    category and for the rest of the statement's execution, it does not prevent other
    statements from executing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，为了防止死锁，当语句不能快速完成时，将该语句移至停滞类别，以便线程组可以允许另一个语句开始执行。通过这种设计，当线程执行或长时间阻塞时，线程池将该线程移至停滞类别，并在语句的其余执行过程中，不会阻止其他语句的执行。
- en: The maximum number of threads that can occur is the sum of [`max_connections`](server-system-variables.html#sysvar_max_connections)
    and [`thread_pool_size`](server-system-variables.html#sysvar_thread_pool_size).
    This can happen in a situation where all connections are in execution mode and
    an extra thread is created per group to listen for more statements. This is not
    necessarily a state that happens often, but it is theoretically possible.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可发生的线程最大数量是[`max_connections`](server-system-variables.html#sysvar_max_connections)和[`thread_pool_size`](server-system-variables.html#sysvar_thread_pool_size)的总和。这可能发生在所有连接都处于执行模式且每个组创建了一个额外线程来监听更多语句的情况下。这不一定经常发生，但在理论上是可能的。
- en: Privileged Connections
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 特权连接
- en: When the limit defined by [`thread_pool_max_transactions_limit`](server-system-variables.html#sysvar_thread_pool_max_transactions_limit)
    has been reached, new connections appear to hang until one or more existing transactions
    are completed. The same occurs when attempting to start a new transaction on an
    existing connection. If existing connections are blocked or long-running, the
    only way to access the server is using a privileged connection.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当达到[`thread_pool_max_transactions_limit`](server-system-variables.html#sysvar_thread_pool_max_transactions_limit)定义的限制时，新连接似乎会挂起，直到一个或多个现有事务完成。当尝试在现有连接上启动新事务时也会发生相同情况。如果现有连接被阻塞或长时间运行，访问服务器的唯一方法是使用特权连接。
- en: To establish a privileged connection, the user initiating the connection must
    have the [`TP_CONNECTION_ADMIN`](privileges-provided.html#priv_tp-connection-admin)
    privilege. A privileged connection ignores the limit defined by [`thread_pool_max_transactions_limit`](server-system-variables.html#sysvar_thread_pool_max_transactions_limit)
    and permits connecting to the server to increase the limit, remove the limit,
    or kill running transactions. [`TP_CONNECTION_ADMIN`](privileges-provided.html#priv_tp-connection-admin)
    privilege must be granted explicitly. It is not granted to any user by default.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要建立特权连接，发起连接的用户必须具有[`TP_CONNECTION_ADMIN`](privileges-provided.html#priv_tp-connection-admin)权限。特权连接会忽略由[`thread_pool_max_transactions_limit`](server-system-variables.html#sysvar_thread_pool_max_transactions_limit)定义的限制，并允许连接到服务器以增加限制、移除限制或终止正在运行的事务。[`TP_CONNECTION_ADMIN`](privileges-provided.html#priv_tp-connection-admin)权限必须显式授予，不会默认授予任何用户。
- en: A privileged connection can execute statements and start transactions, and is
    assigned to a thread group designated as the `Admin` thread group.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 特权连接可以执行语句和启动事务，并分配给指定为`Admin`线程组的线程组。
- en: When querying the [`performance_schema.tp_thread_group_stats`](performance-schema-tp-thread-group-stats-table.html
    "29.12.16.2 The tp_thread_group_stats Table") table, which reports statistics
    per thread group, `Admin` thread group statistics are reported in the last row
    of the result set. For example, if `SELECT * FROM performance_schema.tp_thread_group_stats\G`
    returns 17 rows (one row per thread group), the `Admin` thread group statistics
    are reported in the 17th row.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当查询[`performance_schema.tp_thread_group_stats`](performance-schema-tp-thread-group-stats-table.html
    "29.12.16.2 The tp_thread_group_stats Table")表时，该表报告每个线程组的统计信息，`Admin`线程组的统计信息报告在结果集的最后一行。例如，如果`SELECT
    * FROM performance_schema.tp_thread_group_stats\G`返回17行（每个线程组一行），`Admin`线程组的统计信息将报告在第17行。
