- en: 14.8.2 Regular Expressions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.8.2 正则表达式
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/regexp.html](https://dev.mysql.com/doc/refman/8.0/en/regexp.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/regexp.html](https://dev.mysql.com/doc/refman/8.0/en/regexp.html)
- en: '**Table 14.14 Regular Expression Functions and Operators**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.14 正则表达式函数和运算符**'
- en: '| Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`NOT REGEXP`](regexp.html#operator_not-regexp) | Negation of REGEXP |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`NOT REGEXP`](regexp.html#operator_not-regexp) | REGEXP的否定 |'
- en: '| [`REGEXP`](regexp.html#operator_regexp) | Whether string matches regular
    expression |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`REGEXP`](regexp.html#operator_regexp) | 字符串是否匹配正则表达式 |'
- en: '| [`REGEXP_INSTR()`](regexp.html#function_regexp-instr) | Starting index of
    substring matching regular expression |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`REGEXP_INSTR()`](regexp.html#function_regexp-instr) | 返回匹配正则表达式的子字符串的起始索引
    |'
- en: '| [`REGEXP_LIKE()`](regexp.html#function_regexp-like) | Whether string matches
    regular expression |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`REGEXP_LIKE()`](regexp.html#function_regexp-like) | 字符串是否匹配正则表达式 |'
- en: '| [`REGEXP_REPLACE()`](regexp.html#function_regexp-replace) | Replace substrings
    matching regular expression |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`REGEXP_REPLACE()`](regexp.html#function_regexp-replace) | 替换匹配正则表达式的子字符串
    |'
- en: '| [`REGEXP_SUBSTR()`](regexp.html#function_regexp-substr) | Return substring
    matching regular expression |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`REGEXP_SUBSTR()`](regexp.html#function_regexp-substr) | 返回匹配正则表达式的子字符串
    |'
- en: '| [`RLIKE`](regexp.html#operator_regexp) | Whether string matches regular expression
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`RLIKE`](regexp.html#operator_regexp) | 字符串是否匹配正则表达式 |'
- en: A regular expression is a powerful way of specifying a pattern for a complex
    search. This section discusses the functions and operators available for regular
    expression matching and illustrates, with examples, some of the special characters
    and constructs that can be used for regular expression operations. See also [Section 5.3.4.7,
    “Pattern Matching”](pattern-matching.html "5.3.4.7 Pattern Matching").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式是指定复杂搜索模式的强大方式。本节讨论了用于正则表达式匹配的函数和运算符，并举例说明了一些特殊字符和结构，可用于正则表达式操作。另请参见[第5.3.4.7节，“模式匹配”](pattern-matching.html
    "5.3.4.7 模式匹配")。
- en: MySQL implements regular expression support using International Components for
    Unicode (ICU), which provides full Unicode support and is multibyte safe. (Prior
    to MySQL 8.0.4, MySQL used Henry Spencer's implementation of regular expressions,
    which operates in byte-wise fashion and is not multibyte safe. For information
    about ways in which applications that use regular expressions may be affected
    by the implementation change, see [Regular Expression Compatibility Considerations](regexp.html#regexp-compatibility
    "Regular Expression Compatibility Considerations").)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 使用国际化组件Unicode（ICU）实现正则表达式支持，提供完整的Unicode支持并且是多字节安全的。（在MySQL 8.0.4之前，MySQL使用Henry
    Spencer的正则表达式实现，以字节方式操作，不是多字节安全的。有关使用正则表达式的应用程序可能受到实现更改影响的信息，请参见[正则表达式兼容性注意事项](regexp.html#regexp-compatibility
    "正则表达式兼容性注意事项").）
- en: Prior to MySQL 8.0.22, it was possible to use binary string arguments with these
    functions, but they yielded inconsistent results. In MySQL 8.0.22 and later, use
    of a binary string with any of the MySQL regular expression functions is rejected
    with [`ER_CHARACTER_SET_MISMATCH`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_character_set_mismatch).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.22之前，可以使用二进制字符串参数与这些函数，但结果不一致。在MySQL 8.0.22及更高版本中，使用任何MySQL正则表达式函数的二进制字符串将被拒绝，并显示[`ER_CHARACTER_SET_MISMATCH`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_character_set_mismatch)。
- en: '[Regular Expression Function and Operator Descriptions](regexp.html#regexp-operator-descriptions
    "Regular Expression Function and Operator Descriptions")'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[正则表达式函数和运算符描述](regexp.html#regexp-operator-descriptions "正则表达式函数和运算符描述")'
- en: '[Regular Expression Syntax](regexp.html#regexp-syntax "Regular Expression Syntax")'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[正则表达式语法](regexp.html#regexp-syntax "正则表达式语法")'
- en: '[Regular Expression Resource Control](regexp.html#regexp-resource-control "Regular
    Expression Resource Control")'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[正则表达式资源控制](regexp.html#regexp-resource-control "正则表达式资源控制")'
- en: '[Regular Expression Compatibility Considerations](regexp.html#regexp-compatibility
    "Regular Expression Compatibility Considerations")'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[正则表达式兼容性注意事项](regexp.html#regexp-compatibility "正则表达式兼容性注意事项")'
- en: Regular Expression Function and Operator Descriptions
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 正则表达式函数和运算符描述
- en: '[`*`expr`* NOT REGEXP *`pat`*`](regexp.html#operator_not-regexp), [`*`expr`*
    NOT RLIKE *`pat`*`](regexp.html#operator_not-regexp)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`expr`* NOT REGEXP *`pat`*`](regexp.html#operator_not-regexp), [`*`expr`*
    NOT RLIKE *`pat`*`](regexp.html#operator_not-regexp)'
- en: This is the same as `NOT (*`expr`* REGEXP *`pat`*)`.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这与 `NOT (*`expr`* REGEXP *`pat`*)` 相同。
- en: '[`*`expr`* REGEXP *`pat`*`](regexp.html#operator_regexp), [`*`expr`* RLIKE
    *`pat`*`](regexp.html#operator_regexp)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`expr`* REGEXP *`pat`*`](regexp.html#operator_regexp), [`*`expr`* RLIKE
    *`pat`*`](regexp.html#operator_regexp)'
- en: Returns 1 if the string *`expr`* matches the regular expression specified by
    the pattern *`pat`*, 0 otherwise. If *`expr`* or *`pat`* is `NULL`, the return
    value is `NULL`.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果字符串*`expr`*与模式*`pat`*指定的正则表达式匹配，则返回1，否则返回0。如果*`expr`*或*`pat`*为`NULL`，则返回值为`NULL`。
- en: '[`REGEXP`](regexp.html#operator_regexp) and [`RLIKE`](regexp.html#operator_regexp)
    are synonyms for [`REGEXP_LIKE()`](regexp.html#function_regexp-like).'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`REGEXP`](regexp.html#operator_regexp)和[`RLIKE`](regexp.html#operator_regexp)是[`REGEXP_LIKE()`](regexp.html#function_regexp-like)的同义词。'
- en: For additional information about how matching occurs, see the description for
    [`REGEXP_LIKE()`](regexp.html#function_regexp-like).
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关匹配发生的更多信息，请参阅[`REGEXP_LIKE()`](regexp.html#function_regexp-like)的描述。
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`REGEXP_INSTR(*`expr`*, *`pat`*[, *`pos`*[, *`occurrence`*[, *`return_option`*[,
    *`match_type`*]]]])`](regexp.html#function_regexp-instr)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REGEXP_INSTR(*`expr`*, *`pat`*[, *`pos`*[, *`occurrence`*[, *`return_option`*[,
    *`match_type`*]]]])`](regexp.html#function_regexp-instr)'
- en: Returns the starting index of the substring of the string *`expr`* that matches
    the regular expression specified by the pattern *`pat`*, 0 if there is no match.
    If *`expr`* or *`pat`* is `NULL`, the return value is `NULL`. Character indexes
    begin at 1.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回字符串*`expr`*中与模式*`pat`*指定的正则表达式匹配的子字符串的起始索引，如果没有匹配则返回0。如果*`expr`*或*`pat`*为`NULL`，则返回值为`NULL`。字符索引从1开始。
- en: '[`REGEXP_INSTR()`](regexp.html#function_regexp-instr) takes these optional
    arguments:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`REGEXP_INSTR()`](regexp.html#function_regexp-instr)接受这些可选参数：'
- en: '*`pos`*: The position in *`expr`* at which to start the search. If omitted,
    the default is 1.'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`pos`*：开始搜索的*`expr`*中的位置。如果省略，则默认为1。'
- en: '*`occurrence`*: Which occurrence of a match to search for. If omitted, the
    default is 1.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`occurrence`*：要搜索的匹配的哪个出现。如果省略，则默认为1。'
- en: '*`return_option`*: Which type of position to return. If this value is 0, [`REGEXP_INSTR()`](regexp.html#function_regexp-instr)
    returns the position of the matched substring''s first character. If this value
    is 1, [`REGEXP_INSTR()`](regexp.html#function_regexp-instr) returns the position
    following the matched substring. If omitted, the default is 0.'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`return_option`*：要返回的位置类型。如果此值为0，[`REGEXP_INSTR()`](regexp.html#function_regexp-instr)将返回匹配子字符串的第一个字符的位置。如果此值为1，[`REGEXP_INSTR()`](regexp.html#function_regexp-instr)将返回匹配子字符串后面的位置。如果省略，则默认为0。'
- en: '*`match_type`*: A string that specifies how to perform matching. The meaning
    is as described for [`REGEXP_LIKE()`](regexp.html#function_regexp-like).'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`match_type`*：指定如何执行匹配的字符串。其含义如[`REGEXP_LIKE()`](regexp.html#function_regexp-like)中描述的。'
- en: For additional information about how matching occurs, see the description for
    [`REGEXP_LIKE()`](regexp.html#function_regexp-like).
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关匹配发生的更多信息，请参阅[`REGEXP_LIKE()`](regexp.html#function_regexp-like)的描述。
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`REGEXP_LIKE(*`expr`*, *`pat`*[, *`match_type`*])`](regexp.html#function_regexp-like)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REGEXP_LIKE(*`expr`*, *`pat`*[, *`match_type`*])`](regexp.html#function_regexp-like)'
- en: Returns 1 if the string *`expr`* matches the regular expression specified by
    the pattern *`pat`*, 0 otherwise. If *`expr`* or *`pat`* is `NULL`, the return
    value is `NULL`.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果字符串*`expr`*与模式*`pat`*指定的正则表达式匹配，则返回1，否则返回0。如果*`expr`*或*`pat`*为`NULL`，则返回值为`NULL`。
- en: The pattern can be an extended regular expression, the syntax for which is discussed
    in [Regular Expression Syntax](regexp.html#regexp-syntax "Regular Expression Syntax").
    The pattern need not be a literal string. For example, it can be specified as
    a string expression or table column.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模式可以是扩展正则表达式，其语法在[正则表达式语法](regexp.html#regexp-syntax "Regular Expression Syntax")中讨论。模式不必是一个字面字符串。例如，它可以被指定为一个字符串表达式或表列。
- en: 'The optional *`match_type`* argument is a string that may contain any or all
    the following characters specifying how to perform matching:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的*`match_type`*参数是一个字符串，可以包含任何或所有以下字符，指定如何执行匹配：
- en: '`c`: Case-sensitive matching.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`：区分大小写匹配。'
- en: '`i`: Case-insensitive matching.'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i`：不区分大小写匹配。'
- en: '`m`: Multiple-line mode. Recognize line terminators within the string. The
    default behavior is to match line terminators only at the start and end of the
    string expression.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`：多行模式。识别字符串内的行终止符。默认行为是仅在字符串表达式的开头和结尾匹配行终止符。'
- en: '`n`: The `.` character matches line terminators. The default is for `.` matching
    to stop at the end of a line.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：`.`字符匹配行终止符。默认情况下，`.`匹配会在行尾停止。'
- en: '`u`: Unix-only line endings. Only the newline character is recognized as a
    line ending by the `.`, `^`, and `$` match operators.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`u`：仅适用于Unix换行符。只有换行符被`.`、`^`和`$`匹配操作符识别为换行符。'
- en: If characters specifying contradictory options are specified within *`match_type`*,
    the rightmost one takes precedence.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在*`match_type`*中指定了指定矛盾选项的字符，则最右边的选项优先。
- en: By default, regular expression operations use the character set and collation
    of the *`expr`* and *`pat`* arguments when deciding the type of a character and
    performing the comparison. If the arguments have different character sets or collations,
    coercibility rules apply as described in [Section 12.8.4, “Collation Coercibility
    in Expressions”](charset-collation-coercibility.html "12.8.4 Collation Coercibility
    in Expressions"). Arguments may be specified with explicit collation indicators
    to change comparison behavior.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，正则表达式操作在决定字符类型和执行比较时使用*`expr`*和*`pat`*参数的字符集和排序规则。如果参数具有不同的字符集或排序规则，则会应用强制转换规则，如[第12.8.4节“表达式中的排序规则可转换性”](charset-collation-coercibility.html
    "12.8.4 表达式中的排序规则可转换性")中所述。可以使用显式排序标识符指定参数以更改比较行为。
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*`match_type`* may be specified with the `c` or `i` characters to override
    the default case sensitivity. Exception: If either argument is a binary string,
    the arguments are handled in case-sensitive fashion as binary strings, even if
    *`match_type`* contains the `i` character.'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`match_type`*可以用`c`或`i`字符指定以覆盖默认的大小写敏感性。例外：如果任一参数是二进制字符串，则参数将作为二进制字符串进行大小写敏感处理，即使*`match_type`*包含`i`字符。'
- en: Note
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: MySQL uses C escape syntax in strings (for example, `\n` to represent the newline
    character). If you want your *`expr`* or *`pat`* argument to contain a literal
    `\`, you must double it. (Unless the [`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL mode is enabled, in which case no escape character is used.)
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL在字符串中使用C转义语法（例如，`\n`表示换行符）。如果您希望您的*`expr`*或*`pat`*参数包含文字`\`，则必须将其加倍。（除非启用了[`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL模式，在这种情况下不使用转义字符。）
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[`REGEXP_REPLACE(*`expr`*, *`pat`*, *`repl`*[, *`pos`*[, *`occurrence`*[, *`match_type`*]]])`](regexp.html#function_regexp-replace)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REGEXP_REPLACE(*`expr`*, *`pat`*, *`repl`*[, *`pos`*[, *`occurrence`*[, *`match_type`*]]])`](regexp.html#function_regexp-replace)'
- en: Replaces occurrences in the string *`expr`* that match the regular expression
    specified by the pattern *`pat`* with the replacement string *`repl`*, and returns
    the resulting string. If *`expr`*, *`pat`*, or *`repl`* is `NULL`, the return
    value is `NULL`.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用替换字符串*`repl`*替换与模式*`pat`*指定的正则表达式匹配的字符串*`expr`*中的出现，并返回结果字符串。如果*`expr`*、*`pat`*或*`repl`*为`NULL`，则返回值为`NULL`。
- en: '[`REGEXP_REPLACE()`](regexp.html#function_regexp-replace) takes these optional
    arguments:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`REGEXP_REPLACE()`](regexp.html#function_regexp-replace)接受这些可选参数：'
- en: '*`pos`*: The position in *`expr`* at which to start the search. If omitted,
    the default is 1.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`pos`*：在*`expr`*中开始搜索的位置。如果省略，默认为1。'
- en: '*`occurrence`*: Which occurrence of a match to replace. If omitted, the default
    is 0 (which means “replace all occurrences”).'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`occurrence`*：要替换的匹配的哪个出现。如果省略，默认为0（表示“替换所有出现”）。'
- en: '*`match_type`*: A string that specifies how to perform matching. The meaning
    is as described for [`REGEXP_LIKE()`](regexp.html#function_regexp-like).'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`match_type`*：一个指定如何执行匹配的字符串。其含义如[`REGEXP_LIKE()`](regexp.html#function_regexp-like)中所述。'
- en: 'Prior to MySQL 8.0.17, the result returned by this function used the `UTF-16`
    character set; in MySQL 8.0.17 and later, the character set and collation of the
    expression searched for matches is used. (Bug #94203, Bug #29308212)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在MySQL 8.0.17之前，此函数返回的结果使用`UTF-16`字符集；在MySQL 8.0.17及更高版本中，使用搜索匹配的表达式的字符集和排序规则。（Bug
    #94203，Bug #29308212）'
- en: For additional information about how matching occurs, see the description for
    [`REGEXP_LIKE()`](regexp.html#function_regexp-like).
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关匹配发生的更多信息，请参阅[`REGEXP_LIKE()`](regexp.html#function_regexp-like)的描述。
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[`REGEXP_SUBSTR(*`expr`*, *`pat`*[, *`pos`*[, *`occurrence`*[, *`match_type`*]]])`](regexp.html#function_regexp-substr)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REGEXP_SUBSTR(*`expr`*, *`pat`*[, *`pos`*[, *`occurrence`*[, *`match_type`*]]])`](regexp.html#function_regexp-substr)'
- en: Returns the substring of the string *`expr`* that matches the regular expression
    specified by the pattern *`pat`*, `NULL` if there is no match. If *`expr`* or
    *`pat`* is `NULL`, the return value is `NULL`.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回与模式*`pat`*指定的正则表达式匹配的字符串*`expr`*的子字符串，如果没有匹配则返回`NULL`。如果*`expr`*或*`pat`*为`NULL`，则返回值为`NULL`。
- en: '[`REGEXP_SUBSTR()`](regexp.html#function_regexp-substr) takes these optional
    arguments:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`REGEXP_SUBSTR()`](regexp.html#function_regexp-substr)接受这些可选参数：'
- en: '*`pos`*: The position in *`expr`* at which to start the search. If omitted,
    the default is 1.'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`pos`*：在*`expr`*中开始搜索的位置。如果省略，默认为1。'
- en: '*`occurrence`*: Which occurrence of a match to search for. If omitted, the
    default is 1.'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`occurrence`*：要搜索的匹配的哪个出现。如果省略，默认为1。'
- en: '*`match_type`*: A string that specifies how to perform matching. The meaning
    is as described for [`REGEXP_LIKE()`](regexp.html#function_regexp-like).'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`match_type`*：指定如何执行匹配的字符串。其含义与[`REGEXP_LIKE()`](regexp.html#function_regexp-like)中描述的相同。'
- en: 'Prior to MySQL 8.0.17, the result returned by this function used the `UTF-16`
    character set; in MySQL 8.0.17 and later, the character set and collation of the
    expression searched for matches is used. (Bug #94203, Bug #29308212)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在MySQL 8.0.17之前，此函数返回的结果使用`UTF-16`字符集；在MySQL 8.0.17及更高版本中，使用搜索匹配的表达式的字符集和校对规则。（Bug
    #94203，Bug #29308212）'
- en: For additional information about how matching occurs, see the description for
    [`REGEXP_LIKE()`](regexp.html#function_regexp-like).
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关匹配发生的更多信息，请参阅[`REGEXP_LIKE()`](regexp.html#function_regexp-like)的描述。
- en: '[PRE6]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Regular Expression Syntax
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 正则表达式语法
- en: A regular expression describes a set of strings. The simplest regular expression
    is one that has no special characters in it. For example, the regular expression
    `hello` matches `hello` and nothing else.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式描述了一组字符串。最简单的正则表达式是没有特殊字符的正则表达式。例如，正则表达式`hello`匹配`hello`，不匹配其他任何内容。
- en: Nontrivial regular expressions use certain special constructs so that they can
    match more than one string. For example, the regular expression `hello|world`
    contains the `|` alternation operator and matches either the `hello` or `world`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的正则表达式使用特定的特殊构造，以便能够匹配多个字符串。例如，正则表达式`hello|world`包含`|`交替运算符，匹配`hello`或`world`。
- en: As a more complex example, the regular expression `B[an]*s` matches any of the
    strings `Bananas`, `Baaaaas`, `Bs`, and any other string starting with a `B`,
    ending with an `s`, and containing any number of `a` or `n` characters in between.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个更复杂的例子，正则表达式`B[an]*s`匹配任何字符串`Bananas`，`Baaaaas`，`Bs`，以及任何以`B`开头，以`s`结尾，并且在中间包含任意数量的`a`或`n`字符的字符串。
- en: The following list covers some of the basic special characters and constructs
    that can be used in regular expressions. For information about the full regular
    expression syntax supported by the ICU library used to implement regular expression
    support, visit the [International Components for Unicode web site](https://unicode-org.github.io/icu/userguide/).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表涵盖了一些基本的特殊字符和构造，可用于正则表达式中。有关ICU库支持的完整正则表达式语法的信息，请访问[国际Unicode组件网站](https://unicode-org.github.io/icu/userguide/)。
- en: '`^`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^`'
- en: Match the beginning of a string.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配字符串的开头。
- en: '[PRE7]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`$`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$`'
- en: Match the end of a string.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配字符串的结尾。
- en: '[PRE8]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`.`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.`'
- en: Match any character (including carriage return and newline, although to match
    these in the middle of a string, the `m` (multiple line) match-control character
    or the `(?m)` within-pattern modifier must be given).
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配任何字符（包括回车和换行符，尽管要匹配字符串中间的这些字符，必须给定`m`（多行）匹配控制字符或`(?m)`模式内修改器）。
- en: '[PRE9]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`a*`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a*`'
- en: Match any sequence of zero or more `a` characters.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配零个或多个`a`字符的序列。
- en: '[PRE10]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`a+`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a+`'
- en: Match any sequence of one or more `a` characters.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配一个或多个`a`字符的序列。
- en: '[PRE11]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`a?`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a?`'
- en: Match either zero or one `a` character.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配零个或一个`a`字符。
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`de|abc`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`de|abc`'
- en: Alternation; match either of the sequences `de` or `abc`.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 交替；匹配`de`或`abc`中的任一序列。
- en: '[PRE13]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`(abc)*`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(abc)*`'
- en: Match zero or more instances of the sequence `abc`.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配序列`abc`的零个或多个实例。
- en: '[PRE14]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`{1}`, `{2,3}`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{1}`, `{2,3}`'
- en: Repetition; `{*`n`*}` and `{*`m`*,*`n`*}` notation provide a more general way
    of writing regular expressions that match many occurrences of the previous atom
    (or “piece”) of the pattern. *`m`* and *`n`* are integers.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重复；`{*`n`*}`和`{*`m`*,*`n`*}`表示一种更通用的写正则表达式的方式，可以匹配前一个原子（或“片段”）的模式的多个出现。*`m`*和*`n`*是整数。
- en: '`a*`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a*`'
- en: Can be written as `a{0,}`.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以写成`a{0,}`。
- en: '`a+`'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a+`'
- en: Can be written as `a{1,}`.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以写成`a{1,}`。
- en: '`a?`'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a?`'
- en: Can be written as `a{0,1}`.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以写成`a{0,1}`。
- en: To be more precise, `a{*`n`*}` matches exactly *`n`* instances of `a`. `a{*`n`*,}`
    matches *`n`* or more instances of `a`. `a{*`m`*,*`n`*}` matches *`m`* through
    *`n`* instances of `a`, inclusive. If both *`m`* and *`n`* are given, *`m`* must
    be less than or equal to *`n`*.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要更精确地说，`a{*`n`*}` 精确匹配 *`n`* 个 `a`。`a{*`n`*,}` 匹配 *`n`* 个或更多个 `a`。`a{*`m`*,*`n`*}`
    匹配 *`m`* 到 *`n`* 个 `a`，包括两端。如果同时给出 *`m`* 和 *`n`*，则 *`m`* 必须小于或等于 *`n`*。
- en: '[PRE15]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`[a-dX]`, `[^a-dX]`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[a-dX]`, `[^a-dX]`'
- en: Matches any character that is (or is not, if `^` is used) either `a`, `b`, `c`,
    `d` or `X`. A `-` character between two other characters forms a range that matches
    all characters from the first character to the second. For example, `[0-9]` matches
    any decimal digit. To include a literal `]` character, it must immediately follow
    the opening bracket `[`. To include a literal `-` character, it must be written
    first or last. Any character that does not have a defined special meaning inside
    a `[]` pair matches only itself.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配任何是（或不是，如果使用 `^`）`a`、`b`、`c`、`d` 或 `X` 的字符。两个字符之间的 `-` 形成一个范围，匹配从第一个字符到第二个字符的所有字符。例如，`[0-9]`
    匹配任何十进制数字。要包含文字 `]` 字符，它必须紧跟在开方括号 `[` 之后。要包含文字 `-` 字符，它必须写在最前面或最后面。在 `[]` 对中没有定义特殊含义的任何字符只匹配它本身。
- en: '[PRE16]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`[=character_class=]`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[=character_class=]`'
- en: Within a bracket expression (written using `[` and `]`), `[=character_class=]`
    represents an equivalence class. It matches all characters with the same collation
    value, including itself. For example, if `o` and `(+)` are the members of an equivalence
    class, `[[=o=]]`, `[[=(+)=]]`, and `[o(+)]` are all synonymous. An equivalence
    class may not be used as an endpoint of a range.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在方括号表达式（使用 `[` 和 `]` 编写）中，`[=character_class=]` 表示一个等价类。它匹配所有具有相同排序值的字符，包括它本身。例如，如果
    `o` 和 `(+)` 是等价类的成员，则 `[[=o=]]`、`[[=(+)=]]` 和 `[o(+)]` 都是同义词。等价类不能用作范围的端点。
- en: '`[:character_class:]`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[:character_class:]`'
- en: Within a bracket expression (written using `[` and `]`), `[:character_class:]`
    represents a character class that matches all characters belonging to that class.
    The following table lists the standard class names. These names stand for the
    character classes defined in the `ctype(3)` manual page. A particular locale may
    provide other class names. A character class may not be used as an endpoint of
    a range.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在方括号表达式（使用 `[` 和 `]` 编写）中，`[:character_class:]` 表示一个匹配属于该类的所有字符的字符类。以下表列出了标准类名。这些名称代表
    `ctype(3)` 手册页中定义的字符类。特定区域设置可能提供其他类名。字符类不能用作范围的端点。
- en: '| Character Class Name | Meaning |'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 字符类名 | 含义 |'
- en: '| `alnum` | Alphanumeric characters |'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `alnum` | 字母数字字符 |'
- en: '| `alpha` | Alphabetic characters |'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `alpha` | 字母字符 |'
- en: '| `blank` | Whitespace characters |'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `blank` | 空白字符 |'
- en: '| `cntrl` | Control characters |'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `cntrl` | 控制字符 |'
- en: '| `digit` | Digit characters |'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `digit` | 数字字符 |'
- en: '| `graph` | Graphic characters |'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `graph` | 图形字符 |'
- en: '| `lower` | Lowercase alphabetic characters |'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `lower` | 小写字母字符 |'
- en: '| `print` | Graphic or space characters |'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `print` | 图形或空格字符 |'
- en: '| `punct` | Punctuation characters |'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `punct` | 标点字符 |'
- en: '| `space` | Space, tab, newline, and carriage return |'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `space` | 空格、制表符、换行符和回车符 |'
- en: '| `upper` | Uppercase alphabetic characters |'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `upper` | 大写字母字符 |'
- en: '| `xdigit` | Hexadecimal digit characters |'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `xdigit` | 十六进制数字字符 |'
- en: '| Character Class Name | Meaning |'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 字符类名 | 含义 |'
- en: '[PRE17]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Because ICU is aware of all alphabetic characters in `utf16_general_ci`, some
    character classes may not perform as quickly as character ranges. For example,
    `[a-zA-Z]` is known to work much more quickly than `[[:alpha:]]`, and `[0-9]`
    is generally much faster than `[[:digit:]]`. If you are migrating applications
    using `[[:alpha:]]` or `[[:digit:]]` from an older version of MySQL, you should
    replace these with the equivalent ranges for use with MySQL 8.0.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 ICU 知道 `utf16_general_ci` 中的所有字母字符，因此某些字符类的性能可能不如字符范围高。例如，`[a-zA-Z]` 比 `[[:alpha:]]`
    更快，`[0-9]` 通常比 `[[:digit:]]` 更快。如果您正在迁移使用 `[[:alpha:]]` 或 `[[:digit:]]` 的应用程序从旧版本的
    MySQL，您应该将这些替换为等效的范围以在 MySQL 8.0 中使用。
- en: 'To use a literal instance of a special character in a regular expression, precede
    it by two backslash (\) characters. The MySQL parser interprets one of the backslashes,
    and the regular expression library interprets the other. For example, to match
    the string `1+2` that contains the special `+` character, only the last of the
    following regular expressions is the correct one:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要在正则表达式中使用特殊字符的文字实例，请在其前面加上两个反斜杠（\）字符。MySQL解析器解释其中一个反斜杠，而正则表达式库解释另一个。例如，要匹配包含特殊`+`字符的字符串`1+2`，只有以下正则表达式中的最后一个是正确的：
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Regular Expression Resource Control
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 正则表达式资源控制
- en: '[`REGEXP_LIKE()`](regexp.html#function_regexp-like) and similar functions use
    resources that can be controlled by setting system variables:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[`REGEXP_LIKE()`](regexp.html#function_regexp-like)和类似函数使用可以通过设置系统变量来控制的资源：'
- en: The match engine uses memory for its internal stack. To control the maximum
    available memory for the stack in bytes, set the [`regexp_stack_limit`](server-system-variables.html#sysvar_regexp_stack_limit)
    system variable.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配引擎使用内部堆栈的内存。要控制堆栈的最大可用内存（以字节为单位），请设置[`regexp_stack_limit`](server-system-variables.html#sysvar_regexp_stack_limit)系统变量。
- en: The match engine operates in steps. To control the maximum number of steps performed
    by the engine (and thus indirectly the execution time), set the [`regexp_time_limit`](server-system-variables.html#sysvar_regexp_time_limit)
    system variable. Because this limit is expressed as number of steps, it affects
    execution time only indirectly. Typically, it is on the order of milliseconds.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配引擎以步骤方式运行。要控制引擎执行的最大步骤数（从而间接影响执行时间），请设置[`regexp_time_limit`](server-system-variables.html#sysvar_regexp_time_limit)系统变量。因为此限制表示为步骤数，所以它只间接影响执行时间。通常，它的数量级为毫秒。
- en: Regular Expression Compatibility Considerations
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 正则表达式兼容性考虑
- en: 'Prior to MySQL 8.0.4, MySQL used the Henry Spencer regular expression library
    to support regular expression operations, rather than International Components
    for Unicode (ICU). The following discussion describes differences between the
    Spencer and ICU libraries that may affect applications:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.4之前，MySQL使用Henry Spencer正则表达式库来支持正则表达式操作，而不是国际Unicode组件（ICU）。以下讨论描述了Spencer和ICU库之间可能影响应用程序的差异：
- en: With the Spencer library, the [`REGEXP`](regexp.html#operator_regexp) and [`RLIKE`](regexp.html#operator_regexp)
    operators work in byte-wise fashion, so they are not multibyte safe and may produce
    unexpected results with multibyte character sets. In addition, these operators
    compare characters by their byte values and accented characters may not compare
    as equal even if a given collation treats them as equal.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spencer库，[`REGEXP`](regexp.html#operator_regexp)和[`RLIKE`](regexp.html#operator_regexp)运算符以字节方式工作，因此它们不是多字节安全的，可能会在使用多字节字符集时产生意外结果。此外，这些运算符通过它们的字节值比较字符，即使给定排序将它们视为相等，重音字符也可能不相等。
- en: 'ICU has full Unicode support and is multibyte safe. Its regular expression
    functions treat all strings as `UTF-16`. You should keep in mind that positional
    indexes are based on 16-bit chunks and not on code points. This means that, when
    passed to such functions, characters using more than one chunk may produce unanticipated
    results, such as those shown here:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ICU具有完整的Unicode支持，并且是多字节安全的。其正则表达式函数将所有字符串视为`UTF-16`。您应该记住，位置索引是基于16位块而不是代码点的。这意味着，当传递给这些函数时，使用多个块的字符可能会产生意想不到的结果，例如下面所示：
- en: '[PRE19]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Characters within the Unicode Basic Multilingual Plane, which includes characters
    used by most modern languages, are safe in this regard:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode基本多文种平面内的字符（包括大多数现代语言使用的字符）在这方面是安全的：
- en: '[PRE20]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Emoji, such as the “sushi” character `🍣` (U+1F363) used in the first two examples,
    are not included in the Basic Multilingual Plane, but rather in Unicode's Supplementary
    Multilingual Plane. Another issue can arise with emoji and other 4-byte characters
    when [`REGEXP_SUBSTR()`](regexp.html#function_regexp-substr) or a similar function
    begins searching in the middle of a character. Each of the two statements in the
    following example starts from the second 2-byte position in the first argument.
    The first statement works on a string consisting solely of 2-byte (BMP) characters.
    The second statement contains 4-byte characters which are incorrectly interpreted
    in the result because the first two bytes are stripped off and so the remainder
    of the character data is misaligned.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表情符号，例如第一个两个示例中使用的“寿司”字符`🍣`（U+1F363），不包括在基本多语言平面中，而是在Unicode的补充多语言平面中。当[`REGEXP_SUBSTR()`](regexp.html#function_regexp-substr)或类似函数从字符中间开始搜索时，表情符号和其他4字节字符可能会出现问题。以下示例中的两个语句中的每个都从第一个参数的第二个2字节位置开始。第一个语句适用于仅由2字节（BMP）字符组成的字符串。第二个语句包含4字节字符，结果中错误解释了这些字符，因为前两个字节被剥离，因此字符数据的其余部分错位。
- en: '[PRE21]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: For the `.` operator, the Spencer library matches line-terminator characters
    (carriage return, newline) anywhere in string expressions, including in the middle.
    To match line terminator characters in the middle of strings with ICU, specify
    the `m` match-control character.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`.`运算符，Spencer库在字符串表达式中的任何位置（包括中间）匹配行终止字符（回车，换行）。要在ICU中匹配字符串中间的行终止字符，请指定`m`匹配控制字符。
- en: The Spencer library supports word-beginning and word-end boundary markers (`[[:<:]]`
    and `[[:>:]]` notation). ICU does not. For ICU, you can use `\b` to match word
    boundaries; double the backslash because MySQL interprets it as the escape character
    within strings.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spencer库支持单词开头和单词结尾边界标记（`[[:<:]]`和`[[:>:]]`表示）。ICU不支持。对于ICU，您可以使用`\b`来匹配单词边界；双反斜杠因为MySQL将其解释为字符串中的转义字符。
- en: The Spencer library supports collating element bracket expressions (`[.characters.]`
    notation). ICU does not.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spencer库支持整理元素括号表达式（`[.characters.]`表示）。ICU不支持。
- en: For repetition counts (`{n}` and `{m,n}` notation), the Spencer library has
    a maximum of 255\. ICU has no such limit, although the maximum number of match
    engine steps can be limited by setting the [`regexp_time_limit`](server-system-variables.html#sysvar_regexp_time_limit)
    system variable.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于重复计数（`{n}`和`{m,n}`表示），Spencer库最多为255。ICU没有此限制，尽管可以通过设置[`regexp_time_limit`](server-system-variables.html#sysvar_regexp_time_limit)系统变量来限制匹配引擎步骤的最大数量。
- en: 'ICU interprets parentheses as metacharacters. To specify a literal open `(`
    or close parenthesis `)` in a regular expression, it must be escaped:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ICU将括号解释为元字符。要在正则表达式中指定字面上的开放`(`或关闭括号`)，必须进行转义：
- en: '[PRE22]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'ICU also interprets square brackets as metacharacters, but only the opening
    square bracket need be escaped to be used as a literal character:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ICU还将方括号解释为元字符，但只有开放方括号需要转义才能用作字面字符：
- en: '[PRE23]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
