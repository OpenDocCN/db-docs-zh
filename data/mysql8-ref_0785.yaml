- en: 13.7 Data Type Storage Requirements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.7 数据类型存储要求
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html](https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html](https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html)
- en: '[InnoDB Table Storage Requirements](storage-requirements.html#data-types-storage-reqs-innodb
    "InnoDB Table Storage Requirements")'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[InnoDB表存储要求](storage-requirements.html#data-types-storage-reqs-innodb "InnoDB表存储要求")'
- en: '[NDB Table Storage Requirements](storage-requirements.html#data-types-storage-reqs-ndb
    "NDB Table Storage Requirements")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NDB表存储要求](storage-requirements.html#data-types-storage-reqs-ndb "NDB表存储要求")'
- en: '[Numeric Type Storage Requirements](storage-requirements.html#data-types-storage-reqs-numeric
    "Numeric Type Storage Requirements")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数值类型存储要求](storage-requirements.html#data-types-storage-reqs-numeric "数值类型存储要求")'
- en: '[Date and Time Type Storage Requirements](storage-requirements.html#data-types-storage-reqs-date-time
    "Date and Time Type Storage Requirements")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[日期和时间类型存储要求](storage-requirements.html#data-types-storage-reqs-date-time "日期和时间类型存储要求")'
- en: '[String Type Storage Requirements](storage-requirements.html#data-types-storage-reqs-strings
    "String Type Storage Requirements")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[字符串类型存储要求](storage-requirements.html#data-types-storage-reqs-strings "字符串类型存储要求")'
- en: '[Spatial Type Storage Requirements](storage-requirements.html#data-types-storage-reqs-gis
    "Spatial Type Storage Requirements")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[空间类型存储要求](storage-requirements.html#data-types-storage-reqs-gis "空间类型存储要求")'
- en: '[JSON Storage Requirements](storage-requirements.html#data-types-storage-reqs-json
    "JSON Storage Requirements")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JSON存储要求](storage-requirements.html#data-types-storage-reqs-json "JSON存储要求")'
- en: The storage requirements for table data on disk depend on several factors. Different
    storage engines represent data types and store raw data differently. Table data
    might be compressed, either for a column or an entire row, complicating the calculation
    of storage requirements for a table or column.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘上表数据的存储要求取决于几个因素。不同的存储引擎表示数据类型并以不同方式存储原始数据。表数据可能会被压缩，无论是针对列还是整个行，这会使得计算表或列的存储要求变得复杂。
- en: Despite differences in storage layout on disk, the internal MySQL APIs that
    communicate and exchange information about table rows use a consistent data structure
    that applies across all storage engines.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在磁盘上存储布局存在差异，但内部MySQL API用于通信和交换关于表行的信息的数据结构是一致的，适用于所有存储引擎。
- en: This section includes guidelines and information for the storage requirements
    for each data type supported by MySQL, including the internal format and size
    for storage engines that use a fixed-size representation for data types. Information
    is listed by category or storage engine.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包括MySQL支持的每种数据类型的存储要求的指南和信息，包括对使用固定大小表示数据类型的存储引擎的内部格式和大小的描述。信息按类别或存储引擎列出。
- en: The internal representation of a table has a maximum row size of 65,535 bytes,
    even if the storage engine is capable of supporting larger rows. This figure excludes
    [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") or [`TEXT`](blob.html "13.3.4 The
    BLOB and TEXT Types") columns, which contribute only 9 to 12 bytes toward this
    size. For [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") and [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") data, the information is stored internally in
    a different area of memory than the row buffer. Different storage engines handle
    the allocation and storage of this data in different ways, according to the method
    they use for handling the corresponding types. For more information, see [Chapter 18,
    *Alternative Storage Engines*](storage-engines.html "Chapter 18 Alternative Storage
    Engines"), and [Section 10.4.7, “Limits on Table Column Count and Row Size”](column-count-limit.html
    "10.4.7 Limits on Table Column Count and Row Size").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 表的内部表示最大行大小为65,535字节，即使存储引擎能够支持更大的行也是如此。这个数字不包括[`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")或[`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")列，这些列只对这个大小贡献了9到12个字节。对于[`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")和[`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")数据，信息存储在内存的不同区域中，而不是行缓冲区。不同的存储引擎根据它们用于处理相应类型的方法以不同的方式处理这些数据的分配和存储。有关更多信息，请参见[第18章，*替代存储引擎*](storage-engines.html
    "第18章 替代存储引擎")和[第10.4.7节，“表列计数和行大小限制”](column-count-limit.html "10.4.7 表列计数和行大小限制")。
- en: InnoDB Table Storage Requirements
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: InnoDB表存储要求
- en: See [Section 17.10, “InnoDB Row Formats”](innodb-row-format.html "17.10 InnoDB
    Row Formats") for information about storage requirements for `InnoDB` tables.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`InnoDB`表的存储要求，请参见[第17.10节“InnoDB行格式”](innodb-row-format.html "17.10 InnoDB行格式")。
- en: NDB Table Storage Requirements
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NDB表存储要求
- en: Important
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables use 4-byte
    alignment; all [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")
    data storage is done in multiples of 4 bytes. Thus, a column value that would
    typically take 15 bytes requires 16 bytes in an [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") table. For example, in [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") tables, the [`TINYINT`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`SMALLINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT"), [`MEDIUMINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), and [`INTEGER`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") ([`INT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")) column types each require 4 bytes
    storage per record due to the alignment factor.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")表使用4字节对齐；所有[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")数据存储都是4字节的倍数。因此，在[`NDB`](mysql-cluster.html "第25章
    MySQL NDB Cluster 8.0")表中，通常需要15字节的列值需要16字节。例如，在[`NDB`](mysql-cluster.html "第25章
    MySQL NDB Cluster 8.0")表中，[`TINYINT`](integer-types.html "13.1.2 整数类型（精确值）- INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")、[`SMALLINT`](integer-types.html
    "13.1.2 整数类型（精确值）- INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")、[`MEDIUMINT`](integer-types.html
    "13.1.2 整数类型（精确值）- INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")和[`INTEGER`](integer-types.html
    "13.1.2 整数类型（精确值）- INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")（[`INT`](integer-types.html
    "13.1.2 整数类型（精确值）- INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")）列类型每个记录需要4字节的存储空间，这是由于对齐因素。'
- en: Each `BIT(*`M`*)` column takes *`M`* bits of storage space. Although an individual
    [`BIT`](bit-type.html "13.1.5 Bit-Value Type - BIT") column is *not* 4-byte aligned,
    [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") reserves 4 bytes
    (32 bits) per row for the first 1-32 bits needed for `BIT` columns, then another
    4 bytes for bits 33-64, and so on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`BIT(*M*)`列占用*M*位的存储空间。虽然单个[`BIT`](bit-type.html "13.1.5 位值类型 - BIT")列不是4字节对齐，但是[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")每行为`BIT`列的前1-32位保留4字节（32位），然后为第33-64位保留另外4字节，依此类推。
- en: While a `NULL` itself does not require any storage space, [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") reserves 4 bytes per row if the table definition
    contains any columns allowing `NULL`, up to 32 `NULL` columns. (If an NDB Cluster
    table is defined with more than 32 `NULL` columns up to 64 `NULL` columns, then
    8 bytes per row are reserved.)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`NULL`本身不需要任何存储空间，但是如果表定义包含允许`NULL`的列，[`NDB`](mysql-cluster.html "第25章 MySQL
    NDB Cluster 8.0")每行将保留4个字节，最多32个`NULL`列。（如果NDB Cluster表定义中包含超过32个`NULL`列，最多64个`NULL`列，则每行将保留8个字节。）
- en: Every table using the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0") storage engine requires a primary key; if you do not define a primary key,
    a “hidden” primary key is created by [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0"). This hidden primary key consumes 31-35 bytes per table record.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个使用[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")存储引擎的表都需要一个主键；如果您没有定义主键，[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")将创建一个“隐藏”主键。这个隐藏主键每个表记录消耗31-35字节。
- en: You can use the [**ndb_size.pl**](mysql-cluster-programs-ndb-size-pl.html "25.5.28 ndb_size.pl
    — NDBCLUSTER Size Requirement Estimator") Perl script to estimate [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") storage requirements. It connects to a current
    MySQL (not NDB Cluster) database and creates a report on how much space that database
    would require if it used the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB
    Cluster 8.0") storage engine. See [Section 25.5.28, “ndb_size.pl — NDBCLUSTER
    Size Requirement Estimator”](mysql-cluster-programs-ndb-size-pl.html "25.5.28 ndb_size.pl
    — NDBCLUSTER Size Requirement Estimator") for more information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 [**ndb_size.pl**](mysql-cluster-programs-ndb-size-pl.html "25.5.28 ndb_size.pl
    — NDBCLUSTER Size Requirement Estimator") Perl 脚本来估算[`NDB`](mysql-cluster.html
    "第 25 章 MySQL NDB Cluster 8.0")的存储需求。它连接到当前的 MySQL（而不是 NDB Cluster）数据库，并创建一个关于如果该数据库使用[`NDB`](mysql-cluster.html
    "第 25 章 MySQL NDB Cluster 8.0")存储引擎将需要多少空间的报告。有关更多信息，请参见 [第 25.5.28 节“ndb_size.pl
    — NDBCLUSTER Size Requirement Estimator”](mysql-cluster-programs-ndb-size-pl.html
    "25.5.28 ndb_size.pl — NDBCLUSTER Size Requirement Estimator")。
- en: Numeric Type Storage Requirements
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数值类型存储需求
- en: '| Data Type | Storage Required |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | 所需存储空间 |'
- en: '| [`TINYINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") | 1 byte |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`TINYINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT") | 1 字节 |'
- en: '| [`SMALLINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") | 2 bytes |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`SMALLINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT") | 2 字节 |'
- en: '| [`MEDIUMINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") | 3 bytes |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`MEDIUMINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT") | 3 字节 |'
- en: '| [`INT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`INTEGER`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") | 4
    bytes |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`INT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT,
    MEDIUMINT, BIGINT"), [`INTEGER`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") | 4 字节 |'
- en: '| [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") | 8 bytes |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT") | 8 字节 |'
- en: '| `FLOAT(*`p`*)` | 4 bytes if 0 <= *`p`* <= 24, 8 bytes if 25 <= *`p`* <= 53
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `FLOAT(*`p`*)` | 如果 0 <= *`p`* <= 24，则为 4 字节，如果 25 <= *`p`* <= 53，则为 8 字节
    |'
- en: '| [`FLOAT`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE") | 4 bytes |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`FLOAT`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE") |
    4 字节 |'
- en: '| `DOUBLE [PRECISION]`, [`REAL`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE") | 8 bytes |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `DOUBLE [PRECISION]`, [`REAL`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE") | 8 字节 |'
- en: '| `DECIMAL(*`M`*,*`D`*)`, `NUMERIC(*`M`*,*`D`*)` | Varies; see following discussion
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `DECIMAL(*`M`*,*`D`*)`, `NUMERIC(*`M`*,*`D`*)` | 变化；参见下面的讨论 |'
- en: '| `BIT(*`M`*)` | approximately (*`M`*+7)/8 bytes |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `BIT(*`M`*)` | 大约(*`M`*+7)/8 字节 |'
- en: '| Data Type | Storage Required |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | 所需存储空间 |'
- en: Values for [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point Types (Exact
    Value) - DECIMAL, NUMERIC") (and [`NUMERIC`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC")) columns are represented using a binary
    format that packs nine decimal (base 10) digits into four bytes. Storage for the
    integer and fractional parts of each value are determined separately. Each multiple
    of nine digits requires four bytes, and the “leftover” digits require some fraction
    of four bytes. The storage required for excess digits is given by the following
    table.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DECIMAL`](fixed-point-types.html "13.1.3 定点类型（精确值） - DECIMAL, NUMERIC")（以及[`NUMERIC`](fixed-point-types.html
    "13.1.3 定点类型（精确值） - DECIMAL, NUMERIC")列使用一种二进制格式表示，将九个十进制（十进制）数字打包成四个字节。每个值的整数部分和小数部分的存储是分开确定的。每个九位数字的倍数需要四个字节，“剩余”数字需要四个字节的一部分。多余数字所需的存储空间由下表给出。'
- en: '| Leftover Digits | Number of Bytes |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 剩余数字 | 字节数 |'
- en: '| 0 | 0 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 |'
- en: '| 1 | 1 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 |'
- en: '| 2 | 1 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1 |'
- en: '| 3 | 2 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 2 |'
- en: '| 4 | 2 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 2 |'
- en: '| 5 | 3 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 3 |'
- en: '| 6 | 3 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 3 |'
- en: '| 7 | 4 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 4 |'
- en: '| 8 | 4 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 4 |'
- en: Date and Time Type Storage Requirements
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日期和时间类型存储需求
- en: For [`TIME`](time.html "13.2.3 The TIME Type"), [`DATETIME`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types"), and [`TIMESTAMP`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") columns, the storage required for tables
    created before MySQL 5.6.4 differs from tables created from 5.6.4 on. This is
    due to a change in 5.6.4 that permits these types to have a fractional part, which
    requires from 0 to 3 bytes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`TIME`](time.html "13.2.3 The TIME Type")、[`DATETIME`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") 和 [`TIMESTAMP`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") 列，MySQL 5.6.4 之前创建的表所需的存储空间与从 5.6.4 开始创建的表不同。这是因为
    5.6.4 版本的更改允许这些类型具有分数部分，这需要从 0 到 3 个字节。
- en: '| Data Type | Storage Required Before MySQL 5.6.4 | Storage Required as of
    MySQL 5.6.4 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | MySQL 5.6.4 之前所需存储空间 | MySQL 5.6.4 及以后所需存储空间 |'
- en: '| [`YEAR`](year.html "13.2.4 The YEAR Type") | 1 byte | 1 byte |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`YEAR`](year.html "13.2.4 The YEAR Type") | 1 字节 | 1 字节 |'
- en: '| [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    | 3 bytes | 3 bytes |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    | 3 字节 | 3 字节 |'
- en: '| [`TIME`](time.html "13.2.3 The TIME Type") | 3 bytes | 3 bytes + fractional
    seconds storage |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`TIME`](time.html "13.2.3 The TIME Type") | 3 字节 | 3 字节 + 分数秒存储 |'
- en: '| [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    | 8 bytes | 5 bytes + fractional seconds storage |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    | 8 字节 | 5 字节 + 分数秒存储 |'
- en: '| [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    | 4 bytes | 4 bytes + fractional seconds storage |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    | 4 字节 | 4 字节 + 分数秒存储 |'
- en: As of MySQL 5.6.4, storage for [`YEAR`](year.html "13.2.4 The YEAR Type") and
    [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") remains
    unchanged. However, [`TIME`](time.html "13.2.3 The TIME Type"), [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), and [`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") are represented differently.
    [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") is
    packed more efficiently, requiring 5 rather than 8 bytes for the nonfractional
    part, and all three parts have a fractional part that requires from 0 to 3 bytes,
    depending on the fractional seconds precision of stored values.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 MySQL 5.6.4 版本，[`YEAR`](year.html "13.2.4 The YEAR Type") 和 [`DATE`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") 的存储方式保持不变。然而，[`TIME`](time.html
    "13.2.3 The TIME Type")、[`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") 和 [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") 的表示方式有所不同。[`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") 被更有效地打包，非分数部分只需 5 个字节，而不是 8 个字节，而且所有三部分都有一个分数部分，根据存储值的分数秒精度，需要从
    0 到 3 个字节。
- en: '| Fractional Seconds Precision | Storage Required |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 分数秒精度 | 所需存储空间 |'
- en: '| 0 | 0 bytes |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 字节 |'
- en: '| 1, 2 | 1 byte |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 1, 2 | 1 字节 |'
- en: '| 3, 4 | 2 bytes |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 3, 4 | 2 字节 |'
- en: '| 5, 6 | 3 bytes |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 5, 6 | 3 字节 |'
- en: For example, [`TIME(0)`](time.html "13.2.3 The TIME Type"), [`TIME(2)`](time.html
    "13.2.3 The TIME Type"), [`TIME(4)`](time.html "13.2.3 The TIME Type"), and [`TIME(6)`](time.html
    "13.2.3 The TIME Type") use 3, 4, 5, and 6 bytes, respectively. [`TIME`](time.html
    "13.2.3 The TIME Type") and [`TIME(0)`](time.html "13.2.3 The TIME Type") are
    equivalent and require the same storage.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[`TIME(0)`](time.html "13.2.3 The TIME Type")、[`TIME(2)`](time.html "13.2.3 The
    TIME Type")、[`TIME(4)`](time.html "13.2.3 The TIME Type") 和 [`TIME(6)`](time.html
    "13.2.3 The TIME Type") 分别使用 3、4、5 和 6 个字节。[`TIME`](time.html "13.2.3 The TIME
    Type") 和 [`TIME(0)`](time.html "13.2.3 The TIME Type") 是等效的，需要相同的存储空间。
- en: 'For details about internal representation of temporal values, see [MySQL Internals:
    Important Algorithms and Structures](/doc/internals/en/algorithms.html).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '有关时间值的内部表示的详细信息，请参阅[MySQL Internals: Important Algorithms and Structures](/doc/internals/en/algorithms.html)。'
- en: String Type Storage Requirements
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串类型存储要求
- en: In the following table, *`M`* represents the declared column length in characters
    for nonbinary string types and bytes for binary string types. *`L`* represents
    the actual length in bytes of a given string value.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，*`M`*代表非二进制字符串类型的声明列长度（以字符计）和二进制字符串类型的字节数。*`L`*代表给定字符串值的实际字节长度。
- en: '| Data Type | Storage Required |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | 所需存储空间 |'
- en: '| `CHAR(*`M`*)` | The compact family of InnoDB row formats optimize storage
    for variable-length character sets. See [COMPACT Row Format Storage Characteristics](innodb-row-format.html#innodb-compact-row-format-characteristics
    "COMPACT Row Format Storage Characteristics"). Otherwise, *`M`* × *`w`* bytes,
    `<= *`M`* <=` 255, where *`w`* is the number of bytes required for the maximum-length
    character in the character set. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `CHAR(*`M`*)` | InnoDB行格式的紧凑系列优化了变长字符集的存储。请参阅[COMPACT行格式存储特性](innodb-row-format.html#innodb-compact-row-format-characteristics
    "COMPACT行格式存储特性")。否则，*`M`* × *`w`*字节，`<= *`M`* <=` 255，其中*`w`*是字符集中最大长度字符所需的字节数。
    |'
- en: '| `BINARY(*`M`*)` | *`M`* bytes, 0 `<= *`M`* <=` 255 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `BINARY(*`M`*)` | *`M`*字节，0 `<= *`M`* <=` 255 |'
- en: '| `VARCHAR(*`M`*)`, `VARBINARY(*`M`*)` | *`L`* + 1 bytes if column values require
    0 − 255 bytes, *`L`* + 2 bytes if values may require more than 255 bytes |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `VARCHAR(*`M`*)`, `VARBINARY(*`M`*)` | 如果列值需要0 − 255字节，则为*`L`* + 1字节，如果值可能需要超过255字节，则为*`L`*
    + 2字节 |'
- en: '| [`TINYBLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`TINYTEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") | *`L`* + 1 bytes, where *`L`* < 2⁸ |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`TINYBLOB`](blob.html "13.3.4 BLOB和TEXT类型"), [`TINYTEXT`](blob.html "13.3.4 BLOB和TEXT类型")
    | *`L`* + 1字节，其中*`L`* < 2⁸ |'
- en: '| [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") | *`L`* + 2 bytes, where *`L`* < 2^(16) |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`BLOB`](blob.html "13.3.4 BLOB和TEXT类型"), [`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")
    | *`L`* + 2字节，其中*`L`* < 2^(16) |'
- en: '| [`MEDIUMBLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`MEDIUMTEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") | *`L`* + 3 bytes, where *`L`* < 2^(24) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`MEDIUMBLOB`](blob.html "13.3.4 BLOB和TEXT类型"), [`MEDIUMTEXT`](blob.html
    "13.3.4 BLOB和TEXT类型") | *`L`* + 3字节，其中*`L`* < 2^(24) |'
- en: '| [`LONGBLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`LONGTEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") | *`L`* + 4 bytes, where *`L`* < 2^(32) |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`LONGBLOB`](blob.html "13.3.4 BLOB和TEXT类型"), [`LONGTEXT`](blob.html "13.3.4 BLOB和TEXT类型")
    | *`L`* + 4字节，其中*`L`* < 2^(32) |'
- en: '| `ENUM(''*`value1`*'',''*`value2`*'',...)` | 1 or 2 bytes, depending on the
    number of enumeration values (65,535 values maximum) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `ENUM(''*`value1`*'',''*`value2`*'',...)` | 1或2字节，取决于枚举值的数量（最多65,535个值） |'
- en: '| `SET(''*`value1`*'',''*`value2`*'',...)` | 1, 2, 3, 4, or 8 bytes, depending
    on the number of set members (64 members maximum) |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `SET(''*`value1`*'',''*`value2`*'',...)` | 1、2、3、4或8字节，取决于集合成员的数量（最多64个成员）
    |'
- en: Variable-length string types are stored using a length prefix plus data. The
    length prefix requires from one to four bytes depending on the data type, and
    the value of the prefix is *`L`* (the byte length of the string). For example,
    storage for a [`MEDIUMTEXT`](blob.html "13.3.4 The BLOB and TEXT Types") value
    requires *`L`* bytes to store the value plus three bytes to store the length of
    the value.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 变长字符串类型使用长度前缀加数据进行存储。长度前缀根据数据类型需要占用一到四个字节不等，前缀的值为*`L`*（字符串的字节长度）。例如，存储[`MEDIUMTEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")值需要*`L`*字节来存储值，再加上三个字节来存储值的长度。
- en: To calculate the number of bytes used to store a particular [`CHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), [`VARCHAR`](char.html "13.3.2 The CHAR and
    VARCHAR Types"), or [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") column
    value, you must take into account the character set used for that column and whether
    the value contains multibyte characters. In particular, when using a UTF-8 Unicode
    character set, you must keep in mind that not all characters use the same number
    of bytes. `utf8mb3` and `utf8mb4` character sets can require up to three and four
    bytes per character, respectively. For a breakdown of the storage used for different
    categories of `utf8mb3` or `utf8mb4` characters, see [Section 12.9, “Unicode Support”](charset-unicode.html
    "12.9 Unicode Support").
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算存储特定[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")、[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")或[`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")列值所需的字节数，必须考虑用于该列的字符集以及值是否包含多字节字符。特别是在使用UTF-8 Unicode字符集时，必须记住并非所有字符使用相同数量的字节。`utf8mb3`和`utf8mb4`字符集分别可以每个字符需要最多三个和四个字节。有关不同类别`utf8mb3`或`utf8mb4`字符所使用的存储的详细信息，请参见[第12.9节“Unicode支持”](charset-unicode.html
    "12.9 Unicode支持")。
- en: '[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), and the [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") and [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")
    types are variable-length types. For each, the storage requirements depend on
    these factors:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[`VARCHAR`](char.html "第13.3.2节 CHAR 和 VARCHAR 类型")、[`VARBINARY`](binary-varbinary.html
    "第13.3.3节 BINARY 和 VARBINARY 类型")、[`BLOB`](blob.html "第13.3.4节 BLOB 和 TEXT 类型")
    和 [`TEXT`](blob.html "第13.3.4节 BLOB 和 TEXT 类型") 类型是可变长度类型。对于每种类型，存储需求取决于以下因素：'
- en: The actual length of the column value
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列值的实际长度
- en: The column's maximum possible length
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列的最大可能长度
- en: The character set used for the column, because some character sets contain multibyte
    characters
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列使用的字符集，因为某些字符集包含多字节字符
- en: 'For example, a `VARCHAR(255)` column can hold a string with a maximum length
    of 255 characters. Assuming that the column uses the `latin1` character set (one
    byte per character), the actual storage required is the length of the string (*`L`*),
    plus one byte to record the length of the string. For the string `''abcd''`, *`L`*
    is 4 and the storage requirement is five bytes. If the same column is instead
    declared to use the `ucs2` double-byte character set, the storage requirement
    is 10 bytes: The length of `''abcd''` is eight bytes and the column requires two
    bytes to store lengths because the maximum length is greater than 255 (up to 510
    bytes).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`VARCHAR(255)` 列可以容纳最大长度为 255 个字符的字符串。假设该列使用 `latin1` 字符集（每个字符一个字节），实际所需存储空间是字符串的长度（*`L`*），再加上一个字节来记录字符串的长度。对于字符串
    `'abcd'`，*`L`* 为 4，存储需求为五个字节。如果相同列改为使用 `ucs2` 双字节字符集，则存储需求为 10 个字节：`'abcd'` 的长度为八个字节，列需要两个字节来存储长度，因为最大长度大于
    255（最多 510 个字节）。
- en: The effective maximum number of *bytes* that can be stored in a [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types") or [`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types") column is subject to the maximum row size of 65,535
    bytes, which is shared among all columns. For a [`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") column that stores multibyte characters, the effective
    maximum number of *characters* is less. For example, `utf8mb4` characters can
    require up to four bytes per character, so a [`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") column that uses the `utf8mb4` character set can be declared
    to be a maximum of 16,383 characters. See [Section 10.4.7, “Limits on Table Column
    Count and Row Size”](column-count-limit.html "10.4.7 Limits on Table Column Count
    and Row Size").
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可存储在 [`VARCHAR`](char.html "第13.3.2节 CHAR 和 VARCHAR 类型") 或 [`VARBINARY`](binary-varbinary.html
    "第13.3.3节 BINARY 和 VARBINARY 类型") 列中的有效最大 *字节数* 受限于 65,535 字节的最大行大小，该大小在所有列之间共享。对于存储多字节字符的
    [`VARCHAR`](char.html "第13.3.2节 CHAR 和 VARCHAR 类型") 列，有效最大 *字符数* 较少。例如，`utf8mb4`
    字符可能每个字符需要最多四个字节，因此使用 `utf8mb4` 字符集的 [`VARCHAR`](char.html "第13.3.2节 CHAR 和 VARCHAR
    类型") 列最多可以声明为 16,383 个字符。参见 [第10.4.7节，“表列数和行大小的限制”](column-count-limit.html "10.4.7节
    表列数和行大小的限制")。
- en: '`InnoDB` encodes fixed-length fields greater than or equal to 768 bytes in
    length as variable-length fields, which can be stored off-page. For example, a
    `CHAR(255)` column can exceed 768 bytes if the maximum byte length of the character
    set is greater than 3, as it is with `utf8mb4`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` 将长度大于或等于 768 个字节的固定长度字段编码为可变长度字段，可以存储在页外。例如，如果 `CHAR(255)` 列的字符集的最大字节长度大于
    3，比如 `utf8mb4`，则可以超过 768 个字节。'
- en: The [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") storage engine
    supports variable-width columns. This means that a [`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") column in an NDB Cluster table requires the same amount
    of storage as would any other storage engine, with the exception that such values
    are 4-byte aligned. Thus, the string `'abcd'` stored in a `VARCHAR(50)` column
    using the `latin1` character set requires 8 bytes (rather than 5 bytes for the
    same column value in a `MyISAM` table).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0") 存储引擎支持可变宽度列。这意味着在
    NDB Cluster 表中，`VARCHAR` 列需要与任何其他存储引擎相同的存储空间，唯一的例外是这些值是 4 字节对齐的。因此，在使用 `latin1`
    字符集的 `VARCHAR(50)` 列中存储的字符串 `''abcd''` 需要 8 字节（而不是在 `MyISAM` 表中相同列值的 5 字节）。'
- en: '[`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types"), [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types"), and [`JSON`](json.html "13.5 The JSON Data Type") columns
    are implemented differently in the [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") storage engine, wherein each row in the column is made up of
    two separate parts. One of these is of fixed size (256 bytes for `TEXT` and `BLOB`,
    4000 bytes for `JSON`), and is actually stored in the original table. The other
    consists of any data in excess of 256 bytes, which is stored in a hidden blob
    parts table. The size of the rows in this second table are determined by the exact
    type of the column, as shown in the following table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TEXT`](blob.html "13.3.4 BLOB 和 TEXT 类型"), [`BLOB`](blob.html "13.3.4 BLOB
    和 TEXT 类型") 和 [`JSON`](json.html "13.5 JSON 数据类型") 列在 [`NDB`](mysql-cluster.html
    "第 25 章 MySQL NDB Cluster 8.0") 存储引擎中实现方式不同，其中列中的每一行由两个独立部分组成。其中一个是固定大小的（`TEXT`
    和 `BLOB` 为 256 字节，`JSON` 为 4000 字节），实际上存储在原始表中。另一个部分包含超过 256 字节的任何数据，存储在隐藏的 blob
    部分表中。第二个表中行的大小由列的确切类型确定，如下表所示：'
- en: '| Type | Blob Part Size |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | Blob 部分大小 |'
- en: '| [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") | 2000 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`BLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型"), [`TEXT`](blob.html "13.3.4 BLOB
    和 TEXT 类型") | 2000 |'
- en: '| [`MEDIUMBLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`MEDIUMTEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") | 4000 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`MEDIUMBLOB`](blob.html "13.3.4 BLOB 和 TEXT 类���"), [`MEDIUMTEXT`](blob.html
    "13.3.4 BLOB 和 TEXT 类型") | 4000 |'
- en: '| [`LONGBLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`LONGTEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") | 13948 |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`LONGBLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型"), [`LONGTEXT`](blob.html "13.3.4 BLOB
    和 TEXT 类型") | 13948 |'
- en: '| [`JSON`](json.html "13.5 The JSON Data Type") | 8100 |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON`](json.html "13.5 JSON 数据类型") | 8100 |'
- en: This means that the size of a [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")
    column is 256 if *`size`* <= 256 (where *`size`* represents the size of the row);
    otherwise, the size is 256 + *`size`* + (2000 × (*`size`* − 256) % 2000).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果 *`size`* <= 256（其中 *`size`* 表示行的大小），则 [`TEXT`](blob.html "13.3.4 BLOB
    和 TEXT 类型") 列的大小为 256；否则，大小为 256 + *`size`* + (2000 × (*`size`* − 256) % 2000)。
- en: No blob parts are stored separately by `NDB` for `TINYBLOB` or `TINYTEXT` column
    values.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDB` 不会为 `TINYBLOB` 或 `TINYTEXT` 列值单独存储 blob 部分。'
- en: You can increase the size of an `NDB` blob column's blob part to the maximum
    of 13948 using `NDB_COLUMN` in a column comment when creating or altering the
    parent table. In NDB 8.0.30 and later, it is also possible to set the inline size
    for a `TEXT`, `BLOB`, or `JSON` column, using `NDB_TABLE` in a column comment.
    See [NDB_COLUMN Options](create-table-ndb-comment-options.html#create-table-ndb-comment-column-options
    "NDB_COLUMN Options"), for more information.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `NDB_COLUMN` 在创建或更改父表时在列注释中将 `NDB` blob 列的 blob 部分大小增加到最大值 13948。在 NDB
    8.0.30 及更高版本中，还可以使用 `NDB_TABLE` 在列注释中设置 `TEXT`、`BLOB` 或 `JSON` 列的内联大小。有关更多信息，请参见
    [NDB_COLUMN 选项](create-table-ndb-comment-options.html#create-table-ndb-comment-column-options
    "NDB_COLUMN 选项")。
- en: The size of an [`ENUM`](enum.html "13.3.5 The ENUM Type") object is determined
    by the number of different enumeration values. One byte is used for enumerations
    with up to 255 possible values. Two bytes are used for enumerations having between
    256 and 65,535 possible values. See [Section 13.3.5, “The ENUM Type”](enum.html
    "13.3.5 The ENUM Type").
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ENUM`](enum.html "13.3.5 ENUM 类型") 对象的大小由不同枚举值的数量确定。对于最多有 255 个可能值的枚举，使用一个字节。对于具有
    256 到 65,535 个可能值的枚举，使用两个字节。请参见 [第 13.3.5 节，“ENUM 类型”](enum.html "13.3.5 ENUM
    类型")。'
- en: The size of a [`SET`](set.html "13.3.6 The SET Type") object is determined by
    the number of different set members. If the set size is *`N`*, the object occupies
    `(*`N`*+7)/8` bytes, rounded up to 1, 2, 3, 4, or 8 bytes. A [`SET`](set.html
    "13.3.6 The SET Type") can have a maximum of 64 members. See [Section 13.3.6,
    “The SET Type”](set.html "13.3.6 The SET Type").
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SET`](set.html "13.3.6 SET 类型") 对象的大小由不同集合成员的数量确定。如果集合大小为 *`N`*，则对象占用 `(*`N`*+7)/8`
    字节，向上取整为 1、2、3、4 或 8 字节。[`SET`](set.html "13.3.6 SET 类型") 最多可以有 64 个成员。请参见 [第
    13.3.6 节，“SET 类型”](set.html "13.3.6 SET 类型")。'
- en: Spatial Type Storage Requirements
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空间类型存储要求
- en: MySQL stores geometry values using 4 bytes to indicate the SRID followed by
    the WKB representation of the value. The [`LENGTH()`](string-functions.html#function_length)
    function returns the space in bytes required for value storage.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 使用 4 个字节来存储几何值的 SRID，后跟值的 WKB 表示。[`LENGTH()`](string-functions.html#function_length)
    函数返回存储值所需的字节空间。
- en: For descriptions of WKB and internal storage formats for spatial values, see
    [Section 13.4.3, “Supported Spatial Data Formats”](gis-data-formats.html "13.4.3 Supported
    Spatial Data Formats").
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有关空间值的 WKB 和内部存储格式的描述，请参阅[第 13.4.3 节，“支持的空间数据格式”](gis-data-formats.html "13.4.3 支持的空间数据格式")。
- en: JSON Storage Requirements
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON 存储需求
- en: In general, the storage requirement for a [`JSON`](json.html "13.5 The JSON
    Data Type") column is approximately the same as for a `LONGBLOB` or `LONGTEXT`
    column; that is, the space consumed by a JSON document is roughly the same as
    it would be for the document's string representation stored in a column of one
    of these types. However, there is an overhead imposed by the binary encoding,
    including metadata and dictionaries needed for lookup, of the individual values
    stored in the JSON document. For example, a string stored in a JSON document requires
    4 to 10 bytes additional storage, depending on the length of the string and the
    size of the object or array in which it is stored.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，[`JSON`](json.html "13.5 JSON 数据类型") 列的存储需求大致与 `LONGBLOB` 或 `LONGTEXT`
    列相同；也就是说，JSON 文档所占用的空间大致与存储在这些类型列中的文档的字符串表示相同。然而，由于存储在 JSON 文档中的各个值的二进制编码，包括用于查找的元数据和字典，会带来一些额外开销。例如，存储在
    JSON 文档中的字符串需要额外的 4 到 10 字节的存储空间，取决于字符串的长度以及存储它的对象或数组的大小。
- en: In addition, MySQL imposes a limit on the size of any JSON document stored in
    a `JSON` column such that it cannot be any larger than the value of [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，MySQL 对存储在 `JSON` 列中的任何 JSON 文档的大小施加了限制，使其不能大于 [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)
    的值。
