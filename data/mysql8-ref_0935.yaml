- en: 15.1.37 TRUNCATE TABLE Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.1.37 截断表语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/truncate-table.html](https://dev.mysql.com/doc/refman/8.0/en/truncate-table.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/truncate-table.html](https://dev.mysql.com/doc/refman/8.0/en/truncate-table.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    empties a table completely. It requires the [`DROP`](privileges-provided.html#priv_drop)
    privilege. Logically, [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement") is similar to a [`DELETE`](delete.html "15.2.2 DELETE Statement")
    statement that deletes all rows, or a sequence of [`DROP TABLE`](drop-table.html
    "15.1.32 DROP TABLE Statement") and [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") statements.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 截断表语句")会完全清空表。它需要[`DROP`](privileges-provided.html#priv_drop)权限。从逻辑上讲，[`TRUNCATE
    TABLE`](truncate-table.html "15.1.37 截断表语句")类似于删除所有行的[`DELETE`](delete.html "15.2.2 DELETE语句")语句，或一系列[`DROP
    TABLE`](drop-table.html "15.1.32 DROP TABLE语句")和[`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE语句")语句。'
- en: To achieve high performance, [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement") bypasses the DML method of deleting data. Thus, it does not
    cause `ON DELETE` triggers to fire, it cannot be performed for `InnoDB` tables
    with parent-child foreign key relationships, and it cannot be rolled back like
    a DML operation. However, `TRUNCATE TABLE` operations on tables that use an atomic
    DDL-supported storage engine are either fully committed or rolled back if the
    server halts during their operation. For more information, see [Section 15.1.1,
    “Atomic Data Definition Statement Support”](atomic-ddl.html "15.1.1 Atomic Data
    Definition Statement Support").
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现高性能，[`TRUNCATE TABLE`](truncate-table.html "15.1.37 截断表语句")绕过了删除数据的DML方法。因此，它不会触发`ON
    DELETE`触发器，不能用于具有父子外键关系的`InnoDB`表，也不能像DML操作那样回滚。但是，对于使用原子DDL支持的存储引擎的表的`TRUNCATE
    TABLE`操作，如果服务器在操作期间停止，则要么完全提交，要么回滚。有关更多信息，请参见[第15.1.1节，“原子数据定义语句支持”](atomic-ddl.html
    "15.1.1 原子数据定义语句支持")。
- en: 'Although [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    is similar to [`DELETE`](delete.html "15.2.2 DELETE Statement"), it is classified
    as a DDL statement rather than a DML statement. It differs from [`DELETE`](delete.html
    "15.2.2 DELETE Statement") in the following ways:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`TRUNCATE TABLE`](truncate-table.html "15.1.37 截断表语句")类似于[`DELETE`](delete.html
    "15.2.2 DELETE语句")，但它被归类为DDL语句而不是DML语句。它与[`DELETE`](delete.html "15.2.2 DELETE语句")在以下方面有所不同：
- en: Truncate operations drop and re-create the table, which is much faster than
    deleting rows one by one, particularly for large tables.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截断操作会删除并重新创建表，这比逐行删除行要快得多，特别是对于大表而言。
- en: Truncate operations cause an implicit commit, and so cannot be rolled back.
    See [Section 15.3.3, “Statements That Cause an Implicit Commit”](implicit-commit.html
    "15.3.3 Statements That Cause an Implicit Commit").
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截断操作会导致隐式提交，因此无法回滚。参见[第15.3.3节，“导致隐式提交的语句”](implicit-commit.html "15.3.3 导致隐式提交的语句")。
- en: Truncation operations cannot be performed if the session holds an active table
    lock.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果会话持有活动表锁，则无法执行截断操作。
- en: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    fails for an `InnoDB` table or [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB
    Cluster 8.0") table if there are any `FOREIGN KEY` constraints from other tables
    that reference the table. Foreign key constraints between columns of the same
    table are permitted.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有其他表引用该表的`FOREIGN KEY`约束，则[`TRUNCATE TABLE`](truncate-table.html "15.1.37 截断表语句")对`InnoDB`表或[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")表会失败。允许同一表的列之间的外键约束。
- en: Truncation operations do not return a meaningful value for the number of deleted
    rows. The usual result is “0 rows affected,” which should be interpreted as “no
    information.”
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截断操作不会返回有意义的已删除行数值。通常的结果是“0行受影响”，应该解释为“没有信息”。
- en: As long as the table definition is valid, the table can be re-created as an
    empty table with [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE
    Statement"), even if the data or index files have become corrupted.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只要表定义有效，即使数据或索引文件已损坏，也可以使用[`TRUNCATE TABLE`](truncate-table.html "15.1.37 截断表语句")将表重新创建为空表。
- en: Any `AUTO_INCREMENT` value is reset to its start value. This is true even for
    `MyISAM` and `InnoDB`, which normally do not reuse sequence values.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何`AUTO_INCREMENT`值都将重置为其起始值。即使对于通常不重用序列值的`MyISAM`和`InnoDB`也是如此。
- en: When used with partitioned tables, [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement") preserves the partitioning; that is, the data and index files
    are dropped and re-created, while the partition definitions are unaffected.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当与分区表一起使用时，[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")保留分区；也就是说，数据和索引文件被删除并重新创建，而分区定义不受影响。
- en: The [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    statement does not invoke `ON DELETE` triggers.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")语句不会触发`ON
    DELETE`触发器。'
- en: Truncating a corrupted `InnoDB` table is supported.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持截断损坏的`InnoDB`表。
- en: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    is treated for purposes of binary logging and replication as DDL rather than DML,
    and is always logged as a statement.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于二进制日志记录和复制的目的，[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE
    Statement")被视为DDL而不是DML，并始终作为一个语句记录。
- en: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    for a table closes all handlers for the table that were opened with [`HANDLER
    OPEN`](handler.html "15.2.5 HANDLER Statement").'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个表，[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")会关闭所有使用[`HANDLER
    OPEN`](handler.html "15.2.5 HANDLER Statement")打开的处理程序。
- en: 'In MySQL 5.7 and earlier, on a system with a large buffer pool and [`innodb_adaptive_hash_index`](innodb-parameters.html#sysvar_innodb_adaptive_hash_index)
    enabled, a `TRUNCATE TABLE` operation could cause a temporary drop in system performance
    due to an LRU scan that occurred when removing the table''s adaptive hash index
    entries (Bug #68184). The remapping of [`TRUNCATE TABLE`](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement") to [`DROP TABLE`](drop-table.html "15.1.32 DROP
    TABLE Statement") and [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE
    Statement") in MySQL 8.0 avoids the problematic LRU scan.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '在MySQL 5.7及更早版本中，在具有大缓冲池和启用[`innodb_adaptive_hash_index`](innodb-parameters.html#sysvar_innodb_adaptive_hash_index)的系统上，`TRUNCATE
    TABLE`操作可能会导致系统性能暂时下降，因为在删除表的自适应哈希索引条目时会发生LRU扫描（Bug #68184）。在MySQL 8.0中，将[`TRUNCATE
    TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")重新映射为[`DROP TABLE`](drop-table.html
    "15.1.32 DROP TABLE Statement")和[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement")避免了问题的LRU扫描。'
- en: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    can be used with Performance Schema summary tables, but the effect is to reset
    the summary columns to 0 or `NULL`, not to remove rows. See [Section 29.12.20,
    “Performance Schema Summary Tables”](performance-schema-summary-tables.html "29.12.20 Performance
    Schema Summary Tables").'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")可以用于性能模式摘要表，但效果是将摘要列重置为0或`NULL`，而不是删除行。参见[Section 29.12.20,
    “性能模式摘要表”](performance-schema-summary-tables.html "29.12.20 Performance Schema
    Summary Tables")。'
- en: 'Truncating an `InnoDB` table that resides in a file-per-table tablespace drops
    the existing tablespace and creates a new one. As of MySQL 8.0.21, if the tablespace
    was created with an earlier version and resides in an unknown directory, `InnoDB`
    creates the new tablespace in the default location and writes the following warning
    to the error log: The DATA DIRECTORY location must be in a known directory. The
    DATA DIRECTORY location will be ignored and the file will be put into the default
    datadir location. Known directories are those defined by the [`datadir`](server-system-variables.html#sysvar_datadir),
    [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir),
    and [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories) variables.
    To have [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    create the tablespace in its current location, add the directory to the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    setting before running [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement").'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 截断位于文件表表空间中的`InnoDB`表会删除现有的表空间并创建一个新的。从MySQL 8.0.21开始，如果表空间是在早期版本中创建的并位于未知目录中，`InnoDB`会在默认位置创建新的表空间，并将以下警告写入错误日志：数据目录位置必须在已知目录中。数据目录位置将被忽略，并且文件将被放入默认datadir位置。已知目录是由[`datadir`](server-system-variables.html#sysvar_datadir)、[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)和[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)变量定义的目录。要让[`TRUNCATE
    TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")在当前位置创建表空间，请在运行[`TRUNCATE
    TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")之前将目录添加到[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)设置中。
