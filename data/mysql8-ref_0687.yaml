- en: 12.7 Column Character Set Conversion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.7 列字符集转换
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/charset-conversion.html](https://dev.mysql.com/doc/refman/8.0/en/charset-conversion.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/charset-conversion.html](https://dev.mysql.com/doc/refman/8.0/en/charset-conversion.html)
- en: 'To convert a binary or nonbinary string column to use a particular character
    set, use [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement"). For
    successful conversion to occur, one of the following conditions must apply:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要将二进制或非二进制字符串列转换为使用特定字符集，请使用[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")。要成功转换，必须满足以下条件之一：
- en: If the column has a binary data type ([`BINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types"), [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")),
    all the values that it contains must be encoded using a single character set (the
    character set you're converting the column to). If you use a binary column to
    store information in multiple character sets, MySQL has no way to know which values
    use which character set and cannot convert the data properly.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果列具有二进制数据类型（[`BINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型"),
    [`VARBINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型"), [`BLOB`](blob.html
    "13.3.4 BLOB和TEXT类型"))，则它包含的所有值必须使用单个字符集进行编码（您正在将列转换为的字符集）。如果使用二进制列存储多个字符集的信息，MySQL
    无法知道哪些值使用哪个字符集，并且无法正确转换数据。
- en: If the column has a nonbinary data type ([`CHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types"), [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")), its contents should be
    encoded in the column character set, not some other character set. If the contents
    are encoded in a different character set, you can convert the column to use a
    binary data type first, and then to a nonbinary column with the desired character
    set.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果列具有非二进制数据类型（[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型"), [`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型"), [`TEXT`](blob.html "13.3.4 BLOB和TEXT类型"))，其内容应该以列字符集编码，而不是其他字符集。如果内容以不同的字符集编码，您可以先将列转换为使用二进制数据类型，然后再转换为具有所需字符集的非二进制列。
- en: 'Suppose that a table `t` has a binary column named `col1` defined as `VARBINARY(50)`.
    Assuming that the information in the column is encoded using a single character
    set, you can convert it to a nonbinary column that has that character set. For
    example, if `col1` contains binary data representing characters in the `greek`
    character set, you can convert it as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设表`t`有一个名为`col1`的二进制列，定义为`VARBINARY(50)`。假设列中的信息使用单个字符集进行编码，您可以将其转换为具有该字符集的非二进制列。例如，如果`col1`包含代表`greek`字符集中字符的二进制数据，则可以按如下方式进行转换：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If your original column has a type of `BINARY(50)`, you could convert it to
    `CHAR(50)`, but the resulting values are padded with `0x00` bytes at the end,
    which may be undesirable. To remove these bytes, use the [`TRIM()`](string-functions.html#function_trim)
    function:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的原始列类型为`BINARY(50)`，您可以将其转换为`CHAR(50)`，但结果值将在末尾填充`0x00`字节，这可能是不希望的。要删除这些字节，请使用[`TRIM()`](string-functions.html#function_trim)函数：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Suppose that table `t` has a nonbinary column named `col1` defined as `CHAR(50)
    CHARACTER SET latin1` but you want to convert it to use `utf8mb4` so that you
    can store values from many languages. The following statement accomplishes this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设表`t`有一个名为`col1`的非二进制列，定义为`CHAR(50) CHARACTER SET latin1`，但您希望将其转换为使用`utf8mb4`，以便存储来自许多语言的值。以下语句可以实现这一目标：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Conversion may be lossy if the column contains characters that are not in both
    character sets.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列包含不在两个字符集中的字符，则转换可能会有损失。
- en: 'A special case occurs if you have old tables from before MySQL 4.1 where a
    nonbinary column contains values that actually are encoded in a character set
    different from the server''s default character set. For example, an application
    might have stored `sjis` values in a column, even though MySQL''s default character
    set was different. It is possible to convert the column to use the proper character
    set but an additional step is required. Suppose that the server''s default character
    set was `latin1` and `col1` is defined as `CHAR(50)` but its contents are `sjis`
    values. The first step is to convert the column to a binary data type, which removes
    the existing character set information without performing any character conversion:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有MySQL 4.1之前的旧表，其中一个非二进制列包含实际上是使用与服务器默认字符集不同的字符集编码的值，则会出现特殊情况。例如，一个应用程序可能已经在列中存储了`sjis`值，尽管MySQL的默认字符集不同。可以将列转换为使用正确的字符集，但需要额外的步骤。假设服务器的默认字符集是`latin1`，`col1`被定义为`CHAR(50)`，但其内容是`sjis`值。第一步是将列转换为二进制数据类型，这将删除现有的字符集信息而不执行任何字符转换：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next step is to convert the column to a nonbinary data type with the proper
    character set:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将列转换为具有正确字符集的非二进制数据类型：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This procedure requires that the table not have been modified already with statements
    such as [`INSERT`](insert.html "15.2.7 INSERT Statement") or [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") after an upgrade to MySQL 4.1 or higher. In that case,
    MySQL would store new values in the column using `latin1`, and the column would
    contain a mix of `sjis` and `latin1` values and cannot be converted properly.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在将MySQL升级到4.1或更高版本后，此过程要求表在使用[`INSERT`](insert.html "15.2.7 INSERT Statement")或[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")等语句修改之前未被修改。在这种情况下，MySQL将使用`latin1`存储新值在列中，并且该列将包含`sjis`和`latin1`值的混合，无法正确转换。
- en: If you specified attributes when creating a column initially, you should also
    specify them when altering the table with [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement"). For example, if you specified `NOT NULL` and an explicit `DEFAULT`
    value, you should also provide them in the [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") statement. Otherwise, the resulting column definition does not
    include those attributes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在创建列时指定了属性，那么在使用[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")修改表时也应该指定这些属性。例如，如果您指定了`NOT
    NULL`和一个明确的`DEFAULT`值，那么在[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement")语句中也应该提供它们。否则，生成的列定义将不包括这些属性。
- en: To convert all character columns in a table, the `ALTER TABLE ... CONVERT TO
    CHARACTER SET *`charset`*` statement may be useful. See [Section 15.1.9, “ALTER
    TABLE Statement”](alter-table.html "15.1.9 ALTER TABLE Statement").
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要转换表中的所有字符列，`ALTER TABLE ... CONVERT TO CHARACTER SET *`charset`*`语句可能会有用。请参阅[第15.1.9节，“ALTER
    TABLE Statement”](alter-table.html "15.1.9 ALTER TABLE Statement")。
