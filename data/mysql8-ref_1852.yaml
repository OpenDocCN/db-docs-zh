- en: 26.2.7 How MySQL Partitioning Handles NULL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 26.2.7 MySQL分区如何处理NULL
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-handling-nulls.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-handling-nulls.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-handling-nulls.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-handling-nulls.html)
- en: Partitioning in MySQL does nothing to disallow `NULL` as the value of a partitioning
    expression, whether it is a column value or the value of a user-supplied expression.
    Even though it is permitted to use `NULL` as the value of an expression that must
    otherwise yield an integer, it is important to keep in mind that `NULL` is not
    a number. MySQL's partitioning implementation treats `NULL` as being less than
    any non-`NULL` value, just as `ORDER BY` does.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL中的分区对于将`NULL`作为分区表达式的值（无论是列值还是用户提供的表达式的值）并不做任何限制。即使允许将`NULL`用作必须产生整数的表达式的值，但重要的是要记住`NULL`不是一个数字。MySQL的分区实现将`NULL`视为小于任何非`NULL`值，就像`ORDER
    BY`一样。
- en: This means that treatment of `NULL` varies between partitioning of different
    types, and may produce behavior which you do not expect if you are not prepared
    for it. This being the case, we discuss in this section how each MySQL partitioning
    type handles `NULL` values when determining the partition in which a row should
    be stored, and provide examples for each.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`NULL`的处理在不同类型的分区之间有所不同，并且如果您没有为此做好准备，可能会产生您意想不到的行为。在这种情况下，我们在本节中讨论了每种MySQL分区类型在确定应将行存储在哪个分区时如何处理`NULL`值，并为每种情况提供了示例。
- en: '**Handling of NULL with RANGE partitioning. ** If you insert a row into a table
    partitioned by `RANGE` such that the column value used to determine the partition
    is `NULL`, the row is inserted into the lowest partition. Consider these two tables
    in a database named `p`, created as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用RANGE分区处理NULL。** 如果您向由`RANGE`分区的表插入一行，使得用于确定分区的列值为`NULL`，则该行将插入到最低的分区中。考虑以下在名为`p`的数据库中创建的两个表：'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see the partitions created by these two [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statements using the following query against
    the [`PARTITIONS`](information-schema-partitions-table.html "28.3.21 The INFORMATION_SCHEMA
    PARTITIONS Table") table in the `INFORMATION_SCHEMA` database:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下查询`INFORMATION_SCHEMA`数据库中的`PARTITIONS`表，您可以看到这两个[`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement")语句创建的分区：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '(For more information about this table, see [Section 28.3.21, “The INFORMATION_SCHEMA
    PARTITIONS Table”](information-schema-partitions-table.html "28.3.21 The INFORMATION_SCHEMA
    PARTITIONS Table").) Now let us populate each of these tables with a single row
    containing a `NULL` in the column used as the partitioning key, and verify that
    the rows were inserted using a pair of [`SELECT`](select.html "15.2.13 SELECT
    Statement") statements:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: （有关此表的更多信息，请参见[第28.3.21节，“The INFORMATION_SCHEMA PARTITIONS Table”](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table")。）现在让我们用包含在用作分区键的列中的`NULL`的单行填充这些表，并验证使用一对[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句插入了这些行：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can see which partitions are used to store the inserted rows by rerunning
    the previous query against [`INFORMATION_SCHEMA.PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table") and inspecting the output:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过重新运行针对[`INFORMATION_SCHEMA.PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table")的上一个查询并检查输出来查看用于存储插入行的分区：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also demonstrate that these rows were stored in the lowest-numbered
    partition of each table by dropping these partitions, and then re-running the
    [`SELECT`](select.html "15.2.13 SELECT Statement") statements:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过删除这些分区，然后重新运行[`SELECT`](select.html "15.2.13 SELECT Statement")语句来演示这些行存储在每个表的最低编号分区中：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (For more information on `ALTER TABLE ... DROP PARTITION`, see [Section 15.1.9,
    “ALTER TABLE Statement”](alter-table.html "15.1.9 ALTER TABLE Statement").)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: （有关`ALTER TABLE ... DROP PARTITION`的更多信息，请参见[第15.1.9节，“ALTER TABLE Statement”](alter-table.html
    "15.1.9 ALTER TABLE Statement")。）
- en: '`NULL` is also treated in this way for partitioning expressions that use SQL
    functions. Suppose that we define a table using a [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statement such as this one:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用SQL函数的分区表达式，`NULL`也以这种方式处理。假设我们使用类似于以下的[`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement")语句定义一个表：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As with other MySQL functions, [`YEAR(NULL)`](date-and-time-functions.html#function_year)
    returns `NULL`. A row with a `dt` column value of `NULL` is treated as though
    the partitioning expression evaluated to a value less than any other value, and
    so is inserted into partition `p0`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他MySQL函数一样，[`YEAR(NULL)`](date-and-time-functions.html#function_year)返回`NULL`。具有`NULL`值的`dt`列行被视为分区表达式评估为低于任何其他值的值，因此被插入到分区`p0`中。
- en: '**Handling of NULL with LIST partitioning. ** A table that is partitioned by
    `LIST` admits `NULL` values if and only if one of its partitions is defined using
    that value-list that contains `NULL`. The converse of this is that a table partitioned
    by `LIST` which does not explicitly use `NULL` in a value list rejects rows resulting
    in a `NULL` value for the partitioning expression, as shown in this example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用LIST分区处理NULL值。** 通过`LIST`分区的表仅在其中一个分区使用包含`NULL`的值列表定义时才允许`NULL`值。相反，通过`LIST`分区的表如果在值列表中没有明确使用`NULL`，则拒绝导致分区表达式产生`NULL`值的行，如下例所示：'
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Only rows having a `c1` value between `0` and `8` inclusive can be inserted
    into `ts1`. `NULL` falls outside this range, just like the number `9`. We can
    create tables `ts2` and `ts3` having value lists containing `NULL`, as shown here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 只有`c1`值在`0`和`8`之间（包括0和8）的行才能插入到`ts1`中。`NULL`不在此范围内，就像数字`9`一样。我们可以创建包含`NULL`值列表的`ts2`和`ts3`表，如下所示：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When defining value lists for partitioning, you can (and should) treat `NULL`
    just as you would any other value. For example, both `VALUES IN (NULL)` and `VALUES
    IN (1, 4, 7, NULL)` are valid, as are `VALUES IN (1, NULL, 4, 7)`, `VALUES IN
    (NULL, 1, 4, 7)`, and so on. You can insert a row having `NULL` for column `c1`
    into each of the tables `ts2` and `ts3`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在为分区定义值列表时，您可以（也应该）将`NULL`视为任何其他值一样对待。例如，`VALUES IN (NULL)`和`VALUES IN (1, 4,
    7, NULL)`都是有效的，就像`VALUES IN (1, NULL, 4, 7)`，`VALUES IN (NULL, 1, 4, 7)`等一样。您可以将具有`c1`列为`NULL`的行插入到`ts2`和`ts3`中：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By issuing the appropriate query against [`INFORMATION_SCHEMA.PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table"), you can determine which partitions
    were used to store the rows just inserted (we assume, as in the previous examples,
    that the partitioned tables were created in the `p` database):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过针对[`INFORMATION_SCHEMA.PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table")发出适当的查询，您可以确定刚刚插入的行使用了哪些分区进行存储（我们假设，与前面的示例一样，分区表是在`p`数据库中创建的）：
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As shown earlier in this section, you can also verify which partitions were
    used for storing the rows by deleting these partitions and then performing a [`SELECT`](select.html
    "15.2.13 SELECT Statement").
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本节前面所示，您还可以通过删除这些分区并执行[`SELECT`](select.html "15.2.13 SELECT Statement")来验证用于存储行的分区。
- en: '**Handling of NULL with HASH and KEY partitioning. ** `NULL` is handled somewhat
    differently for tables partitioned by `HASH` or `KEY`. In these cases, any partition
    expression that yields a `NULL` value is treated as though its return value were
    zero. We can verify this behavior by examining the effects on the file system
    of creating a table partitioned by `HASH` and populating it with a record containing
    appropriate values. Suppose that you have a table `th` (also in the `p` database)
    created using the following statement:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用HASH和KEY分区处理NULL值。** 对于使用`HASH`或`KEY`分区的表，`NULL`的处理略有不同。在这些情况下，任何产生`NULL`值的分区表达式都被视为其返回值为零。我们可以通过创建一个使用适当值的记录的`HASH`分区表并查看其对文件系统的影响来验证这种行为。假设您使用以下语句创建了一个名为`th`的表（也在`p`数据库中）：'
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The partitions belonging to this table can be viewed using the query shown
    here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下查询查看属于该表的分区：
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`TABLE_ROWS` for each partition is 0\. Now insert two rows into `th` whose
    `c1` column values are `NULL` and 0, and verify that these rows were inserted,
    as shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个分区的`TABLE_ROWS`为0。现在向`th`插入两行，这两行的`c1`列值分别为`NULL`和0，并验证这些行是否已插入，如下所示：
- en: '[PRE12]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Recall that for any integer *`N`*, the value of `NULL MOD *`N`*` is always
    `NULL`. For tables that are partitioned by `HASH` or `KEY`, this result is treated
    for determining the correct partition as `0`. Checking the Information Schema
    [`PARTITIONS`](information-schema-partitions-table.html "28.3.21 The INFORMATION_SCHEMA
    PARTITIONS Table") table once again, we can see that both rows were inserted into
    partition `p0`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任意整数*`N`*，`NULL MOD *`N`*`的值始终为`NULL`。对于按`HASH`或`KEY`分区的表，此结果被视为确定正确分区的`0`。再次检查信息模式[`PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 信息模式PARTITIONS表")表，我们可以看到两行都被插入到分区`p0`中：
- en: '[PRE13]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By repeating the last example using `PARTITION BY KEY` in place of `PARTITION
    BY HASH` in the definition of the table, you can verify that `NULL` is also treated
    like 0 for this type of partitioning.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在表的定义中使用`PARTITION BY KEY`替换`PARTITION BY HASH`来重复上一个示例，您可以验证对于这种类型的分区，`NULL`也被视为0。
