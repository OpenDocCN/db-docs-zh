- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/show-table-status.html](https://dev.mysql.com/doc/refman/8.0/en/show-table-status.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/show-table-status.html](https://dev.mysql.com/doc/refman/8.0/en/show-table-status.html)
- en: 15.7.7.38 SHOW TABLE STATUS Statement
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.7.7.38 SHOW TABLE STATUS 语句
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW TABLE STATUS Statement")
    works likes [`SHOW TABLES`](show-tables.html "15.7.7.39 SHOW TABLES Statement"),
    but provides a lot of information about each non-`TEMPORARY` table. You can also
    get this list using the [**mysqlshow --status *`db_name`***](mysqlshow.html "6.5.7 mysqlshow
    — Display Database, Table, and Column Information") command. The [`LIKE`](string-comparison-functions.html#operator_like)
    clause, if present, indicates which table names to match. The `WHERE` clause can
    be given to select rows using more general conditions, as discussed in [Section 28.8,
    “Extensions to SHOW Statements”](extended-show.html "28.8 Extensions to SHOW Statements").'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW TABLE STATUS 语句")
    类似于 [`SHOW TABLES`](show-tables.html "15.7.7.39 SHOW TABLES 语句")，但提供有关每个非`TEMPORARY`表的大量信息。您还可以使用
    [**mysqlshow --status *`db_name`***](mysqlshow.html "6.5.7 mysqlshow — Display
    Database, Table, and Column Information") 命令获取此列表。如果存在 `LIKE` 子句，则指示要匹配的表名。`WHERE`
    子句可以用于使用更一般的条件选择行，如 [第28.8节 “SHOW 语句的扩展”](extended-show.html "28.8 SHOW 语句的扩展")
    中所讨论的。'
- en: This statement also displays information about views.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句还显示有关视图的信息。
- en: '[`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW TABLE STATUS Statement")
    output has these columns:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW TABLE STATUS 语句")
    输出包括以下列：'
- en: '`Name`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Name`'
- en: The name of the table.
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表的名称。
- en: '`Engine`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Engine`'
- en: The storage engine for the table. See [Chapter 17, *The InnoDB Storage Engine*](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine"), and [Chapter 18, *Alternative Storage
    Engines*](storage-engines.html "Chapter 18 Alternative Storage Engines").
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表的存储引擎。请参阅 [第17章 *InnoDB 存储引擎*](innodb-storage-engine.html "第17章 InnoDB 存储引擎")
    和 [第18章 *替代存储引擎*](storage-engines.html "第18章 替代存储引擎")。
- en: For partitioned tables, `Engine` shows the name of the storage engine used by
    all partitions.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于分区表，`Engine` 显示所有分区使用的存储引擎的名称。
- en: '`Version`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Version`'
- en: This column is unused. With the removal of `.frm` files in MySQL 8.0, this column
    now reports a hardcoded value of `10`, which is the last `.frm` file version used
    in MySQL 5.7.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此列未使用。随着 MySQL 8.0 中 `.frm` 文件的移除，此列现在报告一个硬编码值 `10`，这是 MySQL 5.7 中使用的最后一个 `.frm`
    文件版本。
- en: '`Row_format`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Row_format`'
- en: The row-storage format (`Fixed`, `Dynamic`, `Compressed`, `Redundant`, `Compact`).
    For `MyISAM` tables, `Dynamic` corresponds to what [**myisamchk -dvv**](myisamchk.html
    "6.6.4 myisamchk — MyISAM Table-Maintenance Utility") reports as `Packed`.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 行存储格式（`Fixed`、`Dynamic`、`Compressed`、`Redundant`、`Compact`）。对于 `MyISAM` 表，`Dynamic`
    对应于 [**myisamchk -dvv**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility") 报告的 `Packed`。
- en: '`Rows`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Rows`'
- en: The number of rows. Some storage engines, such as `MyISAM`, store the exact
    count. For other storage engines, such as `InnoDB`, this value is an approximation,
    and may vary from the actual value by as much as 40% to 50%. In such cases, use
    `SELECT COUNT(*)` to obtain an accurate count.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 行数。一些存储引擎，如`MyISAM`，存储确切的计数。对于其他存储引擎，如`InnoDB`，此值是一个近似值，可能与实际值相差 40% 到 50%。在这种情况下，使用
    `SELECT COUNT(*)` 来获取准确的计数。
- en: The `Rows` value is `NULL` for `INFORMATION_SCHEMA` tables.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 `INFORMATION_SCHEMA` 表，`Rows` 值为 `NULL`。
- en: For [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    tables, the row count is only a rough estimate used in SQL optimization. (This
    is also true if the [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine") table is partitioned.)
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 [`InnoDB`](innodb-storage-engine.html "第17章 InnoDB 存储引擎") 表，行数仅是 SQL 优化中使用的粗略估计。（如果
    [`InnoDB`](innodb-storage-engine.html "第17章 InnoDB 存储引擎") 表被分区，这也是正确的。）
- en: '`Avg_row_length`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Avg_row_length`'
- en: The average row length.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 平均行长度。
- en: '`Data_length`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data_length`'
- en: For `MyISAM`, `Data_length` is the length of the data file, in bytes.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 `MyISAM`，`Data_length` 是数据文件的长度，以字节为单位。
- en: For `InnoDB`, `Data_length` is the approximate amount of space allocated for
    the clustered index, in bytes. Specifically, it is the clustered index size, in
    pages, multiplied by the `InnoDB` page size.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 `InnoDB`，`Data_length` 是为聚簇索引分配的空间的近似量，以字节为单位。具体来说，它是聚簇索引大小（以页为单位）乘以 `InnoDB`
    页大小。
- en: Refer to the notes at the end of this section for information regarding other
    storage engines.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关其他存储引擎的信息，请参考本节末尾的注释。
- en: '`Max_data_length`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Max_data_length`'
- en: For `MyISAM`, `Max_data_length` is maximum length of the data file. This is
    the total number of bytes of data that can be stored in the table, given the data
    pointer size used.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`MyISAM`，`Max_data_length`是数据文件的最大长度。这是可以存储在表中的数据字节数总数，考虑到使用的数据指针大小。
- en: Unused for `InnoDB`.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`InnoDB`不适用。
- en: Refer to the notes at the end of this section for information regarding other
    storage engines.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关其他存储引擎的信息，请参考本节末尾的注释。
- en: '`Index_length`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Index_length`'
- en: For `MyISAM`, `Index_length` is the length of the index file, in bytes.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`MyISAM`，`Index_length`是索引文件的长度，以字节为单位。
- en: For `InnoDB`, `Index_length` is the approximate amount of space allocated for
    non-clustered indexes, in bytes. Specifically, it is the sum of non-clustered
    index sizes, in pages, multiplied by the `InnoDB` page size.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`InnoDB`，`Index_length`是非聚簇索引分配的大致空间量，以字节为单位。具体来说，它是非聚簇索引大小（以页为单位）的总和，乘以`InnoDB`页大小。
- en: Refer to the notes at the end of this section for information regarding other
    storage engines.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关其他存储引擎的信息，请参考本节末尾的注释。
- en: '`Data_free`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data_free`'
- en: The number of allocated but unused bytes.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已分配但未使用字节数。
- en: '`InnoDB` tables report the free space of the tablespace to which the table
    belongs. For a table located in the shared tablespace, this is the free space
    of the shared tablespace. If you are using multiple tablespaces and the table
    has its own tablespace, the free space is for only that table. Free space means
    the number of bytes in completely free extents minus a safety margin. Even if
    free space displays as 0, it may be possible to insert rows as long as new extents
    need not be allocated.'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InnoDB`表报告表所属表空间的可用空间。对于位于共享表空间中的表，这是共享表空间的可用空间。如果您使用多个表空间并且表有自己的表空间，则可用空间仅针对该表。可用空间指完全空闲的区段字节数减去安全边界。即使可用空间显示为0，也可能可以插入行，只要不需要分配新的区段。'
- en: For NDB Cluster, `Data_free` shows the space allocated on disk for, but not
    used by, a Disk Data table or fragment on disk. (In-memory data resource usage
    is reported by the `Data_length` column.)
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于NDB Cluster，`Data_free`显示为磁盘上为磁盘数据表或片段分配但未使用的空间。（内存数据资源使用由`Data_length`列报告。）
- en: 'For partitioned tables, this value is only an estimate and may not be absolutely
    correct. A more accurate method of obtaining this information in such cases is
    to query the `INFORMATION_SCHEMA` [`PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table") table, as shown in this example:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于分区表，此值仅为估计值，可能不完全正确。在这种情况下获取此信息的更准确方法是查询`INFORMATION_SCHEMA` [`PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table")表，如本例所示：
- en: '[PRE1]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more information, see [Section 28.3.21, “The INFORMATION_SCHEMA PARTITIONS
    Table”](information-schema-partitions-table.html "28.3.21 The INFORMATION_SCHEMA
    PARTITIONS Table").
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[第28.3.21节，“INFORMATION_SCHEMA PARTITIONS表”](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table")。
- en: '`Auto_increment`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Auto_increment`'
- en: The next `AUTO_INCREMENT` value.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一个`AUTO_INCREMENT`值。
- en: '`Create_time`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Create_time`'
- en: When the table was created.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表创建时间。
- en: '`Update_time`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Update_time`'
- en: When the data file was last updated. For some storage engines, this value is
    `NULL`. For example, `InnoDB` stores multiple tables in its [system tablespace](glossary.html#glos_system_tablespace
    "system tablespace") and the data file timestamp does not apply. Even with [file-per-table](glossary.html#glos_file_per_table
    "file-per-table") mode with each `InnoDB` table in a separate `.ibd` file, [change
    buffering](glossary.html#glos_change_buffering "change buffering") can delay the
    write to the data file, so the file modification time is different from the time
    of the last insert, update, or delete. For `MyISAM`, the data file timestamp is
    used; however, on Windows the timestamp is not updated by updates, so the value
    is inaccurate.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据文件上次更新时间。对于某些存储引擎，此值为`NULL`。例如，`InnoDB`在其[系统表空间](glossary.html#glos_system_tablespace
    "system tablespace")中存储多个表，数据文件时间戳不适用。即使每个`InnoDB`表在单独的`.ibd`文件中使用[file-per-table](glossary.html#glos_file_per_table
    "file-per-table")模式，[change buffering](glossary.html#glos_change_buffering "change
    buffering")也可以延迟对数据文件的写入，因此文件修改时间与最后一次插入、更新或删除的时间不同。对于`MyISAM`，使用数据文件时间戳；但是在Windows上，时间戳不会被更新，因此该值不准确。
- en: '`Update_time` displays a timestamp value for the last [`UPDATE`](update.html
    "15.2.17 UPDATE Statement"), [`INSERT`](insert.html "15.2.7 INSERT Statement"),
    or [`DELETE`](delete.html "15.2.2 DELETE Statement") performed on `InnoDB` tables
    that are not partitioned. For MVCC, the timestamp value reflects the [`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements") time, which is considered
    the last update time. Timestamps are not persisted when the server is restarted
    or when the table is evicted from the `InnoDB` data dictionary cache.'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Update_time`显示了对未分区的`InnoDB`表执行的最后一次[`UPDATE`](update.html "15.2.17 UPDATE
    Statement")、[`INSERT`](insert.html "15.2.7 INSERT Statement")或[`DELETE`](delete.html
    "15.2.2 DELETE Statement")的时间戳值。对于MVCC，时间戳值反映了[`COMMIT`](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements")时间，被视为最后更新时间。当服务器重新启动或表从`InnoDB`数据字典缓存中删除时，时间戳不会被持久化。'
- en: '`Check_time`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Check_time`'
- en: When the table was last checked. Not all storage engines update this time, in
    which case, the value is always `NULL`.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上次检查表的时间。并非所有存储引擎都更新此时间，此时值始终为`NULL`。
- en: For partitioned [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine") tables, `Check_time` is always `NULL`.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于分区[`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")表，`Check_time`始终为`NULL`。
- en: '`Collation`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`校对规则`'
- en: The table default collation. The output does not explicitly list the table default
    character set, but the collation name begins with the character set name.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表的默认校对规则。输出不明确列出表的默认字符集，但校对规则名称以字符集名称开头。
- en: '`Checksum`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`校验和`'
- en: The live checksum value, if any.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实时校验和值（如果有）。
- en: '`Create_options`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Create_options`'
- en: Extra options used with [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE
    Statement").
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")一起使用的额外选项。
- en: '`Create_options` shows `partitioned` for a partitioned table.'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于分区表，`Create_options`显示`partitioned`。
- en: Prior to MySQL 8.0.16, `Create_options` shows the `ENCRYPTION` clause specified
    for tables created in file-per-table tablespaces. As of MySQL 8.0.16, it shows
    the encryption clause for file-per-table tablespaces if the table is encrypted
    or if the specified encryption differs from the schema encryption. The encryption
    clause is not shown for tables created in general tablespaces. To identify encrypted
    file-per-table and general tablespaces, query the [`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 The INFORMATION_SCHEMA INNODB_TABLESPACES Table") `ENCRYPTION` column.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.16之前，对于在文件表空间中创建的表，`Create_options`显示指定的`ENCRYPTION`子句。从MySQL 8.0.16开始，如果表已加密或指定的加密与模式加密不同，则显示文件表空间的加密子句。对于在一般表空间中创建的表，不显示加密子句。要识别加密的文件表空间和一般表空间，请查询[`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 The INFORMATION_SCHEMA INNODB_TABLESPACES Table")的`ENCRYPTION`列。
- en: When creating a table with [strict mode](glossary.html#glos_strict_mode "strict
    mode") disabled, the storage engine's default row format is used if the specified
    row format is not supported. The actual row format of the table is reported in
    the `Row_format` column. `Create_options` shows the row format that was specified
    in the [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在禁用[严格模式](glossary.html#glos_strict_mode "strict mode")创建表时，如果指定的行格式不受支持，则使用存储引擎的默认行格式。表的实际行格式在`Row_format`列中报告。`Create_options`显示了在[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句中指定的行格式。
- en: When altering the storage engine of a table, table options that are not applicable
    to the new storage engine are retained in the table definition to enable reverting
    the table with its previously defined options to the original storage engine,
    if necessary. `Create_options` may show retained options.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当更改表的存储引擎时，不适用于新存储引擎的表选项将保留在表定义中，以便在必要时将表及其先前定义的选项还原为原始存储引擎。`Create_options`可能显示保留的选项。
- en: '`Comment`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`注释`'
- en: The comment used when creating the table (or information as to why MySQL could
    not access the table information).
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建表时使用的注释（或MySQL无法访问表信息的原因）。
- en: Notes
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 备注
- en: For `InnoDB` tables, [`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW
    TABLE STATUS Statement") does not give accurate statistics except for the physical
    size reserved by the table. The row count is only a rough estimate used in SQL
    optimization.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`InnoDB`表，[`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW TABLE
    STATUS Statement")除了表所保留的物理大小外，不提供准确的统计信息。行数仅是SQL优化中使用的粗略估计。
- en: For [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables, the
    output of this statement shows appropriate values for the `Avg_row_length` and
    `Data_length` columns, with the exception that [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") columns are not taken into account.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")表，此语句的输出显示了`Avg_row_length`和`Data_length`列的适当值，但不考虑[`BLOB`](blob.html
    "13.3.4 BLOB和TEXT类型")列。
- en: For [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables, `Data_length`
    includes data stored in main memory only; the `Max_data_length` and `Data_free`
    columns apply to Disk Data.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")表，`Data_length`仅包括存储在主内存中的数据；`Max_data_length`和`Data_free`列适用于磁盘数据。
- en: For NDB Cluster Disk Data tables, `Max_data_length` shows the space allocated
    for the disk part of a Disk Data table or fragment. (In-memory data resource usage
    is reported by the `Data_length` column.)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于NDB集群磁盘数据表，`Max_data_length`显示为磁盘数据表或片段的磁盘部分分配的空间。（内存数据资源使用情况由`Data_length`列报告。）
- en: For `MEMORY` tables, the `Data_length`, `Max_data_length`, and `Index_length`
    values approximate the actual amount of allocated memory. The allocation algorithm
    reserves memory in large amounts to reduce the number of allocation operations.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`MEMORY`表，`Data_length`、`Max_data_length`和`Index_length`的值近似表示实际分配的内存量。分配算法会大量保留内存以减少分配操作的次数。
- en: For views, most columns displayed by [`SHOW TABLE STATUS`](show-table-status.html
    "15.7.7.38 SHOW TABLE STATUS Statement") are 0 or `NULL` except that `Name` indicates
    the view name, `Create_time` indicates the creation time, and `Comment` says `VIEW`.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于视图，[`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW TABLE STATUS语句")显示的大多数列都为0或`NULL`，除了`Name`表示视图名称，`Create_time`表示创建时间，`Comment`显示为`VIEW`。
- en: Table information is also available from the `INFORMATION_SCHEMA` [`TABLES`](information-schema-tables-table.html
    "28.3.38 The INFORMATION_SCHEMA TABLES Table") table. See [Section 28.3.38, “The
    INFORMATION_SCHEMA TABLES Table”](information-schema-tables-table.html "28.3.38 The
    INFORMATION_SCHEMA TABLES Table").
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 表信息也可以从`INFORMATION_SCHEMA` [`TABLES`](information-schema-tables-table.html
    "28.3.38 INFORMATION_SCHEMA TABLES表")表中获取。请参见[第28.3.38节，“INFORMATION_SCHEMA TABLES表”](information-schema-tables-table.html
    "28.3.38 INFORMATION_SCHEMA TABLES表")。
