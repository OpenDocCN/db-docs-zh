- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/using-date.html](https://dev.mysql.com/doc/refman/8.0/en/using-date.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/using-date.html](https://dev.mysql.com/doc/refman/8.0/en/using-date.html)
- en: B.3.4.2 Problems Using DATE Columns
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: B.3.4.2 使用 DATE 列时的问题
- en: 'The format of a [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types") value is `''*`YYYY-MM-DD`*''`. According to standard SQL, no other format
    is permitted. You should use this format in [`UPDATE`](update.html "15.2.17 UPDATE
    Statement") expressions and in the `WHERE` clause of [`SELECT`](select.html "15.2.13 SELECT
    Statement") statements. For example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") 值的格式为
    `''*`YYYY-MM-DD`*''`。根据标准 SQL，不允许使用其他格式。你应该在 [`UPDATE`](update.html "15.2.17 UPDATE
    Statement") 表达式和 [`SELECT`](select.html "15.2.13 SELECT Statement") 语句的 `WHERE`
    子句中使用此格式。例如：'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As a convenience, MySQL automatically converts a date to a number if the date
    is used in numeric context and vice versa. MySQL also permits a “relaxed” string
    format when updating and in a `WHERE` clause that compares a date to a [`DATE`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), or [`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") column. “Relaxed” format means
    that any punctuation character may be used as the separator between parts. For
    example, `'2004-08-15'` and `'2004#08#15'` are equivalent. MySQL can also convert
    a string containing no separators (such as `'20040815'`), provided it makes sense
    as a date.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为便利，MySQL会自动将日期转换为数字，如果日期在数字上下文中使用，反之亦然。MySQL还允许在更新和将日期与 [`DATE`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")、[`DATETIME`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") 或 [`TIMESTAMP`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") 列进行比较的 `WHERE` 子句中使用“宽松”的字符串格式。 “宽松”格式意味着任何标点字符都可以用作部分之间的分隔符。例如，`'2004-08-15'`
    和 `'2004#08#15'` 是等效的。MySQL还可以转换不包含分隔符的字符串（例如 `'20040815'`），只要它作为日期是有意义的。
- en: 'When you compare a [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types"), [`TIME`](time.html "13.2.3 The TIME Type"), [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), or [`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") to a constant string with the
    `<`, `<=`, `=`, `>=`, `>`, or `BETWEEN` operators, MySQL normally converts the
    string to an internal long integer for faster comparison (and also for a bit more
    “relaxed” string checking). However, this conversion is subject to the following
    exceptions:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 `<`, `<=`, `=`, `>=`, `>`, 或 `BETWEEN` 操作符将 [`DATE`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types")、[`TIME`](time.html "13.2.3 The TIME Type")、[`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") 或 [`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") 与常量字符串进行比较时，MySQL通常会将字符串转换为内部长整型以加快比较速度（也为了更“宽松”的字符串检查）。然而，此转换受以下例外情况影响：
- en: When you compare two columns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你比较两列时
- en: When you compare a [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types"), [`TIME`](time.html "13.2.3 The TIME Type"), [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), or [`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") column to an expression
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你将 [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")、[`TIME`](time.html
    "13.2.3 The TIME Type")、[`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") 或 [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") 列与表达式进行比较时
- en: When you use any comparison method other than those just listed, such as `IN`
    or [`STRCMP()`](string-comparison-functions.html#function_strcmp).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你使用除了刚列出的方法之外的任何比较方法，如 `IN` 或 [`STRCMP()`](string-comparison-functions.html#function_strcmp)。
- en: For those exceptions, the comparison is done by converting the objects to strings
    and performing a string comparison.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些例外情况，通过将对象转换为字符串并执行字符串比较来进行比较。
- en: To be on the safe side, assume that strings are compared as strings and use
    the appropriate string functions if you want to compare a temporal value to a
    string.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安全起见，假设字符串是作为字符串进行比较的，并且如果你想将时间值与字符串进行比较，则使用适��的字符串函数。
- en: The special “zero” date `'0000-00-00'` can be stored and retrieved as `'0000-00-00'.`
    When a `'0000-00-00'` date is used through Connector/ODBC, it is automatically
    converted to `NULL` because ODBC cannot handle that kind of date.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的“零”日期 `'0000-00-00'` 可以存储和检索为 `'0000-00-00'`。当通过 Connector/ODBC 使用 `'0000-00-00'`
    日期时，它会自动转换为 `NULL`，因为 ODBC 无法处理这种日期。
- en: 'Because MySQL performs the conversions just described, the following statements
    work (assume that `idate` is a [`DATE`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") column):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '因为 MySQL 执行了刚才描述的转换，所以下面的语句有效（假设 `idate` 是一个 [`DATE`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") 列）:'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, the following statement does not work:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，以下语句不起作用：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`STRCMP()`](string-comparison-functions.html#function_strcmp) is a string
    function, so it converts `idate` to a string in `''*`YYYY-MM-DD`*''` format and
    performs a string comparison. It does not convert `''20030505''` to the date `''2003-05-05''`
    and perform a date comparison.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[`STRCMP()`](string-comparison-functions.html#function_strcmp) 是一个字符串函数，因此它将
    `idate` 转换为 `''*`YYYY-MM-DD`*''` 格式的字符串并执行字符串比较。它不会将 `''20030505''` 转换为日期 `''2003-05-05''`
    并执行日期比较。'
- en: 'If you enable the [`ALLOW_INVALID_DATES`](sql-mode.html#sqlmode_allow_invalid_dates)
    SQL mode, MySQL permits you to store dates that are given only limited checking:
    MySQL requires only that the day is in the range from 1 to 31 and the month is
    in the range from 1 to 12. This makes MySQL very convenient for Web applications
    where you obtain year, month, and day in three different fields and you want to
    store exactly what the user inserted (without date validation).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你启用了[`ALLOW_INVALID_DATES`](sql-mode.html#sqlmode_allow_invalid_dates) SQL
    模式，MySQL 允许你存储仅进行有限检查的日期：MySQL 仅要求日期在 1 到 31 的范围内，月份在 1 到 12 的范围内。这使得 MySQL 在
    Web 应用程序中非常方便，其中你在三个不同字段中获取年、月和日，并且想要存储用户插入的内容（无需日期验证）。
- en: MySQL permits you to store dates where the day or month and day are zero. This
    is convenient if you want to store a birthdate in a [`DATE`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") column and you know only part of the date.
    To disallow zero month or day parts in dates, enable the [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)
    mode.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 允许你存储日期，其中日期或月份和日期为零。如果你想要在 [`DATE`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") 列中存储出生日期，并且只知道日期的一部分，这是很方便的。要禁止日期中的零月或日部分，请启用 [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)
    模式。
- en: MySQL permits you to store a “zero” value of `'0000-00-00'` as a “dummy date.”
    This is in some cases more convenient than using `NULL` values. If a date to be
    stored in a [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    column cannot be converted to any reasonable value, MySQL stores `'0000-00-00'`.
    To disallow `'0000-00-00'`, enable the [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)
    mode.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 允许你将“零”值 `'0000-00-00'` 存储为“虚拟日期”。在某些情况下，这比使用 `NULL` 值更方便。如果要存储在 [`DATE`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") 列中的日期无法转换为任何合理值，MySQL 将存储 `'0000-00-00'`。要禁止
    `'0000-00-00'`，请启用 [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date) 模式。
- en: To have MySQL check all dates and accept only legal dates (unless overridden
    by `IGNORE`), set the [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    system variable to `"NO_ZERO_IN_DATE,NO_ZERO_DATE"`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要让 MySQL 检查所有日期并仅接受合法日期（除非被 `IGNORE` 覆盖），请将 [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    系统变量设置为 `"NO_ZERO_IN_DATE,NO_ZERO_DATE"`。
