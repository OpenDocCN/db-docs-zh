- en: 18.7.1 MERGE Table Advantages and Disadvantages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18.7.1 MERGE表的优缺点
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/merge-table-advantages.html](https://dev.mysql.com/doc/refman/8.0/en/merge-table-advantages.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/merge-table-advantages.html](https://dev.mysql.com/doc/refman/8.0/en/merge-table-advantages.html)
- en: '`MERGE` tables can help you solve the following problems:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`MERGE`表可以帮助你解决以下问题：'
- en: Easily manage a set of log tables. For example, you can put data from different
    months into separate tables, compress some of them with [**myisampack**](myisampack.html
    "6.6.6 myisampack — Generate Compressed, Read-Only MyISAM Tables"), and then create
    a `MERGE` table to use them as one.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松管理一组日志表。例如，你可以将不同月份的数据放入单独的表中，压缩其中一些表，并创建一个`MERGE`表将它们作为一个整体使用。
- en: Obtain more speed. You can split a large read-only table based on some criteria,
    and then put individual tables on different disks. A `MERGE` table structured
    this way could be much faster than using a single large table.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得更快的速度。你可以根据某些标准将一个大的只读表拆分，并将单独的表放在不同的磁盘上。以这种方式结构化的`MERGE`表可能比使用单个大表要快得多。
- en: Perform more efficient searches. If you know exactly what you are looking for,
    you can search in just one of the underlying tables for some queries and use a
    `MERGE` table for others. You can even have many different `MERGE` tables that
    use overlapping sets of tables.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行更有效的搜索。如果你确切知道你要找的内容，你可以仅在底层表中搜索某些查询，并对其他查询使用`MERGE`表。你甚至可以有许多使用重叠表集的不同`MERGE`表。
- en: Perform more efficient repairs. It is easier to repair individual smaller tables
    that are mapped to a `MERGE` table than to repair a single large table.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行更有效的修复。修复映射到`MERGE`表的个别较小表比修复单个大表更容易。
- en: Instantly map many tables as one. A `MERGE` table need not maintain an index
    of its own because it uses the indexes of the individual tables. As a result,
    `MERGE` table collections are *very* fast to create or remap. (You must still
    specify the index definitions when you create a `MERGE` table, even though no
    indexes are created.)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瞬间将多个表映射为一个。`MERGE`表不需要维护自己的索引，因为它使用各个表的索引。因此，`MERGE`表集合创建或重新映射*非常*快速。（当创建`MERGE`表时，仍然必须指定索引定义，即使不创建索引。）
- en: If you have a set of tables from which you create a large table on demand, you
    can instead create a `MERGE` table from them on demand. This is much faster and
    saves a lot of disk space.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有一组表，可以根据需要创建一个大表，那么你可以根据需要从中创建一个`MERGE`表。这样做会快得多，并节省大量磁盘空间。
- en: Exceed the file size limit for the operating system. Each `MyISAM` table is
    bound by this limit, but a collection of `MyISAM` tables is not.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超出操作系统的文件大小限制。每个`MyISAM`表受此限制约束，但`MyISAM`表的集合不受限制。
- en: You can create an alias or synonym for a `MyISAM` table by defining a `MERGE`
    table that maps to that single table. There should be no really notable performance
    impact from doing this (only a couple of indirect calls and `memcpy()` calls for
    each read).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过定义一个映射到单个表的`MERGE`表来为`MyISAM`表创建别名或同义词。这样做几乎没有什么明显的性能影响（每次读取只有几个间接调用和`memcpy()`调用）。
- en: 'The disadvantages of `MERGE` tables are:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`MERGE`表的缺点包括：'
- en: You can use only identical `MyISAM` tables for a `MERGE` table.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你只能使用相同的`MyISAM`表来创建`MERGE`表。
- en: Some `MyISAM` features are unavailable in `MERGE` tables. For example, you cannot
    create `FULLTEXT` indexes on `MERGE` tables. (You can create `FULLTEXT` indexes
    on the underlying `MyISAM` tables, but you cannot search the `MERGE` table with
    a full-text search.)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MERGE`表中无法使用一些`MyISAM`功能。例如，你不能在`MERGE`表上创建`FULLTEXT`索引。（你可以在底层的`MyISAM`表上创建`FULLTEXT`索引，但不能使用全文搜索搜索`MERGE`表。）'
- en: If the `MERGE` table is nontemporary, all underlying `MyISAM` tables must be
    nontemporary. If the `MERGE` table is temporary, the `MyISAM` tables can be any
    mix of temporary and nontemporary.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`MERGE`表是非临时的，则所有底层的`MyISAM`表必须是非临时的。如果`MERGE`表是临时的，则`MyISAM`表可以是任意混合的临时和非临时。
- en: '`MERGE` tables use more file descriptors than `MyISAM` tables. If 10 clients
    are using a `MERGE` table that maps to 10 tables, the server uses (10 × 10) +
    10 file descriptors. (10 data file descriptors for each of the 10 clients, and
    10 index file descriptors shared among the clients.)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MERGE`表比`MyISAM`表使用更多的文件描述符。如果有10个客户端使用映射到10个表的`MERGE`表，则服务器使用（10 × 10）+ 10个文件描述符。（每个客户端的10个数据文件描述符，以及在客户端之间共享的10个索引文件描述符。）'
- en: Index reads are slower. When you read an index, the `MERGE` storage engine needs
    to issue a read on all underlying tables to check which one most closely matches
    a given index value. To read the next index value, the `MERGE` storage engine
    needs to search the read buffers to find the next value. Only when one index buffer
    is used up does the storage engine need to read the next index block. This makes
    `MERGE` indexes much slower on [`eq_ref`](explain-output.html#jointype_eq_ref)
    searches, but not much slower on [`ref`](explain-output.html#jointype_ref) searches.
    For more information about [`eq_ref`](explain-output.html#jointype_eq_ref) and
    [`ref`](explain-output.html#jointype_ref), see [Section 15.8.2, “EXPLAIN Statement”](explain.html
    "15.8.2 EXPLAIN Statement").
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引读取速度较慢。当你读取一个索引时，`MERGE` 存储引擎需要在所有底层表上发出读取操作，以检查哪个最接近给定索引值。要读取下一个索引值，`MERGE`
    存储引擎需要搜索读取缓冲区以找到下一个值。只有当一个索引缓冲区被用完时，存储引擎才需要读取下一个索引块。这使得 `MERGE` 索引在 [`eq_ref`](explain-output.html#jointype_eq_ref)
    搜索上要慢得多，但在 [`ref`](explain-output.html#jointype_ref) 搜索上并不慢。有关 [`eq_ref`](explain-output.html#jointype_eq_ref)
    和 [`ref`](explain-output.html#jointype_ref) 的更多信息，请参见 [第 15.8.2 节，“EXPLAIN 语句”](explain.html
    "15.8.2 EXPLAIN 语句")。
