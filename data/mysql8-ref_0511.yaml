- en: 10.1 Optimization Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.1 优化概述
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimize-overview.html](https://dev.mysql.com/doc/refman/8.0/en/optimize-overview.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimize-overview.html](https://dev.mysql.com/doc/refman/8.0/en/optimize-overview.html)
- en: Database performance depends on several factors at the database level, such
    as tables, queries, and configuration settings. These software constructs result
    in CPU and I/O operations at the hardware level, which you must minimize and make
    as efficient as possible. As you work on database performance, you start by learning
    the high-level rules and guidelines for the software side, and measuring performance
    using wall-clock time. As you become an expert, you learn more about what happens
    internally, and start measuring things such as CPU cycles and I/O operations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库性能取决于数据库级别的几个因素，例如表、查询和配置设置。这些软件构造在硬件级别导致 CPU 和 I/O 操作，您必须尽量减少并尽可能高效地执行。在处理数据库性能时，您首先学习软件方面的高级规则和指南，并使用挂钟时间来衡量性能。随着您成为专家，您将了解更多内部发生的事情，并开始测量诸如
    CPU 周期和 I/O 操作之类的内容。
- en: Typical users aim to get the best database performance out of their existing
    software and hardware configurations. Advanced users look for opportunities to
    improve the MySQL software itself, or develop their own storage engines and hardware
    appliances to expand the MySQL ecosystem.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 典型用户的目标是在现有软件和硬件配置中获得最佳的数据库性能。高级用户寻求改进MySQL软件本身的机会，或者开发自己的存储引擎和硬件设备，以扩展MySQL生态系统。
- en: '[Optimizing at the Database Level](optimize-overview.html#optimize-database-level
    "Optimizing at the Database Level")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在数据库级别进行优化](optimize-overview.html#optimize-database-level "在数据库级别进行优化")'
- en: '[Optimizing at the Hardware Level](optimize-overview.html#optimize-hardware-level
    "Optimizing at the Hardware Level")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在硬件级别进行优化](optimize-overview.html#optimize-hardware-level "在硬件级别进行优化")'
- en: '[Balancing Portability and Performance](optimize-overview.html#optimize-portability-performance
    "Balancing Portability and Performance")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[平衡可移植性和性能](optimize-overview.html#optimize-portability-performance "平衡可移植性和性能")'
- en: Optimizing at the Database Level
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在数据库级别进行优化
- en: 'The most important factor in making a database application fast is its basic
    design:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使数据库应用程序快速的最重要因素是其基本设计：
- en: Are the tables structured properly? In particular, do the columns have the right
    data types, and does each table have the appropriate columns for the type of work?
    For example, applications that perform frequent updates often have many tables
    with few columns, while applications that analyze large amounts of data often
    have few tables with many columns.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表是否结构良好？特别是，列是否具有正确的数据类型，每个表是否具有适合工作类型的适当列？例如，频繁更新的应用程序通常有许多列较少的表，而分析大量数据的应用程序通常有少量列较多的表。
- en: Are the right [indexes](optimization-indexes.html "10.3 Optimization and Indexes")
    in place to make queries efficient?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有正确的[索引](optimization-indexes.html "10.3 优化和索引")以使查询高效？
- en: Are you using the appropriate storage engine for each table, and taking advantage
    of the strengths and features of each storage engine you use? In particular, the
    choice of a transactional storage engine such as `[InnoDB](optimizing-innodb.html
    "10.5 Optimizing for InnoDB Tables")` or a nontransactional one such as `[MyISAM](optimizing-myisam.html
    "10.6 Optimizing for MyISAM Tables")` can be very important for performance and
    scalability.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否为每个表使用适当的存储引擎，并充分利用您使用的每个存储引擎的优势和特性？特别是，选择事务性存储引擎如 `[InnoDB](optimizing-innodb.html
    "10.5 优化InnoDB表")` 或非事务性存储引擎如 `[MyISAM](optimizing-myisam.html "10.6 优化MyISAM表")`
    对性能和可伸缩性非常重要。
- en: Note
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '`InnoDB` is the default storage engine for new tables. In practice, the advanced
    `InnoDB` performance features mean that `InnoDB` tables often outperform the simpler
    `MyISAM` tables, especially for a busy database.'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InnoDB` 是新表的默认存储引擎。实际上，高级的 `InnoDB` 性能特性意味着 `InnoDB` 表通常比简单的 `MyISAM` 表性能更好，特别是对于繁忙的数据库。'
- en: Does each table use an appropriate row format? This choice also depends on the
    storage engine used for the table. In particular, compressed tables use less disk
    space and so require less disk I/O to read and write the data. Compression is
    available for all kinds of workloads with `InnoDB` tables, and for read-only `MyISAM`
    tables.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个表是否使用适当的行格式？此选择还取决于表使用的存储引擎。特别是，压缩表使用更少的磁盘空间，因此需要更少的磁盘 I/O 来读取和写入数据。压缩适用于所有类型的工作负载，包括
    `InnoDB` 表和只读 `MyISAM` 表。
- en: Does the application use an appropriate [locking strategy](locking-issues.html
    "10.11 Optimizing Locking Operations")? For example, by allowing shared access
    when possible so that database operations can run concurrently, and requesting
    exclusive access when appropriate so that critical operations get top priority.
    Again, the choice of storage engine is significant. The `InnoDB` storage engine
    handles most locking issues without involvement from you, allowing for better
    concurrency in the database and reducing the amount of experimentation and tuning
    for your code.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序是否使用适当的[锁定策略](locking-issues.html "10.11 优化锁定操作")？例如，尽可能允许共享访问，以便数据库操作可以并发运行，并在适当时请求独占访问，以便关键操作获得最高优先级。再次强调，存储引擎的选择非常重要。`InnoDB`存储引擎处理大部分锁定问题而无需你的参与，从而实现数据库更好的并发性，并减少对代码的实验和调整量。
- en: Are all [memory areas used for caching](buffering-caching.html "10.10 Buffering
    and Caching") sized correctly? That is, large enough to hold frequently accessed
    data, but not so large that they overload physical memory and cause paging. The
    main memory areas to configure are the `InnoDB` buffer pool and the `MyISAM` key
    cache.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有用于缓存的[内存区域](buffering-caching.html "10.10 缓冲和缓存")大小是否正确？也就是说，足够大以容纳频繁访问的数据，但不要太大以超载物理内存并导致分页。要配置的主要内存区域是`InnoDB`缓冲池和`MyISAM`关键缓存。
- en: Optimizing at the Hardware Level
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在硬件级别进行优化
- en: 'Any database application eventually hits hardware limits as the database becomes
    more and more busy. A DBA must evaluate whether it is possible to tune the application
    or reconfigure the server to avoid these [bottlenecks](glossary.html#glos_bottleneck
    "bottleneck"), or whether more hardware resources are required. System bottlenecks
    typically arise from these sources:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 任何数据库应用程序最终都会受到硬件限制的影响，随着数据库变得越来越繁忙。数据库管理员必须评估是否可能调整应用程序或重新配置服务器以避免这些[瓶颈](glossary.html#glos_bottleneck
    "瓶颈")，或者是否需要更多的硬件资源。系统瓶颈通常来自以下来源：
- en: Disk seeks. It takes time for the disk to find a piece of data. With modern
    disks, the mean time for this is usually lower than 10ms, so we can in theory
    do about 100 seeks a second. This time improves slowly with new disks and is very
    hard to optimize for a single table. The way to optimize seek time is to distribute
    the data onto more than one disk.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘寻道。磁盘找到一段数据需要时间。现代磁盘，这个平均时间通常低于10ms，因此理论上我们可以每秒做大约100次寻道。这个时间随着新磁盘的推出而缓慢改善，对于单个表来说很难优化。优化寻道时间的方法是将数据分布到多个磁盘上。
- en: Disk reading and writing. When the disk is at the correct position, we need
    to read or write the data. With modern disks, one disk delivers at least 10–20MB/s
    throughput. This is easier to optimize than seeks because you can read in parallel
    from multiple disks.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘读写。当磁盘处于正确位置时，我们需要读取或写入数据。现代磁盘，一个磁盘至少提供10-20MB/s的吞吐量。这比寻道更容易优化，因为你可以同时从多个磁盘并行读取。
- en: CPU cycles. When the data is in main memory, we must process it to get our result.
    Having large tables compared to the amount of memory is the most common limiting
    factor. But with small tables, speed is usually not the problem.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU周期。当数据在主内存中时，我们必须处理它以获得结果。与内存量相比，拥有大表是最常见的限制因素。但对于小表，速度通常不是问题。
- en: Memory bandwidth. When the CPU needs more data than can fit in the CPU cache,
    main memory bandwidth becomes a bottleneck. This is an uncommon bottleneck for
    most systems, but one to be aware of.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存带宽。当CPU需要的数据超过CPU缓存容量时，主内存带宽成为瓶颈。对于大多数系统来说，这是一个不常见的瓶颈，但需要注意。
- en: Balancing Portability and Performance
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平衡便携性和性能
- en: To use performance-oriented SQL extensions in a portable MySQL program, you
    can wrap MySQL-specific keywords in a statement within `/*! */` comment delimiters.
    Other SQL servers ignore the commented keywords. For information about writing
    comments, see [Section 11.7, “Comments”](comments.html "11.7 Comments").
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在便携式MySQL程序中使用面向性能的SQL扩展，可以将MySQL特定关键字包装在`/*! */`注释分隔符内的语句中。其他SQL服务器会忽略注释的关键字。有关编写注释的信息，请参阅[第11.7节“注释”](comments.html
    "11.7 注释")。
