- en: 15.3.8 XA Transactions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.3.8 XA事务
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/xa.html](https://dev.mysql.com/doc/refman/8.0/en/xa.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/xa.html](https://dev.mysql.com/doc/refman/8.0/en/xa.html)
- en: '[15.3.8.1 XA Transaction SQL Statements](xa-statements.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.3.8.1 XA事务SQL语句](xa-statements.html)'
- en: '[15.3.8.2 XA Transaction States](xa-states.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.3.8.2 XA事务状态](xa-states.html)'
- en: '[15.3.8.3 Restrictions on XA Transactions](xa-restrictions.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.3.8.3 XA事务的限制](xa-restrictions.html)'
- en: 'Support for [XA](glossary.html#glos_xa "XA") transactions is available for
    the [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    storage engine. The MySQL XA implementation is based on the X/Open CAE document
    *Distributed Transaction Processing: The XA Specification*. This document is published
    by The Open Group and available at [http://www.opengroup.org/public/pubs/catalog/c193.htm](http://www.opengroup.org/public/pubs/catalog/c193.htm).
    Limitations of the current XA implementation are described in [Section 15.3.8.3,
    “Restrictions on XA Transactions”](xa-restrictions.html "15.3.8.3 Restrictions
    on XA Transactions").'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InnoDB`](innodb-storage-engine.html "第17章 InnoDB存储引擎")存储引擎支持[XA](glossary.html#glos_xa
    "XA")事务。MySQL的XA实现基于X/Open CAE文档*Distributed Transaction Processing: The XA Specification*。该文档由The
    Open Group发布，可在[http://www.opengroup.org/public/pubs/catalog/c193.htm](http://www.opengroup.org/public/pubs/catalog/c193.htm)获取。当前XA实现的限制在[第15.3.8.3节“XA事务的限制”](xa-restrictions.html
    "15.3.8.3 XA事务的限制")中描述。'
- en: On the client side, there are no special requirements. The XA interface to a
    MySQL server consists of SQL statements that begin with the `XA` keyword. MySQL
    client programs must be able to send SQL statements and to understand the semantics
    of the XA statement interface. They do not need be linked against a recent client
    library. Older client libraries also work.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端方面，没有特殊要求。MySQL服务器的XA接口由以`XA`关键字开头的SQL语句组成。MySQL客户端程序必须能够发送SQL语句并理解XA语句接口的语义。它们不需要链接到最新的客户端库。旧的客户端库也可以工作。
- en: Among the MySQL Connectors, MySQL Connector/J 5.0.0 and higher supports XA directly,
    by means of a class interface that handles the XA SQL statement interface for
    you.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL Connectors中，MySQL Connector/J 5.0.0及更高版本直接支持XA，通过一个处理XA SQL语句接口的类接口。
- en: XA supports distributed transactions, that is, the ability to permit multiple
    separate transactional resources to participate in a global transaction. Transactional
    resources often are RDBMSs but may be other kinds of resources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: XA支持分布式事务，即允许多个独立的事务资源参与全局事务。事务资源通常是关系型数据库，但也可能是其他类型的资源。
- en: A global transaction involves several actions that are transactional in themselves,
    but that all must either complete successfully as a group, or all be rolled back
    as a group. In essence, this extends ACID properties “up a level” so that multiple
    ACID transactions can be executed in concert as components of a global operation
    that also has ACID properties. (As with nondistributed transactions, [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)
    may be preferred if your applications are sensitive to read phenomena. [`REPEATABLE
    READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read) may
    not be sufficient for distributed transactions.)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个全局事务涉及几个本身是事务性的操作，但所有这些操作必须作为一个组要么全部成功完成，要么全部回滚。实质上，这将ACID属性“提升”到一个更高的级别，以便多个ACID事务可以作为全局操作的组成部分一起执行，并且也具有ACID属性。（与非分布式事务一样，如果您的应用程序对读现象敏感，可能更喜欢[`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)。[`REPEATABLE
    READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read)可能对分布式事务不够。）
- en: 'Some examples of distributed transactions:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一些分布式事务的例子：
- en: An application may act as an integration tool that combines a messaging service
    with an RDBMS. The application makes sure that transactions dealing with message
    sending, retrieval, and processing that also involve a transactional database
    all happen in a global transaction. You can think of this as “transactional email.”
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个应用程序可以充当一个集成工具，将消息服务与关系型数据库结合在一起。该应用程序确保处理涉及消息发送、检索和处理的事务，同时涉及事务性数据库，都发生在一个全局事务中。你可以将其视为“事务性电子邮件”。
- en: An application performs actions that involve different database servers, such
    as a MySQL server and an Oracle server (or multiple MySQL servers), where actions
    that involve multiple servers must happen as part of a global transaction, rather
    than as separate transactions local to each server.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个应用程序执行涉及不同数据库服务器的操作，例如 MySQL 服务器和 Oracle 服务器（或多个 MySQL 服务器），其中涉及多个服务器的操作必须作为全局事务的一部分进行，而不是作为每个服务器本地的单独事务。
- en: A bank keeps account information in an RDBMS and distributes and receives money
    through automated teller machines (ATMs). It is necessary to ensure that ATM actions
    are correctly reflected in the accounts, but this cannot be done with the RDBMS
    alone. A global transaction manager integrates the ATM and database resources
    to ensure overall consistency of financial transactions.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一家银行在关系数据库管理系统（RDBMS）中保留账户信息，并通过自动取款机（ATM）分发和接收资金。必须确保 ATM 操作在账户中正确反映，但这不能仅通过
    RDBMS 完成。全局事务管理器整合 ATM 和数据库资源，以确保金融交易的整体一致性。
- en: 'Applications that use global transactions involve one or more Resource Managers
    and a Transaction Manager:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用全局事务的应用程序涉及一个或多个资源管理器和一个事务管理器：
- en: A Resource Manager (RM) provides access to transactional resources. A database
    server is one kind of resource manager. It must be possible to either commit or
    roll back transactions managed by the RM.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源管理器（RM）提供对事务资源的访问。数据库服务器是资源管理器的一种。必须能够提交或回滚由 RM 管理的事务。
- en: A Transaction Manager (TM) coordinates the transactions that are part of a global
    transaction. It communicates with the RMs that handle each of these transactions.
    The individual transactions within a global transaction are “branches” of the
    global transaction. Global transactions and their branches are identified by a
    naming scheme described later.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务管理器（TM）协调作为全局事务一部分的事务。它与处理每个事务的 RM 进行通信。全局事务及其分支由稍后描述的命名方案标识。
- en: The MySQL implementation of XA enables a MySQL server to act as a Resource Manager
    that handles XA transactions within a global transaction. A client program that
    connects to the MySQL server acts as the Transaction Manager.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 对 XA 的实现使 MySQL 服务器能够充当处理全局事务中的 XA 事务的资源管理器。连接到 MySQL 服务器的客户端程序充当事务管理器。
- en: To carry out a global transaction, it is necessary to know which components
    are involved, and bring each component to a point when it can be committed or
    rolled back. Depending on what each component reports about its ability to succeed,
    they must all commit or roll back as an atomic group. That is, either all components
    must commit, or all components must roll back. To manage a global transaction,
    it is necessary to take into account that any component or the connecting network
    might fail.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行全局事务，必须知道涉及哪些组件，并使每个组件达到可以提交或回滚的状态。根据每个组件报告的关于其成功能力的情况，它们必须作为一个原子组提交或回滚。也就是说，要么所有组件都必须提交，要么所有组件都必须回滚。要管理全局事务，必须考虑到任何组件或连接网络可能会失败。
- en: The process for executing a global transaction uses two-phase commit (2PC).
    This takes place after the actions performed by the branches of the global transaction
    have been executed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 执行全局事务的过程使用两阶段提交（2PC）。这发生在执行全局事务的分支执行的操作之后。
- en: In the first phase, all branches are prepared. That is, they are told by the
    TM to get ready to commit. Typically, this means each RM that manages a branch
    records the actions for the branch in stable storage. The branches indicate whether
    they are able to do this, and these results are used for the second phase.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一阶段，所有分支都被准备好了。也就是说，它们被 TM 告知准备好提交。通常，这意味着每个管理分支的 RM 在稳定存储中记录了分支的操作。这些分支指示它们是否能够这样做，这些结果将用于第二阶段。
- en: In the second phase, the TM tells the RMs whether to commit or roll back. If
    all branches indicated when they were prepared that they were able to commit,
    all branches are told to commit. If any branch indicated when it was prepared
    that it was not able to commit, all branches are told to roll back.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二阶段，TM 告诉 RM 是否提交或回滚。如果所有分支在准备时指示它们能够提交，那么所有分支都被告知提交。如果任何分支在准备时指示它不能提交，那么所有分支都被告知回滚。
- en: In some cases, a global transaction might use one-phase commit (1PC). For example,
    when a Transaction Manager finds that a global transaction consists of only one
    transactional resource (that is, a single branch), that resource can be told to
    prepare and commit at the same time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，全局事务可能会使用一阶段提交（1PC）。例如，当事务管理器发现全局事务仅包含一个事务资源（即单个分支）时，可以要求该资源同时准备和提交。
