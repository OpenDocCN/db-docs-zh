- en: 17.21.5 InnoDB Error Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.21.5 InnoDB 错误处理
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-error-handling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-error-handling.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-error-handling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-error-handling.html)
- en: The following items describe how `InnoDB` performs error handling. `InnoDB`
    sometimes rolls back only the statement that failed, other times it rolls back
    the entire transaction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下项目描述了`InnoDB`如何执行错误处理。`InnoDB`有时只回滚失败的语句，有时会回滚整个事务。
- en: If you run out of file space in a [tablespace](glossary.html#glos_tablespace
    "tablespace"), a MySQL `Table is full` error occurs and `InnoDB` rolls back the
    SQL statement.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在[表空间](glossary.html#glos_tablespace "tablespace")中耗尽文件空间，则会发生MySQL `Table
    is full`错误，并且`InnoDB`会回滚SQL语句。
- en: A transaction [deadlock](glossary.html#glos_deadlock "deadlock") causes `InnoDB`
    to [roll back](glossary.html#glos_rollback "rollback") the entire [transaction](glossary.html#glos_transaction
    "transaction"). Retry the entire transaction when this happens.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务[死锁](glossary.html#glos_deadlock "deadlock")会导致`InnoDB`回滚整个[事务](glossary.html#glos_transaction
    "transaction")。发生这种情况时，请重试整个事务。
- en: A lock wait timeout causes `InnoDB` to roll back the current statement (the
    statement that was waiting for the lock and encountered the timeout). To have
    the entire transaction roll back, start the server with [`--innodb-rollback-on-timeout`](innodb-parameters.html#sysvar_innodb_rollback_on_timeout)
    enabled. Retry the statement if using the default behavior, or the entire transaction
    if [`--innodb-rollback-on-timeout`](innodb-parameters.html#sysvar_innodb_rollback_on_timeout)
    is enabled.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 锁等待超时会导致`InnoDB`回滚当前语句（等待锁并遇到超时的语句）。要使整个事务回滚，请启动服务器时启用[`--innodb-rollback-on-timeout`](innodb-parameters.html#sysvar_innodb_rollback_on_timeout)。如果使用默认行为，请重试语句，或者如果启用了[`--innodb-rollback-on-timeout`](innodb-parameters.html#sysvar_innodb_rollback_on_timeout)，则重试整个事务。
- en: Both deadlocks and lock wait timeouts are normal on busy servers and it is necessary
    for applications to be aware that they may happen and handle them by retrying.
    You can make them less likely by doing as little work as possible between the
    first change to data during a transaction and the commit, so the locks are held
    for the shortest possible time and for the smallest possible number of rows. Sometimes
    splitting work between different transactions may be practical and helpful.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在繁忙服务器上，死锁和锁等待超时是正常的，应用程序需要意识到它们可能发生，并通过重试来处理。通过在事务期间对数据进行第一次更改和提交之间尽可能少地进行工作，可以减少发生这些情况的可能性，从而锁定的时间最短，影响的行数最少。有时将工作分割到不同的事务中可能是实用和有帮助的。
- en: A duplicate-key error rolls back the SQL statement, if you have not specified
    the `IGNORE` option in your statement.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果发生重复键错误，则回滚SQL语句，如果在语句中未指定`IGNORE`选项。
- en: A `row too long error` rolls back the SQL statement.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`行过长错误`会回滚SQL语句。'
- en: Other errors are mostly detected by the MySQL layer of code (above the `InnoDB`
    storage engine level), and they roll back the corresponding SQL statement. Locks
    are not released in a rollback of a single SQL statement.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他错误大多由MySQL代码层（在`InnoDB`存储引擎层之上）检测到，并回滚相应的SQL语句。在回滚单个SQL语句时不会释放锁。
- en: During implicit rollbacks, as well as during the execution of an explicit [`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements") SQL statement, [`SHOW
    PROCESSLIST`](show-processlist.html "15.7.7.29 SHOW PROCESSLIST Statement") displays
    `Rolling back` in the `State` column for the relevant connection.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在隐式回滚期间，以及在执行显式[`ROLLBACK`](commit.html "15.3.1 START TRANSACTION, COMMIT, and
    ROLLBACK Statements") SQL语句期间，[`SHOW PROCESSLIST`](show-processlist.html "15.7.7.29 SHOW
    PROCESSLIST Statement")在相关连接的`State`列中显示`Rolling back`。
