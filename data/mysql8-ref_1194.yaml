- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-detection.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-detection.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-detection.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlock-detection.html)
- en: 17.7.5.2 Deadlock Detection
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.7.5.2 死锁检测
- en: When [deadlock detection](glossary.html#glos_deadlock_detection "deadlock detection")
    is enabled (the default), `InnoDB` automatically detects transaction [deadlocks](glossary.html#glos_deadlock
    "deadlock") and rolls back a transaction or transactions to break the deadlock.
    `InnoDB` tries to pick small transactions to roll back, where the size of a transaction
    is determined by the number of rows inserted, updated, or deleted.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用[死锁检测](glossary.html#glos_deadlock_detection "死锁检测")（默认情况下），`InnoDB`会自动检测事务[死锁](glossary.html#glos_deadlock
    "死锁")并回滚一个或多个事务以打破死锁。`InnoDB`尝试选择要回滚的小事务，事务的大小由插入、更新或删除的行数确定。
- en: '`InnoDB` is aware of table locks if `innodb_table_locks = 1` (the default)
    and [`autocommit = 0`](server-system-variables.html#sysvar_autocommit), and the
    MySQL layer above it knows about row-level locks. Otherwise, `InnoDB` cannot detect
    deadlocks where a table lock set by a MySQL [`LOCK TABLES`](lock-tables.html "15.3.6 LOCK
    TABLES and UNLOCK TABLES Statements") statement or a lock set by a storage engine
    other than `InnoDB` is involved. Resolve these situations by setting the value
    of the [`innodb_lock_wait_timeout`](innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
    system variable.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当`innodb_table_locks = 1`（默认）且[`autocommit = 0`](server-system-variables.html#sysvar_autocommit)时，`InnoDB`会意识到表锁，并且MySQL层知道行级锁。否则，`InnoDB`无法检测到由MySQL
    [`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")语句设置的表锁或由`InnoDB`之外的存储引擎设置的锁所涉及的死锁。通过设置[`innodb_lock_wait_timeout`](innodb-parameters.html#sysvar_innodb_lock_wait_timeout)系统变量的值来解决这些情况。
- en: If the `LATEST DETECTED DEADLOCK` section of `InnoDB` Monitor output includes
    a message stating TOO DEEP OR LONG SEARCH IN THE LOCK TABLE WAITS-FOR GRAPH, WE
    WILL ROLL BACK FOLLOWING TRANSACTION, this indicates that the number of transactions
    on the wait-for list has reached a limit of 200\. A wait-for list that exceeds
    200 transactions is treated as a deadlock and the transaction attempting to check
    the wait-for list is rolled back. The same error may also occur if the locking
    thread must look at more than 1,000,000 locks owned by transactions on the wait-for
    list.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`InnoDB`监视器输出的`LATEST DETECTED DEADLOCK`部分包含一条消息，指出在锁表等待图中搜索过深或过长，我们将回滚以下事务，则表示等待列表上的事务数量已达到200的限制。超过200个事务的等待列表被视为死锁，并且试图检查等待列表的事务将被回滚。如果锁定线程必须查看等待列表上的超过1,000,000个事务拥有的锁，则也可能发生相同的错误。
- en: For techniques to organize database operations to avoid deadlocks, see [Section 17.7.5,
    “Deadlocks in InnoDB”](innodb-deadlocks.html "17.7.5 Deadlocks in InnoDB").
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有关组织数据库操作以避免死锁的技术，请参阅[第17.7.5节，“InnoDB中的死锁”](innodb-deadlocks.html "17.7.5 InnoDB中的死锁")。
- en: Disabling Deadlock Detection
  id: totrans-6
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 禁用死锁检测
- en: On high concurrency systems, deadlock detection can cause a slowdown when numerous
    threads wait for the same lock. At times, it may be more efficient to disable
    deadlock detection and rely on the [`innodb_lock_wait_timeout`](innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
    setting for transaction rollback when a deadlock occurs. Deadlock detection can
    be disabled using the [`innodb_deadlock_detect`](innodb-parameters.html#sysvar_innodb_deadlock_detect)
    variable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在高并发系统中，死锁检测可能会导致大量线程等待同一锁时出现减速。有时，禁用死锁检测并依赖于[`innodb_lock_wait_timeout`](innodb-parameters.html#sysvar_innodb_lock_wait_timeout)设置在死锁发生时进行事务回滚可能更有效。可以使用[`innodb_deadlock_detect`](innodb-parameters.html#sysvar_innodb_deadlock_detect)变量禁用死锁检测。
