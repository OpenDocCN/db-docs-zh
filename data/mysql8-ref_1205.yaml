- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool-flushing.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool-flushing.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool-flushing.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool-flushing.html)
- en: 17.8.3.5 Configuring Buffer Pool Flushing
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.8.3.5 配置缓冲池刷新
- en: '`InnoDB` performs certain tasks in the background, including flushing of dirty
    pages from the buffer pool. Dirty pages are those that have been modified but
    are not yet written to the data files on disk.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`在后台执行某些任务，包括从缓冲池中刷新脏页。脏页是已经被修改但尚未写入磁盘上的数据文件的页面。'
- en: In MySQL 8.0, buffer pool flushing is performed by page cleaner threads. The
    number of page cleaner threads is controlled by the [`innodb_page_cleaners`](innodb-parameters.html#sysvar_innodb_page_cleaners)
    variable, which has a default value of 4\. However, if the number of page cleaner
    threads exceeds the number of buffer pool instances, [`innodb_page_cleaners`](innodb-parameters.html#sysvar_innodb_page_cleaners)
    is automatically set to the same value as [`innodb_buffer_pool_instances`](innodb-parameters.html#sysvar_innodb_buffer_pool_instances).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，缓冲池刷新由页面清理线程执行。页面清理线程的数量由[`innodb_page_cleaners`](innodb-parameters.html#sysvar_innodb_page_cleaners)变量控制，默认值为4。但是，如果页面清理线程的数量超过缓冲池实例的数量，[`innodb_page_cleaners`](innodb-parameters.html#sysvar_innodb_page_cleaners)会自动设置为与[`innodb_buffer_pool_instances`](innodb-parameters.html#sysvar_innodb_buffer_pool_instances)相同的值。
- en: Buffer pool flushing is initiated when the percentage of dirty pages reaches
    the low water mark value defined by the [`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)
    variable. The default low water mark is 10% of buffer pool pages. A [`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)
    value of 0 disables this early flushing behaviour.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当脏页的百分比达到由[`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)变量定义的低水位值时，会启动缓冲池刷新。默认的低水位标记是缓冲池页面的10%。[`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)值为0会禁用这种早期刷新行为。
- en: The purpose of the [`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)
    threshold is to control the percentage dirty pages in the buffer pool and to prevent
    the amount of dirty pages from reaching the threshold defined by the [`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)
    variable, which has a default value of 90. `InnoDB` aggressively flushes buffer
    pool pages if the percentage of dirty pages in the buffer pool reaches the [`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)
    threshold.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)阈值的目的是控制缓冲池中的脏页百分比，并防止脏页数量达到由[`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)变量定义的阈值，其默认值为90。如果缓冲池中脏页的百分比达到[`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)阈值，`InnoDB`会积极刷新缓冲池页面。'
- en: When configuring [`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm),
    the value should always be lower than the [`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)
    value.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置[`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)时，该值应始终低于[`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)值。
- en: 'Additional variables permit fine-tuning of buffer pool flushing behavior:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 其他变量允许对缓冲池刷新行为进行微调：
- en: The [`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors)
    variable defines whether flushing a page from the buffer pool also flushes other
    dirty pages in the same extent.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors)变量定义了是否刷新缓冲池中的页面也会刷新同一范围内的其他脏页。'
- en: The default setting of 0 disables [`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors).
    Dirty pages in the same extent are not flushed. This setting is recommended for
    non-rotational storage (SSD) devices where seek time is not a significant factor.
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认设置为0会禁用[`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors)。同一范围内的脏页不会被刷新。这个设置适用于非旋转存储（SSD）设备，其中寻道时间不是一个重要因素。
- en: A setting of 1 flushes contiguous dirty pages in the same extent.
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置为1会刷新同一范围内的连续脏页。
- en: A setting of 2 flushes dirty pages in the same extent.
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置为2会刷新同一范围内的脏页。
- en: When table data is stored on a traditional [HDD](glossary.html#glos_hdd "HDD")
    storage device, flushing neighbor pages in one operation reduces I/O overhead
    (primarily for disk seek operations) compared to flushing individual pages at
    different times. For table data stored on [SSD](glossary.html#glos_ssd "SSD"),
    seek time is not a significant factor and you can disable this setting to spread
    out write operations.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当表数据存储在传统的[HDD](glossary.html#glos_hdd "HDD")存储设备上时，一次刷新相邻页面可以减少I/O开销（主要是磁盘寻道操作）相对于在不同时间刷新单个页面。对于存储在[SSD](glossary.html#glos_ssd
    "SSD")上的表数据，寻道时间不是一个重要因素，您可以禁用此设置以分散写操作。
- en: The [`innodb_lru_scan_depth`](innodb-parameters.html#sysvar_innodb_lru_scan_depth)
    variable specifies, per buffer pool instance, how far down the buffer pool LRU
    list the page cleaner thread scans looking for dirty pages to flush. This is a
    background operation performed by a page cleaner thread once per second.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_lru_scan_depth`](innodb-parameters.html#sysvar_innodb_lru_scan_depth)变量指定了每个缓冲池实例中，页面清理线程扫描缓冲池LRU列表以查找要刷新的脏页的深度。这是一个后台操作，由页面清理线程每秒执行一次。'
- en: A setting smaller than the default is generally suitable for most workloads.
    A value that is significantly higher than necessary may impact performance. Only
    consider increasing the value if you have spare I/O capacity under a typical workload.
    Conversely, if a write-intensive workload saturates your I/O capacity, decrease
    the value, especially in the case of a large buffer pool.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一般来说，比默认值小的设置对大多数工作负载都是合适的。如果值显著高于必要值，可能会影响性能。只有在典型工作负载下有多余的I/O容量时才考虑增加该值。相反，如果写入密集型工作负载使您的I/O容量饱和，减少该值，特别是在大缓冲池的情况下。
- en: When tuning [`innodb_lru_scan_depth`](innodb-parameters.html#sysvar_innodb_lru_scan_depth),
    start with a low value and configure the setting upward with the goal of rarely
    seeing zero free pages. Also, consider adjusting [`innodb_lru_scan_depth`](innodb-parameters.html#sysvar_innodb_lru_scan_depth)
    when changing the number of buffer pool instances, since [`innodb_lru_scan_depth`](innodb-parameters.html#sysvar_innodb_lru_scan_depth)
    * [`innodb_buffer_pool_instances`](innodb-parameters.html#sysvar_innodb_buffer_pool_instances)
    defines the amount of work performed by the page cleaner thread each second.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调整[`innodb_lru_scan_depth`](innodb-parameters.html#sysvar_innodb_lru_scan_depth)时，从一个较低值开始，并将设置向上配置，目的是很少看到零空闲页面。此外，在更改缓冲池实例数量时，考虑调整[`innodb_lru_scan_depth`](innodb-parameters.html#sysvar_innodb_lru_scan_depth)，因为[`innodb_lru_scan_depth`](innodb-parameters.html#sysvar_innodb_lru_scan_depth)
    * [`innodb_buffer_pool_instances`](innodb-parameters.html#sysvar_innodb_buffer_pool_instances)定义了每秒页清理线程执行的工作量。
- en: The [`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors)
    and [`innodb_lru_scan_depth`](innodb-parameters.html#sysvar_innodb_lru_scan_depth)
    variables are primarily intended for write-intensive workloads. With heavy DML
    activity, flushing can fall behind if it is not aggressive enough, or disk writes
    can saturate I/O capacity if flushing is too aggressive. The ideal settings depend
    on your workload, data access patterns, and storage configuration (for example,
    whether data is stored on HDD or SSD devices).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_flush_neighbors`](innodb-parameters.html#sysvar_innodb_flush_neighbors)和[`innodb_lru_scan_depth`](innodb-parameters.html#sysvar_innodb_lru_scan_depth)变量主要用于写入密集型工作负载。在大量DML活动中，如果刷新不够积极，刷新可能会滞后，或者如果刷新过于积极，磁盘写入可能会饱和I/O容量。理想的设置取决于您的工作负载、数据访问模式和存储配置（例如，数据存储在HDD还是SSD设备上）。'
- en: Adaptive Flushing
  id: totrans-17
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 自适应刷新
- en: '`InnoDB` uses an adaptive flushing algorithm to dynamically adjust the rate
    of flushing based on the speed of redo log generation and the current rate of
    flushing. The intent is to smooth overall performance by ensuring that flushing
    activity keeps pace with the current workload. Automatically adjusting the flushing
    rate helps avoid sudden dips in throughput that can occur when bursts of I/O activity
    due to buffer pool flushing affects the I/O capacity available for ordinary read
    and write activity.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`使用自适应刷新算法动态调整刷新速率，根据重做日志生成的速度和当前刷新速率。其目的是通过确保刷新活动跟上当前工作负载的步伐来平滑整体性能。自动调整刷新速率有助于避免由于缓冲池刷新导致的I/O活动突然下降，从而影响了用于普通读写活动的I/O容量。'
- en: Sharp checkpoints, which are typically associated with write-intensive workloads
    that generate a lot of redo entries, can cause a sudden change in throughput,
    for example. A sharp checkpoint occurs when `InnoDB` wants to reuse a portion
    of a log file. Before doing so, all dirty pages with redo entries in that portion
    of the log file must be flushed. If log files become full, a sharp checkpoint
    occurs, causing a temporary reduction in throughput. This scenario can occur even
    if [`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)
    threshold is not reached.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尖锐的检查点通常与产生大量重做条目的写入密集型工作负载相关联，例如可能导致吞吐量突然变化。尖锐的检查点发生在`InnoDB`想要重用日志文件的一部分时。在这样做之前，必须刷新该日志文件部分中具有重做条目的所有脏页。如果日志文件变满，将发生尖锐的检查点，导致暂时的吞吐量降低。即使未达到[`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)阈值，也可能发生这种情况。
- en: The adaptive flushing algorithm helps avoid such scenarios by tracking the number
    of dirty pages in the buffer pool and the rate at which redo log records are being
    generated. Based on this information, it decides how many dirty pages to flush
    from the buffer pool each second, which permits it to manage sudden changes in
    workload.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 自适应刷新算法通过跟踪缓冲池中脏页的数量以及重做日志记录生成的速率来避免这种情况。根据这些信息，它决定每秒从缓冲池中刷新多少脏页，从而使其能够管理工作负载的突然变化。
- en: The [`innodb_adaptive_flushing_lwm`](innodb-parameters.html#sysvar_innodb_adaptive_flushing_lwm)
    variable defines a low water mark for redo log capacity. When that threshold is
    crossed, adaptive flushing is enabled, even if the [`innodb_adaptive_flushing`](innodb-parameters.html#sysvar_innodb_adaptive_flushing)
    variable is disabled.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_adaptive_flushing_lwm`](innodb-parameters.html#sysvar_innodb_adaptive_flushing_lwm)变量定义了重做日志容量的低水位标记。当超过该阈值时，即使[`innodb_adaptive_flushing`](innodb-parameters.html#sysvar_innodb_adaptive_flushing)变量被禁用，自适应刷新也会被启用。'
- en: Internal benchmarking has shown that the algorithm not only maintains throughput
    over time, but can also improve overall throughput significantly. However, adaptive
    flushing can affect the I/O pattern of a workload significantly and may not be
    appropriate in all cases. It gives the most benefit when the redo log is in danger
    of filling up. If adaptive flushing is not appropriate to the characteristics
    of your workload, you can disable it. Adaptive flushing controlled by the [`innodb_adaptive_flushing`](innodb-parameters.html#sysvar_innodb_adaptive_flushing)
    variable, which is enabled by default.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 内部基准测试显示，该算法不仅可以随时间保持吞吐量，还可以显著提高总体吞吐量。然而，自适应刷新可能会显著影响工作负载的I/O模式，并且在所有情况下可能并不适用。当重做日志面临填满的危险时，它会带来最大的好处。如果自适应刷新不适合您的工作负载特征，您可以禁用它。自适应刷新由[`innodb_adaptive_flushing`](innodb-parameters.html#sysvar_innodb_adaptive_flushing)变量控制，默认情况下启用。
- en: '[`innodb_flushing_avg_loops`](innodb-parameters.html#sysvar_innodb_flushing_avg_loops)
    defines the number of iterations that `InnoDB` keeps the previously calculated
    snapshot of the flushing state, controlling how quickly adaptive flushing responds
    to foreground workload changes. A high [`innodb_flushing_avg_loops`](innodb-parameters.html#sysvar_innodb_flushing_avg_loops)
    value means that `InnoDB` keeps the previously calculated snapshot longer, so
    adaptive flushing responds more slowly. When setting a high value it is important
    to ensure that redo log utilization does not reach 75% (the hardcoded limit at
    which asynchronous flushing starts), and that the [`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)
    threshold keeps the number of dirty pages to a level that is appropriate for the
    workload.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_flushing_avg_loops`](innodb-parameters.html#sysvar_innodb_flushing_avg_loops)定义了`InnoDB`保持先前计算的刷新状态快照的迭代次数，控制自适应刷新对前台工作负载变化的快速响应。较高的[`innodb_flushing_avg_loops`](innodb-parameters.html#sysvar_innodb_flushing_avg_loops)值意味着`InnoDB`会保持先前计算的快照时间更长，因此自适应刷新的响应速度更慢。设置较高的值时，重要的是确保重做日志利用率不会达到75%（异步刷新开始的硬编码限制），并且[`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)阈值保持脏页数量适合工作负载的水平。'
- en: Systems with consistent workloads, a large log file size ([`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)),
    and small spikes that do not reach 75% log space utilization should use a high
    [`innodb_flushing_avg_loops`](innodb-parameters.html#sysvar_innodb_flushing_avg_loops)
    value to keep flushing as smooth as possible. For systems with extreme load spikes
    or log files that do not provide a lot of space, a smaller value allows flushing
    to closely track workload changes, and helps to avoid reaching 75% log space utilization.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于工作负载一致、日志文件大小较大（[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)）且不会达到
    75% 日志空间利用率的系统，应该使用较高的 [`innodb_flushing_avg_loops`](innodb-parameters.html#sysvar_innodb_flushing_avg_loops)
    值，以尽可能平滑地进行刷新。对于负载波动极大或日志文件提供的空间不多的系统，较小的值可以使刷新紧密跟踪工作负载变化，并有助于避免达到 75% 日志空间利用率。
- en: Be aware that if flushing falls behind, the rate of buffer pool flushing can
    exceed the I/O capacity available to `InnoDB`, as defined by [`innodb_io_capacity`](innodb-parameters.html#sysvar_innodb_io_capacity)
    setting. The [`innodb_io_capacity_max`](innodb-parameters.html#sysvar_innodb_io_capacity_max)
    value defines an upper limit on I/O capacity in such situations, so that a spike
    in I/O activity does not consume the entire I/O capacity of the server.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果刷新落后，缓冲池刷新速率可能超过 `InnoDB` 可用的 I/O 容量，即由 [`innodb_io_capacity`](innodb-parameters.html#sysvar_innodb_io_capacity)
    设置定义。[`innodb_io_capacity_max`](innodb-parameters.html#sysvar_innodb_io_capacity_max)
    值在这种情况下定义了 I/O 容量的上限，以防止 I/O 活动的激增消耗服务器的整个 I/O 容量。
- en: The [`innodb_io_capacity`](innodb-parameters.html#sysvar_innodb_io_capacity)
    setting is applicable to all buffer pool instances. When dirty pages are flushed,
    I/O capacity is divided equally among buffer pool instances.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_io_capacity`](innodb-parameters.html#sysvar_innodb_io_capacity) 设置适用于所有缓冲池实例。当脏页被刷新时，I/O
    容量在缓冲池实例之间均等分配。'
- en: Limiting Buffer Flushing During Idle Periods
  id: totrans-27
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 限制空闲期间的缓冲区刷新
- en: As of MySQL 8.0.18, you can use the [`innodb_idle_flush_pct`](innodb-parameters.html#sysvar_innodb_idle_flush_pct)
    variable to limit the rate of buffer pool flushing during idle periods, which
    are periods of time that database pages are not modified. The [`innodb_idle_flush_pct`](innodb-parameters.html#sysvar_innodb_idle_flush_pct)
    value is a percentage of the [`innodb_io_capacity`](innodb-parameters.html#sysvar_innodb_io_capacity)
    setting, which defines the number of I/O operations per second available to `InnoDB`.
    The default [`innodb_idle_flush_pct`](innodb-parameters.html#sysvar_innodb_idle_flush_pct)
    value is 100, which is 100 percent of the [`innodb_io_capacity`](innodb-parameters.html#sysvar_innodb_io_capacity)
    setting. To limit flushing during idle periods, define an [`innodb_idle_flush_pct`](innodb-parameters.html#sysvar_innodb_idle_flush_pct)
    value less than 100.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.18 版本，您可以使用 [`innodb_idle_flush_pct`](innodb-parameters.html#sysvar_innodb_idle_flush_pct)
    变量来限制在空闲期间缓冲池刷新的速率，空闲期间是指数据库页面未被修改的时间段。[`innodb_idle_flush_pct`](innodb-parameters.html#sysvar_innodb_idle_flush_pct)
    值是 [`innodb_io_capacity`](innodb-parameters.html#sysvar_innodb_io_capacity) 设置的百分比，该设置定义了每秒可用于
    `InnoDB` 的 I/O 操作数。默认的 [`innodb_idle_flush_pct`](innodb-parameters.html#sysvar_innodb_idle_flush_pct)
    值为 100，即 [`innodb_io_capacity`](innodb-parameters.html#sysvar_innodb_io_capacity)
    设置的 100%。为了在空闲期间限制刷新，请定义一个小于 100 的 [`innodb_idle_flush_pct`](innodb-parameters.html#sysvar_innodb_idle_flush_pct)
    值。
- en: Limiting page flushing during idle periods can help extend the life of solid
    state storage devices. Side effects of limiting page flushing during idle periods
    may include a longer shutdown time following a lengthy idle period, and a longer
    recovery period should a server failure occur.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在空闲期间限制页面刷新可以延长固态存储设备的寿命。限制空闲期间页面刷新的副作用可能包括在长时间空闲期之后更长的关闭时间，以及在发生服务器故障时更长的恢复时间。
