- en: 14.19.1 Aggregate Function Descriptions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.19.1 聚合函数描述
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html](https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html)
- en: This section describes aggregate functions that operate on sets of values. They
    are often used with a `GROUP BY` clause to group values into subsets.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了对值集合进行操作的聚合函数。它们通常与`GROUP BY`子句一起使用，将值分组为子集。
- en: '**Table 14.29 Aggregate Functions**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.29 聚合函数**'
- en: '| Name | Description |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`AVG()`](aggregate-functions.html#function_avg) | Return the average value
    of the argument |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`AVG()`](aggregate-functions.html#function_avg) | 返回参数的平均值 |'
- en: '| [`BIT_AND()`](aggregate-functions.html#function_bit-and) | Return bitwise
    AND |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`BIT_AND()`](aggregate-functions.html#function_bit-and) | 返回按位与 |'
- en: '| [`BIT_OR()`](aggregate-functions.html#function_bit-or) | Return bitwise OR
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`BIT_OR()`](aggregate-functions.html#function_bit-or) | 返回按位或 |'
- en: '| [`BIT_XOR()`](aggregate-functions.html#function_bit-xor) | Return bitwise
    XOR |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`BIT_XOR()`](aggregate-functions.html#function_bit-xor) | 返回按位异或 |'
- en: '| [`COUNT()`](aggregate-functions.html#function_count) | Return a count of
    the number of rows returned |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`COUNT()`](aggregate-functions.html#function_count) | 返回返回的行数计数 |'
- en: '| [`COUNT(DISTINCT)`](aggregate-functions.html#function_count-distinct) | Return
    the count of a number of different values |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`COUNT(DISTINCT)`](aggregate-functions.html#function_count-distinct) | 返回不同值的数量
    |'
- en: '| [`GROUP_CONCAT()`](aggregate-functions.html#function_group-concat) | Return
    a concatenated string |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`GROUP_CONCAT()`](aggregate-functions.html#function_group-concat) | 返回连接的字符串
    |'
- en: '| [`JSON_ARRAYAGG()`](aggregate-functions.html#function_json-arrayagg) | Return
    result set as a single JSON array |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_ARRAYAGG()`](aggregate-functions.html#function_json-arrayagg) | 将结果集作为单个
    JSON 数组返回 |'
- en: '| [`JSON_OBJECTAGG()`](aggregate-functions.html#function_json-objectagg) |
    Return result set as a single JSON object |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_OBJECTAGG()`](aggregate-functions.html#function_json-objectagg) |
    将结果集作为单个 JSON 对象返回 |'
- en: '| [`MAX()`](aggregate-functions.html#function_max) | Return the maximum value
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`MAX()`](aggregate-functions.html#function_max) | 返回最大值 |'
- en: '| [`MIN()`](aggregate-functions.html#function_min) | Return the minimum value
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`MIN()`](aggregate-functions.html#function_min) | 返回最小值 |'
- en: '| [`STD()`](aggregate-functions.html#function_std) | Return the population
    standard deviation |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`STD()`](aggregate-functions.html#function_std) | 返回总体标准偏差 |'
- en: '| [`STDDEV()`](aggregate-functions.html#function_stddev) | Return the population
    standard deviation |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`STDDEV()`](aggregate-functions.html#function_stddev) | 返回总体标准偏差 |'
- en: '| [`STDDEV_POP()`](aggregate-functions.html#function_stddev-pop) | Return the
    population standard deviation |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`STDDEV_POP()`](aggregate-functions.html#function_stddev-pop) | 返回总体标准偏差
    |'
- en: '| [`STDDEV_SAMP()`](aggregate-functions.html#function_stddev-samp) | Return
    the sample standard deviation |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`STDDEV_SAMP()`](aggregate-functions.html#function_stddev-samp) | 返回样本标准偏差
    |'
- en: '| [`SUM()`](aggregate-functions.html#function_sum) | Return the sum |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`SUM()`](aggregate-functions.html#function_sum) | 返回总和 |'
- en: '| [`VAR_POP()`](aggregate-functions.html#function_var-pop) | Return the population
    standard variance |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`VAR_POP()`](aggregate-functions.html#function_var-pop) | 返回总体标准方差 |'
- en: '| [`VAR_SAMP()`](aggregate-functions.html#function_var-samp) | Return the sample
    variance |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`VAR_SAMP()`](aggregate-functions.html#function_var-samp) | 返回样本方差 |'
- en: '| [`VARIANCE()`](aggregate-functions.html#function_variance) | Return the population
    standard variance |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`VARIANCE()`](aggregate-functions.html#function_variance) | 返回总体标准方差 |'
- en: '| Name | Description |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: Unless otherwise stated, aggregate functions ignore `NULL` values.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，聚合函数会忽略`NULL`值。
- en: If you use an aggregate function in a statement containing no `GROUP BY` clause,
    it is equivalent to grouping on all rows. For more information, see [Section 14.19.3,
    “MySQL Handling of GROUP BY”](group-by-handling.html "14.19.3 MySQL Handling of
    GROUP BY").
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在不包含`GROUP BY`子句的语句中使用聚合函数，则相当于对所有行进行分组。有关更多信息，请参见[第 14.19.3 节，“MySQL GROUP
    BY 的处理”](group-by-handling.html "14.19.3 MySQL Handling of GROUP BY")。
- en: Most aggregate functions can be used as window functions. Those that can be
    used this way are signified in their syntax description by `[*`over_clause`*]`,
    representing an optional `OVER` clause. *`over_clause`* is described in [Section 14.20.2,
    “Window Function Concepts and Syntax”](window-functions-usage.html "14.20.2 Window
    Function Concepts and Syntax"), which also includes other information about window
    function usage.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数聚合函数都可以作为窗口函数使用。可以这样使用的函数在其语法描述中通过`[*`over_clause`*]`表示，表示一个可选的`OVER`子句。*`over_clause`*在[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中描述，该节还包括有关窗口函数使用的其他信息。
- en: For numeric arguments, the variance and standard deviation functions return
    a [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE") value. The [`SUM()`](aggregate-functions.html#function_sum)
    and [`AVG()`](aggregate-functions.html#function_avg) functions return a [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") value for exact-value
    arguments (integer or [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point Types
    (Exact Value) - DECIMAL, NUMERIC")), and a [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") value for approximate-value
    arguments ([`FLOAT`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE") or [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE")).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数值参数，方差和标准差函数返回一个[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值） -
    FLOAT, DOUBLE")值。[`SUM()`](aggregate-functions.html#function_sum)和[`AVG()`](aggregate-functions.html#function_avg)函数对于精确值参数（整数或[`DECIMAL`](fixed-point-types.html
    "13.1.3 定点类型（精确值） - DECIMAL, NUMERIC")）返回一个[`DECIMAL`](fixed-point-types.html
    "13.1.3 定点类型（精确值） - DECIMAL, NUMERIC")值，对于近似值参数（[`FLOAT`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")或[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")）返回一个[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值） -
    FLOAT, DOUBLE")值。
- en: 'The [`SUM()`](aggregate-functions.html#function_sum) and [`AVG()`](aggregate-functions.html#function_avg)
    aggregate functions do not work with temporal values. (They convert the values
    to numbers, losing everything after the first nonnumeric character.) To work around
    this problem, convert to numeric units, perform the aggregate operation, and convert
    back to a temporal value. Examples:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SUM()`](aggregate-functions.html#function_sum)和[`AVG()`](aggregate-functions.html#function_avg)聚合函数不适用于时间值。（它们将值转换为数字，丢失第一个非数字字符后的所有内容。）为解决此问题，将值转换为数字单位，执行聚合操作，然后将其转换回时间值。示例：'
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Functions such as [`SUM()`](aggregate-functions.html#function_sum) or [`AVG()`](aggregate-functions.html#function_avg)
    that expect a numeric argument cast the argument to a number if necessary. For
    [`SET`](set.html "13.3.6 The SET Type") or [`ENUM`](enum.html "13.3.5 The ENUM
    Type") values, the cast operation causes the underlying numeric value to be used.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如[`SUM()`](aggregate-functions.html#function_sum)或[`AVG()`](aggregate-functions.html#function_avg)这样期望数值参数的函数，如有必要会将参数转换为数字。对于[`SET`](set.html
    "13.3.6 SET类型")或[`ENUM`](enum.html "13.3.5 ENUM类型")值，转换操作会使用底层的数值。
- en: The [`BIT_AND()`](aggregate-functions.html#function_bit-and), [`BIT_OR()`](aggregate-functions.html#function_bit-or),
    and [`BIT_XOR()`](aggregate-functions.html#function_bit-xor) aggregate functions
    perform bit operations. Prior to MySQL 8.0, bit functions and operators required
    [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER, INT,
    SMALLINT, TINYINT, MEDIUMINT, BIGINT") (64-bit integer) arguments and returned
    [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER, INT,
    SMALLINT, TINYINT, MEDIUMINT, BIGINT") values, so they had a maximum range of
    64 bits. Non-[`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") arguments were converted
    to [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") prior to performing the operation
    and truncation could occur.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BIT_AND()`](aggregate-functions.html#function_bit-and)、[`BIT_OR()`](aggregate-functions.html#function_bit-or)和[`BIT_XOR()`](aggregate-functions.html#function_bit-xor)聚合函数执行位操作。在MySQL
    8.0之前，位函数和运算符需要[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")（64位整数）参数，并返回[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")值，因此它们的最大范围为64位。非[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")参数在执行操作之前被转换为[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")，可能会发生截断。'
- en: In MySQL 8.0, bit functions and operators permit binary string type arguments
    ([`BINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), and the [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") types) and return a value of like type, which enables them
    to take arguments and produce return values larger than 64 bits. For discussion
    about argument evaluation and result types for bit operations, see the introductory
    discussion in [Section 14.12, “Bit Functions and Operators”](bit-functions.html
    "14.12 Bit Functions and Operators").
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，位函数和运算符允许二进制字符串类型参数（[`BINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型")、[`VARBINARY`](binary-varbinary.html
    "13.3.3 BINARY和VARBINARY类型")和[`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")类型），并返回相同类型的值，这使它们能够接受参数并生成大于64位的返回值。有关位操作的参数评估和结果类型的讨论，请参见[第14.12节“位函数和运算符”](bit-functions.html
    "14.12 位函数和运算符")中的介绍性讨论。
- en: '[`AVG([DISTINCT] *`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_avg)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AVG([DISTINCT] *`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_avg)'
- en: Returns the average value of `*`expr`*`. The `DISTINCT` option can be used to
    return the average of the distinct values of *`expr`*.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回`*`expr`*`的平均值。`DISTINCT`选项可用于返回*`expr`*的不同值的平均值。
- en: If there are no matching rows, [`AVG()`](aggregate-functions.html#function_avg)
    returns `NULL`. The function also returns `NULL` if *`expr`* is `NULL`.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，[`AVG()`](aggregate-functions.html#function_avg)返回`NULL`。如果*`expr`*为`NULL`，该函数也返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax"); it cannot be used with `DISTINCT`.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`over_clause`*存在，则此函数作为窗口函数执行。*`over_clause`*如[第14.20.2节“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中所述；它不能与`DISTINCT`一起使用。
- en: '[PRE1]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`BIT_AND(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_bit-and)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIT_AND(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_bit-and)'
- en: Returns the bitwise `AND` of all bits in *`expr`*.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*中所有位的按位`AND`。
- en: 'The result type depends on whether the function argument values are evaluated
    as binary strings or numbers:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果类型取决于函数参数值是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the argument values have a binary string
    type, and the argument is not a hexadecimal literal, bit literal, or `NULL` literal.
    Numeric evaluation occurs otherwise, with argument value conversion to unsigned
    64-bit integers as necessary.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当参数值具有二进制字符串类型且参数不是十六进制文字、位文字或`NULL`文字时，进行二进制字符串评估。否则进行数值评估，必要时将参数值转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    argument values. If argument values have unequal lengths, an [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    error occurs. If the argument size exceeds 511 bytes, an [`ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size)
    error occurs. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串评估会产生与参数值相同长度的二进制字符串。如果参数值长度不相等，则会出现[`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)错误。如果参数大小超过511字节，则会出现[`ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size)错误。数值评估会产生一个无符号64位整数。
- en: If there are no matching rows, [`BIT_AND()`](aggregate-functions.html#function_bit-and)
    returns a neutral value (all bits set to 1) having the same length as the argument
    values.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，[`BIT_AND()`](aggregate-functions.html#function_bit-and)返回一个中性值（所有位设置为1），其长度与参数值相同。
- en: '`NULL` values do not affect the result unless all values are `NULL`. In that
    case, the result is a neutral value having the same length as the argument values.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`NULL`值不会影响结果，除非所有值都是`NULL`。在这种情况下，结果是一个中性值，其长度与参数值相同。'
- en: For more information discussion about argument evaluation and result types,
    see the introductory discussion in [Section 14.12, “Bit Functions and Operators”](bit-functions.html
    "14.12 Bit Functions and Operators").
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关参数评估和结果类型的更多信息，请参见[第14.12节，“位函数和运算符”](bit-functions.html "14.12 位函数和运算符")中的介绍性讨论。
- en: If [`BIT_AND()`](aggregate-functions.html#function_bit-and) is invoked from
    within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary string results display using hexadecimal notation, depending on
    the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从[**mysql**](mysql.html "6.5.1 mysql — MySQL命令行客户端")客户端中调用[`BIT_AND()`](aggregate-functions.html#function_bit-and)，二进制字符串结果将根据[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值使用十六进制表示。有关该选项的更多信息，请参见[第6.5.1节，“mysql
    — MySQL命令行客户端”](mysql.html "6.5.1 mysql — MySQL命令行客户端")。
- en: As of MySQL 8.0.12, this function executes as a window function if *`over_clause`*
    is present. *`over_clause`* is as described in [Section 14.20.2, “Window Function
    Concepts and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts
    and Syntax").
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.12开始，如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*的描述如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中所述。
- en: '[`BIT_OR(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_bit-or)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIT_OR(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_bit-or)'
- en: Returns the bitwise `OR` of all bits in *`expr`*.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ��回*`expr`*中所有位的按位`OR`。
- en: 'The result type depends on whether the function argument values are evaluated
    as binary strings or numbers:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果类型取决于函数参数值是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the argument values have a binary string
    type, and the argument is not a hexadecimal literal, bit literal, or `NULL` literal.
    Numeric evaluation occurs otherwise, with argument value conversion to unsigned
    64-bit integers as necessary.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当参数值具有二进制字符串类型且参数不是十六进制文字、位文字或`NULL`文字时，会发生二进制字符串评估。否则会发生数值评估，必要时将参数值转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    argument values. If argument values have unequal lengths, an [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    error occurs. If the argument size exceeds 511 bytes, an [`ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size)
    error occurs. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串评估会产生与参数值相同长度的二进制字符串。如果参数值长度不相等，则会出现[`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)错误。如果参数大小超过511字节，则会出现[`ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size)错误。数值评估会产生一个无符号64位整数。
- en: If there are no matching rows, [`BIT_OR()`](aggregate-functions.html#function_bit-or)
    returns a neutral value (all bits set to 0) having the same length as the argument
    values.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，[`BIT_OR()`](aggregate-functions.html#function_bit-or) 返回一个中性值（所有位设置为
    0），其长度与参数值相同。
- en: '`NULL` values do not affect the result unless all values are `NULL`. In that
    case, the result is a neutral value having the same length as the argument values.'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`NULL` 值不会影响结果，除非所有值都是 `NULL`。在这种情况下，结果是一个中性值，其长度与参数值相同。'
- en: For more information discussion about argument evaluation and result types,
    see the introductory discussion in [Section 14.12, “Bit Functions and Operators”](bit-functions.html
    "14.12 Bit Functions and Operators").
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关参数评估和结果类型的更多信息，请参见 [Section 14.12, “Bit Functions and Operators”](bit-functions.html
    "14.12 Bit Functions and Operators") 中的介绍性讨论。
- en: If [`BIT_OR()`](aggregate-functions.html#function_bit-or) is invoked from within
    the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") client,
    binary string results display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从 [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") 客户端内调用
    [`BIT_OR()`](aggregate-functions.html#function_bit-or)，二进制字符串结果将根据 [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)
    的值以十六进制表示。有关该选项的更多信息，请参见 [Section 6.5.1, “mysql — The MySQL Command-Line Client”](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")。
- en: As of MySQL 8.0.12, this function executes as a window function if *`over_clause`*
    is present. *`over_clause`* is as described in [Section 14.20.2, “Window Function
    Concepts and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts
    and Syntax").
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.12 开始，如果存在 *`over_clause`*，此函数将作为窗口函数执行。*`over_clause`* 如 [Section 14.20.2,
    “Window Function Concepts and Syntax”](window-functions-usage.html "14.20.2 Window
    Function Concepts and Syntax") 中所述。
- en: '[`BIT_XOR(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_bit-xor)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIT_XOR(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_bit-xor)'
- en: Returns the bitwise [`XOR`](logical-operators.html#operator_xor) of all bits
    in *`expr`*.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回 *`expr`* 中所有位的按位 [`XOR`](logical-operators.html#operator_xor)。
- en: 'The result type depends on whether the function argument values are evaluated
    as binary strings or numbers:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果类型取决于函数参数值是作为二进制字符串还是���字进行评估：
- en: Binary-string evaluation occurs when the argument values have a binary string
    type, and the argument is not a hexadecimal literal, bit literal, or `NULL` literal.
    Numeric evaluation occurs otherwise, with argument value conversion to unsigned
    64-bit integers as necessary.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当参数值具有二进制字符串类型且参数不是十六进制文字、位文字或 `NULL` 文字时，进行二进制字符串评估。否则进行数字评估，必要时将参数值转换为无符号
    64 位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    argument values. If argument values have unequal lengths, an [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    error occurs. If the argument size exceeds 511 bytes, an [`ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size)
    error occurs. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串评估产生与参数值相同长度的二进制字符串。如果参数值长度不相等，则会出现 [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    错误。如果参数大小超过 511 字节，则会出现 [`ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size)
    错误。数字评估产生一个无符号 64 位整数。
- en: If there are no matching rows, [`BIT_XOR()`](aggregate-functions.html#function_bit-xor)
    returns a neutral value (all bits set to 0) having the same length as the argument
    values.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，[`BIT_XOR()`](aggregate-functions.html#function_bit-xor) 返回一个中性值（所有位设置为
    0），其长度与参数值相同。
- en: '`NULL` values do not affect the result unless all values are `NULL`. In that
    case, the result is a neutral value having the same length as the argument values.'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`NULL` 值不会影响结果，除非所有值都是 `NULL`。在这种情况下，结果是一个中性值，其长度与参数值相同。'
- en: For more information discussion about argument evaluation and result types,
    see the introductory discussion in [Section 14.12, “Bit Functions and Operators”](bit-functions.html
    "14.12 Bit Functions and Operators").
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关参数评估和结果类型的更多信息，请参见 [Section 14.12, “Bit Functions and Operators”](bit-functions.html
    "14.12 Bit Functions and Operators") 中的介绍性讨论。
- en: If [`BIT_XOR()`](aggregate-functions.html#function_bit-xor) is invoked from
    within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary string results display using hexadecimal notation, depending on
    the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从 [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") 客户端调用
    [`BIT_XOR()`](aggregate-functions.html#function_bit-xor)，二进制字符串结果将使用十六进制表示，取决于
    [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex) 的值。有关该选项的更多信息，请参见
    [Section 6.5.1, “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client")。
- en: As of MySQL 8.0.12, this function executes as a window function if *`over_clause`*
    is present. *`over_clause`* is as described in [Section 14.20.2, “Window Function
    Concepts and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts
    and Syntax").
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.12，如果存在 *`over_clause`*，此函数将作为窗口函数执行。*`over_clause`* 如 [Section 14.20.2,
    “Window Function Concepts and Syntax”](window-functions-usage.html "14.20.2 Window
    Function Concepts and Syntax") 中所述。
- en: '[`COUNT(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_count)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`COUNT(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_count)'
- en: Returns a count of the number of non-`NULL` values of *`expr`* in the rows retrieved
    by a [`SELECT`](select.html "15.2.13 SELECT Statement") statement. The result
    is a [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") value.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回 [`SELECT`](select.html "15.2.13 SELECT Statement") 语句检索的行中 *`expr`* 的非 `NULL`
    值的计数。结果是一个 [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) -
    INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 值。
- en: If there are no matching rows, [`COUNT()`](aggregate-functions.html#function_count)
    returns `0`. `COUNT(NULL)` returns 0.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，[`COUNT()`](aggregate-functions.html#function_count) 返回 `0`。`COUNT(NULL)`
    返回 0。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax").
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在 *`over_clause`*，此函数将作为窗口函数执行。*`over_clause`* 如 [Section 14.20.2, “Window
    Function Concepts and Syntax”](window-functions-usage.html "14.20.2 Window Function
    Concepts and Syntax") 中所述。
- en: '[PRE2]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`COUNT(*)`](aggregate-functions.html#function_count) is somewhat different
    in that it returns a count of the number of rows retrieved, whether or not they
    contain `NULL` values.'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`COUNT(*)`](aggregate-functions.html#function_count) 有些不同，它返回检索到的行数，无论它们是否包含
    `NULL` 值。'
- en: For transactional storage engines such as `InnoDB`, storing an exact row count
    is problematic. Multiple transactions may be occurring at the same time, each
    of which may affect the count.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于像 `InnoDB` 这样的事务性存储引擎，存储精确的行计数是有问题的。可能同时发生多个事务，每个事务可能会影响计数。
- en: '`InnoDB` does not keep an internal count of rows in a table because concurrent
    transactions might “see” different numbers of rows at the same time. Consequently,
    `SELECT COUNT(*)` statements only count rows visible to the current transaction.'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InnoDB` 不会保留表中行的内部计数，因为并发事务可能同时“看到”不同数量的行。因此，`SELECT COUNT(*)` 语句仅计算当前事务可见的行数。'
- en: As of MySQL 8.0.13, `SELECT COUNT(*) FROM *`tbl_name`*` query performance for
    `InnoDB` tables is optimized for single-threaded workloads if there are no extra
    clauses such as `WHERE` or `GROUP BY`.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.13，对于 `InnoDB` 表，`SELECT COUNT(*) FROM *`tbl_name`*` 查询性能在没有额外子句（如
    `WHERE` 或 `GROUP BY`）的情况下针对单线程工作负载进行了优化。
- en: '`InnoDB` processes `SELECT COUNT(*)` statements by traversing the smallest
    available secondary index unless an index or optimizer hint directs the optimizer
    to use a different index. If a secondary index is not present, `InnoDB` processes
    `SELECT COUNT(*)` statements by scanning the clustered index.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InnoDB` 通过遍历最小可用的次要索引来处理 `SELECT COUNT(*)` 语句，除非索引或优化器提示指示优化器使用不同的索引。如果不存在次要索引，则
    `InnoDB` 通过扫描聚簇索引来处理 `SELECT COUNT(*)` 语句。'
- en: Processing `SELECT COUNT(*)` statements takes some time if index records are
    not entirely in the buffer pool. For a faster count, create a counter table and
    let your application update it according to the inserts and deletes it does. However,
    this method may not scale well in situations where thousands of concurrent transactions
    are initiating updates to the same counter table. If an approximate row count
    is sufficient, use [`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW
    TABLE STATUS Statement").
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 处理 `SELECT COUNT(*)` 语句需要一些时间，如果索引记录不完全在缓冲池中。为了更快地计数，创建一个计数器表，并让您的应用程序根据其执行的插入和删除更新它。然而，在数千个并发事务启动对同一计数器表的更新的情况下，这种方法可能不会很好地扩展。如果近似行数足够，使用
    [`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW TABLE STATUS Statement")。
- en: '`InnoDB` handles `SELECT COUNT(*)` and `SELECT COUNT(1)` operations in the
    same way. There is no performance difference.'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InnoDB` 处理 `SELECT COUNT(*)` 和 `SELECT COUNT(1)` 操作的方式相同。没有性能差异。'
- en: 'For `MyISAM` tables, [`COUNT(*)`](aggregate-functions.html#function_count)
    is optimized to return very quickly if the [`SELECT`](select.html "15.2.13 SELECT
    Statement") retrieves from one table, no other columns are retrieved, and there
    is no `WHERE` clause. For example:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 `MyISAM` 表，如果 [`SELECT`](select.html "15.2.13 SELECT Statement") 从一个表中检索，没有检索到其他列，并且没有
    `WHERE` 子句，则 [`COUNT(*)`](aggregate-functions.html#function_count) 被优化为非常快速地返回。例如：
- en: '[PRE3]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This optimization only applies to `MyISAM` tables, because an exact row count
    is stored for this storage engine and can be accessed very quickly. `COUNT(1)`
    is only subject to the same optimization if the first column is defined as `NOT
    NULL`.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种优化仅适用于 `MyISAM` 表，因为对于这种存储引擎存储了精确的行数计数，并且可以非常快速地访问。如果第一列被定义为 `NOT NULL`，`COUNT(1)`
    也仅受到相同优化的影响。
- en: '[`COUNT(DISTINCT *`expr`*,[*`expr`*...])`](aggregate-functions.html#function_count)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`COUNT(DISTINCT *`expr`*,[*`expr`*...])`](aggregate-functions.html#function_count)'
- en: Returns a count of the number of rows with different non-`NULL` *`expr`* values.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回具有不同非`NULL` *`expr`* 值的行数计数。
- en: If there are no matching rows, [`COUNT(DISTINCT)`](aggregate-functions.html#function_count)
    returns `0`.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，[`COUNT(DISTINCT)`](aggregate-functions.html#function_count) 返回 `0`。
- en: '[PRE4]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In MySQL, you can obtain the number of distinct expression combinations that
    do not contain `NULL` by giving a list of expressions. In standard SQL, you would
    have to do a concatenation of all expressions inside [`COUNT(DISTINCT ...)`](aggregate-functions.html#function_count).
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 中，您可以通过给出表达式列表来获取不包含 `NULL` 的不同表达式组合的数量。在标准 SQL 中，您将不得不对 [`COUNT(DISTINCT
    ...)`](aggregate-functions.html#function_count) 中的所有表达式进行串联。
- en: '[`GROUP_CONCAT(*`expr`*)`](aggregate-functions.html#function_group-concat)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`GROUP_CONCAT(*`expr`*)`](aggregate-functions.html#function_group-concat)'
- en: 'This function returns a string result with the concatenated non-`NULL` values
    from a group. It returns `NULL` if there are no non-`NULL` values. The full syntax
    is as follows:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数返回一个字符串结果，其中包含来自一组的连接的非`NULL` 值。如果没有非`NULL` 值，则返回 `NULL`。完整语法如下：
- en: '[PRE5]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE7]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In MySQL, you can get the concatenated values of expression combinations. To
    eliminate duplicate values, use the `DISTINCT` clause. To sort values in the result,
    use the `ORDER BY` clause. To sort in reverse order, add the `DESC` (descending)
    keyword to the name of the column you are sorting by in the `ORDER BY` clause.
    The default is ascending order; this may be specified explicitly using the `ASC`
    keyword. The default separator between values in a group is comma (`,`). To specify
    a separator explicitly, use `SEPARATOR` followed by the string literal value that
    should be inserted between group values. To eliminate the separator altogether,
    specify `SEPARATOR ''`.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 中，您可以获取表达式组合的连接值。要消除重复值，请使用 `DISTINCT` 子句。要对结果中的值进行排序，请使用 `ORDER BY`
    子句。要以相反顺序排序，请在 `ORDER BY` 子句中按照您要排序的列的名称后添加 `DESC`（降序）关键字。默认是升序；这可以通过使用 `ASC`
    关键字明确指定。在组中值之间的默认分隔符是逗号（`,`）。要明确指定分隔符，请使用 `SEPARATOR`，后跟应在组值之间插入的字符串文字值。要完全消除分隔符，请指定
    `SEPARATOR ''`。
- en: 'The result is truncated to the maximum length that is given by the [`group_concat_max_len`](server-system-variables.html#sysvar_group_concat_max_len)
    system variable, which has a default value of 1024\. The value can be set higher,
    although the effective maximum length of the return value is constrained by the
    value of [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet).
    The syntax to change the value of [`group_concat_max_len`](server-system-variables.html#sysvar_group_concat_max_len)
    at runtime is as follows, where *`val`* is an unsigned integer:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果被截断为由[`group_concat_max_len`](server-system-variables.html#sysvar_group_concat_max_len)系统变量给出的最大长度，其默认值为1024。该值可以设置更高，尽管返回值的有效最大长度受[`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)的值限制。在运行时更改[`group_concat_max_len`](server-system-variables.html#sysvar_group_concat_max_len)值的语法如下，其中*`val`*是无符号整数：
- en: '[PRE8]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The return value is a nonbinary or binary string, depending on whether the arguments
    are nonbinary or binary strings. The result type is [`TEXT`](blob.html "13.3.4 The
    BLOB and TEXT Types") or [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")
    unless [`group_concat_max_len`](server-system-variables.html#sysvar_group_concat_max_len)
    is less than or equal to 512, in which case the result type is [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types") or [`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types").
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回值是一个非二进制或二进制字符串，取决于参数是非二进制还是二进制字符串。结果类型是[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")或[`BLOB`](blob.html
    "13.3.4 BLOB和TEXT类型")，除非[`group_concat_max_len`](server-system-variables.html#sysvar_group_concat_max_len)小于或等于512，此时结果类型为[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")或[`VARBINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型")。
- en: If [`GROUP_CONCAT()`](aggregate-functions.html#function_group-concat) is invoked
    from within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary string results display using hexadecimal notation, depending on
    the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从[**mysql**](mysql.html "6.5.1 mysql — MySQL命令行客户端")客户端内调用[`GROUP_CONCAT()`](aggregate-functions.html#function_group-concat)，二进制字符串结果将使用十六进制表示，取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参见[第6.5.1节，“mysql
    — MySQL命令行客户端”](mysql.html "6.5.1 mysql — MySQL命令行客户端")。
- en: 'See also [`CONCAT()`](string-functions.html#function_concat) and [`CONCAT_WS()`](string-functions.html#function_concat-ws):
    [Section 14.8, “String Functions and Operators”](string-functions.html "14.8 String
    Functions and Operators").'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅[`CONCAT()`](string-functions.html#function_concat)和[`CONCAT_WS()`](string-functions.html#function_concat-ws)：[第14.8节，“字符串函数和运算符”](string-functions.html
    "14.8 字符串函数和运算符")。
- en: '[`JSON_ARRAYAGG(*`col_or_expr`*) [*`over_clause`*]`](aggregate-functions.html#function_json-arrayagg)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_ARRAYAGG(*`col_or_expr`*) [*`over_clause`*]`](aggregate-functions.html#function_json-arrayagg)'
- en: Aggregates a result set as a single [`JSON`](json.html "13.5 The JSON Data Type")
    array whose elements consist of the rows. The order of elements in this array
    is undefined. The function acts on a column or an expression that evaluates to
    a single value. Returns `NULL` if the result contains no rows, or in the event
    of an error. If *`col_or_expr`* is `NULL`, the function returns an array of JSON
    `[null]` elements.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将结果集聚合为一个单一的[`JSON`](json.html "13.5 JSON数据类型")数组，其元素由行组成。此数组中元素的顺序是未定义的。该函数作用于一个列或评估为单个值的表达式。如果结果不包含行或出现错误，则返回`NULL`。如果*`col_or_expr`*为`NULL`，则函数返回一个JSON数组，其中包含`[null]`元素。
- en: As of MySQL 8.0.14, this function executes as a window function if *`over_clause`*
    is present. *`over_clause`* is as described in [Section 14.20.2, “Window Function
    Concepts and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts
    and Syntax").
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.14开始，如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*的描述如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中所述。
- en: '[PRE9]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[`JSON_OBJECTAGG(*`key`*, *`value`*) [*`over_clause`*]`](aggregate-functions.html#function_json-objectagg)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_OBJECTAGG(*`key`*, *`value`*) [*`over_clause`*]`](aggregate-functions.html#function_json-objectagg)'
- en: Takes two column names or expressions as arguments, the first of these being
    used as a key and the second as a value, and returns a JSON object containing
    key-value pairs. Returns `NULL` if the result contains no rows, or in the event
    of an error. An error occurs if any key name is `NULL` or the number of arguments
    is not equal to 2.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接受两个列名或表达式作为参数，第一个用作键，第二个用作值，并返回一个包含键值对的 JSON 对象。如果结果不包含行，则返回`NULL`，或者在出现错误时返回。如果任何键名为`NULL`或参数数量不等于2，则会发生错误。
- en: As of MySQL 8.0.14, this function executes as a window function if *`over_clause`*
    is present. *`over_clause`* is as described in [Section 14.20.2, “Window Function
    Concepts and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts
    and Syntax").
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.14 开始，如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*如[第 14.20.2
    节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax")中所述。
- en: '[PRE10]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Duplicate key handling. ** When the result of this function is normalized,
    values having duplicate keys are discarded. In keeping with the MySQL [`JSON`](json.html
    "13.5 The JSON Data Type") data type specification that does not permit duplicate
    keys, only the last value encountered is used with that key in the returned object
    (“last duplicate key wins”). This means that the result of using this function
    on columns from a `SELECT` can depend on the order in which the rows are returned,
    which is not guaranteed.'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重复键处理。** 当此函数的结果被规范化时，具有重复键的值将被丢弃。遵循 MySQL [`JSON`](json.html "13.5 The JSON
    Data Type") 数据类型规范，不允许重复键，只使用遇到的最后一个值与该键在返回对象中（“最后重复键获胜”）。这意味着在从`SELECT`中的列使用此函数的结果可能取决于返回行的顺序，这是不被保证的。'
- en: When used as a window function, if there are duplicate keys within a frame,
    only the last value for the key is present in the result. The value for the key
    from the last row in the frame is deterministic if the `ORDER BY` specification
    guarantees that the values have a specific order. If not, the resulting value
    of the key is nondeterministic.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当作为窗口函数使用时，如果帧内存在重复键，结果中只有键的最后一个值。如果`ORDER BY`规范保证值具有特定顺序，则帧中最后一行的键的值是确定的。如果没有，则键的结果值是不确定的。
- en: 'Consider the following:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑以下内容：
- en: '[PRE11]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The key chosen from the last query is nondeterministic. If the query does not
    use `GROUP BY` (which usually imposes its own ordering regardless) and you prefer
    a particular key ordering, you can invoke `JSON_OBJECTAGG()` as a window function
    by including an `OVER` clause with an `ORDER BY` specification to impose a particular
    order on frame rows. The following examples show what happens with and without
    `ORDER BY` for a few different frame specifications.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从上次查询中选择的键是不确定的。如果查询不使用`GROUP BY`（通常会强加自己的排序），并且您希望特定键的顺序，您可以通过在`OVER`子句中包含一个`ORDER
    BY`规范来将`JSON_OBJECTAGG()`作为窗口函数调用，以对帧行施加特定顺序。以下示例展示了对于几种不同帧规范，使用和不使用`ORDER BY`会发生什么。
- en: 'Without `ORDER BY`, the frame is the entire partition:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有`ORDER BY`，帧是整个分区：
- en: '[PRE12]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With `ORDER BY`, where the frame is the default of `RANGE BETWEEN UNBOUNDED
    PRECEDING AND CURRENT ROW` (in both ascending and descending order):'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`ORDER BY`，其中帧是默认的`RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW`（无论升序还是降序）：
- en: '[PRE13]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With `ORDER BY` and an explicit frame of the entire partition:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`ORDER BY`和整个分区的显式帧：
- en: '[PRE14]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To return a particular key value (such as the smallest or largest), include
    a `LIMIT` clause in the appropriate query. For example:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要返回特定键值（例如最小值或最大值），请在适当查询中包含一个`LIMIT`子句。例如：
- en: '[PRE15]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See [Normalization, Merging, and Autowrapping of JSON Values](json.html#json-normalization
    "Normalization, Merging, and Autowrapping of JSON Values"), for additional information
    and examples.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关 JSON 值的规范化、合并和自动包装，请参阅[JSON 值的规范化、合并和自动包装](json.html#json-normalization "Normalization,
    Merging, and Autowrapping of JSON Values")，获取更多信息和示例。
- en: '[`MAX([DISTINCT] *`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_max)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MAX([DISTINCT] *`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_max)'
- en: Returns the maximum value of *`expr`*. [`MAX()`](aggregate-functions.html#function_max)
    may take a string argument; in such cases, it returns the maximum string value.
    See [Section 10.3.1, “How MySQL Uses Indexes”](mysql-indexes.html "10.3.1 How
    MySQL Uses Indexes"). The `DISTINCT` keyword can be used to find the maximum of
    the distinct values of *`expr`*, however, this produces the same result as omitting
    `DISTINCT`.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*的最大值。[`MAX()`](aggregate-functions.html#function_max)可能接受一个字符串参数；在这种情况下，它返回最大的字符串值。参见[第10.3.1节，“MySQL如何使用索引”](mysql-indexes.html
    "10.3.1 MySQL如何使用索引")。`DISTINCT`关键字可用于查找*`expr`*的不同值的最大值，但是，这与省略`DISTINCT`产生相同的结果。
- en: If there are no matching rows, or if *`expr`* is `NULL`, [`MAX()`](aggregate-functions.html#function_max)
    returns `NULL`.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，或者*`expr`*为`NULL`，[`MAX()`](aggregate-functions.html#function_max)返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax"); it cannot be used with `DISTINCT`.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`over_clause`*存在，则此函数作为窗口函数执行。*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中所述；它不能与`DISTINCT`一起使用。
- en: '[PRE16]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For [`MAX()`](aggregate-functions.html#function_max), MySQL currently compares
    [`ENUM`](enum.html "13.3.5 The ENUM Type") and [`SET`](set.html "13.3.6 The SET
    Type") columns by their string value rather than by the string's relative position
    in the set. This differs from how `ORDER BY` compares them.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`MAX()`](aggregate-functions.html#function_max)，MySQL当前通过它们的字符串值而不是字符串在集合中的相对位置来比较[`ENUM`](enum.html
    "13.3.5 ENUM类型")和[`SET`](set.html "13.3.6 SET类型")列。这与`ORDER BY`比较它们的方式不同。
- en: '[`MIN([DISTINCT] *`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_min)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MIN([DISTINCT] *`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_min)'
- en: Returns the minimum value of *`expr`*. [`MIN()`](aggregate-functions.html#function_min)
    may take a string argument; in such cases, it returns the minimum string value.
    See [Section 10.3.1, “How MySQL Uses Indexes”](mysql-indexes.html "10.3.1 How
    MySQL Uses Indexes"). The `DISTINCT` keyword can be used to find the minimum of
    the distinct values of *`expr`*, however, this produces the same result as omitting
    `DISTINCT`.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*的最小值。[`MIN()`](aggregate-functions.html#function_min)可能接受一个字符串参数；在这种情况下，它返回最小的字符串值。参见[第10.3.1节，“MySQL如何使用索引”](mysql-indexes.html
    "10.3.1 MySQL如何使用索引")。`DISTINCT`关键字可用于查找*`expr`*的不同值的最小值，但是，这与省略`DISTINCT`产生相同的结果。
- en: If there are no matching rows, or if *`expr`* is `NULL`, [`MIN()`](aggregate-functions.html#function_min)
    returns `NULL`.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，或者*`expr`*为`NULL`，[`MIN()`](aggregate-functions.html#function_min)返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax"); it cannot be used with `DISTINCT`.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`over_clause`*存在，则此函数作为窗口函数执行。*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中所述；它不能与`DISTINCT`一起使用。
- en: '[PRE17]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For [`MIN()`](aggregate-functions.html#function_min), MySQL currently compares
    [`ENUM`](enum.html "13.3.5 The ENUM Type") and [`SET`](set.html "13.3.6 The SET
    Type") columns by their string value rather than by the string's relative position
    in the set. This differs from how `ORDER BY` compares them.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`MIN()`](aggregate-functions.html#function_min)，MySQL当前通过它们的字符串值而不是字符串在集合中的相对位置来比较[`ENUM`](enum.html
    "13.3.5 ENUM类型")和[`SET`](set.html "13.3.6 SET类型")列。这与`ORDER BY`比较它们的方式不同。
- en: '[`STD(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_std)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STD(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_std)'
- en: Returns the population standard deviation of *`expr`*. [`STD()`](aggregate-functions.html#function_std)
    is a synonym for the standard SQL function [`STDDEV_POP()`](aggregate-functions.html#function_stddev-pop),
    provided as a MySQL extension.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*的总体标准偏差。[`STD()`](aggregate-functions.html#function_std)是标准SQL函数[`STDDEV_POP()`](aggregate-functions.html#function_stddev-pop)的同义词，作为MySQL的扩展提供。
- en: If there are no matching rows, or if *`expr`* is `NULL`, [`STD()`](aggregate-functions.html#function_std)
    returns `NULL`.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，或者*`expr`*为`NULL`，[`STD()`](aggregate-functions.html#function_std)返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax").
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*的描述如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中所述。
- en: '[`STDDEV(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_stddev)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STDDEV(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_stddev)'
- en: Returns the population standard deviation of *`expr`*. [`STDDEV()`](aggregate-functions.html#function_stddev)
    is a synonym for the standard SQL function [`STDDEV_POP()`](aggregate-functions.html#function_stddev-pop),
    provided for compatibility with Oracle.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*的总体标准偏差。[`STDDEV()`](aggregate-functions.html#function_stddev)是标准
    SQL 函数[`STDDEV_POP()`](aggregate-functions.html#function_stddev-pop)的同义词，用于与 Oracle
    兼容。
- en: If there are no matching rows, or if *`expr`* is `NULL`, [`STDDEV()`](aggregate-functions.html#function_stddev)
    returns `NULL`.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，或者*`expr`*为`NULL`，[`STDDEV()`](aggregate-functions.html#function_stddev)返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax").
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*的描述如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中所述。
- en: '[`STDDEV_POP(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_stddev-pop)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STDDEV_POP(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_stddev-pop)'
- en: Returns the population standard deviation of *`expr`* (the square root of [`VAR_POP()`](aggregate-functions.html#function_var-pop)).
    You can also use [`STD()`](aggregate-functions.html#function_std) or [`STDDEV()`](aggregate-functions.html#function_stddev),
    which are equivalent but not standard SQL.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*的总体标准偏差（[`VAR_POP()`](aggregate-functions.html#function_var-pop)的平方根）。您还可以使用[`STD()`](aggregate-functions.html#function_std)或[`STDDEV()`](aggregate-functions.html#function_stddev)，它们是等效的但不是标准
    SQL。
- en: If there are no matching rows, or if *`expr`* is `NULL`, [`STDDEV_POP()`](aggregate-functions.html#function_stddev-pop)
    returns `NULL`.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，或者*`expr`*为`NULL`，[`STDDEV_POP()`](aggregate-functions.html#function_stddev-pop)返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax").
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*的描述如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中所述。
- en: '[`STDDEV_SAMP(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_stddev-samp)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STDDEV_SAMP(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_stddev-samp)'
- en: Returns the sample standard deviation of *`expr`* (the square root of [`VAR_SAMP()`](aggregate-functions.html#function_var-samp).
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*的样本标准偏差（[`VAR_SAMP()`](aggregate-functions.html#function_var-samp)的平方根）。
- en: If there are no matching rows, or if *`expr`* is `NULL`, [`STDDEV_SAMP()`](aggregate-functions.html#function_stddev-samp)
    returns `NULL`.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，或者*`expr`*为`NULL`，[`STDDEV_SAMP()`](aggregate-functions.html#function_stddev-samp)返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax").
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*的描述如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中所述。
- en: '[`SUM([DISTINCT] *`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_sum)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SUM([DISTINCT] *`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_sum)'
- en: Returns the sum of *`expr`*. If the return set has no rows, [`SUM()`](aggregate-functions.html#function_sum)
    returns `NULL`. The `DISTINCT` keyword can be used to sum only the distinct values
    of *`expr`*.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*的总和。如果返回集没有行，则[`SUM()`](aggregate-functions.html#function_sum)返回`NULL`。可以使用`DISTINCT`关键字仅对*`expr`*的不同值求和。
- en: If there are no matching rows, or if *`expr`* is `NULL`, [`SUM()`](aggregate-functions.html#function_sum)
    returns `NULL`.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，或者*`expr`*为`NULL`，[`SUM()`](aggregate-functions.html#function_sum)返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax"); it cannot be used with `DISTINCT`.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中描述的那样；它不能与`DISTINCT`一起使用。
- en: '[`VAR_POP(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_var-pop)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`VAR_POP(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_var-pop)'
- en: Returns the population standard variance of *`expr`*. It considers rows as the
    whole population, not as a sample, so it has the number of rows as the denominator.
    You can also use [`VARIANCE()`](aggregate-functions.html#function_variance), which
    is equivalent but is not standard SQL.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*的总体标准方差。它将行视为整体总体，而不是样本，因此分母是行数。您也可以使用[`VARIANCE()`](aggregate-functions.html#function_variance)，它是等效的但不是标准SQL。
- en: If there are no matching rows, or if *`expr`* is `NULL`, [`VAR_POP()`](aggregate-functions.html#function_var-pop)
    returns `NULL`.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，或者*`expr`*为`NULL`，[`VAR_POP()`](aggregate-functions.html#function_var-pop)返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax").
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中描述的那样。
- en: '[`VAR_SAMP(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_var-samp)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`VAR_SAMP(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_var-samp)'
- en: Returns the sample variance of *`expr`*. That is, the denominator is the number
    of rows minus one.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*的样本方差。也就是说，分母是行数减一。
- en: If there are no matching rows, or if *`expr`* is `NULL`, [`VAR_SAMP()`](aggregate-functions.html#function_var-samp)
    returns `NULL`.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，或者*`expr`*为`NULL`，[`VAR_SAMP()`](aggregate-functions.html#function_var-samp)返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax").
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中描述的那样。
- en: '[`VARIANCE(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_variance)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`VARIANCE(*`expr`*) [*`over_clause`*]`](aggregate-functions.html#function_variance)'
- en: Returns the population standard variance of *`expr`*. [`VARIANCE()`](aggregate-functions.html#function_variance)
    is a synonym for the standard SQL function [`VAR_POP()`](aggregate-functions.html#function_var-pop),
    provided as a MySQL extension.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回*`expr`*的总体标准方差。[`VARIANCE()`](aggregate-functions.html#function_variance)是标准SQL函数[`VAR_POP()`](aggregate-functions.html#function_var-pop)的同义词，作为MySQL扩展提供。
- en: If there are no matching rows, or if *`expr`* is `NULL`, [`VARIANCE()`](aggregate-functions.html#function_variance)
    returns `NULL`.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有匹配的行，或者*`expr`*为`NULL`，[`VARIANCE()`](aggregate-functions.html#function_variance)返回`NULL`。
- en: This function executes as a window function if *`over_clause`* is present. *`over_clause`*
    is as described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax").
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果存在*`over_clause`*，此函数将作为窗口函数执行。*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")中描述的那样。
