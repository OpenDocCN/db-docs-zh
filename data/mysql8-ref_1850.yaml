- en: 26.2.5 KEY Partitioning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 26.2.5 键分区
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-key.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-key.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-key.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-key.html)
- en: Partitioning by key is similar to partitioning by hash, except that where hash
    partitioning employs a user-defined expression, the hashing function for key partitioning
    is supplied by the MySQL server. NDB Cluster uses [`MD5()`](encryption-functions.html#function_md5)
    for this purpose; for tables using other storage engines, the server employs its
    own internal hashing function.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 按键分区类似于按哈希分区，不同之处在于哈希分区使用用户定义的表达式，而键分区的哈希函数由MySQL服务器提供。NDB Cluster使用[`MD5()`](encryption-functions.html#function_md5)来实现这一目的；对于使用其他存储引擎的表，服务器使用自己的内部哈希函数。
- en: 'The syntax rules for `CREATE TABLE ... PARTITION BY KEY` are similar to those
    for creating a table that is partitioned by hash. The major differences are listed
    here:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`CREATE TABLE ... PARTITION BY KEY`的语法规则与创建哈希分区的表的规则类似。主要区别如下：'
- en: '`KEY` is used rather than `HASH`.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`KEY`而不是`HASH`。
- en: '`KEY` takes only a list of zero or more column names. Any columns used as the
    partitioning key must comprise part or all of the table''s primary key, if the
    table has one. Where no column name is specified as the partitioning key, the
    table''s primary key is used, if there is one. For example, the following [`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement is valid
    in MySQL 8.0:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KEY`只接受零个或多个列名的列表。用作分区键的列必须包含表的主键的一部分或全部，如果表有主键的话。如果未指定列名作为分区键，则使用表的主键，如果有的话。例如，以下[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句在MySQL 8.0中是有效的：'
- en: '[PRE0]'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If there is no primary key but there is a unique key, then the unique key is
    used for the partitioning key:'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有主键但有唯一键，则唯一键将用作分区键：
- en: '[PRE1]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: However, if the unique key column were not defined as `NOT NULL`, then the previous
    statement would fail.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但是，如果唯一键列未定义为`NOT NULL`，则前面的语句将失败。
- en: In both of these cases, the partitioning key is the `id` column, even though
    it is not shown in the output of [`SHOW CREATE TABLE`](show-create-table.html
    "15.7.7.10 SHOW CREATE TABLE Statement") or in the `PARTITION_EXPRESSION` column
    of the Information Schema [`PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table") table.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这两种情况下，分区键是`id`列，即使在[`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW
    CREATE TABLE Statement")的输出中或者在信息模式[`PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table")表的`PARTITION_EXPRESSION`列中没有显示。
- en: 'Unlike the case with other partitioning types, columns used for partitioning
    by `KEY` are not restricted to integer or `NULL` values. For example, the following
    [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement
    is valid:'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与其他分区类型不同，`KEY`分区的列不限于整数或`NULL`值。例如，以下[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement")语句是有效的：
- en: '[PRE2]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding statement would *not* be valid, were a different partitioning
    type to be specified. (In this case, simply using `PARTITION BY KEY()` would also
    be valid and have the same effect as `PARTITION BY KEY(s1)`, since `s1` is the
    table's primary key.)
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果指定了不同的分区类型，则前面的语句将*无效*。（在这种情况下，仅使用`PARTITION BY KEY()`也是有效的，并且与`PARTITION
    BY KEY(s1)`具有相同的效果，因为`s1`是表的主键。）
- en: For additional information about this issue, see [Section 26.6, “Restrictions
    and Limitations on Partitioning”](partitioning-limitations.html "26.6 Restrictions
    and Limitations on Partitioning").
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于这个问题的更多信息，请参见[第26.6节，“分区的限制和限制”](partitioning-limitations.html "26.6 Restrictions
    and Limitations on Partitioning")。
- en: Columns with index prefixes are not supported in partitioning keys. This means
    that [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), [`BINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types"), and [`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types") columns can be used in a partitioning key, as long
    as they do not employ prefixes; because a prefix must be specified for [`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types") and [`TEXT`](blob.html "13.3.4 The BLOB and
    TEXT Types") columns in index definitions, it is not possible to use columns of
    these two types in partitioning keys. Prior to MySQL 8.0.21, columns using prefixes
    were permitted when creating, altering, or upgrading a partitioned table, even
    though they were not included in the table's partitioning key; in MySQL 8.0.21
    and later, this permissive behavior is deprecated, and the server displays appropriate
    warnings or errors when one or more such columns are used. See [Column index prefixes
    not supported for key partitioning](partitioning-limitations.html#partitioning-limitations-prefixes
    "Column index prefixes not supported for key partitioning"), for more information
    and examples.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不支持具有索引前缀的列用作分区键。这意味着[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")、[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")、[`BINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型")和[`VARBINARY`](binary-varbinary.html
    "13.3.3 BINARY和VARBINARY类型")列可以用作分区键，只要它们不使用前缀；因为在索引定义中必须指定前缀，所以无法在分区键中使用[`BLOB`](blob.html
    "13.3.4 BLOB和TEXT类型")和[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")列。在MySQL 8.0.21之前，创建、修改或升级分区表时允许使用前缀的列，即使它们未包含在表的分区键中；在MySQL
    8.0.21及更高版本中，这种宽容行为已被弃用，并且当使用一个或多个这样的列时，服务器会显示适当的警告或错误。有关更多信息和示例，请参见[不支持键分区的列索引前缀](partitioning-limitations.html#partitioning-limitations-prefixes
    "不支持键分区的列索引前缀")。
- en: Note
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Tables using the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")
    storage engine are implicitly partitioned by `KEY`, using the table's primary
    key as the partitioning key (as with other MySQL storage engines). In the event
    that the NDB Cluster table has no explicit primary key, the “hidden” primary key
    generated by the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")
    storage engine for each NDB Cluster table is used as the partitioning key.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")存储引擎的表隐式地通过`KEY`进行分区，使用表的主键作为分区键（与其他MySQL存储引擎一样）。如果NDB
    Cluster表没有显式主键，则由[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")存储引擎为每个NDB
    Cluster表生成的“隐藏”主键将用作分区键。
- en: If you define an explicit partitioning scheme for an [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") table, the table must have an explicit primary
    key, and any columns used in the partitioning expression must be part of this
    key. However, if the table uses an “empty” partitioning expression—that is, `PARTITION
    BY KEY()` with no column references—then no explicit primary key is required.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")表定义了显式分区方案，则表必须具有显式主键，并且分区表达式中使用的任何列必须是该键的一部分。但是，如果表使用“空”分区表达式——即`PARTITION
    BY KEY()`而没有列引用，则不需要显式主键。
- en: You can observe this partitioning using the [**ndb_desc**](mysql-cluster-programs-ndb-desc.html
    "25.5.9 ndb_desc — Describe NDB Tables") utility (with the `-p` option).
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用[**ndb_desc**](mysql-cluster-programs-ndb-desc.html "25.5.9 ndb_desc —
    Describe NDB Tables")实用程序（使用`-p`选项）观察到这种分区。
- en: Important
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要
- en: 'For a key-partitioned table, you cannot execute an `ALTER TABLE DROP PRIMARY
    KEY`, as doing so generates the error ERROR 1466 (HY000): Field in list of fields
    for partition function not found in table. This is not an issue for NDB Cluster
    tables which are partitioned by `KEY`; in such cases, the table is reorganized
    using the “hidden” primary key as the table''s new partitioning key. See [Chapter 25,
    *MySQL NDB Cluster 8.0*](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0").'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对于使用键分区的表，您不能执行`ALTER TABLE DROP PRIMARY KEY`，因为这样做会生成错误ERROR 1466 (HY000):
    Field in list of fields for partition function not found in table。对于使用`KEY`进行分区的NDB
    Cluster表，这不是问题；在这种情况下，表将使用“隐藏”的主键重新组织为表的新分区键。参见[第25章，*MySQL NDB Cluster 8.0*](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")。'
- en: 'It is also possible to partition a table by linear key. Here is a simple example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过线性键对表进行分区。这里是一个简单的例子：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `LINEAR` keyword has the same effect on `KEY` partitioning as it does on
    `HASH` partitioning, with the partition number being derived using a powers-of-two
    algorithm rather than modulo arithmetic. See [Section 26.2.4.1, “LINEAR HASH Partitioning”](partitioning-linear-hash.html
    "26.2.4.1 LINEAR HASH Partitioning"), for a description of this algorithm and
    its implications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`LINEAR` 关键字在 `KEY` 分区上具有与 `HASH` 分区相同的效果，分区号是使用二的幂算法而不是模算术推导出来的。参见[第26.2.4.1节，“线性哈希分区”](partitioning-linear-hash.html
    "26.2.4.1 线性哈希分区")，了解该算法及其影响的描述。'
