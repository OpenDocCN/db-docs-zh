- en: 12.9.8 Converting Between 3-Byte and 4-Byte Unicode Character Sets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.9.8 在3字节和4字节Unicode字符集之间转换
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-conversion.html](https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-conversion.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-conversion.html](https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-conversion.html)
- en: This section describes issues that you may face when converting character data
    between the `utf8mb3` and `utf8mb4` character sets.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了在`utf8mb3`和`utf8mb4`字符集之间转换字符数据时可能遇到的问题。
- en: Note
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This discussion focuses primarily on converting between `utf8mb3` and `utf8mb4`,
    but similar principles apply to converting between the `ucs2` character set and
    character sets such as `utf16` or `utf32`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本讨论主要集中在`utf8mb3`和`utf8mb4`之间的转换，但类似的原则也适用于`ucs2`字符集与`utf16`或`utf32`等字符集之间的转换。
- en: 'The `utf8mb3` and `utf8mb4` character sets differ as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`utf8mb3`和`utf8mb4`字符集的区别如下：'
- en: '`utf8mb3` supports only characters in the Basic Multilingual Plane (BMP). `utf8mb4`
    additionally supports supplementary characters that lie outside the BMP.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8mb3`仅支持基本多文种平面（BMP）中的字符。`utf8mb4`还支持位于BMP之外的补充字符。'
- en: '`utf8mb3` uses a maximum of three bytes per character. `utf8mb4` uses a maximum
    of four bytes per character.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8mb3`每个字符最多使用三个字节。`utf8mb4`每个字符最多使用四个字节。'
- en: Note
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This discussion refers to the `utf8mb3` and `utf8mb4` character set names to
    be explicit about referring to 3-byte and 4-byte UTF-8 character set data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本讨论提到`utf8mb3`和`utf8mb4`字符集名称，明确指代3字节和4字节UTF-8字符集数据。
- en: One advantage of converting from `utf8mb3` to `utf8mb4` is that this enables
    applications to use supplementary characters. One tradeoff is that this may increase
    data storage space requirements.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从`utf8mb3`转换为`utf8mb4`的一个优势是，这使应用程序能够使用补充字符。一个权衡是这可能增加数据存储空间的需求。
- en: 'In terms of table content, conversion from `utf8mb3` to `utf8mb4` presents
    no problems:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在表内容方面，从`utf8mb3`转换为`utf8mb4`没有问题：
- en: 'For a BMP character, `utf8mb4` and `utf8mb3` have identical storage characteristics:
    same code values, same encoding, same length.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于BMP字符，`utf8mb4`和`utf8mb3`具有相同的存储特性：相同的代码值，相同的编码，相同的长度。
- en: For a supplementary character, `utf8mb4` requires four bytes to store it, whereas
    `utf8mb3` cannot store the character at all. When converting `utf8mb3` columns
    to `utf8mb4`, you need not worry about converting supplementary characters because
    there are none.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于补充字符，`utf8mb4`需要四个字节来存储它，而`utf8mb3`根本无法存储该字符。当将`utf8mb3`列转换为`utf8mb4`时，您不必担心转换补充字符，因为根本没有。
- en: 'In terms of table structure, these are the primary potential incompatibilities:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在表结构方面，这些是主要的潜在不兼容性：
- en: For the variable-length character data types ([`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") and the [`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types") types), the maximum permitted length in characters is less for `utf8mb4`
    columns than for `utf8mb3` columns.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于可变长度字符数据类型（[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型") 和 [`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型") 类型），在`utf8mb4`列中允许的最大字符长度比在`utf8mb3`列中要少。
- en: For all character data types ([`CHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types"), [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), and the [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") types), the maximum number of characters that
    can be indexed is less for `utf8mb4` columns than for `utf8mb3` columns.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有字符数据类型（[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")、[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型") 和 [`TEXT`](blob.html "13.3.4 BLOB和TEXT类型") 类型），在`utf8mb4`列中可以索引的最大字符数比在`utf8mb3`列中要少。
- en: Consequently, to convert tables from `utf8mb3` to `utf8mb4`, it may be necessary
    to change some column or index definitions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要将表从`utf8mb3`转换为`utf8mb4`，可能需要更改一些列或索引定义。
- en: 'Tables can be converted from `utf8mb3` to `utf8mb4` by using [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement"). Suppose that a table has this definition:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")将表从`utf8mb3`转换为`utf8mb4`。假设一个表具有这样的定义：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following statement converts `t1` to use `utf8mb4`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句将`t1`转换为使用`utf8mb4`：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The catch when converting from `utf8mb3` to `utf8mb4` is that the maximum length
    of a column or index key is unchanged in terms of *bytes*. Therefore, it is smaller
    in terms of *characters* because the maximum length of a character is four bytes
    instead of three. For the [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), and [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") data types, watch for these issues when converting
    your MySQL tables:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从`utf8mb3`转换为`utf8mb4`的关键在于列或索引键的最大长度在*字节*方面保持不变。因此，在*字符*方面较小，因为字符的最大长度为四个字节而不是三个字节。对于[`CHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")、[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")和[`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")数据类型，在转换MySQL表时，请注意以下问题：
- en: Check all definitions of `utf8mb3` columns and make sure they do not exceed
    the maximum length for the storage engine.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查所有`utf8mb3`列的定义，并确保其不超过存储引擎的最大长度。
- en: Check all indexes on `utf8mb3` columns and make sure they do not exceed the
    maximum length for the storage engine. Sometimes the maximum can change due to
    storage engine enhancements.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查所有`utf8mb3`列上的索引，并确保其不超过存储引擎的最大长度。有时，由于存储引擎的增强，最大长度可能会发生变化。
- en: If the preceding conditions apply, you must either reduce the defined length
    of columns or indexes, or continue to use `utf8mb3` rather than `utf8mb4`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果满足上述条件，则必须减少列或索引的定义长度，或者继续使用`utf8mb3`而不是`utf8mb4`。
- en: 'Here are some examples where structural changes may be needed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可能需要进行结构更改的一些示例：
- en: A [`TINYTEXT`](blob.html "13.3.4 The BLOB and TEXT Types") column can hold up
    to 255 bytes, so it can hold up to 85 3-byte or 63 4-byte characters. Suppose
    that you have a [`TINYTEXT`](blob.html "13.3.4 The BLOB and TEXT Types") column
    that uses `utf8mb3` but must be able to contain more than 63 characters. You cannot
    convert it to `utf8mb4` unless you also change the data type to a longer type
    such as [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types").
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`TINYTEXT`](blob.html "13.3.4 BLOB和TEXT类型")列最多可以容纳255个字节，因此可以容纳85个3字节或63个4字节字符。假设您有一个使用`utf8mb3`但必须能够包含超过63个字符的[`TINYTEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")列。除非还将数据类型更改为更长的类型，如[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")，否则无法将其转换为`utf8mb4`。
- en: Similarly, a very long [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")
    column may need to be changed to one of the longer [`TEXT`](blob.html "13.3.4 The
    BLOB and TEXT Types") types if you want to convert it from `utf8mb3` to `utf8mb4`.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样，如果要将非常长的[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")列从`utf8mb3`转换为`utf8mb4`，可能需要将其更改为更长的[`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")类型之一。
- en: '`InnoDB` has a maximum index length of 767 bytes for tables that use `[COMPACT](glossary.html#glos_compact_row_format
    "compact row format")` or `[REDUNDANT](glossary.html#glos_redundant_row_format
    "redundant row format")` row format, so for `utf8mb3` or `utf8mb4` columns, you
    can index a maximum of 255 or 191 characters, respectively. If you currently have
    `utf8mb3` columns with indexes longer than 191 characters, you must index a smaller
    number of characters.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用`[COMPACT](glossary.html#glos_compact_row_format "紧凑行格式")`或`[REDUNDANT](glossary.html#glos_redundant_row_format
    "冗余行格式")`行格式的表，`InnoDB`对于`utf8mb3`或`utf8mb4`列的最大索引长度为767个字节，因此对于分别最多可以索引255或191个字符的`utf8mb3`或`utf8mb4`列。如果您当前具有超过191个字符的`utf8mb3`列索引，则必须索引较少数量的字符。
- en: 'In an `InnoDB` table that uses `[COMPACT](glossary.html#glos_compact_row_format
    "compact row format")` or `[REDUNDANT](glossary.html#glos_redundant_row_format
    "redundant row format")` row format, these column and index definitions are legal:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用`[COMPACT](glossary.html#glos_compact_row_format "紧凑行格式")`或`[REDUNDANT](glossary.html#glos_redundant_row_format
    "冗余行格式")`行格式的`InnoDB`表中，这些列和索引定义是合法的：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To use `utf8mb4` instead, the index must be smaller:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要改用`utf8mb4`，索引必须更小：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For `InnoDB` tables that use `[COMPRESSED](glossary.html#glos_compressed_row_format
    "compressed row format")` or `[DYNAMIC](glossary.html#glos_dynamic_row_format
    "dynamic row format")` row format, [index key prefixes](glossary.html#glos_index_prefix
    "index prefix") longer than 767 bytes (up to 3072 bytes) are permitted. Tables
    created with these row formats enable you to index a maximum of 1024 or 768 characters
    for `utf8mb3` or `utf8mb4` columns, respectively. For related information, see
    [Section 17.22, “InnoDB Limits”](innodb-limits.html "17.22 InnoDB Limits"), and
    [DYNAMIC Row Format](innodb-row-format.html#innodb-row-format-dynamic "DYNAMIC
    Row Format").
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于使用`[COMPRESSED](glossary.html#glos_compressed_row_format "compressed row format")`或`[DYNAMIC](glossary.html#glos_dynamic_row_format
    "dynamic row format")`行格式的`InnoDB`表，允许索引键前缀的长度超过767字节（最多3072字节）。使用这些行格式创建的表允许您为`utf8mb3`或`utf8mb4`列最多索引1024或768个字符。有关相关信息，请参见[第17.22节，“InnoDB
    限制”](innodb-limits.html "17.22 InnoDB Limits")和[DYNAMIC 行格式](innodb-row-format.html#innodb-row-format-dynamic
    "DYNAMIC Row Format")。
- en: The preceding types of changes are most likely to be required only if you have
    very long columns or indexes. Otherwise, you should be able to convert your tables
    from `utf8mb3` to `utf8mb4` without problems, using [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") as described previously.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 前述类型的更改只有在您有非常长的列或索引时才可能需要。否则，您应该能够在不出现问题的情况下将表从`utf8mb3`转换为`utf8mb4`，如前所述使用[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")。
- en: 'The following items summarize other potential incompatibilities:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下项目总结了其他潜在的不兼容性：
- en: '`SET NAMES ''utf8mb4''` causes use of the 4-byte character set for connection
    character sets. As long as no 4-byte characters are sent from the server, there
    should be no problems. Otherwise, applications that expect to receive a maximum
    of three bytes per character may have problems. Conversely, applications that
    expect to send 4-byte characters must ensure that the server understands them.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET NAMES ''utf8mb4''`导致连接字符集使用4字节字符集。只要服务器不发送4字节字符，就不应该有问题。否则，期望每个字符接收最多三个字节的应用程序可能会出现问题。相反，期望发送4字节字符的应用程序必须确保服务器理解它们。'
- en: For replication, if character sets that support supplementary characters are
    to be used on the source, all replicas must understand them as well.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于复制，如果要在源上使用支持补充字符的字符集，则所有副本必须也理解它们。
- en: Also, keep in mind the general principle that if a table has different definitions
    on the source and replica, this can lead to unexpected results. For example, the
    differences in maximum index key length make it risky to use `utf8mb3` on the
    source and `utf8mb4` on the replica.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，请记住一个一般原则，即如果表在源和副本上有不同的定义，这可能导致意外结果。例如，在源上使用`utf8mb3`和在副本上使用`utf8mb4`会导致最大索引键长度的差异，这样做是有风险的。
- en: 'If you have converted to `utf8mb4`, `utf16`, `utf16le`, or `utf32`, and then
    decide to convert back to `utf8mb3` or `ucs2` (for example, to downgrade to an
    older version of MySQL), these considerations apply:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经转换为`utf8mb4`、`utf16`、`utf16le`或`utf32`，然后决定转换回`utf8mb3`或`ucs2`（例如，降级到MySQL的旧版本），则应考虑以下事项：
- en: '`utf8mb3` and `ucs2` data should present no problems.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8mb3`和`ucs2`数据应该没有问题。'
- en: The server must be recent enough to recognize definitions referring to the character
    set from which you are converting.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器必须足够新，以识别引用正在转换的字符集的定义。
- en: For object definitions that refer to the `utf8mb4` character set, you can dump
    them with [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup
    Program") prior to downgrading, edit the dump file to change instances of `utf8mb4`
    to `utf8`, and reload the file in the older server, as long as there are no 4-byte
    characters in the data. The older server sees `utf8` in the dump file object definitions
    and create new objects that use the (3-byte) `utf8` character set.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于引用`utf8mb4`字符集的对象定义，您可以在降级之前使用[**mysqldump**](mysqldump.html "6.5.4 mysqldump
    — A Database Backup Program")进行转储，编辑转储文件以将`utf8mb4`实例更改为`utf8`，然后在旧服务器中重新加载文件，只要数据中没有4字节字符。旧服务器在转储文件对象定义中看到`utf8`，并创建使用（3字节）`utf8`字符集的新对象。
