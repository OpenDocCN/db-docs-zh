- en: 10.9.1 Controlling Query Plan Evaluation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.9.1 控制查询计划评估
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/controlling-query-plan-evaluation.html](https://dev.mysql.com/doc/refman/8.0/en/controlling-query-plan-evaluation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/controlling-query-plan-evaluation.html](https://dev.mysql.com/doc/refman/8.0/en/controlling-query-plan-evaluation.html)
- en: The task of the query optimizer is to find an optimal plan for executing an
    SQL query. Because the difference in performance between “good” and “bad” plans
    can be orders of magnitude (that is, seconds versus hours or even days), most
    query optimizers, including that of MySQL, perform a more or less exhaustive search
    for an optimal plan among all possible query evaluation plans. For join queries,
    the number of possible plans investigated by the MySQL optimizer grows exponentially
    with the number of tables referenced in a query. For small numbers of tables (typically
    less than 7 to 10) this is not a problem. However, when larger queries are submitted,
    the time spent in query optimization may easily become the major bottleneck in
    the server's performance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 查询优化器的任务是找到执行 SQL 查询的最佳计划。因为“好”和“坏”计划之间的性能差异可能是数量级的（即秒与小时甚至天），大多数查询优化器，包括 MySQL
    的优化器，在所有可能的查询评估计划中执行更多或更少的详尽搜索以找到最佳计划。对于连接查询，MySQL 优化器研究的可能计划数量随查询中引用的表的数量呈指数增长。对于少量表（通常少于
    7 到 10 个），这不是问题。然而，当提交较大的查询时，查询优化所花费的时间很容易成为服务器性能的主要瓶颈。
- en: A more flexible method for query optimization enables the user to control how
    exhaustive the optimizer is in its search for an optimal query evaluation plan.
    The general idea is that the fewer plans that are investigated by the optimizer,
    the less time it spends in compiling a query. On the other hand, because the optimizer
    skips some plans, it may miss finding an optimal plan.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更灵活的查询优化方法使用户能够控制优化器在寻找最佳查询评估计划时的详尽程度。一般的想法是，优化器研究的计划越少，编译查询所花费的时间就越少。另一方面，因为优化器跳过了一些计划，它可能会错过找到最佳计划的机会。
- en: 'The behavior of the optimizer with respect to the number of plans it evaluates
    can be controlled using two system variables:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 优化器关于评估计划数量的行为可以通过两个系统变量进行控制：
- en: The [`optimizer_prune_level`](server-system-variables.html#sysvar_optimizer_prune_level)
    variable tells the optimizer to skip certain plans based on estimates of the number
    of rows accessed for each table. Our experience shows that this kind of “educated
    guess” rarely misses optimal plans, and may dramatically reduce query compilation
    times. That is why this option is on (`optimizer_prune_level=1`) by default. However,
    if you believe that the optimizer missed a better query plan, this option can
    be switched off (`optimizer_prune_level=0`) with the risk that query compilation
    may take much longer. Note that, even with the use of this heuristic, the optimizer
    still explores a roughly exponential number of plans.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`optimizer_prune_level`](server-system-variables.html#sysvar_optimizer_prune_level)
    变量告诉优化器根据每个表访问的行数的估计跳过某些计划。我们的经验表明，这种“有根据的猜测”很少会错过最佳计划，并且可能显著减少查询编译时间。这就是为什么默认情况下此选项为开启状态（`optimizer_prune_level=1`）。然而，如果您认为优化器错过了更好的查询计划，可以关闭此选项（`optimizer_prune_level=0`），但这样做可能会导致查询编译时间更长。请注意，即使使用了这种启发式方法，优化器仍然会探索大致指数数量的计划。'
- en: The [`optimizer_search_depth`](server-system-variables.html#sysvar_optimizer_search_depth)
    variable tells how far into the “future” of each incomplete plan the optimizer
    should look to evaluate whether it should be expanded further. Smaller values
    of [`optimizer_search_depth`](server-system-variables.html#sysvar_optimizer_search_depth)
    may result in orders of magnitude smaller query compilation times. For example,
    queries with 12, 13, or more tables may easily require hours and even days to
    compile if [`optimizer_search_depth`](server-system-variables.html#sysvar_optimizer_search_depth)
    is close to the number of tables in the query. At the same time, if compiled with
    [`optimizer_search_depth`](server-system-variables.html#sysvar_optimizer_search_depth)
    equal to 3 or 4, the optimizer may compile in less than a minute for the same
    query. If you are unsure of what a reasonable value is for [`optimizer_search_depth`](server-system-variables.html#sysvar_optimizer_search_depth),
    this variable can be set to 0 to tell the optimizer to determine the value automatically.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`optimizer_search_depth`](server-system-variables.html#sysvar_optimizer_search_depth)变量告诉优化器应该查看每个不完整计划的“未来”多远，以评估是否应进一步扩展。较小的[`optimizer_search_depth`](server-system-variables.html#sysvar_optimizer_search_depth)值可能导致查询编译时间减少数个数量级。例如，具有12、13或更多表的查询如果[`optimizer_search_depth`](server-system-variables.html#sysvar_optimizer_search_depth)接近查询中的表数，可能需要几小时甚至几天才能编译。同时，如果使用[`optimizer_search_depth`](server-system-variables.html#sysvar_optimizer_search_depth)等于3或4进行编译，优化器可能在不到一分钟内为相同的查询编译完成。如果您不确定[`optimizer_search_depth`](server-system-variables.html#sysvar_optimizer_search_depth)的合理值是多少，可以将此变量设置为0，告诉优化器自动确定该值。'
