- en: 19.4.8 Switching Sources During Failover
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 19.4.8 故障转移期间切换源
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-solutions-switch.html](https://dev.mysql.com/doc/refman/8.0/en/replication-solutions-switch.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-solutions-switch.html](https://dev.mysql.com/doc/refman/8.0/en/replication-solutions-switch.html)
- en: 'You can tell a replica to change to a new source using the [`CHANGE REPLICATION
    SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION SOURCE
    TO Statement") statement (prior to MySQL 8.0.23: [`CHANGE MASTER TO`](change-master-to.html
    "15.4.2.1 CHANGE MASTER TO Statement"). The replica does not check whether the
    databases on the source are compatible with those on the replica; it simply begins
    reading and executing events from the specified coordinates in the new source''s
    binary log. In a failover situation, all the servers in the group are typically
    executing the same events from the same binary log file, so changing the source
    of the events should not affect the structure or integrity of the database, provided
    that you exercise care in making the change.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[`CHANGE REPLICATION SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE
    REPLICATION SOURCE TO Statement")语句（MySQL 8.0.23 之前为 [`CHANGE MASTER TO`](change-master-to.html
    "15.4.2.1 CHANGE MASTER TO Statement"）来告诉一个复制品切换到新的源。复制品不会检查源上的数据库是否与复制品上的数据库兼容；它只是从新源的二进制日志中指定坐标开始读取和执行事件。在故障转移情况下，组中的所有服务器通常都从相同的二进制日志文件中执行相同的事件，因此更改事件的源不应影响数据库的结构或完整性，前提是在进行更改时要小心。
- en: Replicas should be run with binary logging enabled (the [`--log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)
    option), which is the default. If you are not using GTIDs for replication, then
    the replicas should also be run with [`--log-slave-updates=OFF`](replication-options-binary-log.html#sysvar_log_slave_updates)
    (logging replica updates is the default). In this way, the replica is ready to
    become a source without restarting the replica [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server"). Assume that you have the structure shown in [Figure 19.4,
    “Redundancy Using Replication, Initial Structure”](replication-solutions-switch.html#figure_replication-redundancy-before
    "Figure 19.4 Redundancy Using Replication, Initial Structure").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 复制品应该启用二进制日志记录（[`--log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)
    选项），这是默认设置。如果您没有使用 GTIDs 进行复制，那么复制品还应该运行 [`--log-slave-updates=OFF`](replication-options-binary-log.html#sysvar_log_slave_updates)（记录复制品更新是默认设置）。这样，复制品就可以在不重新启动复制品的情况下准备成为源。假设您拥有
    [图 19.4，“使用复制实现冗余，初始结构”](replication-solutions-switch.html#figure_replication-redundancy-before
    "图 19.4 使用复制实现冗余，初始结构") 中显示的结构。
- en: '**Figure 19.4 Redundancy Using Replication, Initial Structure**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 19.4 使用复制实现冗余，初始结构**'
- en: '![Two web clients direct both database reads and database writes to a single
    MySQL source server. The MySQL source server replicates to Replica 1, Replica
    2, and Replica 3.](../Images/8777ba12061ff78ea9655aa8890310e0.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![两个网络客户端将数据库读取和写入都直接发送到单个 MySQL 源服务器。MySQL 源服务器会复制到 Replica 1、Replica 2 和
    Replica 3。](../Images/8777ba12061ff78ea9655aa8890310e0.png)'
- en: In this diagram, the `Source` holds the source database, the `Replica*` hosts
    are replicas, and the `Web Client` machines are issuing database reads and writes.
    Web clients that issue only reads (and would normally be connected to the replicas)
    are not shown, as they do not need to switch to a new server in the event of failure.
    For a more detailed example of a read/write scale-out replication structure, see
    [Section 19.4.5, “Using Replication for Scale-Out”](replication-solutions-scaleout.html
    "19.4.5 Using Replication for Scale-Out").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图中，`Source` 拥有源数据库，`Replica*` 主机是复制品，`Web Client` 机器正在发出数据库读取和写入。只发出读取的 Web
    客户端（通常连接到复制品）没有显示，因为它们在故障发生时不需要切换到新服务器。有关读写扩展复制结构的更详细示例，请参见 [19.4.5 “使用复制进行扩展”](replication-solutions-scaleout.html
    "19.4.5 使用复制进行扩展")。
- en: Each MySQL replica (`Replica 1`, `Replica 2`, and `Replica 3`) is a replica
    running with binary logging enabled, and with [`--log-slave-updates=OFF`](replication-options-binary-log.html#sysvar_log_slave_updates).
    Because updates received by a replica from the source are not written to the binary
    log when [`--log-slave-updates=OFF`](replication-options-binary-log.html#sysvar_log_slave_updates)
    is specified, the binary log on each replica is initially empty. If for some reason
    `Source` becomes unavailable, you can pick one of the replicas to become the new
    source. For example, if you pick `Replica 1`, all `Web Clients` should be redirected
    to `Replica 1`, which writes the updates to its binary log. `Replica 2` and `Replica
    3` should then replicate from `Replica 1`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 MySQL 副本（`副本 1`、`副本 2`和`副本 3`）都是启用二进制日志记录的副本，并且使用[`--log-slave-updates=OFF`](replication-options-binary-log.html#sysvar_log_slave_updates)。因为当指定[`--log-slave-updates=OFF`](replication-options-binary-log.html#sysvar_log_slave_updates)时，从源接收的更新不会写入二进制日志，所以每个副本上的二进制日志最初是空的。如果由于某种原因`Source`不可用，您可以选择其中一个副本成为新的源。例如，如果选择`副本
    1`，则所有`Web Clients`应重定向到`副本 1`，它会将更新写入其二进制日志。然后`副本 2`和`副本 3`应从`副本 1`复制。
- en: The reason for running the replica with [`--log-slave-updates=OFF`](replication-options-binary-log.html#sysvar_log_slave_updates)
    is to prevent replicas from receiving updates twice in case you cause one of the
    replicas to become the new source. If `Replica 1` has [`--log-slave-updates`](replication-options-binary-log.html#sysvar_log_slave_updates)
    enabled, which is the default, it writes any updates that it receives from `Source`
    in its own binary log. This means that, when `Replica 2` changes from `Source`
    to `Replica 1` as its source, it may receive updates from `Replica 1` that it
    has already received from `Source`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 运行副本时使用[`--log-slave-updates=OFF`](replication-options-binary-log.html#sysvar_log_slave_updates)的原因是为了防止副本在您导致其中一个副本成为新源时收到更新两次。如果`副本
    1`启用了[`--log-slave-updates`](replication-options-binary-log.html#sysvar_log_slave_updates)，这是默认设置，它会将从`Source`接收的任何更新写入自己的二进制日志。这意味着当`副本
    2`从`Source`更改为`副本 1`作为其源时，它可能会收到已经从`Source`接收过的`副本 1`的更新。
- en: Make sure that all replicas have processed any statements in their relay log.
    On each replica, issue `STOP REPLICA IO_THREAD`, then check the output of [`SHOW
    PROCESSLIST`](show-processlist.html "15.7.7.29 SHOW PROCESSLIST Statement") until
    you see `Has read all relay log`. When this is true for all replicas, they can
    be reconfigured to the new setup. On the replica `Replica 1` being promoted to
    become the source, issue [`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA
    Statement") and [`RESET MASTER`](reset-master.html "15.4.1.2 RESET MASTER Statement").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 确保所有副本都已处理其中继日志中的任何语句。在每个副本上，发出`STOP REPLICA IO_THREAD`命令，然后检查[`SHOW PROCESSLIST`](show-processlist.html
    "15.7.7.29 SHOW PROCESSLIST Statement")的输出，直到看到`Has read all relay log`。当所有副本都满足此条件时，它们可以重新配置到新的设置。在晋升为源的副本`副本
    1`上，发出[`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA Statement")和[`RESET
    MASTER`](reset-master.html "15.4.1.2 RESET MASTER Statement")命令。
- en: On the other replicas `Replica 2` and `Replica 3`, use [`STOP REPLICA`](stop-replica.html
    "15.4.2.8 STOP REPLICA Statement") and `CHANGE REPLICATION SOURCE TO SOURCE_HOST='Replica1'`
    or `CHANGE MASTER TO MASTER_HOST='Replica1'` (where `'Replica1'` represents the
    real host name of `Replica 1`). To use [`CHANGE REPLICATION SOURCE TO`](change-replication-source-to.html
    "15.4.2.3 CHANGE REPLICATION SOURCE TO Statement"), add all information about
    how to connect to `Replica 1` from `Replica 2` or `Replica 3` (*`user`*, *`password`*,
    *`port`*). When issuing the statement in this scenario, there is no need to specify
    the name of the `Replica 1` binary log file or log position to read from, since
    the first binary log file and position 4 are the defaults. Finally, execute [`START
    REPLICA`](start-replica.html "15.4.2.6 START REPLICA Statement") on `Replica 2`
    and `Replica 3`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他副本`副本 2`和`副本 3`上，使用[`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA
    Statement")和`CHANGE REPLICATION SOURCE TO SOURCE_HOST='Replica1'`或`CHANGE MASTER
    TO MASTER_HOST='Replica1'`（其中`'Replica1'`代表`副本 1`的真实主机名）。要使用[`CHANGE REPLICATION
    SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION SOURCE
    TO Statement")，添加有关如何从`副本 2`或`副本 3`连接到`副本 1`的所有信息（*`user`*、*`password`*、*`port`*）。在此场景中发出该语句时，无需指定要从中读取的`副本
    1`二进制日志文件的名称或位置，因为第一个二进制日志文件和位置 4 是默认值。最后，在`副本 2`和`副本 3`上执行[`START REPLICA`](start-replica.html
    "15.4.2.6 START REPLICA Statement")。
- en: Once the new replication setup is in place, you need to tell each `Web Client`
    to direct its statements to `Replica 1`. From that point on, all updates sent
    by `Web Client` to `Replica 1` are written to the binary log of `Replica 1`, which
    then contains every update sent to `Replica 1` since `Source` became unavailable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦新的复制设置就位，你需要告诉每个 `Web 客户端` 将其语句发送到 `Replica 1`。从那时起，`Web 客户端` 发送到 `Replica
    1` 的所有更新都将写入 `Replica 1` 的二进制日志中，其中包含自 `Source` 不可用以来发送到 `Replica 1` 的每个更新。
- en: The resulting server structure is shown in [Figure 19.5, “Redundancy Using Replication,
    After Source Failure”](replication-solutions-switch.html#figure_replication-redundancy-after
    "Figure 19.5 Redundancy Using Replication, After Source Failure").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示的服务器结构如 [图 19.5，“使用复制实现冗余，在源故障后”](replication-solutions-switch.html#figure_replication-redundancy-after)
    所示。
- en: '**Figure 19.5 Redundancy Using Replication, After Source Failure**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 19.5 使用复制实现冗余，在源故障后**'
- en: '![The MySQL source server has failed, and is no longer connected into the replication
    topology. The two web clients now direct both database reads and database writes
    to Replica 1, which is the new source. Replica 1 replicates to Replica 2 and Replica
    3.](../Images/b4ce44a439d945b6423f95d3b631ecf4.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![MySQL 源服务器已经故障，不再连接到复制拓扑。现在两个 Web 客户端将数据库读写都指向 Replica 1，这是新的源。Replica 1
    复制到 Replica 2 和 Replica 3。](../Images/b4ce44a439d945b6423f95d3b631ecf4.png)'
- en: When `Source` becomes available again, you should make it a replica of `Replica
    1`. To do this, issue on `Source` the same [`CHANGE REPLICATION SOURCE TO`](change-replication-source-to.html
    "15.4.2.3 CHANGE REPLICATION SOURCE TO Statement") (or [`CHANGE MASTER TO`](change-master-to.html
    "15.4.2.1 CHANGE MASTER TO Statement")) statement as that issued on `Replica 2`
    and `Replica 3` previously. `Source` then becomes a replica of `Replica 1` and
    picks up the `Web Client` writes that it missed while it was offline.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `Source` 再次可用时，你应该将其设置为 `Replica 1` 的副本。为此，在 `Source` 上发出与之前在 `Replica 2`
    和 `Replica 3` 上发出的相同的 [`CHANGE REPLICATION SOURCE TO`](change-replication-source-to.html)（或
    [`CHANGE MASTER TO`](change-master-to.html)）语句。然后，`Source` 成为 `Replica 1` 的副本，并接收它在离线时错过的
    `Web 客户端` 写入数据。
- en: To make `Source` a source again, use the preceding procedure as if `Replica
    1` were unavailable and `Source` were to be the new source. During this procedure,
    do not forget to run [`RESET MASTER`](reset-master.html "15.4.1.2 RESET MASTER
    Statement") on `Source` before making `Replica 1`, `Replica 2`, and `Replica 3`
    replicas of `Source`. If you fail to do this, the replicas may pick up stale writes
    from the `Web Client` applications dating from before the point at which `Source`
    became unavailable.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要使 `Source` 再次成为源，请按照上述步骤操作，就好像 `Replica 1` 不可用，而 `Source` 将成为新的源一样。在此过程中，不要忘记在将
    `Replica 1`、`Replica 2` 和 `Replica 3` 设置为 `Source` 的副本之前，在 `Source` 上运行 [`RESET
    MASTER`](reset-master.html)。如果你忘记了这一步，副本可能会接收到自 `Source` 不可用之前的时间点起的旧写入数据。
- en: You should be aware that there is no synchronization between replicas, even
    when they share the same source, and thus some replicas might be considerably
    ahead of others. This means that in some cases the procedure outlined in the previous
    example might not work as expected. In practice, however, relay logs on all replicas
    should be relatively close together.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该意识到副本之间没有同步，即使它们共享相同的源，因此某些副本可能比其他副本领先很多。这意味着在某些情况下，前面示例中概述的过程可能不会按预期工作。然而，在实践中，所有副本上的中继日志应该相对接近。
- en: One way to keep applications informed about the location of the source is to
    have a dynamic DNS entry for the source host. With `BIND`, you can use **nsupdate**
    to update the DNS dynamically.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 保持应用程序了解源位置的一种方法是为源主机设置动态 DNS 条目。使用 `BIND`，你可以使用 **nsupdate** 动态更新 DNS。
