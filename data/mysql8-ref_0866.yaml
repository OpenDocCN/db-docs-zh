- en: 14.19.4 Detection of Functional Dependence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.19.4 功能依赖的检测
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-by-functional-dependence.html](https://dev.mysql.com/doc/refman/8.0/en/group-by-functional-dependence.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-by-functional-dependence.html](https://dev.mysql.com/doc/refman/8.0/en/group-by-functional-dependence.html)
- en: 'The following discussion provides several examples of the ways in which MySQL
    detects functional dependencies. The examples use this notation:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下讨论提供了 MySQL 检测功能依赖的几个示例。示例使用以下符号表示：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Understand this as “*`X`* uniquely determines *`Y`*,” which also means that
    *`Y`* is functionally dependent on *`X`*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将其理解为“*`X`* 唯一确定 *`Y`*”，这也意味着 *`Y`* 在 *`X`* 上是函数依赖的。
- en: The examples use the `world` database, which can be downloaded from [https://dev.mysql.com/doc/index-other.html](/doc/index-other.html).
    You can find details on how to install the database on the same page.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 示例使用 `world` 数据库，可以从 [https://dev.mysql.com/doc/index-other.html](/doc/index-other.html)
    下载。您可以在同一页面找到如何安装数据库的详细信息。
- en: '[Functional Dependencies Derived from Keys](group-by-functional-dependence.html#functional-dependence-keys
    "Functional Dependencies Derived from Keys")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从键派生的功能依赖](https://dev.mysql.com/doc/refman/8.0/en/group-by-functional-dependence.html#functional-dependence-keys
    "从键派生的功能依赖")'
- en: '[Functional Dependencies Derived from Multiple-Column Keys and from Equalities](group-by-functional-dependence.html#functional-dependence-multiple-column-keys
    "Functional Dependencies Derived from Multiple-Column Keys and from Equalities")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从多列键和等式派生的功能依赖](https://dev.mysql.com/doc/refman/8.0/en/group-by-functional-dependence.html#functional-dependence-multiple-column-keys
    "从多列键和等式派生的功能依赖")'
- en: '[Functional Dependency Special Cases](group-by-functional-dependence.html#functional-dependence-special-cases
    "Functional Dependency Special Cases")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[功能依赖特殊情况](https://dev.mysql.com/doc/refman/8.0/en/group-by-functional-dependence.html#functional-dependence-special-cases
    "功能依赖特殊情况")'
- en: '[Functional Dependencies and Views](group-by-functional-dependence.html#functional-dependence-views
    "Functional Dependencies and Views")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[功能依赖和视图](https://dev.mysql.com/doc/refman/8.0/en/group-by-functional-dependence.html#functional-dependence-views
    "功能依赖和视图")'
- en: '[Combinations of Functional Dependencies](group-by-functional-dependence.html#functional-dependence-combinations
    "Combinations of Functional Dependencies")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[功能依赖的组合](https://dev.mysql.com/doc/refman/8.0/en/group-by-functional-dependence.html#functional-dependence-combinations
    "功能依赖的组合")'
- en: Functional Dependencies Derived from Keys
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从键派生的功能依赖
- en: 'The following query selects, for each country, a count of spoken languages:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下查询为每个国家选择使用语言的人数：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`co.Code` is a primary key of `co`, so all columns of `co` are functionally
    dependent on it, as expressed using this notation:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`co.Code` 是 `co` 的主键，因此 `co` 的所有列都对其具有函数依赖，使用以下符号表示：'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Thus, `co.name` is functionally dependent on `GROUP BY` columns and the query
    is valid.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`co.name` 在 `GROUP BY` 列上是函数依赖的，查询是有效的。
- en: A `UNIQUE` index over a `NOT NULL` column could be used instead of a primary
    key and the same functional dependence would apply. (This is not true for a `UNIQUE`
    index that permits `NULL` values because it permits multiple `NULL` values and
    in that case uniqueness is lost.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用在 `NOT NULL` 列上的 `UNIQUE` 索引代替主键，相同的功能依赖也适用。（对于允许 `NULL` 值的 `UNIQUE` 索引，这不成立，因为它允许多个
    `NULL` 值，此时唯一性丢失。）
- en: Functional Dependencies Derived from Multiple-Column Keys and from Equalities
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从多列键和等式派生的功能依赖
- en: 'This query selects, for each country, a list of all spoken languages and how
    many people speak them:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询为每个国家选择所有使用的语言及使用该语言的人数列表：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The pair (`cl.CountryCode`, `cl.Language`) is a two-column composite primary
    key of `cl`, so that column pair uniquely determines all columns of `cl`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: (`cl.CountryCode`, `cl.Language`) 是 `cl` 的两列复合主键，因此列对唯一确定了 `cl` 的所有列：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Moreover, because of the equality in the `WHERE` clause:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于 `WHERE` 子句中的等式：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And, because `co.Code` is primary key of `co`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，因为 `co.Code` 是 `co` 的主键：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '“Uniquely determines” relationships are transitive, therefore:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “唯一确定”关系是传递的，因此：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As a result, the query is valid.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，查询是有效的。
- en: As with the previous example, a `UNIQUE` key over `NOT NULL` columns could be
    used instead of a primary key.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的示例一样，可以使用在 `NOT NULL` 列上的 `UNIQUE` 键代替主键。
- en: 'An `INNER JOIN` condition can be used instead of `WHERE`. The same functional
    dependencies apply:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `INNER JOIN` 条件代替 `WHERE`。相同的功能依赖适用：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Functional Dependency Special Cases
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 功能依赖特殊情况
- en: Whereas an equality test in a `WHERE` condition or `INNER JOIN` condition is
    symmetric, an equality test in an outer join condition is not, because tables
    play different roles.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 而在`WHERE`条件或`INNER JOIN`条件中的相等性测试是对称的，但在外连接条件中的相等性测试不是，因为表扮演不同的角色。
- en: 'Assume that referential integrity has been accidentally broken and there exists
    a row of `countrylanguage` without a corresponding row in `country`. Consider
    the same query as in the previous example, but with a `LEFT JOIN`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设引用完整性被意外破坏，并且存在一个`countrylanguage`中没有对应行的`country`行。考虑与前一个示例中相同的查询，但使用`LEFT
    JOIN`：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For a given value of `cl.CountryCode`, the value of `co.Code` in the join result
    is either found in a matching row (determined by `cl.CountryCode`) or is `NULL`-complemented
    if there is no match (also determined by `cl.CountryCode`). In each case, this
    relationship applies:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定的`cl.CountryCode`值，在连接结果中`co.Code`的值要么在匹配行中找到（由`cl.CountryCode`确定），要么如果没有匹配则是`NULL`-补充的（也由`cl.CountryCode`确定）。在每种情况下，这种关系适用：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`cl.CountryCode` is itself functionally dependent on {`cl.CountryCode`, `cl.Language`}
    which is a primary key.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`cl.CountryCode`本身对{`cl.CountryCode`，`cl.Language`}具有函数依赖，这是一个主键。'
- en: 'If in the join result `co.Code` is `NULL`-complemented, `co.Name` is as well.
    If `co.Code` is not `NULL`-complemented, then because `co.Code` is a primary key,
    it determines `co.Name`. Therefore, in all cases:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在连接结果中`co.Code`是`NULL`-补充的，那么`co.Name`也是。如果`co.Code`没有被`NULL`-补充，那么因为`co.Code`是主键，它决定了`co.Name`。因此，在所有情况下：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Which yields:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As a result, the query is valid.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，该查询是有效的。
- en: 'However, suppose that the tables are swapped, as in this query:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，假设表被交换，如此查询：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now this relationship does *not* apply:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这种关系*不*适用：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Indeed, all `NULL`-complemented rows made for `cl` is put into a single group
    (they have both `GROUP BY` columns equal to `NULL`), and inside this group the
    value of `co.Name` can vary. The query is invalid and MySQL rejects it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，为`cl`制作的所有`NULL`-补充行被放入一个单独的组中（它们的`GROUP BY`列都等于`NULL`），在这个组内，`co.Name`的值可以变化。查询是无效的，MySQL拒绝它。
- en: Functional dependence in outer joins is thus linked to whether determinant columns
    belong to the left or right side of the `LEFT JOIN`. Determination of functional
    dependence becomes more complex if there are nested outer joins or the join condition
    does not consist entirely of equality comparisons.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 外连接中的函数依赖因此与决定性列属于`LEFT JOIN`的左侧还是右侧有关。如果存在嵌套的外连接或连接条件不完全由相等比较组成，则函数依赖的确定变得更加复杂。
- en: Functional Dependencies and Views
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数依赖和视图
- en: 'Suppose that a view on countries produces their code, their name in uppercase,
    and how many different official languages they have:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个关于国家的视图生成它们的代码、它们的大写名称以及它们拥有多少种不同的官方语言：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This definition is valid because:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个定义是有效的，因为：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the view result, the first selected column is `co.Code`, which is also the
    group column and thus determines all other selected expressions:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图结果中，第一个选择的列是`co.Code`，它也是分组列，因此决定了所有其他选择的表达式：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: MySQL understands this and uses this information, as described following.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL理解这一点并使用这些信息，如下所述。
- en: 'This query displays countries, how many different official languages they have,
    and how many cities they have, by joining the view with the `city` table:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该查询显示了国家、它们拥有多少种不同的官方语言以及它们拥有多少个城市，通过将视图与`city`表进行连接：
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This query is valid because, as seen previously:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询是有效的，因为如前所述：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'MySQL is able to discover a functional dependency in the result of a view and
    use that to validate a query which uses the view. The same would be true if `country2`
    were a derived table (or common table expression), as in:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL能够发现视图结果中的函数依赖，并使用它来验证使用该视图的查询。如果`country2`是一个派生表（或公共表达式），情况也是如此，如下所示：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Combinations of Functional Dependencies
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数依赖的组合
- en: MySQL is able to combine all of the preceding types of functional dependencies
    (key based, equality based, view based) to validate more complex queries.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL能够结合所有前述类型的函数依赖（基于键、基于相等性、基于视图）来验证更复杂的查询。
