- en: 14.17.8 JSON Utility Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.17.8 JSON 实用函数
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html](https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html](https://dev.mysql.com/doc/refman/8.0/en/json-utility-functions.html)
- en: This section documents utility functions that act on JSON values, or strings
    that can be parsed as JSON values. [`JSON_PRETTY()`](json-utility-functions.html#function_json-pretty)
    prints out a JSON value in a format that is easy to read. [`JSON_STORAGE_SIZE()`](json-utility-functions.html#function_json-storage-size)
    and [`JSON_STORAGE_FREE()`](json-utility-functions.html#function_json-storage-free)
    show, respectively, the amount of storage space used by a given JSON value and
    the amount of space remaining in a `JSON` column following a partial update.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节记录了作用于 JSON 值或可解析为 JSON 值的字符串的实用函数。[`JSON_PRETTY()`](json-utility-functions.html#function_json-pretty)
    以易于阅读的格式打印出 JSON 值。[`JSON_STORAGE_SIZE()`](json-utility-functions.html#function_json-storage-size)
    和 [`JSON_STORAGE_FREE()`](json-utility-functions.html#function_json-storage-free)
    分别显示给定 JSON 值使用的存储空间量以及部分更新后 `JSON` 列中剩余空间量。
- en: '[`JSON_PRETTY(*`json_val`*)`](json-utility-functions.html#function_json-pretty)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_PRETTY(*`json_val`*)`](json-utility-functions.html#function_json-pretty)'
- en: Provides pretty-printing of JSON values similar to that implemented in PHP and
    by other languages and database systems. The value supplied must be a JSON value
    or a valid string representation of a JSON value. Extraneous whitespaces and newlines
    present in this value have no effect on the output. For a `NULL` value, the function
    returns `NULL`. If the value is not a JSON document, or if it cannot be parsed
    as one, the function fails with an error.
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供类似于 PHP 和其他语言和数据库系统中实现的 JSON 值的漂亮打印。提供的值必须是 JSON 值或 JSON 值的有效字符串表示。该值中存在的多余空格和换行符对输出没有影响。对于
    `NULL` 值，该函数返回 `NULL`。如果值不是 JSON 文档，或者无法解析为 JSON 文档，则函数将出错。
- en: 'Formatting of the output from this function adheres to the following rules:'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数的输出格式遵循以下规则：
- en: Each array element or object member appears on a separate line, indented by
    one additional level as compared to its parent.
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个数组元素或对象成员显示在单独的一行上，相对于其父级缩进一个额外级别。
- en: Each level of indentation adds two leading spaces.
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个缩进级别增加两个前导空格。
- en: A comma separating individual array elements or object members is printed before
    the newline that separates the two elements or members.
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分隔两个元素或成员的换行符之前打印分隔单个数组元素或对象成员的逗号。
- en: The key and the value of an object member are separated by a colon followed
    by a space ('`:` ').
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象成员的键和值由冒号后跟一个空格（'`:` '）分隔。
- en: An empty object or array is printed on a single line. No space is printed between
    the opening and closing brace.
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空对象或数组打印在一行上。在开放和闭合大括号之间不打印空格。
- en: Special characters in string scalars and key names are escaped employing the
    same rules used by the [`JSON_QUOTE()`](json-creation-functions.html#function_json-quote)
    function.
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串标量和键名中的特殊字符使用与 [`JSON_QUOTE()`](json-creation-functions.html#function_json-quote)
    函数相同的规则进行转义。
- en: '[PRE0]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`JSON_STORAGE_FREE(*`json_val`*)`](json-utility-functions.html#function_json-storage-free)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_STORAGE_FREE(*`json_val`*)`](json-utility-functions.html#function_json-storage-free)'
- en: For a [`JSON`](json.html "13.5 The JSON Data Type") column value, this function
    shows how much storage space was freed in its binary representation after it was
    updated in place using [`JSON_SET()`](json-modification-functions.html#function_json-set),
    [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace), or
    [`JSON_REMOVE()`](json-modification-functions.html#function_json-remove). The
    argument can also be a valid JSON document or a string which can be parsed as
    one—either as a literal value or as the value of a user variable—in which case
    the function returns 0\. It returns a positive, nonzero value if the argument
    is a `JSON` column value which has been updated as described previously, such
    that its binary representation takes up less space than it did prior to the update.
    For a `JSON` column which has been updated such that its binary representation
    is the same as or larger than before, or if the update was not able to take advantage
    of a partial update, it returns 0; it returns `NULL` if the argument is `NULL`.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`JSON`](json.html "13.5 JSON 数据类型")列值，此函数显示了在使用[`JSON_SET()`](json-modification-functions.html#function_json-set)、[`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)或[`JSON_REMOVE()`](json-modification-functions.html#function_json-remove)进行原地更新后，其二进制表示中释放了多少存储空间。参数也可以是有效的
    JSON 文档或可以解析为 JSON 的字符串——无论是作为文字值还是作为用户变量的值——在这种情况下，函数返回 0。如果参数是已根据前述描述更新的`JSON`列值，使其二进制表示占用的空间少于更新之前，则返回一个正的非零值。对于已更新的`JSON`列，其二进制表示与之前相同或更大，或者更新无法利用部分更新的情况，返回
    0；如果参数为`NULL`，则返回`NULL`。
- en: If *`json_val`* is not `NULL`, and neither is a valid JSON document nor can
    be successfully parsed as one, an error results.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`json_val`*不为`NULL`，且既不是有效的 JSON 文档，也无法成功解析为 JSON 文档，则会产生错误。
- en: 'In this example, we create a table containing a `JSON` column, then insert
    a row containing a JSON object:'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，我们创建一个包含`JSON`列的表，然后插入一个包含 JSON 对象的行：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we update the column value using `JSON_SET()` such that a partial update
    can be performed; in this case, we replace the value pointed to by the `c` key
    (the array `[true, false]`) with one that takes up less space (the integer `1`):'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们使用`JSON_SET()`更新列值，以便执行部分更新；在这种情况下，我们用占用空间更少的值（整数`1`）替换了由`c`键指向的值（数组`[true,
    false]）：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The effects of successive partial updates on this free space are cumulative,
    as shown in this example using `JSON_SET()` to reduce the space taken up by the
    value having key `b` (and making no other changes):'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连续部分更新对此空闲空间的影响是累积的，如此示例中使用`JSON_SET()`减少具有键`b`的值占用的空间（并不进行其他更改）所示：
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Updating the column without using `JSON_SET()`, `JSON_REPLACE()`, or `JSON_REMOVE()`
    means that the optimizer cannot perform the update in place; in this case, `JSON_STORAGE_FREE()`
    returns 0, as shown here:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在不使用`JSON_SET()`、`JSON_REPLACE()`或`JSON_REMOVE()`更新列的情况下，意味着优化器无法原地执行更新；在这种情况下，`JSON_STORAGE_FREE()`返回
    0，如下所示：
- en: '[PRE4]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Partial updates of JSON documents can be performed only on column values. For
    a user variable that stores a JSON value, the value is always completely replaced,
    even when the update is performed using `JSON_SET()`:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只能对列值执行 JSON 文档的部分更新。对于存储 JSON 值的用户变量，值总是完全替换，即使使用`JSON_SET()`执行更新时也是如此：
- en: '[PRE5]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For a JSON literal, this function always returns 0:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 JSON 文本，此函数始终返回 0：
- en: '[PRE6]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[`JSON_STORAGE_SIZE(*`json_val`*)`](json-utility-functions.html#function_json-storage-size)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_STORAGE_SIZE(*`json_val`*)`](json-utility-functions.html#function_json-storage-size)'
- en: This function returns the number of bytes used to store the binary representation
    of a JSON document. When the argument is a `JSON` column, this is the space used
    to store the JSON document as it was inserted into the column, prior to any partial
    updates that may have been performed on it afterwards. *`json_val`* must be a
    valid JSON document or a string which can be parsed as one. In the case where
    it is string, the function returns the amount of storage space in the JSON binary
    representation that is created by parsing the string as JSON and converting it
    to binary. It returns `NULL` if the argument is `NULL`.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数返回用于存储 JSON 文档的二进制表示所使用的字节数。当参数为`JSON`列时，这是用于存储 JSON 文档的空间，即插入到列中之前的空间，之后可能对其执行的任何部分更新。*`json_val`*必须是有效的
    JSON 文档或可以成功解析为 JSON 的字符串。如果它是字符串，则函数返回通过将字符串解析为 JSON 并将其转换为二进制而创建的 JSON 二进制表示中的存储空间量。如果参数为`NULL`，则返回`NULL`。
- en: An error results when *`json_val`* is not `NULL`, and is not—or cannot be successfully
    parsed as—a JSON document.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当*`json_val`*不是`NULL`，并且不是或无法成功解析为JSON文档时，会产生错误。
- en: 'To illustrate this function''s behavior when used with a `JSON` column as its
    argument, we create a table named `jtable` containing a `JSON` column `jcol`,
    insert a JSON value into the table, then obtain the storage space used by this
    column with `JSON_STORAGE_SIZE()`, as shown here:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了说明当使用`JSON`列作为参数时，此函数的行为，我们创建一个名为`jtable`的表，其中包含一个`JSON`列`jcol`，将一个JSON值插入表中，然后使用`JSON_STORAGE_SIZE()`获取此列使用的存储空间，如下所示：
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: According to the output of `JSON_STORAGE_SIZE()`, the JSON document inserted
    into the column takes up 47 bytes. We also checked the amount of space freed by
    any previous partial updates of the column using [`JSON_STORAGE_FREE()`](json-utility-functions.html#function_json-storage-free);
    since no updates have yet been performed, this is 0, as expected.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据`JSON_STORAGE_SIZE()`的输出，插入到列中的JSON文档占用了47字节的空间。我们还使用[`JSON_STORAGE_FREE()`](json-utility-functions.html#function_json-storage-free)检查了通过任何先前的列部分更新释放的空间量；由于尚未执行任何更新，因此这个值是0，符合预期。
- en: 'Next we perform an [`UPDATE`](update.html "15.2.17 UPDATE Statement") on the
    table that should result in a partial update of the document stored in `jcol`,
    and then test the result as shown here:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来我们对表执行一个[`UPDATE`](update.html "15.2.17 UPDATE Statement")，这应该会导致存储在`jcol`中的文档的部分更新，然后测试结果如下：
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The value returned by `JSON_STORAGE_FREE()` in the previous query indicates
    that a partial update of the JSON document was performed, and that this freed
    3 bytes of space used to store it. The result returned by `JSON_STORAGE_SIZE()`
    is unchanged by the partial update.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前一个查询中`JSON_STORAGE_FREE()`返回的值表明对JSON文档进行了部分更新，并且这释放了3字节的用于存储它的空间。`JSON_STORAGE_SIZE()`返回的结果不受部分更新的影响。
- en: 'Partial updates are supported for updates using [`JSON_SET()`](json-modification-functions.html#function_json-set),
    [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace), or
    [`JSON_REMOVE()`](json-modification-functions.html#function_json-remove). The
    direct assignment of a value to a `JSON` column cannot be partially updated; following
    such an update, `JSON_STORAGE_SIZE()` always shows the storage used for the newly-set
    value:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`JSON_SET()`](json-modification-functions.html#function_json-set)、[`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)或[`JSON_REMOVE()`](json-modification-functions.html#function_json-remove)进行更新支持部分更新。不能对`JSON`列直接赋值进行部分更新；在此类更新之后，`JSON_STORAGE_SIZE()`始终显示新设置值的存储使用情况：
- en: '[PRE9]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A JSON user variable cannot be partially updated. This means that this function
    always shows the space currently used to store a JSON document in a user variable:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无法对JSON用户变量进行部分更新。这意味着此函数始终显示当前用于存储用户变量中JSON文档的空间：
- en: '[PRE10]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For a JSON literal, this function always returns the current storage space
    used:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于JSON文字，此函数始终返回当前使用的存储空间：
- en: '[PRE11]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
