- en: 7.6.1 Installing and Uninstalling Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.6.1 安装和卸载插件
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/plugin-loading.html](https://dev.mysql.com/doc/refman/8.0/en/plugin-loading.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/plugin-loading.html](https://dev.mysql.com/doc/refman/8.0/en/plugin-loading.html)
- en: Server plugins must be loaded into the server before they can be used. MySQL
    supports plugin loading at server startup and runtime. It is also possible to
    control the activation state of loaded plugins at startup, and to unload them
    at runtime.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在服务器中加载服务器插件才能使用它们。MySQL支持在服务器启动和运行时加载插件。还可以在启动时控制已加载插件的激活状态，并在运行时卸载它们。
- en: While a plugin is loaded, information about it is available as described in
    [Section 7.6.2, “Obtaining Server Plugin Information”](obtaining-plugin-information.html
    "7.6.2 Obtaining Server Plugin Information").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 插件加载后，可以根据[第7.6.2节“获取服务器插件信息”](obtaining-plugin-information.html "7.6.2 获取服务器插件信息")中的描述获取有关插件的信息。
- en: '[Installing Plugins](plugin-loading.html#server-plugin-installing "Installing
    Plugins")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[安装插件](plugin-loading.html#server-plugin-installing "安装插件")'
- en: '[Controlling Plugin Activation State](plugin-loading.html#server-plugin-activating
    "Controlling Plugin Activation State")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[控制插件激活状态](plugin-loading.html#server-plugin-activating "控制插件激活状态")'
- en: '[Uninstalling Plugins](plugin-loading.html#server-plugin-uninstalling "Uninstalling
    Plugins")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[卸载插件](plugin-loading.html#server-plugin-uninstalling "卸载插件")'
- en: '[Plugins and Loadable Functions](plugin-loading.html#server-plugin-loadable-function-installing
    "Plugins and Loadable Functions")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[插件和可加载函数](plugin-loading.html#server-plugin-loadable-function-installing "插件和可加载函数")'
- en: Installing Plugins
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装插件
- en: Before a server plugin can be used, it must be installed using one of the following
    methods. In the descriptions, *`plugin_name`* stands for a plugin name such as
    `innodb`, `csv`, or `validate_password`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '在使用服务器插件之前，必须使用以下方法之一安装它。在描述中，*`plugin_name`*代表插件名称，如`innodb`、`csv`或`validate_password`。 '
- en: '[Built-in Plugins](plugin-loading.html#server-plugin-installing-built-in "Built-in
    Plugins")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[内置插件](plugin-loading.html#server-plugin-installing-built-in "内置插件")'
- en: '[Plugins Registered in the mysql.plugin System Table](plugin-loading.html#server-plugin-installing-system-table
    "Plugins Registered in the mysql.plugin System Table")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[注册在mysql.plugin系统表中的插件](plugin-loading.html#server-plugin-installing-system-table
    "注册在mysql.plugin系统表中的插件")'
- en: '[Plugins Named with Command-Line Options](plugin-loading.html#server-plugin-installing-command-line
    "Plugins Named with Command-Line Options")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用命令行选项命名的插件](plugin-loading.html#server-plugin-installing-command-line "使用命令行选项命名的插件")'
- en: '[Plugins Installed with the INSTALL PLUGIN Statement](plugin-loading.html#server-plugin-installing-install-plugin
    "Plugins Installed with the INSTALL PLUGIN Statement")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用INSTALL PLUGIN语句安装的插件](plugin-loading.html#server-plugin-installing-install-plugin
    "使用INSTALL PLUGIN语句安装的插件")'
- en: Built-in Plugins
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 内置插件
- en: A built-in plugin is known by the server automatically. By default, the server
    enables the plugin at startup. Some built-in plugins permit this to be changed
    with the `--*`plugin_name`*[=*`activation_state`*]` option.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器会自动识别内置插件。默认情况下，服务器在启动时启用插件。一些内置插件允许使用`--*`plugin_name`*[=*`activation_state`*]`选项进行更改。
- en: Plugins Registered in the mysql.plugin System Table
  id: totrans-16
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 注册在mysql.plugin系统表中的插件
- en: The `mysql.plugin` system table serves as a registry of plugins (other than
    built-in plugins, which need not be registered). During the normal startup sequence,
    the server loads plugins registered in the table. By default, for a plugin loaded
    from the `mysql.plugin` table, the server also enables the plugin. This can be
    changed with the `--*`plugin_name`*[=*`activation_state`*]` option.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`mysql.plugin`系统表用作插件的注册表（内置插件无需注册）。在正常启动序列期间，服务器会加载在表中注册的插件。默认情况下，对于从`mysql.plugin`表加载的插件，服务器还会启用插件。这可以通过`--*`plugin_name`*[=*`activation_state`*]`选项进行更改。'
- en: If the server is started with the [`--skip-grant-tables`](server-options.html#option_mysqld_skip-grant-tables)
    option, plugins registered in the `mysql.plugin` table are not loaded and are
    unavailable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器使用[`--skip-grant-tables`](server-options.html#option_mysqld_skip-grant-tables)选项启动，`mysql.plugin`表中注册的插件将不会被加载，也将无法使用。
- en: Plugins Named with Command-Line Options
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用命令行选项命名的插件
- en: A plugin located in a plugin library file can be loaded at server startup with
    the [`--plugin-load`](server-options.html#option_mysqld_plugin-load), [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add),
    or [`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)
    option. Normally, for a plugin loaded at startup, the server also enables the
    plugin. This can be changed with the `--*`plugin_name`*[=*`activation_state`*]`
    option.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 位于插件库文件中的插件可以通过[`--plugin-load`](server-options.html#option_mysqld_plugin-load)、[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)或[`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)选项在服务器启动时加载。通常，对于在启动时加载的插件，服务器还会启用该插件。这可以通过`--*`plugin_name`*[=*`activation_state`*]`选项进行更改。
- en: The [`--plugin-load`](server-options.html#option_mysqld_plugin-load) and [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)
    options load plugins after built-in plugins and storage engines have initialized
    during the server startup sequence. The [`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)
    option is used to load plugins that must be available prior to initialization
    of built-in plugins and storage engines.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`--plugin-load`](server-options.html#option_mysqld_plugin-load)和[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)选项在服务器启动序列期间内置插件和存储引擎初始化后加载插件。[`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)选项用于加载必须在内置插件和存储引擎初始化之前可用的插件。'
- en: The value of each plugin-loading option is a semicolon-separated list of *`plugin_library`*
    and *`name`*`=`*`plugin_library`* values. Each *`plugin_library`* is the name
    of a library file that contains plugin code, and each *`name`* is the name of
    a plugin to load. If a plugin library is named without any preceding plugin name,
    the server loads all plugins in the library. With a preceding plugin name, the
    server loads only the named plugin from the library. The server looks for plugin
    library files in the directory named by the [`plugin_dir`](server-system-variables.html#sysvar_plugin_dir)
    system variable.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每个插件加载选项的值是一个以分号分隔的*`plugin_library`*和*`name`*`=`*`plugin_library`*值的列表。每个*`plugin_library`*是包含插件代码的库文件的名称，每个*`name`*是要加载的插件的名称。如果插件库的名称没有任何前置插件名称，服务器将加载库中的所有插件。有了前置插件名称，服务器将仅从库中加载指定的插件。服务器在由[`plugin_dir`](server-system-variables.html#sysvar_plugin_dir)系统变量命名的目录中查找插件库文件。
- en: Plugin-loading options do not register any plugin in the `mysql.plugin` table.
    For subsequent restarts, the server loads the plugin again only if [`--plugin-load`](server-options.html#option_mysqld_plugin-load),
    [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add), or [`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)
    is given again. That is, the option produces a one-time plugin-installation operation
    that persists for a single server invocation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 插件加载选项不会在`mysql.plugin`表中注册任何插件。对于后续的重新启动，只有在再次提供[`--plugin-load`](server-options.html#option_mysqld_plugin-load)、[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)或[`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)时，服务器才会再次加载插件。也就是说，该选项产生一次性的插件安装操作，仅持续一个服务器调用。
- en: '[`--plugin-load`](server-options.html#option_mysqld_plugin-load), [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add),
    and [`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)
    enable plugins to be loaded even when [`--skip-grant-tables`](server-options.html#option_mysqld_skip-grant-tables)
    is given (which causes the server to ignore the `mysql.plugin` table). [`--plugin-load`](server-options.html#option_mysqld_plugin-load),
    [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add), and
    [`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load) also
    enable plugins to be loaded at startup that cannot be loaded at runtime.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[`--plugin-load`](server-options.html#option_mysqld_plugin-load)、[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)和[`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)使得即使在给定[`--skip-grant-tables`](server-options.html#option_mysqld_skip-grant-tables)的情况下（导致服务器忽略`mysql.plugin`表），也能加载插件。[`--plugin-load`](server-options.html#option_mysqld_plugin-load)、[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)和[`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)还使得在启动时加载无法在运行时加载的插件成为可能。'
- en: 'The [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)
    option complements the [`--plugin-load`](server-options.html#option_mysqld_plugin-load)
    option:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)选项是对[`--plugin-load`](server-options.html#option_mysqld_plugin-load)选项的补充：'
- en: Each instance of [`--plugin-load`](server-options.html#option_mysqld_plugin-load)
    resets the set of plugins to load at startup, whereas [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)
    adds a plugin or plugins to the set of plugins to be loaded without resetting
    the current set. Consequently, if multiple instances of [`--plugin-load`](server-options.html#option_mysqld_plugin-load)
    are specified, only the last one applies. With multiple instances of [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add),
    all of them apply.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个[`--plugin-load`](server-options.html#option_mysqld_plugin-load)的实例都会在启动时重置要加载的插件集合，而[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)会向要加载的插件集合添加一个或多个插件，而不会重置当前集合。因此，如果指定了多个[`--plugin-load`](server-options.html#option_mysqld_plugin-load)的实例，只有最后一个会生效。对于多个[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)的实例，所有实例都会生效。
- en: The argument format is the same as for [`--plugin-load`](server-options.html#option_mysqld_plugin-load),
    but multiple instances of [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)
    can be used to avoid specifying a large set of plugins as a single long unwieldy
    [`--plugin-load`](server-options.html#option_mysqld_plugin-load) argument.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数格式与[`--plugin-load`](server-options.html#option_mysqld_plugin-load)相同，但可以使用多个[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)的实例来避免将大量插件作为单个长而难以控制的[`--plugin-load`](server-options.html#option_mysqld_plugin-load)参数进行指定。
- en: '[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add) can
    be given in the absence of [`--plugin-load`](server-options.html#option_mysqld_plugin-load),
    but any instance of [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)
    that appears before [`--plugin-load`](server-options.html#option_mysqld_plugin-load)
    has no effect because [`--plugin-load`](server-options.html#option_mysqld_plugin-load)
    resets the set of plugins to load.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在没有[`--plugin-load`](server-options.html#option_mysqld_plugin-load)的情况下给出[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)，但是在[`--plugin-load`](server-options.html#option_mysqld_plugin-load)之前出现的任何[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)实例都不会生效，因为[`--plugin-load`](server-options.html#option_mysqld_plugin-load)会重置要加载的插件集合。
- en: 'For example, these options:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这些选项：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'are equivalent to these options:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于这些选项：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'and are also equivalent to this option:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 并且等同于这个选项：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But these options:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但这些选项：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'are equivalent to this option:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于这个选项：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Plugins Installed with the INSTALL PLUGIN Statement
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用INSTALL PLUGIN语句安装的插件
- en: A plugin located in a plugin library file can be loaded at runtime with the
    [`INSTALL PLUGIN`](install-plugin.html "15.7.4.4 INSTALL PLUGIN Statement") statement.
    The statement also registers the plugin in the `mysql.plugin` table to cause the
    server to load it on subsequent restarts. For this reason, [`INSTALL PLUGIN`](install-plugin.html
    "15.7.4.4 INSTALL PLUGIN Statement") requires the [`INSERT`](privileges-provided.html#priv_insert)
    privilege for the `mysql.plugin` table.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 位于插件库文件中的插件可以通过[`INSTALL PLUGIN`](install-plugin.html "15.7.4.4 INSTALL PLUGIN
    Statement")语句在运行时加载。该语句还会在`mysql.plugin`表中注册插件，以便导致服务器在后续重新启动时加载它。因此，[`INSTALL
    PLUGIN`](install-plugin.html "15.7.4.4 INSTALL PLUGIN Statement")需要对`mysql.plugin`表的`INSERT`权限。
- en: The plugin library file base name depends on your platform. Common suffixes
    are `.so` for Unix and Unix-like systems, `.dll` for Windows.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 插件库文件的基本名称取决于您的平台。Unix和类Unix系统通常使用`.so`作为后缀，Windows则使用`.dll`。
- en: 'Example: The [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)
    option installs a plugin at server startup. To install a plugin named `myplugin`
    from a plugin library file named `somepluglib.so`, use these lines in a `my.cnf`
    file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)选项在服务器启动时安装插件。要从名为`somepluglib.so`的插件库文件中安装名为`myplugin`的插件，请在`my.cnf`文件中使用以下行：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this case, the plugin is not registered in `mysql.plugin`. Restarting the
    server without the [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)
    option causes the plugin not to be loaded at startup.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，插件不会在`mysql.plugin`中注册。在没有[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)选项的情况下重新启动服务器会导致插件在启动时不被加载。
- en: 'Alternatively, the [`INSTALL PLUGIN`](install-plugin.html "15.7.4.4 INSTALL
    PLUGIN Statement") statement causes the server to load the plugin code from the
    library file at runtime:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 替代地，[`INSTALL PLUGIN`](install-plugin.html "15.7.4.4 INSTALL PLUGIN Statement")语句会导致服务器在运行时从库文件加载插件代码：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[`INSTALL PLUGIN`](install-plugin.html "15.7.4.4 INSTALL PLUGIN Statement")
    also causes “permanent” plugin registration: The plugin is listed in the `mysql.plugin`
    table to ensure that the server loads it on subsequent restarts.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[`INSTALL PLUGIN`](install-plugin.html "15.7.4.4 INSTALL PLUGIN Statement")还会导致“永久”插件注册：插件将列在`mysql.plugin`表中，以确保服务器在后续重新启动时加载它。'
- en: 'Many plugins can be loaded either at server startup or at runtime. However,
    if a plugin is designed such that it must be loaded and initialized during server
    startup, attempts to load it at runtime using [`INSTALL PLUGIN`](install-plugin.html
    "15.7.4.4 INSTALL PLUGIN Statement") produce an error:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 许多插件可以在服务器启动时或运行时加载。但是，如果插件设计为必须在服务器启动期间加载和初始化，则尝试使用[`INSTALL PLUGIN`](install-plugin.html
    "15.7.4.4 INSTALL PLUGIN Statement")在运行时加载插件会产生错误：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this case, you must use [`--plugin-load`](server-options.html#option_mysqld_plugin-load),
    [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add), or [`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，必须使用[`--plugin-load`](server-options.html#option_mysqld_plugin-load)、[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)或[`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)。
- en: 'If a plugin is named both using a [`--plugin-load`](server-options.html#option_mysqld_plugin-load),
    [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add), or [`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)
    option and (as a result of an earlier [`INSTALL PLUGIN`](install-plugin.html "15.7.4.4 INSTALL
    PLUGIN Statement") statement) in the `mysql.plugin` table, the server starts but
    writes these messages to the error log:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果插件既使用[`--plugin-load`](server-options.html#option_mysqld_plugin-load)、[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)或[`--early-plugin-load`](server-options.html#option_mysqld_early-plugin-load)选项命名，又（由于先前的[`INSTALL
    PLUGIN`](install-plugin.html "15.7.4.4 INSTALL PLUGIN Statement")语句的结果）在`mysql.plugin`表中，服务器会启动，但会将这些消息写入错误日志：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Controlling Plugin Activation State
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 控制插件激活状态
- en: If the server knows about a plugin when it starts (for example, because the
    plugin is named using a [`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)
    option or is registered in the `mysql.plugin` table), the server loads and enables
    the plugin by default. It is possible to control activation state for such a plugin
    using a `--*`plugin_name`*[=*`activation_state`*]` startup option, where *`plugin_name`*
    is the name of the plugin to affect, such as `innodb`, `csv`, or `validate_password`.
    As with other options, dashes and underscores are interchangeable in option names.
    Also, activation state values are not case-sensitive. For example, `--my_plugin=ON`
    and `--my-plugin=on` are equivalent.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器在启动时知道插件（例如，因为插件是使用[`--plugin-load-add`](server-options.html#option_mysqld_plugin-load-add)选项命名或在`mysql.plugin`表中注册的），服务器会默认加载和启用插件。可以使用`--*`plugin_name`*[=*`activation_state`*]`启动选项来控制此类插件的激活状态，其中*`plugin_name`*是要影响的插件名称，如`innodb`、`csv`或`validate_password`。与其他选项一样，选项名称中的破折号和下划线是可以互换的。此外，激活状态值不区分大小写。例如，`--my_plugin=ON`和`--my-plugin=on`是等效的。
- en: '`--*`plugin_name`*=OFF`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--*`plugin_name`*=OFF`'
- en: Tells the server to disable the plugin. This may not be possible for certain
    built-in plugins, such as `mysql_native_password`.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 告诉服务器禁用插件。对于某些内置插件，如`mysql_native_password`，可能无法实现。
- en: '`--*`plugin_name`*[=ON]`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--*`plugin_name`*[=ON]`'
- en: Tells the server to enable the plugin. (Specifying the option as `--*`plugin_name`*`
    without a value has the same effect.) If the plugin fails to initialize, the server
    runs with the plugin disabled.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 告诉服务器启用插件。（不带值地指定选项为`--*`plugin_name`*`具有相同效果。）如果插件初始化失败，服务器将以插件禁用状态运行。
- en: '`--*`plugin_name`*=FORCE`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--*`plugin_name`*=FORCE`'
- en: Tells the server to enable the plugin, but if plugin initialization fails, the
    server does not start. In other words, this option forces the server to run with
    the plugin enabled or not at all.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 告诉服务器启用插件，但如果插件初始化失败，服务器将不会启动。换句话说，此选项强制服务器以插件启用或完全禁用的方式运行。
- en: '`--*`plugin_name`*=FORCE_PLUS_PERMANENT`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--*`plugin_name`*=FORCE_PLUS_PERMANENT`'
- en: Like `FORCE`, but in addition prevents the plugin from being unloaded at runtime.
    If a user attempts to do so with [`UNINSTALL PLUGIN`](uninstall-plugin.html "15.7.4.6 UNINSTALL
    PLUGIN Statement"), an error occurs.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似于`FORCE`，但另外防止插件在运行时卸载。如果用户尝试使用[`UNINSTALL PLUGIN`](uninstall-plugin.html
    "15.7.4.6 UNINSTALL PLUGIN Statement")这样做，将会出现错误。
- en: Plugin activation states are visible in the `LOAD_OPTION` column of the Information
    Schema [`PLUGINS`](information-schema-plugins-table.html "28.3.22 The INFORMATION_SCHEMA
    PLUGINS Table") table.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 插件激活状态可在信息模式[`PLUGINS`](information-schema-plugins-table.html "28.3.22 信息模式PLUGINS表")表的`LOAD_OPTION`列中看到。
- en: 'Suppose that `CSV`, `BLACKHOLE`, and `ARCHIVE` are built-in pluggable storage
    engines and that you want the server to load them at startup, subject to these
    conditions: The server is permitted to run if `CSV` initialization fails, must
    require that `BLACKHOLE` initialization succeeds, and should disable `ARCHIVE`.
    To accomplish that, use these lines in an option file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`CSV`、`BLACKHOLE`和`ARCHIVE`是内置的可插拔存储引擎，并且您希望服务器在启动时加载它们，但要满足以下条件：如果`CSV`初始化失败，服务器允许运行，必须要求`BLACKHOLE`初始化成功，并且应禁用`ARCHIVE`。为了实现这一点，在选项文件中使用以下行：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `--enable-*`plugin_name`*` option format is a synonym for `--*`plugin_name`*=ON`.
    The `--disable-*`plugin_name`*` and `--skip-*`plugin_name`*` option formats are
    synonyms for `--*`plugin_name`*=OFF`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`--enable-*`plugin_name`*`选项格式是`--*`plugin_name`*=ON`的同义词。`--disable-*`plugin_name`*`和`--skip-*`plugin_name`*`选项格式是`--*`plugin_name`*=OFF`的同义词。'
- en: If a plugin is disabled, either explicitly with `OFF` or implicitly because
    it was enabled with `ON` but fails to initialize, aspects of server operation
    requiring the plugin change. For example, if the plugin implements a storage engine,
    existing tables for the storage engine become inaccessible, and attempts to create
    new tables for the storage engine result in tables that use the default storage
    engine unless the [`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)
    SQL mode is enabled to cause an error to occur instead.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果插件被禁用，要么明确使用`OFF`禁用，要么因为启用了`ON`但初始化失败而隐式禁用，那么需要插件的服务器操作方面发生变化。例如，如果插件实现了存储引擎，那么现有的存储引擎表将变得无法访问，并且尝试为存储引擎创建新表将导致使用默认存储引擎的表，除非启用了[`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)
    SQL模式以导致发生错误。
- en: Disabling a plugin may require adjustment to other options. For example, if
    you start the server using [`--skip-innodb`](innodb-parameters.html#option_mysqld_innodb)
    to disable [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage
    Engine"), other `innodb_*`xxx`*` options likely also need to be omitted at startup.
    In addition, because [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine") is the default storage engine, it cannot start unless you specify
    another available storage engine with [`--default_storage_engine`](server-system-variables.html#sysvar_default_storage_engine).
    You must also set [`--default_tmp_storage_engine`](server-system-variables.html#sysvar_default_tmp_storage_engine).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用插件可能需要调整其他选项。例如，如果您使用[`--skip-innodb`](innodb-parameters.html#option_mysqld_innodb)启动服务器以禁用[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")，则启动时可能还需要省略其他`innodb_*`xxx`*`选项。此外，因为[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")是默认存储引擎，除非您使用[`--default_storage_engine`](server-system-variables.html#sysvar_default_storage_engine)指定另一个可用的存储引擎，否则它无法启动。您还必须设置[`--default_tmp_storage_engine`](server-system-variables.html#sysvar_default_tmp_storage_engine)。
- en: Uninstalling Plugins
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 卸载插件
- en: At runtime, the [`UNINSTALL PLUGIN`](uninstall-plugin.html "15.7.4.6 UNINSTALL
    PLUGIN Statement") statement disables and uninstalls a plugin known to the server.
    The statement unloads the plugin and removes it from the `mysql.plugin` system
    table, if it is registered there. For this reason, [`UNINSTALL PLUGIN`](uninstall-plugin.html
    "15.7.4.6 UNINSTALL PLUGIN Statement") statement requires the [`DELETE`](privileges-provided.html#priv_delete)
    privilege for the `mysql.plugin` table. With the plugin no longer registered in
    the table, the server does not load the plugin during subsequent restarts.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，[`UNINSTALL PLUGIN`](uninstall-plugin.html "15.7.4.6 UNINSTALL PLUGIN语句")语句会禁用并卸载服务器已知的插件。该语句会卸载插件并从`mysql.plugin`系统表中删除它（如果在那里注册）。因此，[`UNINSTALL
    PLUGIN`](uninstall-plugin.html "15.7.4.6 UNINSTALL PLUGIN语句")语句需要对`mysql.plugin`表具有[`DELETE`](privileges-provided.html#priv_delete)权限。由于插件不再在表中注册，服务器在后续重新启动期间不会加载插件。
- en: '[`UNINSTALL PLUGIN`](uninstall-plugin.html "15.7.4.6 UNINSTALL PLUGIN Statement")
    can unload a plugin regardless of whether it was loaded at runtime with [`INSTALL
    PLUGIN`](install-plugin.html "15.7.4.4 INSTALL PLUGIN Statement") or at startup
    with a plugin-loading option, subject to these conditions:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UNINSTALL PLUGIN`](uninstall-plugin.html "15.7.4.6 UNINSTALL PLUGIN语句")可以卸载插件，无论它是在运行时使用[`INSTALL
    PLUGIN`](install-plugin.html "15.7.4.4 INSTALL PLUGIN语句")加载还是在启动时使用插件加载选项加载，但要满足以下条件：'
- en: It cannot unload plugins that are built in to the server. These can be identified
    as those that have a library name of `NULL` in the output from the Information
    Schema [`PLUGINS`](information-schema-plugins-table.html "28.3.22 The INFORMATION_SCHEMA
    PLUGINS Table") table or [`SHOW PLUGINS`](show-plugins.html "15.7.7.25 SHOW PLUGINS
    Statement").
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法卸载内置于服务器中的插件。这些可以通过信息模式[`PLUGINS`](information-schema-plugins-table.html "28.3.22 The
    INFORMATION_SCHEMA PLUGINS Table")表或[`SHOW PLUGINS`](show-plugins.html "15.7.7.25 SHOW
    PLUGINS Statement")的输出中具有`NULL`库名称的插件来识别。
- en: It cannot unload plugins for which the server was started with `--*`plugin_name`*=FORCE_PLUS_PERMANENT`,
    which prevents plugin unloading at runtime. These can be identified from the `LOAD_OPTION`
    column of the [`PLUGINS`](information-schema-plugins-table.html "28.3.22 The INFORMATION_SCHEMA
    PLUGINS Table") table.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法卸载在服务器启动时使用`--*`plugin_name`*=FORCE_PLUS_PERMANENT`启动的插件，这会阻止运行时插件的卸载。这些可以从[`PLUGINS`](information-schema-plugins-table.html
    "28.3.22 The INFORMATION_SCHEMA PLUGINS Table")表的`LOAD_OPTION`列中识别出来。
- en: To uninstall a plugin that currently is loaded at server startup with a plugin-loading
    option, use this procedure.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要卸载当前在服务器启动时使用插件加载选项加载的插件，请使用以下步骤。
- en: Remove from the `my.cnf` file any options and system variables related to the
    plugin. If any plugin system variables were persisted to the `mysqld-auto.cnf`
    file, remove them using [`RESET PERSIST *`var_name`*`](reset-persist.html "15.7.8.7 RESET
    PERSIST Statement") for each one to remove it.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`my.cnf`文件中删除与插件相关的任何选项和系统变量。如果任何插件系统变量已经持久化到`mysqld-auto.cnf`文件中，请使用[`RESET
    PERSIST *`var_name`*`](reset-persist.html "15.7.8.7 RESET PERSIST Statement")来逐个删除它们。
- en: Restart the server.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动服务器。
- en: Plugins normally are installed using either a plugin-loading option at startup
    or with [`INSTALL PLUGIN`](install-plugin.html "15.7.4.4 INSTALL PLUGIN Statement")
    at runtime, but not both. However, removing options for a plugin from the `my.cnf`
    file may not be sufficient to uninstall it if at some point [`INSTALL PLUGIN`](install-plugin.html
    "15.7.4.4 INSTALL PLUGIN Statement") has also been used. If the plugin still appears
    in the output from [`PLUGINS`](information-schema-plugins-table.html "28.3.22 The
    INFORMATION_SCHEMA PLUGINS Table") or [`SHOW PLUGINS`](show-plugins.html "15.7.7.25 SHOW
    PLUGINS Statement"), use [`UNINSTALL PLUGIN`](uninstall-plugin.html "15.7.4.6 UNINSTALL
    PLUGIN Statement") to remove it from the `mysql.plugin` table. Then restart the
    server again.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常情况下，插件可以通过启动时的插件加载选项或在运行时使用[`INSTALL PLUGIN`](install-plugin.html "15.7.4.4 INSTALL
    PLUGIN Statement")来安装，但不能同时使用两者。然而，如果在某个时刻还使用了[`INSTALL PLUGIN`](install-plugin.html
    "15.7.4.4 INSTALL PLUGIN Statement")，那么仅仅从`my.cnf`文件中删除插件的选项可能不足以卸载它。如果插件仍然出现在[`PLUGINS`](information-schema-plugins-table.html
    "28.3.22 The INFORMATION_SCHEMA PLUGINS Table")或[`SHOW PLUGINS`](show-plugins.html
    "15.7.7.25 SHOW PLUGINS Statement")的输出中，请使用[`UNINSTALL PLUGIN`](uninstall-plugin.html
    "15.7.4.6 UNINSTALL PLUGIN Statement")将其从`mysql.plugin`表中移除。然后再次重启服务器。
- en: Plugins and Loadable Functions
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 插件和可加载函数
- en: A plugin when installed may also automatically install related loadable functions.
    If so, the plugin when uninstalled also automatically uninstalls those functions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 安装插件时，可能还会自动安装相关的可加载函数。如果是这样，那么卸载插件时也会自动卸载这些函数。
