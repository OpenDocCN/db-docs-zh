- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-features-timeout.html](https://dev.mysql.com/doc/refman/8.0/en/replication-features-timeout.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-features-timeout.html](https://dev.mysql.com/doc/refman/8.0/en/replication-features-timeout.html)
- en: 19.5.1.32 Replication Retries and Timeouts
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 19.5.1.32 复制重试和超时
- en: The global value of the system variable [`replica_transaction_retries`](replication-options-replica.html#sysvar_replica_transaction_retries)
    (from MySQL 8.0.26) or [`slave_transaction_retries`](replication-options-replica.html#sysvar_slave_transaction_retries)
    (before MySQL 8.0.26) sets the maximum number of times for applier threads on
    a single-threaded or multithreaded replica to automatically retry failed transactions
    before stopping. Transactions are automatically retried when the SQL thread fails
    to execute them because of an `InnoDB` deadlock, or when the transaction's execution
    time exceeds the `InnoDB` [`innodb_lock_wait_timeout`](innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
    value. If a transaction has a non-temporary error that prevents it from succeeding,
    it is not retried.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 系统变量[`replica_transaction_retries`](replication-options-replica.html#sysvar_replica_transaction_retries)的全局值（从MySQL
    8.0.26开始）或[`slave_transaction_retries`](replication-options-replica.html#sysvar_slave_transaction_retries)（在MySQL
    8.0.26之前）设置了单线程或多线程复制品上应用程序线程在停止之前自动重试失败事务的最大次数。当SQL线程由于`InnoDB`死锁而无法执行事务，或者事务的执行时间超过`InnoDB`[`innodb_lock_wait_timeout`](innodb-parameters.html#sysvar_innodb_lock_wait_timeout)值时，事务会自动重试。如果事务有一个阻止其成功的非临时错误，则不会重试。
- en: The default setting for [`replica_transaction_retries`](replication-options-replica.html#sysvar_replica_transaction_retries)
    or [`slave_transaction_retries`](replication-options-replica.html#sysvar_slave_transaction_retries)
    is 10, meaning that a failing transaction with an apparently temporary error is
    retried 10 times before the applier thread stops. Setting the variable to 0 disables
    automatic retrying of transactions. On a multithreaded replica, the specified
    number of transaction retries can take place on all applier threads of all channels.
    The Performance Schema table [`replication_applier_status`](performance-schema-replication-applier-status-table.html
    "29.12.11.6 The replication_applier_status Table") shows the total number of transaction
    retries that took place on each replication channel, in the `COUNT_TRANSACTIONS_RETRIES`
    column.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 默认设置为[`replica_transaction_retries`](replication-options-replica.html#sysvar_replica_transaction_retries)或[`slave_transaction_retries`](replication-options-replica.html#sysvar_slave_transaction_retries)为10，意味着在出现明显临时错误的失败事务会在停止应用程序线程之前重试10次。将该变量设置为0会禁用事务的自动重试。在多线程复制中，指定的事务重试次数可以在所有通道的所有应用程序线程上进行。性能模式表[`replication_applier_status`](performance-schema-replication-applier-status-table.html
    "29.12.11.6 The replication_applier_status Table")显示了每个复制通道上发生的事务重试总数，在`COUNT_TRANSACTIONS_RETRIES`列中。
- en: The process of retrying transactions can cause lag on a replica or on a Group
    Replication group member, which can be configured as a single-threaded or multithreaded
    replica. The Performance Schema table [`replication_applier_status_by_worker`](performance-schema-replication-applier-status-by-worker-table.html
    "29.12.11.8 The replication_applier_status_by_worker Table") shows detailed information
    on transaction retries by the applier threads on a single-threaded or multithreaded
    replica. This data includes timestamps showing how long it took the applier thread
    to apply the last transaction from start to finish (and when the transaction currently
    in progress was started), and how long this was after the commit on the original
    source and the immediate source. The data also shows the number of retries for
    the last transaction and the transaction currently in progress, and enables you
    to identify the transient errors that caused the transactions to be retried. You
    can use this information to see whether transaction retries are the cause of replication
    lag, and investigate the root cause of the failures that led to the retries.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 重试事务的过程可能导致复制品或组复制组成员出现滞后，可以将其配置为单线程或多线程复制品。性能模式表[`replication_applier_status_by_worker`](performance-schema-replication-applier-status-by-worker-table.html
    "29.12.11.8 The replication_applier_status_by_worker Table")显示了单线程或多线程复制品上应用程序线程重试事务的详细信息。这些数据包括时间戳，显示应用程序线程从开始到结束应用最后一个事务所花费的时间（以及当前正在进行的事务何时开始），以及这是在原始来源和直接来源上提交后多长时间。数据还显示了最后一个事务和当前正在进行的事务的重试次数，并使您能够识别导致事务重试的瞬时错误。您可以使用此信息查看事务重试是否导致复制滞后，并调查导致重试的失败的根本原因。
