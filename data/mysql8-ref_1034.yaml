- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/resignal.html](https://dev.mysql.com/doc/refman/8.0/en/resignal.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/resignal.html](https://dev.mysql.com/doc/refman/8.0/en/resignal.html)
- en: 15.6.7.4 RESIGNAL Statement
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.6.7.4 RESIGNAL 语句
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") passes on the error
    condition information that is available during execution of a condition handler
    within a compound statement inside a stored procedure or function, trigger, or
    event. [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") may change some
    or all information before passing it on. [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL
    Statement") is related to [`SIGNAL`](signal.html "15.6.7.5 SIGNAL Statement"),
    but instead of originating a condition as [`SIGNAL`](signal.html "15.6.7.5 SIGNAL
    Statement") does, [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") relays
    existing condition information, possibly after modifying it.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") 传递在存储过程、函数、触发器或事件内部的复合语句中执行条件处理程序期间可用的错误条件信息。[`RESIGNAL`](resignal.html
    "15.6.7.4 RESIGNAL Statement") 可能在传递信息之前更改部分或全部信息。[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL
    Statement") 与 [`SIGNAL`](signal.html "15.6.7.5 SIGNAL Statement") 相关，但与 [`SIGNAL`](signal.html
    "15.6.7.5 SIGNAL Statement") 不同，[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL
    Statement") 转发现有的条件信息，可能在修改后传递。'
- en: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") makes it possible
    to both handle an error and return the error information. Otherwise, by executing
    an SQL statement within the handler, information that caused the handler''s activation
    is destroyed. [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") also can
    make some procedures shorter if a given handler can handle part of a situation,
    then pass the condition “up the line” to another handler.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") 使得处理错误并返回错误信息成为可能。否则，在处理程序内执行
    SQL 语句时，导致处理程序激活的信息将被销毁。[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")
    还可以使一些过程变得更短，如果给定的处理程序可以处理部分情况，然后将条件“传递给上一级”到另一个处理程序。'
- en: No privileges are required to execute the [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL
    Statement") statement.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") 语句不需要特权。
- en: All forms of [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") require
    that the current context be a condition handler. Otherwise, [`RESIGNAL`](resignal.html
    "15.6.7.4 RESIGNAL Statement") is illegal and a `RESIGNAL when handler not active`
    error occurs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所有形式的 [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") 需要当前上下文为条件处理程序。否则，[`RESIGNAL`](resignal.html
    "15.6.7.4 RESIGNAL Statement") 是非法的，会出现 `RESIGNAL when handler not active` 错误。
- en: To retrieve information from the diagnostics area, use the [`GET DIAGNOSTICS`](get-diagnostics.html
    "15.6.7.3 GET DIAGNOSTICS Statement") statement (see [Section 15.6.7.3, “GET DIAGNOSTICS
    Statement”](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS Statement")). For information
    about the diagnostics area, see [Section 15.6.7.7, “The MySQL Diagnostics Area”](diagnostics-area.html
    "15.6.7.7 The MySQL Diagnostics Area").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要从诊断区域检索信息，请使用 [`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS
    Statement") 语句（参见 [Section 15.6.7.3, “GET DIAGNOSTICS Statement”](get-diagnostics.html
    "15.6.7.3 GET DIAGNOSTICS Statement")）。有关诊断区域的信息，请参阅 [Section 15.6.7.7, “The MySQL
    Diagnostics Area”](diagnostics-area.html "15.6.7.7 The MySQL Diagnostics Area")。
- en: '[RESIGNAL Overview](resignal.html#resignal-overview "RESIGNAL Overview")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[RESIGNAL 概述](resignal.html#resignal-overview "RESIGNAL Overview")'
- en: '[RESIGNAL Alone](resignal.html#resignal-alone "RESIGNAL Alone")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[单独使用 RESIGNAL](resignal.html#resignal-alone "RESIGNAL Alone")'
- en: '[RESIGNAL with New Signal Information](resignal.html#resignal-with-new-signal
    "RESIGNAL with New Signal Information")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[带有新信号信息的 RESIGNAL](resignal.html#resignal-with-new-signal "RESIGNAL with New
    Signal Information")'
- en: '[RESIGNAL with a Condition Value and Optional New Signal Information](resignal.html#resignal-with-condition
    "RESIGNAL with a Condition Value and Optional New Signal Information")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[带有条件值和可选新信号信息的 RESIGNAL](resignal.html#resignal-with-condition "RESIGNAL with
    a Condition Value and Optional New Signal Information")'
- en: '[RESIGNAL Requires Condition Handler Context](resignal.html#resignal-handler
    "RESIGNAL Requires Condition Handler Context")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[RESIGNAL 需要条件处理程序上下文](resignal.html#resignal-handler "RESIGNAL Requires Condition
    Handler Context")'
- en: RESIGNAL Overview
  id: totrans-13
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: RESIGNAL 概述
- en: For *`condition_value`* and *`signal_information_item`*, the definitions and
    rules are the same for [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")
    as for [`SIGNAL`](signal.html "15.6.7.5 SIGNAL Statement"). For example, the *`condition_value`*
    can be an `SQLSTATE` value, and the value can indicate errors, warnings, or “not
    found.” For additional information, see [Section 15.6.7.5, “SIGNAL Statement”](signal.html
    "15.6.7.5 SIGNAL Statement").
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*`condition_value`*和*`signal_information_item`*，[`RESIGNAL`](resignal.html
    "15.6.7.4 RESIGNAL Statement")的定义和规则与[`SIGNAL`](signal.html "15.6.7.5 SIGNAL Statement")相同。例如，*`condition_value`*可以是`SQLSTATE`值，该值可以指示错误、警告或“未找到”。有关更多信息，请参阅[第15.6.7.5节，“SIGNAL
    Statement”](signal.html "15.6.7.5 SIGNAL Statement")。
- en: 'The [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") statement takes
    *`condition_value`* and `SET` clauses, both of which are optional. This leads
    to several possible uses:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")语句接受*`condition_value`*和`SET`子句，两者都是可选的。这导致了几种可能的用法：'
- en: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") alone:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单独的[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") with new signal information:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")带有新的信号信息：'
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") with a condition
    value and possibly new signal information:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有条件值和可能的新信号信息的[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")：
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These use cases all cause changes to the diagnostics and condition areas:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些用例都会导致诊断和条件区域的更改：
- en: A diagnostics area contains one or more condition areas.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诊断区包含一个或多个条件区域。
- en: A condition area contains condition information items, such as the `SQLSTATE`
    value, `MYSQL_ERRNO`, or `MESSAGE_TEXT`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件区域包含条件信息项，例如`SQLSTATE`值、`MYSQL_ERRNO`或`MESSAGE_TEXT`。
- en: 'There is a stack of diagnostics areas. When a handler takes control, it pushes
    a diagnostics area to the top of the stack, so there are two diagnostics areas
    during handler execution:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个诊断区堆栈。当处理程序控制时，它会将诊断区推送到堆栈顶部，因此在处理程序执行期间有两个诊断区：
- en: The first (current) diagnostics area, which starts as a copy of the last diagnostics
    area, but is overwritten by the first statement in the handler that changes the
    current diagnostics area.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个（当前）诊断区，最初是最后一个诊断区的副本，但会被第一个改变当前诊断区的处理程序中的第一个语句覆盖。
- en: The last (stacked) diagnostics area, which has the condition areas that were
    set up before the handler took control.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个（堆叠的）诊断区，其中包含在处理程序控制之前设置的条件区域。
- en: The maximum number of condition areas in a diagnostics area is determined by
    the value of the [`max_error_count`](server-system-variables.html#sysvar_max_error_count)
    system variable. See [Diagnostics Area-Related System Variables](diagnostics-area.html#diagnostics-area-system-variables
    "Diagnostics Area-Related System Variables").
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 诊断区中条件区域的最大数量由[`max_error_count`](server-system-variables.html#sysvar_max_error_count)系统变量的值确定。请参阅[诊断区相关系统变量](diagnostics-area.html#diagnostics-area-system-variables
    "诊断区相关系统变量")。
- en: RESIGNAL Alone
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 单独的RESIGNAL
- en: A simple [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") alone means
    “pass on the error with no change.” It restores the last diagnostics area and
    makes it the current diagnostics area. That is, it “pops” the diagnostics area
    stack.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")单独表示“不做任何更改地传递错误”。它恢复最后的诊断区并将其设置为当前诊断区。也就是说，它“弹出”诊断区堆栈。
- en: Within a condition handler that catches a condition, one use for [`RESIGNAL`](resignal.html
    "15.6.7.4 RESIGNAL Statement") alone is to perform some other actions, and then
    pass on without change the original condition information (the information that
    existed before entry into the handler).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在捕获条件的条件处理程序中，[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")单独的一个用法是执行其他操作，然后在不改变原始条件信息的情况下继续传递（即在进入处理程序之前存在的信息）。
- en: 'Example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Suppose that the `DROP TABLE xx` statement fails. The diagnostics area stack
    looks like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`DROP TABLE xx`语句失败。诊断区堆栈如下：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then execution enters the `EXIT` handler. It starts by pushing a diagnostics
    area to the top of the stack, which now looks like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后执行进入`EXIT`处理程序。它开始通过将诊断区推送到堆栈顶部，现在看起来像这样：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point, the contents of the first (current) and second (stacked) diagnostics
    areas are the same. The first diagnostics area may be modified by statements executing
    subsequently within the handler.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，第一个（当前）和第二个（堆叠的）诊断区的内容相同。第一个诊断区可能会被在处理程序内随后执行的语句修改。
- en: 'Usually a procedure statement clears the first diagnostics area. `BEGIN` is
    an exception, it does not clear, it does nothing. `SET` is not an exception, it
    clears, performs the operation, and produces a result of “success.” The diagnostics
    area stack now looks like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，过程语句会清除第一个诊断区。`BEGIN`是一个例外，它不清除，什么也不做。`SET`不是例外，它会清除，执行操作，并产生“成功”的结果。诊断区堆栈现在看��来像这样：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At this point, if `@a = 0`, [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")
    pops the diagnostics area stack, which now looks like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，如果`@a = 0`，[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")会弹出诊断区堆栈，现在看起来像这样：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And that is what the caller sees.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是调用者看到的。
- en: 'If `@a` is not 0, the handler simply ends, which means that there is no more
    use for the current diagnostics area (it has been “handled”), so it can be thrown
    away, causing the stacked diagnostics area to become the current diagnostics area
    again. The diagnostics area stack looks like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`@a`不等于0，处理程序简单地结束，这意味着当前诊断区不再有用（已经被“处理”），因此可以丢弃它，导致堆叠的诊断区变成当前诊断区。诊断区堆栈看起来像这样：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The details make it look complex, but the end result is quite useful: Handlers
    can execute without destroying information about the condition that caused activation
    of the handler.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 细节使其看起来复杂，但最终结果非常有用：处理程序可以执行而不破坏导致处理程序激活的条件的信息。
- en: RESIGNAL with New Signal Information
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 带有新信号信息的RESIGNAL
- en: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") with a `SET` clause
    provides new signal information, so the statement means “pass on the error with
    changes”:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 带有`SET`子句的[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")提供新的信号信息，因此该语句意味着“传递带有更改的错误”：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As with [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") alone, the
    idea is to pop the diagnostics area stack so that the original information goes
    out. Unlike [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") alone, anything
    specified in the `SET` clause changes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与单独使用[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")一样，其思想是弹出诊断区堆栈，以便原始信息被清除。与单独使用[`RESIGNAL`](resignal.html
    "15.6.7.4 RESIGNAL Statement")不同的是，`SET`子句中指定的任何内容都会发生变化。
- en: 'Example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Remember from the previous discussion that [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL
    Statement") alone results in a diagnostics area stack like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的讨论中记得，单独使用[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")会导致诊断区堆栈如下：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `RESIGNAL SET MYSQL_ERRNO = 5` statement results in this stack instead,
    which is what the caller sees:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`RESIGNAL SET MYSQL_ERRNO = 5`语句导致了这个堆栈，这是调用者看到的：'
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In other words, it changes the error number, and nothing else.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，它改变了错误编号，而不会改变其他任何东西。
- en: The [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") statement can
    change any or all of the signal information items, making the first condition
    area of the diagnostics area look quite different.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")语句可以更改任何或所有信号信息项，使诊断区的第一个条件区域看起来完全不同。'
- en: RESIGNAL with a Condition Value and Optional New Signal Information
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 带有条件值和可选新信号信息的RESIGNAL
- en: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") with a condition
    value means “push a condition into the current diagnostics area.” If the `SET`
    clause is present, it also changes the error information.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 带有条件值的[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")意味着“将一个条件推入当前诊断区。”如果存在`SET`子句，它还会改变错误信息。
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This form of [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") restores
    the last diagnostics area and makes it the current diagnostics area. That is,
    it “pops” the diagnostics area stack, which is the same as what a simple [`RESIGNAL`](resignal.html
    "15.6.7.4 RESIGNAL Statement") alone would do. However, it also changes the diagnostics
    area depending on the condition value or signal information.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这种形式的[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")恢复了最后的诊断区并将其作为当前诊断区。也就是说，它“弹出”了诊断区堆栈，这与简单使用[`RESIGNAL`](resignal.html
    "15.6.7.4 RESIGNAL Statement")的效果相同。但是，它还会根据条件值或信号信息更改诊断区。
- en: 'Example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is similar to the previous example, and the effects are the same, except
    that if [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") happens, the
    current condition area looks different at the end. (The reason the condition adds
    to rather than replaces the existing condition is the use of a condition value.)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这与之前的例子类似，效果相同，只是如果发生[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")，则最终当前条件区域看起来不同。（条件增加而不是替换现有条件的原因是使用了条件值。）
- en: 'The [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") statement includes
    a condition value (`SQLSTATE ''45000''`), so it adds a new condition area, resulting
    in a diagnostics area stack that looks like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") 语句包括一个条件值（`SQLSTATE
    ''45000''`），因此它添加了一个新的条件区域，导致诊断区域堆栈如下所示：'
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The result of [`CALL p()`](call.html "15.2.1 CALL Statement") and [`SHOW ERRORS`](show-errors.html
    "15.7.7.17 SHOW ERRORS Statement") for this example is:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，[`CALL p()`](call.html "15.2.1 CALL Statement") 和 [`SHOW ERRORS`](show-errors.html
    "15.7.7.17 SHOW ERRORS Statement") 的结果是：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: RESIGNAL Requires Condition Handler Context
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: RESIGNAL 需要条件处理程序上下文
- en: 'All forms of [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") require
    that the current context be a condition handler. Otherwise, [`RESIGNAL`](resignal.html
    "15.6.7.4 RESIGNAL Statement") is illegal and a `RESIGNAL when handler not active`
    error occurs. For example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有形式的[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement")都要求当前上下文是一个条件处理程序。否则，[`RESIGNAL`](resignal.html
    "15.6.7.4 RESIGNAL Statement")是非法的，会出现`RESIGNAL when handler not active`错误。例如：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is a more difficult example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个更加困难的例子：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") occurs within the
    stored function `f()`. Although `f()` itself is invoked within the context of
    the `EXIT` handler, execution within `f()` has its own context, which is not handler
    context. Thus, `RESIGNAL` within `f()` results in a “handler not active” error.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL Statement") 发生在存储函数 `f()` 中。虽然
    `f()` 本身是在 `EXIT` 处理程序的上下文中调用的，但在 `f()` 中的执行有其自己的上下文，这不是处理程序上下文。因此，在 `f()` 中的
    `RESIGNAL` 导致“处理程序未激活”错误。'
