- en: 14.5 Flow Control Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.5 流程控制函数
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html](https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html](https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html)
- en: '**Table 14.7 Flow Control Operators**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.7 流程控制运算符**'
- en: '| Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`CASE`](flow-control-functions.html#operator_case) | Case operator |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`CASE`](flow-control-functions.html#operator_case) | Case运算符 |'
- en: '| [`IF()`](flow-control-functions.html#function_if) | If/else construct |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`IF()`](flow-control-functions.html#function_if) | 如果/否则构造 |'
- en: '| [`IFNULL()`](flow-control-functions.html#function_ifnull) | Null if/else
    construct |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`IFNULL()`](flow-control-functions.html#function_ifnull) | 如果/否则构造 |'
- en: '| [`NULLIF()`](flow-control-functions.html#function_nullif) | Return NULL if
    expr1 = expr2 |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`NULLIF()`](flow-control-functions.html#function_nullif) | 如果`expr1 = expr2`则返回`NULL`
    |'
- en: '[`CASE *`value`* WHEN *`compare_value`* THEN *`result`* [WHEN *`compare_value`*
    THEN *`result`* ...] [ELSE *`result`*] END`](flow-control-functions.html#operator_case)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CASE *`value`* WHEN *`compare_value`* THEN *`result`* [WHEN *`compare_value`*
    THEN *`result`* ...] [ELSE *`result`*] END`](flow-control-functions.html#operator_case)'
- en: '[`CASE WHEN *`condition`* THEN *`result`* [WHEN *`condition`* THEN *`result`*
    ...] [ELSE *`result`*] END`](flow-control-functions.html#operator_case)'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CASE WHEN *`condition`* THEN *`result`* [WHEN *`condition`* THEN *`result`*
    ...] [ELSE *`result`*] END`](flow-control-functions.html#operator_case)'
- en: The first [`CASE`](flow-control-functions.html#operator_case) syntax returns
    the *`result`* for the first `*`value`*=*`compare_value`*` comparison that is
    true. The second syntax returns the result for the first condition that is true.
    If no comparison or condition is true, the result after `ELSE` is returned, or
    `NULL` if there is no `ELSE` part.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个[`CASE`](flow-control-functions.html#operator_case)语法返回第一个`*value`*=*`compare_value`*为真的`*result*`。第二个语法返回第一个为真的条件的结果。如果没有比较或条件为真，则返回`ELSE`后的结果，如果没有`ELSE`部分则返回`NULL`。
- en: Note
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The syntax of the [`CASE`](flow-control-functions.html#operator_case) *operator*
    described here differs slightly from that of the SQL [`CASE`](case.html "15.6.5.1 CASE
    Statement") *statement* described in [Section 15.6.5.1, “CASE Statement”](case.html
    "15.6.5.1 CASE Statement"), for use inside stored programs. The [`CASE`](case.html
    "15.6.5.1 CASE Statement") statement cannot have an `ELSE NULL` clause, and it
    is terminated with `END CASE` instead of `END`.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此处描述的[`CASE`](flow-control-functions.html#operator_case) *运算符*的语法与[第15.6.5.1节“CASE语句”](case.html
    "15.6.5.1 CASE Statement")中描述的SQL [`CASE`](case.html "15.6.5.1 CASE Statement")
    *语句*略有不同，用于存储程序内部。[`CASE`](case.html "15.6.5.1 CASE Statement")语句不能有`ELSE NULL`子句，并以`END
    CASE`而不是`END`结束。
- en: 'The return type of a [`CASE`](flow-control-functions.html#operator_case) expression
    result is the aggregated type of all result values:'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CASE`](flow-control-functions.html#operator_case)表达式的返回类型是所有结果值的聚合类型：'
- en: 'If all types are numeric, the aggregated type is also numeric:'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有类型都是数值型，则聚合类型也是数值型：
- en: If at least one argument is double precision, the result is double precision.
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果至少有一个参数是双精度，则结果为双精度。
- en: Otherwise, if at least one argument is [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC"), the result is [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC").
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，如果至少有一个参数是[`DECIMAL`](fixed-point-types.html "13.1.3 固定点类型（精确值）- DECIMAL,
    NUMERIC")，则结果为[`DECIMAL`](fixed-point-types.html "13.1.3 固定点类型（精确值）- DECIMAL,
    NUMERIC")。
- en: 'Otherwise, the result is an integer type (with one exception):'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，结果是整数类型（有一个例外）：
- en: If all integer types are all signed or all unsigned, the result is the same
    sign and the precision is the highest of all specified integer types (that is,
    [`TINYINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`SMALLINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`MEDIUMINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT"), [`INT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), or [`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT")).
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有整数类型都是全部有符号或全部无符号，结果是相同符号且精度是所有指定整数类型中最高的（即[`TINYINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")、[`SMALLINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")、[`MEDIUMINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")、[`INT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")或[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")）。
- en: If there is a combination of signed and unsigned integer types, the result is
    signed and the precision may be higher. For example, if the types are signed [`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") and unsigned [`INT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), the result is signed
    [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER, INT,
    SMALLINT, TINYINT, MEDIUMINT, BIGINT").
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有符号和无符号整数类型的组合，结果是有符号的，精度可能更高。例如，如果类型是有符号的[`INT`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")和无符号的[`INT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")，结果是有符号的[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")。
- en: The exception is unsigned [`BIGINT`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") combined
    with any signed integer type. The result is [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") with sufficient precision
    and scale 0.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例外情况是无符号的[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT")与任何有符号整数类型相结合。结果是具有足够精度和标度为0的[`DECIMAL`](fixed-point-types.html
    "13.1.3 固定点类型（精确值） - DECIMAL, NUMERIC")。
- en: If all types are [`BIT`](bit-type.html "13.1.5 Bit-Value Type - BIT"), the result
    is [`BIT`](bit-type.html "13.1.5 Bit-Value Type - BIT"). Otherwise, [`BIT`](bit-type.html
    "13.1.5 Bit-Value Type - BIT") arguments are treated similar to [`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT").
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有类型都是[`BIT`](bit-type.html "13.1.5 位值类型 - BIT")，结果是[`BIT`](bit-type.html
    "13.1.5 位值类型 - BIT")���否则，[`BIT`](bit-type.html "13.1.5 位值类型 - BIT")参数被视为类似于[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")。
- en: If all types are [`YEAR`](year.html "13.2.4 The YEAR Type"), the result is [`YEAR`](year.html
    "13.2.4 The YEAR Type"). Otherwise, `YEAR` arguments are treated similar to [`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT").
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有类型都是[`YEAR`](year.html "13.2.4 YEAR 类型")，结果是[`YEAR`](year.html "13.2.4 YEAR
    类型")。否则，`YEAR` 参数被视为类似于[`INT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")。
- en: If all types are character string ([`CHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types") or [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")), the result
    is [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") with maximum length
    determined by the longest character length of the operands.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有类型都是字符字符串（[`CHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型")或[`VARCHAR`](char.html
    "13.3.2 CHAR 和 VARCHAR 类型"))，结果是具有由操作数的最长字符长度确定的最大长度的[`VARCHAR`](char.html "13.3.2 CHAR
    和 VARCHAR 类型")。
- en: If all types are character or binary string, the result is [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types").
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有类型都是字符或二进制字符串，结果是[`VARBINARY`](binary-varbinary.html "13.3.3 BINARY 和 VARBINARY
    类型")。
- en: '[`SET`](set.html "13.3.6 The SET Type") and [`ENUM`](enum.html "13.3.5 The
    ENUM Type") are treated similar to [`VARCHAR`](char.html "13.3.2 The CHAR and
    VARCHAR Types"); the result is [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types").'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SET`](set.html "13.3.6 SET 类型")和[`ENUM`](enum.html "13.3.5 ENUM 类型")被视为类似于[`VARCHAR`](char.html
    "13.3.2 CHAR 和 VARCHAR 类型")；结果是[`VARCHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型")。'
- en: If all types are [`JSON`](json.html "13.5 The JSON Data Type"), the result is
    [`JSON`](json.html "13.5 The JSON Data Type").
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有类型都是[`JSON`](json.html "13.5 The JSON Data Type")，结果是[`JSON`](json.html
    "13.5 The JSON Data Type")。
- en: 'If all types are temporal, the result is temporal:'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有类型都是时间类型，结果就是时间类型：
- en: If all temporal types are [`DATE`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types"), [`TIME`](time.html "13.2.3 The TIME Type"), or [`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), the result is [`DATE`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), [`TIME`](time.html "13.2.3 The
    TIME Type"), or [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types"), respectively.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有时间类型都是[`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")、[`TIME`](time.html
    "13.2.3 The TIME Type")或[`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types")，结果分别是[`DATE`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types")、[`TIME`](time.html "13.2.3 The TIME Type")或[`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")。
- en: Otherwise, for a mix of temporal types, the result is [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types").
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，对于时间类型的混合，结果是[`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types")。
- en: If all types are `GEOMETRY`, the result is `GEOMETRY`.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有类型都是`GEOMETRY`，结果就是`GEOMETRY`。
- en: If any type is [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), the result
    is [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types").
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何类型是[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")，结果是[`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types")。
- en: For all other type combinations, the result is [`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types").
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有其他类型组合，结果是[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")。
- en: Literal `NULL` operands are ignored for type aggregation.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于类型聚合，字面`NULL`操作数将被忽略。
- en: '[PRE0]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`IF(*`expr1`*,*`expr2`*,*`expr3`*)`](flow-control-functions.html#function_if)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IF(*`expr1`*,*`expr2`*,*`expr3`*)`](flow-control-functions.html#function_if)'
- en: If *`expr1`* is `TRUE` (`*`expr1`* <> 0` and `*`expr1`* IS NOT NULL`), [`IF()`](flow-control-functions.html#function_if)
    returns *`expr2`*. Otherwise, it returns *`expr3`*.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`expr1`*为`TRUE`（`*`expr1`* <> 0`且`*`expr1`* IS NOT NULL`），[`IF()`](flow-control-functions.html#function_if)返回*`expr2`*。否则，返回*`expr3`*。
- en: Note
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: There is also an [`IF`](if.html "15.6.5.2 IF Statement") *statement*, which
    differs from the [`IF()`](flow-control-functions.html#function_if) *function*
    described here. See [Section 15.6.5.2, “IF Statement”](if.html "15.6.5.2 IF Statement").
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有一个[`IF`](if.html "15.6.5.2 IF Statement") *语句*，与此处描述的[`IF()`](flow-control-functions.html#function_if)
    *函数*不同。请参见[第15.6.5.2节，“IF语句”](if.html "15.6.5.2 IF Statement")。
- en: If only one of *`expr2`* or *`expr3`* is explicitly `NULL`, the result type
    of the [`IF()`](flow-control-functions.html#function_if) function is the type
    of the non-`NULL` expression.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`expr2`*或*`expr3`*中只有一个明确为`NULL`，则[`IF()`](flow-control-functions.html#function_if)函数的结果类型是非`NULL`表达式的类型。
- en: 'The default return type of [`IF()`](flow-control-functions.html#function_if)
    (which may matter when it is stored into a temporary table) is calculated as follows:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`IF()`](flow-control-functions.html#function_if)的默认返回类型（当它存储到临时表时可能很重要）计算如下：'
- en: If *`expr2`* or *`expr3`* produce a string, the result is a string.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*`expr2`*或*`expr3`*产生字符串，则结果是字符串。
- en: If *`expr2`* and *`expr3`* are both strings, the result is case-sensitive if
    either string is case-sensitive.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`expr2`*和*`expr3`*都是字符串，则结果是区分大小写的，如果任一字符串是区分大小写的。
- en: If *`expr2`* or *`expr3`* produce a floating-point value, the result is a floating-point
    value.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*`expr2`*或*`expr3`*产生浮点值，则结果是浮点值。
- en: If *`expr2`* or *`expr3`* produce an integer, the result is an integer.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*`expr2`*或*`expr3`*产生整数，则结果是整数。
- en: '[PRE1]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`IFNULL(*`expr1`*,*`expr2`*)`](flow-control-functions.html#function_ifnull)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IFNULL(*`expr1`*,*`expr2`*)`](flow-control-functions.html#function_ifnull)'
- en: If *`expr1`* is not `NULL`, [`IFNULL()`](flow-control-functions.html#function_ifnull)
    returns *`expr1`*; otherwise it returns *`expr2`*.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`expr1`*不是`NULL`，[`IFNULL()`](flow-control-functions.html#function_ifnull)返回*`expr1`*；否则返回*`expr2`*。
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The default return type of [`IFNULL(*`expr1`*,*`expr2`*)`](flow-control-functions.html#function_ifnull)
    is the more “general” of the two expressions, in the order `STRING`, `REAL`, or
    `INTEGER`. Consider the case of a table based on expressions or where MySQL must
    internally store a value returned by [`IFNULL()`](flow-control-functions.html#function_ifnull)
    in a temporary table:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`IFNULL(*`expr1`*,*`expr2`*)`](flow-control-functions.html#function_ifnull)的默认返回类型是两个表达式中更“通用”的类型，按顺序为`STRING`、`REAL`或`INTEGER`。考虑基于表达式的表或MySQL必须在临时表中内部存储[`IFNULL()`](flow-control-functions.html#function_ifnull)返回的值的情况：'
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, the type of the `test` column is [`VARBINARY(4)`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") (a string type).
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，`test`列的类型是[`VARBINARY(4)`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型")(一个字符串类型)。
- en: '[`NULLIF(*`expr1`*,*`expr2`*)`](flow-control-functions.html#function_nullif)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NULLIF(*`expr1`*,*`expr2`*)`](flow-control-functions.html#function_nullif)'
- en: Returns `NULL` if `*`expr1`* = *`expr2`*` is true, otherwise returns *`expr1`*.
    This is the same as [`CASE WHEN *`expr1`* = *`expr2`* THEN NULL ELSE *`expr1`*
    END`](flow-control-functions.html#operator_case).
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`*`expr1`* = *`expr2`*`为真，则返回`NULL`，否则返回*`expr1`*。这与[`CASE WHEN *`expr1`*
    = *`expr2`* THEN NULL ELSE *`expr1`* END`](flow-control-functions.html#operator_case)相同。
- en: The return value has the same type as the first argument.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回值与第一个参数具有相同的类型。
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: MySQL evaluates *`expr1`* twice if the arguments are not equal.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL在参数不相等时会对*`expr1`*进行两次评估。
- en: The handling of system variable values by these functions changed in MySQL 8.0.22\.
    For each of these functions, if the first argument contains only characters present
    in the character set and collation used by the second argument (and it is constant),
    the latter character set and collation is used to make the comparison. In MySQL
    8.0.22 and later, system variable values are handled as column values of the same
    character and collation. Some queries using these functions with system variables
    that were previously successful may subsequently be rejected with Illegal mix
    of collations. In such cases, you should cast the system variable to the correct
    character set and collation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0.22中这些函数对系统变量值的处理发生了变化。对于这些函数中的每一个，如果第一个参数仅包含在第二个参数使用的字符集和校对规则中存在的字符（且它是常量），则后者的字符集和校对规则用于进行比较。在MySQL
    8.0.22及更高版本中，系统变量值被处理为具有相同字符集和校对规则的列值。一些使用这些函数与系统变量的查询可能会被拒绝，出现Illegal mix of
    collations。在这种情况下，您应该将系统变量转换为正确的字符集和校对规则。
