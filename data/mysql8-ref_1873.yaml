- en: 27.3.1 Trigger Syntax and Examples
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 27.3.1 触发器语法和示例
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/trigger-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/trigger-syntax.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/trigger-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/trigger-syntax.html)
- en: To create a trigger or drop a trigger, use the [`CREATE TRIGGER`](create-trigger.html
    "15.1.22 CREATE TRIGGER Statement") or [`DROP TRIGGER`](drop-trigger.html "15.1.34 DROP
    TRIGGER Statement") statement, described in [Section 15.1.22, “CREATE TRIGGER
    Statement”](create-trigger.html "15.1.22 CREATE TRIGGER Statement"), and [Section 15.1.34,
    “DROP TRIGGER Statement”](drop-trigger.html "15.1.34 DROP TRIGGER Statement").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建触发器或删除触发器，请使用[`CREATE TRIGGER`](create-trigger.html "15.1.22 CREATE TRIGGER
    Statement")或[`DROP TRIGGER`](drop-trigger.html "15.1.34 DROP TRIGGER Statement")语句，描述在[第15.1.22节，“CREATE
    TRIGGER Statement”](create-trigger.html "15.1.22 CREATE TRIGGER Statement")和[第15.1.34节，“DROP
    TRIGGER Statement”](drop-trigger.html "15.1.34 DROP TRIGGER Statement")中。
- en: Here is a simple example that associates a trigger with a table, to activate
    for [`INSERT`](insert.html "15.2.7 INSERT Statement") operations. The trigger
    acts as an accumulator, summing the values inserted into one of the columns of
    the table.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的示例，将触发器与表关联起来，以激活[`INSERT`](insert.html "15.2.7 INSERT Statement")操作。
    触发器充当累加器，对表的某一列插入的值进行求和。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The [`CREATE TRIGGER`](create-trigger.html "15.1.22 CREATE TRIGGER Statement")
    statement creates a trigger named `ins_sum` that is associated with the `account`
    table. It also includes clauses that specify the trigger action time, the triggering
    event, and what to do when the trigger activates:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CREATE TRIGGER`](create-trigger.html "15.1.22 CREATE TRIGGER Statement")语句创建一个名为`ins_sum`的触发器，与`account`表关联。
    它还包括指定触发器动作时间、触发事件以及触发器激活时要执行的操作的子句：'
- en: The keyword `BEFORE` indicates the trigger action time. In this case, the trigger
    activates before each row inserted into the table. The other permitted keyword
    here is `AFTER`.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字`BEFORE`表示触发器动作时间。 在这种情况下，触发器在每行插入到表之前激活。 这里允许的其他关键字是`AFTER`。
- en: The keyword `INSERT` indicates the trigger event; that is, the type of operation
    that activates the trigger. In the example, [`INSERT`](insert.html "15.2.7 INSERT
    Statement") operations cause trigger activation. You can also create triggers
    for [`DELETE`](delete.html "15.2.2 DELETE Statement") and [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") operations.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字`INSERT`表示触发事件；也就是说，激活触发器的操作类型。 在示例中，[`INSERT`](insert.html "15.2.7 INSERT
    Statement")操作会导致触发器激活。 您还可以为[`DELETE`](delete.html "15.2.2 DELETE Statement")和[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")操作创建触发器。
- en: The statement following `FOR EACH ROW` defines the trigger body; that is, the
    statement to execute each time the trigger activates, which occurs once for each
    row affected by the triggering event. In the example, the trigger body is a simple
    [`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment") that
    accumulates into a user variable the values inserted into the `amount` column.
    The statement refers to the column as `NEW.amount` which means “the value of the
    `amount` column to be inserted into the new row.”
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FOR EACH ROW`后面的语句定义了触发器体；也就是说，每次触发器激活时执行的语句，这发生在触发事件影响的每一行。 在示例中，触发器体是一个简单的[`SET`](set-variable.html
    "15.7.6.1 SET Syntax for Variable Assignment")，将插入到`amount`列中的值累积到用户变量中。 该语句将列称为`NEW.amount`，意思是“要插入新行的`amount`列的值”。'
- en: 'To use the trigger, set the accumulator variable to zero, execute an [`INSERT`](insert.html
    "15.2.7 INSERT Statement") statement, and then see what value the variable has
    afterward:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用触发器，请将累加器变量设置为零，执行一个[`INSERT`](insert.html "15.2.7 INSERT Statement")语句，然后查看变量之后的值：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, the value of `@sum` after the [`INSERT`](insert.html "15.2.7 INSERT
    Statement") statement has executed is `14.98 + 1937.50 - 100`, or `1852.48`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，[`INSERT`](insert.html "15.2.7 INSERT Statement")语句执行后`@sum`的值为`14.98
    + 1937.50 - 100`，即`1852.48`。
- en: 'To destroy the trigger, use a [`DROP TRIGGER`](drop-trigger.html "15.1.34 DROP
    TRIGGER Statement") statement. You must specify the schema name if the trigger
    is not in the default schema:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要销毁触发器，请使用[`DROP TRIGGER`](drop-trigger.html "15.1.34 DROP TRIGGER Statement")语句。
    如果触发器不在默认模式中，则必须指定模式名称：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you drop a table, any triggers for the table are also dropped.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果删除表，则表的任何触发器也将被删除。
- en: Trigger names exist in the schema namespace, meaning that all triggers must
    have unique names within a schema. Triggers in different schemas can have the
    same name.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器名称存在于模式命名空间中，这意味着所有触发器在模式内必须具有唯一名称。 不同模式中的触发器可以具有相同的名称。
- en: It is possible to define multiple triggers for a given table that have the same
    trigger event and action time. For example, you can have two `BEFORE UPDATE` triggers
    for a table. By default, triggers that have the same trigger event and action
    time activate in the order they were created. To affect trigger order, specify
    a clause after `FOR EACH ROW` that indicates `FOLLOWS` or `PRECEDES` and the name
    of an existing trigger that also has the same trigger event and action time. With
    `FOLLOWS`, the new trigger activates after the existing trigger. With `PRECEDES`,
    the new trigger activates before the existing trigger.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为给定表定义多个具有相同触发事件和操作时间的触发器。例如，您可以为表定义两个`BEFORE UPDATE`触发器。默认情况下，具有相同触发事件和操作时间的触发器按照它们创建的顺序激活。要影响触发器顺序，请在`FOR
    EACH ROW`之后指定一个子句，指示`FOLLOWS`或`PRECEDES`以及一个具有相同触发事件和操作时间的现有触发器的名称。使用`FOLLOWS`，新触发器在现有触发器之后激活。使用`PRECEDES`，新触发器在现有触发器之前激活。
- en: 'For example, the following trigger definition defines another `BEFORE INSERT`
    trigger for the `account` table:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下触发器定义为`account`表定义了另一个`BEFORE INSERT`触发器：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This trigger, `ins_transaction`, is similar to `ins_sum` but accumulates deposits
    and withdrawals separately. It has a `PRECEDES` clause that causes it to activate
    before `ins_sum`; without that clause, it would activate after `ins_sum` because
    it is created after `ins_sum`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此触发器`ins_transaction`类似于`ins_sum`，但分别累积存款和取款。它具有一个`PRECEDES`子句，使其在`ins_sum`之前激活；如果没有该子句，它将在`ins_sum`之后激活，因为它是在`ins_sum`之后创建的。
- en: Within the trigger body, the `OLD` and `NEW` keywords enable you to access columns
    in the rows affected by a trigger. `OLD` and `NEW` are MySQL extensions to triggers;
    they are not case-sensitive.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在触发器主体内，`OLD`和`NEW`关键字使您能够访问触发器影响的行中的列。`OLD`和`NEW`是MySQL触发器的扩展；它们不区分大小写。
- en: In an `INSERT` trigger, only `NEW.*`col_name`*` can be used; there is no old
    row. In a `DELETE` trigger, only `OLD.*`col_name`*` can be used; there is no new
    row. In an `UPDATE` trigger, you can use `OLD.*`col_name`*` to refer to the columns
    of a row before it is updated and `NEW.*`col_name`*` to refer to the columns of
    the row after it is updated.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在`INSERT`触发器中，只能使用`NEW.*`col_name`*`；没有旧行。在`DELETE`触发器中，只能使用`OLD.*`col_name`*`；没有新行。在`UPDATE`触发器中，您可以使用`OLD.*`col_name`*`来引用更新前行的列，使用`NEW.*`col_name`*`来引用更新后行的列。
- en: A column named with `OLD` is read only. You can refer to it (if you have the
    [`SELECT`](select.html "15.2.13 SELECT Statement") privilege), but not modify
    it. You can refer to a column named with `NEW` if you have the [`SELECT`](privileges-provided.html#priv_select)
    privilege for it. In a `BEFORE` trigger, you can also change its value with `SET
    NEW.*`col_name`* = *`value`*` if you have the [`UPDATE`](privileges-provided.html#priv_update)
    privilege for it. This means you can use a trigger to modify the values to be
    inserted into a new row or used to update a row. (Such a `SET` statement has no
    effect in an `AFTER` trigger because the row change has already occurred.)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以`OLD`命名的列是只读的。您可以引用它（如果您具有[`SELECT`](select.html "15.2.13 SELECT Statement")权限），但不能修改它。如果您对其具有[`SELECT`](privileges-provided.html#priv_select)权限，则可以引用以`NEW`命名的列。在`BEFORE`触发器中，如果您对其具有[`UPDATE`](privileges-provided.html#priv_update)权限，则还可以使用`SET
    NEW.*`col_name`* = *`value`*`来更改其值。这意味着您可以使用触发器修改要插入新行或用于更新行的值。（在`AFTER`触发器中，这样的`SET`语句没有效果，因为行更改已经发生。）
- en: In a `BEFORE` trigger, the `NEW` value for an `AUTO_INCREMENT` column is 0,
    not the sequence number that is generated automatically when the new row actually
    is inserted.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`BEFORE`触发器中，`AUTO_INCREMENT`列的`NEW`值为0，而不是在实际插入新行时自动生成的序列号。
- en: 'By using the [`BEGIN ... END`](begin-end.html "15.6.1 BEGIN ... END Compound
    Statement") construct, you can define a trigger that executes multiple statements.
    Within the `BEGIN` block, you also can use other syntax that is permitted within
    stored routines such as conditionals and loops. However, just as for stored routines,
    if you use the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    program to define a trigger that executes multiple statements, it is necessary
    to redefine the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    statement delimiter so that you can use the `;` statement delimiter within the
    trigger definition. The following example illustrates these points. It defines
    an `UPDATE` trigger that checks the new value to be used for updating each row,
    and modifies the value to be within the range from 0 to 100. This must be a `BEFORE`
    trigger because the value must be checked before it is used to update the row:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[`BEGIN ... END`](begin-end.html "15.6.1 BEGIN ... END Compound Statement")结构，可以定义执行多个语句的触发器。在`BEGIN`块内，还可以使用其他在存储过程中允许的语法，如条件和循环。然而，就像对于存储过程一样，如果使用[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")程序定义执行多个语句的触发器，则需要重新定义[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")语句定界符，以便在触发器定义内使用`;`语句定界符。以下示例说明了这些要点。它定义了一个`UPDATE`触发器，检查要用于更新每行的新值，并修改值使其在0到100的范围内。这必须是`BEFORE`触发器，因为必须在使用该值更新行之前检查该值：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It can be easier to define a stored procedure separately and then invoke it
    from the trigger using a simple [`CALL`](call.html "15.2.1 CALL Statement") statement.
    This is also advantageous if you want to execute the same code from within several
    triggers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将存储过程单独定义，然后使用简单的[`CALL`](call.html "15.2.1 CALL Statement")语句从触发器中调用它可能更容易。如果要从多个触发器内执行相同的代码，这也是有利的。
- en: 'There are limitations on what can appear in statements that a trigger executes
    when activated:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器执行时，触发器执行的语句中出现的内容有限制：
- en: The trigger cannot use the [`CALL`](call.html "15.2.1 CALL Statement") statement
    to invoke stored procedures that return data to the client or that use dynamic
    SQL. (Stored procedures are permitted to return data to the trigger through `OUT`
    or `INOUT` parameters.)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发器不能使用[`CALL`](call.html "15.2.1 CALL Statement")语句调用返回数据给客户端或使用动态SQL的存储过程。（存储过程可以通过`OUT`或`INOUT`参数将数据返回给触发器。）
- en: The trigger cannot use statements that explicitly or implicitly begin or end
    a transaction, such as [`START TRANSACTION`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements"), [`COMMIT`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements"), or [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements"). ([`ROLLBACK to SAVEPOINT`](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements") is permitted because it does not
    end a transaction.).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发器不能使用明确或隐式开始或结束事务的语句，例如[`START TRANSACTION`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements")，[`COMMIT`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements")或[`ROLLBACK`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements")。([`ROLLBACK to SAVEPOINT`](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements")是允许的，因为它不会结束事务。)。
- en: See also [Section 27.8, “Restrictions on Stored Programs”](stored-program-restrictions.html
    "27.8 Restrictions on Stored Programs").
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[Section 27.8, “存储程序的限制”](stored-program-restrictions.html "27.8 存储程序的限制")。
- en: 'MySQL handles errors during trigger execution as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL在触发器执行期间处理错误如下：
- en: If a `BEFORE` trigger fails, the operation on the corresponding row is not performed.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`BEFORE`触发器失败，则不会执行对应行的操作。
- en: A `BEFORE` trigger is activated by the *attempt* to insert or modify the row,
    regardless of whether the attempt subsequently succeeds.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BEFORE`触发器在*尝试*插入或修改行时被激活，无论尝试是否成功。'
- en: An `AFTER` trigger is executed only if any `BEFORE` triggers and the row operation
    execute successfully.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅当任何`BEFORE`触发器和行操作成功执行时，才会执行`AFTER`触发器。
- en: An error during either a `BEFORE` or `AFTER` trigger results in failure of the
    entire statement that caused trigger invocation.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BEFORE`或`AFTER`触发器中的错误导致触发器调用的整个语句失败。'
- en: For transactional tables, failure of a statement should cause rollback of all
    changes performed by the statement. Failure of a trigger causes the statement
    to fail, so trigger failure also causes rollback. For nontransactional tables,
    such rollback cannot be done, so although the statement fails, any changes performed
    prior to the point of the error remain in effect.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于事务性表，语句失败应导致语句执行的所有更改回滚。触发器失败会导致语句失败，因此触发器失败也会导致回滚。对于非事务性表，无法进行此类回滚，因此尽管语句失败，但在错误点之前执行的任何更改仍然有效。
- en: 'Triggers can contain direct references to tables by name, such as the trigger
    named `testref` shown in this example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器可以通过名称直接引用表，例如此示例中显示的名为`testref`的触发器：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Suppose that you insert the following values into table `test1` as shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您将以下数值插入到表`test1`中，如下所示：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As a result, the four tables contain the following data:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，四个表包含以下数据：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
