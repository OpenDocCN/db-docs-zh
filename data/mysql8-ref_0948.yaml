- en: 15.2.9 LOAD DATA Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.2.9 LOAD DATA 语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/load-data.html](https://dev.mysql.com/doc/refman/8.0/en/load-data.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/load-data.html](https://dev.mysql.com/doc/refman/8.0/en/load-data.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") statement reads
    rows from a text file into a table at a very high speed. The file can be read
    from the server host or the client host, depending on whether the `LOCAL` modifier
    is given. `LOCAL` also affects data interpretation and error handling.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA 语句") 语句以非常高的速度从文本文件中读取行到表中。文件可以从服务器主机或客户端主机读取，这取决于是否给出
    `LOCAL` 修饰符。`LOCAL` 还会影响数据解释和错误处理。'
- en: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") is the complement
    of [`SELECT ... INTO OUTFILE`](select-into.html "15.2.13.1 SELECT ... INTO Statement").
    (See [Section 15.2.13.1, “SELECT ... INTO Statement”](select-into.html "15.2.13.1 SELECT
    ... INTO Statement").) To write data from a table to a file, use [`SELECT ...
    INTO OUTFILE`](select-into.html "15.2.13.1 SELECT ... INTO Statement"). To read
    the file back into a table, use [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA
    Statement"). The syntax of the `FIELDS` and `LINES` clauses is the same for both
    statements.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA 语句") 是 [`SELECT ... INTO OUTFILE`](select-into.html
    "15.2.13.1 SELECT ... INTO 语句") 的补充。（参见 [Section 15.2.13.1, “SELECT ... INTO 语句”](select-into.html
    "15.2.13.1 SELECT ... INTO 语句")。）要将表中的数据写入文件，请使用 [`SELECT ... INTO OUTFILE`](select-into.html
    "15.2.13.1 SELECT ... INTO 语句")。要将文件中的数据读回表中，请使用 [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA 语句")。这两个语句的 `FIELDS` 和 `LINES` 子句的语法相同。'
- en: The [**mysqlimport**](mysqlimport.html "6.5.5 mysqlimport — A Data Import Program")
    utility provides another way to load data files; it operates by sending a [`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement") statement to the server. See
    [Section 6.5.5, “mysqlimport — A Data Import Program”](mysqlimport.html "6.5.5 mysqlimport
    — A Data Import Program").
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[**mysqlimport**](mysqlimport.html "6.5.5 mysqlimport — 数据导入程序") 实用程序提供了另一种加载数据文件的方式；它通过向服务器发送
    [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA 语句") 语句来操作。请参阅 [Section 6.5.5,
    “mysqlimport — 数据导入程序”](mysqlimport.html "6.5.5 mysqlimport — 数据导入程序")。'
- en: For information about the efficiency of [`INSERT`](insert.html "15.2.7 INSERT
    Statement") versus [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    and speeding up [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement"), see
    [Section 10.2.5.1, “Optimizing INSERT Statements”](insert-optimization.html "10.2.5.1 Optimizing
    INSERT Statements").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 [`INSERT`](insert.html "15.2.7 INSERT 语句") 与 [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA 语句") 的效率以及加速 [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA
    语句") 的信息，请参阅 [Section 10.2.5.1, “优化 INSERT 语句”](insert-optimization.html "10.2.5.1 优化
    INSERT 语句")。
- en: '[Non-LOCAL Versus LOCAL Operation](load-data.html#load-data-local "Non-LOCAL
    Versus LOCAL Operation")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[非 LOCAL 与 LOCAL 操作](load-data.html#load-data-local "非 LOCAL 与 LOCAL 操作")'
- en: '[Input File Character Set](load-data.html#load-data-character-set "Input File
    Character Set")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[输入文件字符集](load-data.html#load-data-character-set "输入文件字符集")'
- en: '[Input File Location](load-data.html#load-data-file-location "Input File Location")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[输入文件位置](load-data.html#load-data-file-location "输入文件位置")'
- en: '[Security Requirements](load-data.html#load-data-security-requirements "Security
    Requirements")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[安全要求](load-data.html#load-data-security-requirements "安全要求")'
- en: '[Duplicate-Key and Error Handling](load-data.html#load-data-error-handling
    "Duplicate-Key and Error Handling")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[重复键和错误处理](load-data.html#load-data-error-handling "重复键和错误处理")'
- en: '[Index Handling](load-data.html#load-data-index-handling "Index Handling")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[索引处理](load-data.html#load-data-index-handling "索引处理")'
- en: '[Field and Line Handling](load-data.html#load-data-field-line-handling "Field
    and Line Handling")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[字段和行处理](load-data.html#load-data-field-line-handling "字段和行处理")'
- en: '[Column List Specification](load-data.html#load-data-column-list "Column List
    Specification")'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列列表规范](load-data.html#load-data-column-list "列列表规范")'
- en: '[Input Preprocessing](load-data.html#load-data-input-preprocessing "Input Preprocessing")'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[输入预处理](load-data.html#load-data-input-preprocessing "输入预处理")'
- en: '[Column Value Assignment](load-data.html#load-data-column-assignments "Column
    Value Assignment")'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列值赋值](load-data.html#load-data-column-assignments "列值赋值")'
- en: '[Partitioned Table Support](load-data.html#load-data-partitioning-support "Partitioned
    Table Support")'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分区表支持](load-data.html#load-data-partitioning-support "分区表支持")'
- en: '[Concurrency Considerations](load-data.html#load-data-concurrency "Concurrency
    Considerations")'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[并发考虑](load-data.html#load-data-concurrency "并发考虑")'
- en: '[Statement Result Information](load-data.html#load-data-statement-result-information
    "Statement Result Information")'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[语句结果信息](load-data.html#load-data-statement-result-information "Statement Result
    Information")'
- en: '[Replication Considerations](load-data.html#load-data-replication "Replication
    Considerations")'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[复制考虑](load-data.html#load-data-replication "Replication Considerations")'
- en: '[Miscellaneous Topics](load-data.html#load-data-miscellaneous "Miscellaneous
    Topics")'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[杂项主题](load-data.html#load-data-miscellaneous "Miscellaneous Topics")'
- en: Non-LOCAL Versus LOCAL Operation
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 非LOCAL与LOCAL操作的区别
- en: 'The `LOCAL` modifier affects these aspects of [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement"), compared to non-`LOCAL` operation:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOCAL`修饰符影响[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")的这些方面，与非`LOCAL`操作相比：'
- en: It changes the expected location of the input file; see [Input File Location](load-data.html#load-data-file-location
    "Input File Location").
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它改变了输入文件的预期位置；参见[输入文件位置](load-data.html#load-data-file-location "Input File
    Location")。
- en: It changes the statement security requirements; see [Security Requirements](load-data.html#load-data-security-requirements
    "Security Requirements").
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它改变了语句的安全要求；参见[安全要求](load-data.html#load-data-security-requirements "Security
    Requirements")。
- en: It has the same effect as the `IGNORE` modifier on the interpretation of input
    file contents and error handling; see [Duplicate-Key and Error Handling](load-data.html#load-data-error-handling
    "Duplicate-Key and Error Handling"), and [Column Value Assignment](load-data.html#load-data-column-assignments
    "Column Value Assignment").
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它对输入文件内容的解释和错误处理具有与`IGNORE`修饰符相同的效果；参见[重复键和错误处理](load-data.html#load-data-error-handling
    "Duplicate-Key and Error Handling")，以及[列值分配](load-data.html#load-data-column-assignments
    "Column Value Assignment")。
- en: '`LOCAL` works only if the server and your client both have been configured
    to permit it. For example, if [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL
    Server") was started with the [`local_infile`](server-system-variables.html#sysvar_local_infile)
    system variable disabled, `LOCAL` produces an error. See [Section 8.1.6, “Security
    Considerations for LOAD DATA LOCAL”](load-data-local-security.html "8.1.6 Security
    Considerations for LOAD DATA LOCAL").'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在服务器和客户端都配置为允许时，`LOCAL`才有效。例如，如果[**mysqld**](mysqld.html "6.3.1 mysqld — The
    MySQL Server")启动时禁用了[`local_infile`](server-system-variables.html#sysvar_local_infile)系统变量，`LOCAL`会产生错误。参见[第8.1.6节，“LOAD
    DATA LOCAL的安全考虑”](load-data-local-security.html "8.1.6 Security Considerations
    for LOAD DATA LOCAL")。
- en: Input File Character Set
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 输入文件字符集
- en: The file name must be given as a literal string. On Windows, specify backslashes
    in path names as forward slashes or doubled backslashes. The server interprets
    the file name using the character set indicated by the [`character_set_filesystem`](server-system-variables.html#sysvar_character_set_filesystem)
    system variable.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名必须以文字字符串形式给出。在Windows上，路径名中的反斜杠应指定为正斜杠或双反斜杠。服务器使用由[`character_set_filesystem`](server-system-variables.html#sysvar_character_set_filesystem)系统变量指示的字符集解释文件名。
- en: By default, the server interprets the file contents using the character set
    indicated by the [`character_set_database`](server-system-variables.html#sysvar_character_set_database)
    system variable. If the file contents use a character set different from this
    default, it is a good idea to specify that character set by using the `CHARACTER
    SET` clause. A character set of `binary` specifies “no conversion.”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，服务器使用由[`character_set_database`](server-system-variables.html#sysvar_character_set_database)系统变量指示的字符集解释文件内容。如果文件内容使用与此默认值不同的字符集，最好通过使用`CHARACTER
    SET`子句指定该字符集。字符集为`binary`表示“无转换”。
- en: '[`SET NAMES`](set-names.html "15.7.6.3 SET NAMES Statement") and the setting
    of [`character_set_client`](server-system-variables.html#sysvar_character_set_client)
    do not affect interpretation of file contents.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SET NAMES`](set-names.html "15.7.6.3 SET NAMES Statement")和[`character_set_client`](server-system-variables.html#sysvar_character_set_client)的设置不影响文件内容的解释。'
- en: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") interprets all fields
    in the file as having the same character set, regardless of the data types of
    the columns into which field values are loaded. For proper interpretation of the
    file, you must ensure that it was written with the correct character set. For
    example, if you write a data file with [**mysqldump -T**](mysqldump.html "6.5.4 mysqldump
    — A Database Backup Program") or by issuing a [`SELECT ... INTO OUTFILE`](select-into.html
    "15.2.13.1 SELECT ... INTO Statement") statement in [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client"), be sure to use a [`--default-character-set`](mysql-command-options.html#option_mysql_default-character-set)
    option to write output in the character set to be used when the file is loaded
    with [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement").'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") 将文件中的所有字段解释为具有相同字符集，而不管字段值加载到的列的数据类型如何。为了正确解释文件，您必须确保它是用正确的字符集编写的。例如，如果您使用
    [**mysqldump -T**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    写入数据文件，或者通过在 [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    中发出 [`SELECT ... INTO OUTFILE`](select-into.html "15.2.13.1 SELECT ... INTO Statement")
    语句来写入数据文件，请务必使用 [`--default-character-set`](mysql-command-options.html#option_mysql_default-character-set)
    选项以在加载文件时使用的字符集中写入输出。'
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is not possible to load data files that use the `ucs2`, `utf16`, `utf16le`,
    or `utf32` character set.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能加载使用 `ucs2`、`utf16`、`utf16le` 或 `utf32` 字符集的数��文件。
- en: Input File Location
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 输入文件位置
- en: 'These rules determine the [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    input file location:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则确定了 [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") 输入文件的位置：
- en: 'If `LOCAL` is not specified, the file must be located on the server host. The
    server reads the file directly, locating it as follows:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未指定 `LOCAL`，则文件必须位于服务器主机上。服务器直接读取文件，定位如下：
- en: If the file name is an absolute path name, the server uses it as given.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件名是绝对路径名，服务器将按照给定的路径使用它。
- en: If the file name is a relative path name with leading components, the server
    looks for the file relative to its data directory.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件名是带有前导组件的相对路径名，服务器将在其数据目录相对于文件查找。
- en: If the file name has no leading components, the server looks for the file in
    the database directory of the default database.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件名没有前导组件，服务器将在默认数据库的数据库目录中查找文件。
- en: 'If `LOCAL` is specified, the file must be located on the client host. The client
    program reads the file, locating it as follows:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果指定了 `LOCAL`，则文件必须位于客户端主机上。客户端程序读取文件，定位如下：
- en: If the file name is an absolute path name, the client program uses it as given.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件名是绝对路径名，客户端程序将按照给定的路径使用它。
- en: If the file name is a relative path name, the client program looks for the file
    relative to its invocation directory.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件名是相对路径名，客户端程序将在其调用目录相对于文件查找。
- en: When `LOCAL` is used, the client program reads the file and sends its contents
    to the server. The server creates a copy of the file in the directory where it
    stores temporary files. See [Section B.3.3.5, “Where MySQL Stores Temporary Files”](temporary-files.html
    "B.3.3.5 Where MySQL Stores Temporary Files"). Lack of sufficient space for the
    copy in this directory can cause the [`LOAD DATA LOCAL`](load-data.html "15.2.9 LOAD
    DATA Statement") statement to fail.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 `LOCAL` 时，客户端程序读取文件并将其内容发送到服务器。服务器在存储临时文件的目录中创建文件的副本。请参阅 [Section B.3.3.5,
    “Where MySQL Stores Temporary Files”](temporary-files.html "B.3.3.5 Where MySQL
    Stores Temporary Files")。在此目录中没有足够空间来存储副本可能导致 [`LOAD DATA LOCAL`](load-data.html
    "15.2.9 LOAD DATA Statement") 语句失败。
- en: 'The non-`LOCAL` rules mean that the server reads a file named as `./myfile.txt`
    relative to its data directory, whereas it reads a file named as `myfile.txt`
    from the database directory of the default database. For example, if the following
    [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") statement is executed
    while `db1` is the default database, the server reads the file `data.txt` from
    the database directory for `db1`, even though the statement explicitly loads the
    file into a table in the `db2` database:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 非 `LOCAL` 规则意味着服务器将相对于其数据目录读取名为 `./myfile.txt` 的文件，而将名为 `myfile.txt` 的文件从默认数据库的数据库目录中读取。例如，如果在
    `db1` 是默认数据库的情况下执行以下 [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    语句，服务器将从 `db1` 的数据库目录中读取文件 `data.txt`，即使该语句明确将文件加载到 `db2` 数据库中的表中：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The server also uses the non-`LOCAL` rules to locate `.sdi` files for the [`IMPORT
    TABLE`](import-table.html "15.2.6 IMPORT TABLE Statement") statement.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器还使用非`LOCAL`规则来定位[`IMPORT TABLE`](import-table.html "15.2.6 IMPORT TABLE Statement")语句的`.sdi`文件。
- en: Security Requirements
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安全要求
- en: 'For a non-`LOCAL` load operation, the server reads a text file located on the
    server host, so these security requirements must be satisfied:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非`LOCAL`加载操作，服务器会读取位于服务器主机上的文本文件，因此必须满足以下安全要求：
- en: You must have the [`FILE`](privileges-provided.html#priv_file) privilege. See
    [Section 8.2.2, “Privileges Provided by MySQL”](privileges-provided.html "8.2.2 Privileges
    Provided by MySQL").
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须具有[`FILE`](privileges-provided.html#priv_file)权限。请参阅[Section 8.2.2, “MySQL提供的权限”](privileges-provided.html
    "8.2.2 MySQL提供的权限")。
- en: 'The operation is subject to the [`secure_file_priv`](server-system-variables.html#sysvar_secure_file_priv)
    system variable setting:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该操作受[`secure_file_priv`](server-system-variables.html#sysvar_secure_file_priv)系统变量设置的影响：
- en: If the variable value is a nonempty directory name, the file must be located
    in that directory.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果变量值是非空目录名称，则文件必须位于该目录中。
- en: If the variable value is empty (which is insecure), the file need only be readable
    by the server.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果变量值为空（这是不安全的），文件只需对服务器可读。
- en: For a `LOCAL` load operation, the client program reads a text file located on
    the client host. Because the file contents are sent over the connection by the
    client to the server, using `LOCAL` is a bit slower than when the server accesses
    the file directly. On the other hand, you do not need the [`FILE`](privileges-provided.html#priv_file)
    privilege, and the file can be located in any directory the client program can
    access.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`LOCAL`加载操作，客户端程序会读取位于客户端主机上的文本文件。由于文件内容通过客户端传输到服务器，使用`LOCAL`比服务器直接访问文件要慢一点。另一方面，您不需要[`FILE`](privileges-provided.html#priv_file)权限，并且文件可以位于客户端程序可以访问的任何目录中。
- en: Duplicate-Key and Error Handling
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重复键和错误处理
- en: 'The `REPLACE` and `IGNORE` modifiers control handling of new (input) rows that
    duplicate existing table rows on unique key values (`PRIMARY KEY` or `UNIQUE`
    index values):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`REPLACE`和`IGNORE`修饰符控制对具有唯一键值（`PRIMARY KEY`或`UNIQUE`索引值）上现有表行重复的新（输入）行的处理：'
- en: With `REPLACE`, new rows that have the same value as a unique key value in an
    existing row replace the existing row. See [Section 15.2.12, “REPLACE Statement”](replace.html
    "15.2.12 REPLACE Statement").
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`REPLACE`，具有与现有行中唯一键值相同值的新行将替换现有行。请参阅[Section 15.2.12, “REPLACE语句”](replace.html
    "15.2.12 REPLACE Statement")。
- en: With `IGNORE`, new rows that duplicate an existing row on a unique key value
    are discarded. For more information, see [The Effect of IGNORE on Statement Execution](sql-mode.html#ignore-effect-on-execution
    "The Effect of IGNORE on Statement Execution").
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`IGNORE`，具有与唯一键值上现有行重复的新行将被丢弃。有关更多信息，请参阅[IGNORE对语句执行的影响](sql-mode.html#ignore-effect-on-execution
    "IGNORE对语句执行的影响")。
- en: The `LOCAL` modifier has the same effect as `IGNORE`. This occurs because the
    server has no way to stop transmission of the file in the middle of the operation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOCAL`修饰符与`IGNORE`具有相同的效果。这是因为服务器无法在操作中途停止文件的传输。'
- en: If none of `REPLACE`, `IGNORE`, or `LOCAL` is specified, an error occurs when
    a duplicate key value is found, and the rest of the text file is ignored.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定`REPLACE`，`IGNORE`或`LOCAL`，当发现重复键值时会发生错误，并且文本文件的其余部分将被忽略。
- en: 'In addition to affecting duplicate-key handling as just described, `IGNORE`
    and `LOCAL` also affect error handling:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了影响刚刚描述的重复键处理之外，`IGNORE`和`LOCAL`还会影响错误处理：
- en: With neither `IGNORE` nor `LOCAL`, data-interpretation errors terminate the
    operation.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有`IGNORE`或`LOCAL`，数据解释错误会终止操作。
- en: With `IGNORE` or `LOCAL`, data-interpretation errors become warnings and the
    load operation continues, even if the SQL mode is restrictive. For examples, see
    [Column Value Assignment](load-data.html#load-data-column-assignments "Column
    Value Assignment").
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`IGNORE`或`LOCAL`，数据解释错误变为警告，并且加载操作会继续，即使SQL模式是限制性的。有关示例，请参阅[列值分配](load-data.html#load-data-column-assignments
    "列值分配")。
- en: Index Handling
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 索引处理
- en: To ignore foreign key constraints during the load operation, execute a `SET
    foreign_key_checks = 0` statement before executing [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement").
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载操作期间忽略外键约束，请在执行[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")之前执行`SET
    foreign_key_checks = 0`语句。
- en: If you use [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") on an
    empty `MyISAM` table, all nonunique indexes are created in a separate batch (as
    for [`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement")). Normally,
    this makes [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") much faster
    when you have many indexes. In some extreme cases, you can create the indexes
    even faster by turning them off with [`ALTER TABLE ... DISABLE KEYS`](alter-table.html
    "15.1.9 ALTER TABLE Statement") before loading the file into the table and re-creating
    the indexes with [`ALTER TABLE ... ENABLE KEYS`](alter-table.html "15.1.9 ALTER
    TABLE Statement") after loading the file. See [Section 10.2.5.1, “Optimizing INSERT
    Statements”](insert-optimization.html "10.2.5.1 Optimizing INSERT Statements").
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在空的`MyISAM`表上使用[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")，则所有非唯一索引将在单独的批处理中创建（与[`REPAIR
    TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement")一样）。通常，当您有许多索引时，这使得[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement")速度更快。在一些极端情况下，您可以通过在将文件加载到表中之前使用[`ALTER
    TABLE ... DISABLE KEYS`](alter-table.html "15.1.9 ALTER TABLE Statement")关闭它们来更快地创建索引，并在加载文件后使用[`ALTER
    TABLE ... ENABLE KEYS`](alter-table.html "15.1.9 ALTER TABLE Statement")重新创建索引。请参见[第10.2.5.1节，“优化INSERT语句”](insert-optimization.html
    "10.2.5.1 Optimizing INSERT Statements")。
- en: Field and Line Handling
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字段和行处理
- en: For both the [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") and
    [`SELECT ... INTO OUTFILE`](select-into.html "15.2.13.1 SELECT ... INTO Statement")
    statements, the syntax of the `FIELDS` and `LINES` clauses is the same. Both clauses
    are optional, but `FIELDS` must precede `LINES` if both are specified.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")和[`SELECT ... INTO
    OUTFILE`](select-into.html "15.2.13.1 SELECT ... INTO Statement")语句，`FIELDS`和`LINES`子句的语法相同。两个子句都是可选的，但如果两者都指定，则`FIELDS`必须在`LINES`之前。
- en: If you specify a `FIELDS` clause, each of its subclauses (`TERMINATED BY`, `[OPTIONALLY]
    ENCLOSED BY`, and `ESCAPED BY`) is also optional, except that you must specify
    at least one of them. Arguments to these clauses are permitted to contain only
    ASCII characters.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了`FIELDS`子句，则其每个子句（`TERMINATED BY`，`[OPTIONALLY] ENCLOSED BY`和`ESCAPED BY`）也是可选的，除非您必须至少指定其中一个。这些子句的参数只允许包含ASCII字符。
- en: 'If you specify no `FIELDS` or `LINES` clause, the defaults are the same as
    if you had written this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不指定`FIELDS`或`LINES`子句，则默认值与您编写以下内容相同：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Backslash is the MySQL escape character within strings in SQL statements. Thus,
    to specify a literal backslash, you must specify two backslashes for the value
    to be interpreted as a single backslash. The escape sequences `'\t'` and `'\n'`
    specify tab and newline characters, respectively.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL语句中的字符串中，反斜杠是MySQL转义字符。因此，要指定一个字面上的反斜杠，您必须为解释为单个反斜杠的值指定两个反斜杠。转义序列`'\t'`和`'\n'`分别指定制表符和换行符。
- en: 'In other words, the defaults cause [`LOAD DATA`](load-data.html "15.2.9 LOAD
    DATA Statement") to act as follows when reading input:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，当读取输入时，[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")的默认值如下：
- en: Look for line boundaries at newlines.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在换行符处查找行边界。
- en: Do not skip any line prefix.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要跳过任何行前缀。
- en: Break lines into fields at tabs.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在制表符处将行分割为字段。
- en: Do not expect fields to be enclosed within any quoting characters.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要期望字段被包含在任何引号字符内。
- en: Interpret characters preceded by the escape character `\` as escape sequences.
    For example, `\t`, `\n`, and `\\` signify tab, newline, and backslash, respectively.
    See the discussion of `FIELDS ESCAPED BY` later for the full list of escape sequences.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将由转义字符`\`引导的字符解释为转义序列。例如，`\t`，`\n`和`\\`分别表示制表符，换行符和反斜杠。有关转义序列的完整列表，请参见稍后讨论的`FIELDS
    ESCAPED BY`。
- en: 'Conversely, the defaults cause [`SELECT ... INTO OUTFILE`](select-into.html
    "15.2.13.1 SELECT ... INTO Statement") to act as follows when writing output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，当写入输出时，[`SELECT ... INTO OUTFILE`](select-into.html "15.2.13.1 SELECT ...
    INTO Statement")的默认值如下：
- en: Write tabs between fields.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在字段之间写入制表符。
- en: Do not enclose fields within any quoting characters.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在任何引号字符内包含字段。
- en: Use `\` to escape instances of tab, newline, or `\` that occur within field
    values.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`\`来转义字段值中出现的制表符，换行符或`\`。
- en: Write newlines at the ends of lines.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在行末写入换行符。
- en: Note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For a text file generated on a Windows system, proper file reading might require
    `LINES TERMINATED BY '\r\n'` because Windows programs typically use two characters
    as a line terminator. Some programs, such as **WordPad**, might use `\r` as a
    line terminator when writing files. To read such files, use `LINES TERMINATED
    BY '\r'`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在Windows系统上生成的文本文件，正确的文件读取可能需要`LINES TERMINATED BY '\r\n'`，因为Windows程序通常使用两个字符作为行终止符。一些程序，如**WordPad**，在写文件时可能使用`\r`作为行终止符。要读取这样的文件，请使用`LINES
    TERMINATED BY '\r'`。
- en: 'If all the input lines have a common prefix that you want to ignore, you can
    use `LINES STARTING BY ''*`prefix_string`*''` to skip the prefix *and anything
    before it*. If a line does not include the prefix, the entire line is skipped.
    Suppose that you issue the following statement:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有输入行都有一个要忽略的公共前缀，你可以使用`LINES STARTING BY '*`prefix_string`*'`来跳过前缀*及其之前的任何内容*。如果一行不包含前缀，则整行将被跳过。假设你发出以下语句：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If the data file looks like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据文件看起来像这样：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The resulting rows are `("abc",1)` and `("def",2)`. The third row in the file
    is skipped because it does not contain the prefix.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 结果行是`("abc",1)`和`("def",2)`。文件中的第三行被跳过，因为它不包含前缀。
- en: 'The `IGNORE *`number`* LINES` clause can be used to ignore lines at the start
    of the file. For example, you can use `IGNORE 1 LINES` to skip an initial header
    line containing column names:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`IGNORE *`number`* LINES`子句可用于忽略文件开头的行。例如，你可以使用`IGNORE 1 LINES`跳过包含列名的初始标题行：'
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you use [`SELECT ... INTO OUTFILE`](select-into.html "15.2.13.1 SELECT
    ... INTO Statement") in tandem with [`LOAD DATA`](load-data.html "15.2.9 LOAD
    DATA Statement") to write data from a database into a file and then read the file
    back into the database later, the field- and line-handling options for both statements
    must match. Otherwise, [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    does not interpret the contents of the file properly. Suppose that you use [`SELECT
    ... INTO OUTFILE`](select-into.html "15.2.13.1 SELECT ... INTO Statement") to
    write a file with fields delimited by commas:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用[`SELECT ... INTO OUTFILE`](select-into.html "15.2.13.1 SELECT ... INTO
    Statement")与[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")结合，将数据库中的数据写入文件，然后稍后将文件中的数据读回数据库时，两个语句的字段和行处理选项必须匹配。否则，[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement")无法正确解释文件的内容。假设你使用[`SELECT ...
    INTO OUTFILE`](select-into.html "15.2.13.1 SELECT ... INTO Statement")来写一个以逗号分隔字段的文件：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To read the comma-delimited file, the correct statement is:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取逗号分隔的文件，正确的语句是：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If instead you tried to read the file with the statement shown following, it
    would not work because it instructs [`LOAD DATA`](load-data.html "15.2.9 LOAD
    DATA Statement") to look for tabs between fields:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试用下面显示的语句读取文件，它将无法工作，因为它指示[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA
    Statement")在字段之间查找制表符：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The likely result is that each input line would be interpreted as a single field.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的结果是每个输入行被解释为单个字段。
- en: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") can be used to read
    files obtained from external sources. For example, many programs can export data
    in comma-separated values (CSV) format, such that lines have fields separated
    by commas and enclosed within double quotation marks, with an initial line of
    column names. If the lines in such a file are terminated by carriage return/newline
    pairs, the statement shown here illustrates the field- and line-handling options
    you would use to load the file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")可用于读取从外部来源获取的文件。例如，许多程序可以以逗号分隔值（CSV）格式导出数据，使得行由逗号分隔的字段并用双引号括起，带有列名的初始行。如果这样的文件中的行以回车/换行对终止，那么这里显示的语句说明了你将用于加载文件的字段和行处理选项：'
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If the input values are not necessarily enclosed within quotation marks, use
    `OPTIONALLY` before the `ENCLOSED BY` option.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入值不一定被引号括起来，可以在`ENCLOSED BY`选项之前使用`OPTIONALLY`。
- en: Any of the field- or line-handling options can specify an empty string (`''`).
    If not empty, the `FIELDS [OPTIONALLY] ENCLOSED BY` and `FIELDS ESCAPED BY` values
    must be a single character. The `FIELDS TERMINATED BY`, `LINES STARTING BY`, and
    `LINES TERMINATED BY` values can be more than one character. For example, to write
    lines that are terminated by carriage return/linefeed pairs, or to read a file
    containing such lines, specify a `LINES TERMINATED BY '\r\n'` clause.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 任何字段或行处理选项都可以指定空字符串（`''`）。如果不为空，则`FIELDS [OPTIONALLY] ENCLOSED BY`和`FIELDS ESCAPED
    BY`值必须是单个字符。`FIELDS TERMINATED BY`、`LINES STARTING BY`和`LINES TERMINATED BY`值可以是多个字符。例如，要写入由回车/换行对终止的行，或者读取包含这些行的文件，请指定`LINES
    TERMINATED BY '\r\n'`子句。
- en: To read a file containing jokes that are separated by lines consisting of `%%`,
    you can do this
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取包含以`%%`为分隔的笑话的文件，可以这样做
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`FIELDS [OPTIONALLY] ENCLOSED BY` controls quoting of fields. For output ([`SELECT
    ... INTO OUTFILE`](select-into.html "15.2.13.1 SELECT ... INTO Statement")), if
    you omit the word `OPTIONALLY`, all fields are enclosed by the `ENCLOSED BY` character.
    An example of such output (using a comma as the field delimiter) is shown here:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`FIELDS [OPTIONALLY] ENCLOSED BY`控制字段的引用。对于输出（[`SELECT ... INTO OUTFILE`](select-into.html
    "15.2.13.1 SELECT ... INTO语句")），如果省略`OPTIONALLY`这个词，所有字段都将被`ENCLOSED BY`字符包围。这里展示了这种输出的示例（使用逗号作为字段分隔符）：'
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you specify `OPTIONALLY`, the `ENCLOSED BY` character is used only to enclose
    values from columns that have a string data type (such as [`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types"), [`BINARY`](binary-varbinary.html "13.3.3 The BINARY
    and VARBINARY Types"), [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types"), or
    [`ENUM`](enum.html "13.3.5 The ENUM Type")):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了`OPTIONALLY`，则`ENCLOSED BY`字符仅用于封装具有字符串数据类型的列的值（例如[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")、[`BINARY`](binary-varbinary.html
    "13.3.3 BINARY和VARBINARY类型")、[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")或[`ENUM`](enum.html
    "13.3.5 ENUM类型"))：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Occurrences of the `ENCLOSED BY` character within a field value are escaped
    by prefixing them with the `ESCAPED BY` character. Also, if you specify an empty
    `ESCAPED BY` value, it is possible to inadvertently generate output that cannot
    be read properly by [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement").
    For example, the preceding output just shown would appear as follows if the escape
    character is empty. Observe that the second field in the fourth line contains
    a comma following the quote, which (erroneously) appears to terminate the field:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 字段值内部的`ENCLOSED BY`字符通过在其前面加上`ESCAPED BY`字符来转义。此外，如果指定空的`ESCAPED BY`值，则可能会无意中生成无法被[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA语句")正确读取的输出。例如，如果转义字符为空，则前面显示的输出将如下所示。请注意，第四行中的第二个字段包含在引号后面的逗号，这（错误地）似乎终止了该字段：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For input, the `ENCLOSED BY` character, if present, is stripped from the ends
    of field values. (This is true regardless of whether `OPTIONALLY` is specified;
    `OPTIONALLY` has no effect on input interpretation.) Occurrences of the `ENCLOSED
    BY` character preceded by the `ESCAPED BY` character are interpreted as part of
    the current field value.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于输入，如果存在`ENCLOSED BY`字符，则会从字段值的两端剥离该字符。（无论是否指定`OPTIONALLY`，都会这样处理；`OPTIONALLY`对输入解释没有影响。）由`ESCAPED
    BY`字符引导的`ENCLOSED BY`字符的出现被解释为当前字段值的一部分。
- en: 'If the field begins with the `ENCLOSED BY` character, instances of that character
    are recognized as terminating a field value only if followed by the field or line
    `TERMINATED BY` sequence. To avoid ambiguity, occurrences of the `ENCLOSED BY`
    character within a field value can be doubled and are interpreted as a single
    instance of the character. For example, if `ENCLOSED BY ''"''` is specified, quotation
    marks are handled as shown here:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字段以`ENCLOSED BY`字符开头，则只有在该字符后跟字段或行`TERMINATED BY`序列时，才会识别该字符的实例作为终止字段值。为避免歧义，在字段值内部的`ENCLOSED
    BY`字符的出现可以加倍，并且被解释为字符的单个实例。例如，如果指定了`ENCLOSED BY '"'`，则引号将被处理如下：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`FIELDS ESCAPED BY` controls how to read or write special characters:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`FIELDS ESCAPED BY`控制如何读取或写入特殊字符：'
- en: For input, if the `FIELDS ESCAPED BY` character is not empty, occurrences of
    that character are stripped and the following character is taken literally as
    part of a field value. Some two-character sequences that are exceptions, where
    the first character is the escape character. These sequences are shown in the
    following table (using `\` for the escape character). The rules for `NULL` handling
    are described later in this section.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于输入，如果`FIELDS ESCAPED BY`字符不为空，则会剥离该字符的出现，并且以下字符会被视为字段值的一部分。有一些例外的两字符序列，第一个字符是转义字符。这些序列在下表中显示（使用`\`表示转义字符）。有关`NULL`处理规则的描述稍后在本节中描述。
- en: '| Character | Escape Sequence |'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 字符 | 转义序列 |'
- en: '| `\0` | An ASCII NUL (`X''00''`) character |'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\0` | ASCII NUL（`X''00''`）字符 |'
- en: '| `\b` | A backspace character |'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\b` | 退格字符 |'
- en: '| `\n` | A newline (linefeed) character |'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\n` | 换行（换行）字符 |'
- en: '| `\r` | A carriage return character |'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\r` | 回车字符 |'
- en: '| `\t` | A tab character. |'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\t` | 制表符。 |'
- en: '| `\Z` | ASCII 26 (Control+Z) |'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\Z` | ASCII 26（Control+Z） |'
- en: '| `\N` | NULL |'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\N` | 空值 |'
- en: For more information about `\`-escape syntax, see [Section 11.1.1, “String Literals”](string-literals.html
    "11.1.1 String Literals").
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关`\`转义语法的更多信息，请参见[第11.1.1节，“字符串文字”](string-literals.html "11.1.1 String Literals")。
- en: If the `FIELDS ESCAPED BY` character is empty, escape-sequence interpretation
    does not occur.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`FIELDS ESCAPED BY`字符为空，则不会发生转义序列解释。
- en: 'For output, if the `FIELDS ESCAPED BY` character is not empty, it is used to
    prefix the following characters on output:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于输出，如果`FIELDS ESCAPED BY`字符不为空，则用于在输出时前缀以下字符：
- en: The `FIELDS ESCAPED BY` character.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FIELDS ESCAPED BY`字符。'
- en: The `FIELDS [OPTIONALLY] ENCLOSED BY` character.
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FIELDS [OPTIONALLY] ENCLOSED BY`字符。'
- en: The first character of the `FIELDS TERMINATED BY` and `LINES TERMINATED BY`
    values, if the `ENCLOSED BY` character is empty or unspecified.
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FIELDS TERMINATED BY`和`LINES TERMINATED BY`值的第一个字符，如果`ENCLOSED BY`字符为空或未指定。'
- en: ASCII `0` (what is actually written following the escape character is ASCII
    `0`, not a zero-valued byte).
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASCII `0`（实际上在转义字符后写的是ASCII `0`，而不是零值字节）。
- en: If the `FIELDS ESCAPED BY` character is empty, no characters are escaped and
    `NULL` is output as `NULL`, not `\N`. It is probably not a good idea to specify
    an empty escape character, particularly if field values in your data contain any
    of the characters in the list just given.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`FIELDS ESCAPED BY`字符为空，则不会转义任何字符，`NULL`会输出为`NULL`，而不是`\N`。如果您的数据中的字段值包含刚才列出的任何字符，可能不是一个好主意指定一个空的转义字符。
- en: 'In certain cases, field- and line-handling options interact:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，字段和行处理选项会相互作用：
- en: If `LINES TERMINATED BY` is an empty string and `FIELDS TERMINATED BY` is nonempty,
    lines are also terminated with `FIELDS TERMINATED BY`.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`LINES TERMINATED BY`是空字符串且`FIELDS TERMINATED BY`不为空，则行也以`FIELDS TERMINATED
    BY`结束。
- en: If the `FIELDS TERMINATED BY` and `FIELDS ENCLOSED BY` values are both empty
    (`''`), a fixed-row (nondelimited) format is used. With fixed-row format, no delimiters
    are used between fields (but you can still have a line terminator). Instead, column
    values are read and written using a field width wide enough to hold all values
    in the field. For [`TINYINT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`SMALLINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT"), [`MEDIUMINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT"), and [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), the field widths are 4,
    6, 8, 11, and 20, respectively, no matter what the declared display width is.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`FIELDS TERMINATED BY`和`FIELDS ENCLOSED BY`值都为空（`''`），则使用固定行（非分隔）格式。使用固定行格式，字段之间不使用分隔符（但仍然可以有行终止符）。相反，列值使用足够宽度的字段宽度读取和写入以容纳字段中的所有值。对于[`TINYINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT")、[`SMALLINT`](integer-types.html "13.1.2 Integer Types (Exact Value) -
    INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")、[`MEDIUMINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT")、[`INT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")和[`BIGINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")，字段宽度分别为4、6、8、11和20，无论声明的显示宽度是多少。
- en: '`LINES TERMINATED BY` is still used to separate lines. If a line does not contain
    all fields, the rest of the columns are set to their default values. If you do
    not have a line terminator, you should set this to `''''`. In this case, the text
    file must contain all fields for each row.'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LINES TERMINATED BY`仍用于分隔行。如果一行不包含所有字段，则其余列将设置为默认值。如果您没有行终止符，应将其设置为`''''`。在这种情况下，文本文件必须为每行包含所有字段。'
- en: Fixed-row format also affects handling of `NULL` values, as described later.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 固定行格式还会影响`NULL`值的处理，如后面所述。
- en: Note
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Fixed-size format does not work if you are using a multibyte character set.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用多字节字符集，则固定大小格式无法工作。
- en: 'Handling of `NULL` values varies according to the `FIELDS` and `LINES` options
    in use:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用的`FIELDS`和`LINES`选项，`NULL`值的处理方式会有所不同：
- en: For the default `FIELDS` and `LINES` values, `NULL` is written as a field value
    of `\N` for output, and a field value of `\N` is read as `NULL` for input (assuming
    that the `ESCAPED BY` character is `\`).
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于默认的`FIELDS`和`LINES`值，`NULL`被写为输出的字段值`\N`，并且输入时字段值`\N`被读取为`NULL`（假设`ESCAPED
    BY`字符为`\`）。
- en: If `FIELDS ENCLOSED BY` is not empty, a field containing the literal word `NULL`
    as its value is read as a `NULL` value. This differs from the word `NULL` enclosed
    within `FIELDS ENCLOSED BY` characters, which is read as the string `'NULL'`.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`FIELDS ENCLOSED BY`不为空，则包含字面单词`NULL`的字段被读取为`NULL`值。这与包含在`FIELDS ENCLOSED
    BY`字符中的单词`NULL`不同，后者被读取为字符串`'NULL'`。
- en: If `FIELDS ESCAPED BY` is empty, `NULL` is written as the word `NULL`.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`FIELDS ESCAPED BY`为空，则`NULL`会被写为单词`NULL`。
- en: With fixed-row format (which is used when `FIELDS TERMINATED BY` and `FIELDS
    ENCLOSED BY` are both empty), `NULL` is written as an empty string. This causes
    both `NULL` values and empty strings in the table to be indistinguishable when
    written to the file because both are written as empty strings. If you need to
    be able to tell the two apart when reading the file back in, you should not use
    fixed-row format.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用固定行格式（当`FIELDS TERMINATED BY`和`FIELDS ENCLOSED BY`均为空时使用）时，`NULL`被写为空字符串。这导致表中的`NULL`值和空字符串在写入文件时无法区分，因为两者都被写为空字符串。如果您需要在读取文件时能够区分这两者，请不要使用固定行格式。
- en: An attempt to load `NULL` into a `NOT NULL` column produces either a warning
    or an error according to the rules described in [Column Value Assignment](load-data.html#load-data-column-assignments
    "Column Value Assignment").
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将`NULL`加载到`NOT NULL`列中会根据[列值分配](load-data.html#load-data-column-assignments
    "Column Value Assignment")中描述的规则产生警告或错误。
- en: 'Some cases are not supported by [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA
    Statement"):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一些情况不受[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")支持：
- en: Fixed-size rows (`FIELDS TERMINATED BY` and `FIELDS ENCLOSED BY` both empty)
    and [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") or [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") columns.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定大小行（`FIELDS TERMINATED BY`和`FIELDS ENCLOSED BY`均为空）以及[`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types")或[`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")列。
- en: 'If you specify one separator that is the same as or a prefix of another, [`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement") cannot interpret the input
    properly. For example, the following `FIELDS` clause would cause problems:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您指定一个与另一个相同或前缀相同的分隔符，[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")无法正确解释输入。例如，以下`FIELDS`子句会导致问题：
- en: '[PRE15]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If `FIELDS ESCAPED BY` is empty, a field value that contains an occurrence of
    `FIELDS ENCLOSED BY` or `LINES TERMINATED BY` followed by the `FIELDS TERMINATED
    BY` value causes [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") to
    stop reading a field or line too early. This happens because [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") cannot properly determine where the field or line
    value ends.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`FIELDS ESCAPED BY`为空，则包含`FIELDS ENCLOSED BY`或`LINES TERMINATED BY`后跟`FIELDS
    TERMINATED BY`值的字段值会导致[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")过早停止读取字段或行。这是因为[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement")无法正确确定字段或行值的结束位置。
- en: Column List Specification
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 列列表规范
- en: 'The following example loads all columns of the `persondata` table:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例加载`persondata`表的所有列：
- en: '[PRE16]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'By default, when no column list is provided at the end of the [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") statement, input lines are expected to contain a
    field for each table column. If you want to load only some of a table''s columns,
    specify a column list:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")语句末尾未提供列列表时，预期输入行包含每个表列的字段。如果您只想加载表的部分列，请指定列列表：
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You must also specify a column list if the order of the fields in the input
    file differs from the order of the columns in the table. Otherwise, MySQL cannot
    tell how to match input fields with table columns.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入文件中字段的顺序与表中列的顺序不同，则还必须指定列列表。否则，MySQL无法确定如何将输入字段与表列匹配。
- en: Input Preprocessing
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 输入预处理
- en: Each instance of *`col_name_or_user_var`* in [`LOAD DATA`](load-data.html "15.2.9 LOAD
    DATA Statement") syntax is either a column name or a user variable. With user
    variables, the `SET` clause enables you to perform preprocessing transformations
    on their values before assigning the result to columns.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")语法中的每个*`col_name_or_user_var`*实例都是列名或用户变量。使用用户变量，`SET`子句使您能够在将结果分配给列之前对其值执行预处理转换。'
- en: 'User variables in the `SET` clause can be used in several ways. The following
    example uses the first input column directly for the value of `t1.column1`, and
    assigns the second input column to a user variable that is subjected to a division
    operation before being used for the value of `t1.column2`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`SET`子句中的用户变量可以以多种方式使用。以下示例直接使用第一个输入列作为`t1.column1`的值，并将第二个输入列分配给一个用户变量，该用户变量在用于`t1.column2`的值之前经历了除法操作：'
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `SET` clause can be used to supply values not derived from the input file.
    The following statement sets `column3` to the current date and time:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`SET`子句可用于提供不是从输入文件派生的值。以下语句将`column3`设置为当前日期和时间：'
- en: '[PRE19]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can also discard an input value by assigning it to a user variable and
    not assigning the variable to any table column:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过将其分配给用户变量并不将变量分配给任何表列来丢弃输入值：
- en: '[PRE20]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Use of the column/variable list and `SET` clause is subject to the following
    restrictions:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 列/变量列表和`SET`子句的使用受以下限制：
- en: Assignments in the `SET` clause should have only column names on the left hand
    side of assignment operators.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET`子句中的赋值应该只在赋值运算符的左侧具有列名。'
- en: You can use subqueries in the right hand side of `SET` assignments. A subquery
    that returns a value to be assigned to a column may be a scalar subquery only.
    Also, you cannot use a subquery to select from the table that is being loaded.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在`SET`赋值的右侧使用子查询。返回要分配给列的值的子查询只能是标量子查询。此外，您不能使用子查询从正在加载的表中进行选择。
- en: Lines ignored by an `IGNORE *`number`* LINES` clause are not processed for the
    column/variable list or `SET` clause.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被`IGNORE *`number`* LINES`子句忽略的行不会被处理为列/变量列表或`SET`子句。
- en: User variables cannot be used when loading data with fixed-row format because
    user variables do not have a display width.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用固定行格式加载数据时，不能使用用户变量，因为用户变量没有显示宽度。
- en: Column Value Assignment
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 列值分配
- en: To process an input line, [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    splits it into fields and uses the values according to the column/variable list
    and the `SET` clause, if they are present. Then the resulting row is inserted
    into the table. If there are `BEFORE INSERT` or `AFTER INSERT` triggers for the
    table, they are activated before or after inserting the row, respectively.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理输入行，[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")将其拆分为字段，并根据列/变量列表和`SET`子句中的值使用这些值，如果它们存在的话。然后将生成的行插入表中。如果表中有`BEFORE
    INSERT`或`AFTER INSERT`触发器，则在插入行之前或之后分别激活它们。
- en: 'Interpretation of field values and assignment to table columns depends on these
    factors:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 字段值的解释和分配到表列取决于这些因素：
- en: The SQL mode (the value of the [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    system variable). The mode can be nonrestrictive, or restrictive in various ways.
    For example, strict SQL mode can be enabled, or the mode can include values such
    as [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date) or [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date).
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL模式（[`sql_mode`](server-system-variables.html#sysvar_sql_mode)系统变量的值）。该模式可以以各种方式是非限制性的，或者是限制性的。例如，可以启用严格的SQL模式，或者模式可以包括值，如[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)或[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)。
- en: Presence or absence of the `IGNORE` and `LOCAL` modifiers.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IGNORE`和`LOCAL`修饰符的存在或缺失。'
- en: 'Those factors combine to produce restrictive or nonrestrictive data interpretation
    by [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement"):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这些因素结合起来产生了由[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")进行的限制性或非限制性数据解释：
- en: Data interpretation is restrictive if the SQL mode is restrictive and neither
    the `IGNORE` nor the `LOCAL` modifier is specified. Errors terminate the load
    operation.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 SQL 模式是限制性的，且未指定 `IGNORE` 或 `LOCAL` 修饰符，则数据解释是限制性的。错误会终止加载操作。
- en: Data interpretation is nonrestrictive if the SQL mode is nonrestrictive or the
    `IGNORE` or `LOCAL` modifier is specified. (In particular, either modifier if
    specified *overrides* a restrictive SQL mode when the `REPLACE` modifier is omitted.)
    Errors become warnings and the load operation continues.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 SQL 模式是非限制性的，或者指定了 `IGNORE` 或 `LOCAL` 修饰符，则数据解释是非限制性的。（特别是，如果未指定 `REPLACE`
    修饰符，则指定任一修饰符 *覆盖* 了限制性 SQL 模式。）错误变为警告，加载操作继续进行。
- en: 'Restrictive data interpretation uses these rules:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 限制性数据解释使用以下规则：
- en: Too many or too few fields results an error.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段过多或过少会导致错误。
- en: Assigning `NULL` (that is, `\N`) to a non-`NULL` column results in an error.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`NULL`（即`\N`）赋给非`NULL`列会导致错误。
- en: A value that is out of range for the column data type results in an error.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超出列数据类型范围的值会导致错误。
- en: Invalid values produce errors. For example, a value such as `'x'` for a numeric
    column results in an error, not conversion to 0.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无效值产生错误。例如，数值列的值如 `'x'` 会导致错误，而不是转换为 0。
- en: 'By contrast, nonrestrictive data interpretation uses these rules:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，非限制性数据解释使用以下规则：
- en: If an input line has too many fields, the extra fields are ignored and the number
    of warnings is incremented.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输入行字段太多，则额外字段将被忽略，并且警告数量会增加。
- en: If an input line has too few fields, the columns for which input fields are
    missing are assigned their default values. Default value assignment is described
    in [Section 13.6, “Data Type Default Values”](data-type-defaults.html "13.6 Data
    Type Default Values").
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输入行字段太少，则为缺少输入字段的列分配它们的默认值。默认值分配在[第13.6节，“数据类型默认值”](data-type-defaults.html
    "13.6 数据类型默认值")中描述。
- en: Assigning `NULL` (that is, `\N`) to a non-`NULL` column results in assignment
    of the implicit default value for the column data type. Implicit default values
    are described in [Section 13.6, “Data Type Default Values”](data-type-defaults.html
    "13.6 Data Type Default Values").
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`NULL`（即`\N`）赋给非`NULL`列会将隐式默认值分配给列数据类型。隐式默认值在[第13.6节，“数据类型默认值”](data-type-defaults.html
    "13.6 数据类型默认值")中描述。
- en: 'Invalid values produce warnings rather than errors, and are converted to the
    “closest” valid value for the column data type. Examples:'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无效值产生警告而不是错误，并转换为列数据类型的“最接近”有效值。例如：
- en: A value such as `'x'` for a numeric column results in conversion to 0.
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于数值列的值如 `'x'` 会转换为 0。
- en: An out-of-range numeric or temporal value is clipped to the closest endpoint
    of the range for the column data type.
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超出范围的数值或时间值将被剪切到列数据类型范围的最近端点。
- en: An invalid value for a `DATETIME`, `DATE`, or `TIME` column is inserted as the
    implicit default value, regardless of the SQL mode [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)
    setting. The implicit default is the appropriate “zero” value for the type (`'0000-00-00
    00:00:00'`, `'0000-00-00'`, or `'00:00:00'`). See [Section 13.2, “Date and Time
    Data Types”](date-and-time-types.html "13.2 Date and Time Data Types").
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `DATETIME`、`DATE` 或 `TIME` 列的无效值将插入为隐式默认值，无论 SQL 模式 [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)
    设置如何。隐式默认值是该类型的适当“零”值（`'0000-00-00 00:00:00'`、`'0000-00-00'` 或 `'00:00:00'`）。请参见[第13.2节，“日期和时间数据类型”](date-and-time-types.html
    "13.2 日期和时间数据类型")。
- en: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") interprets an empty
    field value differently from a missing field:'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") 对待空字段值与缺少字段不同：'
- en: For string types, the column is set to the empty string.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于字符串类型，该列被设置为空字符串。
- en: For numeric types, the column is set to `0`.
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于数值类型，该列被设置为`0`。
- en: For date and time types, the column is set to the appropriate “zero” value for
    the type. See [Section 13.2, “Date and Time Data Types”](date-and-time-types.html
    "13.2 Date and Time Data Types").
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于日期和时间类型，该列被设置为该类型的适当“零”值。请参见[第13.2节，“日期和时间数据类型”](date-and-time-types.html
    "13.2 日期和时间数据类型")。
- en: These are the same values that result if you assign an empty string explicitly
    to a string, numeric, or date or time type explicitly in an [`INSERT`](insert.html
    "15.2.7 INSERT Statement") or [`UPDATE`](update.html "15.2.17 UPDATE Statement")
    statement.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些是在 [`INSERT`](insert.html "15.2.7 INSERT Statement") 或 [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") 语句中明确将空字符串分配给字符串、数值、日期或时间类型时的结果。
- en: '[`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    columns are set to the current date and time only if there is a `NULL` value for
    the column (that is, `\N`) and the column is not declared to permit `NULL` values,
    or if the [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types") column default value is the current timestamp and it is omitted from the
    field list when a field list is specified.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当列中存在`NULL`值（即`\N`）且该列未声明允许`NULL`值，或者[`TIMESTAMP`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") 列的默认值为当前时间戳且在指定字段列表时被省略时，[`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") 列才设置为当前日期和时间。
- en: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") regards all input
    as strings, so you cannot use numeric values for [`ENUM`](enum.html "13.3.5 The
    ENUM Type") or [`SET`](set.html "13.3.6 The SET Type") columns the way you can
    with [`INSERT`](insert.html "15.2.7 INSERT Statement") statements. All [`ENUM`](enum.html
    "13.3.5 The ENUM Type") and [`SET`](set.html "13.3.6 The SET Type") values must
    be specified as strings.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") 将所有输入视为字符串，因此不能像使用[`INSERT`](insert.html
    "15.2.7 INSERT Statement") 语句那样在[`ENUM`](enum.html "13.3.5 The ENUM Type") 或[`SET`](set.html
    "13.3.6 The SET Type") 列中使用数值。所有[`ENUM`](enum.html "13.3.5 The ENUM Type") 和[`SET`](set.html
    "13.3.6 The SET Type") 值必须指定为字符串。'
- en: '[`BIT`](bit-type.html "13.1.5 Bit-Value Type - BIT") values cannot be loaded
    directly using binary notation (for example, `b''011010''`). To work around this,
    use the `SET` clause to strip off the leading `b''` and trailing `''` and perform
    a base-2 to base-10 conversion so that MySQL loads the values into the [`BIT`](bit-type.html
    "13.1.5 Bit-Value Type - BIT") column properly:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 不能直接使用二进制表示法（例如，`b'011010'`）加载[`BIT`](bit-type.html "13.1.5 Bit-Value Type -
    BIT") 值。为解决此问题，请使用`SET`子句去除前导的`b'`和尾随的`'`，并执行二进制到十进制的转换，以便MySQL正确将值加载到[`BIT`](bit-type.html
    "13.1.5 Bit-Value Type - BIT") 列中：
- en: '[PRE21]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For [`BIT`](bit-type.html "13.1.5 Bit-Value Type - BIT") values in `0b` binary
    notation (for example, `0b011010`), use this `SET` clause instead to strip off
    the leading `0b`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以`0b`二进制表示法（例如，`0b011010`）的[`BIT`](bit-type.html "13.1.5 Bit-Value Type -
    BIT") 值，请改用以下`SET`子句以去除前导的`0b`：
- en: '[PRE22]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Partitioned Table Support
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分区表支持
- en: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") supports explicit
    partition selection using the `PARTITION` clause with a list of one or more comma-separated
    names of partitions, subpartitions, or both. When this clause is used, if any
    rows from the file cannot be inserted into any of the partitions or subpartitions
    named in the list, the statement fails with the error Found a row not matching
    the given partition set. For more information and examples, see [Section 26.5,
    “Partition Selection”](partitioning-selection.html "26.5 Partition Selection").'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") 支持使用`PARTITION`子句显式选择分区，其中包含一个或多个逗号分隔的分区、子分区或两者的名称列表。当使用此子句时，如果文件中的任何行无法插入到列表中命名的任何分区或子分区中，则该语句将失败，并显示错误消息“找到一个不匹配给定分区集的行”。有关更多信息和示例，请参见[第26.5节，“分区选择”](partitioning-selection.html
    "26.5 Partition Selection")。'
- en: Concurrency Considerations
  id: totrans-205
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 并发考虑事项
- en: With the `LOW_PRIORITY` modifier, execution of the [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") statement is delayed until no other clients are
    reading from the table. This affects only storage engines that use only table-level
    locking (such as `MyISAM`, `MEMORY`, and `MERGE`).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`LOW_PRIORITY`修饰符，[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    语句的执行将延迟，直到没有其他客户端从表中读取数据。这仅影响仅使用表级锁定的存储引擎（如`MyISAM`、`MEMORY`和`MERGE`）。
- en: With the `CONCURRENT` modifier and a `MyISAM` table that satisfies the condition
    for concurrent inserts (that is, it contains no free blocks in the middle), other
    threads can retrieve data from the table while [`LOAD DATA`](load-data.html "15.2.9 LOAD
    DATA Statement") is executing. This modifier affects the performance of [`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement") a bit, even if no other thread
    is using the table at the same time.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CONCURRENT`修饰符和满足并发插入条件的`MyISAM`表（即中间不包含空闲块），其他线程可以在[`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") 执行时从表中检索数据。即使没有其他线程同时使用表，此修饰符也会稍微影响[`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") 的性能。
- en: Statement Result Information
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语句结果信息
- en: 'When the [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") statement
    finishes, it returns an information string in the following format:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") 语句完成时，将以以下格式返回信息字符串：
- en: '[PRE23]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Warnings occur under the same circumstances as when values are inserted using
    the [`INSERT`](insert.html "15.2.7 INSERT Statement") statement (see [Section 15.2.7,
    “INSERT Statement”](insert.html "15.2.7 INSERT Statement")), except that [`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement") also generates warnings when
    there are too few or too many fields in the input row.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 警告发生的情况与使用[`INSERT`](insert.html "15.2.7 INSERT Statement")语句插入值时相同（参见[Section 15.2.7,
    “INSERT Statement”](insert.html "15.2.7 INSERT Statement")），只是当输入行中字段过少或过多时，[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement")也会生成警告。
- en: You can use [`SHOW WARNINGS`](show-warnings.html "15.7.7.42 SHOW WARNINGS Statement")
    to get a list of the first [`max_error_count`](server-system-variables.html#sysvar_max_error_count)
    warnings as information about what went wrong. See [Section 15.7.7.42, “SHOW WARNINGS
    Statement”](show-warnings.html "15.7.7.42 SHOW WARNINGS Statement").
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[`SHOW WARNINGS`](show-warnings.html "15.7.7.42 SHOW WARNINGS Statement")获取前[`max_error_count`](server-system-variables.html#sysvar_max_error_count)个警告的列表，以了解出了什么问题。请参见[Section 15.7.7.42,
    “SHOW WARNINGS Statement”](show-warnings.html "15.7.7.42 SHOW WARNINGS Statement")。
- en: If you are using the C API, you can get information about the statement by calling
    the [`mysql_info()`](/doc/c-api/8.0/en/mysql-info.html) function. See [mysql_info()](/doc/c-api/8.0/en/mysql-info.html).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用C API，可以通过调用[`mysql_info()`](/doc/c-api/8.0/en/mysql-info.html)函数获取有关语句的信息。请参见[mysql_info()](/doc/c-api/8.0/en/mysql-info.html)。
- en: Replication Considerations
  id: totrans-214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复制注意事项
- en: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") is considered unsafe
    for statement-based replication. If you use [`LOAD DATA`](load-data.html "15.2.9 LOAD
    DATA Statement") with [`binlog_format=STATEMENT`](replication-options-binary-log.html#sysvar_binlog_format),
    each replica on which the changes are to be applied creates a temporary file containing
    the data. This temporary file is not encrypted, even if binary log encryption
    is active on the source, If encryption is required, use row-based or mixed binary
    logging format instead, for which replicas do not create the temporary file. For
    more information on the interaction between [`LOAD DATA`](load-data.html "15.2.9 LOAD
    DATA Statement") and replication, see [Section 19.5.1.19, “Replication and LOAD
    DATA”](replication-features-load-data.html "19.5.1.19 Replication and LOAD DATA").'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")被认为在基于语句的复制中是不安全的。如果你在[`binlog_format=STATEMENT`](replication-options-binary-log.html#sysvar_binlog_format)下使用[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement")，每个要应用更改的副本都会创建一个包含数据的临时文件。即使源端启用了二进制日志加密，这个临时文件也不会被加密。如果需要加密，应该使用基于行或混合的二进制日志格式，副本不会创建临时文件。关于[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement")和复制之间的交互更多信息，请参见[Section 19.5.1.19,
    “Replication and LOAD DATA”](replication-features-load-data.html "19.5.1.19 Replication
    and LOAD DATA")。'
- en: Miscellaneous Topics
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 杂项主题
- en: 'On Unix, if you need [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    to read from a pipe, you can use the following technique (the example loads a
    listing of the `/` directory into the table `db1.t1`):'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix上，如果需要[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")从管道中读取数据，可以使用以下技术（示例将`/`目录的列表加载到表`db1.t1`中）：
- en: '[PRE24]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here you must run the command that generates the data to be loaded and the [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") commands either on separate terminals,
    or run the data generation process in the background (as shown in the preceding
    example). If you do not do this, the pipe blocks until data is read by the [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") process.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你必须在生成要加载的数据的命令和[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")命令上分别运行在不同的终端，或者在后台运行数据生成过程（如前面的示例所示）。如果不这样做，管道会一直阻塞，直到[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")进程读取数据。
