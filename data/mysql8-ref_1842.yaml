- en: 26.2 Partitioning Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 26.2 分区类型
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html)
- en: '[26.2.1 RANGE Partitioning](partitioning-range.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.2.1 范围分区](partitioning-range.html)'
- en: '[26.2.2 LIST Partitioning](partitioning-list.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.2.2 LIST 分区](partitioning-list.html)'
- en: '[26.2.3 COLUMNS Partitioning](partitioning-columns.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.2.3 列分区](partitioning-columns.html)'
- en: '[26.2.4 HASH Partitioning](partitioning-hash.html)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.2.4 HASH 分区](partitioning-hash.html)'
- en: '[26.2.5 KEY Partitioning](partitioning-key.html)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.2.5 KEY 分区](partitioning-key.html)'
- en: '[26.2.6 Subpartitioning](partitioning-subpartitions.html)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.2.6 子分区](partitioning-subpartitions.html)'
- en: '[26.2.7 How MySQL Partitioning Handles NULL](partitioning-handling-nulls.html)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.2.7 MySQL分区如何处理NULL值](partitioning-handling-nulls.html)'
- en: 'This section discusses the types of partitioning which are available in MySQL
    8.0\. These include the types listed here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了MySQL 8.0中可用的分区类型。这些包括以下列出的类型：
- en: '**RANGE partitioning. ** This type of partitioning assigns rows to partitions
    based on column values falling within a given range. See [Section 26.2.1, “RANGE
    Partitioning”](partitioning-range.html "26.2.1 RANGE Partitioning"). For information
    about an extension to this type, `RANGE COLUMNS`, see [Section 26.2.3.1, “RANGE
    COLUMNS partitioning”](partitioning-columns-range.html "26.2.3.1 RANGE COLUMNS
    partitioning").'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RANGE 分区。** 这种分区类型根据列值落在给定范围内来将行分配到分区。参见[26.2.1节，“RANGE分区”](partitioning-range.html
    "26.2.1 RANGE Partitioning")。有关此类型的扩展信息，`RANGE COLUMNS`，请参见[26.2.3.1节，“RANGE COLUMNS分区”](partitioning-columns-range.html
    "26.2.3.1 RANGE COLUMNS partitioning")。'
- en: '**LIST partitioning. ** Similar to partitioning by `RANGE`, except that the
    partition is selected based on columns matching one of a set of discrete values.
    See [Section 26.2.2, “LIST Partitioning”](partitioning-list.html "26.2.2 LIST
    Partitioning"). For information about an extension to this type, `LIST COLUMNS`,
    see [Section 26.2.3.2, “LIST COLUMNS partitioning”](partitioning-columns-list.html
    "26.2.3.2 LIST COLUMNS partitioning").'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LIST 分区。** 类似于`RANGE`分区，不同之处在于根据与一组离散值匹配的列来选择分区。参见[26.2.2节，“LIST分区”](partitioning-list.html
    "26.2.2 LIST Partitioning")。有关此类型的扩展信息，`LIST COLUMNS`，请参见[26.2.3.2节，“LIST COLUMNS分区”](partitioning-columns-list.html
    "26.2.3.2 LIST COLUMNS partitioning")。'
- en: '**HASH partitioning. ** With this type of partitioning, a partition is selected
    based on the value returned by a user-defined expression that operates on column
    values in rows to be inserted into the table. The function may consist of any
    expression valid in MySQL that yields an integer value. See [Section 26.2.4, “HASH
    Partitioning”](partitioning-hash.html "26.2.4 HASH Partitioning").'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HASH 分区。** 使用这种分区类型，根据用户定义的表达式返回的值来选择一个分区，该表达式在要插入表中的行的列值上操作。该函数可以由MySQL中任何产生整数值的有效表达式组成。参见[26.2.4节，“HASH分区”](partitioning-hash.html
    "26.2.4 HASH Partitioning")。'
- en: An extension to this type, `LINEAR HASH`, is also available, see [Section 26.2.4.1,
    “LINEAR HASH Partitioning”](partitioning-linear-hash.html "26.2.4.1 LINEAR HASH
    Partitioning").
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种类型的扩展，`LINEAR HASH`，也是可用的，请参见[26.2.4.1节，“LINEAR HASH分区”](partitioning-linear-hash.html
    "26.2.4.1 LINEAR HASH Partitioning")。
- en: '**KEY partitioning. ** This type of partitioning is similar to partitioning
    by `HASH`, except that only one or more columns to be evaluated are supplied,
    and the MySQL server provides its own hashing function. These columns can contain
    other than integer values, since the hashing function supplied by MySQL guarantees
    an integer result regardless of the column data type. An extension to this type,
    `LINEAR KEY`, is also available. See [Section 26.2.5, “KEY Partitioning”](partitioning-key.html
    "26.2.5 KEY Partitioning").'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KEY 分区。** 这种分区类型类似于`HASH`分区，不同之处在于只提供要评估的一个或多个列，并且MySQL服务器提供自己的哈希函数。这些列可以包含除整数值以外的其他值，因为MySQL提供的哈希函数保证无论列数据类型如何，都会得到一个整数结果。这种类型的扩展，`LINEAR
    KEY`，也是可用的。参见[26.2.5节，“KEY分区”](partitioning-key.html "26.2.5 KEY Partitioning")。'
- en: A very common use of database partitioning is to segregate data by date. Some
    database systems support explicit date partitioning, which MySQL does not implement
    in 8.0\. However, it is not difficult in MySQL to create partitioning schemes
    based on [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"),
    [`TIME`](time.html "13.2.3 The TIME Type"), or [`DATETIME`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") columns, or based on expressions making
    use of such columns.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库分区的一个非常常见的用途是按日期对数据进行分隔。一些数据库系统支持显式日期分区，MySQL在8.0中没有实现。但是，在MySQL中，基于[`DATE`](datetime.html
    "13.2.2 DATE、DATETIME和TIMESTAMP类型")、[`TIME`](time.html "13.2.3 TIME类型")或[`DATETIME`](datetime.html
    "13.2.2 DATE、DATETIME和TIMESTAMP类型")列或利用这些列的表达式创建分区方案并不困难。
- en: 'When partitioning by `KEY` or `LINEAR KEY`, you can use a [`DATE`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), [`TIME`](time.html "13.2.3 The
    TIME Type"), or [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types") column as the partitioning column without performing any modification
    of the column value. For example, this table creation statement is perfectly valid
    in MySQL:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当按`KEY`或`LINEAR KEY`进行分区时，您可以使用[`DATE`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")、[`TIME`](time.html
    "13.2.3 TIME类型")或[`DATETIME`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")列作为分区列，而无需对列值进行任何修改。例如，在MySQL中，以下表创建语句是完全有效的：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In MySQL 8.0, it is also possible to use a [`DATE`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") or [`DATETIME`](datetime.html "13.2.2 The
    DATE, DATETIME, and TIMESTAMP Types") column as the partitioning column using
    `RANGE COLUMNS` and `LIST COLUMNS` partitioning.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，还可以使用`RANGE COLUMNS`和`LIST COLUMNS`分区使用[`DATE`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")或[`DATETIME`](datetime.html
    "13.2.2 DATE、DATETIME和TIMESTAMP类型")列作为分区列。
- en: 'Other partitioning types require a partitioning expression that yields an integer
    value or `NULL`. If you wish to use date-based partitioning by `RANGE`, `LIST`,
    `HASH`, or `LINEAR HASH`, you can simply employ a function that operates on a
    [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), [`TIME`](time.html
    "13.2.3 The TIME Type"), or [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") column and returns such a value, as shown here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 其他分区类型需要产生整数值或`NULL`的分区表达式。如果您希望通过`RANGE`、`LIST`、`HASH`或`LINEAR HASH`进行基于日期的分区，您可以简单地使用一个操作[`DATE`](datetime.html
    "13.2.2 DATE、DATETIME和TIMESTAMP类型")、[`TIME`](time.html "13.2.3 TIME类型")或[`DATETIME`](datetime.html
    "13.2.2 DATE、DATETIME和TIMESTAMP类型")列并返回这样一个值的函数，如下所示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Additional examples of partitioning using dates may be found in the following
    sections of this chapter:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的以下部分中还可以找到使用日期进行分区的其他示例：
- en: '[Section 26.2.1, “RANGE Partitioning”](partitioning-range.html "26.2.1 RANGE
    Partitioning")'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[26.2.1节，“RANGE分区”](partitioning-range.html "26.2.1 RANGE Partitioning")'
- en: '[Section 26.2.4, “HASH Partitioning”](partitioning-hash.html "26.2.4 HASH Partitioning")'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[26.2.4节，“HASH分区”](partitioning-hash.html "26.2.4 HASH Partitioning")'
- en: '[Section 26.2.4.1, “LINEAR HASH Partitioning”](partitioning-linear-hash.html
    "26.2.4.1 LINEAR HASH Partitioning")'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[26.2.4.1节，“线性哈希分区”](partitioning-linear-hash.html "26.2.4.1 LINEAR HASH Partitioning")'
- en: 'For more complex examples of date-based partitioning, see the following sections:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有关基于日期的分区的更复杂示例，请参阅以下部分：
- en: '[Section 26.4, “Partition Pruning”](partitioning-pruning.html "26.4 Partition
    Pruning")'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[26.4节，“分区修剪”](partitioning-pruning.html "26.4 Partition Pruning")'
- en: '[Section 26.2.6, “Subpartitioning”](partitioning-subpartitions.html "26.2.6 Subpartitioning")'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[26.2.6节，“子分区”](partitioning-subpartitions.html "26.2.6 Subpartitioning")'
- en: MySQL partitioning is optimized for use with the [`TO_DAYS()`](date-and-time-functions.html#function_to-days),
    [`YEAR()`](date-and-time-functions.html#function_year), and [`TO_SECONDS()`](date-and-time-functions.html#function_to-seconds)
    functions. However, you can use other date and time functions that return an integer
    or `NULL`, such as [`WEEKDAY()`](date-and-time-functions.html#function_weekday),
    [`DAYOFYEAR()`](date-and-time-functions.html#function_dayofyear), or [`MONTH()`](date-and-time-functions.html#function_month).
    See [Section 14.7, “Date and Time Functions”](date-and-time-functions.html "14.7 Date
    and Time Functions"), for more information about such functions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 分区针对与[`TO_DAYS()`](date-and-time-functions.html#function_to-days)、[`YEAR()`](date-and-time-functions.html#function_year)和[`TO_SECONDS()`](date-and-time-functions.html#function_to-seconds)函数一起使用进行了优化。然而，你可以使用其他返回整数或`NULL`的日期和时间函数，如[`WEEKDAY()`](date-and-time-functions.html#function_weekday)、[`DAYOFYEAR()`](date-and-time-functions.html#function_dayofyear)或[`MONTH()`](date-and-time-functions.html#function_month)。有关这些函数的更多信息，请参见[第14.7节，“日期和时间函数”](date-and-time-functions.html
    "14.7 日期和时间函数")。
- en: It is important to remember—regardless of the type of partitioning that you
    use—that partitions are always numbered automatically and in sequence when created,
    starting with `0`. When a new row is inserted into a partitioned table, it is
    these partition numbers that are used in identifying the correct partition. For
    example, if your table uses 4 partitions, these partitions are numbered `0`, `1`,
    `2`, and `3`. For the `RANGE` and `LIST` partitioning types, it is necessary to
    ensure that there is a partition defined for each partition number. For `HASH`
    partitioning, the user-supplied expression must evaluate to an integer value.
    For `KEY` partitioning, this issue is taken care of automatically by the hashing
    function which the MySQL server employs internally.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用何种分区类型，都要记住，分区在创建时总是自动按顺序编号，从`0`开始。当向分区表插入新行时，使用这些分区编号来识别正确的分区。例如，如果你的表使用了4个分区，这些分区被编号为`0`、`1`、`2`和`3`。对于`RANGE`和`LIST`分区类型，必须确保为每个分区编号定义了一个分区。对于`HASH`分区，用户提供的表达式必须求值为整数值。对于`KEY`分区，这个问题由
    MySQL 服务器内部使用的哈希函数自动处理。
- en: 'Names of partitions generally follow the rules governing other MySQL identifiers,
    such as those for tables and databases. However, you should note that partition
    names are not case-sensitive. For example, the following [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statement fails as shown:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 分区的名称通常遵循其他 MySQL 标识符（如表和数据库）的规则。然而，你应该注意，分区名称不区分大小写。例如，如下所示的[`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE 语句")语句会失败：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Failure occurs because MySQL sees no difference between the partition names
    `mypart` and `MyPart`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 失败发生是因为 MySQL 在 `mypart` 和 `MyPart` 分区名称之间看不到任何区别。
- en: When you specify the number of partitions for the table, this must be expressed
    as a positive, nonzero integer literal with no leading zeros, and may not be an
    expression such as `0.8E+01` or `6-2`, even if it evaluates to an integer value.
    Decimal fractions are not permitted.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '当你为表指定分区数时，这必须表示为一个正的、非零的整数字面值，不能以`0.8E+01`或`6-2`这样的表达式表示，即使它求值为整数值也不行。不允许使用小数。 '
- en: In the sections that follow, we do not necessarily provide all possible forms
    for the syntax that can be used for creating each partition type; for this information,
    see [Section 15.1.20, “CREATE TABLE Statement”](create-table.html "15.1.20 CREATE
    TABLE Statement").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们并不一定提供用于创建每种分区类型的语法的所有可能形式；有关此信息，请参见[第15.1.20节，“CREATE TABLE 语句”](create-table.html
    "15.1.20 CREATE TABLE 语句")。
