- en: 14.13 Encryption and Compression Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.13 加密和压缩函数
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html](https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html)
- en: '**Table 14.18 Encryption Functions**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.18 加密函数**'
- en: '| Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt) | Decrypt
    using AES |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt) | 使用 AES
    解密 |'
- en: '| [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) | Encrypt
    using AES |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) | 使用 AES
    加密 |'
- en: '| [`COMPRESS()`](encryption-functions.html#function_compress) | Return result
    as a binary string |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`COMPRESS()`](encryption-functions.html#function_compress) | 以二进制字符串形式返回结果
    |'
- en: '| [`MD5()`](encryption-functions.html#function_md5) | Calculate MD5 checksum
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`MD5()`](encryption-functions.html#function_md5) | 计算 MD5 校验和 |'
- en: '| [`RANDOM_BYTES()`](encryption-functions.html#function_random-bytes) | Return
    a random byte vector |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`RANDOM_BYTES()`](encryption-functions.html#function_random-bytes) | 返回一个随机字节向量
    |'
- en: '| [`SHA1()`, `SHA()`](encryption-functions.html#function_sha1) | Calculate
    an SHA-1 160-bit checksum |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`SHA1()`, `SHA()`](encryption-functions.html#function_sha1) | 计算 SHA-1 160位校验和
    |'
- en: '| [`SHA2()`](encryption-functions.html#function_sha2) | Calculate an SHA-2
    checksum |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`SHA2()`](encryption-functions.html#function_sha2) | 计算 SHA-2 校验和 |'
- en: '| [`STATEMENT_DIGEST()`](encryption-functions.html#function_statement-digest)
    | Compute statement digest hash value |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`STATEMENT_DIGEST()`](encryption-functions.html#function_statement-digest)
    | 计算语句摘要哈希值 |'
- en: '| [`STATEMENT_DIGEST_TEXT()`](encryption-functions.html#function_statement-digest-text)
    | Compute normalized statement digest |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`STATEMENT_DIGEST_TEXT()`](encryption-functions.html#function_statement-digest-text)
    | 计算规范语句摘要 |'
- en: '| [`UNCOMPRESS()`](encryption-functions.html#function_uncompress) | Uncompress
    a string compressed |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`UNCOMPRESS()`](encryption-functions.html#function_uncompress) | 解压缩压缩的字符串
    |'
- en: '| [`UNCOMPRESSED_LENGTH()`](encryption-functions.html#function_uncompressed-length)
    | Return the length of a string before compression |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`UNCOMPRESSED_LENGTH()`](encryption-functions.html#function_uncompressed-length)
    | 返回压缩前字符串的长度 |'
- en: '| [`VALIDATE_PASSWORD_STRENGTH()`](encryption-functions.html#function_validate-password-strength)
    | Determine strength of password |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`VALIDATE_PASSWORD_STRENGTH()`](encryption-functions.html#function_validate-password-strength)
    | 确定密码强度 |'
- en: '| Name | Description |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: Many encryption and compression functions return strings for which the result
    might contain arbitrary byte values. If you want to store these results, use a
    column with a [`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY
    Types") or [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") binary string
    data type. This avoids potential problems with trailing space removal or character
    set conversion that would change data values, such as may occur if you use a nonbinary
    string data type ([`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), [`TEXT`](blob.html "13.3.4 The BLOB and
    TEXT Types")).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 许多加密和压缩函数返回的字符串可能包含任意字节值。如果您想存储这些结果，请使用具有[`VARBINARY`](binary-varbinary.html
    "13.3.3 BINARY 和 VARBINARY 类型")或[`BLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型")二进制字符串数据类型的列。这样可以避免由于使用非二进制字符串数据类型（[`CHAR`](char.html
    "13.3.2 CHAR 和 VARCHAR 类型"), [`VARCHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型"),
    [`TEXT`](blob.html "13.3.4 BLOB 和 TEXT 类型")）可能导致的尾随空格删除或字符集转换等潜在问题，从而改变数据值。
- en: 'Some encryption functions return strings of ASCII characters: [`MD5()`](encryption-functions.html#function_md5),
    [`SHA()`](encryption-functions.html#function_sha1), [`SHA1()`](encryption-functions.html#function_sha1),
    [`SHA2()`](encryption-functions.html#function_sha2), [`STATEMENT_DIGEST()`](encryption-functions.html#function_statement-digest),
    [`STATEMENT_DIGEST_TEXT()`](encryption-functions.html#function_statement-digest-text).
    Their return value is a string that has a character set and collation determined
    by the [`character_set_connection`](server-system-variables.html#sysvar_character_set_connection)
    and [`collation_connection`](server-system-variables.html#sysvar_collation_connection)
    system variables. This is a nonbinary string unless the character set is `binary`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一些加密函数返回ASCII字符的字符串：[`MD5()`](encryption-functions.html#function_md5), [`SHA()`](encryption-functions.html#function_sha1),
    [`SHA1()`](encryption-functions.html#function_sha1), [`SHA2()`](encryption-functions.html#function_sha2),
    [`STATEMENT_DIGEST()`](encryption-functions.html#function_statement-digest), [`STATEMENT_DIGEST_TEXT()`](encryption-functions.html#function_statement-digest-text)。它们的返回值是一个由[`character_set_connection`](server-system-variables.html#sysvar_character_set_connection)和[`collation_connection`](server-system-variables.html#sysvar_collation_connection)系统变量确定的具有字符集和排序规则的字符串。这是一个非二进制字符串，除非字符集是`binary`。
- en: If an application stores values from a function such as [`MD5()`](encryption-functions.html#function_md5)
    or [`SHA1()`](encryption-functions.html#function_sha1) that returns a string of
    hex digits, more efficient storage and comparisons can be obtained by converting
    the hex representation to binary using [`UNHEX()`](string-functions.html#function_unhex)
    and storing the result in a [`BINARY(*`N`*)`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types") column. Each pair of hexadecimal digits requires
    one byte in binary form, so the value of *`N`* depends on the length of the hex
    string. *`N`* is 16 for an [`MD5()`](encryption-functions.html#function_md5) value
    and 20 for a [`SHA1()`](encryption-functions.html#function_sha1) value. For [`SHA2()`](encryption-functions.html#function_sha2),
    *`N`* ranges from 28 to 32 depending on the argument specifying the desired bit
    length of the result.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序存储来自诸如[`MD5()`](encryption-functions.html#function_md5)或[`SHA1()`](encryption-functions.html#function_sha1)的函数返回十六进制数字字符串的值，可以通过使用[`UNHEX()`](string-functions.html#function_unhex)将十六进制表示转换为二进制形式并将结果存储在[`BINARY(*`N`*)`](binary-varbinary.html
    "13.3.3 BINARY和VARBINARY类型")列中获得更有效的存储和比较。每对十六进制数字在二进制形式中需要一个字节，因此*N*的值取决于十六进制字符串的长度。对于[`MD5()`](encryption-functions.html#function_md5)值，*N*为16，对于[`SHA1()`](encryption-functions.html#function_sha1)值为20。对于[`SHA2()`](encryption-functions.html#function_sha2)，*N*的范围从28到32，具体取决于指定结果所需位长度的参数。
- en: The size penalty for storing the hex string in a [`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") column is at least two times, up to eight times if the
    value is stored in a column that uses the `utf8mb4` character set (where each
    character uses 4 bytes). Storing the string also results in slower comparisons
    because of the larger values and the need to take character set collation rules
    into account.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")列中存储十六进制字符串的大小惩罚至少是两倍，如果该值存储在使用`utf8mb4`字符集的列中（其中每个字符使用4个字节），则最多是八倍。存储字符串还会导致比较速度变慢，因为数值更大，需要考虑字符集排序规则。
- en: 'Suppose that an application stores [`MD5()`](encryption-functions.html#function_md5)
    string values in a [`CHAR(32)`](char.html "13.3.2 The CHAR and VARCHAR Types")
    column:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个应用程序将[`MD5()`](encryption-functions.html#function_md5)字符串值存储在[`CHAR(32)`](char.html
    "13.3.2 CHAR和VARCHAR类型")列中：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To convert hex strings to more compact form, modify the application to use
    [`UNHEX()`](string-functions.html#function_unhex) and [`BINARY(16)`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") instead as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要将十六进制字符串转换为更紧凑的形式，请修改应用程序以使用[`UNHEX()`](string-functions.html#function_unhex)和[`BINARY(16)`](binary-varbinary.html
    "13.3.3 BINARY和VARBINARY类型")如下：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Applications should be prepared to handle the very rare case that a hashing
    function produces the same value for two different input values. One way to make
    collisions detectable is to make the hash column a primary key.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应准备处理散列函数为两个不同输入值产生相同值的极为罕见的情况。使碰撞可检测的一种方法是将哈希列设为主键。
- en: Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Exploits for the MD5 and SHA-1 algorithms have become known. You may wish to
    consider using another one-way encryption function described in this section instead,
    such as [`SHA2()`](encryption-functions.html#function_sha2).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: MD5和SHA-1算法的漏洞已经被发现。您可能希望考虑使用本节中描述的其他单向加密函数，例如[`SHA2()`](encryption-functions.html#function_sha2)。
- en: Caution
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Passwords or other sensitive values supplied as arguments to encryption functions
    are sent as cleartext to the MySQL server unless an SSL connection is used. Also,
    such values appear in any MySQL logs to which they are written. To avoid these
    types of exposure, applications can encrypt sensitive values on the client side
    before sending them to the server. The same considerations apply to encryption
    keys. To avoid exposing these, applications can use stored procedures to encrypt
    and decrypt values on the server side.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为加密函数参数提供的密码或其他敏感值在未使用SSL连接的情况下以明文形式发送到MySQL服务器。此外，这些值会出现在写入的任何MySQL日志中。为了避免这些类型的暴露，应用程序可以在将敏感值发送到服务器之前在客户端端对其进行加密。相同的考虑也适用于加密密钥。为了避免暴露这些，应用程序可以使用存储过程在服务器端对值进行加密和解密。
- en: '[`AES_DECRYPT(*`crypt_str`*,*`key_str`*[,*`init_vector`*][,*`kdf_name`*][,*`salt`*][,*`info
    | iterations`*])`](encryption-functions.html#function_aes-decrypt)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AES_DECRYPT(*`crypt_str`*,*`key_str`*[,*`init_vector`*][,*`kdf_name`*][,*`salt`*][,*`info
    | iterations`*])`](encryption-functions.html#function_aes-decrypt)'
- en: This function decrypts data using the official AES (Advanced Encryption Standard)
    algorithm. For more information, see the description of [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt).
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数使用官方AES（高级加密标准）算法解密数据。更多信息，请参阅[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)的描述。
- en: Statements that use [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)
    are unsafe for statement-based replication.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)的语句对基于语句的复制不安全。
- en: '[`AES_ENCRYPT(*`str`*,*`key_str`*[,*`init_vector`*][,*`kdf_name`*][,*`salt`*][,*`info
    | iterations`*])`](encryption-functions.html#function_aes-encrypt)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AES_ENCRYPT(*`str`*,*`key_str`*[,*`init_vector`*][,*`kdf_name`*][,*`salt`*][,*`info
    | iterations`*])`](encryption-functions.html#function_aes-encrypt)'
- en: '[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) and [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)
    implement encryption and decryption of data using the official AES (Advanced Encryption
    Standard) algorithm, previously known as “Rijndael.” The AES standard permits
    various key lengths. By default these functions implement AES with a 128-bit key
    length. Key lengths of 196 or 256 bits can be used, as described later. The key
    length is a trade off between performance and security.'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) 和 [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)
    实现使用官方AES（高级加密标准）算法加密和解密数据，此前被称为“Rijndael”。AES标准允许使用各种密钥长度。默认情况下，这些函数使用128位密钥长度实现AES。可以使用196位或256位的密钥长度，如后面所述。密钥长度是性能和安全性之间的权衡。'
- en: '[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) encrypts
    the string *`str`* using the key string *`key_str`*, and returns a binary string
    containing the encrypted output. [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)
    decrypts the encrypted string *`crypt_str`* using the key string *`key_str`*,
    and returns the original (binary) string in hexadecimal format. (To obtain the
    string as plaintext, cast the result to `CHAR`. Alternatively, start the [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") client with [`--skip-binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)
    to cause all binary values to be displayed as text.) If either function argument
    is `NULL`, the function returns `NULL`. If [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)
    detects invalid data or incorrect padding, it returns `NULL`. However, it is possible
    for [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt) to return
    a non-`NULL` value (possibly garbage) if the input data or the key is invalid.'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) 使用密钥字符串 *`key_str`*
    对字符串 *`str`* 进行加密，并返回包含加密输出的二进制字符串。[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)
    使用密钥字符串 *`key_str`* 对加密字符串 *`crypt_str`* 进行解密，并以十六进制格式返回原始（二进制）字符串。（要将字符串作为明文获取，将结果转换为
    `CHAR`。或者，使用 [`--skip-binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)
    启动[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端，以使所有二进制值显示为文本。）如果任一函数参数为
    `NULL`，函数将返回 `NULL`。如果[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)检测到无效数据或不正确的填充，它将返回
    `NULL`。但是，如果输入数据或密钥无效，[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)可能会返回一个非
    `NULL` 值（可能是垃圾）。'
- en: As of MySQL 8.0.30, these functions support the use of a key derivation function
    (KDF) to create a cryptographically strong secret key from the information passed
    in *`key_str`*. The derived key is used to encrypt and decrypt the data, and it
    remains in the MySQL Server instance and is not accessible to users. Using a KDF
    is highly recommended, as it provides better security than specifying your own
    premade key or deriving it by a simpler method as you use the function. The functions
    support HKDF (available from OpenSSL 1.1.0), for which you can specify an optional
    salt and context-specific information to include in the keying material, and PBKDF2
    (available from OpenSSL 1.0.2), for which you can specify an optional salt and
    set the number of iterations used to produce the key.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.30，这些函数支持使用密钥派生函数（KDF）从传递给 *`key_str`* 的信息创建一个密码强度强的秘密密钥。派生密钥用于加密和解密数据，并保留在MySQL服务器实例中，用户无法访问。强烈建议使用KDF，因为它提供比指定自己预制密钥或通过更简单的方法派生密钥更好的安全性。这些函数支持HKDF（自OpenSSL
    1.1.0起可用），您可以指定一个可选的盐和上下文特定信息以包含在密钥材料中，以及PBKDF2（自OpenSSL 1.0.2起可用），您可以指定一个可选的盐并设置用于生成密钥的迭代次数。
- en: '[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) and [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)
    permit control of the block encryption mode. The [`block_encryption_mode`](server-system-variables.html#sysvar_block_encryption_mode)
    system variable controls the mode for block-based encryption algorithms. Its default
    value is `aes-128-ecb`, which signifies encryption using a key length of 128 bits
    and ECB mode. For a description of the permitted values of this variable, see
    [Section 7.1.8, “Server System Variables”](server-system-variables.html "7.1.8 Server
    System Variables"). The optional *`init_vector`* argument is used to provide an
    initialization vector for block encryption modes that require it.'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)和[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)允许控制块加密模式。[`block_encryption_mode`](server-system-variables.html#sysvar_block_encryption_mode)系统变量控制基于块的加密算法的模式。其默认值为`aes-128-ecb`，表示使用128位密钥长度和ECB模式进行加密。有关此变量允许的值的描述，请参见[第7.1.8节，“服务器系统变量”](server-system-variables.html
    "7.1.8 Server System Variables")。可选的*`init_vector`*参数用于为需要初始化向量的块加密模式提供初始化向量。'
- en: Statements that use [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)
    or [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt) are unsafe
    for statement-based replication.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)或[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)的语句对于基于语句的复制是不安全的。
- en: If [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) is invoked
    from within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端内调用[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)，二进制字符串将使用十六进制表示，取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参见[第6.5.1节，“mysql
    — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: 'The arguments for the [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)
    and [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt) functions
    are as follows:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)和[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)函数的参数如下：'
- en: '*`str`*'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`str`*'
- en: The string for [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)
    to encrypt using the key string *`key_str`*, or (from MySQL 8.0.30) the key derived
    from it by the specified KDF. The string can be any length. Padding is automatically
    added to *`str`* so it is a multiple of a block as required by block-based algorithms
    such as AES. This padding is automatically removed by the [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)
    function.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)加密的字符串，使用密钥字符串*`key_str`*，或者（从MySQL
    8.0.30开始）使用指定KDF派生的密钥。字符串可以是任意长度。根据块为单位的算法（如AES）的要求，*`str`*会自动添加填充以使其成为块的倍数。此填充会被[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)函数自动移除。
- en: '*`crypt_str`*'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`crypt_str`*'
- en: 'The encrypted string for [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)
    to decrypt using the key string *`key_str`*, or (from MySQL 8.0.30) the key derived
    from it by the specified KDF. The string can be any length. The length of *`crypt_str`*
    can be calculated from the length of the original string using this formula:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)解密的加密字符串，使用密钥字符串*`key_str`*，或者（从MySQL
    8.0.30开始）使用指定KDF派生的密钥。字符串可以是任意长度。*`crypt_str`*的长度可以根据原始字符串的长度使用以下公式计算：
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*`key_str`*'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`key_str`*'
- en: The encryption key, or the input keying material that is used as the basis for
    deriving a key using a key derivation function (KDF). For the same instance of
    data, use the same value of *`key_str`* for encryption with [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)
    and decryption with [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt).
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加密密钥，或者作为基础使用密钥派生函数（KDF）派生密钥的输入密钥材料。对于相同的数据实例，使用相同的*`key_str`*值进行使用[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)进行加密和使用[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)进行解密。
- en: If you are using a KDF, which you can from MySQL 8.0.30, *`key_str`* can be
    any arbitrary information such as a password or passphrase. In the further arguments
    for the function, you specify the KDF name, then add further options to increase
    the security as appropriate for the KDF.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您使用KDF，可以从MySQL 8.0.30开始，*`key_str`*可以是任意信息，如密码或口令。在函数的进一步参数中，您指定KDF名称，然后添加进一步选项以根据KDF适当增加安全性。
- en: When you use a KDF, the function creates a cryptographically strong secret key
    from the information passed in *`key_str`* and any salt or additional information
    that you provide in the other arguments. The derived key is used to encrypt and
    decrypt the data, and it remains in the MySQL Server instance and is not accessible
    to users. Using a KDF is highly recommended, as it provides better security than
    specifying your own premade key or deriving it by a simpler method as you use
    the function.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您使用KDF时，函数会从*`key_str`*中传递的信息以及您在其他参数中提供的盐或其他信息创建一个密码学强大的密钥。派生密钥用于加密和解密数据，并保留在MySQL服务器实例中，用户无法访问。强烈建议使用KDF，因为它提供比指定自己的预制密钥或通过更简单的方法派生密钥更好的安全性。
- en: 'If you are not using a KDF, for a key length of 128 bits, the most secure way
    to pass a key to the *`key_str`* argument is to create a truly random 128-bit
    value and pass it as a binary value. For example:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果不使用KDF，对于128位的密钥长度，将密钥传递给*`key_str`*参数的最安全方式是创建一个真正随机的128位值并将其作为二进制值传递。例如：
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A passphrase can be used to generate an AES key by hashing the passphrase.
    For example:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用口令通过哈希口令生成AES密钥。例如：
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you exceed the maximum key length of 128 bits, a warning is returned. If
    you are not using a KDF, do not pass a password or passphrase directly to *`key_str`*,
    hash it first. Previous versions of this documentation suggested the former approach,
    but it is no longer recommended as the examples shown here are more secure.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果超过128位的最大密钥长度，将返回警告。如果不使用KDF，请不要直接将密码或口令传递给*`key_str`*，先对其进行哈希处理。本文档的早期版本建议采用前一种方法，但不再建议，因为这里显示的示例更安全。
- en: '*`init_vector`*'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`init_vector`*'
- en: An initialization vector, for block encryption modes that require it. The [`block_encryption_mode`](server-system-variables.html#sysvar_block_encryption_mode)
    system variable controls the mode. For the same instance of data, use the same
    value of *`init_vector`* for encryption with [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)
    and decryption with [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt).
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于需要的块加密模式的初始化向量。[`block_encryption_mode`](server-system-variables.html#sysvar_block_encryption_mode)系统变量控制模式。对于相同的数据实例，使用相同的*`init_vector`*值进行[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)加密和[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)解密。
- en: Note
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using a KDF, you must specify an initialization vector or a null
    string for this argument, in order to access the later arguments to define the
    KDF.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用KDF，必须为此参数指定一个初始化向量或空字符串，以便访问后续参数以定义KDF。
- en: For modes that require an initialization vector, it must be 16 bytes or longer
    (bytes in excess of 16 are ignored). An error occurs if *`init_vector`* is missing.
    For modes that do not require an initialization vector, it is ignored and a warning
    is generated if *`init_vector`* is specified, unless you are using a KDF.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于需要初始化向量的模式，它必须是16字节或更长（超过16字节的字节将被忽略）。如果缺少*`init_vector`*，则会发生错误。对于不需要初始化向量的模式，如果指定了*`init_vector`*，则会被忽略并生成警告，除非您使用KDF。
- en: The default value for the [`block_encryption_mode`](server-system-variables.html#sysvar_block_encryption_mode)
    system variable is `aes-128-ecb`, or ECB mode, which does not require an initialization
    vector. The alternative permitted block encryption modes CBC, CFB1, CFB8, CFB128,
    and OFB all require an initialization vector.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`block_encryption_mode`](server-system-variables.html#sysvar_block_encryption_mode)系统变量的默认值为`aes-128-ecb`，或ECB模式，不需要初始化向量。允许的替代块加密模式CBC、CFB1、CFB8、CFB128和OFB都需要初始化向量。'
- en: A random string of bytes to use for the initialization vector can be produced
    by calling [`RANDOM_BYTES(16)`](encryption-functions.html#function_random-bytes).
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过调用[`RANDOM_BYTES(16)`](encryption-functions.html#function_random-bytes)生成一个用于初始化向量的随机字节字符串。
- en: '*`kdf_name`*'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`kdf_name`*'
- en: The name of the key derivation function (KDF) to create a key from the input
    keying material passed in *`key_str`*, and other arguments as appropriate for
    the KDF. This optional argument is available from MySQL 8.0.30.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建密钥派生函数（KDF）的名称，用于从传递给*KDF*的输入密钥材料中创建密钥，并根据KDF的要求提供其他参数。此可选参数从MySQL 8.0.30起可用。
- en: For the same instance of data, use the same value of *`kdf_name`* for encryption
    with [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) and decryption
    with [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt). When you
    specify *`kdf_name`*, you must specify *`init_vector`*, using either a valid initialization
    vector, or a null string if the encryption mode does not require an initialization
    vector.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于相同的数据实例，使用相同的*`kdf_name`*值进行[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)加密和[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)解密。当指定*`kdf_name`*时，必须指定*`init_vector`*，使用有效的初始化向量或如果加密模式不需要初始化向量则使用空字符串。
- en: 'The following values are supported:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持以下值：
- en: '`hkdf`'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`hkdf`'
- en: HKDF, which is available from OpenSSL 1.1.0\. HKDF extracts a pseudorandom key
    from the keying material then expands it into additional keys. With HKDF, you
    can specify an optional salt (*`salt`*) and context-specific information such
    as application details (*`info`*) to include in the keying material.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HKDF，从OpenSSL 1.1.0起可用。HKDF从密钥材料中提取一个伪随机密钥，然后将其扩展为其他密钥。使用HKDF，您可以指定一个可选的盐（*`salt`*）和上下文特定信息，如应用程序细节（*`info`*）以包含在密钥材料中。
- en: '`pbkdf2_hmac`'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`pbkdf2_hmac`'
- en: PBKDF2, which is available from OpenSSL 1.0.2. PBKDF2 applies a pseudorandom
    function to the keying material, and repeats this process a large number of times
    to produce the key. With PBKDF2, you can specify an optional salt (*`salt`*) to
    include in the keying material, and set the number of iterations used to produce
    the key (*`iterations`*).
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PBKDF2，从OpenSSL 1.0.2起可用。PBKDF2将一个伪随机函数应用于密钥材料，并重复这个过程多次以生成密钥。使用PBKDF2，您可以指定一个可选的盐（*`salt`*）以包含在密钥材料中，并设置用于生成密钥的迭代次数（*`iterations`*）。
- en: 'In this example, HKDF is specified as the key derivation function, and a salt
    and context information are provided. The argument for the initialization vector
    is included but is the empty string:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，HKDF被指定为密钥派生函数，提供了盐和上下文信息。初始化向量的参数被包含在内，但为空字符串：
- en: '[PRE5]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this example, PBKDF2 is specified as the key derivation function, a salt
    is provided, and the number of iterations is doubled from the recommended minimum:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，PBKDF2被指定为密钥派生函数，提供了盐，并且迭代次数是推荐最小值的两倍。
- en: '[PRE6]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*`salt`*'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`salt`*'
- en: A salt to be passed to the key derivation function (KDF). This optional argument
    is available from MySQL 8.0.30\. Both HKDF and PBKDF2 can use salts, and their
    use is recommended to help prevent attacks based on dictionaries of common passwords
    or rainbow tables.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给密钥派生函数（KDF）的盐。此可选参数从MySQL 8.0.30起可用。HKDF和PBKDF2都可以使用盐，建议使用盐以帮助防止基于常见密码字典或彩虹表的攻击。
- en: 'A salt consists of random data, which for security must be different for each
    encryption operation. A random string of bytes to use for the salt can be produced
    by calling [`RANDOM_BYTES()`](encryption-functions.html#function_random-bytes).
    This example produces a 64-bit salt:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 盐由随机数据组成，为了安全起见，每次加密操作必须使用不同的盐。可以通过调用[`RANDOM_BYTES()`](encryption-functions.html#function_random-bytes)生成一个随机字节字符串作为盐。以下示例生成一个64位盐：
- en: '[PRE7]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For the same instance of data, use the same value of *`salt`* for encryption
    with [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) and decryption
    with [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt). The salt
    can safely be stored along with the encrypted data.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于相同的数据实例，使用相同的*`salt`*值进行[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)加密和[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)解密。盐可以安全地与加密数据一起存储。
- en: '*`info`*'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`info`*'
- en: Context-specific information for HKDF to include in the keying material, such
    as information about the application. This optional argument is available from
    MySQL 8.0.30 when you specify `hkdf` as the KDF name. HKDF adds this information
    to the keying material specified in *`key_str`* and the salt specified in *`salt`*
    to produce the key.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于在密钥材料中包含HKDF的上下文特定信息，例如有关应用程序的信息。当您将`hkdf`指定为KDF名称时，此可选参数从MySQL 8.0.30起可用。HKDF将此信息添加到*`key_str`*中指定的密钥材料和*`salt`*中指定的盐中以生成密钥。
- en: For the same instance of data, use the same value of *`info`* for encryption
    with [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) and decryption
    with [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt).
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于相同的数据实例，使用相同的*`info`*值进行使用[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)进行加密和使用[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)进行解密。
- en: '*`iterations`*'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`迭代`*'
- en: The iteration count for PBKDF2 to use when producing the key. This optional
    argument is available from MySQL 8.0.30 when you specify `pbkdf2_hmac` as the
    KDF name. A higher count gives greater resistance to brute-force attacks because
    it has a greater computational cost for the attacker, but the same is necessarily
    true for the key derivation process. The default if you do not specify this argument
    is 1000, which is the minimum recommended by the OpenSSL standard.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成密钥时PBKDF2使用的迭代次数。当您将`pbkdf2_hmac`作为KDF名称指定时，此可选参数从MySQL 8.0.30开始可用。较高的计数值使得对抗暴力破解攻击更加困难，因为对于攻击者来说，计算成本更高，但对于密钥派生过程也是如此。如果不指定此参数，则默认值为1000，这是OpenSSL标准推荐的最低值。
- en: For the same instance of data, use the same value of *`iterations`* for encryption
    with [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) and decryption
    with [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt).
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于相同的数据实例，使用相同的*`迭代`*值进行使用[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)进行加密和使用[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)进行解密。
- en: '[PRE8]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[`COMPRESS(*`string_to_compress`*)`](encryption-functions.html#function_compress)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`COMPRESS(*`string_to_compress`*)`](encryption-functions.html#function_compress)'
- en: Compresses a string and returns the result as a binary string. This function
    requires MySQL to have been compiled with a compression library such as `zlib`.
    Otherwise, the return value is always `NULL`. The return value is also `NULL`
    if *`string_to_compress`* is `NULL`. The compressed string can be uncompressed
    with [`UNCOMPRESS()`](encryption-functions.html#function_uncompress).
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 压缩字符串并将结果作为二进制字符串返回。此函数要求MySQL已经使用诸如`zlib`之类的压缩库进行编译。否则，返回值始终为`NULL`。如果*`string_to_compress`*为`NULL`，返回值也为`NULL`。压缩后的字符串可以使用[`UNCOMPRESS()`](encryption-functions.html#function_uncompress)进行解压缩。
- en: '[PRE9]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The compressed string contents are stored the following way:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 压缩后的字符串内容存储如下：
- en: Empty strings are stored as empty strings.
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空字符串存储为空字符串。
- en: Nonempty strings are stored as a 4-byte length of the uncompressed string (low
    byte first), followed by the compressed string. If the string ends with space,
    an extra `.` character is added to avoid problems with endspace trimming should
    the result be stored in a [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")
    or [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") column. (However,
    use of nonbinary string data types such as [`CHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types") or [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")
    to store compressed strings is not recommended anyway because character set conversion
    may occur. Use a [`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY
    Types") or [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") binary string
    column instead.)
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非空字符串存储为未压缩字符串的4字节长度（低字节在前），后跟压缩字符串。如果字符串以空格结尾，则会添加额外的`.`字符，以避免在将结果存储在[`CHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")或[`VARCHAR`](char.html "13.3.2 The CHAR and
    VARCHAR Types")列中时出现末尾空格修剪问题。（但是，不建议使用诸如[`CHAR`](char.html "13.3.2 The CHAR and
    VARCHAR Types")或[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")之类的非二进制字符串数据类型来存储压缩字符串，因为可能会发生字符集转换。请改用[`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types")或[`BLOB`](blob.html "13.3.4 The BLOB and
    TEXT Types")二进制字符串列。)
- en: If [`COMPRESS()`](encryption-functions.html#function_compress) is invoked from
    within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端中调用[`COMPRESS()`](encryption-functions.html#function_compress)，二进制字符串将使用十六进制表示，具体取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参见[Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`MD5(*`str`*)`](encryption-functions.html#function_md5)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MD5(*`str`*)`](encryption-functions.html#function_md5)'
- en: Calculates an MD5 128-bit checksum for the string. The value is returned as
    a string of 32 hexadecimal digits, or `NULL` if the argument was `NULL`. The return
    value can, for example, be used as a hash key. See the notes at the beginning
    of this section about storing hash values efficiently.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为字符串计算MD5 128位校验和。返回值是一个包含32个十六进制数字的字符串，如果参数为`NULL`则返回`NULL`。返回值可以用作哈希键。有关有效存储哈希值的注意事项，请参阅本节开头的注释。
- en: The return value is a string in the connection character set.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回值是连接字符集中的字符串。
- en: If FIPS mode is enabled, `MD5()` returns `NULL`. See [Section 8.8, “FIPS Support”](fips-mode.html
    "8.8 FIPS Support").
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果启用了FIPS模式，`MD5()`将返回`NULL`。请参阅[第8.8节，“FIPS支持”](fips-mode.html "8.8 FIPS Support")。
- en: '[PRE10]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is the “RSA Data Security, Inc. MD5 Message-Digest Algorithm.”
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是“RSA数据安全公司MD5消息摘要算法”。
- en: See the note regarding the MD5 algorithm at the beginning this section.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅本节开头关于MD5算法的注意事项。
- en: '[`RANDOM_BYTES(*`len`*)`](encryption-functions.html#function_random-bytes)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RANDOM_BYTES(*`len`*)`](encryption-functions.html#function_random-bytes)'
- en: This function returns a binary string of *`len`* random bytes generated using
    the random number generator of the SSL library. Permitted values of *`len`* range
    from 1 to 1024. For values outside that range, an error occurs. Returns `NULL`
    if *`len`* is `NULL`.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数返回使用SSL库的随机数生成器生成的*`len`*个随机字节的二进制字符串。允许的*`len`*值范围从1到1024。对于超出该范围的值，将发生错误。如果*`len`*为`NULL`，则返回`NULL`。
- en: '[`RANDOM_BYTES()`](encryption-functions.html#function_random-bytes) can be
    used to provide the initialization vector for the [`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)
    and [`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt) functions.
    For use in that context, *`len`* must be at least 16\. Larger values are permitted,
    but bytes in excess of 16 are ignored.'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`RANDOM_BYTES()`](encryption-functions.html#function_random-bytes)可用于为[`AES_DECRYPT()`](encryption-functions.html#function_aes-decrypt)和[`AES_ENCRYPT()`](encryption-functions.html#function_aes-encrypt)函数提供初始化向量。在该上下文中使用时，*`len`*必须至少为16。允许使用更大的值，但超过16的字节将被忽略。'
- en: '[`RANDOM_BYTES()`](encryption-functions.html#function_random-bytes) generates
    a random value, which makes its result nondeterministic. Consequently, statements
    that use this function are unsafe for statement-based replication.'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`RANDOM_BYTES()`](encryption-functions.html#function_random-bytes)生成一个随机值，使其结果是不确定的。因此，使用此函数的语句对于基于语句的复制是不安全的。'
- en: If [`RANDOM_BYTES()`](encryption-functions.html#function_random-bytes) is invoked
    from within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端调用[`RANDOM_BYTES()`](encryption-functions.html#function_random-bytes)，则二进制字符串将使用十六进制表示，具体取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参阅[第6.5.1节，“mysql
    — MySQL命令行客户端”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")。
- en: '[`SHA1(*`str`*)`](encryption-functions.html#function_sha1), [`SHA(*`str`*)`](encryption-functions.html#function_sha1)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SHA1(*`str`*)`](encryption-functions.html#function_sha1), [`SHA(*`str`*)`](encryption-functions.html#function_sha1)'
- en: Calculates an SHA-1 160-bit checksum for the string, as described in RFC 3174
    (Secure Hash Algorithm). The value is returned as a string of 40 hexadecimal digits,
    or `NULL` if the argument is `NULL`. One of the possible uses for this function
    is as a hash key. See the notes at the beginning of this section about storing
    hash values efficiently. [`SHA()`](encryption-functions.html#function_sha1) is
    synonymous with [`SHA1()`](encryption-functions.html#function_sha1).
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为字符串计算SHA-1 160位校验和，如RFC 3174（安全哈希算法）中所述。返回值是一个包含40个十六进制数字的字符串，如果参数为`NULL`则返回`NULL`。此函数的一个可能用途是作为哈希键。有关有效存储哈希值的注意事项，请参阅本节开头的注释。[`SHA()`](encryption-functions.html#function_sha1)与[`SHA1()`](encryption-functions.html#function_sha1)是同义词。
- en: The return value is a string in the connection character set.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回值是连接字符集中的字符串。
- en: '[PRE11]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[`SHA1()`](encryption-functions.html#function_sha1) can be considered a cryptographically
    more secure equivalent of [`MD5()`](encryption-functions.html#function_md5). However,
    see the note regarding the MD5 and SHA-1 algorithms at the beginning this section.'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SHA1()`](encryption-functions.html#function_sha1)可以被视为[`MD5()`](encryption-functions.html#function_md5)的密码学上更安全的等价物。然而，请参阅本节开头关于MD5和SHA-1算法的注意事项。'
- en: '[`SHA2(*`str`*, *`hash_length`*)`](encryption-functions.html#function_sha2)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SHA2(*`str`*, *`hash_length`*)`](encryption-functions.html#function_sha2)'
- en: Calculates the SHA-2 family of hash functions (SHA-224, SHA-256, SHA-384, and
    SHA-512). The first argument is the plaintext string to be hashed. The second
    argument indicates the desired bit length of the result, which must have a value
    of 224, 256, 384, 512, or 0 (which is equivalent to 256). If either argument is
    `NULL` or the hash length is not one of the permitted values, the return value
    is `NULL`. Otherwise, the function result is a hash value containing the desired
    number of bits. See the notes at the beginning of this section about storing hash
    values efficiently.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 计算 SHA-2 哈希函数族（SHA-224、SHA-256、SHA-384 和 SHA-512）。第一个参数是要进行哈希处理的明文字符串。第二个参数表示所需结果的位长度，必须为
    224、256、384、512 或 0（等同于 256）。如果任一参数为 `NULL` 或哈希长度不是允许的值之一，则返回值为 `NULL`。否则，函数结果是包含所需位数的哈希值。请参阅本节开头关于高效存储哈希值的注意事项。
- en: The return value is a string in the connection character set.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回值是连接字符集中的字符串。
- en: '[PRE12]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This function works only if MySQL has been configured with SSL support. See
    [Section 8.3, “Using Encrypted Connections”](encrypted-connections.html "8.3 Using
    Encrypted Connections").
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅当 MySQL 配置了 SSL 支持时，此函数才有效。请参阅 [Section 8.3, “Using Encrypted Connections”](encrypted-connections.html
    "8.3 Using Encrypted Connections")。
- en: '[`SHA2()`](encryption-functions.html#function_sha2) can be considered cryptographically
    more secure than [`MD5()`](encryption-functions.html#function_md5) or [`SHA1()`](encryption-functions.html#function_sha1).'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SHA2()`](encryption-functions.html#function_sha2) 在密码学上比 [`MD5()`](encryption-functions.html#function_md5)
    或 [`SHA1()`](encryption-functions.html#function_sha1) 更安全。'
- en: '[`STATEMENT_DIGEST(*`statement`*)`](encryption-functions.html#function_statement-digest)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STATEMENT_DIGEST(*`statement`*)`](encryption-functions.html#function_statement-digest)'
- en: Given an SQL statement as a string, returns the statement digest hash value
    as a string in the connection character set, or `NULL` if the argument is `NULL`.
    The related [`STATEMENT_DIGEST_TEXT()`](encryption-functions.html#function_statement-digest-text)
    function returns the normalized statement digest. For information about statement
    digesting, see [Section 29.10, “Performance Schema Statement Digests and Sampling”](performance-schema-statement-digests.html
    "29.10 Performance Schema Statement Digests and Sampling").
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定一个作为字符串的 SQL 语句，返回连接字符集中的语句摘要哈希值作为字符串，如果参数为 `NULL` 则返回 `NULL`。相关的 [`STATEMENT_DIGEST_TEXT()`](encryption-functions.html#function_statement-digest-text)
    函数返回规范化语句摘要。有关语句摘要的信息，请参阅 [Section 29.10, “Performance Schema Statement Digests
    and Sampling”](performance-schema-statement-digests.html "29.10 Performance Schema
    Statement Digests and Sampling")。
- en: Both functions use the MySQL parser to parse the statement. If parsing fails,
    an error occurs. The error message includes the parse error only if the statement
    is provided as a literal string.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 两个函数都使用 MySQL 解析器来解析语句。如果解析失败，将会出现错误。如果语句以文字字符串形式提供，则错误消息仅包含解析错误。
- en: The [`max_digest_length`](server-system-variables.html#sysvar_max_digest_length)
    system variable determines the maximum number of bytes available to these functions
    for computing normalized statement digests.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`max_digest_length`](server-system-variables.html#sysvar_max_digest_length)
    系统变量确定这些函数用于计算规范化语句摘要的最大字节数。'
- en: '[PRE13]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[`STATEMENT_DIGEST_TEXT(*`statement`*)`](encryption-functions.html#function_statement-digest-text)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STATEMENT_DIGEST_TEXT(*`statement`*)`](encryption-functions.html#function_statement-digest-text)'
- en: Given an SQL statement as a string, returns the normalized statement digest
    as a string in the connection character set, or `NULL` if the argument is `NULL`.
    For additional discussion and examples, see the description of the related [`STATEMENT_DIGEST()`](encryption-functions.html#function_statement-digest)
    function.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定一个作为字符串的 SQL 语句，返回连接字符集中的规范化语句摘要作为字符串，如果参数为 `NULL` 则返回 `NULL`。有关更多讨论和示例，请参阅相关
    [`STATEMENT_DIGEST()`](encryption-functions.html#function_statement-digest) 函数的描述。
- en: '[`UNCOMPRESS(*`string_to_uncompress`*)`](encryption-functions.html#function_uncompress)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UNCOMPRESS(*`string_to_uncompress`*)`](encryption-functions.html#function_uncompress)'
- en: Uncompresses a string compressed by the [`COMPRESS()`](encryption-functions.html#function_compress)
    function. If the argument is not a compressed value, the result is `NULL`; if
    *`string_to_uncompress`* is `NULL`, the result is also `NULL`. This function requires
    MySQL to have been compiled with a compression library such as `zlib`. Otherwise,
    the return value is always `NULL`.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解压由[`COMPRESS()`](encryption-functions.html#function_compress)函数压缩的字符串。如果参数不是压缩值，则结果为`NULL`；如果*`string_to_uncompress`*为`NULL`，则结果也为`NULL`。此函数要求MySQL已经使用诸如`zlib`之类的压缩库进行编译。否则，返回值始终为`NULL`。
- en: '[PRE14]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[`UNCOMPRESSED_LENGTH(*`compressed_string`*)`](encryption-functions.html#function_uncompressed-length)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UNCOMPRESSED_LENGTH(*`compressed_string`*)`](encryption-functions.html#function_uncompressed-length)'
- en: Returns the length that the compressed string had before being compressed. Returns
    `NULL` if *`compressed_string`* is `NULL`.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回压缩前的字符串长度。如果*`compressed_string`*为`NULL`，则返回`NULL`。
- en: '[PRE15]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[`VALIDATE_PASSWORD_STRENGTH(*`str`*)`](encryption-functions.html#function_validate-password-strength)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`VALIDATE_PASSWORD_STRENGTH(*`str`*)`](encryption-functions.html#function_validate-password-strength)'
- en: Given an argument representing a plaintext password, this function returns an
    integer to indicate how strong the password is, or `NULL` if the argument is `NULL`.
    The return value ranges from 0 (weak) to 100 (strong).
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定表示明文密码的参数，此函数返回一个整数，指示密码的强度，如果参数为`NULL`，则返回`NULL`。返回值范围从0（弱）到100（强）。
- en: Password assessment by [`VALIDATE_PASSWORD_STRENGTH()`](encryption-functions.html#function_validate-password-strength)
    is done by the `validate_password` component. If that component is not installed,
    the function always returns 0\. For information about installing `validate_password`,
    see [Section 8.4.3, “The Password Validation Component”](validate-password.html
    "8.4.3 The Password Validation Component"). To examine or configure the parameters
    that affect password testing, check or set the system variables implemented by
    `validate_password`. See [Section 8.4.3.2, “Password Validation Options and Variables”](validate-password-options-variables.html
    "8.4.3.2 Password Validation Options and Variables").
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由[`VALIDATE_PASSWORD_STRENGTH()`](encryption-functions.html#function_validate-password-strength)进行密码评估，由`validate_password`组件执行。如果未安装该组件，函数始终返回0。有关安装`validate_password`的信息，请参见[第8.4.3节，“密码验证组件”](validate-password.html
    "8.4.3 密码验证组件")。要检查或配置影响密码测试的参数，请查看或设置`validate_password`实现的系统变量。请参见[第8.4.3.2节，“密码验证选项和变量”](validate-password-options-variables.html
    "8.4.3.2 密码验证选项和变量")。
- en: The password is subjected to increasingly strict tests and the return value
    reflects which tests were satisfied, as shown in the following table. In addition,
    if the [`validate_password.check_user_name`](validate-password-options-variables.html#sysvar_validate_password.check_user_name)
    system variable is enabled and the password matches the user name, [`VALIDATE_PASSWORD_STRENGTH()`](encryption-functions.html#function_validate-password-strength)
    returns 0 regardless of how other `validate_password` system variables are set.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 密码将经过越来越严格的测试，返回值反映了满足的测试，如下表所示。此外，如果启用了[`validate_password.check_user_name`](validate-password-options-variables.html#sysvar_validate_password.check_user_name)系统变量，并且密码与用户名匹配，[`VALIDATE_PASSWORD_STRENGTH()`](encryption-functions.html#function_validate-password-strength)无论如何返回0，不管其他`validate_password`系统变量如何设置。
- en: '| Password Test | Return Value |'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 密码测试 | 返回值 |'
- en: '| Length < 4 | 0 |'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 长度 < 4 | 0 |'
- en: '| Length ≥ 4 and < [`validate_password.length`](validate-password-options-variables.html#sysvar_validate_password.length)
    | 25 |'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 长度 ≥ 4 且 < [`validate_password.length`](validate-password-options-variables.html#sysvar_validate_password.length)
    | 25 |'
- en: '| Satisfies policy 1 (`LOW`) | 50 |'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 符合策略1（`LOW`） | 50 |'
- en: '| Satisfies policy 2 (`MEDIUM`) | 75 |'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 符合策略2（`MEDIUM`） | 75 |'
- en: '| Satisfies policy 3 (`STRONG`) | 100 |'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 符合策略3（`STRONG`） | 100 |'
