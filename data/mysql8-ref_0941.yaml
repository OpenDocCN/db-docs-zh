- en: 15.2.5 HANDLER Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.2.5 HANDLER语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/handler.html](https://dev.mysql.com/doc/refman/8.0/en/handler.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/handler.html](https://dev.mysql.com/doc/refman/8.0/en/handler.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `HANDLER` statement provides direct access to table storage engine interfaces.
    It is available for `InnoDB` and `MyISAM` tables.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`HANDLER`语句提供对表存储引擎接口的直接访问。适用于`InnoDB`和`MyISAM`表。'
- en: The `HANDLER ... OPEN` statement opens a table, making it accessible using subsequent
    `HANDLER ... READ` statements. This table object is not shared by other sessions
    and is not closed until the session calls `HANDLER ... CLOSE` or the session terminates.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`HANDLER ... OPEN`语句打开一个表，使其可以通过后续的`HANDLER ... READ`语句访问。此表对象不会被其他会话共享，并且直到会话调用`HANDLER
    ... CLOSE`或会话终止时才会关闭。'
- en: If you open the table using an alias, further references to the open table with
    other `HANDLER` statements must use the alias rather than the table name. If you
    do not use an alias, but open the table using a table name qualified by the database
    name, further references must use the unqualified table name. For example, for
    a table opened using `mydb.mytable`, further references must use `mytable`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用别名打开表，则必须使用别名而不是表名来引用其他`HANDLER`语句中打开的表。如果不使用别名，而是使用由数据库名限定的表名打开表，则进一步引用必须使用未限定的表名。例如，对于使用`mydb.mytable`打开的表，进一步引用必须使用`mytable`。
- en: 'The first `HANDLER ... READ` syntax fetches a row where the index specified
    satisfies the given values and the `WHERE` condition is met. If you have a multiple-column
    index, specify the index column values as a comma-separated list. Either specify
    values for all the columns in the index, or specify values for a leftmost prefix
    of the index columns. Suppose that an index `my_idx` includes three columns named
    `col_a`, `col_b`, and `col_c`, in that order. The `HANDLER` statement can specify
    values for all three columns in the index, or for the columns in a leftmost prefix.
    For example:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`HANDLER ... READ`语法获取一个满足给定值和`WHERE`条件的索引的行。如果有多列索引，请将索引列值指定为逗号分隔的列表。要么为索引中的所有列指定值，要么为索引列的最左前缀指定值。假设索引`my_idx`按顺序包括三列名为`col_a`、`col_b`和`col_c`。`HANDLER`语句可以为索引中的所有三列或最左前缀的列指定值。例如：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To employ the `HANDLER` interface to refer to a table''s `PRIMARY KEY`, use
    the quoted identifier ``PRIMARY``:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`HANDLER`接口引用表的`PRIMARY KEY`，请使用引号标识符``PRIMARY``：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The second `HANDLER ... READ` syntax fetches a row from the table in index order
    that matches the `WHERE` condition.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个`HANDLER ... READ`语法按照索引顺序从表中获取与`WHERE`条件匹配的行。
- en: The third `HANDLER ... READ` syntax fetches a row from the table in natural
    row order that matches the `WHERE` condition. It is faster than `HANDLER *`tbl_name`*
    READ *`index_name`*` when a full table scan is desired. Natural row order is the
    order in which rows are stored in a `MyISAM` table data file. This statement works
    for `InnoDB` tables as well, but there is no such concept because there is no
    separate data file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个`HANDLER ... READ`语法按照自然行顺序从表中获取与`WHERE`条件匹配的行。当需要进行全表扫描时，比`HANDLER *`tbl_name`*
    READ *`index_name`*`更快。自然行顺序是`MyISAM`表数据文件中存储行的顺序。此语句也适用于`InnoDB`表，但没有这样的概念，因为没有单独的数据文件。
- en: Without a `LIMIT` clause, all forms of `HANDLER ... READ` fetch a single row
    if one is available. To return a specific number of rows, include a `LIMIT` clause.
    It has the same syntax as for the [`SELECT`](select.html "15.2.13 SELECT Statement")
    statement. See [Section 15.2.13, “SELECT Statement”](select.html "15.2.13 SELECT
    Statement").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 没有`LIMIT`子句，所有形式的`HANDLER ... READ`如果有可用行，则获取一行。要返回特定数量的行，请包含`LIMIT`子句。其语法与[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句相同。参见[第15.2.13节，“SELECT Statement”](select.html "15.2.13 SELECT
    Statement")。
- en: '`HANDLER ... CLOSE` closes a table that was opened with `HANDLER ... OPEN`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`HANDLER ... CLOSE`关闭使用`HANDLER ... OPEN`打开的表。'
- en: 'There are several reasons to use the `HANDLER` interface instead of normal
    [`SELECT`](select.html "15.2.13 SELECT Statement") statements:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`HANDLER`接口而不是普通的[`SELECT`](select.html "15.2.13 SELECT Statement")语句有几个原因：
- en: '`HANDLER` is faster than [`SELECT`](select.html "15.2.13 SELECT Statement"):'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HANDLER`比[`SELECT`](select.html "15.2.13 SELECT Statement")更快：'
- en: A designated storage engine handler object is allocated for the `HANDLER ...
    OPEN`. The object is reused for subsequent `HANDLER` statements for that table;
    it need not be reinitialized for each one.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`HANDLER ... OPEN`分配一个指定的存储引擎处理程序对象。该对象将用于该表的后续`HANDLER`语句；不需要为每个语句重新初始化。
- en: There is less parsing involved.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析工作较少。
- en: There is no optimizer or query-checking overhead.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有优化器或查询检查开销。
- en: The handler interface does not have to provide a consistent look of the data
    (for example, [dirty reads](glossary.html#glos_dirty_read "dirty read") are permitted),
    so the storage engine can use optimizations that [`SELECT`](select.html "15.2.13 SELECT
    Statement") does not normally permit.
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序接口不必提供数据的一致外观（例如，允许[脏读取](glossary.html#glos_dirty_read "脏读取")），因此存储引擎可以使用[`SELECT`](select.html
    "15.2.13 SELECT语句")通常不允许的优化。
- en: '`HANDLER` makes it easier to port to MySQL applications that use a low-level
    `ISAM`-like interface. (See [Section 17.20, “InnoDB memcached Plugin”](innodb-memcached.html
    "17.20 InnoDB memcached Plugin") for an alternative way to adapt applications
    that use the key-value store paradigm.)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HANDLER`使得将MySQL应用程序移植到使用低级`ISAM`-like接口的应用程序更容易。（参见[第17.20节，“InnoDB memcached插件”](innodb-memcached.html
    "17.20 InnoDB memcached插件")，了解适应使用键值存储范式的应用程序的另一种方法。）'
- en: '`HANDLER` enables you to traverse a database in a manner that is difficult
    (or even impossible) to accomplish with [`SELECT`](select.html "15.2.13 SELECT
    Statement"). The `HANDLER` interface is a more natural way to look at data when
    working with applications that provide an interactive user interface to the database.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HANDLER`使您能够以一种难以（甚至不可能）用[`SELECT`](select.html "15.2.13 SELECT语句")实现的方式遍历数据库。`HANDLER`接口是在处理提供交互式用户界面到数据库的应用程序时查看数据的更自然方式。'
- en: '`HANDLER` is a somewhat low-level statement. For example, it does not provide
    consistency. That is, `HANDLER ... OPEN` does *not* take a snapshot of the table,
    and does *not* lock the table. This means that after a `HANDLER ... OPEN` statement
    is issued, table data can be modified (by the current session or other sessions)
    and these modifications might be only partially visible to `HANDLER ... NEXT`
    or `HANDLER ... PREV` scans.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`HANDLER`是一种较低级别的语句。例如，它不提供一致性。也就是说，`HANDLER ... OPEN`不会对表进行快照，并且不会锁定表。这意味着在发出`HANDLER
    ... OPEN`语句后，表数据可以被修改（由当前会话或其他会话），并且这些修改可能只对`HANDLER ... NEXT`或`HANDLER ... PREV`扫描部分可见。'
- en: 'An open handler can be closed and marked for reopen, in which case the handler
    loses its position in the table. This occurs when both of the following circumstances
    are true:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以关闭并标记为重新打开打开的处理程序，此时处理程序将失去在表中的位置。当以下两种情况同时成立时会发生这种情况：
- en: Any session executes [`FLUSH TABLES`](flush.html#flush-tables) or DDL statements
    on the handler's table.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何会话在处理程序的表上执行[`FLUSH TABLES`](flush.html#flush-tables)或DDL语句。
- en: The session in which the handler is open executes non-`HANDLER` statements that
    use tables.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开处理程序的会话执行使用表的非`HANDLER`语句。
- en: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    for a table closes all handlers for the table that were opened with [`HANDLER
    OPEN`](handler.html "15.2.5 HANDLER Statement").'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个表的[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE语句")会关闭使用[`HANDLER
    OPEN`](handler.html "15.2.5 HANDLER语句")打开的表的所有处理程序。
- en: If a table is flushed with [`FLUSH TABLES *`tbl_name`* WITH READ LOCK`](flush.html#flush-tables-with-read-lock-with-list)
    was opened with `HANDLER`, the handler is implicitly flushed and loses its position.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用[`FLUSH TABLES *`tbl_name`* WITH READ LOCK`](flush.html#flush-tables-with-read-lock-with-list)刷新表时，该表是用`HANDLER`打开的，那么处理程序会被隐式刷新并且失去位置。
