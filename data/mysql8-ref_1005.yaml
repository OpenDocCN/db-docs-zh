- en: 15.5.1 PREPARE Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.5.1 准备语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/prepare.html](https://dev.mysql.com/doc/refman/8.0/en/prepare.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/prepare.html](https://dev.mysql.com/doc/refman/8.0/en/prepare.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The [`PREPARE`](prepare.html "15.5.1 PREPARE Statement") statement prepares
    a SQL statement and assigns it a name, *`stmt_name`*, by which to refer to the
    statement later. The prepared statement is executed with [`EXECUTE`](execute.html
    "15.5.2 EXECUTE Statement") and released with [`DEALLOCATE PREPARE`](deallocate-prepare.html
    "15.5.3 DEALLOCATE PREPARE Statement"). For examples, see [Section 15.5, “Prepared
    Statements”](sql-prepared-statements.html "15.5 Prepared Statements").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PREPARE`](prepare.html "15.5.1 PREPARE Statement")语句准备一个SQL语句，并分配一个名称*`stmt_name`*，以便以后引用该语句。准备好的语句通过[`EXECUTE`](execute.html
    "15.5.2 EXECUTE Statement")执行，并通过[`DEALLOCATE PREPARE`](deallocate-prepare.html
    "15.5.3 DEALLOCATE PREPARE Statement")释放。有关示例，请参见[第15.5节，“准备语句”](sql-prepared-statements.html
    "15.5 Prepared Statements")。'
- en: Statement names are not case-sensitive. *`preparable_stmt`* is either a string
    literal or a user variable that contains the text of the SQL statement. The text
    must represent a single statement, not multiple statements. Within the statement,
    `?` characters can be used as parameter markers to indicate where data values
    are to be bound to the query later when you execute it. The `?` characters should
    not be enclosed within quotation marks, even if you intend to bind them to string
    values. Parameter markers can be used only where data values should appear, not
    for SQL keywords, identifiers, and so forth.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 语句名称不区分大小写。*`preparable_stmt`*可以是字符串文字或包含SQL语句文本的用户变量。文本必须表示单个语句，而不是多个语句。在语句内部，`?`字符可用作参数标记，指示稍后在执行时要将数据值绑定到查询的位置。`?`字符不应该被引号括起，即使您打算将它们绑定到字符串值。参数标记只能用于数据值应出现的地方，而不能用于SQL关键字、标识符等。
- en: If a prepared statement with the given name already exists, it is deallocated
    implicitly before the new statement is prepared. This means that if the new statement
    contains an error and cannot be prepared, an error is returned and no statement
    with the given name exists.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果具有给定名称的准备语句已经存在，则在准备新语句之前会隐式释放它。这意味着如果新语句包含错误且无法准备，则会返回错误，并且不存在具有给定名称的语句。
- en: 'The scope of a prepared statement is the session within which it is created,
    which as several implications:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 准备语句的范围是创建它的会话，这有几个含义：
- en: A prepared statement created in one session is not available to other sessions.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个会话中创建的准备语句对其他会话不可用。
- en: When a session ends, whether normally or abnormally, its prepared statements
    no longer exist. If auto-reconnect is enabled, the client is not notified that
    the connection was lost. For this reason, clients may wish to disable auto-reconnect.
    See [Automatic Reconnection Control](/doc/c-api/8.0/en/c-api-auto-reconnect.html).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当会话结束时，无论是正常结束还是异常结束，其准备的语句都不再存在。如果启用了自动重新连接，则客户端不会收到连接丢失的通知。因此，客户端可能希望禁用自动重新连接。请参见[自动重新连接控制](/doc/c-api/8.0/en/c-api-auto-reconnect.html)。
- en: A prepared statement created within a stored program continues to exist after
    the program finishes executing and can be executed outside the program later.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在存储程序中创建的准备语句在程序执行完成后继续存在，并且可以在程序外部稍后执行。
- en: A statement prepared in stored program context cannot refer to stored procedure
    or function parameters or local variables because they go out of scope when the
    program ends and would be unavailable were the statement to be executed later
    outside the program. As a workaround, refer instead to user-defined variables,
    which also have session scope; see [Section 11.4, “User-Defined Variables”](user-variables.html
    "11.4 User-Defined Variables").
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在存储程序上下文中准备的语句不能引用存储过程或函数参数或局部变量，因为它们在程序结束时超出范围，如果稍后在程序外执行该语句，则将无法使用。作为解决方法，可以引用会话范围的用户定义变量，参见[第11.4节，“用户定义变量”](user-variables.html
    "11.4 User-Defined Variables")。
- en: 'Beginning with MySQL 8.0.22, a parameter used in a prepared statement has its
    type determined when the statement is first prepared, and retains this type whenever
    [`EXECUTE`](execute.html "15.5.2 EXECUTE Statement") is invoked for this prepared
    statement (unless the statement is reprepared, as explained later in this section).
    Rules for determining a parameter''s type are listed here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.22开始，用于准备语句的参数在语句首次准备时确定其类型，并且在为该准备语句调用[`EXECUTE`](execute.html "15.5.2 EXECUTE语句")时保留此类型（除非语句被重新准备，如本节后面所述）。确定参数类型的规则如下：
- en: A parameter which is an operand of a binary arithmetic operator has the same
    data type as the other operand.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为二元算术运算符的操作数的参数具有与另一个操作数相同的数据类型。
- en: If both operands of a binary arithmetic operator are parameters, the type of
    the parameters is decided by the context of the operator.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果二元算术运算符的两个操作数都是参数，则参数的类型由运算符的上下文决定。
- en: If a parameter is the operand of a unary arithmetic operator, the parameter's
    type is decided by the context of the operator.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数是一元算术运算符的操作数，则参数的类型由运算符的上下文决定。
- en: If an arithmetic operator has no type-determining context, the derived type
    for any parameters involved is [`DOUBLE PRECISION`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"). This can happen,
    for example, when the parameter is a top-level node in a [`SELECT`](select.html
    "15.2.13 SELECT Statement") list, or when it is part of a comparison operator.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果算术运算符没有类型确定的上下文，则涉及的任何参数的派生类型为[`DOUBLE PRECISION`](floating-point-types.html
    "13.1.4 浮点类型（近似值）- FLOAT，DOUBLE")。例如，当参数是[`SELECT`](select.html "15.2.13 SELECT语句")列表中的顶层节点时，或者当它是比较运算符的一部分时，就会发生这种情况。
- en: A parameter which is an operand of a character string operator has the same
    derived type as the aggregated type of the other operands. If all operands of
    the operator are parameters, the derived type is [`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types"); its collation is determined by the value of [`collation_connection`](server-system-variables.html#sysvar_collation_connection).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为字符串运算符的操作数的参数具有与其他操作数的聚合类型相同的派生类型。如果运算符的所有操作数都是参数，则派生类型为[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")；其排序规则由[`collation_connection`](server-system-variables.html#sysvar_collation_connection)的值确定。
- en: A parameter which is an operand of a temporal operator has type [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") if the operator returns a `DATETIME`,
    [`TIME`](time.html "13.2.3 The TIME Type") if the operator returns a `TIME`, and
    [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") if the
    operator returns a `DATE`.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为时间运算符的操作数具有类型[`DATETIME`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")，如果运算符返回`DATETIME`，则操作数的类型为[`TIME`](time.html
    "13.2.3 TIME类型")，如果运算符返回`TIME`，则操作数的类型为[`DATE`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")，如果运算符返回`DATE`。
- en: A parameter which is an operand of a binary comparison operator has the same
    derived type as the other operand of the comparison.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二元比较运算符的操作数具有与比较的另一个操作数相同的派生类型。
- en: A parameter that is an operand of a ternary comparison operator such as [`BETWEEN`](comparison-operators.html#operator_between)
    has the same derived type as the aggregated type of the other operands.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为[`BETWEEN`](comparison-operators.html#operator_between)等三元比较运算符的操作数的参数具有与其他操作数的聚合类型相同的派生类型。
- en: If all operands of a comparison operator are parameters, the derived type for
    each of them is [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), with
    collation determined by the value of [`collation_connection`](server-system-variables.html#sysvar_collation_connection).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较运算符的所有操作数都是参数，则它们每个的派生类型都是[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")，其排序规则由[`collation_connection`](server-system-variables.html#sysvar_collation_connection)的值确定。
- en: A parameter that is an output operand of any of [`CASE`](flow-control-functions.html#operator_case),
    [`COALESCE`](comparison-operators.html#function_coalesce), [`IF`](flow-control-functions.html#function_if),
    [`IFNULL`](flow-control-functions.html#function_ifnull), or [`NULLIF`](flow-control-functions.html#function_nullif)
    has the same derived type as the aggregated type of the operator's other output
    operands.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为[`CASE`](flow-control-functions.html#operator_case)、[`COALESCE`](comparison-operators.html#function_coalesce)、[`IF`](flow-control-functions.html#function_if)、[`IFNULL`](flow-control-functions.html#function_ifnull)或[`NULLIF`](flow-control-functions.html#function_nullif)的输出操作数之一的参数具有与运算符的其他输出操作数的聚合类型相同的派生类型。
- en: If all output operands of any of [`CASE`](flow-control-functions.html#operator_case),
    [`COALESCE`](comparison-operators.html#function_coalesce), [`IF`](flow-control-functions.html#function_if),
    [`IFNULL`](flow-control-functions.html#function_ifnull), or [`NULLIF`](flow-control-functions.html#function_nullif)
    are parameters, or they are all `NULL`, the type of the parameter is decided by
    the context of the operator.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何[`CASE`](flow-control-functions.html#operator_case)、[`COALESCE`](comparison-operators.html#function_coalesce)、[`IF`](flow-control-functions.html#function_if)、[`IFNULL`](flow-control-functions.html#function_ifnull)或[`NULLIF`](flow-control-functions.html#function_nullif)的所有输出操作数都是参数，或它们都是`NULL`，则参数的类型由运算符的上下文决定。
- en: If the parameter is an operand of any of [`CASE`](flow-control-functions.html#operator_case),
    [`COALESCE()`](comparison-operators.html#function_coalesce), [`IF`](flow-control-functions.html#function_if),
    or [`IFNULL`](flow-control-functions.html#function_ifnull), and has no type-determining
    context, the derived type for each of the parameters involved is [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), and its collation is determined by the value
    of [`collation_connection`](server-system-variables.html#sysvar_collation_connection).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数是任何[`CASE`](flow-control-functions.html#operator_case)、[`COALESCE()`](comparison-operators.html#function_coalesce)、[`IF`](flow-control-functions.html#function_if)或[`IFNULL`](flow-control-functions.html#function_ifnull)的操作数，并且没有类型确定的上下文，则涉及的每个参数的派生类型都是[`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")，其排序规则由[`collation_connection`](server-system-variables.html#sysvar_collation_connection)的值确定。
- en: A parameter which is the operand of a [`CAST()`](cast-functions.html#function_cast)
    has the same type as specified by the `CAST()`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为[`CAST()`](cast-functions.html#function_cast)的操作数的参数具有与`CAST()`指定的类型相同的类型。
- en: If a parameter is an immediate member of a [`SELECT`](select.html "15.2.13 SELECT
    Statement") list that is not part of an [`INSERT`](insert.html "15.2.7 INSERT
    Statement") statement, the derived type of the parameter is [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), and its collation is determined by the value
    of [`collation_connection`](server-system-variables.html#sysvar_collation_connection).
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数是不是[`INSERT`](insert.html "15.2.7 INSERT Statement")语句的一部分的[`SELECT`](select.html
    "15.2.13 SELECT Statement")列表的直接成员，则参数的派生类型是[`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types")，其排序规则由[`collation_connection`](server-system-variables.html#sysvar_collation_connection)的值确定。
- en: If a parameter is an immediate member of a `SELECT` list that is part of an
    [`INSERT`](insert.html "15.2.7 INSERT Statement") statement, the derived type
    of the parameter is the type of the corresponding column into which the parameter
    is inserted.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数是`INSERT`](insert.html "15.2.7 INSERT Statement")语句的一部分的`SELECT`列表的直接成员，则参数的派生类型是将参数插入的相应列的类型。
- en: If a parameter is used as source for an assignment in a `SET` clause of an [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") statement or in the `ON DUPLICATE KEY UPDATE` clause
    of an [`INSERT`](insert.html "15.2.7 INSERT Statement") statement, the derived
    type of the parameter is the type of the corresponding column which is updated
    by the `SET` or `ON DUPLICATE KEY UPDATE` clause.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数用作[`UPDATE`](update.html "15.2.17 UPDATE Statement")语句的`SET`子句中的赋值的源，或者用作[`INSERT`](insert.html
    "15.2.7 INSERT Statement")语句的`ON DUPLICATE KEY UPDATE`子句中的赋值的源，则参数的派生类型是由`SET`或`ON
    DUPLICATE KEY UPDATE`子句更新的相应列的类型。
- en: If a parameter is an argument of a function, the derived type depends on the
    function's return type.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数是函数的参数，则派生类型取决于函数的返回类型。
- en: 'For some combinations of actual type and derived type, an automatic repreparation
    of the statement is triggered, to ensure closer compatibility with previous versions
    of MySQL. Repreparation does not occur if any of the following conditions are
    true:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实际类型和派生类型的某些组合，会触发语句的自动重新准备，以确保与MySQL先前版本更紧密的兼容性。如果以下任一条件为真，则不会发生重新准备：
- en: '`NULL` is used as the actual parameter value.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`NULL`作为实际参数值。
- en: A parameter is an operand of a [`CAST()`](cast-functions.html#function_cast).
    (Instead, a cast to the derived type is attempted, and an exception raised if
    the cast fails.)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数是[`CAST()`](cast-functions.html#function_cast)的操作数。（相反，会尝试将其转换为派生类型，如果转换失败则引发异常。）
- en: A parameter is a string. (In this case, an implicit `CAST(? AS *`derived_type`*)`
    is performed.)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数是字符串。（在这种情况下，会执行隐式的`CAST(? AS *`derived_type`*)`。）
- en: The derived type and actual type of the parameter are both [`INTEGER`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") and have the same sign.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数的派生类型和实际类型都是[`INTEGER`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT,
    SMALLINT, TINYINT, MEDIUMINT, BIGINT")，并且符号相同。
- en: The parameter's derived type is [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC") and its actual type is either `DECIMAL`
    or [`INTEGER`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT").
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数的派生类型是[`DECIMAL`](fixed-point-types.html "13.1.3 定点类型（精确值） - DECIMAL, NUMERIC")，实际类型是`DECIMAL`或[`INTEGER`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")。
- en: The derived type is [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE") and the actual type is any numeric
    type.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 派生类型是[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")，实际类型是任何数值类型。
- en: Both the derived type and the actual type are string types.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 派生类型和实际类型都是字符串类型。
- en: 'If the derived type is temporal and the actual type is temporal. *Exceptions*:
    The derived type is [`TIME`](time.html "13.2.3 The TIME Type") and the actual
    type is not `TIME`; the derived type is [`DATE`](datetime.html "13.2.2 The DATE,
    DATETIME, and TIMESTAMP Types") and the actual type is not `DATE`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果派生类型是时间型，实际类型也是时间型。*异常情况*：派生类型是[`TIME`](time.html "13.2.3 TIME类型")，实际类型不是`TIME`；派生类型是[`DATE`](datetime.html
    "13.2.2 DATE、DATETIME和TIMESTAMP类型")，实际类型不是`DATE`。
- en: The derived type is temporal and the actual type is numeric.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 派生类型是时间型，实际类型是数值型。
- en: For cases other than those just listed, the statement is reprepared and the
    actual parameter types are used instead of the derived parameter types.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于除上述情况之外的情况，语句将重新准备，并使用实际参数类型而不是派生参数类型。
- en: These rules also apply to a user variable referenced in a prepared statement.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则也适用于准备语句中引用的用户变量。
- en: Using a different data type for a given parameter or user variable within a
    prepared statement for executions of the statement subsequent to the first execution
    causes the statement to be reprepared. This is less efficient; it may also lead
    to the parameter's (or variable's) actual type to vary, and thus for results to
    be inconsistent, with subsequent executions of the prepared statement. For these
    reasons, it is advisable to use the same data type for a given parameter when
    re-executing a prepared statement.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备语句中为给定参数或用户变量使用不同的数据类型，导致语句需要重新准备。这样效率较低；也可能导致参数（或变量）的实际类型变化，从而导致后续执行准备语句时结果不一致。因此，建议在重新执行准备语句时为给定参数使用相同的数据类型。
