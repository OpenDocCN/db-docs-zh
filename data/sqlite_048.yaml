- en: 1\. Setting Up The Error Logging Callback
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 设置错误日志回调
- en: 原文：[https://sqlite.com/errlog.html](https://sqlite.com/errlog.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/errlog.html](https://sqlite.com/errlog.html)
- en: Overview
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: SQLite can be configured to invoke a callback function containing an error code
    and a terse error message whenever anomalies occur. This mechanism is very helpful
    in tracking obscure problems that occur rarely and in the field. Application developers
    are encouraged to take advantage of the error logging facility of SQLite in their
    products, as it is very low CPU and memory cost but can be a huge aid for debugging.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 可以配置为在发生异常时调用一个回调函数，其中包含错误代码和简短的错误消息。这种机制在追踪偶尔发生且在现场出现的隐晦问题方面非常有帮助。鼓励应用程序开发人员在其产品中充分利用
    SQLite 的错误日志功能，因为它在 CPU 和内存成本上非常低，但在调试方面可以提供巨大帮助。
- en: 'There can only be a single error logging callback per process. The error logging
    callback is registered at start-time using C-code similar to the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每个进程只能有一个错误日志回调。错误日志回调在启动时使用类似以下 C 代码注册：
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The error logger callback function might look something like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 错误记录器回调函数可能如下所示：
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The example above illustrates the signature of the error logger callback. However,
    in an embedded application, one usually does not print messages on stderr. Instead,
    one might store the messages in a preallocated circular buffer where they can
    be accessed when diagnostic information is needed during debugging. Or perhaps
    the messages can be sent to [Syslog](http://en.wikipedia.org/wiki/Syslog). Somehow,
    the messages need to be stored where they are accessible to developers, not displayed
    to end users.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例说明了错误记录器回调函数的签名。然而，在嵌入式应用中，通常不会在标准错误流上打印消息。相反，可以将消息存储在预分配的循环缓冲区中，在调试期间需要诊断信息时可以访问这些消息。或者，消息可以发送到[Syslog](http://en.wikipedia.org/wiki/Syslog)。无论如何，这些消息需要存储在开发人员可访问的地方，而不是显示给最终用户。
- en: 'Do not misunderstand: There is nothing technically wrong with displaying the
    error logger messages to end users. The messages do not contain sensitive or private
    information that must be protected from unauthorized viewing. Rather the messages
    are technical in nature and are not useful or meaningful to the typical end user.
    The messages coming from the error logger are intended for database geeks. Display
    them accordingly.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不要误解：将错误记录器消息显示给最终用户没有任何技术上的问题。这些消息不包含必须保护免受未经授权查看的敏感或私密信息。相反，这些消息具有技术性质，对于典型的最终用户来说并不有用或有意义。来自错误记录器的消息是为数据库极客而设计的。请相应地显示它们。
- en: 2\. Interface Details
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 接口详细信息
- en: The third argument to the [sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_LOG](c3ref/c_config_covering_index_scan.html#sqliteconfiglog),...)
    interface (the "pData" argument in the example above) is a pointer to arbitrary
    data. SQLite passes this pointer through to the first argument of the error logger
    callback. The pointer can be used to pass application-specific setup or state
    information, if desired. Or it can simply be a NULL pointer which is ignored by
    the callback.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[sqlite3_config](c3ref/config.html)([SQLITE_CONFIG_LOG](c3ref/c_config_covering_index_scan.html#sqliteconfiglog),...)
    接口的第三个参数（上面示例中的 "pData" 参数）是指向任意数据的指针。SQLite 将此指针传递给错误记录器回调的第一个参数。如果需要，可以使用该指针传递应用程序特定的设置或状态信息。或者，它可以简单地是一个被回调忽略的
    NULL 指针。'
- en: The second argument to the error logger callback is an integer [extended error
    code](rescode.html#extrc). The third argument to the error logger is the text
    of the error message. The error message text is stored in a fixed-length stack
    buffer in the calling function and so will only be valid for the duration of the
    error logger callback function. The error logger should make a copy of this message
    into persistent storage if retention of the message is needed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 错误记录器回调的第二个参数是整数[扩展错误代码](rescode.html#extrc)。错误记录器的第三个参数是错误消息的文本。错误消息文本存储在调用函数的固定长度堆栈缓冲区中，因此只在错误记录器回调函数的持续时间内有效。如果需要保留消息，则错误记录器应将此消息复制到持久存储中。
- en: The error logger callback should be treated like a signal handler. The application
    should save off or otherwise process the error, then return as soon as possible.
    No other SQLite APIs should be invoked, directly or indirectly, from the error
    logger. SQLite is not reentrant through the error logger callback. In particular,
    the error logger callback is invoked when a memory allocation fails, so it is
    generally a bad idea to try to allocate memory inside the error logger. Do not
    even think about trying to store the error message in another SQLite database.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 错误记录器回调应该像信号处理器一样对待。应用程序应保存或以其他方式处理错误，然后尽快返回。不应从错误记录器直接或间接地调用其他 SQLite API。SQLite
    在错误记录器回调中不可重入。特别是在内存分配失败时会调用错误记录器回调，因此尝试在错误记录器中分配内存通常是一个坏主意。甚至不要考虑尝试将错误消息存储在另一个
    SQLite 数据库中。
- en: Applications can use the [sqlite3_log(E,F,..)](c3ref/log.html) API to send new
    messages to the log, if desired, but this is discouraged. The [sqlite3_log()](c3ref/log.html)
    interface is intended for use by extensions only, not by applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以使用 [sqlite3_log(E,F,..)](c3ref/log.html) API 将新消息发送到日志中，如果需要的话，但这是不鼓励的。
    [sqlite3_log()](c3ref/log.html) 接口仅用于扩展使用，而不是应用程序使用。
- en: 3\. Variety of Error Messages
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 各种错误消息
- en: The error messages that might be sent to the error logger and their exact format
    is subject to changes from one release to the next. So applications should not
    depend on any particular error message text formats or error codes. Things do
    not change capriciously, but they do sometimes changes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可能发送到错误记录器的错误消息及其确切格式在一个版本到下一个版本可能会发生变化。因此，应用程序不应依赖于任何特定的错误消息文本格式或错误代码。事情并非随意变更，但有时确实会发生变更。
- en: The following is a partial list of the kinds of messages that might appear in
    the error logger callback.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可能出现在错误记录器回调中的消息种类的部分列表。
- en: Any time there is an error either compiling an SQL statement (using [sqlite3_prepare_v2()](c3ref/prepare.html)
    or its siblings) or running an SQL statement (using [sqlite3_step()](c3ref/step.html))
    that error is logged.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当编译 SQL 语句（使用 [sqlite3_prepare_v2()](c3ref/prepare.html) 或其姊妹函数之一）时出错或运行 SQL
    语句（使用 [sqlite3_step()](c3ref/step.html)）时出错，都会记录错误。
- en: When a schema change occurs that requires a prepared statement to be reparsed
    and reprepared, that event is logged with the error code SQLITE_SCHEMA. The reparse
    and reprepare is normally automatic (assuming that [sqlite3_prepare_v2()](c3ref/prepare.html)
    has been used to prepare the statements originally, which is recommended) and
    so these logging events are normally the only way to know that reprepares are
    taking place.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当发生需要重新解析和重新准备已经准备好的语句的模式更改时，将使用错误代码 SQLITE_SCHEMA 记录此事件。重新解析和重新准备通常是自动的（假设最初使用了
    [sqlite3_prepare_v2()](c3ref/prepare.html) 来准备语句，这是推荐的做法），因此这些记录事件通常是了解重新准备正在进行的唯一方法。
- en: SQLITE_NOTICE messages are logged whenever a database has to be recovered because
    the previous writer crashed without completing its transaction. The error code
    is SQLITE_NOTICE_RECOVER_ROLLBACK when recovering a [rollback journal](lockingv3.html#rollback)
    and SQLITE_NOTICE_RECOVER_WAL when recovering a [write-ahead log](wal.html).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLITE_NOTICE 消息会在必须恢复数据库时记录，因为前一个写入者在未完成其事务的情况下崩溃。当恢复一个 [回滚日志](lockingv3.html#rollback)
    时，错误代码是 SQLITE_NOTICE_RECOVER_ROLLBACK；当恢复一个 [预写式日志](wal.html) 时，错误代码是 SQLITE_NOTICE_RECOVER_WAL。
- en: SQLITE_WARNING messages are logged when database files are renamed or aliased
    in ways that can lead to database corruption. (See [1](howtocorrupt.html#unlink)
    and [2](howtocorrupt.html#alias) for additional information.)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLITE_WARNING 消息在数据库文件被重命名或以可能导致数据库损坏的方式别名时被记录。（参见 [1](howtocorrupt.html#unlink)
    和 [2](howtocorrupt.html#alias) 获取额外信息。）
- en: Out of memory (OOM) error conditions generate error logging events with the
    SQLITE_NOMEM error code and a message that says how many bytes of memory were
    requested by the failed allocation.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存不足（OOM）错误条件会生成带有 SQLITE_NOMEM 错误代码和消息的错误记录事件，消息说明了失败分配请求的字节数。
- en: I/O errors in the OS-interface generate error logging events. The message to
    these events gives the line number in the source code where the error originated
    and the filename associated with the event when there is a corresponding file.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OS 接口中的 I/O 错误会生成错误记录事件。这些事件的消息会给出源代码中产生错误的行号以及与事件相关联的文件名（当有对应文件时）。
- en: When database corruption is detected, an SQLITE_CORRUPT error logger callback
    is invoked. As with I/O errors, the error message text contains the line number
    in the original source code where the error was first detected.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当检测到数据库损坏时，会调用一个SQLITE_CORRUPT错误记录回调函数。与I/O错误一样，错误消息文本中包含了在原始源代码中首次检测到错误的行号。
- en: An error logger callback is invoked on SQLITE_MISUSE errors. This is useful
    in detecting application design issues when return codes are not consistently
    checked in the application code.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SQLITE_MISUSE错误时会调用错误记录回调函数。这对于检测应用程序设计问题在应用程序代码中未一致检查返回码时非常有用。
- en: SQLite strives to keep error logger traffic low and only send messages to the
    error logger when there really is something wrong. Applications might further
    cull the error message traffic by deliberately ignoring certain classes of error
    messages that they do not care about. For example, an application that makes frequent
    database schema changes might want to ignore all SQLITE_SCHEMA errors.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite致力于保持错误记录流量的低延迟，并且仅在真正有问题时才向错误记录器发送消息。应用程序可以通过有意忽略它们不关心的某些类别的错误消息进一步减少错误消息的流量。例如，频繁进行数据库模式更改的应用程序可能希望忽略所有SQLITE_SCHEMA错误。
- en: 4\. Summary
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 总结
- en: The use of the error logger callback is highly recommended. The debugging information
    that the error logger provides has proven very useful in tracking down obscure
    problems that occur with applications after they get into the field. The error
    logger callback has also proven useful in catching occasional errors that the
    application misses because of inconsistent checking of API return codes. Developers
    are encouraged to implement an error logger callback early in the development
    cycle in order to spot unexpected behavior quickly, and to leave the error logger
    callback turned on through deployment. If the error logger never finds a problem,
    then no harm is done. But failure to set up an appropriate error logger might
    compromise diagnostic capabilities later on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈推荐使用错误记录回调函数。错误记录器提供的调试信息在追踪应用程序在投入使用后出现的隐秘问题方面非常有用。错误记录回调函数还被证明在捕捉由于API返回码的不一致检查而应用程序遗漏的偶发错误方面非常有用。开发者被鼓励在开发周期的早期阶段实现错误记录回调函数，以便快速发现意外行为，并在部署中保持错误记录回调函数的开启状态。如果错误记录回调函数从未发现问题，那么也不会造成任何损害。但是，未设置适当的错误记录器可能会影响后续的诊断能力。
