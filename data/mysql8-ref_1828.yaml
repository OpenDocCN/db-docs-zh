- en: 25.7.4 NDB Cluster Replication Schema and Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 25.7.4 NDB集群复制模式和表
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-schema.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-schema.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-schema.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-schema.html)
- en: '[ndb_apply_status Table](mysql-cluster-replication-schema.html#ndb-replication-ndb-apply-status
    "ndb_apply_status Table")'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ndb_apply_status表](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-schema.html#ndb-replication-ndb-apply-status
    "ndb_apply_status Table")'
- en: '[ndb_binlog_index Table](mysql-cluster-replication-schema.html#ndb-replication-ndb-binlog-index
    "ndb_binlog_index Table")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ndb_binlog_index表](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-schema.html#ndb-replication-ndb-binlog-index
    "ndb_binlog_index Table")'
- en: '[ndb_replication Table](mysql-cluster-replication-schema.html#ndb-replication-ndb-replication
    "ndb_replication Table")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ndb_replication表](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-schema.html#ndb-replication-ndb-replication
    "ndb_replication Table")'
- en: Replication in NDB Cluster makes use of a number of dedicated tables in the
    `mysql` database on each MySQL Server instance acting as an SQL node in both the
    cluster being replicated and in the replica. This is true regardless of whether
    the replica is a single server or a cluster.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: NDB集群中的复制利用了在充当被复制集群和副本中的SQL节点的每个MySQL服务器实例上的`mysql`数据库中的一些专用表。无论副本是单个服务器还是集群，这都是正确的。
- en: The `ndb_binlog_index` and `ndb_apply_status` tables are created in the `mysql`
    database. They should not be explicitly replicated by the user. User intervention
    is normally not required to create or maintain either of these tables, since both
    are maintained by the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0") binary log (binlog) injector thread. This keeps the source [**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server") process updated to changes performed by the
    [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") storage engine.
    The [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") binlog injector
    thread receives events directly from the [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") storage engine. The [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") injector is responsible for capturing all the data events within
    the cluster, and ensures that all events which change, insert, or delete data
    are recorded in the `ndb_binlog_index` table. The replica I/O (receiver) thread
    transfers the events from the source's binary log to the replica's relay log.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndb_binlog_index` 和 `ndb_apply_status` 表在 `mysql` 数据库中创建。用户不应明确复制这些表。通常不需要用户干预来创建或维护这两个表，因为两者都由[`NDB`](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0")二进制日志（binlog）注入器线程维护。这使得源[**mysqld**](https://dev.mysql.com/doc/refman/8.0/en/mysqld.html
    "6.3.1 mysqld — The MySQL Server")进程更新到由[`NDB`](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0")存储引擎执行的更改。[`NDB`](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") binlog注入器线程直接从[`NDB`](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0")存储引擎接收事件。[`NDB`](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0")注入器负责捕获集群中的所有数据事件，并确保所有更改、插入或删除数据的事件都记录在`ndb_binlog_index`表中。复制I/O（接收器）线程将事件从源的二进制日志传输到复制的中继日志。'
- en: The `ndb_replication` table must be created manually. This table can be updated
    by the user to perform filtering by database or table. See [ndb_replication Table](mysql-cluster-replication-schema.html#ndb-replication-ndb-replication
    "ndb_replication Table"), for more information. `ndb_replication` is also used
    in NDB Replication conflict detection and resolution for conflict resolution control;
    see [Conflict Resolution Control](mysql-cluster-replication-conflict-resolution.html#conflict-resolution-control
    "Conflict Resolution Control").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndb_replication` 表必须手动创建。用户可以更新此表以按数据库或表进行过滤。有关更多信息，请参见[ndb_replication表](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-schema.html#ndb-replication-ndb-replication
    "ndb_replication Table")。`ndb_replication` 也用于NDB复制冲突检测和解决冲突控制；请参见[冲突解决控制](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-conflict-resolution.html#conflict-resolution-control
    "Conflict Resolution Control")。'
- en: Even though `ndb_binlog_index` and `ndb_apply_status` are created and maintained
    automatically, it is advisable to check for the existence and integrity of these
    tables as an initial step in preparing an NDB Cluster for replication. It is possible
    to view event data recorded in the binary log by querying the `mysql.ndb_binlog_index`
    table directly on the source. This can be also be accomplished using the [`SHOW
    BINLOG EVENTS`](show-binlog-events.html "15.7.7.2 SHOW BINLOG EVENTS Statement")
    statement on either the source or replica SQL node. (See [Section 15.7.7.2, “SHOW
    BINLOG EVENTS Statement”](show-binlog-events.html "15.7.7.2 SHOW BINLOG EVENTS
    Statement").)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 即使`ndb_binlog_index`和`ndb_apply_status`是自动创建和维护的，建议在为复制准备 NDB 集群时，首先检查这些表的存在和完整性。可以通过直接在源上查询`mysql.ndb_binlog_index`表来查看二进制日志中记录的事件数据。这也可以通过在源或副本
    SQL 节点上使用[`SHOW BINLOG EVENTS`](show-binlog-events.html "15.7.7.2 SHOW BINLOG
    EVENTS Statement")语句来完成。 (参见[第 15.7.7.2 节，“SHOW BINLOG EVENTS Statement”](show-binlog-events.html
    "15.7.7.2 SHOW BINLOG EVENTS Statement").)
- en: You can also obtain useful information from the output of [`SHOW ENGINE NDB
    STATUS`](show-engine.html "15.7.7.15 SHOW ENGINE Statement").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从[`SHOW ENGINE NDB STATUS`](show-engine.html "15.7.7.15 SHOW ENGINE Statement")的输出中获取有用信息。
- en: Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When performing schema changes on [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") tables, applications should wait until the [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") statement has returned in the MySQL client connection
    that issued the statement before attempting to use the updated definition of the
    table.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在对[`NDB`](mysql-cluster.html "第 25 章 MySQL NDB Cluster 8.0")表执行模式更改时，应用程序应等到发出该语句的
    MySQL 客户端连接中返回[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句后，再尝试使用表的更新定义。
- en: ndb_apply_status Table
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ndb_apply_status 表
- en: '`ndb_apply_status` is used to keep a record of the operations that have been
    replicated from the source to the replica. If the `ndb_apply_status` table does
    not exist on the replica, [**ndb_restore**](mysql-cluster-programs-ndb-restore.html
    "25.5.23 ndb_restore — Restore an NDB Cluster Backup") re-creates it.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndb_apply_status`用于记录已从源复制到副本的操作。如果副本上不存在`ndb_apply_status`表，[**ndb_restore**](mysql-cluster-programs-ndb-restore.html
    "25.5.23 ndb_restore — 恢复 NDB Cluster 备份")会重新创建它。'
- en: 'Unlike the case with `ndb_binlog_index`, the data in this table is not specific
    to any one SQL node in the (replica) cluster, and so `ndb_apply_status` can use
    the `NDBCLUSTER` storage engine, as shown here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ndb_binlog_index`不同，此表中的数据不针对（副本）集群中的任何一个 SQL 节点，因此`ndb_apply_status`可以使用`NDBCLUSTER`存储引擎，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `ndb_apply_status` table is populated only on replicas, which means that,
    on the source, this table never contains any rows; thus, there is no need to allot
    any [`DataMemory`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-datamemory)
    to `ndb_apply_status` there.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndb_apply_status`表仅在副本上填充，这意味着在源上，此表永远不包含任何行；因此，在那里不需要为`ndb_apply_status`分配任何[`DataMemory`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-datamemory)。'
- en: Because this table is populated from data originating on the source, it should
    be allowed to replicate; any replication filtering or binary log filtering rules
    that inadvertently prevent the replica from updating `ndb_apply_status`, or that
    prevent the source from writing into the binary log may prevent replication between
    clusters from operating properly. For more information about potential problems
    arising from such filtering rules, see [Replication and binary log filtering rules
    with replication between NDB Clusters](mysql-cluster-replication-issues.html#mysql-cluster-replication-issues-filtering
    "Replication and binary log filtering rules with replication between NDB Clusters").
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此表是从源头数据填充的，因此应允许其进行复制；任何无意中阻止副本更新`ndb_apply_status`或阻止源写入二进制日志的复制过滤或二进制日志过滤规则可能会阻止集群之间的复制正常运行。有关此类过滤规则可能引起的潜在问题的更多信息，请参阅[在
    NDB 集群之间进行复制时的复制和二进制日志过滤规则](mysql-cluster-replication-issues.html#mysql-cluster-replication-issues-filtering
    "在 NDB 集群之间进行复制时的复制和二进制日志过滤规则")。
- en: It is possible to delete this table, but this is not recommended. Deleting it
    puts all SQL nodes in read-only mode; in NDB 8.0.24 and later, `NDB` detects that
    this table has been dropped, and re-creates it, after which it is possible once
    again to perform updates. Dropping and re-creating `ndb_apply_status` creates
    a gap event in the binary log; the gap event causes replica SQL nodes to stop
    applying changes from the source until the replication channel is restarted. Prior
    to NDB 8.0.24, it was necessary in such cases to restart all SQL nodes to bring
    them out of read-only mode, and then to re-create `ndb_apply_status` manually.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以删除此表，但不建议这样做。删除它会使所有 SQL 节点进入只读模式；在 NDB 8.0.24 及更高版本中，`NDB` 检测到该表已被删除，并重新创建它，之后再次执行更新是可能的。删除并重新创建
    `ndb_apply_status` 会在二进制日志中创建一个间隙事件；间隙事件会导致副本 SQL 节点停止应用来自源的更改，直到重新启动复制通道。在 NDB
    8.0.24 之前，在这种情况下，需要重新启动所有 SQL 节点以使它们退出只读模式，然后手动重新创建 `ndb_apply_status`。
- en: '`0` in the `epoch` column of this table indicates a transaction originating
    from a storage engine other than `NDB`.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该表的 `epoch` 列中的 `0` 表示来自于 `NDB` 以外的存储引擎的事务。
- en: '`ndb_apply_status` is used to record which epoch transactions have been replicated
    and applied to a replica cluster from an upstream source. This information is
    captured in an `NDB` online backup, but (by design) it is not restored by [**ndb_restore**](mysql-cluster-programs-ndb-restore.html
    "25.5.23 ndb_restore — Restore an NDB Cluster Backup"). In some cases, it can
    be helpful to restore this information for use in new setups; beginning with NDB
    8.0.29, you can do this by invoking [**ndb_restore**](mysql-cluster-programs-ndb-restore.html
    "25.5.23 ndb_restore — Restore an NDB Cluster Backup") with the [`--with-apply-status`](mysql-cluster-programs-ndb-restore.html#option_ndb_restore_with-apply-status)
    option. See the description of the option for more information.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndb_apply_status` 用于记录从上游源复制并应用到副本集群的哪些时代事务。这些信息在 `NDB` 在线备份中被捕获，但（按设计）不会被
    [**ndb_restore**](mysql-cluster-programs-ndb-restore.html "25.5.23 ndb_restore
    — Restore an NDB Cluster Backup") 恢复。在某些情况下，恢复这些信息以供新设置使用可能会有所帮助；从 NDB 8.0.29
    开始，您可以通过使用 [`--with-apply-status`](mysql-cluster-programs-ndb-restore.html#option_ndb_restore_with-apply-status)
    选项调用 [**ndb_restore**](mysql-cluster-programs-ndb-restore.html "25.5.23 ndb_restore
    — Restore an NDB Cluster Backup") 来实现这一点。有关该选项的更多信息，请参阅选项的描述。'
- en: ndb_binlog_index Table
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ndb_binlog_index 表
- en: 'NDB Cluster Replication uses the `ndb_binlog_index` table for storing the binary
    log''s indexing data. Since this table is local to each MySQL server and does
    not participate in clustering, it uses the [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") storage engine. This means that it must
    be created separately on each [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL
    Server") participating in the source cluster. (The binary log itself contains
    updates from all MySQL servers in the cluster.) This table is defined as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: NDB 集群复制使用 `ndb_binlog_index` 表来存储二进制日志的索引数据。由于该表对每个 MySQL 服务器都是本地的，并且不参与集群化，因此它使用
    [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    存储引擎。这意味着必须在参与源集群的每个 [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")
    上单独创建该表。（二进制日志本身包含来自集群中所有 MySQL 服务器的更新。）该表定义如下：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are upgrading from an older release (prior to NDB 7.5.2), perform the
    MySQL upgrade procedure and ensure that the system tables are upgraded by starting
    the MySQL server with the `--upgrade=FORCE` option. The system table upgrade causes
    an [`ALTER TABLE ... ENGINE=INNODB`](alter-table.html "15.1.9 ALTER TABLE Statement")
    statement to be executed for this table. Use of the `MyISAM` storage engine for
    this table continues to be supported for backward compatibility.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在从旧版本（NDB 7.5.2 之前）升级，请执行 MySQL 升级过程，并确保通过使用 `--upgrade=FORCE` 选项启动 MySQL
    服务器来升级系统表。系统表升级会导致为该表执行 [`ALTER TABLE ... ENGINE=INNODB`](alter-table.html "15.1.9 ALTER
    TABLE Statement") 语句。继续支持使用 `MyISAM` 存储引擎以实现向后兼容性。
- en: '`ndb_binlog_index` may require additional disk space after being converted
    to `InnoDB`. If this becomes an issue, you may be able to conserve space by using
    an `InnoDB` tablespace for this table, changing its `ROW_FORMAT` to `COMPRESSED`,
    or both. For more information, see [Section 15.1.21, “CREATE TABLESPACE Statement”](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement"), and [Section 15.1.20, “CREATE TABLE Statement”](create-table.html
    "15.1.20 CREATE TABLE Statement"), as well as [Section 17.6.3, “Tablespaces”](innodb-tablespace.html
    "17.6.3 Tablespaces").'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `ndb_binlog_index` 转换为 `InnoDB` 后可能需要额外的磁盘空间。如果这成为问题，您可以通过使用 `InnoDB` 表空间来为这个表节省空间，将其
    `ROW_FORMAT` 更改为 `COMPRESSED`，或两者兼而有之。有关更多信息，请参见 [Section 15.1.21, “CREATE TABLESPACE
    Statement”](create-tablespace.html "15.1.21 CREATE TABLESPACE Statement")，以及 [Section 15.1.20,
    “CREATE TABLE Statement”](create-table.html "15.1.20 CREATE TABLE Statement")，以及
    [Section 17.6.3, “Tablespaces”](innodb-tablespace.html "17.6.3 Tablespaces")。
- en: 'The size of the `ndb_binlog_index` table is dependent on the number of epochs
    per binary log file and the number of binary log files. The number of epochs per
    binary log file normally depends on the amount of binary log generated per epoch
    and the size of the binary log file, with smaller epochs resulting in more epochs
    per file. You should be aware that empty epochs produce inserts to the `ndb_binlog_index`
    table, even when the [`--ndb-log-empty-epochs`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-empty-epochs)
    option is `OFF`, meaning that the number of entries per file depends on the length
    of time that the file is in use; this relationship can be represented by the formula
    shown here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndb_binlog_index` 表的大小取决于每个二进制日志文件的时代数和二进制日志文件的数量。每个二进制日志文件的时代数通常取决于每个时代生成的二进制日志量和二进制日志文件的大小，较小的时代会导致每个文件有更多的时代。需要注意的是，即使
    [`--ndb-log-empty-epochs`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-empty-epochs)
    选项为 `OFF`，空时代也会向 `ndb_binlog_index` 表插入记录，这意味着每个文件的条目数量取决于文件的使用时间；这种关系可以用下面的公式表示：'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A busy NDB Cluster writes to the binary log regularly and presumably rotates
    binary log files more quickly than a quiet one. This means that a “quiet” NDB
    Cluster with [`--ndb-log-empty-epochs=ON`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-empty-epochs)
    can actually have a much higher number of `ndb_binlog_index` rows per file than
    one with a great deal of activity.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 繁忙的 NDB Cluster 定期写入二进制日志，并且可能比安静的集群更快地轮换二进制日志文件。这意味着一个带有 [`--ndb-log-empty-epochs=ON`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-empty-epochs)
    的“安静” NDB Cluster 实际上可能比活动量大的集群每个文件有更多的 `ndb_binlog_index` 行。
- en: 'When [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server") is started
    with the [`--ndb-log-orig`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-orig)
    option, the `orig_server_id` and `orig_epoch` columns store, respectively, the
    ID of the server on which the event originated and the epoch in which the event
    took place on the originating server, which is useful in NDB Cluster replication
    setups employing multiple sources. The [`SELECT`](select.html "15.2.13 SELECT
    Statement") statement used to find the closest binary log position to the highest
    applied epoch on the replica in a multi-source setup (see [Section 25.7.10, “NDB
    Cluster Replication: Bidirectional and Circular Replication”](mysql-cluster-replication-multi-source.html
    "25.7.10 NDB Cluster Replication: Bidirectional and Circular Replication")) employs
    these two columns, which are not indexed. This can lead to performance issues
    when trying to fail over, since the query must perform a table scan, especially
    when the source has been running with [`--ndb-log-empty-epochs=ON`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-empty-epochs).
    You can improve multi-source failover times by adding an index to these columns,
    as shown here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '当使用 [`--ndb-log-orig`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-orig)
    选项启动 [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server") 时，`orig_server_id`
    和 `orig_epoch` 列分别存储事件起源服务器的 ID 和事件发生的时代，这在使用多个源的 NDB Cluster 复制设置中非常有用。用于在多源设置中找到最接近副本上最高应用时代的二进制日志位置的
    [`SELECT`](select.html "15.2.13 SELECT Statement") 语句（参见 [Section 25.7.10, “NDB
    Cluster Replication: Bidirectional and Circular Replication”](mysql-cluster-replication-multi-source.html
    "25.7.10 NDB Cluster Replication: Bidirectional and Circular Replication")）使用这两列，这两列没有索引。当尝试执行故障切换时，这可能导致性能问题，因为查询必须执行表扫描，特别是当源使用
    [`--ndb-log-empty-epochs=ON`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-empty-epochs)
    运行时。您可以通过为这些列添加索引来提高多源故障切换时间，如下所示：'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding this index provides no benefit when replicating from a single source
    to a single replica, since the query used to get the binary log position in such
    cases makes no use of `orig_server_id` or `orig_epoch`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在从单个源到单个副本的复制时，添加此索引不会带来任何好处，因为在这种情况下用于获取二进制日志位置的查询不使用 `orig_server_id` 或 `orig_epoch`。
- en: See [Section 25.7.8, “Implementing Failover with NDB Cluster Replication”](mysql-cluster-replication-failover.html
    "25.7.8 Implementing Failover with NDB Cluster Replication"), for more information
    about using the `next_position` and `next_file` columns.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用 `next_position` 和 `next_file` 列的更多信息，请参见[第 25.7.8 节，“使用 NDB 集群复制实现故障切换”](mysql-cluster-replication-failover.html
    "25.7.8 使用 NDB 集群复制实现故障切换")。
- en: The following figure shows the relationship of the NDB Cluster replication source
    server, its binary log injector thread, and the `mysql.ndb_binlog_index` table.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了 NDB 集群复制源服务器、其二进制日志注入器线程和 `mysql.ndb_binlog_index` 表之间的关系。
- en: '**Figure 25.14 The Replication Source Cluster**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 25.14 复制源集群**'
- en: '![Most concepts are described in the surrounding text. This complex image has
    three main areas. The top left area is divided into three sections: MySQL Server
    (mysqld), NDBCLUSTER table handler, and mutex. A connection thread connects these,
    and receiver and injector threads connect the NDBCLUSTER table handler and mutex.
    The bottom area shows four data nodes (ndbd). They all produce events represented
    by arrows pointing to the receiver thread, and the receiver thread also points
    to the connection and injector threads. One node sends and receives to the mutex
    area. The arrow representing the injector thread points to a binary log as well
    as the ndb_binlog_index table, which is described in the surrounding text.](../Images/3a51e1f09897a520d332101c0894ca32.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![大多数概念在周围的文本中有描述。这个复杂的图像有三个主要区域。左上角的区域分为三个部分：MySQL 服务器（mysqld）、NDBCLUSTER
    表处理程序和互斥体。连接线程连接这些部分，接收器和注入器线程连接 NDBCLUSTER 表处理程序和互斥体。底部区域显示四个数据节点（ndbd）。它们都产生由箭头表示的事件，指向接收器线程，接收器线程也指向连接线程和注入器线程。一个节点发送和接收到互斥区域。表示注入器线程的箭头指向二进制日志以及在周围文本中描述的
    ndb_binlog_index 表。](../Images/3a51e1f09897a520d332101c0894ca32.png)'
- en: ndb_replication Table
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ndb_replication 表
- en: The `ndb_replication` table is used to control binary logging and conflict resolution,
    and acts on a per-table basis. Each row in this table corresponds to a table being
    replicated, determines how to log changes to the table and, if a conflict resolution
    function is specified, and determines how to resolve conflicts for that table.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndb_replication` 表用于控制二进制日志记录和冲突解决，并且是基于每个表的基础上操作的。该表中的每一行对应于被复制的表，确定如何记录对表的更改，并且如果指定了冲突解决函数，则确定如何解决该表的冲突。'
- en: 'Unlike the `ndb_apply_status` and `ndb_replication` tables, the `ndb_replication`
    table must be created manually, using the SQL statement shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `ndb_apply_status` 和 `ndb_replication` 表不同，`ndb_replication` 表必须手动创建，使用此处显示的
    SQL 语句：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The columns of this table are listed here, with descriptions:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此表的列在此处列出，并附有描述：
- en: '`db` column'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db` 列'
- en: The name of the database containing the table to be replicated.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含要复制表的数据库的名称���
- en: You may employ either or both of the wildcards `_` and `%` as part of the database
    name. (See [Matching with wildcards](mysql-cluster-replication-schema.html#ndb-replication-wildcards
    "Matching with wildcards"), later in this section.)
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在数据库名称中使用下划线 `_` 和百分号 `%` 中的一个或两个通配符。（请参见[使用通配符匹配](mysql-cluster-replication-schema.html#ndb-replication-wildcards
    "使用通配符匹配")，本节后面有更多信息。）
- en: '`table_name` column'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name` 列'
- en: The name of the table to be replicated.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要复制的表的名称。
- en: The table name may include either or both of the wildcards `_` and `%`. See
    [Matching with wildcards](mysql-cluster-replication-schema.html#ndb-replication-wildcards
    "Matching with wildcards"), later in this section.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表名可以包含下划线 `_` 和百分号 `%` 中的一个或两个通配符。请参见[使用通配符匹配](mysql-cluster-replication-schema.html#ndb-replication-wildcards
    "使用通配符匹配")，本节后面有更多信息。
- en: '`server_id` column'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server_id` 列'
- en: The unique server ID of the MySQL instance (SQL node) where the table resides.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 实例（SQL 节点）的唯一服务器 ID，表所在的位置。
- en: '`0` in this column acts like a wildcard equivalent to `%`, and matches any
    server ID. (See [Matching with wildcards](mysql-cluster-replication-schema.html#ndb-replication-wildcards
    "Matching with wildcards"), later in this section.)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此列中的 `0` 充当通配符，相当于 `%`，匹配任何服务器 ID。（请参见[使用通配符匹配](mysql-cluster-replication-schema.html#ndb-replication-wildcards
    "使用通配符匹配")，本节后面有更多信息。）
- en: '`binlog_type` column'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binlog_type` 列'
- en: The type of binary logging to be employed. See text for values and descriptions.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用的二进制日志记录类型。有关值和描述，请参阅文本。
- en: '`conflict_fn` column'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conflict_fn`列'
- en: The conflict resolution function to be applied; one of [NDB$OLD()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-old
    "NDB$OLD()"), [NDB$MAX()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-max
    "NDB$MAX()"), [NDB$MAX_DELETE_WIN()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-max-delete-win
    "NDB$MAX_DELETE_WIN()"), [NDB$EPOCH()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-epoch
    "NDB$EPOCH()"), [NDB$EPOCH_TRANS()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-epoch-trans
    "NDB$EPOCH_TRANS()"), [NDB$EPOCH2()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-epoch2
    "NDB$EPOCH2()"), [NDB$EPOCH2_TRANS()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-epoch2-trans
    "NDB$EPOCH2_TRANS()"); `NULL` indicates that conflict resolution is not used for
    this table. NDB 8.0.30 and later supports two additional conflict resolution functions
    [NDB$MAX_INS()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-max-ins
    "NDB$MAX_INS()") and [NDB$MAX_DEL_WIN_INS()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-max-del-win-ins
    "NDB$MAX_DEL_WIN_INS()").
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要应用的冲突解决函数之一是[NDB$OLD()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-old
    "NDB$OLD()")，[NDB$MAX()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-max
    "NDB$MAX()")，[NDB$MAX_DELETE_WIN()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-max-delete-win
    "NDB$MAX_DELETE_WIN()")，[NDB$EPOCH()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-epoch
    "NDB$EPOCH()")，[NDB$EPOCH_TRANS()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-epoch-trans
    "NDB$EPOCH_TRANS()")，[NDB$EPOCH2()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-epoch2
    "NDB$EPOCH2()")，[NDB$EPOCH2_TRANS()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-epoch2-trans
    "NDB$EPOCH2_TRANS()")中的一个；`NULL`表示此表不使用冲突解决。NDB 8.0.30及更高版本支持两个额外的冲突解决函数[NDB$MAX_INS()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-max-ins
    "NDB$MAX_INS()")和[NDB$MAX_DEL_WIN_INS()](mysql-cluster-replication-conflict-resolution.html#mysql-cluster-replication-ndb-max-del-win-ins
    "NDB$MAX_DEL_WIN_INS()")。
- en: See [Conflict Resolution Functions](mysql-cluster-replication-conflict-resolution.html#conflict-resolution-functions
    "Conflict Resolution Functions"), for more information about these functions and
    their uses in NDB Replication conflict resolution.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关这些函数及其在NDB复制冲突解决中的用途的更多信息，请参见[Conflict Resolution Functions](mysql-cluster-replication-conflict-resolution.html#conflict-resolution-functions
    "Conflict Resolution Functions")。
- en: Some conflict resolution functions (`NDB$OLD()`, `NDB$EPOCH()`, `NDB$EPOCH_TRANS()`)
    require the use of one or more user-created exceptions tables. See [Conflict Resolution
    Exceptions Table](mysql-cluster-replication-conflict-resolution.html#conflict-resolution-exceptions-table
    "Conflict Resolution Exceptions Table").
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些冲突解决函数（`NDB$OLD()`，`NDB$EPOCH()`，`NDB$EPOCH_TRANS()`）需要使用一个或多个用户创建的异常表。请参见[Conflict
    Resolution Exceptions Table](mysql-cluster-replication-conflict-resolution.html#conflict-resolution-exceptions-table
    "Conflict Resolution Exceptions Table")。
- en: To enable conflict resolution with NDB Replication, it is necessary to create
    and populate this table with control information on the SQL node or nodes on which
    the conflict should be resolved. Depending on the conflict resolution type and
    method to be employed, this may be the source, the replica, or both servers. In
    a simple source-replica setup where data can also be changed locally on the replica
    this is typically the replica. In a more complex replication scheme, such as bidirectional
    replication, this is usually all of the sources involved. See [Section 25.7.12,
    “NDB Cluster Replication Conflict Resolution”](mysql-cluster-replication-conflict-resolution.html
    "25.7.12 NDB Cluster Replication Conflict Resolution"), for more information.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用与NDB复制的冲突解决，需要在SQL节点或应解决冲突的节点上创建并填充此表，其中包含有关控制信息。根据要使用的冲突解决类型和方法，这可能是源、副本或两个服务器。在简单的源-副本设置中，数据也可以在副本上本地更改，这通常是副本。在更复杂的复制方案中，例如双向复制，这通常是所有涉及的源。有关更多信息，请参见[Section 25.7.12，“NDB
    Cluster Replication Conflict Resolution”](mysql-cluster-replication-conflict-resolution.html
    "25.7.12 NDB Cluster Replication Conflict Resolution")。
- en: 'The `ndb_replication` table allows table-level control over binary logging
    outside the scope of conflict resolution, in which case `conflict_fn` is specified
    as `NULL`, while the remaining column values are used to control binary logging
    for a given table or set of tables matching a wildcard expression. By setting
    the proper value for the `binlog_type` column, you can make logging for a given
    table or tables use a desired binary log format, or disabling binary logging altogether.
    Possible values for this column, with values and descriptions, are shown in the
    following table:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndb_replication`表允许在冲突解决范围之外对二进制日志进行表级控制，在这种情况下，`conflict_fn`指定为`NULL`，而其余列值用于控制给定表或与通配符表达式匹配的一组表的二进制日志。通过为`binlog_type`列设置适当的值，您可以使给定表或表使用所需的二进制日志格式进行记录，或完全禁用二进制日志记录。此列的可能值及其描述如下表所示：'
- en: '**Table 25.70 binlog_type values, with values and descriptions**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 25.70 binlog_type值及其描述**'
- en: '| Value | Description |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 描述 |'
- en: '| 0 | Use server default |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 使用服务器默认值 |'
- en: '| 1 | Do not log this table in the binary log (same effect as [`sql_log_bin
    = 0`](replication-options-binary-log.html#sysvar_sql_log_bin), but applies to
    one or more specified tables only) |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 不在二进制日志中记录此表（与[`sql_log_bin = 0`](replication-options-binary-log.html#sysvar_sql_log_bin)效果相同，但仅适用于一个或多个指定表）
    |'
- en: '| 2 | Log updated attributes only; log these as `WRITE_ROW` events |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 仅记录更新的属性；将其记录为`WRITE_ROW`事件 |'
- en: '| 3 | Log full row, even if not updated (MySQL server default behavior) |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 记录完整行，即使未更新（MySQL服务器默认行为） |'
- en: '| 6 | Use updated attributes, even if values are unchanged |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 使用更新的属性，即使值未更改 |'
- en: '| 7 | Log full row, even if no values are changed; log updates as `UPDATE_ROW`
    events |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 记录完整行，即使没有值更改；将更新记录为`UPDATE_ROW`事件 |'
- en: '| 8 | Log update as `UPDATE_ROW`; log only primary key columns in before image,
    and only updated columns in after image (same effect as [`--ndb-log-update-minimal`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-update-minimal),
    but applies to one or more specified tables only) |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 将更新记录为`UPDATE_ROW`；仅记录主键列的前图像，以及更新后图像中的列（与[`--ndb-log-update-minimal`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-update-minimal)效果相同，但仅适用于一个或多个指定表）
    |'
- en: '| 9 | Log update as `UPDATE_ROW`; log only primary key columns in before image,
    and all columns other than primary key columns in after image |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 将更新记录为`UPDATE_ROW`；仅记录主键列的前图像，以及除主键列之外的所有列的后图像 |'
- en: Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`binlog_type` values 4 and 5 are not used, and so are omitted from the table
    just shown, as well as from the next table.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`binlog_type`值4和5未被使用，因此未包含在刚刚显示的表中，也未包含在下一个表中。'
- en: 'Several `binlog_type` values are equivalent to various combinations of the
    [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server") logging options [`--ndb-log-updated-only`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-updated-only),
    [`--ndb-log-update-as-write`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-update-as-write),
    and [`--ndb-log-update-minimal`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-update-minimal),
    as shown in the following table:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 几个`binlog_type`值等同于各种组合的[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")日志选项[`--ndb-log-updated-only`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-updated-only)，[`--ndb-log-update-as-write`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-update-as-write)，和[`--ndb-log-update-minimal`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-update-minimal)，如下表所示：
- en: '**Table 25.71 binlog_type values with equivalent combinations of NDB logging
    options**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 25.71 binlog_type值与NDB日志选项等效组合**'
- en: '| Value | `--ndb-log-updated-only` Value | `--ndb-log-update-as-write` Value
    | `--ndb-log-update-minimal` Value |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 值 | `--ndb-log-updated-only`值 | `--ndb-log-update-as-write`值 | `--ndb-log-update-minimal`值
    |'
- en: '| 0 | -- | -- | -- |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 0 | -- | -- | -- |'
- en: '| 1 | -- | -- | -- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 1 | -- | -- | -- |'
- en: '| 2 | ON | ON | OFF |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 开 | 开 | 关 |'
- en: '| 3 | OFF | ON | OFF |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 关 | 开 | 关 |'
- en: '| 6 | ON | OFF | OFF |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 开 | 关 | 关 |'
- en: '| 7 | OFF | OFF | OFF |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 关 | 关 | 关 |'
- en: '| 8 | ON | OFF | ON |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 开 | 关 | 开 |'
- en: '| 9 | OFF | OFF | ON |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 关 | 关 | 开 |'
- en: 'Binary logging can be set to different formats for different tables by inserting
    rows into the `ndb_replication` table using the appropriate `db`, `table_name`,
    and `binlog_type` column values. The internal integer value shown in the preceding
    table should be used when setting the binary logging format. The following two
    statements set binary logging to logging of full rows ( value 3) for table `test.a`,
    and to logging of updates only ( value 2) for table `test.b`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向 `ndb_replication` 表中插入行，可以为不同的表设置不同的二进制日志记录格式，使用适当的 `db`、`table_name` 和
    `binlog_type` 列值。在设置二进制日志记录格式时，应使用前面表中显示的内部整数值。以下两个语句将二进制日志记录设置为对表 `test.a` 进行完整行记录（值为
    3），以及对表 `test.b` 仅记录更新（值为 2）：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To disable logging for one or more tables, use 1 for `binlog_type`, as shown
    here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用一个或多个表的日志记录，请使用 `binlog_type` 为 1，如下所示：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Disabling logging for a given table is the equivalent of setting [`sql_log_bin
    = 0`](replication-options-binary-log.html#sysvar_sql_log_bin), except that it
    applies to one or more tables individually. If an SQL node is not performing binary
    logging for a given table, it is not sent the row change events for those tables.
    This means that it is not receiving all changes and discarding some, but rather
    it is not subscribing to these changes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定表禁用日志记录相当于设置[`sql_log_bin = 0`](replication-options-binary-log.html#sysvar_sql_log_bin)，只是它适用于一个或多个表。如果
    SQL 节点不为给定表执行二进制日志记录，则不会发送这些表的行更改事件。这意味着它不是接收所有更改并丢弃一些，而是不订阅这些更改。
- en: 'Disabling logging can be useful for a number of reasons, including those listed
    here:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用日志记录可能有多种原因，包括以下列出的原因：
- en: Not sending changes across the network generally saves bandwidth, buffering,
    and CPU resources.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不将更改发送到网络通常可以节省带宽、缓冲和 CPU 资源。
- en: Not logging changes to tables with very frequent updates but whose value is
    not great is a good fit for transient data (such as session data) that may be
    relatively unimportant in the event of a complete failure of the cluster.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不记录对具有非常频繁更新但价值不大的表的更改非常适合瞬态数据（例如会话数据），在集群完全失败的情况下可能相对不重要。
- en: Using a session variable (or `sql_log_bin`) and application code, it is also
    possible to log (or not to log) certain SQL statements or types of SQL statements;
    for example, it may be desirable in some cases not to record DDL statements on
    one or more tables.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用会话变量（或 `sql_log_bin`）和应用程序代码，还可以记录（或不记录）某些 SQL 语句或类型的 SQL 语句；例如，在某些情况下，可能不希望记录一个或多个表上的
    DDL 语句。
- en: Splitting replication streams into two (or more) binary logs can be done for
    reasons of performance, a need to replicate different databases to different places,
    use of different binary logging types for different databases, and so on.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将复制流拆分为两个（或更多）二进制日志文件可以出于性能、需要将不同数据库复制到不同位置、使用不同的二进制日志记录类型等原因进行操作。
- en: '**Matching with wildcards. ** In order not to make it necessary to insert a
    row in the `ndb_replication` table for each and every combination of database,
    table, and SQL node in your replication setup, `NDB` supports wildcard matching
    on the this table''s `db`, `table_name`, and `server_id` columns. Database and
    table names used in, respectively, `db` and `table_name` may contain either or
    both of the following wildcards:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用通配符进行匹配。** 为了不必为复制设置中每个数据库、表和 SQL 节点的每个组合插入一行到 `ndb_replication` 表中，`NDB`
    支持在此表的 `db`、`table_name` 和 `server_id` 列上进行通配符匹配。在 `db` 和 `table_name` 中使用的数据库和表名可以包含以下通配符中的一个或两个：'
- en: '`_` (underscore character): matches zero or more characters'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_`（下划线字符）：匹配零个或多个字符'
- en: '`%` (percent sign): matches a single character'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%`（百分号）：匹配一个字符'
- en: (These are the same wildcards as supported by the MySQL [`LIKE`](string-comparison-functions.html#operator_like)
    operator.)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: （这些是 MySQL [`LIKE`](string-comparison-functions.html#operator_like) 操作符支持的相同通配符。）
- en: The `server_id` column supports `0` as a wildcard equivalent to `_` (matches
    anything). This is used in the examples shown previously.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`server_id` 列支持 `0` 作为 `_` 的通配符等效（匹配任何内容）。这在前面显示的示例中使用。'
- en: 'A given row in the `ndb_replication` table can use wildcards to match any of
    the database name, table name, and server ID in any combination. Where there are
    multiple potential matches in the table, the best match is chosen, according to
    the table shown here, where *W* represents a wildcard match, *E* an exact match,
    and the greater the value in the *Quality* column, the better the match:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndb_replication`表中的给定行可以使用通配符来匹配任何数据库名称、表名称和服务器ID的任意组合。在表中存在多个潜在匹配项的情况下，根据此处显示的表，选择最佳匹配项，其中*W*表示通配符匹配，*E*表示精确匹配，*Quality*列中的值越大，匹配越好：'
- en: '**Table 25.72 Weights of different combinations of wildcard and exact matches
    on columns in the mysql.ndb_replication table**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**表25.72 不同列的通配符和精确匹配组合的权重**'
- en: '| `db` | `table_name` | `server_id` | Quality |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `db` | `table_name` | `server_id` | 质量 |'
- en: '| W | W | W | 1 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| W | W | W | 1 |'
- en: '| W | W | E | 2 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| W | W | E | 2 |'
- en: '| W | E | W | 3 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| W | E | W | 3 |'
- en: '| W | E | E | 4 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| W | E | E | 4 |'
- en: '| E | W | W | 5 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| E | W | W | 5 |'
- en: '| E | W | E | 6 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| E | W | E | 6 |'
- en: '| E | E | W | 7 |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| E | E | W | 7 |'
- en: '| E | E | E | 8 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| E | E | E | 8 |'
- en: Thus, an exact match on database name, table name, and server ID is considered
    best (strongest), while the weakest (worst) match is a wildcard match on all three
    columns. Only the strength of the match is considered when choosing which rule
    to apply; the order in which the rows occur in the table has no effect on this
    determination.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，数据库名称、表名称和服务器ID的精确匹配被认为是最佳（最强），而三个列的通配符匹配被认为是最弱（最差）。在选择应用哪个规则时，只考虑匹配的强度；表中行的顺序对此决定没有影响。
- en: '**Logging Full or Partial Rows. ** There are two basic methods of logging rows,
    as determined by the setting of the [`--ndb-log-updated-only`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-updated-only)
    option for [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server"):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**记录完整或部分行。** 有两种基本记录行的方法，由[`--ndb-log-updated-only`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-updated-only)选项设置为[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")决定：'
- en: Log complete rows (option set to `ON`)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录完整行（选项设置为`ON`)
- en: Log only column data that has been updated—that is, column data whose value
    has been set, regardless of whether or not this value was actually changed. This
    is the default behavior (option set to `OFF`).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅记录已更新的列数据，即已设置值的列数据，无论该值是否实际更改。这是默认行为（选项设置为`OFF`）。
- en: It is usually sufficient—and more efficient—to log updated columns only; however,
    if you need to log full rows, you can do so by setting [`--ndb-log-updated-only`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-updated-only)
    to `0` or `OFF`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通常仅记录已更新的列就足够且更有效；但是，如果需要记录完整行，可以通过将[`--ndb-log-updated-only`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-updated-only)设置为`0`或`OFF`来实现。
- en: '**Logging Changed Data as Updates. ** The setting of the MySQL Server''s [`--ndb-log-update-as-write`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-update-as-write)
    option determines whether logging is performed with or without the “before” image.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**将更改的数据记录为更新。** MySQL服务器的[`--ndb-log-update-as-write`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-update-as-write)选项的设置确定是否执行记录时是否包含“之前”图像。'
- en: Because conflict resolution for updates and delete operations is done in the
    MySQL Server's update handler, it is necessary to control the logging performed
    by the replication source such that updates are updates and not writes; that is,
    such that updates are treated as changes in existing rows rather than the writing
    of new rows, even though these replace existing rows.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 因为更新和删除操作的冲突解决是在MySQL服务器的更新处理程序中完成的，所以有必要控制复制源执行的日志记录，使更新为更新而不是写入；也就是说，使更新被视为现有行的更改，而不是写入新行，即使这些行替换了现有行。
- en: This option is turned on by default; in other words, updates are treated as
    writes. That is, updates are by default written as `write_row` events in the binary
    log, rather than as `update_row` events.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项默认为打开；换句话说，更新被视为写入。也就是说，默认情况下，更新被写入二进制日志中的`write_row`事件，而不是`update_row`事件。
- en: To disable the option, start the source [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") with `--ndb-log-update-as-write=0` or `--ndb-log-update-as-write=OFF`.
    You must do this when replicating from NDB tables to tables using a different
    storage engine; see [Replication from NDB to other storage engines](mysql-cluster-replication-issues.html#mysql-cluster-replication-ndb-to-non-ndb
    "Replication from NDB to other storage engines"), and [Replication from NDB to
    a nontransactional storage engine](mysql-cluster-replication-issues.html#mysql-cluster-replication-ndb-to-nontransactional
    "Replication from NDB to a nontransactional storage engine"), for more information.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用该选项，请使用`--ndb-log-update-as-write=0`或`--ndb-log-update-as-write=OFF`启动源[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")。当从NDB表复制到使用不同存储引擎的表时，您必须执行此操作；请参阅[从NDB复制到其他存储引擎](mysql-cluster-replication-issues.html#mysql-cluster-replication-ndb-to-non-ndb
    "从NDB复制到其他存储引擎")和[从NDB复制到非事务性存储引擎](mysql-cluster-replication-issues.html#mysql-cluster-replication-ndb-to-nontransactional
    "从NDB复制到非事务性存储引擎")以获取更多信息。
- en: Important
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: (*NDB 8.0.30 and later*:) For insert conflict resolution using `NDB$MAX_INS()`
    or `NDB$MAX_DEL_WIN_INS()`, an SQL node (that is, a [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") process) can record row updates on the source cluster as
    `WRITE_ROW` events with the [`--ndb-log-update-as-write`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-update-as-write)
    option enabled for idempotency and optimal size. This works for these algorithms
    since they both map a `WRITE_ROW` event to an insert or update depending on whether
    the row already exists, and the required metadata (the “after” image for the timestamp
    column) is present in the “WRITE_ROW” event.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: (*NDB 8.0.30及更高版本*:) 对于使用`NDB$MAX_INS()`或`NDB$MAX_DEL_WIN_INS()`进行插入冲突解决的情况，一个SQL节点（即一个[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")进程）可以记录源集群上的行更新为`WRITE_ROW`事件，并启用[`--ndb-log-update-as-write`](mysql-cluster-options-variables.html#option_mysqld_ndb-log-update-as-write)选项以确保幂等性和最佳大小。这对这些算法有效，因为它们都将`WRITE_ROW`事件映射到插入或更新，具体取决于行是否已经存在，并且所需的元数据（时间戳列的“后”图像）存在于“WRITE_ROW”事件中。
