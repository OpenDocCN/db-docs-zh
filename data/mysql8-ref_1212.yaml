- en: 17.8.8 Configuring Spin Lock Polling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.8.8 配置自旋锁轮询
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-performance-spin_lock_polling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-performance-spin_lock_polling.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-performance-spin_lock_polling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-performance-spin_lock_polling.html)
- en: '`InnoDB` [mutexes](glossary.html#glos_mutex "mutex") and [rw-locks](glossary.html#glos_rw_lock
    "rw-lock") are typically reserved for short intervals. On a multi-core system,
    it can be more efficient for a thread to continuously check if it can acquire
    a mutex or rw-lock for a period of time before it sleeps. If the mutex or rw-lock
    becomes available during this period, the thread can continue immediately, in
    the same time slice. However, too-frequent polling of a shared object such as
    a mutex or rw-lock by multiple threads can cause “cache ping pong”, which results
    in processors invalidating portions of each other''s cache. `InnoDB` minimizes
    this issue by forcing a random delay between polls to desynchronize polling activity.
    The random delay is implemented as a spin-wait loop.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` [互斥锁](glossary.html#glos_mutex "mutex")和[读写锁](glossary.html#glos_rw_lock
    "rw-lock")通常保留在短时间间隔内。在多核系统上，一个线程在睡眠之前连续检查是否可以在一段时间内获取互斥锁或读写锁可能更有效。如果在此期间互斥锁或读写锁变为可用，线程可以立即继续，在同一时间片内。然而，多个线程频繁轮询共享对象（如互斥锁或读写锁）可能导致“缓存乒乓”，这会导致处理器使彼此的缓存部分失效。`InnoDB`通过强制在轮询活动之间引入随机延迟来最小化此问题。随机延迟实现为自旋等待循环。'
- en: 'The duration of a spin-wait loop is determined by the number of PAUSE instructions
    that occur in the loop. That number is generated by randomly selecting an integer
    ranging from 0 up to but not including the [`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)
    value, and multiplying that value by 50\. (The multiplier value, 50, is hardcoded
    before MySQL 8.0.16, and configurable thereafter.) For example, an integer is
    randomly selected from the following range for an [`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)
    setting of 6:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 自旋等待循环的持续时间取决于循环中发生的PAUSE指令数量。该数字是通过随机选择一个整数，范围从0到[`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)值，然后将该值乘以50来生成的。（在MySQL
    8.0.16之前，乘数值50是硬编码的，在此之后可配置。）例如，对于[`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)设置为6，会随机选择以下范围内的一个整数：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The selected integer is multiplied by 50, resulting in one of six possible
    PAUSE instruction values:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所选整数乘以50，得到六个可能的PAUSE指令值之一：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For that set of values, 250 is the maximum number of PAUSE instructions that
    can occur in a spin-wait loop. An [`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)
    setting of 5 results in a set of five possible values `{0,50,100,150,200}`, where
    200 is the maximum number of PAUSE instructions, and so on. In this way, the [`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)
    setting controls the maximum delay between spin lock polls.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这组值，250是自旋等待循环中可能发生的PAUSE指令的最大数量。当[`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)设置为5时，会得到一组五个可能的值`{0,50,100,150,200}`，其中200是PAUSE指令的最大数量，依此类推。这样，[`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)设置控制着自旋锁轮询之间的最大延迟。
- en: On a system where all processor cores share a fast cache memory, you might reduce
    the maximum delay or disable the busy loop altogether by setting [`innodb_spin_wait_delay=0`](innodb-parameters.html#sysvar_innodb_spin_wait_delay).
    On a system with multiple processor chips, the effect of cache invalidation can
    be more significant and you might increase the maximum delay.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有处理器核心共享快速缓存内存的系统上，您可以通过设置[`innodb_spin_wait_delay=0`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)来减少最大延迟或完全禁用忙等待循环。在具有多个处理器芯片的系统上，缓存失效的影响可能更显著，您可能需要增加最大延迟。
- en: In the 100MHz Pentium era, an [`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)
    unit was calibrated to be equivalent to one microsecond. That time equivalence
    did not hold, but PAUSE instruction duration remained fairly constant in terms
    of processor cycles relative to other CPU instructions until the introduction
    of the Skylake generation of processors, which have a comparatively longer PAUSE
    instruction. The [`innodb_spin_wait_pause_multiplier`](innodb-parameters.html#sysvar_innodb_spin_wait_pause_multiplier)
    variable was introduced in MySQL 8.0.16 to provide a way to account for differences
    in PAUSE instruction duration.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在100MHz奔腾时代，一个[`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)单位被校准为相当于一微秒。那个时间等价性并不成立，但`PAUSE`指令持续时间相对于其他CPU指令的处理器周期保持相对稳定，直到Skylake处理器的引入，这些处理器具有相对较长的`PAUSE`指令。[`innodb_spin_wait_pause_multiplier`](innodb-parameters.html#sysvar_innodb_spin_wait_pause_multiplier)变量在MySQL
    8.0.16中引入，以提供一种解决`PAUSE`指令持续时间差异的方法。
- en: 'The [`innodb_spin_wait_pause_multiplier`](innodb-parameters.html#sysvar_innodb_spin_wait_pause_multiplier)
    variable controls the size of PAUSE instruction values. For example, assuming
    an [`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)
    setting of 6, decreasing the [`innodb_spin_wait_pause_multiplier`](innodb-parameters.html#sysvar_innodb_spin_wait_pause_multiplier)
    value from 50 (the default and previously hardcoded value) to 5 generates a set
    of smaller PAUSE instruction values:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_spin_wait_pause_multiplier`](innodb-parameters.html#sysvar_innodb_spin_wait_pause_multiplier)变量控制`PAUSE`指令值的大小。例如，假设[`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)设置为6，将[`innodb_spin_wait_pause_multiplier`](innodb-parameters.html#sysvar_innodb_spin_wait_pause_multiplier)值从50（默认值和以前硬编码值）减少到5会生成一组较小的`PAUSE`指令值：'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The ability to increase or decrease PAUSE instruction values permits fine tuning
    `InnoDB` for different processor architectures. Smaller PAUSE instruction values
    would be appropriate for processor architectures with a comparatively longer PAUSE
    instruction, for example.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 增加或减少`PAUSE`指令值的能力允许对不同处理器架构进行微调`InnoDB`。较小的`PAUSE`指令值适用于具有相对较长`PAUSE`指令的处理器架构，例如。
- en: The [`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)
    and [`innodb_spin_wait_pause_multiplier`](innodb-parameters.html#sysvar_innodb_spin_wait_pause_multiplier)
    variables are dynamic. They can be specified in a MySQL option file or modified
    at runtime using a [`SET GLOBAL`](set-variable.html "15.7.6.1 SET Syntax for Variable
    Assignment") statement. Modifying the variables at runtime requires privileges
    sufficient to set global system variables. See [Section 7.1.9.1, “System Variable
    Privileges”](system-variable-privileges.html "7.1.9.1 System Variable Privileges").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_spin_wait_delay`](innodb-parameters.html#sysvar_innodb_spin_wait_delay)和[`innodb_spin_wait_pause_multiplier`](innodb-parameters.html#sysvar_innodb_spin_wait_pause_multiplier)变量是动态的。它们可以在MySQL选项文件中指定，或者使用[`SET
    GLOBAL`](set-variable.html "15.7.6.1 变量赋值的SET语法")语句在运行时进行修改。在运行时修改变量需要足够设置全局系统变量的权限。参见[第7.1.9.1节，“系统变量权限”](system-variable-privileges.html
    "7.1.9.1 系统变量权限")。'
