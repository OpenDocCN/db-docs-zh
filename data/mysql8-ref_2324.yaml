- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/case-sensitivity.html](https://dev.mysql.com/doc/refman/8.0/en/case-sensitivity.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/case-sensitivity.html](https://dev.mysql.com/doc/refman/8.0/en/case-sensitivity.html)
- en: B.3.4.1 Case Sensitivity in String Searches
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: B.3.4.1 字符串搜索中的大小写敏感性
- en: For nonbinary strings ([`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")), string searches use the collation of the comparison
    operands. For binary strings ([`BINARY`](binary-varbinary.html "13.3.3 The BINARY
    and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY
    and VARBINARY Types"), [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")),
    comparisons use the numeric values of the bytes in the operands; this means that
    for alphabetic characters, comparisons are case-sensitive.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非二进制字符串（[`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")，[`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")，[`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types"))，字符串搜索使用比较操作数的排序规则。对于二进制字符串（[`BINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types")，[`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY
    and VARBINARY Types")，[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types"))，比较使用操作数中字节的数值；这意味着对于字母字符，比较是区分大小写的。
- en: A comparison between a nonbinary string and binary string is treated as a comparison
    of binary strings.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 非二进制字符串与二进制字符串之间的比较被视为二进制字符串的比较。
- en: Simple comparison operations (`>=, >, =, <, <=`, sorting, and grouping) are
    based on each character's “sort value.” Characters with the same sort value are
    treated as the same character. For example, if `e` and `é` have the same sort
    value in a given collation, they compare as equal.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的比较操作（`>=, >, =, <, <=`，排序和分组）基于每个字符的“排序值”。具有相同排序值的字符被视为相同字符。例如，如果在给定排序规则中`e`和`é`具有相同的排序值，则它们被视为相等。
- en: 'The default character set and collation are `utf8mb4` and `utf8mb4_0900_ai_ci`,
    so nonbinary string comparisons are case-insensitive by default. This means that
    if you search with `*`col_name`* LIKE ''a%''`, you get all column values that
    start with `A` or `a`. To make this search case-sensitive, make sure that one
    of the operands has a case-sensitive or binary collation. For example, if you
    are comparing a column and a string that both have the `utf8mb4` character set,
    you can use the `COLLATE` operator to cause either operand to have the `utf8mb4_0900_as_cs`
    or `utf8mb4_bin` collation:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 默认字符集和排序规则为`utf8mb4`和`utf8mb4_0900_ai_ci`，因此默认情况下非二进制字符串比较是不区分大小写的。这意味着如果使用`*`col_name`*
    LIKE 'a%'`进行搜索，您将获得所有以`A`或`a`开头的列值。要使此搜索区分大小写，请确保其中一个操作数具有区分大小写或二进制排序规则。例如，如果要比较具有`utf8mb4`字符集的列和字符串，则可以使用`COLLATE`运算符使其中一个操作数具有`utf8mb4_0900_as_cs`或`utf8mb4_bin`排序规则：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you want a column always to be treated in case-sensitive fashion, declare
    it with a case-sensitive or binary collation. See [Section 15.1.20, “CREATE TABLE
    Statement”](create-table.html "15.1.20 CREATE TABLE Statement").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要始终以区分大小写的方式处理某一列，请使用区分大小写或二进制排序规则声明该列。参见[第15.1.20节，“CREATE TABLE语句”](create-table.html
    "15.1.20 CREATE TABLE Statement")。
- en: 'To cause a case-sensitive comparison of nonbinary strings to be case-insensitive,
    use `COLLATE` to name a case-insensitive collation. The strings in the following
    example normally are case-sensitive, but `COLLATE` changes the comparison to be
    case-insensitive:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要使非二进制字符串的区分大小写比较变为不区分大小写，请使用`COLLATE`命名一个不区分大小写的排序规则。以下示例中的字符串通常是区分大小写的，但`COLLATE`将比较变为不区分大小写：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A binary string is case-sensitive in comparisons. To compare the string as
    case-insensitive, convert it to a nonbinary string and use `COLLATE` to name a
    case-insensitive collation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制字符串在比较时区分大小写。要将字符串作为不区分大小写进行比较，请将其转换为非二进制字符串，并使用`COLLATE`命名一个不区分大小写的排序规则：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To determine whether a value is compared as a nonbinary or binary string, use
    the [`COLLATION()`](information-functions.html#function_collation) function. This
    example shows that [`VERSION()`](information-functions.html#function_version)
    returns a string that has a case-insensitive collation, so comparisons are case-insensitive:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定值是作为非二进制还是二进制字符串进行比较，请使用[`COLLATION()`](information-functions.html#function_collation)函数。此示例显示[`VERSION()`](information-functions.html#function_version)返回一个具有不区分大小写排序规则的字符串，因此比较是不区分大小写的：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For binary strings, the collation value is `binary`, so comparisons are case
    sensitive. One context in which you can expect to see `binary` is for compression
    functions, which return binary strings as a general rule: string:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于二进制字符串，排序值为`binary`，因此比较是区分大小写的。你可以预期在某些情况下会看到`binary`，比如压缩函数，通常返回二进制字符串：字符串：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To check the sort value of a string, the [`WEIGHT_STRING()`](string-functions.html#function_weight-string)
    may be helpful. See [Section 14.8, “String Functions and Operators”](string-functions.html
    "14.8 String Functions and Operators").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查字符串的排序值，[`WEIGHT_STRING()`](string-functions.html#function_weight-string)可能会有所帮助。参见
    [第14.8节，“字符串函数和运算符”](string-functions.html "14.8 字符串函数和运算符")。
