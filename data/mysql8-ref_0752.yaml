- en: 13.3.1 String Data Type Syntax
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.3.1 字符串数据类型语法
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html)
- en: The string data types are [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), [`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types"), [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types"), [`ENUM`](enum.html
    "13.3.5 The ENUM Type"), and [`SET`](set.html "13.3.6 The SET Type").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串数据类型包括[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型"), [`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型"), [`BINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型"),
    [`VARBINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型"), [`BLOB`](blob.html
    "13.3.4 BLOB和TEXT类型"), [`TEXT`](blob.html "13.3.4 BLOB和TEXT类型"), [`ENUM`](enum.html
    "13.3.5 ENUM类型"), 和 [`SET`](set.html "13.3.6 SET类型")。
- en: In some cases, MySQL may change a string column to a type different from that
    given in a [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")
    or [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") statement.
    See [Section 15.1.20.7, “Silent Column Specification Changes”](silent-column-changes.html
    "15.1.20.7 Silent Column Specification Changes").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，MySQL可能会将字符串列更改为与[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE语句")或[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")语句中给出的类型不同的类型。请参阅[第15.1.20.7节，“静默列规范更改”](silent-column-changes.html
    "15.1.20.7 静默列规范更改")。
- en: For definitions of character string columns ([`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types"), [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    and the [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") types), MySQL interprets
    length specifications in character units. For definitions of binary string columns
    ([`BINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), and the [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") types), MySQL interprets length specifications in byte units.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于字符串列的定义([`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型"), [`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型"), 和 [`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")类型), MySQL以字符单位解释长度规范。对于二进制字符串列的定义([`BINARY`](binary-varbinary.html
    "13.3.3 BINARY和VARBINARY类型"), [`VARBINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型"),
    和 [`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")类型), MySQL以字节单位解释长度规范。
- en: 'Column definitions for character string data types [`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types"), [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    the [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") types, [`ENUM`](enum.html
    "13.3.5 The ENUM Type"), [`SET`](set.html "13.3.6 The SET Type"), and any synonyms)
    can specify the column character set and collation:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串数据类型[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型"), [`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型"),
    [`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")类型, [`ENUM`](enum.html "13.3.5 ENUM类型"),
    [`SET`](set.html "13.3.6 SET类型"), 和任何同义词的列定义可以指定列字符集和排序规则：
- en: '`CHARACTER SET` specifies the character set. If desired, a collation for the
    character set can be specified with the `COLLATE` attribute, along with any other
    attributes. For example:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHARACTER SET`指定字符集。如果需要，可以使用`COLLATE`属性指定字符集的排序规则，以及任何其他属性。例如：'
- en: '[PRE0]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This table definition creates a column named `c1` that has a character set of
    `utf8mb4` with the default collation for that character set, and a column named
    `c2` that has a character set of `latin1` and a case-sensitive (`_cs`) collation.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此表定义创建一个名为`c1`的列，其字符集为`utf8mb4`，具有该字符集的默认排序规则，并创建一个名为`c2`的列，其字符集为`latin1`，具有区分大小写(`_cs`)的排序规则。
- en: The rules for assigning the character set and collation when either or both
    of `CHARACTER SET` and the `COLLATE` attribute are missing are described in [Section 12.3.5,
    “Column Character Set and Collation”](charset-column.html "12.3.5 Column Character
    Set and Collation").
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`CHARACTER SET`和`COLLATE`属性中的一个或两个缺失时，关于分配字符集和排序规则的规则在[第12.3.5节，“列字符集和排序”](charset-column.html
    "12.3.5 列字符集和排序")中描述。
- en: '`CHARSET` is a synonym for `CHARACTER SET`.'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CHARSET`是`CHARACTER SET`的同义词。'
- en: 'Specifying the `CHARACTER SET binary` attribute for a character string data
    type causes the column to be created as the corresponding binary string data type:
    [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") becomes [`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`VARCHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types") becomes [`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY
    and VARBINARY Types"), and [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")
    becomes [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types"). For the [`ENUM`](enum.html
    "13.3.5 The ENUM Type") and [`SET`](set.html "13.3.6 The SET Type") data types,
    this does not occur; they are created as declared. Suppose that you specify a
    table using this definition:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为字符串数据类型指定 `CHARACTER SET binary` 属性会导致该列被创建为相应的二进制字符串数据类型：[`CHAR`](char.html
    "13.3.2 CHAR 和 VARCHAR 类型") 变为 [`BINARY`](binary-varbinary.html "13.3.3 BINARY
    和 VARBINARY 类型")，[`VARCHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型") 变为 [`VARBINARY`](binary-varbinary.html
    "13.3.3 BINARY 和 VARBINARY 类型")，[`TEXT`](blob.html "13.3.4 BLOB 和 TEXT 类型") 变为
    [`BLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型")。对于 [`ENUM`](enum.html "13.3.5 ENUM
    类型") 和 [`SET`](set.html "13.3.6 SET 类型") 数据类型，不会发生这种情况；它们将按声明创建。假设您使用以下定义指定一个表：
- en: '[PRE1]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The resulting table has this definition:'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果表的定义如下：
- en: '[PRE2]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `BINARY` attribute is a nonstandard MySQL extension that is shorthand for
    specifying the binary (`_bin`) collation of the column character set (or of the
    table default character set if no column character set is specified). In this
    case, comparison and sorting are based on numeric character code values. Suppose
    that you specify a table using this definition:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BINARY` 属性是 MySQL 的非标准扩展，是指定列字符集的二进制 (`_bin`) 校对的简写（如果未指定列字符集，则是表默认字符集的二进制校对）。在这种情况下，比较和排序是基于数字字符代码值的。假设您使用以下定义指定一个表：'
- en: '[PRE3]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The resulting table has this definition:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果表的定义如下：
- en: '[PRE4]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In MySQL 8.0, this nonstandard use of the `BINARY` attribute is ambiguous because
    the `utf8mb4` character set has multiple `_bin` collations. As of MySQL 8.0.17,
    the `BINARY` attribute is deprecated and you should expect support for it to be
    removed in a future version of MySQL. Applications should be adjusted to use an
    explicit `_bin` collation instead.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0 中，`BINARY` 属性的这种非标准用法是模棱两可的，因为 `utf8mb4` 字符集有多个 `_bin` 校对。从 MySQL
    8.0.17 开始，`BINARY` 属性已被弃用，您应该期望在将来的 MySQL 版本中删除对其的支持。应用程序应调整为使用显式的 `_bin` 校对。
- en: The use of `BINARY` to specify a data type or character set remains unchanged.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `BINARY` 指定数据类型或字符集的用法保持不变。
- en: The `ASCII` attribute is shorthand for `CHARACTER SET latin1`. Supported in
    older MySQL releases, `ASCII` is deprecated in MySQL 8.0.28 and later; use `CHARACTER
    SET` instead.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ASCII` 属性是 `CHARACTER SET latin1` 的简写。在较旧的 MySQL 版本中受支持，但在 MySQL 8.0.28 及更高版本中已被弃用；请使用
    `CHARACTER SET` 替代。'
- en: The `UNICODE` attribute is shorthand for `CHARACTER SET ucs2`. Supported in
    older MySQL releases, `UNICODE` is deprecated in MySQL 8.0.28 and later; use `CHARACTER
    SET` instead.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UNICODE` 属性是 `CHARACTER SET ucs2` 的简写。在较旧的 MySQL 版本中受支持，但在 MySQL 8.0.28 及更高版本中已被弃用；请使用
    `CHARACTER SET` 替代。'
- en: Character column comparison and sorting are based on the collation assigned
    to the column. For the [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types"), [`ENUM`](enum.html "13.3.5 The ENUM Type"),
    and [`SET`](set.html "13.3.6 The SET Type") data types, you can declare a column
    with a binary (`_bin`) collation or the `BINARY` attribute to cause comparison
    and sorting to use the underlying character code values rather than a lexical
    ordering.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 字符列的比较和排序基于分配给列的校对规则。对于 [`CHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型")、[`VARCHAR`](char.html
    "13.3.2 CHAR 和 VARCHAR 类型")、[`TEXT`](blob.html "13.3.4 BLOB 和 TEXT 类型")、[`ENUM`](enum.html
    "13.3.5 ENUM 类型") 和 [`SET`](set.html "13.3.6 SET 类型") 数据类型，您可以声明一个带有二进制 (`_bin`)
    校对或 `BINARY` 属性的列，以使比较和排序使用底层字符代码值而不是词法顺序。
- en: For additional information about use of character sets in MySQL, see [Chapter 12,
    *Character Sets, Collations, Unicode*](charset.html "Chapter 12 Character Sets,
    Collations, Unicode").
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 MySQL 中字符集使用的更多信息，请参阅 [第 12 章，*字符集、校对规则、Unicode*](charset.html "第 12 章 字符集、校对规则、Unicode")。
- en: '`[NATIONAL] CHAR[(*`M`*)] [CHARACTER SET *`charset_name`*] [COLLATE *`collation_name`*]`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[NATIONAL] CHAR[(*`M`*)] [CHARACTER SET *`charset_name`*] [COLLATE *`collation_name`*]`'
- en: A fixed-length string that is always right-padded with spaces to the specified
    length when stored. *`M`* represents the column length in characters. The range
    of *`M`* is 0 to 255\. If *`M`* is omitted, the length is 1.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 固定长度的字符串，在存储时总是用空格右填充到指定长度。*`M`*代表列长度（以字符为单位）。*`M`*的范围是0到255。如果省略*`M`*，长度为1。
- en: Note
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Trailing spaces are removed when [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types") values are retrieved unless the [`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)
    SQL mode is enabled.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检索[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")值时，尾随空格会被移除，除非启用了[`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)
    SQL模式。
- en: '[`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") is shorthand for [`CHARACTER`](char.html
    "13.3.2 The CHAR and VARCHAR Types"). [`NATIONAL CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") (or its equivalent short form, [`NCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types")) is the standard SQL way to define that a [`CHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types") column should use some predefined character
    set. MySQL uses `utf8mb3` as this predefined character set. [Section 12.3.7, “The
    National Character Set”](charset-national.html "12.3.7 The National Character
    Set").'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")是[`CHARACTER`](char.html "13.3.2 CHAR和VARCHAR类型")的简写。[`NATIONAL
    CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")（或其等效的简写形式，[`NCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")）是定义[`CHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")列应使用某个预定义字符集的标准SQL方式。MySQL使用`utf8mb3`作为这个预定义字符集。[第12.3.7节，“国家字符集”](charset-national.html
    "12.3.7 国家字符集")。'
- en: The [`CHAR BYTE`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types")
    data type is an alias for the [`BINARY`](binary-varbinary.html "13.3.3 The BINARY
    and VARBINARY Types") data type. This is a compatibility feature.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CHAR BYTE`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型")数据类型是[`BINARY`](binary-varbinary.html
    "13.3.3 BINARY和VARBINARY类型")数据类型的别名。这是一个兼容性特性。'
- en: 'MySQL permits you to create a column of type `CHAR(0)`. This is useful primarily
    when you must be compliant with old applications that depend on the existence
    of a column but that do not actually use its value. `CHAR(0)` is also quite nice
    when you need a column that can take only two values: A column that is defined
    as `CHAR(0) NULL` occupies only one bit and can take only the values `NULL` and
    `''''` (the empty string).'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL允许创建类型为`CHAR(0)`的列。这在必须符合依赖于列存在但实际上不使用其值的旧应用程序时非常有用。当您需要一个只能取两个值的列时，`CHAR(0)`也非常好：定义为`CHAR(0)
    NULL`的列仅占用一个位，并且只能取`NULL`和`''`（空字符串）这两个值。
- en: '`[NATIONAL] VARCHAR(*`M`*) [CHARACTER SET *`charset_name`*] [COLLATE *`collation_name`*]`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[NATIONAL] VARCHAR(*`M`*) [字符集 *`charset_name`*] [校对 *`collation_name`*]`'
- en: A variable-length string. *`M`* represents the maximum column length in characters.
    The range of *`M`* is 0 to 65,535\. The effective maximum length of a [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types") is subject to the maximum row size (65,535
    bytes, which is shared among all columns) and the character set used. For example,
    `utf8mb3` characters can require up to three bytes per character, so a [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types") column that uses the `utf8mb3` character
    set can be declared to be a maximum of 21,844 characters. See [Section 10.4.7,
    “Limits on Table Column Count and Row Size”](column-count-limit.html "10.4.7 Limits
    on Table Column Count and Row Size").
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可变长度字符串。*`M`*表示最大列长度（以字符为单位）。*`M`*的范围是0到65,535。[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")的有效最大长度取决于最大行大小（65,535字节，在所有列之间共享）和所使用的字符集。例如，`utf8mb3`字符可能每个字符需要最多三个字节，因此使用`utf8mb3`字符集的[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")列最大可以声明为21,844个字符。参见[第10.4.7节，“表列计数和行大小限制”](column-count-limit.html
    "10.4.7 表列计数和行大小限制")。
- en: MySQL stores [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") values
    as a 1-byte or 2-byte length prefix plus data. The length prefix indicates the
    number of bytes in the value. A [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types") column uses one length byte if values require no more than 255 bytes,
    two length bytes if values may require more than 255 bytes.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL将[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")值存储为1字节或2字节长度前缀加数据。长度前缀指示值中的字节数。如果值不超过255字节，则[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")列使用一个长度字节，如果值可能超过255字节，则使用两个长度字节。
- en: Note
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: MySQL follows the standard SQL specification, and does *not* remove trailing
    spaces from [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") values.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 遵循标准 SQL 规范，*不会*从 [`VARCHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型") 值中删除尾随空格。
- en: '[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") is shorthand for
    [`CHARACTER VARYING`](char.html "13.3.2 The CHAR and VARCHAR Types"). [`NATIONAL
    VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") is the standard SQL way
    to define that a [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") column
    should use some predefined character set. MySQL uses `utf8mb3` as this predefined
    character set. [Section 12.3.7, “The National Character Set”](charset-national.html
    "12.3.7 The National Character Set"). [`NVARCHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types") is shorthand for [`NATIONAL VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types").'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`VARCHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型") 是 [`CHARACTER VARYING`](char.html
    "13.3.2 CHAR 和 VARCHAR 类型") 的简写。[`NATIONAL VARCHAR`](char.html "13.3.2 CHAR 和
    VARCHAR 类型") 是定义 [`VARCHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型") 列应使用某个预定义字符集的标准
    SQL 方式。MySQL 使用 `utf8mb3` 作为这个预定义字符集。[第 12.3.7 节，“国家字符集”](charset-national.html
    "12.3.7 国家字符集")。[`NVARCHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型") 是 [`NATIONAL
    VARCHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型") 的简写。'
- en: '[`BINARY[(*`M`*)]`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY
    Types")'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BINARY[(*`M`*)]`](binary-varbinary.html "13.3.3 BINARY 和 VARBINARY 类型")'
- en: The [`BINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types")
    type is similar to the [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")
    type, but stores binary byte strings rather than nonbinary character strings.
    An optional length *`M`* represents the column length in bytes. If omitted, *`M`*
    defaults to 1.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`BINARY`](binary-varbinary.html "13.3.3 BINARY 和 VARBINARY 类型") 类型类似于 [`CHAR`](char.html
    "13.3.2 CHAR 和 VARCHAR 类型") 类型，但存储的是二进制字节字符串而不是非二进制字符字符串。可选长度 *`M`* 表示列长度（以字节为单位）。如果省略，*`M`*
    默认为 1。'
- en: '[`VARBINARY(*`M`*)`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY
    Types")'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`VARBINARY(*`M`*)`](binary-varbinary.html "13.3.3 BINARY 和 VARBINARY 类型")'
- en: The [`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types")
    type is similar to the [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")
    type, but stores binary byte strings rather than nonbinary character strings.
    *`M`* represents the maximum column length in bytes.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`VARBINARY`](binary-varbinary.html "13.3.3 BINARY 和 VARBINARY 类型") 类型类似于 [`VARCHAR`](char.html
    "13.3.2 CHAR 和 VARCHAR 类型") 类型，但存储的是二进制字节字符串而不是非二进制字符字符串。 *`M`* 表示最大列长度（以字节为单位）。'
- en: '[`TINYBLOB`](blob.html "13.3.4 The BLOB and TEXT Types")'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TINYBLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型")'
- en: A [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") column with a maximum
    length of 255 (2⁸ − 1) bytes. Each [`TINYBLOB`](blob.html "13.3.4 The BLOB and
    TEXT Types") value is stored using a 1-byte length prefix that indicates the number
    of bytes in the value.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最大长度为 255（2⁸ − 1）字节的 [`BLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型") 列。每个 [`TINYBLOB`](blob.html
    "13.3.4 BLOB 和 TEXT 类型") 值都使用一个 1 字节长度前缀来存储，指示值中的字节数。
- en: '[`TINYTEXT [CHARACTER SET *`charset_name`*] [COLLATE *`collation_name`*]`](blob.html
    "13.3.4 The BLOB and TEXT Types")'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TINYTEXT [字符集 *`charset_name`*] [校对 *`collation_name`*]`](blob.html "13.3.4 BLOB
    和 TEXT 类型")'
- en: A [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") column with a maximum
    length of 255 (2⁸ − 1) characters. The effective maximum length is less if the
    value contains multibyte characters. Each [`TINYTEXT`](blob.html "13.3.4 The BLOB
    and TEXT Types") value is stored using a 1-byte length prefix that indicates the
    number of bytes in the value.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最大长度为 255（2⁸ − 1）个字符的 [`TEXT`](blob.html "13.3.4 BLOB 和 TEXT 类型") 列。如果值包含多字节字符，则有效最大长度会减少。每个
    [`TINYTEXT`](blob.html "13.3.4 BLOB 和 TEXT 类型") 值都使用一个 1 字节长度前缀来存储，指示值中的字节数。
- en: '[`BLOB[(*`M`*)]`](blob.html "13.3.4 The BLOB and TEXT Types")'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BLOB[(*`M`*)]`](blob.html "13.3.4 BLOB 和 TEXT 类型")'
- en: A [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") column with a maximum
    length of 65,535 (2^(16) − 1) bytes. Each [`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types") value is stored using a 2-byte length prefix that indicates the
    number of bytes in the value.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最大长度为 65,535（2^(16) − 1）字节的 [`BLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型") 列。每个
    [`BLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型") 值都使用一个 2 字节长度前缀来存储，指示值中的字节数。
- en: An optional length *`M`* can be given for this type. If this is done, MySQL
    creates the column as the smallest [`BLOB`](blob.html "13.3.4 The BLOB and TEXT
    Types") type large enough to hold values *`M`* bytes long.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以为此类型指定可选长度 *`M`*。如果这样做，MySQL 将创建一个足以容纳 *`M`* 字节长值的最小 [`BLOB`](blob.html "13.3.4 BLOB
    和 TEXT 类型") 类型列。
- en: '[`TEXT[(*`M`*)] [CHARACTER SET *`charset_name`*] [COLLATE *`collation_name`*]`](blob.html
    "13.3.4 The BLOB and TEXT Types")'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TEXT[(*`M`*)] [字符集 *`charset_name`*] [校对 *`collation_name`*]`](blob.html
    "13.3.4 BLOB 和 TEXT 类型")'
- en: A [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") column with a maximum
    length of 65,535 (2^(16) − 1) characters. The effective maximum length is less
    if the value contains multibyte characters. Each [`TEXT`](blob.html "13.3.4 The
    BLOB and TEXT Types") value is stored using a 2-byte length prefix that indicates
    the number of bytes in the value.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个最大长度为65,535（2^(16) − 1）个字符的[`TEXT`](blob.html "13.3.4 BLOB 和 TEXT 类型")列。如果值包含多字节字符，则有效最大长度会更少。每个[`TEXT`](blob.html
    "13.3.4 BLOB 和 TEXT 类型")值都使用一个2字节长度前缀来指示值中的字节数。
- en: An optional length *`M`* can be given for this type. If this is done, MySQL
    creates the column as the smallest [`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types") type large enough to hold values *`M`* characters long.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以为此类型指定一个可选长度 *`M`*。如果这样做，MySQL会创建一个足以容纳 *`M`* 个字符长的最小[`TEXT`](blob.html "13.3.4 BLOB
    和 TEXT 类型")类型列。
- en: '[`MEDIUMBLOB`](blob.html "13.3.4 The BLOB and TEXT Types")'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MEDIUMBLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型")'
- en: A [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") column with a maximum
    length of 16,777,215 (2^(24) − 1) bytes. Each [`MEDIUMBLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") value is stored using a 3-byte length prefix that indicates
    the number of bytes in the value.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个最大长度为16,777,215（2^(24) − 1）字节的[`BLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型")列。每个[`MEDIUMBLOB`](blob.html
    "13.3.4 BLOB 和 TEXT 类型")值都使用一个3字节长度前缀来指示值中的字节数。
- en: '[`MEDIUMTEXT [CHARACTER SET *`charset_name`*] [COLLATE *`collation_name`*]`](blob.html
    "13.3.4 The BLOB and TEXT Types")'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MEDIUMTEXT [字符集 *`charset_name`*] [校对 *`collation_name`*]`](blob.html "13.3.4 BLOB
    和 TEXT 类型")'
- en: A [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") column with a maximum
    length of 16,777,215 (2^(24) − 1) characters. The effective maximum length is
    less if the value contains multibyte characters. Each [`MEDIUMTEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") value is stored using a 3-byte length prefix
    that indicates the number of bytes in the value.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个最大长度为16,777,215（2^(24) − 1）个字符的[`TEXT`](blob.html "13.3.4 BLOB 和 TEXT 类型")列。如果值包含多字节字符，则有效最大长度会更少。每个[`MEDIUMTEXT`](blob.html
    "13.3.4 BLOB 和 TEXT 类型")值都使用一个3字节长度前缀来指示值中的字节数。
- en: '[`LONGBLOB`](blob.html "13.3.4 The BLOB and TEXT Types")'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LONGBLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型")'
- en: A [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") column with a maximum
    length of 4,294,967,295 or 4GB (2^(32) − 1) bytes. The effective maximum length
    of [`LONGBLOB`](blob.html "13.3.4 The BLOB and TEXT Types") columns depends on
    the configured maximum packet size in the client/server protocol and available
    memory. Each [`LONGBLOB`](blob.html "13.3.4 The BLOB and TEXT Types") value is
    stored using a 4-byte length prefix that indicates the number of bytes in the
    value.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个最大长度为4,294,967,295或4GB（2^(32) − 1）字节的[`BLOB`](blob.html "13.3.4 BLOB 和 TEXT
    类型")列。[`LONGBLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型")列的有效最大长度取决于客户端/服务器协议中配置的最大数据包大小和可用内存。每个[`LONGBLOB`](blob.html
    "13.3.4 BLOB 和 TEXT 类型")值都使用一个4字节长度前缀来指示值中的字节数。
- en: '[`LONGTEXT [CHARACTER SET *`charset_name`*] [COLLATE *`collation_name`*]`](blob.html
    "13.3.4 The BLOB and TEXT Types")'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LONGTEXT [字符集 *`charset_name`*] [校对 *`collation_name`*]`](blob.html "13.3.4 BLOB
    和 TEXT 类型")'
- en: A [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") column with a maximum
    length of 4,294,967,295 or 4GB (2^(32) − 1) characters. The effective maximum
    length is less if the value contains multibyte characters. The effective maximum
    length of [`LONGTEXT`](blob.html "13.3.4 The BLOB and TEXT Types") columns also
    depends on the configured maximum packet size in the client/server protocol and
    available memory. Each [`LONGTEXT`](blob.html "13.3.4 The BLOB and TEXT Types")
    value is stored using a 4-byte length prefix that indicates the number of bytes
    in the value.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个最大长度为4,294,967,295或4GB（2^(32) − 1）个字符的[`TEXT`](blob.html "13.3.4 BLOB 和 TEXT
    类型")列。如果值包含多字节字符，则有效最大长度会更少。[`LONGTEXT`](blob.html "13.3.4 BLOB 和 TEXT 类型")列的有效最大长度还取决于客户端/服务器协议中配置的最大数据包大小和可用内存。每个[`LONGTEXT`](blob.html
    "13.3.4 BLOB 和 TEXT 类型")值都使用一个4字节长度前缀来指示值中的字节数。
- en: '[`ENUM(''*`value1`*'',''*`value2`*'',...) [CHARACTER SET *`charset_name`*]
    [COLLATE *`collation_name`*]`](enum.html "13.3.5 The ENUM Type")'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ENUM(''*`value1`*'',''*`value2`*'',...) [字符集 *`charset_name`*] [校对 *`collation_name`*]`](enum.html
    "13.3.5 ENUM 类型")'
- en: An enumeration. A string object that can have only one value, chosen from the
    list of values `'*`value1`*'`, `'*`value2`*'`, `...`, `NULL` or the special `''`
    error value. [`ENUM`](enum.html "13.3.5 The ENUM Type") values are represented
    internally as integers.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个枚举。一个字符串对象，只能有一个值，从值列表`'*`value1`*'`，`'*`value2`*'`，`...`，`NULL`或特殊的`''`错误值中选择。[`ENUM`](enum.html
    "13.3.5 ENUM类型")值在内部表示为整数。
- en: An [`ENUM`](enum.html "13.3.5 The ENUM Type") column can have a maximum of 65,535
    distinct elements.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ENUM`](enum.html "13.3.5 ENUM类型")列最多可以有65,535个不同元素。'
- en: The maximum supported length of an individual `ENUM` element is *`M`* <= 255
    and (*`M`* x *`w`*) <= 1020, where `M` is the element literal length and *`w`*
    is the number of bytes required for the maximum-length character in the character
    set.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单个`ENUM`元素的最大支持长度为*`M`* <= 255，且(*`M`* x *`w`*) <= 1020，其中`M`是元素文字长度，*`w`*是字符集中最大长度字符所需的字节数。
- en: '[`SET(''*`value1`*'',''*`value2`*'',...) [CHARACTER SET *`charset_name`*] [COLLATE
    *`collation_name`*]`](set.html "13.3.6 The SET Type")'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SET(''*`value1`*'',''*`value2`*'',...) [字符集 *`charset_name`*] [校对 *`collation_name`*]`](set.html
    "13.3.6 SET类型")'
- en: A set. A string object that can have zero or more values, each of which must
    be chosen from the list of values `'*`value1`*'`, `'*`value2`*'`, `...` [`SET`](set.html
    "13.3.6 The SET Type") values are represented internally as integers.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个集合。一个字符串对象，可以有零个或多个值，每个值必须从值列表`'*`value1`*'`，`'*`value2`*'`，`...` [`SET`](set.html
    "13.3.6 SET类型")中选择的值内部表示为整数。
- en: A [`SET`](set.html "13.3.6 The SET Type") column can have a maximum of 64 distinct
    members.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SET`](set.html "13.3.6 SET类型")列最多可以有64个不同成员。'
- en: The maximum supported length of an individual `SET` element is *`M`* <= 255
    and (*`M`* x *`w`*) <= 1020, where `M` is the element literal length and *`w`*
    is the number of bytes required for the maximum-length character in the character
    set.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单个`SET`元素的最大支持长度为*`M`* <= 255，且(*`M`* x *`w`*) <= 1020，其中`M`是元素文字长度，*`w`*是字符集中最大长度字符所需的字节数。
