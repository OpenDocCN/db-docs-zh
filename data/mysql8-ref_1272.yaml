- en: 17.18.2 InnoDB Recovery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.18.2 InnoDB 恢复
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-recovery.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-recovery.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-recovery.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-recovery.html)
- en: 'This section describes `InnoDB` recovery. Topics include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了`InnoDB`恢复。主题包括：
- en: '[Point-in-Time Recovery](innodb-recovery.html#innodb-recovery-point-in-time
    "Point-in-Time Recovery")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[时间点恢复](innodb-recovery.html#innodb-recovery-point-in-time "Point-in-Time Recovery")'
- en: '[Recovery from Data Corruption or Disk Failure](innodb-recovery.html#innodb-corruption-disk-failure-recovery
    "Recovery from Data Corruption or Disk Failure")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从数据损坏或磁盘故障中恢复](innodb-recovery.html#innodb-corruption-disk-failure-recovery
    "Recovery from Data Corruption or Disk Failure")'
- en: '[InnoDB Crash Recovery](innodb-recovery.html#innodb-crash-recovery "InnoDB
    Crash Recovery")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[InnoDB ��溃恢复](innodb-recovery.html#innodb-crash-recovery "InnoDB Crash Recovery")'
- en: '[Tablespace Discovery During Crash Recovery](innodb-recovery.html#innodb-recovery-tablespace-discovery
    "Tablespace Discovery During Crash Recovery")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[崩溃恢复中的表空间发现](innodb-recovery.html#innodb-recovery-tablespace-discovery "Tablespace
    Discovery During Crash Recovery")'
- en: Point-in-Time Recovery
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 时间点恢复
- en: To recover an `InnoDB` database to the present from the time at which the physical
    backup was made, you must run MySQL server with binary logging enabled, even before
    taking the backup. To achieve point-in-time recovery after restoring a backup,
    you can apply changes from the binary log that occurred after the backup was made.
    See [Section 9.5, “Point-in-Time (Incremental) Recovery”](point-in-time-recovery.html
    "9.5 Point-in-Time (Incremental) Recovery").
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`InnoDB`数据库从物理备份的时间恢复到当前状态，必须在进行备份之前启用 MySQL 服务器的二进制日志记录。在恢复备份后实现时间点恢复，可以应用在备份后发生的二进制日志更改。参见[第9.5节，“时间点（增量）恢复”](point-in-time-recovery.html
    "9.5 Point-in-Time (Incremental) Recovery")。
- en: Recovery from Data Corruption or Disk Failure
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从数据损坏或磁盘故障中恢复
- en: If your database becomes corrupted or disk failure occurs, you must perform
    the recovery using a backup. In the case of corruption, first find a backup that
    is not corrupted. After restoring the base backup, do a point-in-time recovery
    from the binary log files using [**mysqlbinlog**](mysqlbinlog.html "6.6.9 mysqlbinlog
    — Utility for Processing Binary Log Files") and [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") to restore the changes that occurred after the
    backup was made.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的数据库损坏或磁盘故障发生，您必须使用备份执行恢复。在损坏的情况下，首先找到一个没有损坏的备份。恢复基本备份后，使用[**mysqlbinlog**](mysqlbinlog.html
    "6.6.9 mysqlbinlog — Utility for Processing Binary Log Files")和[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")从二进制日志文件中执行时间点恢复，以恢复备份后发生的更改。
- en: In some cases of database corruption, it is enough to dump, drop, and re-create
    one or a few corrupt tables. You can use the [`CHECK TABLE`](check-table.html
    "15.7.3.2 CHECK TABLE Statement") statement to check whether a table is corrupt,
    although [`CHECK TABLE`](check-table.html "15.7.3.2 CHECK TABLE Statement") naturally
    cannot detect every possible kind of corruption.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些数据库损坏的情况下，只需转储、删除和重新创建一个或几个损坏的表即可。您可以使用[`CHECK TABLE`](check-table.html "15.7.3.2 CHECK
    TABLE Statement")语句来检查表是否损坏，尽管[`CHECK TABLE`](check-table.html "15.7.3.2 CHECK
    TABLE Statement")自然无法检测到每种可能的损坏。
- en: In some cases, apparent database page corruption is actually due to the operating
    system corrupting its own file cache, and the data on disk may be okay. It is
    best to try restarting the computer first. Doing so may eliminate errors that
    appeared to be database page corruption. If MySQL still has trouble starting because
    of `InnoDB` consistency problems, see [Section 17.21.3, “Forcing InnoDB Recovery”](forcing-innodb-recovery.html
    "17.21.3 Forcing InnoDB Recovery") for steps to start the instance in recovery
    mode, which permits you to dump the data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，表面上的数据库页损坏实际上是由于操作系统损坏了自己的文件缓存，磁盘上的数据可能是正常的。最好先尝试重新启动计算机。这样做可能会消除看起来是数据库页损坏的错误。如果
    MySQL 由于`InnoDB`一致性问题而仍然无法启动，请参见[第17.21.3节，“强制 InnoDB 恢复”](forcing-innodb-recovery.html
    "17.21.3 Forcing InnoDB Recovery")，了解在恢复模式下启动实例的步骤，这样可以让您转储数据。
- en: InnoDB Crash Recovery
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: InnoDB 崩溃恢复
- en: To recover from an unexpected MySQL server exit, the only requirement is to
    restart the MySQL server. `InnoDB` automatically checks the logs and performs
    a roll-forward of the database to the present. `InnoDB` automatically rolls back
    uncommitted transactions that were present at the time of the crash.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要从意外的 MySQL 服务器退出中恢复，唯一的要求是重新启动 MySQL 服务器。`InnoDB`会自动检查日志并将数据库回滚到当前状态。`InnoDB`会自动回滚在崩溃时存在的未提交事务。
- en: '`InnoDB` [crash recovery](glossary.html#glos_crash_recovery "crash recovery")
    consists of several steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` [崩溃恢复](glossary.html#glos_crash_recovery "crash recovery")包括几个步骤：'
- en: Tablespace discovery
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表空间发现
- en: Tablespace discovery is the process that `InnoDB` uses to identify tablespaces
    that require redo log application. See [Tablespace Discovery During Crash Recovery](innodb-recovery.html#innodb-recovery-tablespace-discovery
    "Tablespace Discovery During Crash Recovery").
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表空间发现是`InnoDB`用来识别需要重做日志应用的表空间的过程。请参阅[崩溃恢复期间的表空间发现](innodb-recovery.html#innodb-recovery-tablespace-discovery
    "Tablespace Discovery During Crash Recovery")。
- en: '[Redo log](glossary.html#glos_redo_log "redo log") application'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[重做日志](glossary.html#glos_redo_log "redo log")应用'
- en: Redo log application is performed during initialization, before accepting any
    connections. If all changes are flushed from the [buffer pool](glossary.html#glos_buffer_pool
    "buffer pool") to the [tablespaces](glossary.html#glos_tablespace "tablespace")
    (`ibdata*` and `*.ibd` files) at the time of the shutdown or crash, redo log application
    is skipped. `InnoDB` also skips redo log application if redo log files are missing
    at startup.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重做日志应用是在初始化期间执行的，在接受任何连接之前。如果在关闭或崩溃时从[缓冲池](glossary.html#glos_buffer_pool "buffer
    pool")中的所有更改都被刷新到[表空间](glossary.html#glos_tablespace "tablespace")（`ibdata*`和`*.ibd`文件），则会跳过重做日志应用。如果在启动时重做日志文件丢失，`InnoDB`也会跳过重做日志应用。
- en: The current maximum auto-increment counter value is written to the redo log
    each time the value changes, which makes it crash-safe. During recovery, `InnoDB`
    scans the redo log to collect counter value changes and applies the changes to
    the in-memory table object.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次自增计数器值发生变化时，当前最大自增计数器值都会被写入重做日志，使其具有崩溃安全性。在恢复过程中，`InnoDB`会扫描重做日志以收集计数器值的变化，并将这些变化应用于内存中的表对象。
- en: For more information about how `InnoDB` handles auto-increment values, see [Section 17.6.1.6,
    “AUTO_INCREMENT Handling in InnoDB”](innodb-auto-increment-handling.html "17.6.1.6 AUTO_INCREMENT
    Handling in InnoDB"), and [InnoDB AUTO_INCREMENT Counter Initialization](innodb-auto-increment-handling.html#innodb-auto-increment-initialization
    "InnoDB AUTO_INCREMENT Counter Initialization").
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关`InnoDB`如何处理自增值的更多信息，请参阅[第17.6.1.6节，“InnoDB中的AUTO_INCREMENT处理”](innodb-auto-increment-handling.html
    "17.6.1.6 AUTO_INCREMENT Handling in InnoDB")，以及[InnoDB AUTO_INCREMENT计数器初始化](innodb-auto-increment-handling.html#innodb-auto-increment-initialization
    "InnoDB AUTO_INCREMENT Counter Initialization")。
- en: When encountering index tree corruption, `InnoDB` writes a corruption flag to
    the redo log, which makes the corruption flag crash-safe. `InnoDB` also writes
    in-memory corruption flag data to an engine-private system table on each checkpoint.
    During recovery, `InnoDB` reads corruption flags from both locations and merges
    results before marking in-memory table and index objects as corrupt.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当遇到索引树损坏时，`InnoDB`会将一个损坏标志写入重做日志，使得损坏标志具有崩溃安全性。`InnoDB`还会在每次检查点时将内存中的损坏标志数据写入引擎私有系统表中。在恢复过程中，`InnoDB`会从两个位置读取损坏标志，并在标记内存表和索引对象为损坏之前合并结果。
- en: Removing redo logs to speed up recovery is not recommended, even if some data
    loss is acceptable. Removing redo logs should only be considered after a clean
    shutdown, with [`innodb_fast_shutdown`](innodb-parameters.html#sysvar_innodb_fast_shutdown)
    set to `0` or `1`.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不建议删除重做日志以加快恢复速度，即使可以接受一些数据丢失。只有在干净关闭后，将[`innodb_fast_shutdown`](innodb-parameters.html#sysvar_innodb_fast_shutdown)设置为`0`或`1`后才应考虑删除重做日志。
- en: '[Roll back](glossary.html#glos_rollback "rollback") of incomplete [transactions](glossary.html#glos_transaction
    "transaction")'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[回滚](glossary.html#glos_rollback "rollback")未完成的[事务](glossary.html#glos_transaction
    "transaction")'
- en: Incomplete transactions are any transactions that were active at the time of
    unexpected exit or [fast shutdown](glossary.html#glos_fast_shutdown "fast shutdown").
    The time it takes to roll back an incomplete transaction can be three or four
    times the amount of time a transaction is active before it is interrupted, depending
    on server load.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 未完成的事务是在意外退出或[快速关闭](glossary.html#glos_fast_shutdown "fast shutdown")时处于活动状态的任何事务。回滚未完成事务所需的时间可能是事务被中断前活动时间的三到四倍，取决于服务器负载。
- en: You cannot cancel transactions that are being rolled back. In extreme cases,
    when rolling back transactions is expected to take an exceptionally long time,
    it may be faster to start `InnoDB` with an [`innodb_force_recovery`](innodb-parameters.html#sysvar_innodb_force_recovery)
    setting of `3` or greater. See [Section 17.21.3, “Forcing InnoDB Recovery”](forcing-innodb-recovery.html
    "17.21.3 Forcing InnoDB Recovery").
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无法取消正在回滚的事务。在极端情况下，当预计回滚事务需要花费异常长的时间时，通过使用设置为`3`或更高的[`innodb_force_recovery`](innodb-parameters.html#sysvar_innodb_force_recovery)选项启动`InnoDB`可能更快。请参阅[第17.21.3节，“强制InnoDB恢复”](forcing-innodb-recovery.html
    "17.21.3 强制InnoDB恢复")。
- en: '[Change buffer](glossary.html#glos_change_buffer "change buffer") merge'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更改缓冲区](glossary.html#glos_change_buffer "更改缓冲区")合并'
- en: Applying changes from the change buffer (part of the [system tablespace](glossary.html#glos_system_tablespace
    "system tablespace")) to leaf pages of secondary indexes, as the index pages are
    read to the buffer pool.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将更改缓冲区（系统表空间的一部分）中的更改应用到辅助索引的叶页，因为索引页被读取到缓冲池中。
- en: '[Purge](glossary.html#glos_purge "purge")'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[清理](glossary.html#glos_purge "清理")'
- en: Deleting delete-marked records that are no longer visible to active transactions.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除对活动事务不再可见的已标记删除记录。
- en: The steps that follow redo log application do not depend on the redo log (other
    than for logging the writes) and are performed in parallel with normal processing.
    Of these, only rollback of incomplete transactions is special to crash recovery.
    The insert buffer merge and the purge are performed during normal processing.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在重做日志应用后的步骤不依赖于重做日志（除了用于记录写入），并与正常处理并行执行。其中，只有不完整事务的回滚对于崩溃恢复是特殊的。插入缓冲区合并和清理是在正常处理期间执行的。
- en: After redo log application, `InnoDB` attempts to accept connections as early
    as possible, to reduce downtime. As part of crash recovery, `InnoDB` rolls back
    transactions that were not committed or in `XA PREPARE` state when the server
    exited. The rollback is performed by a background thread, executed in parallel
    with transactions from new connections. Until the rollback operation is completed,
    new connections may encounter locking conflicts with recovered transactions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在重做日志应用之后，`InnoDB`尽早尝试接受连接，以减少停机时间。作为崩溃恢复的一部分，`InnoDB`回滚了在服务器退出时未提交或处于`XA PREPARE`状态的事务。回滚由后台线程执行，并与新连接的事务并行执行。在回滚操作完成之前，新连接可能会与恢复的事务发生锁定冲突。
- en: In most situations, even if the MySQL server was killed unexpectedly in the
    middle of heavy activity, the recovery process happens automatically and no action
    is required of the DBA. If a hardware failure or severe system error corrupted
    `InnoDB` data, MySQL might refuse to start. In this case, see [Section 17.21.3,
    “Forcing InnoDB Recovery”](forcing-innodb-recovery.html "17.21.3 Forcing InnoDB
    Recovery").
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，即使MySQL服务器在繁忙活动中意外关闭，恢复过程会自动发生，DBA不需要采取任何行动。如果硬件故障或严重系统错误损坏了`InnoDB`数据，MySQL可能会拒绝启动。在这种情况下，请参阅[第17.21.3节，“强制InnoDB恢复”](forcing-innodb-recovery.html
    "17.21.3 强制InnoDB恢复")。
- en: For information about the binary log and `InnoDB` crash recovery, see [Section 7.4.4,
    “The Binary Log”](binary-log.html "7.4.4 The Binary Log").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关二进制日志和`InnoDB`崩溃恢复的信息，请参阅[第7.4.4节，“二进制日志”](binary-log.html "7.4.4 二进制日志")。
- en: Tablespace Discovery During Crash Recovery
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在崩溃恢复期间的表空间发现
- en: If, during recovery, `InnoDB` encounters redo logs written since the last checkpoint,
    the redo logs must be applied to affected tablespaces. The process that identifies
    affected tablespaces during recovery is referred to as *tablespace discovery*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在恢复过程中，`InnoDB`遇到自上次检查点以来写入的重做日志，则必须将重做日志应用于受影响的表空间。在恢复期间识别受影响表空间的过程称为*表空间发现*。
- en: Tablespace discovery relies on the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    setting, which defines the directories to scan at startup for tablespace files.
    The [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories) default
    setting is NULL, but the directories defined by [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir),
    [`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory),
    and [`datadir`](server-system-variables.html#sysvar_datadir) are always appended
    to the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    argument value when InnoDB builds a list of directories to scan at startup. These
    directories are appended regardless of whether an [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    setting is specified explicitly. Tablespace files defined with an absolute path
    or that reside outside of the directories appended to the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    setting should be added to the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    setting. Recovery is terminated if any tablespace file referenced in a redo log
    has not been discovered previously.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 表空间发现依赖于[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)设置，该设置定义了在启动时扫描表空间文件的目录。[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)的默认设置为NULL，但在InnoDB构建启动时要扫描的目录列表时，始终会将由[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)、[`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)和[`datadir`](server-system-variables.html#sysvar_datadir)定义的目录附加到[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)参数值上。这些目录会被附加，无论是否明确指定了[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)设置。如果在重做日志中引用的任何表空间文件之前未发现，恢复将终止。
