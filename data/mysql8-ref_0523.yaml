- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/outer-join-simplification.html](https://dev.mysql.com/doc/refman/8.0/en/outer-join-simplification.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/outer-join-simplification.html](https://dev.mysql.com/doc/refman/8.0/en/outer-join-simplification.html)
- en: 10.2.1.10 Outer Join Simplification
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.2.1.10 外连接简化
- en: Table expressions in the `FROM` clause of a query are simplified in many cases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 查询的`FROM`子句中的表达式在许多情况下被简化。
- en: 'At the parser stage, queries with right outer join operations are converted
    to equivalent queries containing only left join operations. In the general case,
    the conversion is performed such that this right join:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在解析器阶段，具有右外连接操作的查询被转换为仅包含左连接操作的等效查询。在一般情况下，转换是这样执行的，即这个右连接：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Becomes this equivalent left join:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 变成这个等效的左连接：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All inner join expressions of the form `T1 INNER JOIN T2 ON P(T1,T2)` are replaced
    by the list `T1,T2`, `P(T1,T2)` being joined as a conjunct to the `WHERE` condition
    (or to the join condition of the embedding join, if there is any).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所有形式为`T1 INNER JOIN T2 ON P(T1,T2)`的内连接表达式都被替换为列表`T1,T2`，`P(T1,T2)`作为`WHERE`条件的一个连接被连接（或者连接的连接条件，如果有的话）。
- en: When the optimizer evaluates plans for outer join operations, it takes into
    consideration only plans where, for each such operation, the outer tables are
    accessed before the inner tables. The optimizer choices are limited because only
    such plans enable outer joins to be executed using the nested-loop algorithm.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当优化器评估外连接操作的计划时，它只考虑那些在每个这样的操作中，外部表在内部表之前被访问的计划。优化器的选择是有限的，因为只有这样的计划才能使用嵌套循环算法执行外连接。
- en: 'Consider a query of this form, where `R(T2)` greatly narrows the number of
    matching rows from table `T2`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这种形式的查询，其中`R(T2)`大大缩小了与表`T2`匹配行的数量：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If the query is executed as written, the optimizer has no choice but to access
    the less-restricted table `T1` before the more-restricted table `T2`, which may
    produce a very inefficient execution plan.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按照原样执行查询，优化器别无选择，只能在访问受限制较少的表`T1`之前访问受限制较多的表`T2`，这可能会产生一个非常低效的执行计划。
- en: Instead, MySQL converts the query to a query with no outer join operation if
    the `WHERE` condition is null-rejected. (That is, it converts the outer join to
    an inner join.) A condition is said to be null-rejected for an outer join operation
    if it evaluates to `FALSE` or `UNKNOWN` for any `NULL`-complemented row generated
    for the operation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果`WHERE`条件被外连接操作拒绝，MySQL会将查询转换为不包含外连接操作的查询。（也就是说，它将外连接转换为内连接。）如果条件对于为操作生成的任何`NULL`-补充行求值为`FALSE`或`UNKNOWN`，则称条件对于外连接操作被拒绝。
- en: 'Thus, for this outer join:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于这个外连接：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Conditions such as these are null-rejected because they cannot be true for
    any `NULL`-complemented row (with `T2` columns set to `NULL`):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如这些条件之类的条件被拒绝，因为它们对于任何`NULL`-补充行（`T2`列设置为`NULL`）都不可能为真：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Conditions such as these are not null-rejected because they might be true for
    a `NULL`-complemented row:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如这些条件之类的条件不被拒绝，因为它们可能对于一个`NULL`-补充行为真：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The general rules for checking whether a condition is null-rejected for an
    outer join operation are simple:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 检查条件是否被外连接操作拒绝的一般规则很简单：
- en: It is of the form `A IS NOT NULL`, where `A` is an attribute of any of the inner
    tables
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的形式是`A IS NOT NULL`，其中`A`是任何内部表的属性
- en: It is a predicate containing a reference to an inner table that evaluates to
    `UNKNOWN` when one of its arguments is `NULL`
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个包含对内部表的引用的谓词，当其参数之一为`NULL`时求值为`UNKNOWN`
- en: It is a conjunction containing a null-rejected condition as a conjunct
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个包含被拒绝条件的合取作为一个连接
- en: It is a disjunction of null-rejected conditions
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个被拒绝的条件的析取
- en: 'A condition can be null-rejected for one outer join operation in a query and
    not null-rejected for another. In this query, the `WHERE` condition is null-rejected
    for the second outer join operation but is not null-rejected for the first one:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个条件可以被一个查询中的一个外连接操作拒绝，但对另一个查询中的另一个外连接操作不被拒绝。在这个查询中，`WHERE`条件对于第二个外连接操作被拒绝，但对于第一个外连接操作不被拒绝：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the `WHERE` condition is null-rejected for an outer join operation in a query,
    the outer join operation is replaced by an inner join operation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`WHERE`条件在查询中被外连接操作拒绝，外连接操作将被替换为内连接操作。
- en: 'For example, in the preceding query, the second outer join is null-rejected
    and can be replaced by an inner join:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在前面的查询中，第二个外连接被空拒绝，可以被内连接替换：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For the original query, the optimizer evaluates only plans compatible with the
    single table-access order `T1,T2,T3`. For the rewritten query, it additionally
    considers the access order `T3,T1,T2`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于原始查询，优化器仅评估与单表访问顺序`T1，T2，T3`兼容的计划。对于重写后的查询，它还考虑了访问顺序`T3，T1，T2`。
- en: 'A conversion of one outer join operation may trigger a conversion of another.
    Thus, the query:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个外连接操作的转换可能会触发另一个的转换。因此，查询：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Is first converted to the query:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先被转换为查询：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Which is equivalent to the query:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于查询：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The remaining outer join operation can also be replaced by an inner join because
    the condition `T3.B=T2.B` is null-rejected. This results in a query with no outer
    joins at all:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的外连接操作也可以被内连接替换，因为条件`T3.B=T2.B`被拒绝为空。这导致一个没有任何外连接的查询：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Sometimes the optimizer succeeds in replacing an embedded outer join operation,
    but cannot convert the embedding outer join. The following query:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有时优化器成功地替换了嵌套的外连接操作，但无法转换嵌套外连接。以下查询：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Is converted to:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 被转换为：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'That can be rewritten only to the form still containing the embedding outer
    join operation:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 只能被重写为仍然包含嵌套外连接操作的形式：
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Any attempt to convert an embedded outer join operation in a query must take
    into account the join condition for the embedding outer join together with the
    `WHERE` condition. In this query, the `WHERE` condition is not null-rejected for
    the embedded outer join, but the join condition of the embedding outer join `T2.A=T1.A
    AND T3.C=T1.C` is null-rejected:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 任何尝试将查询中的嵌套外连接操作转换必须考虑嵌套外连接的连接条件以及`WHERE`条件。在这个查询中，`WHERE`条件对于嵌套外连接不被拒绝为空，但是嵌套外连接的连接条件`T2.A=T1.A
    AND T3.C=T1.C`被拒绝为空：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Consequently, the query can be converted to:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，查询可以转换为：
- en: '[PRE16]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
