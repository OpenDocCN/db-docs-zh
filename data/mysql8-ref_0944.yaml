- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/insert-select.html](https://dev.mysql.com/doc/refman/8.0/en/insert-select.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/insert-select.html](https://dev.mysql.com/doc/refman/8.0/en/insert-select.html)
- en: 15.2.7.1 INSERT ... SELECT Statement
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.2.7.1 INSERT ... SELECT Statement
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With [`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement"),
    you can quickly insert many rows into a table from the result of a [`SELECT`](select.html
    "15.2.13 SELECT Statement") statement, which can select from one or many tables.
    For example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement")，你可以快速地从
    [`SELECT`](select.html "15.2.13 SELECT Statement") 语句的结果中向表中插入许多行，该语句可以从一个或多个表中选择。例如：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Beginning with MySQL 8.0.19, you can use a [`TABLE`](table.html "15.2.16 TABLE
    Statement") statement in place of [`SELECT`](select.html "15.2.13 SELECT Statement"),
    as shown here:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.19 开始，你可以使用 [`TABLE`](table.html "15.2.16 TABLE Statement") 语句代替
    [`SELECT`](select.html "15.2.13 SELECT Statement")，如下所示：
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`TABLE tb` is equivalent to `SELECT * FROM tb`. It can be useful when inserting
    all columns from the source table into the target table, and no filtering with
    WHERE is required. In addition, the rows from [`TABLE`](table.html "15.2.16 TABLE
    Statement") can be ordered by one or more columns using `ORDER BY`, and the number
    of rows inserted can be limited using a `LIMIT` clause. For more information,
    see [Section 15.2.16, “TABLE Statement”](table.html "15.2.16 TABLE Statement").'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`TABLE tb` 等同于 `SELECT * FROM tb`。当需要将源表中的所有列插入目标表，并且不需要使用 WHERE 进行过滤时，这可能很有用。此外，可以使用
    `ORDER BY` 按一个或多个列对 [`TABLE`](table.html "15.2.16 TABLE Statement") 中的行进行排序，并且可以使用
    `LIMIT` 子句限制插入的行数。更多信息，请参见 [Section 15.2.16, “TABLE Statement”](table.html "15.2.16 TABLE
    Statement")。'
- en: 'The following conditions hold for [`INSERT ... SELECT`](insert-select.html
    "15.2.7.1 INSERT ... SELECT Statement") statements, and, except where noted, for
    `INSERT ... TABLE` as well:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement")
    语句遵循以下条件，并且除非另有说明，也适用于 `INSERT ... TABLE`：'
- en: Specify `IGNORE` to ignore rows that would cause duplicate-key violations.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定 `IGNORE` 来忽略可能导致重复键违规的行。
- en: The target table of the [`INSERT`](insert.html "15.2.7 INSERT Statement") statement
    may appear in the `FROM` clause of the [`SELECT`](select.html "15.2.13 SELECT
    Statement") part of the query, or as the table named by [`TABLE`](table.html "15.2.16 TABLE
    Statement"). However, you cannot insert into a table and select from the same
    table in a subquery.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INSERT`](insert.html "15.2.7 INSERT Statement") 语句的目标表可以出现在查询的 [`SELECT`](select.html
    "15.2.13 SELECT Statement") 部分的 `FROM` 子句中，或者作为由 [`TABLE`](table.html "15.2.16 TABLE
    Statement") 命名的表。但是，在子查询中不能插入到同一表并从同一表中选择。'
- en: When selecting from and inserting into the same table, MySQL creates an internal
    temporary table to hold the rows from the [`SELECT`](select.html "15.2.13 SELECT
    Statement") and then inserts those rows into the target table. However, you cannot
    use `INSERT INTO t ... SELECT ... FROM t` when `t` is a `TEMPORARY` table, because
    `TEMPORARY` tables cannot be referred to twice in the same statement. For the
    same reason, you cannot use `INSERT INTO t ... TABLE t` when `t` is a temporary
    table. See [Section 10.4.4, “Internal Temporary Table Use in MySQL”](internal-temporary-tables.html
    "10.4.4 Internal Temporary Table Use in MySQL"), and [Section B.3.6.2, “TEMPORARY
    Table Problems”](temporary-table-problems.html "B.3.6.2 TEMPORARY Table Problems").
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从同一表中选择并插入时，MySQL 会创建一个内部临时表来保存 [`SELECT`](select.html "15.2.13 SELECT Statement")
    中的行，然后将这些行插入目标表。但是，当 `t` 是一个 `TEMPORARY` 表时，你不能使用 `INSERT INTO t ... SELECT ...
    FROM t`，因为 `TEMPORARY` 表在同一语句中不能被引用两次。出于同样的原因，当 `t` 是一个临时表时，你也不能使用 `INSERT INTO
    t ... TABLE t`。请参见 [Section 10.4.4, “Internal Temporary Table Use in MySQL”](internal-temporary-tables.html
    "10.4.4 Internal Temporary Table Use in MySQL")，以及 [Section B.3.6.2, “TEMPORARY
    Table Problems”](temporary-table-problems.html "B.3.6.2 TEMPORARY Table Problems")。
- en: '`AUTO_INCREMENT` columns work as usual.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTO_INCREMENT` 列的工作方式与往常一样。'
- en: To ensure that the binary log can be used to re-create the original tables,
    MySQL does not permit concurrent inserts for [`INSERT ... SELECT`](insert-select.html
    "15.2.7.1 INSERT ... SELECT Statement") or `INSERT ... TABLE` statements (see
    [Section 10.11.3, “Concurrent Inserts”](concurrent-inserts.html "10.11.3 Concurrent
    Inserts")).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了确保二进制日志可以用于重新创建原始表，MySQL 不允许对 [`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT
    ... SELECT Statement") 或 `INSERT ... TABLE` 语句进行并发插入（参见 [Section 10.11.3, “Concurrent
    Inserts”](concurrent-inserts.html "10.11.3 Concurrent Inserts")）。
- en: To avoid ambiguous column reference problems when the [`SELECT`](select.html
    "15.2.13 SELECT Statement") and the [`INSERT`](insert.html "15.2.7 INSERT Statement")
    refer to the same table, provide a unique alias for each table used in the [`SELECT`](select.html
    "15.2.13 SELECT Statement") part, and qualify column names in that part with the
    appropriate alias.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了避免在[`SELECT`](select.html "15.2.13 SELECT Statement")和[`INSERT`](insert.html
    "15.2.7 INSERT Statement")引用相同表时出现模糊的列引用问题，请为[`SELECT`](select.html "15.2.13 SELECT
    Statement")部分中使用的每个表提供唯一别名，并在该部分中使用适当的别名限定列名。
- en: The [`TABLE`](table.html "15.2.16 TABLE Statement") statement does not support
    aliases.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TABLE`](table.html "15.2.16 TABLE Statement")语句不支持别名。'
- en: You can explicitly select which partitions or subpartitions (or both) of the
    source or target table (or both) are to be used with a `PARTITION` clause following
    the name of the table. When `PARTITION` is used with the name of the source table
    in the [`SELECT`](select.html "15.2.13 SELECT Statement") portion of the statement,
    rows are selected only from the partitions or subpartitions named in its partition
    list. When `PARTITION` is used with the name of the target table for the [`INSERT`](insert.html
    "15.2.7 INSERT Statement") portion of the statement, it must be possible to insert
    all rows selected into the partitions or subpartitions named in the partition
    list following the option. Otherwise, the `INSERT ... SELECT` statement fails.
    For more information and examples, see [Section 26.5, “Partition Selection”](partitioning-selection.html
    "26.5 Partition Selection").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以明确选择要使用`PARTITION`子句的源表或目标表（或两者）的哪些分区或子分区（或两者）。当`PARTITION`与语句的[`SELECT`](select.html
    "15.2.13 SELECT Statement")部分中的源表名称一起使用时，仅从其分区列表中命名的分区或子分区中选择行。当`PARTITION`与语句的[`INSERT`](insert.html
    "15.2.7 INSERT Statement")部分的目标表名称一起使用时，必须能够将所有选定的行插入到分区列表后面命名的分区或子分区中。否则，`INSERT
    ... SELECT`语句将失败。有关更多信息和示例，请参阅[Section 26.5, “Partition Selection”](partitioning-selection.html
    "26.5 Partition Selection")。
- en: '[`TABLE`](table.html "15.2.16 TABLE Statement") does not support a `PARTITION`
    clause.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TABLE`](table.html "15.2.16 TABLE Statement")不支持`PARTITION`子句。'
- en: For [`INSERT ... SELECT`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE
    KEY UPDATE Statement") statements, see [Section 15.2.7.2, “INSERT ... ON DUPLICATE
    KEY UPDATE Statement”](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE
    KEY UPDATE Statement") for conditions under which the [`SELECT`](select.html "15.2.13 SELECT
    Statement") columns can be referred to in an `ON DUPLICATE KEY UPDATE` clause.
    This also works for `INSERT ... TABLE`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`INSERT ... SELECT`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE
    KEY UPDATE Statement")语句，请参阅[Section 15.2.7.2, “INSERT ... ON DUPLICATE KEY UPDATE
    Statement”](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE
    Statement")，了解在`ON DUPLICATE KEY UPDATE`子句中可以引用[`SELECT`](select.html "15.2.13 SELECT
    Statement")列的条件。这也适用于`INSERT ... TABLE`。
- en: The order in which a [`SELECT`](select.html "15.2.13 SELECT Statement") or [`TABLE`](table.html
    "15.2.16 TABLE Statement") statement with no `ORDER BY` clause returns rows is
    nondeterministic. This means that, when using replication, there is no guarantee
    that such a [`SELECT`](select.html "15.2.13 SELECT Statement") returns rows in
    the same order on the source and the replica, which can lead to inconsistencies
    between them. To prevent this from occurring, always write `INSERT ... SELECT`
    or `INSERT ... TABLE` statements that are to be replicated using an `ORDER BY`
    clause that produces the same row order on the source and the replica. See also
    [Section 19.5.1.18, “Replication and LIMIT”](replication-features-limit.html "19.5.1.18 Replication
    and LIMIT").
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有`ORDER BY`子句的[`SELECT`](select.html "15.2.13 SELECT Statement")或[`TABLE`](table.html
    "15.2.16 TABLE Statement")语句返回行时，返回行的顺序是不确定的。这意味着，在使用复制时，不能保证这样的[`SELECT`](select.html
    "15.2.13 SELECT Statement")在源和副本上以相同的顺序返回行，这可能导致它们之间的不一致。为了防止这种情况发生，始终编写要使用`ORDER
    BY`子句进行复制的`INSERT ... SELECT`或`INSERT ... TABLE`语句，以在源和副本上产生相同的行顺序。另请参阅[Section 19.5.1.18,
    “Replication and LIMIT”](replication-features-limit.html "19.5.1.18 Replication
    and LIMIT")。
- en: 'Due to this issue, [`INSERT ... SELECT ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement") and [`INSERT IGNORE ...
    SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement") statements
    are flagged as unsafe for statement-based replication. Such statements produce
    a warning in the error log when using statement-based mode and are written to
    the binary log using the row-based format when using `MIXED` mode. (Bug #11758262,
    Bug #50439)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '由于这个问题，[`INSERT ... SELECT ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE 语句") 和 [`INSERT IGNORE ... SELECT`](insert-select.html
    "15.2.7.1 INSERT ... SELECT 语句") 语句被标记为基于语句的复制不安全。在使用基于语句模式时，这些语句会在错误日志中产生警告，并在使用`MIXED`模式时以基于行的格式写入二进制日志。（Bug
    #11758262, Bug #50439）'
- en: See also [Section 19.2.1.1, “Advantages and Disadvantages of Statement-Based
    and Row-Based Replication”](replication-sbr-rbr.html "19.2.1.1 Advantages and
    Disadvantages of Statement-Based and Row-Based Replication").
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Section 19.2.1.1, “基于语句和基于行的复制的优缺点”](replication-sbr-rbr.html "19.2.1.1 基于语句和基于行的复制的优缺点")。
