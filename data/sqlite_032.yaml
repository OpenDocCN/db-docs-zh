- en: 1\. Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 概述
- en: 原文：[https://sqlite.com/loadext.html](https://sqlite.com/loadext.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/loadext.html](https://sqlite.com/loadext.html)
- en: SQLite has the ability to load extensions (including new [application-defined
    SQL functions](appfunc.html), [collating sequences](datatype3.html#collation),
    [virtual tables](vtab.html), and [VFSes](vfs.html)) at run-time. This feature
    allows the code for extensions to be developed and tested separately from the
    application and then loaded on an as-needed basis.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 具备在运行时加载扩展（包括新的 [应用程序定义的 SQL 函数](appfunc.html)，[排序序列](datatype3.html#collation)，[虚拟表](vtab.html)
    和 [VFSes](vfs.html)）的能力。这个特性允许扩展的代码可以独立于应用程序进行开发和测试，然后在需要时进行加载。
- en: Extensions can also be statically linked with the application. The code template
    shown below will work just as well as a statically linked extension as it does
    as a run-time loadable extension except that you should give the entry point function
    ("sqlite3_extension_init") a different name to avoid name collisions if your application
    contains two or more extensions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展也可以与应用程序静态链接。下面展示的代码模板既可以作为静态链接的扩展使用，也可以作为运行时可加载的扩展使用，只是如果你的应用程序包含两个或更多扩展，应该给入口函数
    ("sqlite3_extension_init") 起一个不同的名称，以避免名称冲突。
- en: 2\. Loading An Extension
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 加载扩展
- en: An SQLite extension is a shared library or DLL. To load it, you need to supply
    SQLite with the name of the file containing the shared library or DLL and an entry
    point to initialize the extension. In C code, this information is supplied using
    the [sqlite3_load_extension()](c3ref/load_extension.html) API. See the documentation
    on that routine for additional information.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 扩展是一个共享库或 DLL。要加载它，需要向 SQLite 提供包含共享库或 DLL 的文件名以及初始化扩展的入口点。在 C 代码中，可以使用
    [sqlite3_load_extension()](c3ref/load_extension.html) API 提供这些信息。有关此例程的详细信息，请参阅文档。
- en: Note that different operating systems use different filename suffixes for their
    shared libraries. Windows uses ".dll", Mac uses ".dylib", and most unixes other
    than mac use ".so". If you want to make your code portable, you can omit the suffix
    from the shared library filename and the appropriate suffix will be added automatically
    by the [sqlite3_load_extension()](c3ref/load_extension.html) interface.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，不同的操作系统使用不同的文件名后缀来表示它们的共享库。Windows 使用 ".dll"，Mac 使用 ".dylib"，大多数除了 Mac 之外的
    Unix 系统使用 ".so"。如果你希望使你的代码具备可移植性，可以省略共享库文件名的后缀，[sqlite3_load_extension()](c3ref/load_extension.html)
    接口会自动添加适当的后缀。
- en: 'There is also an SQL function that can be used to load extensions: [load_extension(X,Y)](lang_corefunc.html#load_extension).
    It works just like the [sqlite3_load_extension()](c3ref/load_extension.html) C
    interface.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 也有一个可以用来加载扩展的 SQL 函数：[load_extension(X,Y)](lang_corefunc.html#load_extension)。它的工作方式类似于
    [sqlite3_load_extension()](c3ref/load_extension.html) 的 C 接口。
- en: Both methods for loading an extension allow you to specify the name of an entry
    point for the extension. You can leave this argument blank - passing in a NULL
    pointer for the [sqlite3_load_extension()](c3ref/load_extension.html) C-language
    interface or omitting the second argument for the [load_extension()](lang_corefunc.html#load_extension)
    SQL interface - and the extension loader logic will attempt to figure out the
    entry point on its own. It will first try the generic extension name "sqlite3_extension_init".
    If that does not work, it constructs a entry point using the template "sqlite3_X_init"
    where the X is replaced by the lowercase equivalent of every ASCII character in
    the filename after the last "/" and before the first following "." omitting the
    first three characters if they happen to be "lib". So, for example, if the filename
    is "/usr/lib/libmathfunc-4.8.so" the entry point name would be "sqlite3_mathfunc_init".
    Or if the filename is "./SpellFixExt.dll" then the entry point would be called
    "sqlite3_spellfixext_init".
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 加载扩展的两种方法都允许你指定扩展的入口点名称。你可以将这个参数留空 - 对于 [sqlite3_load_extension()](c3ref/load_extension.html)
    的 C 语言接口传入一个空指针，或者对于 SQL 接口的 [load_extension()](lang_corefunc.html#load_extension)
    省略第二个参数 - 扩展加载器逻辑会尝试自动确定入口点。它首先尝试通用的扩展名称 "sqlite3_extension_init"。如果这样不起作用，它会使用模板
    "sqlite3_X_init"，其中 X 是文件名中最后一个 "/" 后和下一个 "." 前的 ASCII 字符的小写等价，如果第一个三个字符碰巧是 "lib"，则省略它们。例如，如果文件名是
    "/usr/lib/libmathfunc-4.8.so"，则入口点名称将是 "sqlite3_mathfunc_init"。或者如果文件名是 "./SpellFixExt.dll"，则入口点将被称为
    "sqlite3_spellfixext_init"。
- en: For security reasons, extension loading is turned off by default. In order to
    use either the C-language or SQL extension loading functions, one must first enable
    extension loading using the [sqlite3_db_config](c3ref/db_config.html)(db,[SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION](c3ref/c_dbconfig_defensive.html#sqlitedbconfigenableloadextension),1,NULL)
    C-language API in your application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全考虑，默认关闭扩展加载。为了使用 C 语言或 SQL 扩展加载函数，必须首先在应用程序中使用 [sqlite3_db_config](c3ref/db_config.html)(db,[SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION](c3ref/c_dbconfig_defensive.html#sqlitedbconfigenableloadextension),1,NULL)
    C 语言 API 启用扩展加载。
- en: 'From the [command-line shell](cli.html), extensions can be loaded using the
    ".load" dot-command. For example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [命令行 shell](cli.html) 中，可以使用 ".load" 命令加载扩展。例如：
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the command-line shell program has already enabled extension loading
    for you (by calling the [sqlite3_enable_load_extension()](c3ref/enable_load_extension.html)
    interface as part of its setup) so the command above works without any special
    switches, setup, or other complications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，命令行 shell 程序已经为你启用了扩展加载（作为其设置的一部分调用了 [sqlite3_enable_load_extension()](c3ref/enable_load_extension.html)
    接口），因此上述命令可以无需任何特殊开关、设置或其他复杂操作即可工作。
- en: 'The ".load" command with one argument invokes sqlite3_load_extension() with
    the zProc parameter set to NULL, causing SQLite to first look for an entry point
    named "sqlite3_extension_init" and then "sqlite3_X_init" where "X" is derived
    from the filename. If your extension has an entry point with a different name,
    simply supply that name as the second argument. For example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '".load" 命令带有一个参数，调用 sqlite3_load_extension()，zProc 参数设置为 NULL，导致 SQLite 首先查找名为
    "sqlite3_extension_init" 的入口点，然后是名为 "sqlite3_X_init" 的入口点，其中 "X" 源自文件名。如果你的扩展具有不同名称的入口点，只需作为第二个参数提供该名称。例如：'
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 3\. Compiling A Loadable Extension
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 编译可加载扩展
- en: 'Loadable extensions are C-code. To compile them on most unix-like operating
    systems, the usual command is something like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可加载扩展是 C 代码。在大多数类 Unix 操作系统上编译它们的通常命令是这样的：
- en: '[PRE2]'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Macs are unix-like, but they do not follow the usual shared library conventions.
    To compile a shared library on a Mac, use a command like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Mac 是类 Unix 的操作系统，但不遵循通常的共享库约定。要在 Mac 上编译共享库，使用类似以下的命令：
- en: '[PRE3]'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If when you try to load your library you get back an error message that says
    "mach-o, but wrong architecture" then you might need to add command-line options
    "-arch i386" or "arch x86_64" to gcc, depending on how your application is built.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试加载库时返回 "mach-o, but wrong architecture" 错误消息，则可能需要为 gcc 添加命令行选项 "-arch i386"
    或 "arch x86_64"，具体取决于你的应用程序如何构建。
- en: 'To compile on Windows using MSVC, a command similar to the following will usually
    work:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 上使用 MSVC 编译，类似以下的命令通常会起作用：
- en: '[PRE4]'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To compile for Windows using MinGW, the command line is just like it is for
    unix except that the output file suffix is changed to ".dll" and the -fPIC argument
    is omitted:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 上使用 MinGW 进行编译，命令行与 Unix 上的一样，只是输出文件后缀改为 ".dll"，并且省略了 -fPIC 参数。
- en: '[PRE5]'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 4\. Programming Loadable Extensions
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 编写可加载扩展
- en: 'A template loadable extension contains the following three elements:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模板加载扩展包含以下三个元素：
- en: Use "`#include <sqlite3ext.h>`" at the top of your source code files instead
    of "`#include <sqlite3.h>`".
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的源代码文件顶部使用 "`#include <sqlite3ext.h>`"，而不是 "`#include <sqlite3.h>`"。
- en: Put the macro "`SQLITE_EXTENSION_INIT1`" on a line by itself right after the
    "`#include <sqlite3ext.h>`" line.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 "`#include <sqlite3ext.h>`" 行后面，单独放置宏 "`SQLITE_EXTENSION_INIT1`"。
- en: 'Add an extension loading entry point routine that looks like something the
    following:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个类似以下内容的扩展加载入口点例程：
- en: '[PRE6]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You will do well to customize the name of your entry point to correspond to
    the name of the shared library you will be generating, rather than using the generic
    "sqlite3_extension_init" name. Giving your extension a custom entry point name
    will enable you to statically link two or more extensions into the same program
    without a linker conflict, if you later decide to use static linking rather than
    run-time linking. If your shared library ends up being named "YourCode.so" or
    "YourCode.dll" or "YourCode.dylib" as shown in the compiler examples above, then
    the correct entry point name would be "sqlite3_yourcode_init".
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你最好自定义入口点的名称，以对应生成的共享库的名称，而不是使用通用的 "sqlite3_extension_init" 名称。给扩展命名一个自定义的入口点名称将使你能够在同一程序中静态链接两个或更多扩展，而不会出现链接器冲突，如果你后来决定使用静态链接而不是运行时链接。如果你的共享库最终被命名为
    "YourCode.so" 或 "YourCode.dll" 或 "YourCode.dylib"，如编译示例所示，那么正确的入口点名称将是 "sqlite3_yourcode_init"。
- en: 'Here is a complete template extension that you can copy/paste to get started:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个完整的模板扩展，你可以复制/粘贴以开始：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 4.1\. Example Extensions
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.1\. 示例扩展
- en: 'Many examples of complete and working loadable extensions can be seen in the
    SQLite source tree in the [ext/misc](https://www.sqlite.org/src/file/ext/misc)
    subdirectory. Each file in that directory is a separate extension. Documentation
    is provided by a header comment on the file. Here are brief notes on a few of
    the extensions in the [ext/misc](https://www.sqlite.org/src/file/ext/misc) subdirectory:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLite源代码树的[ext/misc](https://www.sqlite.org/src/file/ext/misc)子目录中，可以看到许多完整且可用的加载扩展示例。该目录中的每个文件都是一个独立的扩展。每个文件都提供了关于扩展的头部注释文档。以下是[ext/misc](https://www.sqlite.org/src/file/ext/misc)子目录中一些扩展的简要说明：
- en: '[carray.c](https://www.sqlite.org/src/file/ext/misc/carray.c) — Implementation
    of the [carray table-valued function](carray.html).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[carray.c](https://www.sqlite.org/src/file/ext/misc/carray.c) — 实现了[carray
    表值函数](carray.html)。'
- en: '[compress.c](https://www.sqlite.org/src/file/ext/misc/compress.c) — Implementation
    of [application-defined SQL functions](appfunc.html) compress() and uncompress()
    that do zLib compression of text or blob content.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[compress.c](https://www.sqlite.org/src/file/ext/misc/compress.c) — 实现了[应用程序定义的
    SQL 函数](appfunc.html) compress() 和 uncompress()，用于对文本或 blob 内容进行 zLib 压缩。'
- en: '[json1.c](https://www.sqlite.org/src/file/ext/misc/json1.c) — Implementation
    of [JSON SQL functions](json1.html) and [table-valued functions](vtab.html#tabfunc2).
    This is a larger and more complex extension.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[json1.c](https://www.sqlite.org/src/file/ext/misc/json1.c) — 实现了[JSON SQL
    函数](json1.html)和[表值函数](vtab.html#tabfunc2)。这是一个较大且更复杂的扩展。'
- en: '[memvfs.c](https://www.sqlite.org/src/file/ext/misc/memvfs.c) — Implementation
    of a new [VFS](vfs.html) that stores all content in-memory.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[memvfs.c](https://www.sqlite.org/src/file/ext/misc/memvfs.c) — 实现了一个新的[VFS](vfs.html)，将所有内容存储在内存中。'
- en: '[rot13.c](https://www.sqlite.org/src/file/ext/misc/rot13.c) — Implementation
    of a [rot13()](https://en.wikipedia.org/wiki/ROT13) SQL function. This is a very
    simple example of an extension function and is useful as a template for creating
    new extensions.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[rot13.c](https://www.sqlite.org/src/file/ext/misc/rot13.c) — 实现了[rot13()](https://en.wikipedia.org/wiki/ROT13)
    SQL 函数。这是一个非常简单的扩展函数示例，并且作为创建新扩展的模板非常有用。'
- en: '[series.c](https://www.sqlite.org/src/file/ext/misc/series.c) — Implementation
    of the generate_series [virtual table](vtab.html) and [table-valued function](vtab.html#tabfunc2).
    This is a relatively simple example of a virtual table implementation which can
    serve as a template for writing new virtual tables.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[series.c](https://www.sqlite.org/src/file/ext/misc/series.c) — 实现了 generate_series
    [虚拟表](vtab.html) 和 [表值函数](vtab.html#tabfunc2)。这是一个相对简单的虚拟表实现示例，可以作为编写新虚拟表的模板。'
- en: Other and more complex extensions can be found in subfolders under [ext/](https://www.sqlite.org/src/file/ext)
    other than ext/misc/.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其他更复杂的扩展可以在[ext/](https://www.sqlite.org/src/file/ext)目录下的子文件夹中找到。
- en: 5\. Persistent Loadable Extensions
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 持久化加载扩展
- en: The default behavior for a loadable extension is that it is unloaded from process
    memory when the database connection that originally invoked [sqlite3_load_extension()](c3ref/load_extension.html)
    closes. (In other words, the xDlClose method of the [sqlite3_vfs](c3ref/vfs.html)
    object is called for all extensions when a database connection closes.) However,
    if the initialization procedure returns [SQLITE_OK_LOAD_PERMANENTLY](rescode.html#ok_load_permanently)
    instead of SQLITE_OK, then the extension will not be unloaded (xDlClose will not
    be invoked) and the extension will remain in process memory indefinitely. The
    SQLITE_OK_LOAD_PERMANENTLY return value is useful for extensions that want to
    register new [VFSes](vfs.html).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可加载扩展的默认行为是，在调用[sqlite3_load_extension()](c3ref/load_extension.html)的数据库连接关闭时，扩展会从进程内存中卸载（换句话说，当数据库连接关闭时，[sqlite3_vfs](c3ref/vfs.html)对象的xDlClose方法将会为所有扩展调用）。但是，如果初始化过程返回[SQLITE_OK_LOAD_PERMANENTLY](rescode.html#ok_load_permanently)而不是SQLITE_OK，那么扩展将不会被卸载（xDlClose将不会被调用），扩展将无限期地保留在进程内存中。SQLITE_OK_LOAD_PERMANENTLY返回值对于想要注册新[VFS](vfs.html)的扩展非常有用。
- en: 'To clarify: an extension for which the initialization function returns SQLITE_OK_LOAD_PERMANENTLY
    continues to exist in memory after the database connection closes. However, the
    extension is *not* automatically registered with subsequent database connections.
    This makes it possible to load extensions that implement new [VFSes](vfs.html).
    To persistently load and register an extension that implements new SQL functions,
    collating sequences, and/or virtual tables, such that those added capabilities
    are available to all subsequent database connections, then the initialization
    routine should also invoke [sqlite3_auto_extension()](c3ref/auto_extension.html)
    on a subfunction that will register those services.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清：初始化函数返回SQLITE_OK_LOAD_PERMANENTLY的扩展会在数据库连接关闭后继续存在于内存中。但是，该扩展*不会*自动注册到后续的数据库连接中。这使得可以加载实现新的[VFSes](vfs.html)的扩展。为了持续加载并注册实现新SQL函数、排序序列和/或虚拟表的扩展，使得这些新增功能对所有后续数据库连接都可用，初始化例程还应调用[sqlite3_auto_extension()](c3ref/auto_extension.html)来注册这些服务的子函数。
- en: The [vfsstat.c](https://sqlite.org/src/file/ext/misc/vfsstat.c) extension show
    an example of a loadable extension that persistently registers both a new VFS
    and a new virtual table. The [sqlite3_vfsstat_init()](https://sqlite.org/src/info/77b5b4235c9f7f11?ln=801-819)
    initialization routine in that extension is called only once, when the extension
    is first loaded. It registers the new "vfslog" VFS just that one time, and it
    returns SQLITE_OK_LOAD_PERMANENTLY so that the code used to implement the "vfslog"
    VFS will remain in memory. The initialization routine also invokes [sqlite3_auto_extension()](c3ref/auto_extension.html)
    on a pointer to the "vstatRegister()" function so that all subsequent database
    connections will invoke the "vstatRegister()" function as they start up, and hence
    register the "vfsstat" virtual table.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[vfsstat.c](https://sqlite.org/src/file/ext/misc/vfsstat.c)扩展展示了一个示例，它持久地注册了一个新的VFS和一个新的虚拟表。该扩展中的[sqlite3_vfsstat_init()](https://sqlite.org/src/info/77b5b4235c9f7f11?ln=801-819)初始化例程只在扩展首次加载时调用。它只在那个时间注册新的"vfslog"
    VFS，并且返回SQLITE_OK_LOAD_PERMANENTLY，使得用于实现"vfslog" VFS的代码保持在内存中。初始化例程还调用[sqlite3_auto_extension()](c3ref/auto_extension.html)来指向"vstatRegister()"函数的指针，以便所有后续的数据库连接在启动时调用"vstatRegister()"函数，从而注册"vfsstat"虚拟表。'
- en: 6\. Statically Linking A Run-Time Loadable Extension
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 静态链接运行时可加载扩展
- en: The exact same source code can be used for both a run-time loadable shared library
    or DLL and as a module that is statically linked with your application. This provides
    flexibility and allows you to reuse the same code in different ways.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的源代码可以用于运行时可加载共享库或DLL，也可以作为静态链接到应用程序的模块。这提供了灵活性，并允许您以不同的方式重用相同的代码。
- en: To statically link your extension, simply add the -DSQLITE_CORE compile-time
    option. The SQLITE_CORE macro causes the SQLITE_EXTENSION_INIT1 and SQLITE_EXTENSION_INIT2
    macros to become no-ops. Then modify your application to invoke the entry point
    directly, passing in a NULL pointer as the third "pApi" parameter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要静态链接您的扩展，只需添加-DSQLITE_CORE编译时选项。SQLITE_CORE宏使SQLITE_EXTENSION_INIT1和SQLITE_EXTENSION_INIT2宏成为无操作。然后修改您的应用程序直接调用入口点，将NULL指针作为第三个“pApi”参数传递。
- en: It is particularly important to use an entry point name that is based on the
    extension filename, rather than the generic "sqlite3_extension_init" entry point
    name, if you will be statically linking two or more extensions. If you use the
    generic name, there will be multiple definitions of the same symbol and the link
    will fail.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将静态链接两个或多个扩展模块，则使用基于扩展文件名而不是通用的"sqlite3_extension_init"入口点名称尤其重要。如果使用通用名称，将会有多个相同符号的定义，导致链接失败。
- en: If you will be opening multiple database connections in your application, rather
    than invoking the extension entry points for each database connection separately,
    you might want to consider using the [sqlite3_auto_extension()](c3ref/auto_extension.html)
    interface to register your extensions and to cause them to be automatically started
    as each database connection is opened. You only have to register each extension
    once, and you can do so near the beginning of your main() routine. Using the [sqlite3_auto_extension()](c3ref/auto_extension.html)
    interface to register your extensions makes your extensions work as if they were
    built into the core SQLite - they automatically exist whenever you open a new
    database connection without needing to be initialized. Just be sure to complete
    any configuration you need to accomplish using [sqlite3_config()](c3ref/config.html)
    before registering your extensions, since the [sqlite3_auto_extension()](c3ref/auto_extension.html)
    interface implicitly calls [sqlite3_initialize()](c3ref/initialize.html).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序将打开多个数据库连接，而不是为每个数据库连接单独调用扩展入口点，则可能希望考虑使用 [sqlite3_auto_extension()](c3ref/auto_extension.html)
    接口注册扩展，并在打开每个数据库连接时自动启动它们。您只需注册每个扩展一次，并且可以在主() 函数的开始附近执行此操作。使用 [sqlite3_auto_extension()](c3ref/auto_extension.html)
    接口注册扩展使得您的扩展工作起来就像内置到核心 SQLite 中一样 - 每当打开新的数据库连接时它们就自动存在，无需初始化。只需确保在注册扩展之前完成任何需要使用
    [sqlite3_config()](c3ref/config.html) 完成的配置，因为 [sqlite3_auto_extension()](c3ref/auto_extension.html)
    接口会隐式调用 [sqlite3_initialize()](c3ref/initialize.html)。
- en: 7\. Implementation Details
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 实现细节
- en: SQLite implements run-time extension loading using the xDlOpen(), xDlError(),
    xDlSym(), and xDlClose() methods of the [sqlite3_vfs](c3ref/vfs.html) object.
    These methods are implemented using the dlopen() library on unix (which explains
    why SQLite commonly needs to be linked against the "-ldl" library on unix systems)
    and using LoadLibrary() API on Windows. In a custom [VFS](vfs.html) for unusual
    systems, these methods can all be omitted, in which case the run-time extension
    loading mechanism will not work (though you will still be able to statically link
    the extension code, assuming the entry pointers are uniquely named). SQLite can
    be compiled with [SQLITE_OMIT_LOAD_EXTENSION](compile.html#omit_load_extension)
    to omit the extension loading code from the build.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 使用 `xDlOpen()`、`xDlError()`、`xDlSym()` 和 `xDlClose()` 方法实现运行时扩展加载，这些方法是通过
    [sqlite3_vfs](c3ref/vfs.html) 对象实现的。在 Unix 上，这些方法使用 dlopen() 库实现（这解释了为什么 SQLite
    在 Unix 系统上通常需要链接 "-ldl" 库），而在 Windows 上则使用 LoadLibrary() API。在自定义的 [VFS](vfs.html)
    中，对于不寻常的系统，可以省略这些方法，这样运行时扩展加载机制将不起作用（尽管您仍然可以静态链接扩展代码，假设入口点名称是唯一的）。可以使用 [SQLITE_OMIT_LOAD_EXTENSION](compile.html#omit_load_extension)
    来编译 SQLite，从而在构建中省略扩展加载代码。
