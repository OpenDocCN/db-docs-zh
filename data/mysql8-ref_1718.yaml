- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-logs-cluster-log.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-logs-cluster-log.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-logs-cluster-log.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-logs-cluster-log.html)
- en: '25.6.2.1 NDB Cluster: Messages in the Cluster Log'
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 25.6.2.1 NDB 集群：集群日志中的消息
- en: The following table lists the most common [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") cluster log messages. For information about the cluster log,
    log events, and event types, see [Section 25.6.3, “Event Reports Generated in
    NDB Cluster”](mysql-cluster-event-reports.html "25.6.3 Event Reports Generated
    in NDB Cluster"). These log messages also correspond to log event types in the
    MGM API; see [The Ndb_logevent_type Type](/doc/ndbapi/en/mgm-types.html#mgm-ndb-logevent-type),
    for related information of interest to Cluster API developers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表列出了最常见的 [`NDB`](mysql-cluster.html "第 25 章 MySQL NDB Cluster 8.0") 集群日志消息。有关集群日志、日志事件和事件类型的信息，请参阅
    [第 25.6.3 节 “NDB 集群中生成的事件报告”](mysql-cluster-event-reports.html "25.6.3 NDB 集群中生成的事件报告")。这些日志消息还对应于
    MGM API 中的日志事件类型；有关集群 API 开发人员感兴趣的相关信息，请参阅 [Ndb_logevent_type 类型](/doc/ndbapi/en/mgm-types.html#mgm-ndb-logevent-type)。
- en: '**Table 25.53 Common NDB cluster log messages**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 25.53 常见 NDB 集群日志消息**'
- en: '| Log Message | Description | Event Name | Event Type | Priority | Severity
    |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 日志消息 | 描述 | 事件名称 | 事件类型 | 优先级 | 严重性 |'
- en: '| `Node *`mgm_node_id`*: Node *`data_node_id`* Connected` | The data node having
    node ID *`node_id`* has connected to the management server (node *`mgm_node_id`*).
    | `Connected` | `Connection` | 8 | `INFO` |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`mgm_node_id`*: 节点 *`data_node_id`* 已连接` | 具有节点 ID *`node_id`* 的数据节点已连接到管理服务器（节点
    *`mgm_node_id`*）。 | `已连接` | `连接` | 8 | `信息` |'
- en: '| `Node *`mgm_node_id`*: Node *`data_node_id`* Disconnected` | The data node
    having node ID *`data_node_id`* has disconnected from the management server (node
    *`mgm_node_id`*). | `Disconnected` | `Connection` | 8 | `ALERT` |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`mgm_node_id`*: 节点 *`data_node_id`* 已断开连接` | 具有节点 ID *`data_node_id`*
    的数据节点已从管理服务器（节点 *`mgm_node_id`*）断开连接。 | `已断开连接` | `连接` | 8 | `警报` |'
- en: '| `Node *`data_node_id`*: Communication to Node *`api_node_id`* closed` | The
    API node or SQL node having node ID *`api_node_id`* is no longer communicating
    with data node *`data_node_id`*. | `CommunicationClosed` | `Connection` | 8 |
    `INFO` |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`data_node_id`*: 与节点 *`api_node_id`* 的通信已关闭` | 具有节点 ID *`api_node_id`*
    的 API 节点或 SQL 节点不再与数据节点 *`data_node_id`* 进行通信。 | `通信已关闭` | `连接` | 8 | `信息` |'
- en: '| `Node *`data_node_id`*: Communication to Node *`api_node_id`* opened` | The
    API node or SQL node having node ID *`api_node_id`* is now communicating with
    data node *`data_node_id`*. | `CommunicationOpened` | `Connection` | 8 | `INFO`
    |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`data_node_id`*: 与节点 *`api_node_id`* 的通信已打开` | 具有节点 ID *`api_node_id`*
    的 API 节点或 SQL 节点现在正在与数据节点 *`data_node_id`* 进行通信。 | `通信已打开` | `连接` | 8 | `信息` |'
- en: '| `Node *`mgm_node_id`*: Node *`api_node_id`*: API *`version`*` | The API node
    having node ID *`api_node_id`* has connected to management node *`mgm_node_id`*
    using [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") API version
    *`version`* (generally the same as the MySQL version number). | `ConnectedApiVersion`
    | `Connection` | 8 | `INFO` |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`mgm_node_id`*: 节点 *`api_node_id`*：API *`version`*` | 具有节点 ID *`api_node_id`*
    的 API 节点已连接到管理节点 *`mgm_node_id`*，使用 [`NDB`](mysql-cluster.html "第 25 章 MySQL NDB
    Cluster 8.0") API 版本 *`version`*（通常与 MySQL 版本号相同）。 | `ConnectedApiVersion` | `连接`
    | 8 | `信息` |'
- en: '| `Node *`node_id`*: Global checkpoint *`gci`* started` | A global checkpoint
    with the ID *`gci`* has been started; node *`node_id`* is the master responsible
    for this global checkpoint. | `GlobalCheckpointStarted` | `Checkpoint` | 9 | `INFO`
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 全局检查点 *`gci`* 已启动` | 具有 ID *`gci`* 的全局检查点已启动；节点 *`node_id`*
    是负责此全局检查点的主节点。 | `全局检查点已启动` | `检查点` | 9 | `信息` |'
- en: '| `Node *`node_id`*: Global checkpoint *`gci`* completed` | The global checkpoint
    having the ID *`gci`* has been completed; node *`node_id`* was the master responsible
    for this global checkpoint. | `GlobalCheckpointCompleted` | `Checkpoint` | 10
    | `INFO` |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 全局检查点 *`gci`* 已完成` | 具有 ID *`gci`* 的全局检查点已完成；节点 *`node_id`*
    是负责此全局检查点的主节点。 | `全局检查点已完成` | `检查点` | 10 | `信息` |'
- en: '| `Node *`node_id`*: Local checkpoint *`lcp`* started. Keep GCI = *`current_gci`*
    oldest restorable GCI = *`old_gci`*` | The local checkpoint having sequence ID
    *`lcp`* has been started on node *`node_id`*. The most recent GCI that can be
    used has the index *`current_gci`*, and the oldest GCI from which the cluster
    can be restored has the index *`old_gci`*. | `LocalCheckpointStarted` | `Checkpoint`
    | 7 | `INFO` |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 本地检查点*`lcp`*已启动。保持GCI = *`current_gci`*，最旧可恢复的GCI = *`old_gci`*`
    | 具有序列ID *`lcp`* 的本地检查点已在节点 *`node_id`* 上启动。可以使用的最近的GCI具有索引 *`current_gci`*，而集群可以恢复的最旧GCI具有索引
    *`old_gci`*。 | `LocalCheckpointStarted` | `检查点` | 7 | `信息` |'
- en: '| `Node *`node_id`*: Local checkpoint *`lcp`* completed` | The local checkpoint
    having sequence ID *`lcp`* on node *`node_id`* has been completed. | `LocalCheckpointCompleted`
    | `Checkpoint` | 8 | `INFO` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 本地检查点*`lcp`*已完成` | 在节点 *`node_id`* 上具有序列ID *`lcp`* 的本地检查点已经完成。
    | `LocalCheckpointCompleted` | `检查点` | 8 | `信息` |'
- en: '| `Node *`node_id`*: Local Checkpoint stopped in CALCULATED_KEEP_GCI` | The
    node was unable to determine the most recent usable GCI. | `LCPStoppedInCalcKeepGci`
    | `Checkpoint` | 0 | `ALERT` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 本地检查点在CALCULATED_KEEP_GCI中停止` | 节点无法确定最近可用的GCI。 | `LCPStoppedInCalcKeepGci`
    | `检查点` | 0 | `警报` |'
- en: '| `Node *`node_id`*: Table ID = *`table_id`*, fragment *`ID = fragment_id`*
    has completed LCP on Node *`node_id`* maxGciStarted: *`started_gci`* maxGciCompleted:
    *`completed_gci`*` | A table fragment has been checkpointed to disk on node *`node_id`*.
    The GCI in progress has the index *`started_gci`*, and the most recent GCI to
    have been completed has the index *`completed_gci`*. | `LCPFragmentCompleted`
    | `Checkpoint` | 11 | `INFO` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 表ID = *`table_id`*，片段 *`ID = fragment_id`* 在节点 *`node_id`*
    上完成了LCP，maxGciStarted: *`started_gci`* maxGciCompleted: *`completed_gci`*` | 一个表片段已经在节点
    *`node_id`* 上被检查点到磁盘上。正在进行的GCI具有索引 *`started_gci`*，而最近完成的GCI具有索引 *`completed_gci`*。
    | `LCPFragmentCompleted` | `检查点` | 11 | `信息` |'
- en: '| `Node *`node_id`*: ACC Blocked *`num_1`* and TUP Blocked *`num_2`* times
    last second` | Undo logging is blocked because the log buffer is close to overflowing.
    | `UndoLogBlocked` | `Checkpoint` | 7 | `INFO` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: ACC阻塞了*`num_1`*次，TUP阻塞了*`num_2`*次上一秒` | 因为日志缓冲区接近溢出，撤销日志记录被阻塞。
    | `UndoLogBlocked` | `检查点` | 7 | `信息` |'
- en: '| `Node *`node_id`*: Start initiated *`version`*` | Data node *`node_id`*,
    running [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") version
    *`version`*, is beginning its startup process. | `NDBStartStarted` | `StartUp`
    | 1 | `INFO` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 启动初始化*`version`*` | 数据节点 *`node_id`*，运行[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")版本 *`version`*，正在开始启动过程。 | `NDBStartStarted` | `启动`
    | 1 | `信息` |'
- en: '| `Node *`node_id`*: Started *`version`*` | Data node *`node_id`*, running
    [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") version *`version`*,
    has started successfully. | `NDBStartCompleted` | `StartUp` | 1 | `INFO` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 启动*`version`*已启动` | 运行[`NDB`](mysql-cluster.html "第25章
    MySQL NDB Cluster 8.0")版本 *`version`* 的数据节点 *`node_id`* 已成功启动。 | `NDBStartCompleted`
    | `启动` | 1 | `信息` |'
- en: '| `Node *`node_id`*: STTORRY received after restart finished` | The node has
    received a signal indicating that a cluster restart has completed. | `STTORRYRecieved`
    | `StartUp` | 15 | `INFO` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 重启完成后收到STTORRY信号` | 节点收到一个信号，表示集群重启已经完成。 | `STTORRYRecieved`
    | `启动` | 15 | `信息` |'
- en: '| `Node *`node_id`*: Start phase *`phase`* completed (*`type`*)` | The node
    has completed start phase *`phase`* of a *`type`* start. For a listing of start
    phases, see [Section 25.6.4, “Summary of NDB Cluster Start Phases”](mysql-cluster-start-phases.html
    "25.6.4 Summary of NDB Cluster Start Phases"). (*`type`* is one of `initial`,
    `system`, `node`, `initial node`, or `<Unknown>`.) | `StartPhaseCompleted` | `StartUp`
    | 4 | `INFO` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 启动阶段*`phase`*已完成（*`type`*）` | 节点已完成*`type`*启动的启动阶段*`phase`*。有关启动阶段的列表，请参见[第25.6.4节，“NDB集群启动阶段总结”](mysql-cluster-start-phases.html
    "25.6.4 NDB集群启动阶段总结")。(*`type`*是`initial`、`system`、`node`、`initial node`或`<未知>`之一。)
    | `StartPhaseCompleted` | `启动` | 4 | `信息` |'
- en: '| `Node *`node_id`*: CM_REGCONF president = *`president_id`*, own Node = *`own_id`*,
    our dynamic id = *`dynamic_id`*` | Node *`president_id`* has been selected as
    “president”. *`own_id`* and *`dynamic_id`* should always be the same as the ID
    (*`node_id`*) of the reporting node. | `CM_REGCONF` | `StartUp` | 3 | `INFO` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: CM_REGCONF主席 = *`president_id`*，自己的节点 = *`own_id`*，我们的动态ID
    = *`dynamic_id`*` | 节点 *`president_id`* 被选为“主席”。*`own_id`* 和 *`dynamic_id`* 应始终与报告节点的ID（*`node_id`*）相同。
    | `CM_REGCONF` | `启动` | 3 | `信息` |'
- en: '| `Node *`node_id`*: CM_REGREF from Node *`president_id`* to our Node *`node_id`*.
    Cause = *`cause`*` | The reporting node (ID *`node_id`*) was unable to accept
    node *`president_id`* as president. The *`cause`* of the problem is given as one
    of `Busy`, `Election with wait = false`, `Not president`, `Election without selecting
    new candidate`, or `No such cause`. | `CM_REGREF` | `StartUp` | 8 | `INFO` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 来自节点 *`president_id`* 对我们节点 *`node_id`* 的 CM_REGREF。原因
    = *`cause`*` | 报告节点（ID *`node_id`*）无法接受节点 *`president_id`* 为主席。问题的*`cause`* 给出为`Busy`、`Election
    with wait = false`、`Not president`、`Election without selecting new candidate`或`No
    such cause`之一。 | `CM_REGREF` | `StartUp` | 8 | `INFO` |'
- en: '| `Node *`node_id`*: We are Node *`own_id`* with dynamic ID *`dynamic_id`*,
    our left neighbor is Node *`id_1`*, our right is Node *`id_2`*` | The node has
    discovered its neighboring nodes in the cluster (node *`id_1`* and node *`id_2`*).
    *`node_id`*, *`own_id`*, and *`dynamic_id`* should always be the same; if they
    are not, this indicates a serious misconfiguration of the cluster nodes. | `FIND_NEIGHBOURS`
    | `StartUp` | 8 | `INFO` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 我们是节点 *`own_id`*，动态ID为 *`dynamic_id`*，左邻节点是节点 *`id_1`*，右邻节点是节点
    *`id_2`*` | 节点已发现其在集群中的邻居节点（节点 *`id_1`* 和节点 *`id_2`*）。*`node_id`*、*`own_id`* 和
    *`dynamic_id`* 应始终相同；如果它们不同，则表示集群节点配置严重错误。 | `FIND_NEIGHBOURS` | `StartUp` | 8
    | `INFO` |'
- en: '| `Node *`node_id`*: *`type`* shutdown initiated` | The node has received a
    shutdown signal. The *`type`* of shutdown is either `Cluster` or `Node`. | `NDBStopStarted`
    | `StartUp` | 1 | `INFO` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: *`type`* 关闭已启动` | 节点已接收到关闭信号。关闭的*`type`*可以是`Cluster`或`Node`。
    | `NDBStopStarted` | `StartUp` | 1 | `INFO` |'
- en: '| `Node *`node_id`*: Node shutdown completed` [`, *`action`*`] [`Initiated
    by signal *`signal`*.`] | The node has been shut down. This report may include
    an *`action`*, which if present is one of `restarting`, `no start`, or `initial`.
    The report may also include a reference to an [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") Protocol *`signal`*; for possible signals, refer to [Operations
    and Signals](/doc/ndb-internals/en/ndb-internals-ndb-protocol-operations-signals.html).
    | `NDBStopCompleted` | `StartUp` | 1 | `INFO` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 节点关闭已完成` [`, *`action`*`] [`由信号 *`signal`* 发起。] | 节点已关闭。此报告可能包括一个*`action`*，如果存在，则为`restarting`、`no
    start`或`initial`之一。报告还可能包括对[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster
    8.0")协议 *`signal`* 的引用；有关可能的信号，请参阅[操作和信号](/doc/ndb-internals/zh/ndb-internals-ndb-protocol-operations-signals.html)。
    | `NDBStopCompleted` | `StartUp` | 1 | `INFO` |'
- en: '| `Node *`node_id`*: Forced node shutdown completed` [`, action`]`.` [`Occurred
    during startphase *`start_phase`*.`] [ `Initiated by *`signal`*.`] [`Caused by
    error *`error_code`*: ''*`error_message`*(*`error_classification`*). *`error_status`*''.`
    [`(extra info *`extra_code`*)`]] | The node has been forcibly shut down. The *`action`*
    (one of `restarting`, `no start`, or `initial`) subsequently being taken, if any,
    is also reported. If the shutdown occurred while the node was starting, the report
    includes the *`start_phase`* during which the node failed. If this was a result
    of a *`signal`* sent to the node, this information is also provided (see [Operations
    and Signals](/doc/ndb-internals/en/ndb-internals-ndb-protocol-operations-signals.html),
    for more information). If the error causing the failure is known, this is also
    included; for more information about [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") error messages and classifications, see [NDB Cluster API Errors](/doc/ndb-internals/en/ndb-errors.html).
    | `NDBStopForced` | `StartUp` | 1 | `ALERT` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 强制节点关闭已完成` [`, action`]`.` [`发生在启动阶段 *`start_phase`*。]
    [`由 *`signal`* 发起。] [`由错误 *`error_code`*: ''*`error_message`*(*`error_classification`*).
    *`error_status`*''.` [`(额外信息 *`extra_code`*)`]] | 节点已被强制关闭。随后采取的*`action`*（`restarting`、`no
    start`或`initial`之一）也会报告。如果节点在启动时关闭，报告将包括节点失败的*`start_phase`*。如果这是由发送给节点的*`signal`*
    导致的，还会提供此信息（有关更多信息，请参阅[操作和信号](/doc/ndb-internals/zh/ndb-internals-ndb-protocol-operations-signals.html)）。如果已知导致失败的错误，也会包括在内；有关更多关于[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")错误消息和分类的信息，请参阅[NDB Cluster API错误](/doc/ndb-internals/zh/ndb-errors.html)。
    | `NDBStopForced` | `StartUp` | 1 | `ALERT` |'
- en: '| `Node *`node_id`*: Node shutdown aborted` | The node shutdown process was
    aborted by the user. | `NDBStopAborted` | `StartUp` | 1 | `INFO` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 节点关闭已中止` | 用户中止了节点关闭过程。 | `NDBStopAborted` | `StartUp`
    | 1 | `INFO` |'
- en: '| `Node *`node_id`*: StartLog: [GCI Keep: *`keep_pos`* LastCompleted: *`last_pos`*
    NewestRestorable: *`restore_pos`*]` | This reports global checkpoints referenced
    during a node start. The redo log prior to *`keep_pos`* is dropped. *`last_pos`*
    is the last global checkpoint in which data node the participated; *`restore_pos`*
    is the global checkpoint which is actually used to restore all data nodes. | `StartREDOLog`
    | `StartUp` | 4 | `INFO` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `节点 *`node_id`*：StartLog：[GCI保留：*`keep_pos`* 最后完成：*`last_pos`* 最新可恢复：*`restore_pos`*]`
    | 这报告了节点启动期间引用的全局检查点。在 *`keep_pos`* 之前的重做日志将被丢弃。*`last_pos`* 是数据节点参与的最后一个全局检查点；*`restore_pos`*
    是实际用于恢复所有数据节点的全局检查点。 | `StartREDOLog` | `StartUp` | 4 | `信息` |'
- en: '| *`startup_message`* [*Listed separately; see below.*] | There are a number
    of possible startup messages that can be logged under different circumstances.
    These are listed separately; see [Section 25.6.2.2, “NDB Cluster Log Startup Messages”](mysql-cluster-log-startup-messages.html
    "25.6.2.2 NDB Cluster Log Startup Messages"). | `StartReport` | `StartUp` | 4
    | `INFO` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| *`startup_message`* [*单独列出；请参见下文.*] | 在不同情况下可能记录的启动消息有很多种。这些将单独列出；请参见[第25.6.2.2节，“NDB
    Cluster日志启动消息”](mysql-cluster-log-startup-messages.html "25.6.2.2 NDB Cluster日志启动消息")。
    | `StartReport` | `StartUp` | 4 | `信息` |'
- en: '| `Node *`node_id`*: Node restart completed copy of dictionary information`
    | Copying of data dictionary information to the restarted node has been completed.
    | `NR_CopyDict` | `NodeRestart` | 8 | `INFO` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `节点 *`node_id`*：节点重新启动完成了字典信息的复制` | 数据字典信息已复制到重新启动的节点 | `NR_CopyDict` | `NodeRestart`
    | 8 | `信息` |'
- en: '| `Node *`node_id`*: Node restart completed copy of distribution information`
    | Copying of data distribution information to the restarted node has been completed.
    | `NR_CopyDistr` | `NodeRestart` | 8 | `INFO` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `节点 *`node_id`*：节点重新启动完成了分布信息的复制` | 数据分布信息已复制到重新启动的节点 | `NR_CopyDistr` |
    `NodeRestart` | 8 | `信息` |'
- en: '| `Node *`node_id`*: Node restart starting to copy the fragments to Node *`node_id`*`
    | Copy of fragments to starting data node *`node_id`* has begun | `NR_CopyFragsStarted`
    | `NodeRestart` | 8 | `INFO` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `节点 *`node_id`*：节点重新启动开始复制片段到节点 *`node_id`*` | 开始将片段复制到正在重新启动的数据节点 *`node_id`*
    | `NR_CopyFragsStarted` | `NodeRestart` | 8 | `信息` |'
- en: '| `Node *`node_id`*: Table ID = *`table_id`*, fragment ID = *`fragment_id`*
    have been copied to Node *`node_id`*` | Fragment *`fragment_id`* from table *`table_id`*
    has been copied to data node *`node_id`* | `NR_CopyFragDone` | `NodeRestart` |
    10 | `INFO` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*：表 ID = *`table_id`*，片段 ID = *`fragment_id`* 已复制到节点 *`node_id`*`
    | 来自表 *`table_id`* 的片段 *`fragment_id`* 已复制到数据节点 *`node_id`* | `NR_CopyFragDone`
    | `NodeRestart` | 10 | `信息` |'
- en: '| `Node *`node_id`*: Node restart completed copying the fragments to Node *`node_id`*`
    | Copying of all table fragments to restarting data node *`node_id`* has been
    completed | `NR_CopyFragsCompleted` | `NodeRestart` | 8 | `INFO` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `节点 *`node_id`*：节点重新启动完成了复制片段到节点 *`node_id`*` | 将所有表片段复制到重新启动的数据节点 *`node_id`*
    已完成 | `NR_CopyFragsCompleted` | `NodeRestart` | 8 | `信息` |'
- en: '| `Node *`node_id`*: Node *`node1_id`* completed failure of Node *`node2_id`*`
    | Data node *`node1_id`* has detected the failure of data node *`node2_id`* |
    `NodeFailCompleted` | `NodeRestart` | 8 | `ALERT` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*：节点 *`node1_id`* 完成了节点 *`node2_id`* 的故障` | 数据节点 *`node1_id`*
    检测到了数据节点 *`node2_id`* 的故障 | `NodeFailCompleted` | `NodeRestart` | 8 | `警报` |'
- en: '| `All nodes completed failure of Node *`node_id`*` | All (remaining) data
    nodes have detected the failure of data node *`node_id`* | `NodeFailCompleted`
    | `NodeRestart` | 8 | `ALERT` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `所有节点完成了节点 *`node_id`* 的故障` | 所有（剩余）数据节点已检测到数据节点 *`node_id`* 的故障 | `NodeFailCompleted`
    | `NodeRestart` | 8 | `警报` |'
- en: '| `Node failure of *`node_id`**`block`* completed` | The failure of data node
    *`node_id`* has been detected in the *`block`*[`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") kernel block, where block is 1 of [`DBTC`](/doc/ndb-internals/en/ndb-internals-kernel-blocks-dbtc.html),
    [`DBDICT`](/doc/ndb-internals/en/ndb-internals-kernel-blocks-dbdict.html), [`DBDIH`](/doc/ndb-internals/en/ndb-internals-kernel-blocks-dbdih.html),
    or [`DBLQH`](/doc/ndb-internals/en/ndb-internals-kernel-blocks-dblqh.html); for
    more information, see [NDB Kernel Blocks](/doc/ndb-internals/en/ndb-internals-kernel-blocks.html)
    | `NodeFailCompleted` | `NodeRestart` | 8 | `ALERT` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `节点 *`node_id`* 的块故障已完成` | 在[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster
    8.0")内核块中检测到了数据节点 *`node_id`* 的故障，其中块是 [`DBTC`](/doc/ndb-internals/en/ndb-internals-kernel-blocks-dbtc.html)
    的第1块，[`DBDICT`](/doc/ndb-internals/en/ndb-internals-kernel-blocks-dbdict.html)，[`DBDIH`](/doc/ndb-internals/en/ndb-internals-kernel-blocks-dbdih.html)，或
    [`DBLQH`](/doc/ndb-internals/en/ndb-internals-kernel-blocks-dblqh.html)；更多信息，请参阅[NDB内核块](/doc/ndb-internals/en/ndb-internals-kernel-blocks.html)
    | `NodeFailCompleted` | `NodeRestart` | 8 | `警报` |'
- en: '| `Node *`mgm_node_id`*: Node *`data_node_id`* has failed. The Node state at
    failure was *`state_code`*` | A data node has failed. Its state at the time of
    failure is described by an arbitration state code *`state_code`*: possible state
    code values can be found in the file `include/kernel/signaldata/ArbitSignalData.hpp`.
    | `NODE_FAILREP` | `NodeRestart` | 8 | `ALERT` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `节点 *`mgm_node_id`*: 节点 *`data_node_id`* 失败。节点在失败时的状态为 *`state_code`*` |
    一个数据节点失败了。其在失败时的状态由仲裁状态代码 *`state_code`* 描述：可能的状态代码值可以在文件`include/kernel/signaldata/ArbitSignalData.hpp`中找到。
    | `节点失败报告` | `节点重启` | 8 | `警报` |'
- en: '| `President restarts arbitration thread [state=*`state_code`*]` or `Prepare
    arbitrator node *`node_id`* [ticket=*`ticket_id`*]` or `Receive arbitrator node
    *`node_id`* [ticket=*`ticket_id`*]` or `Started arbitrator node *`node_id`* [ticket=*`ticket_id`*]`
    or `Lost arbitrator node *`node_id`* - process failure [state=*`state_code`*]`
    or `Lost arbitrator node *`node_id`* - process exit [state=*`state_code`*]` or
    `Lost arbitrator node *`node_id`* - *`error_message`* [state=*`state_code`*]`
    | This is a report on the current state and progress of arbitration in the cluster.
    *`node_id`* is the node ID of the management node or SQL node selected as the
    arbitrator. *`state_code`* is an arbitration state code, as found in `include/kernel/signaldata/ArbitSignalData.hpp`.
    When an error has occurred, an *`error_message`*, also defined in `ArbitSignalData.hpp`,
    is provided. *`ticket_id`* is a unique identifier handed out by the arbitrator
    when it is selected to all the nodes that participated in its selection; this
    is used to ensure that each node requesting arbitration was one of the nodes that
    took part in the selection process. | `ArbitState` | `NodeRestart` | 6 | `INFO`
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `主节点重新启动仲裁线程 [状态=*`state_code`*]` 或 `准备仲裁节点 *`node_id`* [票=*`ticket_id`*]`
    或 `接收仲裁节点 *`node_id`* [票=*`ticket_id`*]` 或 `启动仲裁节点 *`node_id`* [票=*`ticket_id`*]`
    或 `丢失仲裁节点 *`node_id`* - 进程失败 [状态=*`state_code`*]` 或 `丢失仲裁节点 *`node_id`* - 进程退出
    [状态=*`state_code`*]` 或 `丢失仲裁节点 *`node_id`* - *`error_message`* [状态=*`state_code`*]`
    | 这是对集群中仲裁当前状态和进展的报告。*`node_id`*是选定为仲裁者的管理节点或SQL节点的节点ID。*`state_code`*是一个仲裁状态代码，如`include/kernel/signaldata/ArbitSignalData.hpp`中所述。当发生错误时，还会提供一个*`error_message`*，也在`ArbitSignalData.hpp`中定义。*`ticket_id`*是在选定为仲裁者时由仲裁者分发给所有参与其选择的节点的唯一标识符；这用于确保请求仲裁的每个节点都是参与选择过程的节点之一。
    | `仲裁状态` | `节点重启` | 6 | `信息` |'
- en: '| `Arbitration check lost - less than 1/2 nodes left` or `Arbitration check
    won - all node groups and more than 1/2 nodes left` or `Arbitration check won
    - node group majority` or `Arbitration check lost - missing node group` or `Network
    partitioning - arbitration required` or `Arbitration won - positive reply from
    node *`node_id`*` or `Arbitration lost - negative reply from node *`node_id`*`
    or `Network partitioning - no arbitrator available` or `Network partitioning -
    no arbitrator configured` or `Arbitration failure - *`error_message`* [state=*`state_code`*]`
    | This message reports on the result of arbitration. In the event of arbitration
    failure, an *`error_message`* and an arbitration *`state_code`* are provided;
    definitions for both of these are found in `include/kernel/signaldata/ArbitSignalData.hpp`.
    | `ArbitResult` | `NodeRestart` | 2 | `ALERT` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `仲裁检查失败 - 不到1/2节点剩余` 或 `仲裁检查成功 - 所有节点组和超过1/2节点剩余` 或 `仲裁检查成功 - 节点组多数` 或 `仲裁检查失败
    - 缺少节点组` 或 `网络分区 - 需要仲裁` 或 `仲裁成功 - 节点 *`node_id`*` 或 `仲裁失败 - 节点 *`node_id`*` 或
    `网络分区 - 没有仲裁者可用` 或 `网络分区 - 没有配置仲裁者` 或 `仲裁失败 - *`error_message`* [状态=*`state_code`*]`
    | 此消息报告了仲裁的结果。在仲裁失败的情况下，会提供一个*`error_message`*和一个仲裁*`state_code`*；这两者的定义可以在`include/kernel/signaldata/ArbitSignalData.hpp`中找到。
    | `仲裁结果` | `节点重启` | 2 | `警报` |'
- en: '| `Node *`node_id`*: GCP Take over started` | This node is attempting to assume
    responsibility for the next global checkpoint (that is, it is becoming the master
    node) | `GCP_TakeoverStarted` | `NodeRestart` | 7 | `INFO` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `节点 *`node_id`*: GCP 接管开始` | 此节点正在尝试承担下一个全局检查点的责任（即，它正在成为主节点） | `GCP_接管开始`
    | `节点重启` | 7 | `信息` |'
- en: '| `Node *`node_id`*: GCP Take over completed` | This node has become the master,
    and has assumed responsibility for the next global checkpoint | `GCP_TakeoverCompleted`
    | `NodeRestart` | 7 | `INFO` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `节点 *`node_id`*: GCP 接管完成` | 此节点已成为主节点，并已承担下一个全局检查点的责任 | `GCP_接管完成` | `节点重启`
    | 7 | `信息` |'
- en: '| `Node *`node_id`*: LCP Take over started` | This node is attempting to assume
    responsibility for the next set of local checkpoints (that is, it is becoming
    the master node) | `LCP_TakeoverStarted` | `NodeRestart` | 7 | `INFO` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: LCP接管已启动` | 该节点正在尝试承担下一组本地检查点的责任（即成为主节点） | `LCP_TakeoverStarted`
    | `NodeRestart` | 7 | `INFO` |'
- en: '| `Node *`node_id`*: LCP Take over completed` | This node has become the master,
    and has assumed responsibility for the next set of local checkpoints | `LCP_TakeoverCompleted`
    | `NodeRestart` | 7 | `INFO` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: LCP接管已完成` | 该节点已成为主节点，并已承担下一组本地检查点的责任 | `LCP_TakeoverCompleted`
    | `NodeRestart` | 7 | `INFO` |'
- en: '| `Node *`node_id`*: Trans. Count = *`transactions`*, Commit Count = *`commits`*,
    Read Count = *`reads`*, Simple Read Count = *`simple_reads`*, Write Count = *`writes`*,
    AttrInfo Count = *`AttrInfo_objects`*, Concurrent Operations = *`concurrent_operations`*,
    Abort Count = *`aborts`*, Scans = *`scans`*, Range scans = *`range_scans`*` |
    This report of transaction activity is given approximately once every 10 seconds
    | `TransReportCounters` | `Statistic` | 8 | `INFO` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 事务计数 = *`transactions`*，提交计数 = *`commits`*，读取计数 = *`reads`*，简单读取计数
    = *`simple_reads`*，写入计数 = *`writes`*，AttrInfo计数 = *`AttrInfo_objects`*，并发操作 =
    *`concurrent_operations`*，中止计数 = *`aborts`*，扫描 = *`scans`*，范围扫描 = *`range_scans`*`
    | 大约每10秒提供一次的事务活动报告 | `TransReportCounters` | `Statistic` | 8 | `INFO` |'
- en: '| `Node *`node_id`*: Operations=*`operations`*` | Number of operations performed
    by this node, provided approximately once every 10 seconds | `OperationReportCounters`
    | `Statistic` | 8 | `INFO` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: Operations=*`operations`*` | 该节点执行的操作数量，大约每10秒提供一次 | `OperationReportCounters`
    | `Statistic` | 8 | `INFO` |'
- en: '| `Node *`node_id`*: Table with ID = *`table_id`* created` | A table having
    the table ID shown has been created | `TableCreated` | `Statistic` | 7 | `INFO`
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: ID为 *`table_id`* 的表已创建` | 已创建具有显示的表ID的表 | `TableCreated`
    | `Statistic` | 7 | `INFO` |'
- en: '| `Node *`node_id`*: Mean loop Counter in doJob last 8192 times = *`count`*`
    |  | `JobStatistic` | `Statistic` | 9 | `INFO` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 在doJob中最后8192次的平均循环计数 = *`count`*` |  | `JobStatistic`
    | `Statistic` | 9 | `INFO` |'
- en: '| `Mean send size to Node = *`node_id`* last 4096 sends = *`bytes`* bytes`
    | This node is sending an average of *`bytes`* bytes per send to node *`node_id`*
    | `SendBytesStatistic` | `Statistic` | 9 | `INFO` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `平均发送大小到节点 = *`node_id`* 最后4096次发送 = *`bytes`* 字节` | 该节点每次发送到节点 *`node_id`*
    的平均发送 *`bytes`* 字节 | `SendBytesStatistic` | `Statistic` | 9 | `INFO` |'
- en: '| `Mean receive size to Node = *`node_id`* last 4096 sends = *`bytes`* bytes`
    | This node is receiving an average of *`bytes`* of data each time it receives
    data from node *`node_id`* | `ReceiveBytesStatistic` | `Statistic` | 9 | `INFO`
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `平均接收大小到节点 = *`node_id`* 最后4096次发送 = *`bytes`* 字节` | 每次从节点 *`node_id`* 接收数据时，该节点平均接收
    *`bytes`* 字节的数据 | `ReceiveBytesStatistic` | `Statistic` | 9 | `INFO` |'
- en: '| `Node *`node_id`*: Data usage is *`data_memory_percentage`*% (*`data_pages_used`*
    32K pages of total *`data_pages_total`*)` / `Node *`node_id`*: Index usage is
    *`index_memory_percentage`*% (*`index_pages_used`* 8K pages of total *`index_pages_total`*)`
    | This report is generated when a [`DUMP 1000`](/doc/ndb-internals/en/dump-command-1000.html)
    command is issued in the cluster management client | `MemoryUsage` | `Statistic`
    | 5 | `INFO` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 数据使用率为 *`data_memory_percentage`*%（*`data_pages_used`*
    32K页，总共 *`data_pages_total`*）` / `Node *`node_id`*: 索引使用率为 *`index_memory_percentage`*%（*`index_pages_used`*
    8K页，总共 *`index_pages_total`*）` | 当在集群管理客户端中发出 [`DUMP 1000`](/doc/ndb-internals/en/dump-command-1000.html)
    命令时生成此报告 | `MemoryUsage` | `Statistic` | 5 | `INFO` |'
- en: '| `Node *`node1_id`*: Transporter to node *`node2_id`* reported error *`error_code`*:
    *`error_message`*` | A transporter error occurred while communicating with node
    *`node2_id`*; for a listing of transporter error codes and messages, see [NDB
    Transporter Errors](/doc/ndb-internals/en/ndb-transporter-errors.html), in [MySQL
    NDB Cluster Internals Manual](/doc/ndb-internals/en/) | `TransporterError` | `Error`
    | 2 | `ERROR` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node1_id`*: 到节点 *`node2_id`* 的传输器报告错误 *`error_code`*: *`error_message`*`
    | 与节点 *`node2_id`* 通信时发生传输器错误；有关传输器错误代码和消息的列表，请参阅[ NDB传输器错误](/doc/ndb-internals/en/ndb-transporter-errors.html)，在[
    MySQL NDB集群内部手册](/doc/ndb-internals/en/)中 | `TransporterError` | `Error` | 2 |
    `ERROR` |'
- en: '| `Node *`node1_id`*: Transporter to node *`node2_id`* reported error *`error_code`*:
    *`error_message`*` | A warning of a potential transporter problem while communicating
    with node *`node2_id`*; for a listing of transporter error codes and messages,
    see [NDB Transporter Errors](/doc/ndb-internals/en/ndb-transporter-errors.html),
    for more information | `TransporterWarning` | `Error` | 8 | `WARNING` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node1_id`*: 传输到节点 *`node2_id`* 报告错误 *`error_code`*: *`error_message`*`
    | 在与节点 *`node2_id`* 通信时出现潜在传输器问题的警告；有关传输器错误代码和消息的列表，请参见[NDB 传输器错误](/doc/ndb-internals/en/ndb-transporter-errors.html)，有关更多信息
    |'
- en: '| `Node *`node1_id`*: Node *`node2_id`* missed heartbeat *`heartbeat_id`*`
    | This node missed a heartbeat from node *`node2_id`* | `MissedHeartbeat` | `Error`
    | 8 | `WARNING` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node1_id`*: 节点 *`node2_id`* 丢失心跳 *`heartbeat_id`*` | 这个节点丢失了来自节点
    *`node2_id`* 的心跳 |'
- en: '| `Node *`node1_id`*: Node *`node2_id`* declared dead due to missed heartbeat`
    | This node has missed at least 3 heartbeats from node *`node2_id`*, and so has
    declared that node “dead” | `DeadDueToHeartbeat` | `Error` | 8 | `ALERT` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node1_id`*: 节点 *`node2_id`* 因丢失心跳而被宣告死亡` | 这个节点已经至少丢失了来自节点 *`node2_id`*
    的 3 个心跳，因此宣告该节点“死亡” |'
- en: '| `Node *`node1_id`*: Node Sent Heartbeat to node = *`node2_id`*` | This node
    has sent a heartbeat to node *`node2_id`* | `SentHeartbeat` | `Info` | 12 | `INFO`
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node1_id`*: 向节点发送心跳 = *`node2_id`*` | 这个节点已向节点 *`node2_id`* 发送了心跳
    |'
- en: '| `Node *`node_id`*: Event buffer status (*`object_id`*): used=*`bytes_used`*
    (*`percent_used`*% of alloc) alloc=*`bytes_allocated`* max=*`bytes_available`*
    latest_consumed_epoch=*`latest_consumed_epoch`* latest_buffered_epoch=*`latest_buffered_epoch`*
    report_reason=*`report_reason`*` | This report is seen during heavy event buffer
    usage, for example, when many updates are being applied in a relatively short
    period of time; the report shows the number of bytes and the percentage of event
    buffer memory used, the bytes allocated and percentage still available, and the
    latest buffered and consumed epochs; for more information, see [Section 25.6.2.3,
    “Event Buffer Reporting in the Cluster Log”](mysql-cluster-logs-event-buffer.html
    "25.6.2.3 Event Buffer Reporting in the Cluster Log") | `EventBufferStatus2` |
    `Info` | 7 | `INFO` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 事件缓冲区状态 (*`object_id`*): 已使用=*`bytes_used`* (*`percent_used`*%
    of alloc) 分配=*`bytes_allocated`* 最大=*`bytes_available`* 最新消耗的时代=*`latest_consumed_epoch`*
    最新缓冲的时代=*`latest_buffered_epoch`* 报告原因=*`report_reason`*` | 在事件缓冲区使用量较大时出现此报告，例如，在相对较短的时间内应用了许多更新时；报告显示了已使用的事件缓冲区内存的字节数和百分比，仍然可用的字节数和百分比，以及最新的缓冲和消耗时代；有关更多信息，请参见[第 25.6.2.3
    节，“集群日志中的事件缓冲区报告”](mysql-cluster-logs-event-buffer.html "25.6.2.3 集群日志中的事件缓冲区报告")
    |'
- en: '| `Node *`node_id`*: Entering single user mode`, `Node *`node_id`*: Entered
    single user mode Node *`API_node_id`* has exclusive access`, `Node *`node_id`*:
    Entering single user mode` | These reports are written to the cluster log when
    entering and exiting single user mode; *`API_node_id`* is the node ID of the API
    or SQL having exclusive access to the cluster (for more information, see [Section 25.6.6,
    “NDB Cluster Single User Mode”](mysql-cluster-single-user-mode.html "25.6.6 NDB
    Cluster Single User Mode")); the message `Unknown single user report *`API_node_id`*`
    indicates an error has taken place and should never be seen in normal operation
    | `SingleUser` | `Info` | 7 | `INFO` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 进入单用户模式`, `Node *`node_id`*: 进入单用户模式 节点 *`API_node_id`*
    具有独占访问权限`, `Node *`node_id`*: 进入单用户模式` | 当进入和退出单用户模式时，这些报告将被写入集群日志；*`API_node_id`*
    是具有对集群的独占访问权限的 API 或 SQL 的节点 ID（有关更多信息，请参见[第 25.6.6 节，“NDB 集群单用户模式”](mysql-cluster-single-user-mode.html
    "25.6.6 NDB 集群单用户模式")）；消息 `未知单用户报告 *`API_node_id`*` 表示发生了错误，正常情况下不应看到 |'
- en: '| `Node *`node_id`*: Backup *`backup_id`* started from node *`mgm_node_id`*`
    | A backup has been started using the management node having *`mgm_node_id`*;
    this message is also displayed in the cluster management client when the [`START
    BACKUP`](mysql-cluster-backup-using-management-client.html "25.6.8.2 Using The
    NDB Cluster Management Client to Create a Backup") command is issued; for more
    information, see [Section 25.6.8.2, “Using The NDB Cluster Management Client to
    Create a Backup”](mysql-cluster-backup-using-management-client.html "25.6.8.2 Using
    The NDB Cluster Management Client to Create a Backup") | `BackupStarted` | `Backup`
    | 7 | `INFO` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 从节点 *`mgm_node_id`* 开始的备份已启动` | 使用具有 *`mgm_node_id`* 的管理节点启动了备份；当发出[`START
    BACKUP`](mysql-cluster-backup-using-management-client.html "25.6.8.2 使用NDB集群管理客户端创建备份")命令时，此消息也会显示在集群管理客户端中；有关更多信息，请参阅[第25.6.8.2节，“使用NDB集群管理客户端创建备份”](mysql-cluster-backup-using-management-client.html
    "25.6.8.2 使用NDB集群管理客户端创建备份") | `备份已启动` | `备份` | 7 | `信息` |'
- en: '| `Node *`node_id`*: Backup *`backup_id`* started from node *`mgm_node_id`*
    completed. StartGCP: *`start_gcp`* StopGCP: *`stop_gcp`* #Records: *`records`*
    #LogRecords: *`log_records`* Data: *`data_bytes`* bytes Log: *`log_bytes`* bytes`
    | The backup having the ID *`backup_id`* has been completed; for more information,
    see [Section 25.6.8.2, “Using The NDB Cluster Management Client to Create a Backup”](mysql-cluster-backup-using-management-client.html
    "25.6.8.2 Using The NDB Cluster Management Client to Create a Backup") | `BackupCompleted`
    | `Backup` | 7 | `INFO` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 从节点 *`mgm_node_id`* 开始的备份 *`backup_id`* 已完成。StartGCP:
    *`start_gcp`* StopGCP: *`stop_gcp`* #记录数：*`records`* #日志记录数：*`log_records`* 数据：*`data_bytes`*
    字节 日志：*`log_bytes`* 字节` | 具有ID *`backup_id`* 的备份已完成；有关更多信息，请参阅[第25.6.8.2节，“使用NDB集群管理客户端创建备份”](mysql-cluster-backup-using-management-client.html
    "25.6.8.2 使用NDB集群管理客户端创建备份") | `备份已完成` | `备份` | 7 | `信息` |'
- en: '| `Node *`node_id`*: Backup request from *`mgm_node_id`* failed to start. Error:
    *`error_code`*` | The backup failed to start; for error codes, see [MGM API Errors](/doc/ndbapi/en/mgm-errors.html)
    | `BackupFailedToStart` | `Backup` | 7 | `ALERT` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 来自 *`mgm_node_id`* 的备份请求启动失败。错误：*`error_code`*` | 备份启动失败；有关错误代码，请参阅[MGM
    API错误](/doc/ndbapi/en/mgm-errors.html) | `备份启动失败` | `备份` | 7 | `警报` |'
- en: '| `Node *`node_id`*: Backup *`backup_id`* started from *`mgm_node_id`* has
    been aborted. Error: *`error_code`*` | The backup was terminated after starting,
    possibly due to user intervention | `BackupAborted` | `Backup` | 7 | `ALERT` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `Node *`node_id`*: 从 *`mgm_node_id`* 开始的备份 *`backup_id`* 已中止。错误：*`error_code`*`
    | 备份在启动后被终止，可能是由于用户干预 | `备份已中止` | `备份` | 7 | `警报` |'
- en: '| Log Message | Description | Event Name | Event Type | Priority | Severity
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: 日志消息 | 描述 | 事件名称 | 事件类型 | 优先级 | 严重程度 |
