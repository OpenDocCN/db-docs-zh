- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-syntax.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-syntax.html)
- en: 25.2.7.1 Noncompliance with SQL Syntax in NDB Cluster
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 25.2.7.1 NDB Cluster 中与 SQL 语法不符
- en: 'Some SQL statements relating to certain MySQL features produce errors when
    used with [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables,
    as described in the following list:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与某些 MySQL 功能相关的某些 SQL 语句在与[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0")表一起使用时会产生错误，如下列表所述：
- en: '**Temporary tables. ** Temporary tables are not supported. Trying either to
    create a temporary table that uses the [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") storage engine or to alter an existing temporary table to use
    [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") fails with the
    error Table storage engine ''ndbcluster'' does not support the create option ''TEMPORARY''.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**临时表。** 不支持临时表。尝试创建使用[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0")存储引擎的临时表或更改现有临时表以使用[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0")都会失败，并显示错误消息表存储引擎''ndbcluster''不支持创建选项''TEMPORARY''。'
- en: '**Indexes and keys in NDB tables. ** Keys and indexes on NDB Cluster tables
    are subject to the following limitations:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NDB 表中的索引和键。** NDB Cluster 表上的键和索引受以下限制：'
- en: '**Column width. ** Attempting to create an index on an `NDB` table column whose
    width is greater than 3072 bytes succeeds, but only the first 3072 bytes are actually
    used for the index. In such cases, a warning Specified key was too long; max key
    length is 3072 bytes is issued, and a [`SHOW CREATE TABLE`](show-create-table.html
    "15.7.7.10 SHOW CREATE TABLE Statement") statement shows the length of the index
    as 3072.'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列宽。** 尝试在宽度大于3072字节的`NDB`表列上创建索引会成功，但实际上只有前3072字节用于索引。在这种情况下，会发出警告Specified
    key was too long; max key length is 3072 bytes，并且[`SHOW CREATE TABLE`](show-create-table.html
    "15.7.7.10 SHOW CREATE TABLE Statement")语句显示索引的长度为3072。'
- en: '**TEXT and BLOB columns. ** You cannot create indexes on [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") table columns that use any of the [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") or [`BLOB`](blob.html "13.3.4 The BLOB and TEXT
    Types") data types.'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TEXT 和 BLOB 列。** 你不能在使用[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0")表列的[`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")或[`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types")数据类型上创建索引。'
- en: '**FULLTEXT indexes. ** The [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB
    Cluster 8.0") storage engine does not support `FULLTEXT` indexes, which are possible
    for [`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine") and
    [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    tables only.'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FULLTEXT 索引。** [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")存储引擎不支持`FULLTEXT`索引，这仅适用于[`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine")和[`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine")表。'
- en: However, you can create indexes on [`VARCHAR`](char.html "13.3.2 The CHAR and
    VARCHAR Types") columns of [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0") tables.
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但是，你可以在[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")表的[`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")列上创建索引。
- en: '**USING HASH keys and NULL. ** Using nullable columns in unique keys and primary
    keys means that queries using these columns are handled as full table scans. To
    work around this issue, make the column `NOT NULL`, or re-create the index without
    the `USING HASH` option.'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 HASH 键和 NULL。** 在唯一键和主键中使用可空列意味着使用这些列的查询将被处理为全表扫描。要解决此问题，请使列`NOT NULL`，或重新创建索引而不使用`USING
    HASH`选项。'
- en: '**Prefixes. ** There are no prefix indexes; only entire columns can be indexed.
    (The size of an `NDB` column index is always the same as the width of the column
    in bytes, up to and including 3072 bytes, as described earlier in this section.
    Also see [Section 25.2.7.6, “Unsupported or Missing Features in NDB Cluster”](mysql-cluster-limitations-unsupported.html
    "25.2.7.6 Unsupported or Missing Features in NDB Cluster"), for additional information.)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前缀。** 没有前缀索引；只能对整个列进行索引。（`NDB`列索引的大小始终与列的宽度相同，以字节为单位，最多为3072字节，如本节前面描述的那样。另请参阅[Section 25.2.7.6,
    “Unsupported or Missing Features in NDB Cluster”](mysql-cluster-limitations-unsupported.html
    "25.2.7.6 Unsupported or Missing Features in NDB Cluster")，获取更多信息。）'
- en: '**BIT columns. ** A [`BIT`](bit-type.html "13.1.5 Bit-Value Type - BIT") column
    cannot be a primary key, unique key, or index, nor can it be part of a composite
    primary key, unique key, or index.'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BIT列。** [`BIT`](bit-type.html "13.1.5 Bit-Value Type - BIT")列不能作为主键、唯一键或索引，也不能成为复合主键、唯一键或索引的一部分。'
- en: '**AUTO_INCREMENT columns. ** Like other MySQL storage engines, the [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") storage engine can handle a maximum of one
    `AUTO_INCREMENT` column per table, and this column must be indexed. However, in
    the case of an NDB table with no explicit primary key, an `AUTO_INCREMENT` column
    is automatically defined and used as a “hidden” primary key. For this reason,
    you cannot create an `NDB` table having an `AUTO_INCREMENT` column and no explicit
    primary key.'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AUTO_INCREMENT列。** 与其他MySQL存储引擎一样，[`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0")存储引擎每个表最多只能处理一个`AUTO_INCREMENT`列，并且这个列必须被索引。然而，在没有显式主键的NDB表中，一个`AUTO_INCREMENT`列会被自动定义并用作“隐藏”主键。因此，你不能创建一个具有`AUTO_INCREMENT`列但没有显式主键的`NDB`表。'
- en: 'The following [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")
    statements do not work, as shown here:'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句不起作用，如下所示：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following statement creates a table with a primary key, an `AUTO_INCREMENT`
    column, and an index on this column, and succeeds:'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的语句创建了一个具有主键、一个`AUTO_INCREMENT`列以及对该列的索引的表，并成功：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Restrictions on foreign keys. ** Support for foreign key constraints in NDB
    8.0 is comparable to that provided by [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine"), subject to the following restrictions:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外键的限制。** NDB 8.0中对外键约束的支持与[`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine")提供的相似，但受以下限制：'
- en: Every column referenced as a foreign key requires an explicit unique key, if
    it is not the table's primary key.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个作为外键引用的列都需要一个显式的唯一键，如果它不是表的主键。
- en: '`ON UPDATE CASCADE` is not supported when the reference is to the parent table''s
    primary key.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当引用是指向父表的主键时，不支持`ON UPDATE CASCADE`。
- en: This is because an update of a primary key is implemented as a delete of the
    old row (containing the old primary key) plus an insert of the new row (with a
    new primary key). This is not visible to the `NDB` kernel, which views these two
    rows as being the same, and thus has no way of knowing that this update should
    be cascaded.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是因为对主键的更新被实现为删除旧行（包含旧主键的行）以及插入新行（带有新主键）。这对于`NDB`内核来说是不可见的，它将这两行视为相同，因此无法知道应该级联执行此更新。
- en: '`ON DELETE CASCADE` is also not supported where the child table contains one
    or more columns of any of the [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")
    or [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") types. (Bug #89511, Bug
    #27484882)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '当子表包含一个或多个[`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")或[`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types")类型的列时，也不支持`ON DELETE CASCADE`。（Bug #89511, Bug
    #27484882）'
- en: '`SET DEFAULT` is not supported. (Also not supported by [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine").)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持`SET DEFAULT`。（`InnoDB`也不支持。）
- en: The `NO ACTION` keyword is accepted but treated as `RESTRICT`. `NO ACTION`,
    which is a standard SQL keyword, is the default in MySQL 8.0\. (Also the same
    as with `InnoDB`.)
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO ACTION`关键字被接受但被视为`RESTRICT`。`NO ACTION`是标准SQL关键字，在MySQL 8.0中是默认的。（与`InnoDB`相同。）'
- en: 'In earlier versions of NDB Cluster, when creating a table with foreign key
    referencing an index in another table, it sometimes appeared possible to create
    the foreign key even if the order of the columns in the indexes did not match,
    due to the fact that an appropriate error was not always returned internally.
    A partial fix for this issue improved the error used internally to work in most
    cases; however, it remains possible for this situation to occur in the event that
    the parent index is a unique index. (Bug #18094360)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在早期版本的NDB Cluster中，当创建一个具有外键引用另一张表中索引的表时，有时似乎可以创建外键，即使索引中列的顺序不匹配，这是因为并不总是返回适当的错误。对于这个问题的部分修复改进了内部使用的错误以在大多数情况下工作；然而，在父索引是唯一索引的情况下，仍然可能发生这种情况。（Bug
    #18094360）'
- en: For more information, see [Section 15.1.20.5, “FOREIGN KEY Constraints”](create-table-foreign-keys.html
    "15.1.20.5 FOREIGN KEY Constraints"), and [Section 1.6.3.2, “FOREIGN KEY Constraints”](constraint-foreign-key.html
    "1.6.3.2 FOREIGN KEY Constraints").
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[第15.1.20.5节，“外键约束”](create-table-foreign-keys.html "15.1.20.5 FOREIGN
    KEY Constraints")和[第1.6.3.2节，“外键约束”](constraint-foreign-key.html "1.6.3.2 FOREIGN
    KEY Constraints")。
- en: '**NDB Cluster and geometry data types. ** Geometry data types (`WKT` and `WKB`)
    are supported for [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")
    tables. However, spatial indexes are not supported.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NDB集群和几何数据类型。** 几何数据类型（`WKT`和`WKB`）支持[`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0")表。但是，不支持空间索引。'
- en: '**Character sets and binary log files. ** Currently, the `ndb_apply_status`
    and `ndb_binlog_index` tables are created using the `latin1` (ASCII) character
    set. Because names of binary logs are recorded in this table, binary log files
    named using non-Latin characters are not referenced correctly in these tables.
    This is a known issue, which we are working to fix. (Bug #50226)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符集和二进制日志文件。** 目前，`ndb_apply_status`和`ndb_binlog_index`表使用`latin1`（ASCII）字符集创建。由于二进制日志的名称记录在此表中，因此使用非拉丁字符命名的二进制日志文件在这些表中无法正确引用。这是一个已知问题，我们正在努力解决。（Bug
    #50226）'
- en: To work around this problem, use only Latin-1 characters when naming binary
    log files or setting any the [`--basedir`](server-system-variables.html#sysvar_basedir),
    [`--log-bin`](replication-options-binary-log.html#option_mysqld_log-bin), or [`--log-bin-index`](replication-options-binary-log.html#option_mysqld_log-bin-index)
    options.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要解决此问题，请在命名二进制日志文件或设置[`--basedir`](server-system-variables.html#sysvar_basedir)、[`--log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)或[`--log-bin-index`](replication-options-binary-log.html#option_mysqld_log-bin-index)选项时仅使用Latin-1字符。
- en: '**Creating NDB tables with user-defined partitioning. ** Support for user-defined
    partitioning in NDB Cluster is restricted to [`LINEAR`] `KEY` partitioning. Using
    any other partitioning type with `ENGINE=NDB` or `ENGINE=NDBCLUSTER` in a [`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement results
    in an error.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用用户定义的分区创建NDB表。** NDB集群中对用户定义的分区的支持仅限于[`LINEAR`] `KEY`分区。在[`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement")语句中使用`ENGINE=NDB`或`ENGINE=NDBCLUSTER`与任何其他分区类型会导致错误。'
- en: It is possible to override this restriction, but doing so is not supported for
    use in production settings. For details, see [User-defined partitioning and the
    NDB storage engine (NDB Cluster)](partitioning-limitations-storage-engines.html#partitioning-limitations-ndb
    "User-defined partitioning and the NDB storage engine (NDB Cluster)").
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以覆盖此限制，但不支持在生产环境中使用。有关详细信息，请参见[用户定义的分区和NDB存储引擎（NDB集群）](partitioning-limitations-storage-engines.html#partitioning-limitations-ndb
    "User-defined partitioning and the NDB storage engine (NDB Cluster)")。
- en: '**Default partitioning scheme. ** All NDB Cluster tables are by default partitioned
    by `KEY` using the table''s primary key as the partitioning key. If no primary
    key is explicitly set for the table, the “hidden” primary key automatically created
    by the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") storage
    engine is used instead. For additional discussion of these and related issues,
    see [Section 26.2.5, “KEY Partitioning”](partitioning-key.html "26.2.5 KEY Partitioning").'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**默认分区方案。** 所有NDB集群表默认通过使用表的主键作为分区键进行`KEY`分区。如果未为表明确设置主键，则由[`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0")存储引擎自动创建的“隐藏”主键将被使用。有关这些和相关问题的更多讨论，请参见[第26.2.5节，“KEY分区”](partitioning-key.html
    "26.2.5 KEY Partitioning")。'
- en: '[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") and [`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") statements that would
    cause a user-partitioned [`NDBCLUSTER`](mysql-cluster.html "Chapter 25 MySQL NDB
    Cluster 8.0") table not to meet either or both of the following two requirements
    are not permitted, and fail with an error:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")和[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句如果导致用户分区的[`NDBCLUSTER`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0")表不满足以下两个要求中的任何一个或两个都不允许，并将失败并显示错误：'
- en: The table must have an explicit primary key.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表必须有显式的主键。
- en: All columns listed in the table's partitioning expression must be part of the
    primary key.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表中分区表达式中列出的所有列必须是主键的一部分。
- en: '**Exception. ** If a user-partitioned [`NDBCLUSTER`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") table is created using an empty column-list (that is, using
    `PARTITION BY [LINEAR] KEY()`), then no explicit primary key is required.'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**例外。** 如果使用空列列表（即使用`PARTITION BY [LINEAR] KEY()`）创建用户分区的[`NDBCLUSTER`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")表，则不需要显式主键。'
- en: '**Maximum number of partitions for NDBCLUSTER tables. ** The maximum number
    of partitions that can defined for a [`NDBCLUSTER`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") table when employing user-defined partitioning is 8 per node
    group. (See [Section 25.2.2, “NDB Cluster Nodes, Node Groups, Fragment Replicas,
    and Partitions”](mysql-cluster-nodes-groups.html "25.2.2 NDB Cluster Nodes, Node
    Groups, Fragment Replicas, and Partitions"), for more information about NDB Cluster
    node groups.'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**NDBCLUSTER表的最大分区数。** 当使用用户定义的分区时，[`NDBCLUSTER`](mysql-cluster.html "第25章
    MySQL NDB Cluster 8.0")表可以定义的最大分区数为每个节点组8个。（有关NDB Cluster节点组的更多信息，请参见[第25.2.2节，“NDB
    Cluster节点、节点组、片段副本和分区”](mysql-cluster-nodes-groups.html "25.2.2 NDB Cluster节点、节点组、片段副本和分区")）。'
- en: '**DROP PARTITION not supported. ** It is not possible to drop partitions from
    [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables using `ALTER
    TABLE ... DROP PARTITION`. The other partitioning extensions to [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")—`ADD PARTITION`, `REORGANIZE PARTITION`, and `COALESCE
    PARTITION`—are supported for NDB tables, but use copying and so are not optimized.
    See [Section 26.3.1, “Management of RANGE and LIST Partitions”](partitioning-management-range-list.html
    "26.3.1 Management of RANGE and LIST Partitions") and [Section 15.1.9, “ALTER
    TABLE Statement”](alter-table.html "15.1.9 ALTER TABLE Statement").'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**不支持DROP PARTITION。** 无法使用`ALTER TABLE ... DROP PARTITION`从[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")表中删除分区。对于NDB表，支持其他分区扩展——`ADD PARTITION`、`REORGANIZE
    PARTITION`和`COALESCE PARTITION`，但使用复制，因此不是优化的。请参见[第26.3.1节，“RANGE和LIST分区的管理”](partitioning-management-range-list.html
    "26.3.1 RANGE和LIST分区的管理")和[第15.1.9节，“ALTER TABLE语句”](alter-table.html "15.1.9
    ALTER TABLE语句")。'
- en: '**Partition selection. ** Partition selection is not supported for `NDB` tables.
    See [Section 26.5, “Partition Selection”](partitioning-selection.html "26.5 Partition
    Selection"), for more information.'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**分区选择。** 不支持为`NDB`表选择分区。有关更多信息，请参见[第26.5节，“分区选择”](partitioning-selection.html
    "26.5 分区选择")。'
- en: '**JSON data type. ** The MySQL [`JSON`](json.html "13.5 The JSON Data Type")
    data type is supported for `NDB` tables in the [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") supplied with NDB 8.0.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON数据类型。** MySQL中的[`JSON`](json.html "13.5 JSON数据类型")数据类型在NDB 8.0中的[**mysqld**](mysqld.html
    "6.3.1 mysqld — MySQL服务器")中支持`NDB`表。'
- en: An `NDB` table can have a maximum of 3 `JSON` columns.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个`NDB`表最多可以有3个`JSON`列。
- en: The NDB API has no special provision for working with `JSON` data, which it
    views simply as `BLOB` data. Handling data as `JSON` must be performed by the
    application.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NDB API没有专门用于处理`JSON`数据的功能，它将其简单地视为`BLOB`数据。处理数据为`JSON`必须由应用程序执行。
