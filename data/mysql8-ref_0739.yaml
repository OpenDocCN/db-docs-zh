- en: 13.1.6 Numeric Type Attributes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.1.6 数字类型属性
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/numeric-type-attributes.html](https://dev.mysql.com/doc/refman/8.0/en/numeric-type-attributes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/numeric-type-attributes.html](https://dev.mysql.com/doc/refman/8.0/en/numeric-type-attributes.html)
- en: MySQL supports an extension for optionally specifying the display width of integer
    data types in parentheses following the base keyword for the type. For example,
    [`INT(4)`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER, INT,
    SMALLINT, TINYINT, MEDIUMINT, BIGINT") specifies an [`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") with a display width of four digits. This optional display width may
    be used by applications to display integer values having a width less than the
    width specified for the column by left-padding them with spaces. (That is, this
    width is present in the metadata returned with result sets. Whether it is used
    is up to the application.)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL支持一个扩展，可选择在类型的基本关键字后面的括号中指定整数数据类型的显示宽度。例如，[`INT(4)`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 指定了一个显示宽度为四位数的
    [`INT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT,
    MEDIUMINT, BIGINT")。应用程序可以使用这个可选的显示宽度来显示宽度小于列指定的宽度的整数值，通过左侧用空格填充它们。（也就是说，这个宽度存在于返回结果集的元数据中。是否使用取决于应用程序。）
- en: The display width does *not* constrain the range of values that can be stored
    in the column. Nor does it prevent values wider than the column display width
    from being displayed correctly. For example, a column specified as [`SMALLINT(3)`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") has the usual [`SMALLINT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") range of `-32768`
    to `32767`, and values outside the range permitted by three digits are displayed
    in full using more than three digits.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 显示宽度*不*限制可以存储在列中的值的范围。也不会阻止比列显示宽度更宽的值正确显示。例如，指定为 [`SMALLINT(3)`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 的列具有
    `-32768` 到 `32767` 的通常 [`SMALLINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 范围，超出三位数允许范围的值将使用超过三位数的完整显示。
- en: When used in conjunction with the optional (nonstandard) `ZEROFILL` attribute,
    the default padding of spaces is replaced with zeros. For example, for a column
    declared as [`INT(4) ZEROFILL`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), a value of `5`
    is retrieved as `0005`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当与可选的（非标准的）`ZEROFILL` 属性一起使用时，默认的空格填充被零替换。例如，对于声明为 [`INT(4) ZEROFILL`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 的列，检索到的值为
    `5` 会显示为 `0005`。
- en: Note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `ZEROFILL` attribute is ignored for columns involved in expressions or [`UNION`](union.html
    "15.2.18 UNION Clause") queries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZEROFILL` 属性在涉及表达式或 [`UNION`](union.html "15.2.18 UNION 子句") 查询的列中被忽略。'
- en: If you store values larger than the display width in an integer column that
    has the `ZEROFILL` attribute, you may experience problems when MySQL generates
    temporary tables for some complicated joins. In these cases, MySQL assumes that
    the data values fit within the column display width.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在具有 `ZEROFILL` 属性的整数列中存储大于显示宽度的值，当MySQL为一些复杂的连接生成临时表时，可能会遇到问题。在这些情况下，MySQL假定数据值适合列显示宽度内。
- en: As of MySQL 8.0.17, the `ZEROFILL` attribute is deprecated for numeric data
    types, as is the display width attribute for integer data types. You should expect
    support for `ZEROFILL` and display widths for integer data types to be removed
    in a future version of MySQL. Consider using an alternative means of producing
    the effect of these attributes. For example, applications can use the [`LPAD()`](string-functions.html#function_lpad)
    function to zero-pad numbers up to the desired width, or they can store the formatted
    numbers in [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") columns.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.17开始，`ZEROFILL` 属性对于数字数据类型已被弃用，整数数据类型的显示宽度属性也是如此。您应该期望在未来的MySQL版本中删除对整数数据类型的
    `ZEROFILL` 和显示宽度的支持。考虑使用其他方法来产生这些属性的效果。例如，应用程序可以使用 [`LPAD()`](string-functions.html#function_lpad)
    函数将数字零填充到所需的宽度，或者它们可以将格式化的数字存储在 [`CHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型")
    列中。
- en: All integer types can have an optional (nonstandard) `UNSIGNED` attribute. An
    unsigned type can be used to permit only nonnegative numbers in a column or when
    you need a larger upper numeric range for the column. For example, if an [`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") column is `UNSIGNED`, the size of the column's range is the same but
    its endpoints shift up, from `-2147483648` and `2147483647` to `0` and `4294967295`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有整数类型都可以具有可选的（非标准的）`UNSIGNED`属性。无符号类型可用于在列中仅允许非负数或在需要列的较大上限数值范围时使用。例如，如果[`INT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")列是`UNSIGNED`，则列范围的大小相同，但其端点向上移动，从`-2147483648`和`2147483647`到`0`和`4294967295`。
- en: Floating-point and fixed-point types also can be `UNSIGNED`. As with integer
    types, this attribute prevents negative values from being stored in the column.
    Unlike the integer types, the upper range of column values remains the same. As
    of MySQL 8.0.17, the `UNSIGNED` attribute is deprecated for columns of type [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"), [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"), and [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") (and any synonyms)
    and you should expect support for it to be removed in a future version of MySQL.
    Consider using a simple `CHECK` constraint instead for such columns.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点和定点类型也可以是`UNSIGNED`。与整数类型一样，此属性防止负值存储在列中。与整数类型不同，列值的上限范围保持不变。从MySQL 8.0.17开始，对于[`FLOAT`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")、[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")和[`DECIMAL`](fixed-point-types.html "13.1.3 定点类型（精确值） - DECIMAL,
    NUMERIC")（以及任何同义词）类型的列，`UNSIGNED`属性已被弃用，您应该期望在将来的MySQL版本中删除对其的支持。考虑为这些列使用简单的`CHECK`约束。
- en: If you specify `ZEROFILL` for a numeric column, MySQL automatically adds the
    `UNSIGNED` attribute.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为数字列指定`ZEROFILL`，MySQL会自动添加`UNSIGNED`属性。
- en: Integer or floating-point data types can have the `AUTO_INCREMENT` attribute.
    When you insert a value of `NULL` into an indexed `AUTO_INCREMENT` column, the
    column is set to the next sequence value. Typically this is `*`value`*+1`, where
    *`value`* is the largest value for the column currently in the table. (`AUTO_INCREMENT`
    sequences begin with `1`.)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 整数或浮点数据类型可以具有`AUTO_INCREMENT`属性。当您将`NULL`值插入到索引的`AUTO_INCREMENT`列中时，该列将设置为下一个序列值。通常情况下，这是`*`value`*+1`，其中*`value`*是当前表中该列的最大值。（`AUTO_INCREMENT`序列从`1`开始。）
- en: Storing `0` into an `AUTO_INCREMENT` column has the same effect as storing `NULL`,
    unless the [`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero)
    SQL mode is enabled.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将`0`存储到`AUTO_INCREMENT`列中与存储`NULL`具有相同效果，除非启用了[`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero)
    SQL模式。
- en: Inserting `NULL` to generate `AUTO_INCREMENT` values requires that the column
    be declared `NOT NULL`. If the column is declared `NULL`, inserting `NULL` stores
    a `NULL`. When you insert any other value into an `AUTO_INCREMENT` column, the
    column is set to that value and the sequence is reset so that the next automatically
    generated value follows sequentially from the inserted value.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 插入`NULL`以生成`AUTO_INCREMENT`值要求该列声明为`NOT NULL`。如果列声明为`NULL`，插入`NULL`将存储一个`NULL`。当您将任何其他值插入到`AUTO_INCREMENT`列中时，该列将设置为该值，并且序列将被重置，以便下一个自动生成的值从插入的值顺序生成。
- en: Negative values for `AUTO_INCREMENT` columns are not supported.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不支持为`AUTO_INCREMENT`列使用负值。
- en: '`CHECK` constraints cannot refer to columns that have the `AUTO_INCREMENT`
    attribute, nor can the `AUTO_INCREMENT` attribute be added to existing columns
    that are used in `CHECK` constraints.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHECK`约束不能引用具有`AUTO_INCREMENT`属性的列，也不能将`AUTO_INCREMENT`属性添加到已用于`CHECK`约束的现有列中。'
- en: As of MySQL 8.0.17, `AUTO_INCREMENT` support is deprecated for [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") and [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") columns; you
    should expect it to be removed in a future version of MySQL. Consider removing
    the `AUTO_INCREMENT` attribute from such columns, or convert them to an integer
    type.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.17 版本，对于 [`FLOAT`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE") 和 [`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT,
    DOUBLE") 列，`AUTO_INCREMENT` 支持已被弃用；你应该期待在未来的 MySQL 版本中将其移除。考虑从这些列中移除 `AUTO_INCREMENT`
    属性，或将其转换为整数类型。
