- en: 17.7.2 InnoDB Transaction Model
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.7.2 InnoDB事务模型
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-model.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-model.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-model.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-model.html)
- en: '[17.7.2.1 Transaction Isolation Levels](innodb-transaction-isolation-levels.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[17.7.2.1 事务隔离级别](innodb-transaction-isolation-levels.html)'
- en: '[17.7.2.2 autocommit, Commit, and Rollback](innodb-autocommit-commit-rollback.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[17.7.2.2 自动提交、提交和回滚](innodb-autocommit-commit-rollback.html)'
- en: '[17.7.2.3 Consistent Nonlocking Reads](innodb-consistent-read.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[17.7.2.3 一致性非锁定读取](innodb-consistent-read.html)'
- en: '[17.7.2.4 Locking Reads](innodb-locking-reads.html)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[17.7.2.4 锁定读取](innodb-locking-reads.html)'
- en: The `InnoDB` transaction model aims to combine the best properties of a [multi-versioning](glossary.html#glos_mvcc
    "MVCC") database with traditional two-phase locking. `InnoDB` performs locking
    at the row level and runs queries as nonlocking [consistent reads](glossary.html#glos_consistent_read
    "consistent read") by default, in the style of Oracle. The lock information in
    `InnoDB` is stored space-efficiently so that lock escalation is not needed. Typically,
    several users are permitted to lock every row in `InnoDB` tables, or any random
    subset of the rows, without causing `InnoDB` memory exhaustion.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`事务模型旨在将多版本数据库的最佳特性与传统的两阶段锁定相结合。`InnoDB`在行级别执行锁定，并默认以Oracle风格的非锁定[一致性读取](glossary.html#glos_consistent_read
    "consistent read")运行查询。`InnoDB`中的锁信息以节省空间的方式存储，因此不需要锁升级。通常，允许多个用户锁定`InnoDB`表中的每一行，或任意随机子集的行，而不会导致`InnoDB`内存耗尽。'
