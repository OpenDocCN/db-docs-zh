- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-replication-primary-secondary-replication.html](https://dev.mysql.com/doc/refman/8.0/en/group-replication-primary-secondary-replication.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-replication-primary-secondary-replication.html](https://dev.mysql.com/doc/refman/8.0/en/group-replication-primary-secondary-replication.html)
- en: 20.1.1.1 Source to Replica Replication
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 20.1.1.1 源到副本复制
- en: Traditional MySQL [Replication](replication.html "Chapter 19 Replication") provides
    a simple source to replica approach to replication. The source is the primary,
    and there are one or more replicas, which are secondaries. The source applies
    transactions, commits them and then they are later (thus asynchronously) sent
    to the replicas to be either re-executed (in statement-based replication) or applied
    (in row-based replication). It is a shared-nothing system, where all servers have
    a full copy of the data by default.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的 MySQL [复制](replication.html "第19章 复制") 提供了一种简单的源到副本的复制方法。源是主服务器，副本是从服务器。源应用事务，提交它们，然后稍后（因此是异步的）将它们发送到副本以重新执行（在基于语句的复制中）或应用（在基于行的复制中）。这是一个共享无系统，所有服务器默认都有完整的数据副本。
- en: '**Figure 20.1 MySQL Asynchronous Replication**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**图20.1 MySQL 异步复制**'
- en: '![A transaction received by the source is executed, written to the binary log,
    then committed, and a response is sent to the client application. The record from
    the binary log is sent to the relay logs on Replica 1 and Replica 2 before the
    commit takes place on the source. On each of the replicas, the transaction is
    applied, written to the replica''s binary log, and committed. The commit on the
    source and the commits on the replicas are all independent and asynchronous.](../Images/475abeb89522fe0eba2821a337da4bbc.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![源接收的事务被执行，写入二进制日志，然后提交，并向客户端应用程序发送响应。二进制日志中的记录被发送到副本1和副本2的中继日志，然后在源上进行提交。在每个副本上，事务被应用，写入副本的二进制日志，并提交。源上的提交和副本上的提交都是独立的和异步的。](../Images/475abeb89522fe0eba2821a337da4bbc.png)'
- en: There is also semisynchronous replication, which adds one synchronization step
    to the protocol. This means that the primary waits, at apply time, for the secondary
    to acknowledge that it has *received* the transaction. Only then does the primary
    resume the commit operation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 还有半同步复制，它在协议中添加了一个同步步骤。这意味着主服务器在应用时等待副本确认已*接收*事务。只有在副本确认接收事务后，主服务器才恢复提交操作。
- en: '**Figure 20.2 MySQL Semisynchronous Replication**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**图20.2 MySQL 半同步复制**'
- en: '![A transaction received by the source is executed and written to the binary
    log. The record from the binary log is sent to the relay logs on Replica 1 and
    Replica 2\. The source then waits for an acknowledgement from the replicas. When
    both of the replicas have returned the acknowledgement, the source commits the
    transaction, and a response is sent to the client application. After each replica
    has returned its acknowledgement, it applies the transaction, writes it to the
    binary log, and commits it. The commit on the source depends on the acknowledgement
    from the replicas, but the commits on the replicas are independent from each other
    and from the commit on the source.](../Images/c9e7d87062e6053e853740cb545da45e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![源接收的事务被执行并写入二进制日志。二进制日志中的记录被发送到副本1和副本2的中继日志。然后源等待副本的确认。当两个副本都返回确认后，源提交事务，并向客户端应用程序发送响应。每个副本返回确认后，应用事务，将其写入二进制日志，并提交。源的提交取决于副本的确认，但副本的提交彼此独立，与源的提交独立。](../Images/c9e7d87062e6053e853740cb545da45e.png)'
- en: In the two pictures there is a diagram of the classic asynchronous MySQL Replication
    protocol (and its semisynchronous variant as well). The arrows between the different
    instances represent messages exchanged between servers or messages exchanged between
    servers and the client application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两幅图中有一个经典的异步 MySQL 复制协议的图示（以及其半同步变体）。不同实例之间的箭头代表服务器之间或服务器与客户端应用程序之间交换的消息。
