- en: 15.2.2 DELETE Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.2.2 DELETE语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/delete.html](https://dev.mysql.com/doc/refman/8.0/en/delete.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/delete.html](https://dev.mysql.com/doc/refman/8.0/en/delete.html)
- en: '[`DELETE`](delete.html "15.2.2 DELETE Statement") is a DML statement that removes
    rows from a table.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DELETE`](delete.html "15.2.2 DELETE Statement")是一条从表中删除行的DML语句。'
- en: A [`DELETE`](delete.html "15.2.2 DELETE Statement") statement can start with
    a [`WITH`](with.html "15.2.20 WITH (Common Table Expressions)") clause to define
    common table expressions accessible within the [`DELETE`](delete.html "15.2.2 DELETE
    Statement"). See [Section 15.2.20, “WITH (Common Table Expressions)”](with.html
    "15.2.20 WITH (Common Table Expressions)").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DELETE`](delete.html "15.2.2 DELETE Statement")语句可以以[`WITH`](with.html "15.2.20 WITH
    (Common Table Expressions)")子句开头，以定义在[`DELETE`](delete.html "15.2.2 DELETE Statement")内可访问的公共表达式。请参阅[第15.2.20节，“WITH
    (Common Table Expressions)”](with.html "15.2.20 WITH (Common Table Expressions)")。'
- en: Single-Table Syntax
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单表语法
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `DELETE` statement deletes rows from *`tbl_name`* and returns the number
    of deleted rows. To check the number of deleted rows, call the [`ROW_COUNT()`](information-functions.html#function_row-count)
    function described in [Section 14.15, “Information Functions”](information-functions.html
    "14.15 Information Functions").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`DELETE`语句从*`tbl_name`*中删除行并返回已删除行的数量。要检查已删除行的数量，请调用[第14.15节，“信息函数”](information-functions.html
    "14.15 Information Functions")中描述的[`ROW_COUNT()`](information-functions.html#function_row-count)函数。'
- en: Main Clauses
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主要子句
- en: The conditions in the optional `WHERE` clause identify which rows to delete.
    With no `WHERE` clause, all rows are deleted.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的`WHERE`子句中的条件标识要删除的行。如果没有`WHERE`子句，则删除所有行。
- en: '*`where_condition`* is an expression that evaluates to true for each row to
    be deleted. It is specified as described in [Section 15.2.13, “SELECT Statement”](select.html
    "15.2.13 SELECT Statement").'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*`where_condition`*是一个表达式，对于要删除的每一行都计算为true。它的指定方式如[第15.2.13节，“SELECT语句”](select.html
    "15.2.13 SELECT Statement")中描述的那样。'
- en: If the `ORDER BY` clause is specified, the rows are deleted in the order that
    is specified. The `LIMIT` clause places a limit on the number of rows that can
    be deleted. These clauses apply to single-table deletes, but not multi-table deletes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了`ORDER BY`子句，则按指定的顺序删除行。`LIMIT`子句限制可以删除的行数。这些子句适用于单表删除，但不适用于多表删除。
- en: Multiple-Table Syntax
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多表语法
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Privileges
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 权限
- en: You need the [`DELETE`](privileges-provided.html#priv_delete) privilege on a
    table to delete rows from it. You need only the [`SELECT`](privileges-provided.html#priv_select)
    privilege for any columns that are only read, such as those named in the `WHERE`
    clause.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在表上具有[`DELETE`](privileges-provided.html#priv_delete)权限才能从中删除行。对于仅读取的列（例如`WHERE`子句中命名的列），您只需要具有[`SELECT`](privileges-provided.html#priv_select)权限。
- en: Performance
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 性能
- en: When you do not need to know the number of deleted rows, the [`TRUNCATE TABLE`](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement") statement is a faster way to empty a table
    than a [`DELETE`](delete.html "15.2.2 DELETE Statement") statement with no `WHERE`
    clause. Unlike [`DELETE`](delete.html "15.2.2 DELETE Statement"), [`TRUNCATE TABLE`](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement") cannot be used within a transaction or if
    you have a lock on the table. See [Section 15.1.37, “TRUNCATE TABLE Statement”](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement") and [Section 15.3.6, “LOCK TABLES and UNLOCK
    TABLES Statements”](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当您不需要知道已删除行的数量时，[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE
    Statement")语句是比没有`WHERE`子句的[`DELETE`](delete.html "15.2.2 DELETE Statement")语句更快地清空表的方法。与[`DELETE`](delete.html
    "15.2.2 DELETE Statement")不同，[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement")不能在事务内使用，也不能在表上加锁。请参阅[第15.1.37节，“TRUNCATE TABLE语句”](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement")和[第15.3.6节，“LOCK TABLES和UNLOCK TABLES语句”](lock-tables.html
    "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")。
- en: The speed of delete operations may also be affected by factors discussed in
    [Section 10.2.5.3, “Optimizing DELETE Statements”](delete-optimization.html "10.2.5.3 Optimizing
    DELETE Statements").
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 删除操作的速度也可能受到[第10.2.5.3节，“优化DELETE语句”](delete-optimization.html "10.2.5.3 Optimizing
    DELETE Statements")中讨论的因素的影响。
- en: To ensure that a given [`DELETE`](delete.html "15.2.2 DELETE Statement") statement
    does not take too much time, the MySQL-specific `LIMIT *`row_count`*` clause for
    [`DELETE`](delete.html "15.2.2 DELETE Statement") specifies the maximum number
    of rows to be deleted. If the number of rows to delete is larger than the limit,
    repeat the `DELETE` statement until the number of affected rows is less than the
    `LIMIT` value.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保给定的[`DELETE`](delete.html "15.2.2 DELETE Statement")语句不会花费太多时间，MySQL特定的`LIMIT
    *`row_count`*`子句用于[`DELETE`](delete.html "15.2.2 DELETE Statement")指定要删除的最大行数。如果要删除的行数大于限制，则重复`DELETE`语句，直到受影响的行数小于`LIMIT`值。
- en: Subqueries
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 子查询
- en: You cannot delete from a table and select from the same table in a subquery.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能在子查询中从一个表中删除并从同一个表中选择。
- en: Partitioned Table Support
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分区表支持
- en: '`DELETE` supports explicit partition selection using the `PARTITION` clause,
    which takes a list of the comma-separated names of one or more partitions or subpartitions
    (or both) from which to select rows to be dropped. Partitions not included in
    the list are ignored. Given a partitioned table `t` with a partition named `p0`,
    executing the statement `DELETE FROM t PARTITION (p0)` has the same effect on
    the table as executing [`ALTER TABLE t TRUNCATE PARTITION (p0)`](alter-table.html
    "15.1.9 ALTER TABLE Statement"); in both cases, all rows in partition `p0` are
    dropped.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`DELETE`支持使用`PARTITION`子句进行显式分区选择，该子句接受一个逗号分隔的一个或多个分区或子分区（或两者）的名称列表，从中选择要删除的行。未包含在列表中的分区将被忽略。给定一个具有名为`p0`的分区的分区表`t`，执行语句`DELETE
    FROM t PARTITION (p0)`对表具有与执行[`ALTER TABLE t TRUNCATE PARTITION (p0)`](alter-table.html
    "15.1.9 ALTER TABLE Statement")相同的效果；在这两种情况下，分区`p0`中的所有行都将被删除。'
- en: '`PARTITION` can be used along with a `WHERE` condition, in which case the condition
    is tested only on rows in the listed partitions. For example, `DELETE FROM t PARTITION
    (p0) WHERE c < 5` deletes rows only from partition `p0` for which the condition
    `c < 5` is true; rows in any other partitions are not checked and thus not affected
    by the `DELETE`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`PARTITION`可以与`WHERE`条件一起使用，在这种情况下，条件仅在列出的分区中的行上进行测试。例如，`DELETE FROM t PARTITION
    (p0) WHERE c < 5`仅删除条件`c < 5`为真的分区`p0`中的行；任何其他分区中的行都不会被检查，因此不受`DELETE`影响。'
- en: The `PARTITION` clause can also be used in multiple-table `DELETE` statements.
    You can use up to one such option per table named in the `FROM` option.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`PARTITION`子句也可以在多表`DELETE`语句中使用。您可以在`FROM`选项中命名的每个表中使用最多一个此类选项。'
- en: For more information and examples, see [Section 26.5, “Partition Selection”](partitioning-selection.html
    "26.5 Partition Selection").
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参阅[Section 26.5, “Partition Selection”](partitioning-selection.html
    "26.5 Partition Selection")。
- en: Auto-Increment Columns
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自增列
- en: If you delete the row containing the maximum value for an `AUTO_INCREMENT` column,
    the value is not reused for a `MyISAM` or `InnoDB` table. If you delete all rows
    in the table with `DELETE FROM *`tbl_name`*` (without a `WHERE` clause) in [`autocommit`](server-system-variables.html#sysvar_autocommit)
    mode, the sequence starts over for all storage engines except `InnoDB` and `MyISAM`.
    There are some exceptions to this behavior for `InnoDB` tables, as discussed in
    [Section 17.6.1.6, “AUTO_INCREMENT Handling in InnoDB”](innodb-auto-increment-handling.html
    "17.6.1.6 AUTO_INCREMENT Handling in InnoDB").
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果删除包含`AUTO_INCREMENT`列的最大值的行，则对于`MyISAM`或`InnoDB`表，该值不会被重用。如果在[`autocommit`](server-system-variables.html#sysvar_autocommit)模式下使用`DELETE
    FROM *`tbl_name`*`（没有`WHERE`子句）从表中删除所有行，则除了`InnoDB`和`MyISAM`之外的所有存储引擎都会重新开始序列。关于`InnoDB`表的此行为有一些例外情况，如[Section 17.6.1.6,
    “AUTO_INCREMENT Handling in InnoDB”](innodb-auto-increment-handling.html "17.6.1.6 AUTO_INCREMENT
    Handling in InnoDB")中所讨论的。
- en: For `MyISAM` tables, you can specify an `AUTO_INCREMENT` secondary column in
    a multiple-column key. In this case, reuse of values deleted from the top of the
    sequence occurs even for `MyISAM` tables. See [Section 5.6.9, “Using AUTO_INCREMENT”](example-auto-increment.html
    "5.6.9 Using AUTO_INCREMENT").
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`MyISAM`表，您可以在多列键中指定一个`AUTO_INCREMENT`辅助列。在这种情况下，即使对于`MyISAM`表，从序列顶部删除的值也会被重用。请参阅[Section 5.6.9,
    “Using AUTO_INCREMENT”](example-auto-increment.html "5.6.9 Using AUTO_INCREMENT")获取更多信息和示例。
- en: Modifiers
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 修饰符
- en: 'The [`DELETE`](delete.html "15.2.2 DELETE Statement") statement supports the
    following modifiers:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DELETE`](delete.html "15.2.2 DELETE Statement")语句支持以下修饰符：'
- en: If you specify the `LOW_PRIORITY` modifier, the server delays execution of the
    [`DELETE`](delete.html "15.2.2 DELETE Statement") until no other clients are reading
    from the table. This affects only storage engines that use only table-level locking
    (such as `MyISAM`, `MEMORY`, and `MERGE`).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果指定了`LOW_PRIORITY`修饰符，服务器会延迟执行[`DELETE`](delete.html "15.2.2 DELETE Statement")，直到没有其他客户端从表中读取数据。这仅影响只使用表级锁定的存储引擎（如`MyISAM`，`MEMORY`和`MERGE`）。
- en: For `MyISAM` tables, if you use the `QUICK` modifier, the storage engine does
    not merge index leaves during delete, which may speed up some kinds of delete
    operations.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`MyISAM`表，如果使用`QUICK`修饰符，存储引擎在删除期间不会合并索引叶子，这可能会加快某些类型的删除操作。
- en: The `IGNORE` modifier causes MySQL to ignore ignorable errors during the process
    of deleting rows. (Errors encountered during the parsing stage are processed in
    the usual manner.) Errors that are ignored due to the use of `IGNORE` are returned
    as warnings. For more information, see [The Effect of IGNORE on Statement Execution](sql-mode.html#ignore-effect-on-execution
    "The Effect of IGNORE on Statement Execution").
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IGNORE`修饰符导致MySQL在删除行的过程中忽略可忽略的错误。（在解析阶段遇到的错误会按照通常的方式处理。）由于使用`IGNORE`而被忽略的错误会作为警告返回。有关更多信息，请参阅[IGNORE对语句执行的影响](sql-mode.html#ignore-effect-on-execution
    "IGNORE对语句执行的影响")。'
- en: Order of Deletion
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除顺序
- en: 'If the [`DELETE`](delete.html "15.2.2 DELETE Statement") statement includes
    an `ORDER BY` clause, rows are deleted in the order specified by the clause. This
    is useful primarily in conjunction with `LIMIT`. For example, the following statement
    finds rows matching the `WHERE` clause, sorts them by `timestamp_column`, and
    deletes the first (oldest) one:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`DELETE`](delete.html "15.2.2 DELETE Statement")语句包括`ORDER BY`子句，则按照子句指定的顺序删除行。这主要与`LIMIT`结合使用。例如，以下语句查找与`WHERE`子句匹配的行，按`timestamp_column`排序，并删除第一行（最旧的行）：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`ORDER BY` also helps to delete rows in an order required to avoid referential
    integrity violations.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`ORDER BY`还有助于按照所需顺序删除行，以避免引用完整性违规。'
- en: InnoDB Tables
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: InnoDB表
- en: 'If you are deleting many rows from a large table, you may exceed the lock table
    size for an `InnoDB` table. To avoid this problem, or simply to minimize the time
    that the table remains locked, the following strategy (which does not use [`DELETE`](delete.html
    "15.2.2 DELETE Statement") at all) might be helpful:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要从大表中删除许多行，可能会超出`InnoDB`表的锁表大小。为避免此问题，或者仅仅为了最小化表保持锁定的时间，以下策略（完全不使用[`DELETE`](delete.html
    "15.2.2 DELETE Statement")）可能会有所帮助：
- en: 'Select the rows *not* to be deleted into an empty table that has the same structure
    as the original table:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将*不*要删除的行选择到一个与原始表具有相同结构的空表中：
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Use [`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement") to
    atomically move the original table out of the way and rename the copy to the original
    name:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement")原子性地将原始表移开并将副本重命名为原始名称：
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Drop the original table:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除原始表：
- en: '[PRE5]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: No other sessions can access the tables involved while [`RENAME TABLE`](rename-table.html
    "15.1.36 RENAME TABLE Statement") executes, so the rename operation is not subject
    to concurrency problems. See [Section 15.1.36, “RENAME TABLE Statement”](rename-table.html
    "15.1.36 RENAME TABLE Statement").
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行[`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement")期间，没有其他会话可以访问涉及的表，因此重命名操作不会受到并发问题的影响。请参阅[Section 15.1.36,
    “RENAME TABLE Statement”](rename-table.html "15.1.36 RENAME TABLE Statement")。
- en: MyISAM Tables
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MyISAM表
- en: In `MyISAM` tables, deleted rows are maintained in a linked list and subsequent
    [`INSERT`](insert.html "15.2.7 INSERT Statement") operations reuse old row positions.
    To reclaim unused space and reduce file sizes, use the [`OPTIMIZE TABLE`](optimize-table.html
    "15.7.3.4 OPTIMIZE TABLE Statement") statement or the [**myisamchk**](myisamchk.html
    "6.6.4 myisamchk — MyISAM Table-Maintenance Utility") utility to reorganize tables.
    [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement") is
    easier to use, but [**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility") is faster. See [Section 15.7.3.4, “OPTIMIZE TABLE Statement”](optimize-table.html
    "15.7.3.4 OPTIMIZE TABLE Statement"), and [Section 6.6.4, “myisamchk — MyISAM
    Table-Maintenance Utility”](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility").
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MyISAM`表中，删除的行会保留在一个链表中，随后的[`INSERT`](insert.html "15.2.7 INSERT Statement")操作会重用旧的行位置。为了回收未使用的空间并减小文件大小，使用[`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")语句或[**myisamchk**](myisamchk.html
    "6.6.4 myisamchk — MyISAM Table-Maintenance Utility")实用程序重新组织表。[`OPTIMIZE TABLE`](optimize-table.html
    "15.7.3.4 OPTIMIZE TABLE Statement")更容易使用，但[**myisamchk**](myisamchk.html "6.6.4 myisamchk
    — MyISAM Table-Maintenance Utility")更快。请参阅[Section 15.7.3.4, “OPTIMIZE TABLE Statement”](optimize-table.html
    "15.7.3.4 OPTIMIZE TABLE Statement")和[Section 6.6.4, “myisamchk — MyISAM Table-Maintenance
    Utility”](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance Utility")。
- en: The `QUICK` modifier affects whether index leaves are merged for delete operations.
    `DELETE QUICK` is most useful for applications where index values for deleted
    rows are replaced by similar index values from rows inserted later. In this case,
    the holes left by deleted values are reused.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`QUICK`修饰符影响删除操作时是否合并索引叶子。`DELETE QUICK`对于删除的行的索引值被后续插入的类似索引值替换的应用程序最有用。在这种情况下，被删除值留下的空洞会被重用。'
- en: '`DELETE QUICK` is not useful when deleted values lead to underfilled index
    blocks spanning a range of index values for which new inserts occur again. In
    this case, use of `QUICK` can lead to wasted space in the index that remains unreclaimed.
    Here is an example of such a scenario:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当删除的值导致跨越新插入发生的索引值范围的索引块不足时，`DELETE QUICK`是无用的。在这种情况下，使用`QUICK`可能会导致索引中的浪费空间无法回收。以下是这种情况的一个示例：
- en: Create a table that contains an indexed `AUTO_INCREMENT` column.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含带有索引的`AUTO_INCREMENT`列的表。
- en: Insert many rows into the table. Each insert results in an index value that
    is added to the high end of the index.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入多行到表中。每次插入都会导致一个索引值被添加到索引的高端。
- en: Delete a block of rows at the low end of the column range using `DELETE QUICK`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`DELETE QUICK`删除列范围的低端的一块行。
- en: In this scenario, the index blocks associated with the deleted index values
    become underfilled but are not merged with other index blocks due to the use of
    `QUICK`. They remain underfilled when new inserts occur, because new rows do not
    have index values in the deleted range. Furthermore, they remain underfilled even
    if you later use [`DELETE`](delete.html "15.2.2 DELETE Statement") without `QUICK`,
    unless some of the deleted index values happen to lie in index blocks within or
    adjacent to the underfilled blocks. To reclaim unused index space under these
    circumstances, use [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE
    Statement").
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，与被删除的索引值相关联的索引块变得不足，但由于使用了`QUICK`，它们不会与其他索引块合并。当新的插入发生时，它们仍然不足，因为新行没有在被删除范围内的索引值。此外，即使稍后使用[`DELETE`](delete.html
    "15.2.2 DELETE Statement")而不使用`QUICK`，它们仍然保持不足，除非一些被删除的索引值恰好位于在不足块内或相邻块内的索引块中。在这些情况下，为了回收未使用的索引空间，请使用[`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")。
- en: If you are going to delete many rows from a table, it might be faster to use
    `DELETE QUICK` followed by [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement"). This rebuilds the index rather than performing many index block
    merge operations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要从表中删除许多行，使用`DELETE QUICK`后跟[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement")可能更快。这将重建索引，而不是执行许多索引块合并操作。
- en: Multi-Table Deletes
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多表删除
- en: You can specify multiple tables in a [`DELETE`](delete.html "15.2.2 DELETE Statement")
    statement to delete rows from one or more tables depending on the condition in
    the `WHERE` clause. You cannot use `ORDER BY` or `LIMIT` in a multiple-table `DELETE`.
    The *`table_references`* clause lists the tables involved in the join, as described
    in [Section 15.2.13.2, “JOIN Clause”](join.html "15.2.13.2 JOIN Clause").
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[`DELETE`](delete.html "15.2.2 DELETE Statement")语句中指定多个表，根据`WHERE`子句中的条件从一个或多个表中删除行。在多表`DELETE`语句中不能使用`ORDER
    BY`或`LIMIT`。*`table_references`*子句列出了参与连接的表，如[第15.2.13.2节“JOIN子句”](join.html "15.2.13.2 JOIN
    Clause")中所述。
- en: 'For the first multiple-table syntax, only matching rows from the tables listed
    before the `FROM` clause are deleted. For the second multiple-table syntax, only
    matching rows from the tables listed in the `FROM` clause (before the `USING`
    clause) are deleted. The effect is that you can delete rows from many tables at
    the same time and have additional tables that are used only for searching:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个多表语法，只删除在`FROM`子句之前列出的表中匹配的行。对于第二个多表语法，只删除在`FROM`子句（在`USING`子句之前）中列出的表中匹配的行。其效果是您可以同时从多个表中删除行，并且还可以使用仅用于搜索的其他表：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These statements use all three tables when searching for rows to delete, but
    delete matching rows only from tables `t1` and `t2`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句在搜索要删除的行时使用了所有三个表，但只从表`t1`和`t2`中删除匹配的行。
- en: 'The preceding examples use `INNER JOIN`, but multiple-table [`DELETE`](delete.html
    "15.2.2 DELETE Statement") statements can use other types of join permitted in
    [`SELECT`](select.html "15.2.13 SELECT Statement") statements, such as `LEFT JOIN`.
    For example, to delete rows that exist in `t1` that have no match in `t2`, use
    a `LEFT JOIN`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例使用了`INNER JOIN`，但多表[`DELETE`](delete.html "15.2.2 DELETE Statement")语句可以使用在[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句中允许的其他类型的连接，例如`LEFT JOIN`。例如，要删除在`t1`中存在但在`t2`中没有匹配的行，请使用`LEFT
    JOIN`：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The syntax permits `.*` after each *`tbl_name`* for compatibility with **Access**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该语法允许在每个*`tbl_name`*后面使用`.*`以与**Access**兼容。
- en: If you use a multiple-table [`DELETE`](delete.html "15.2.2 DELETE Statement")
    statement involving `InnoDB` tables for which there are foreign key constraints,
    the MySQL optimizer might process tables in an order that differs from that of
    their parent/child relationship. In this case, the statement fails and rolls back.
    Instead, you should delete from a single table and rely on the `ON DELETE` capabilities
    that `InnoDB` provides to cause the other tables to be modified accordingly.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用涉及具有外键约束的`InnoDB`表的多表[`DELETE`](delete.html "15.2.2 DELETE Statement")语句，MySQL优化器可能以与其父/子关系不同的顺序处理表。在这种情况下，语句将失败并回滚。相反，您应该从单个表中删除，并依赖`InnoDB`提供的`ON
    DELETE`功能来相应地修改其他表。
- en: Note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you declare an alias for a table, you must use the alias when referring
    to the table:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为表声明了别名，则在引用该表时必须使用该别名：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Table aliases in a multiple-table [`DELETE`](delete.html "15.2.2 DELETE Statement")
    should be declared only in the *`table_references`* part of the statement. Elsewhere,
    alias references are permitted but not alias declarations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 多表[`DELETE`](delete.html "15.2.2 DELETE Statement")语句中的表别名应仅在语句的*`table_references`*部分中声明。在其他地方，允许别名引用，但不允许别名声明。
- en: 'Correct:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正确：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Incorrect:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 错误：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Table aliases are also supported for single-table `DELETE` statements beginning
    with MySQL 8.0.16. (Bug #89410,Bug #27455809)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '从MySQL 8.0.16开始，还支持单表`DELETE`语句的表别名。 (Bug #89410,Bug #27455809)'
