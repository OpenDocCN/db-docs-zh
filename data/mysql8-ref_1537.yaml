- en: 20.7.4 Message Compression
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 20.7.4 消息压缩
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-replication-message-compression.html](https://dev.mysql.com/doc/refman/8.0/en/group-replication-message-compression.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-replication-message-compression.html](https://dev.mysql.com/doc/refman/8.0/en/group-replication-message-compression.html)
- en: For messages sent between online group members, Group Replication enables message
    compression by default. Whether a specific message is compressed depends on the
    threshold that you configure using the [`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)
    system variable. Messages that have a payload larger than the specified number
    of bytes are compressed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在线群组成员之间发送的消息，Group Replication 默认启用消息压缩。特定消息是否被压缩取决于您使用[`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)系统变量配置的阈值。超过指定字节数的有效载荷的消息将被压缩。
- en: 'The default compression threshold is 1000000 bytes. You could use the following
    statements to increase the compression threshold to 2MB, for example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 默认压缩阈值为 1000000 字节。您可以使用以下语句将压缩阈值增加到 2MB，例如：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you set [`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)
    to zero, message compression is disabled.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将[`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)设置为零，则消息压缩将被禁用。
- en: Group Replication uses the LZ4 compression algorithm to compress messages sent
    in the group. Note that the maximum supported input size for the LZ4 compression
    algorithm is 2113929216 bytes. This limit is lower than the maximum possible value
    for the [`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)
    system variable, which is matched to the maximum message size accepted by XCom.
    The LZ4 maximum input size is therefore a practical limit for message compression,
    and transactions above this size cannot be committed when message compression
    is enabled. With the LZ4 compression algorithm, do not set a value greater than
    2113929216 bytes for [`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Group Replication 使用 LZ4 压缩算法来压缩组内发送的消息。请注意，LZ4 压缩算法支持的最大输入大小为 2113929216 字节。这个限制低于[`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)系统变量的最大可能值，该值与
    XCom 接受的最大消息大小相匹配。因此，LZ4 最大输入大小是消息压缩的实际限制，当启用消息压缩时，超过此大小的事务无法提交。使用 LZ4 压缩算法时，请不要为[`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)设置大于
    2113929216 字节的值。
- en: The value of [`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)
    is not required by Group Replication to be the same on all group members. However,
    it is advisable to set the same value on all group members in order to avoid unnecessary
    rollback of transactions, failure of message delivery, or failure of message recovery.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Group Replication 不要求所有组成员的[`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)的值相同。然而，建议在所有组成员上设置相同的值，以避免事务不必要的回滚、消息传递失败或消息恢复失败。
- en: From MySQL 8.0.18, you can also configure compression for messages sent for
    distributed recovery by the method of state transfer from a donor's binary log.
    Compression for these messages, which are sent from a donor already in the group
    to a joining member, is controlled separately using the [`group_replication_recovery_compression_algorithms`](group-replication-system-variables.html#sysvar_group_replication_recovery_compression_algorithms)
    and [`group_replication_recovery_zstd_compression_level`](group-replication-system-variables.html#sysvar_group_replication_recovery_zstd_compression_level)
    system variables. For more information, see [Section 6.2.8, “Connection Compression
    Control”](connection-compression-control.html "6.2.8 Connection Compression Control").
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.18开始，您还可以为通过从捐赠者的二进制日志进行状态传输的分布式恢复发送的消息配置压缩。这些消息的压缩，从已在组中的捐赠者发送到加入成员，是通过[`group_replication_recovery_compression_algorithms`](group-replication-system-variables.html#sysvar_group_replication_recovery_compression_algorithms)和[`group_replication_recovery_zstd_compression_level`](group-replication-system-variables.html#sysvar_group_replication_recovery_zstd_compression_level)系统变量分别控制。有关更多信息，请参见[Section 6.2.8，“连接压缩控制”](connection-compression-control.html
    "6.2.8 连接压缩控制")。
- en: Binary log transaction compression (available as of MySQL 8.0.20), which is
    activated by the [`binlog_transaction_compression`](replication-options-binary-log.html#sysvar_binlog_transaction_compression)
    system variable, can also be used to save bandwidth. The transaction payloads
    remain compressed when they are transferred between group members. If you use
    binary log transaction compression in combination with Group Replication's message
    compression, message compression has less opportunity to act on the data, but
    can still compress headers and those events and transaction payloads that are
    uncompressed. For more information on binary log transaction compression, see
    [Section 7.4.4.5, “Binary Log Transaction Compression”](binary-log-transaction-compression.html
    "7.4.4.5 Binary Log Transaction Compression").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制日志事务压缩（自MySQL 8.0.20起可用），由[`binlog_transaction_compression`](replication-options-binary-log.html#sysvar_binlog_transaction_compression)系统变量激活，也可用于节省带宽。当事务负载在组成员之间传输时保持压缩。如果您将二进制日志事务压缩与Group
    Replication的消息压缩结合使用，消息压缩的作用机会较少，但仍可压缩标头以及未压缩的事件和事务负载。有关二进制日志事务压缩的更多信息，请参见[Section 7.4.4.5，“二进制日志事务压缩”](binary-log-transaction-compression.html
    "7.4.4.5 二进制日志事务压缩")。
- en: Compression for messages sent in the group happens at the group communication
    engine level, before the data is handed over to the group communication thread,
    so it takes place within the context of the `mysql` user session thread. If the
    message payload size exceeds the threshold set by [`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold),
    the transaction payload is compressed before being sent out to the group, and
    decompressed when it is received. Upon receiving a message, the member checks
    the message envelope to verify whether it is compressed or not. If needed, then
    the member decompresses the transaction, before delivering it to the upper layer.
    This process is shown in the following figure.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 组内发送的消息的压缩发生在组通信引擎级别，即在数据交给组通信线程之前，因此在`mysql`用户会话线程的上下文中进行。如果消息负载大小超过[`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)设置的阈值，事务负载在发送到组之前会被压缩，并在接收时解压缩。接收消息时，成员会检查消息信封以验证是否已压缩。如果需要，则成员在将事务传递到上层之前对其进行解压缩。此过程如下图所示。
- en: '**Figure 20.13 Compression Support**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 20.13 压缩支持**'
- en: '![The MySQL Group Replication plugin architecture is shown as described in
    an earlier topic, with the five layers of the plugin positioned between the MySQL
    server and the replication group. Compression and decompression are handled by
    the Group Communication System API, which is the fourth layer of the Group Replication
    plugin. The group communication engine (the fifth layer of the plugin) and the
    group members use the compressed transactions with the smaller data size. The
    MySQL Server core and the three higher layers of the Group Replication plugin
    (the APIs, the capture, applier, and recovery components, and the replication
    protocol module) use the original transactions with the larger data size.](../Images/b5a8a3557a5a5382e745b84c25539d08.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![MySQL Group Replication插件架构如前文所述，插件的五个层位于MySQL服务器和复制组之间。压缩和解压缩由Group Communication
    System API处理，这是Group Replication插件的第四层。组通信引擎（插件的第五层）和组成员使用数据量较小的压缩事务。MySQL服务器核心和Group
    Replication插件的三个更高层（API、捕获、应用和恢复组件以及复制协议模块）使用数据量较大的原始事务。](../Images/b5a8a3557a5a5382e745b84c25539d08.png)'
- en: When network bandwidth is a bottleneck, message compression can provide up to
    30-40% throughput improvement at the group communication level. This is especially
    important within the context of large groups of servers under load. The TCP peer-to-peer
    nature of the interconnections between *N* participants in the group makes the
    sender send the same amount of data *N* times. Furthermore, binary logs are likely
    to exhibit a high compression ratio. This makes compression a compelling feature
    for Group Replication workloads that contain large transactions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当网络带宽成为瓶颈时，消息压缩可以在组通信级别提供高达30-40%的吞吐量改进。这在负载下的大型服务器组的情况下尤为重要。组内*N*个参与者之间的互连是TCP点对点的性质，使发送方将相同数量的数据发送*N*次。此外，二进制日志可能具有较高的压缩比。这使得压缩成为包含大型事务的Group
    Replication工作负载的一个引人注目的特性。
