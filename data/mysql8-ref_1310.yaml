- en: 18.3 The MEMORY Storage Engine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18.3 MEMORY 存储引擎
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/memory-storage-engine.html](https://dev.mysql.com/doc/refman/8.0/en/memory-storage-engine.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/memory-storage-engine.html](https://dev.mysql.com/doc/refman/8.0/en/memory-storage-engine.html)
- en: The `MEMORY` storage engine (formerly known as `HEAP`) creates special-purpose
    tables with contents that are stored in memory. Because the data is vulnerable
    to crashes, hardware issues, or power outages, only use these tables as temporary
    work areas or read-only caches for data pulled from other tables.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY` 存储引擎（以前称为 `HEAP`）创建内容存储在内存中的特殊用途表。由于数据容易受到崩溃、硬件问题或停电的影响，只能将这些表用作临时工作区或从其他表中提取数据的只读缓存。'
- en: '**Table 18.4 MEMORY Storage Engine Features**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 18.4 MEMORY 存储引擎特性**'
- en: '| Feature | Support |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 支持 |'
- en: '| **B-tree indexes** | Yes |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| **B 树索引** | 是 |'
- en: '| **Backup/point-in-time recovery** (Implemented in the server, rather than
    in the storage engine.) | Yes |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| **备份/时间点恢复**（在服务器中实现，而不是在存储引擎中。） | 是 |'
- en: '| **Cluster database support** | No |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| **集群数据库支持** | 否 |'
- en: '| **Clustered indexes** | No |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| **聚集索引** | 否 |'
- en: '| **Compressed data** | No |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| **压缩数据** | 否 |'
- en: '| **Data caches** | N/A |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| **数据缓存** | 不适用 |'
- en: '| **Encrypted data** | Yes (Implemented in the server via encryption functions.)
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| **加密数据** | 是（通过加密函数在服务器中实现。） |'
- en: '| **Foreign key support** | No |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| **外键支持** | 否 |'
- en: '| **Full-text search indexes** | No |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| **全文搜索索引** | 否 |'
- en: '| **Geospatial data type support** | No |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| **地理空间数据类型支持** | 否 |'
- en: '| **Geospatial indexing support** | No |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **地理空间索引支持** | 否 |'
- en: '| **Hash indexes** | Yes |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| **哈希索引** | 是 |'
- en: '| **Index caches** | N/A |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **索引缓存** | 不适用 |'
- en: '| **Locking granularity** | Table |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| **锁定粒度** | 表 |'
- en: '| **MVCC** | No |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| **MVCC** | 否 |'
- en: '| **Replication support** (Implemented in the server, rather than in the storage
    engine.) | Limited (See the discussion later in this section.) |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| **复制支持**（在服务器中实现，而不是在存储引擎中。） | 有限（请参见本节后面的讨论。） |'
- en: '| **Storage limits** | RAM |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **存储限制** | RAM |'
- en: '| **T-tree indexes** | No |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **T 树索引** | 否 |'
- en: '| **Transactions** | No |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| **事务** | 否 |'
- en: '| **Update statistics for data dictionary** | Yes |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| **更新数据字典统计信息** | 是 |'
- en: '| Feature | Support |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 支持 |'
- en: '[When to Use MEMORY or NDB Cluster](memory-storage-engine.html#memory-storage-engine-compared-cluster
    "When to Use MEMORY or NDB Cluster")'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[何时使用 MEMORY 或 NDB 集群](memory-storage-engine.html#memory-storage-engine-compared-cluster
    "何时使用 MEMORY 或 NDB 集群")'
- en: '[Partitioning](memory-storage-engine.html#memory-storage-engine-partitioning
    "Partitioning")'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分区](memory-storage-engine.html#memory-storage-engine-partitioning "分区")'
- en: '[Performance Characteristics](memory-storage-engine.html#memory-storage-engine-performance-characteristics
    "Performance Characteristics")'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[性能特性](memory-storage-engine.html#memory-storage-engine-performance-characteristics
    "性能特性")'
- en: '[Characteristics of MEMORY Tables](memory-storage-engine.html#memory-storage-engine-characteristics-of-memory-tables
    "Characteristics of MEMORY Tables")'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MEMORY 表的特点](memory-storage-engine.html#memory-storage-engine-characteristics-of-memory-tables
    "MEMORY 表的特点")'
- en: '[DDL Operations for MEMORY Tables](memory-storage-engine.html#memory-storage-engine-ddl-operations-for-memory-tables
    "DDL Operations for MEMORY Tables")'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MEMORY 表的 DDL 操作](memory-storage-engine.html#memory-storage-engine-ddl-operations-for-memory-tables
    "MEMORY 表的 DDL 操作")'
- en: '[Indexes](memory-storage-engine.html#memory-storage-engine-indexes "Indexes")'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[索引](memory-storage-engine.html#memory-storage-engine-indexes "索引")'
- en: '[User-Created and Temporary Tables](memory-storage-engine.html#memory-storage-engine-user-created-and-temporary-tables
    "User-Created and Temporary Tables")'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用户创建和临时表](memory-storage-engine.html#memory-storage-engine-user-created-and-temporary-tables
    "用户创建和临时表")'
- en: '[Loading Data](memory-storage-engine.html#memory-storage-engine-loading-data
    "Loading Data")'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[加载数据](memory-storage-engine.html#memory-storage-engine-loading-data "加载数据")'
- en: '[MEMORY Tables and Replication](memory-storage-engine.html#memory-tables-replication
    "MEMORY Tables and Replication")'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MEMORY 表和复制](memory-storage-engine.html#memory-tables-replication "MEMORY
    表和复制")'
- en: '[Managing Memory Use](memory-storage-engine.html#memory-storage-engine-managing-memory-use
    "Managing Memory Use")'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[管理内存使用](memory-storage-engine.html#memory-storage-engine-managing-memory-use
    "管理内存使用")'
- en: '[Additional Resources](memory-storage-engine.html#memory-storage-engine-additional-resources
    "Additional Resources")'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[其他资源](memory-storage-engine.html#memory-storage-engine-additional-resources
    "其他资源")'
- en: When to Use MEMORY or NDB Cluster
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 何时使用 MEMORY 或 NDB 集群
- en: 'Developers looking to deploy applications that use the `MEMORY` storage engine
    for important, highly available, or frequently updated data should consider whether
    NDB Cluster is a better choice. A typical use case for the `MEMORY` engine involves
    these characteristics:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 寻求部署使用 `MEMORY` 存储引擎处理重要、高可用或频繁更新数据的应用程序的开发人员应考虑 NDB Cluster 是否更合适。`MEMORY`
    引擎的典型用例包括以下特点：
- en: Operations involving transient, non-critical data such as session management
    or caching. When the MySQL server halts or restarts, the data in `MEMORY` tables
    is lost.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涉及瞬态、非关键数据的操作，如会话管理或缓存。当 MySQL 服务器停止或重新启动时，`MEMORY` 表中的数据将丢失。
- en: In-memory storage for fast access and low latency. Data volume can fit entirely
    in memory without causing the operating system to swap out virtual memory pages.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存存储以实现快速访问和低延迟。数据量完全可以放入内存，而不会导致操作系统交换虚拟内存页。
- en: A read-only or read-mostly data access pattern (limited updates).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取为主或只读数据访问模式（有限更新）。
- en: 'NDB Cluster offers the same features as the `MEMORY` engine with higher performance
    levels, and provides additional features not available with `MEMORY`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: NDB Cluster 提供与 `MEMORY` 引擎相同的功能，性能水平更高，并提供 `MEMORY` 不支持的其他功能：
- en: Row-level locking and multiple-thread operation for low contention between clients.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行级锁定和多线程操作可减少客户端之间的低争用。
- en: Scalability even with statement mixes that include writes.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使包含写操作的语句混合，也具有可伸缩性。
- en: Optional disk-backed operation for data durability.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的磁盘支持操作以实现数据持久性。
- en: Shared-nothing architecture and multiple-host operation with no single point
    of failure, enabling 99.999% availability.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无共享架构和无单点故障的多主机操作，实现99.999%的可用性。
- en: Automatic data distribution across nodes; application developers need not craft
    custom sharding or partitioning solutions.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨节点自动数据分布；应用程序开发人员无需设计自定义分片或分区解决方案。
- en: Support for variable-length data types (including [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") and [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types"))
    not supported by `MEMORY`.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持变长数据类型（包括[`BLOB`](blob.html "第13.3.4节 BLOB和TEXT类型")和[`TEXT`](blob.html "第13.3.4节
    BLOB和TEXT类型")），`MEMORY` 不支持。
- en: Partitioning
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分区
- en: '`MEMORY` tables cannot be partitioned.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY` 表不支持分区。'
- en: Performance Characteristics
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能特征
- en: '`MEMORY` performance is constrained by contention resulting from single-thread
    execution and table lock overhead when processing updates. This limits scalability
    when load increases, particularly for statement mixes that include writes.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY` 性能受限于单线程执行和处理更新时的表锁定开销所导致的争用。当负载增加时，特别是包含写操作的语句混合时，这限制了可伸缩性。'
- en: Despite the in-memory processing for `MEMORY` tables, they are not necessarily
    faster than [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage
    Engine") tables on a busy server, for general-purpose queries, or under a read/write
    workload. In particular, the table locking involved with performing updates can
    slow down concurrent usage of `MEMORY` tables from multiple sessions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 `MEMORY` 表采用内存处理，但在繁忙服务器上，对于通用查询或读写工作负载，它们不一定比[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")表更快。特别是，执行更新涉及的表锁定可能会减慢多个会话中对 `MEMORY` 表的并发使用。
- en: Depending on the kinds of queries performed on a `MEMORY` table, you might create
    indexes as either the default hash data structure (for looking up single values
    based on a unique key), or a general-purpose B-tree data structure (for all kinds
    of queries involving equality, inequality, or range operators such as less than
    or greater than). The following sections illustrate the syntax for creating both
    kinds of indexes. A common performance issue is using the default hash indexes
    in workloads where B-tree indexes are more efficient.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 根据在 `MEMORY` 表上执行的查询类型，您可以创建索引作为默认哈希数据结构（用于基于唯一键查找单个值）或通用的 B 树数据结构（用于涉及等式、不等式或范围运算符（如小于或大于）的所有查询）。以下部分说明了创建这两种索引的语法。一个常见的性能问题是在
    B 树索引更有效的工作负载中使用默认哈希索引。
- en: Characteristics of MEMORY Tables
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MEMORY` 表的特点'
- en: The `MEMORY` storage engine does not create any files on disk. The table definition
    is stored in the MySQL data dictionary.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY` 存储引擎不在磁盘上创建任何文件。表定义存储在 MySQL 数据字典中。'
- en: '`MEMORY` tables have the following characteristics:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY` 表具有以下特点：'
- en: Space for `MEMORY` tables is allocated in small blocks. Tables use 100% dynamic
    hashing for inserts. No overflow area or extra key space is needed. No extra space
    is needed for free lists. Deleted rows are put in a linked list and are reused
    when you insert new data into the table. `MEMORY` tables also have none of the
    problems commonly associated with deletes plus inserts in hashed tables.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMORY` 表的空间是以小块分配的。表使用 100% 的动态哈希插入。不需要溢出区域或额外的键空间。不需要额外的空间用于空闲列表。删除的行被放入一个链表中，在你向表中插入新数据时被重用。`MEMORY`
    表也没有通常与哈希表中的删除加插入相关的问题。'
- en: '`MEMORY` tables use a fixed-length row-storage format. Variable-length types
    such as [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") are stored
    using a fixed length.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMORY` 表使用固定长度的行存储格式。可变长度类型如 [`VARCHAR`](char.html "13.3.2 CHAR 和 VARCHAR
    类型") 使用固定长度存储。'
- en: '`MEMORY` tables cannot contain [`BLOB`](blob.html "13.3.4 The BLOB and TEXT
    Types") or [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") columns.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMORY` 表不能包含 [`BLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型") 或 [`TEXT`](blob.html
    "13.3.4 BLOB 和 TEXT 类型") 列。'
- en: '`MEMORY` includes support for `AUTO_INCREMENT` columns.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMORY` 包括对 `AUTO_INCREMENT` 列的支持。'
- en: Non-`TEMPORARY` `MEMORY` tables are shared among all clients, just like any
    other non-`TEMPORARY` table.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非临时的 `MEMORY` 表在所有客户端之间共享，就像任何其他非临时表一样。
- en: DDL Operations for MEMORY Tables
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MEMORY` 表的 DDL 操作'
- en: To create a `MEMORY` table, specify the clause `ENGINE=MEMORY` on the [`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 `MEMORY` 表，在 [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE
    语句") 语句中指定 `ENGINE=MEMORY` 子句。
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As indicated by the engine name, `MEMORY` tables are stored in memory. They
    use hash indexes by default, which makes them very fast for single-value lookups,
    and very useful for creating temporary tables. However, when the server shuts
    down, all rows stored in `MEMORY` tables are lost. The tables themselves continue
    to exist because their definitions are stored in the MySQL data dictionary, but
    they are empty when the server restarts.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如引擎名称所示，`MEMORY` 表存储在内存中。它们默认使用哈希索引，使得单值查找非常快速，并且非常适用于创建临时表。然而，当服务器关闭时，所有存储在
    `MEMORY` 表中的行都会丢失。表本身会继续存在，因为它们的定义存储在 MySQL 数据字典中，但在服务器重新启动时它们是空的。
- en: 'This example shows how you might create, use, and remove a `MEMORY` table:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了如何创建、使用和移除一个 `MEMORY` 表：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The maximum size of `MEMORY` tables is limited by the [`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)
    system variable, which has a default value of 16MB. To enforce different size
    limits for `MEMORY` tables, change the value of this variable. The value in effect
    for [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement"), or a
    subsequent [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") or
    [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement"), is
    the value used for the life of the table. A server restart also sets the maximum
    size of existing `MEMORY` tables to the global [`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)
    value. You can set the size for individual tables as described later in this section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY` 表的最大大小受 [`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)
    系统变量限制，默认值为 16MB。要为 `MEMORY` 表强制不同的大小限制，改变这个变量的值。对于 [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE 语句")，或随后的 [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE 语句") 或 [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE 语句")，生效的值将用于表的生命周期。服务器重新启动也会将现有
    `MEMORY` 表的最大大小设置为全局 [`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)
    值。你可��像本节后面描述的那样为单个表设置大小。'
- en: Indexes
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引
- en: 'The `MEMORY` storage engine supports both `HASH` and `BTREE` indexes. You can
    specify one or the other for a given index by adding a `USING` clause as shown
    here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY` 存储引擎支持 `HASH` 和 `BTREE` 索引。你可以通过添加 `USING` 子句来指定给定索引使用的其中一个，如下所示：'
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For general characteristics of B-tree and hash indexes, see [Section 10.3.1,
    “How MySQL Uses Indexes”](mysql-indexes.html "10.3.1 How MySQL Uses Indexes").
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 B 树和哈希索引的一般特性，请参阅 [第 10.3.1 节，“MySQL 如何使用索引”](mysql-indexes.html "10.3.1 MySQL
    如何使用索引")。
- en: '`MEMORY` tables can have up to 64 indexes per table, 16 columns per index and
    a maximum key length of 3072 bytes.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY` 表每个表最多可以有 64 个索引，每个索引最多有 16 列，最大键长度为 3072 字节。'
- en: If a `MEMORY` table hash index has a high degree of key duplication (many index
    entries containing the same value), updates to the table that affect key values
    and all deletes are significantly slower. The degree of this slowdown is proportional
    to the degree of duplication (or, inversely proportional to the index cardinality).
    You can use a `BTREE` index to avoid this problem.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`MEMORY`表的哈希索引具有高度的键重复（许多包含相同值的索引条目），那么影响键值的表更新和所有删除操作将显着变慢。这种减速程度与重复程度成正比（或者与索引基数成反比）。您可以使用`BTREE`索引来避免这个问题。
- en: '`MEMORY` tables can have nonunique keys. (This is an uncommon feature for implementations
    of hash indexes.)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY`表可以具有非唯一键。（这是哈希索引实现的一个不常见的特性。）'
- en: Columns that are indexed can contain `NULL` values.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 索引的列可以包含`NULL`值。
- en: User-Created and Temporary Tables
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户创建的临时表
- en: '`MEMORY` table contents are stored in memory, which is a property that `MEMORY`
    tables share with internal temporary tables that the server creates on the fly
    while processing queries. However, the two types of tables differ in that `MEMORY`
    tables are not subject to storage conversion, whereas internal temporary tables
    are:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`MEMORY`表内容存储在内存中，这是`MEMORY`表与服务器在处理查询时动态创建的内部临时表共享的属性。然而，这两种类型的表在以下方面有所不同：`MEMORY`表不受存储转换的影响，而内部临时表受到影响：'
- en: If an internal temporary table becomes too large, the server automatically converts
    it to on-disk storage, as described in [Section 10.4.4, “Internal Temporary Table
    Use in MySQL”](internal-temporary-tables.html "10.4.4 Internal Temporary Table
    Use in MySQL").
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果内部临时表变得太大，服务器会自动将其转换为磁盘存储，如[第10.4.4节，“MySQL中的内部临时表使用”](internal-temporary-tables.html
    "10.4.4 Internal Temporary Table Use in MySQL")所述。
- en: User-created `MEMORY` tables are never converted to disk tables.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户创建的`MEMORY`表永远不会转换为磁盘表。
- en: Loading Data
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载数据
- en: To populate a `MEMORY` table when the MySQL server starts, you can use the [`init_file`](server-system-variables.html#sysvar_init_file)
    system variable. For example, you can put statements such as [`INSERT INTO ...
    SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement") or [`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement") into a file to load the table
    from a persistent data source, and use [`init_file`](server-system-variables.html#sysvar_init_file)
    to name the file. See [Section 7.1.8, “Server System Variables”](server-system-variables.html
    "7.1.8 Server System Variables"), and [Section 15.2.9, “LOAD DATA Statement”](load-data.html
    "15.2.9 LOAD DATA Statement").
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL服务器启动时填充`MEMORY`表，您可以使用[`init_file`](server-system-variables.html#sysvar_init_file)系统变量。例如，您可以将诸如[`INSERT
    INTO ... SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement")或[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement")之类的语句放入文件中，从持久数据源加载表，并使用[`init_file`](server-system-variables.html#sysvar_init_file)命名文件。请参见[第7.1.8节，“服务器系统变量”](server-system-variables.html
    "7.1.8 Server System Variables")和[第15.2.9节，“LOAD DATA语句”](load-data.html "15.2.9 LOAD
    DATA Statement")。
- en: MEMORY Tables and Replication
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MEMORY表和复制
- en: When a replication source server shuts down and restarts, its [`MEMORY`](memory-storage-engine.html
    "18.3 The MEMORY Storage Engine") tables become empty. To replicate this effect
    to replicas, the first time that the source uses a given [`MEMORY`](memory-storage-engine.html
    "18.3 The MEMORY Storage Engine") table after startup, it logs an event that notifies
    replicas that the table must be emptied by writing a [`DELETE`](delete.html "15.2.2 DELETE
    Statement") or (from MySQL 8.0.22) [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement") statement for that table to the binary log. When a replica server
    shuts down and restarts, its [`MEMORY`](memory-storage-engine.html "18.3 The MEMORY
    Storage Engine") tables also become empty, and it writes a [`DELETE`](delete.html
    "15.2.2 DELETE Statement") or (from MySQL 8.0.22) [`TRUNCATE TABLE`](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement") statement to its own binary log, which is
    passed on to any downstream replicas.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当复制源服务器关闭并重新启动时，其[`MEMORY`](memory-storage-engine.html "18.3 The MEMORY Storage
    Engine")表变为空。为了将此效果复制到副本，源在启动后第一次使用给定的[`MEMORY`](memory-storage-engine.html "18.3 The
    MEMORY Storage Engine")表时，它会记录一个事件，通知副本必须通过向二进制日志写入该表的[`DELETE`](delete.html "15.2.2 DELETE
    Statement")或（从MySQL 8.0.22开始）[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement")语句来清空该表。当副本服务器关闭并重新启动时，其[`MEMORY`](memory-storage-engine.html
    "18.3 The MEMORY Storage Engine")表也变为空，并且它会向自己的二进制日志写入一个[`DELETE`](delete.html
    "15.2.2 DELETE Statement")或（从MySQL 8.0.22开始）[`TRUNCATE TABLE`](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement")语句，这些语句会传递给任何下游副本。
- en: When you use [`MEMORY`](memory-storage-engine.html "18.3 The MEMORY Storage
    Engine") tables in a replication topology, in some situations, the table on the
    source and the table on the replica can differ. For information on handling each
    of these situations to prevent stale reads or errors, see [Section 19.5.1.21,
    “Replication and MEMORY Tables”](replication-features-memory.html "19.5.1.21 Replication
    and MEMORY Tables").
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在复制拓扑中使用[`MEMORY`](memory-storage-engine.html "18.3 The MEMORY Storage Engine")表时，在某些情况下，源表和副本表可能会有所不同。有关处理这些情况以防止过时读取或错误的信息，请参阅[Section 19.5.1.21，“复制和MEMORY表”](replication-features-memory.html
    "19.5.1.21 Replication and MEMORY Tables")。
- en: Managing Memory Use
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理内存使用
- en: The server needs sufficient memory to maintain all `MEMORY` tables that are
    in use at the same time.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器需要足够的内存来同时维护所有正在使用的`MEMORY`表。
- en: Memory is not reclaimed if you delete individual rows from a `MEMORY` table.
    Memory is reclaimed only when the entire table is deleted. Memory that was previously
    used for deleted rows is re-used for new rows within the same table. To free all
    the memory used by a `MEMORY` table when you no longer require its contents, execute
    [`DELETE`](delete.html "15.2.2 DELETE Statement") or [`TRUNCATE TABLE`](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement") to remove all rows, or remove the table altogether
    using [`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE Statement"). To free
    up the memory used by deleted rows, use `ALTER TABLE ENGINE=MEMORY` to force a
    table rebuild.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从`MEMORY`表中删除单个行，则不会回收内存。只有在删除整个表时才会回收内存。先前用于已删除行的内存将在同一表中为新行重新使用。当您不再需要其内容时，要释放`MEMORY`表使用的所有内存，请执行[`DELETE`](delete.html
    "15.2.2 DELETE Statement")或[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement")以删除所有行，或使用[`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE
    Statement")完全删除表。要释放已删除行使用的内存，请使用`ALTER TABLE ENGINE=MEMORY`强制表重建。
- en: 'The memory needed for one row in a `MEMORY` table is calculated using the following
    expression:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MEMORY`表中，一个行所需的内存通过以下表达式计算：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`ALIGN()` represents a round-up factor to cause the row length to be an exact
    multiple of the `char` pointer size. `sizeof(char*)` is 4 on 32-bit machines and
    8 on 64-bit machines.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALIGN()`表示一个向上取整的因子，使行长度成为`char`指针大小的精确倍数。在32位机器上，`sizeof(char*)`为4，在64位机器上为8。'
- en: 'As mentioned earlier, the [`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)
    system variable sets the limit on the maximum size of `MEMORY` tables. To control
    the maximum size for individual tables, set the session value of this variable
    before creating each table. (Do not change the global [`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)
    value unless you intend the value to be used for `MEMORY` tables created by all
    clients.) The following example creates two `MEMORY` tables, with a maximum size
    of 1MB and 2MB, respectively:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，[`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)系统变量设置了`MEMORY`表的最大大小限制。要控制各个表的最大大小，需在创建每个表之前设置此变量的会话值。（除非您打算将该值用于所有客户端创建的`MEMORY`表，否则不要更改全局[`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)值。）以下示例创建了两个`MEMORY`表，分别具有1MB和2MB的最大大小：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Both tables revert to the server's global [`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)
    value if the server restarts.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器重新启动，两个表都会恢复到服务器的全局[`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)值。
- en: You can also specify a `MAX_ROWS` table option in [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statements for `MEMORY` tables to provide a
    hint about the number of rows you plan to store in them. This does not enable
    the table to grow beyond the [`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)
    value, which still acts as a constraint on maximum table size. For maximum flexibility
    in being able to use `MAX_ROWS`, set [`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)
    at least as high as the value to which you want each `MEMORY` table to be able
    to grow.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句中为`MEMORY`表指定`MAX_ROWS`表选项，以提供关于您计划在其中存储的行数的提示。这不会使表增长超过[`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)值，该值仍然作为最大表大小的约束。为了能够灵活使用`MAX_ROWS`，请将[`max_heap_table_size`](server-system-variables.html#sysvar_max_heap_table_size)设置至少与您希望每个`MEMORY`表能够增长的值一样高。
- en: Additional Resources
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加资源
- en: A forum dedicated to the `MEMORY` storage engine is available at [https://forums.mysql.com/list.php?92](https://forums.mysql.com/list.php?92).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一个专门致力于`MEMORY`存储引擎的论坛可在[https://forums.mysql.com/list.php?92](https://forums.mysql.com/list.php?92)找到。
