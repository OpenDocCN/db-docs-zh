- en: 14.4.2 Comparison Functions and Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.4.2 比较函数和运算符
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html](https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html](https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html)
- en: '**Table 14.4 Comparison Operators**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.4 比较运算符**'
- en: '| Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`>`](comparison-operators.html#operator_greater-than) | Greater than operator
    |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`>`](comparison-operators.html#operator_greater-than) | 大于运算符 |'
- en: '| [`>=`](comparison-operators.html#operator_greater-than-or-equal) | Greater
    than or equal operator |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`>=`](comparison-operators.html#operator_greater-than-or-equal) | 大于或等于运算符
    |'
- en: '| [`<`](comparison-operators.html#operator_less-than) | Less than operator
    |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`<`](comparison-operators.html#operator_less-than) | 小于运算符 |'
- en: '| [`<>`, `!=`](comparison-operators.html#operator_not-equal) | Not equal operator
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`<>`, `!=`](comparison-operators.html#operator_not-equal) | 不等运算符 |'
- en: '| [`<=`](comparison-operators.html#operator_less-than-or-equal) | Less than
    or equal operator |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`<=`](comparison-operators.html#operator_less-than-or-equal) | 小于或等于运算符
    |'
- en: '| [`<=>`](comparison-operators.html#operator_equal-to) | NULL-safe equal to
    operator |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`<=>`](comparison-operators.html#operator_equal-to) | NULL 安全等于运算符 |'
- en: '| [`=`](comparison-operators.html#operator_equal) | Equal operator |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`=`](comparison-operators.html#operator_equal) | 等于运算符 |'
- en: '| [`BETWEEN ... AND ...`](comparison-operators.html#operator_between) | Whether
    a value is within a range of values |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`BETWEEN ... AND ...`](comparison-operators.html#operator_between) | 值是否在一系列值范围内
    |'
- en: '| [`COALESCE()`](comparison-operators.html#function_coalesce) | Return the
    first non-NULL argument |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`COALESCE()`](comparison-operators.html#function_coalesce) | 返回第一个非 NULL
    参数 |'
- en: '| [`GREATEST()`](comparison-operators.html#function_greatest) | Return the
    largest argument |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`GREATEST()`](comparison-operators.html#function_greatest) | 返回最大的参数 |'
- en: '| [`IN()`](comparison-operators.html#operator_in) | Whether a value is within
    a set of values |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`IN()`](comparison-operators.html#operator_in) | 值是否在一组值内 |'
- en: '| [`INTERVAL()`](comparison-operators.html#function_interval) | Return the
    index of the argument that is less than the first argument |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`INTERVAL()`](comparison-operators.html#function_interval) | 返回小于第一个参数的参数的索引
    |'
- en: '| [`IS`](comparison-operators.html#operator_is) | Test a value against a boolean
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`IS`](comparison-operators.html#operator_is) | 测试值是否为布尔值 |'
- en: '| [`IS NOT`](comparison-operators.html#operator_is-not) | Test a value against
    a boolean |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`IS NOT`](comparison-operators.html#operator_is-not) | 测试值是否为布尔值 |'
- en: '| [`IS NOT NULL`](comparison-operators.html#operator_is-not-null) | NOT NULL
    value test |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`IS NOT NULL`](comparison-operators.html#operator_is-not-null) | 非 NULL
    值测试 |'
- en: '| [`IS NULL`](comparison-operators.html#operator_is-null) | NULL value test
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`IS NULL`](comparison-operators.html#operator_is-null) | NULL 值测试 |'
- en: '| [`ISNULL()`](comparison-operators.html#function_isnull) | Test whether the
    argument is NULL |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`ISNULL()`](comparison-operators.html#function_isnull) | 测试参数是否为 NULL |'
- en: '| [`LEAST()`](comparison-operators.html#function_least) | Return the smallest
    argument |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`LEAST()`](comparison-operators.html#function_least) | 返回最小的参数 |'
- en: '| [`LIKE`](string-comparison-functions.html#operator_like) | Simple pattern
    matching |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`LIKE`](string-comparison-functions.html#operator_like) | 简单的模式匹配 |'
- en: '| [`NOT BETWEEN ... AND ...`](comparison-operators.html#operator_not-between)
    | Whether a value is not within a range of values |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`NOT BETWEEN ... AND ...`](comparison-operators.html#operator_not-between)
    | 值是否不在一系列值范围内 |'
- en: '| [`NOT IN()`](comparison-operators.html#operator_not-in) | Whether a value
    is not within a set of values |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`NOT IN()`](comparison-operators.html#operator_not-in) | 值是否不在一组值内 |'
- en: '| [`NOT LIKE`](string-comparison-functions.html#operator_not-like) | Negation
    of simple pattern matching |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`NOT LIKE`](string-comparison-functions.html#operator_not-like) | 简单模式匹配的否定
    |'
- en: '| [`STRCMP()`](string-comparison-functions.html#function_strcmp) | Compare
    two strings |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`STRCMP()`](string-comparison-functions.html#function_strcmp) | 比较两个字符串
    |'
- en: '| Name | Description |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: Comparison operations result in a value of `1` (`TRUE`), `0` (`FALSE`), or `NULL`.
    These operations work for both numbers and strings. Strings are automatically
    converted to numbers and numbers to strings as necessary.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 比较操作的结果为`1`（`TRUE`）、`0`（`FALSE`）或`NULL`。这些操作适用于数字和字符串。字符串会根据需要自动转换为数字，数字也会转换为字符串。
- en: 'The following relational comparison operators can be used to compare not only
    scalar operands, but row operands:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下列关系比较运算符可用于比较标量操作数以及行操作数：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The descriptions for those operators later in this section detail how they work
    with row operands. For additional examples of row comparisons in the context of
    row subqueries, see [Section 15.2.15.5, “Row Subqueries”](row-subqueries.html
    "15.2.15.5 Row Subqueries").
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本节后面对这些运算符的描述详细说明了它们如何与行操作数一起工作。有关在行子查询上下文中的行比较的其他示例，请参见[第15.2.15.5节，“行子查询”](row-subqueries.html
    "15.2.15.5 行子查询")。
- en: Some of the functions in this section return values other than `1` (`TRUE`),
    `0` (`FALSE`), or `NULL`. [`LEAST()`](comparison-operators.html#function_least)
    and [`GREATEST()`](comparison-operators.html#function_greatest) are examples of
    such functions; [Section 14.3, “Type Conversion in Expression Evaluation”](type-conversion.html
    "14.3 Type Conversion in Expression Evaluation"), describes the rules for comparison
    operations performed by these and similar functions for determining their return
    values.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的一些函数返回除`1`（`TRUE`）、`0`（`FALSE`）或`NULL`之外的值。[`LEAST()`](comparison-operators.html#function_least)和[`GREATEST()`](comparison-operators.html#function_greatest)就是这样的函数的例子；[第14.3节，“表达式评估中的类型转换”](type-conversion.html
    "14.3 表达式评估中的类型转换")描述了这些函数执行比较操作以确定它们的返回值的规则。
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In previous versions of MySQL, when evaluating an expression containing `LEAST()`
    or `GREATEST()`, the server attempted to guess the context in which the function
    was used, and to coerce the function's arguments to the data type of the expression
    as a whole. For example, the arguments to `LEAST("11", "45", "2")` are evaluated
    and sorted as strings, so that this expression returns `"11"`. In MySQL 8.0.3
    and earlier, when evaluating the expression `LEAST("11", "45", "2") + 0`, the
    server converted the arguments to integers (anticipating the addition of integer
    0 to the result) before sorting them, thus returning 2.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL的早期版本中，当评估包含`LEAST()`或`GREATEST()`的表达式时，服务器尝试猜测函数的使用上下文，并将函数的参数强制转换为整个表达式的数据类型。例如，对于`LEAST("11",
    "45", "2")`的参数将作为字符串进行评估和排序，因此该表达式返回`"11"`。在MySQL 8.0.3及更早版本中，当评估表达式`LEAST("11",
    "45", "2") + 0`时，服务器在对其进行排序之前将参数转换为整数（预期将整数0添加到结果），从而返回2。
- en: 'Beginning with MySQL 8.0.4, the server no longer attempts to infer context
    in this fashion. Instead, the function is executed using the arguments as provided,
    performing data type conversions to one or more of the arguments if and only if
    they are not all of the same type. Any type coercion mandated by an expression
    that makes use of the return value is now performed following function execution.
    This means that, in MySQL 8.0.4 and later, `LEAST("11", "45", "2") + 0` evaluates
    to `"11" + 0` and thus to integer 11\. (Bug #83895, Bug #25123839)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '从MySQL 8.0.4开始，服务器不再尝试以这种方式推断上下文。相反，函数将使用提供的参数执行，仅在它们不全为相同类型时对一个或多个参数执行数据类型转换。现在，任何使用返回值的表达式强制执行的类型强制转换都是在函数执行后执行的。这意味着，在MySQL
    8.0.4及更高版本中，`LEAST("11", "45", "2") + 0`计算为`"11" + 0`，因此为整数11。 (Bug #83895, Bug
    #25123839)'
- en: To convert a value to a specific type for comparison purposes, you can use the
    [`CAST()`](cast-functions.html#function_cast) function. String values can be converted
    to a different character set using [`CONVERT()`](cast-functions.html#function_convert).
    See [Section 14.10, “Cast Functions and Operators”](cast-functions.html "14.10 Cast
    Functions and Operators").
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要将值转换为特定类型以进行比较，可以使用[`CAST()`](cast-functions.html#function_cast)函数。字符串值可以使用[`CONVERT()`](cast-functions.html#function_convert)将其转换为不同的字符集。参见[第14.10节，“转换函数和运算符”](cast-functions.html
    "14.10 转换函数和运算符")。
- en: By default, string comparisons are not case-sensitive and use the current character
    set. The default is `utf8mb4`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，字符串比较不区分大小写，并使用当前字符集。默认为`utf8mb4`。
- en: '[`=`](comparison-operators.html#operator_equal)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`=`](comparison-operators.html#operator_equal)'
- en: 'Equal:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 等于：
- en: '[PRE1]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For row comparisons, `(a, b) = (x, y)` is equivalent to:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于行比较，`(a, b) = (x, y)`等同于：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`<=>`](comparison-operators.html#operator_equal-to)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`<=>`](comparison-operators.html#operator_equal-to)'
- en: '`NULL`-safe equal. This operator performs an equality comparison like the [`=`](comparison-operators.html#operator_equal)
    operator, but returns `1` rather than `NULL` if both operands are `NULL`, and
    `0` rather than `NULL` if one operand is `NULL`.'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`NULL`-安全等于。此运算符执行类似于[`=`](comparison-operators.html#operator_equal)运算符的相等比较，但如果两个操作数都为`NULL`，则返回`1`而不是`NULL`，如果一个操作数为`NULL`，则返回`0`而不是`NULL`。'
- en: The [`<=>`](comparison-operators.html#operator_equal-to) operator is equivalent
    to the standard SQL `IS NOT DISTINCT FROM` operator.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`<=>`](comparison-operators.html#operator_equal-to)运算符等同于标准SQL的`IS NOT DISTINCT
    FROM`运算符。'
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For row comparisons, `(a, b) <=> (x, y)` is equivalent to:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于行比较，`(a, b) <=> (x, y)` 等同于：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[`<>`](comparison-operators.html#operator_not-equal), [`!=`](comparison-operators.html#operator_not-equal)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`<>`](comparison-operators.html#operator_not-equal), [`!=`](comparison-operators.html#operator_not-equal)'
- en: 'Not equal:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不等于：
- en: '[PRE5]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For row comparisons, `(a, b) <> (x, y)` and `(a, b) != (x, y)` are equivalent
    to:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于行比较，`(a, b) <> (x, y)` 和 `(a, b) != (x, y)` 等同于：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[`<=`](comparison-operators.html#operator_less-than-or-equal)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`<=`](comparison-operators.html#operator_less-than-or-equal)'
- en: 'Less than or equal:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小于或等于：
- en: '[PRE7]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For row comparisons, `(a, b) <= (x, y)` is equivalent to:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于行比较，`(a, b) <= (x, y)` 等同于：
- en: '[PRE8]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[`<`](comparison-operators.html#operator_less-than)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`<`](comparison-operators.html#operator_less-than)'
- en: 'Less than:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小于：
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For row comparisons, `(a, b) < (x, y)` is equivalent to:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于行比较，`(a, b) < (x, y)` 等同于：
- en: '[PRE10]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[`>=`](comparison-operators.html#operator_greater-than-or-equal)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`>=`](comparison-operators.html#operator_greater-than-or-equal)'
- en: 'Greater than or equal:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大于或等于：
- en: '[PRE11]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For row comparisons, `(a, b) >= (x, y)` is equivalent to:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于行比较，`(a, b) >= (x, y)` 等同于：
- en: '[PRE12]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[`>`](comparison-operators.html#operator_greater-than)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`>`](comparison-operators.html#operator_greater-than)'
- en: 'Greater than:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大于：
- en: '[PRE13]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For row comparisons, `(a, b) > (x, y)` is equivalent to:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于行比较，`(a, b) > (x, y)` 等同于：
- en: '[PRE14]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[`*`expr`* BETWEEN *`min`* AND *`max`*`](comparison-operators.html#operator_between)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`expr`* BETWEEN *`min`* AND *`max`*`](comparison-operators.html#operator_between)'
- en: If *`expr`* is greater than or equal to *`min`* and *`expr`* is less than or
    equal to *`max`*, [`BETWEEN`](comparison-operators.html#operator_between) returns
    `1`, otherwise it returns `0`. This is equivalent to the expression `(*`min`*
    <= *`expr`* AND *`expr`* <= *`max`*)` if all the arguments are of the same type.
    Otherwise type conversion takes place according to the rules described in [Section 14.3,
    “Type Conversion in Expression Evaluation”](type-conversion.html "14.3 Type Conversion
    in Expression Evaluation"), but applied to all the three arguments.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`expr`*大于或等于*`min`*且*`expr`*小于或等于*`max`*，[`BETWEEN`](comparison-operators.html#operator_between)返回`1`，否则返回`0`。如果所有参数类型相同，则这等同于表达式`(*`min`*
    <= *`expr`* AND *`expr`* <= *`max`*)`。否则，根据[第 14.3 节，“表达式求值中的类型转换”](type-conversion.html
    "14.3 表达式求值中的类型转换")中描述的规则进行类型转换，但应用于所有三个参数。
- en: '[PRE15]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For best results when using [`BETWEEN`](comparison-operators.html#operator_between)
    with date or time values, use [`CAST()`](cast-functions.html#function_cast) to
    explicitly convert the values to the desired data type. Examples: If you compare
    a [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    to two [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    values, convert the [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types") values to [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types") values. If you use a string constant such as `''2001-1-1''` in a comparison
    to a [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"),
    cast the string to a [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types").'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于使用[`BETWEEN`](comparison-operators.html#operator_between)与日期或时间值时，最佳结果是使用[`CAST()`](cast-functions.html#function_cast)显式将值转换为所需的数据类型。例如：如果要比较一个[`DATETIME`](datetime.html
    "13.2.2 日期、DATETIME 和 TIMESTAMP 类型")与两个[`DATE`](datetime.html "13.2.2 日期、DATETIME
    和 TIMESTAMP 类型")值，将[`DATE`](datetime.html "13.2.2 日期、DATETIME 和 TIMESTAMP 类型")值转换为[`DATETIME`](datetime.html
    "13.2.2 日期、DATETIME 和 TIMESTAMP 类型")值。如果在与[`DATE`](datetime.html "13.2.2 日期、DATETIME
    和 TIMESTAMP 类型")比较中使用字符串常量如`'2001-1-1'`，则将字符串转换为[`DATE`](datetime.html "13.2.2 日期、DATETIME
    和 TIMESTAMP 类型")。
- en: '[`*`expr`* NOT BETWEEN *`min`* AND *`max`*`](comparison-operators.html#operator_not-between)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`expr`* NOT BETWEEN *`min`* AND *`max`*`](comparison-operators.html#operator_not-between)'
- en: This is the same as `NOT (*`expr`* BETWEEN *`min`* AND *`max`*)`.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这与`NOT (*`expr`* BETWEEN *`min`* AND *`max`*)`相同。
- en: '[`COALESCE(*`value`*,...)`](comparison-operators.html#function_coalesce)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`COALESCE(*`value`*,...)`](comparison-operators.html#function_coalesce)'
- en: Returns the first non-`NULL` value in the list, or `NULL` if there are no non-`NULL`
    values.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回列表中第一个非`NULL`值，如果没有非`NULL`值则返回`NULL`。
- en: The return type of [`COALESCE()`](comparison-operators.html#function_coalesce)
    is the aggregated type of the argument types.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`COALESCE()`](comparison-operators.html#function_coalesce)的返回类型是参数类型的聚合类型。'
- en: '[PRE16]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[`GREATEST(*`value1`*,*`value2`*,...)`](comparison-operators.html#function_greatest)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`GREATEST(*`value1`*,*`value2`*,...)`](comparison-operators.html#function_greatest)'
- en: With two or more arguments, returns the largest (maximum-valued) argument. The
    arguments are compared using the same rules as for [`LEAST()`](comparison-operators.html#function_least).
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有两个或更多参数时，返回最大值的参数。参数使用与[`LEAST()`](comparison-operators.html#function_least)相同的规则进行比较。
- en: '[PRE17]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[`GREATEST()`](comparison-operators.html#function_greatest) returns `NULL`
    if any argument is `NULL`.'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GREATEST()`](comparison-operators.html#function_greatest)如果任何参数为`NULL`，则返回`NULL`。'
- en: '[`*`expr`* IN (*`value`*,...)`](comparison-operators.html#operator_in)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`expr`* IN (*`value`*,...)`](comparison-operators.html#operator_in)'
- en: Returns `1` (true) if *`expr`* is equal to any of the values in the `IN()` list,
    else returns `0` (false).
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`expr`*等于`IN()`列表中的任何一个值，则返回`1`（true），否则返回`0`（false）。
- en: Type conversion takes place according to the rules described in [Section 14.3,
    “Type Conversion in Expression Evaluation”](type-conversion.html "14.3 Type Conversion
    in Expression Evaluation"), applied to all the arguments. If no type conversion
    is needed for the values in the `IN()` list, they are all non-`JSON` constants
    of the same type, and *`expr`* can be compared to each of them as a value of the
    same type (possibly after type conversion), an optimization takes place. The values
    the list are sorted and the search for *`expr`* is done using a binary search,
    which makes the `IN()` operation very quick.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据[第14.3节，“表达式评估中的类型转换”](type-conversion.html "14.3 表达式评估中的类型转换")中描述的规则进行类型转换，应用于所有参数。如果`IN()`列表中的值不需要类型转换，它们都是相同类型的非`JSON`常量，并且*`expr`*可以与它们中的每一个作为相同类型的值进行比较（可能经过类型转换），则会进行优化。列表中的值被排序，使用二分查找来搜索*`expr`*，使得`IN()`操作非常快速。
- en: '[PRE18]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`IN()` can be used to compare row constructors:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`IN()`可以用于比较行构造：'
- en: '[PRE19]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You should never mix quoted and unquoted values in an `IN()` list because the
    comparison rules for quoted values (such as strings) and unquoted values (such
    as numbers) differ. Mixing types may therefore lead to inconsistent results. For
    example, do not write an `IN()` expression like this:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 永远不要在`IN()`列表中混合引号和非引号值，因为引号值（如字符串）和非引号值（如数字）的比较规则不同。因此，混合类型可能导致不一致的结果。例如，不要像这样编写`IN()`表达式：
- en: '[PRE20]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Instead, write it like this:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相反，应该这样写：
- en: '[PRE21]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Implicit type conversion may produce nonintuitive results:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 隐式类型转换可能会产生令人费解的结果：
- en: '[PRE22]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In both cases, the comparison values are converted to floating-point values,
    yielding 0.0 in each case, and a comparison result of 1 (true).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这两种情况下，比较值被转换为浮点值，每种情况下均产生0.0，并且比较结果为1（true）。
- en: The number of values in the `IN()` list is only limited by the [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)
    value.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`IN()`列表中的值的数量仅受[`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)值的限制。'
- en: To comply with the SQL standard, `IN()` returns `NULL` not only if the expression
    on the left hand side is `NULL`, but also if no match is found in the list and
    one of the expressions in the list is `NULL`.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了符合SQL标准，`IN()`不仅在左侧表达式为`NULL`时返回`NULL`，而且在列表中找不到匹配项且列表中的一个表达式为`NULL`时也返回`NULL`。
- en: '`IN()` syntax can also be used to write certain types of subqueries. See [Section 15.2.15.3,
    “Subqueries with ANY, IN, or SOME”](any-in-some-subqueries.html "15.2.15.3 Subqueries
    with ANY, IN, or SOME").'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`IN()`语法也可以用于编写某些类型的子查询。请参见[第15.2.15.3节，“带有ANY、IN或SOME的子查询”](any-in-some-subqueries.html
    "15.2.15.3 带有ANY、IN或SOME的子查询")。'
- en: '[`*`expr`* NOT IN (*`value`*,...)`](comparison-operators.html#operator_not-in)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`expr`* NOT IN (*`value`*,...)`](comparison-operators.html#operator_not-in)'
- en: This is the same as `NOT (*`expr`* IN (*`value`*,...))`.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这与`NOT (*`expr`* IN (*`value`*,...))`相同。
- en: '[`INTERVAL(*`N`*,*`N1`*,*`N2`*,*`N3`*,...)`](comparison-operators.html#function_interval)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INTERVAL(*`N`*,*`N1`*,*`N2`*,*`N3`*,...)`](comparison-operators.html#function_interval)'
- en: Returns `0` if *`N`* ≤ *`N1`*, `1` if *`N`* ≤ *`N2`* and so on, or `-1` if *`N`*
    is `NULL`. All arguments are treated as integers. It is required that *`N1`* ≤
    *`N2`* ≤ *`N3`* ≤ `...` ≤ *`Nn`* for this function to work correctly. This is
    because a binary search is used (very fast).
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`N`* ≤ *`N1`*，则返回`0`，如果*`N`* ≤ *`N2`*等等，或者如果*`N`*为`NULL`，则返回`-1`。所有参数都被视为整数。对于这个函数能够正确工作，需要满足*`N1`*
    ≤ *`N2`* ≤ *`N3`* ≤ `...` ≤ *`Nn`*。这是因为使用了二分查找（非常快速）。
- en: '[PRE23]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[`IS *`boolean_value`*`](comparison-operators.html#operator_is)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IS *`boolean_value`*`](comparison-operators.html#operator_is)'
- en: Tests a value against a boolean value, where *`boolean_value`* can be `TRUE`,
    `FALSE`, or `UNKNOWN`.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试一个值是否等于布尔值，其中*`boolean_value`*可以是`TRUE`、`FALSE`或`UNKNOWN`。
- en: '[PRE24]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[`IS NOT *`boolean_value`*`](comparison-operators.html#operator_is-not)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IS NOT *`boolean_value`*`](comparison-operators.html#operator_is-not)'
- en: Tests a value against a boolean value, where *`boolean_value`* can be `TRUE`,
    `FALSE`, or `UNKNOWN`.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试一个值是否等于布尔值，其中*`boolean_value`*可以是`TRUE`、`FALSE`或`UNKNOWN`。
- en: '[PRE25]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[`IS NULL`](comparison-operators.html#operator_is-null)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IS NULL`](comparison-operators.html#operator_is-null)'
- en: Tests whether a value is `NULL`.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试一个值是否为`NULL`。
- en: '[PRE26]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To work well with ODBC programs, MySQL supports the following extra features
    when using [`IS NULL`](comparison-operators.html#operator_is-null):'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了与ODBC程序良好配合，MySQL在使用[`IS NULL`](comparison-operators.html#operator_is-null)时支持以下额外功能：
- en: 'If [`sql_auto_is_null`](server-system-variables.html#sysvar_sql_auto_is_null)
    variable is set to 1, then after a statement that successfully inserts an automatically
    generated `AUTO_INCREMENT` value, you can find that value by issuing a statement
    of the following form:'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果[`sql_auto_is_null`](server-system-variables.html#sysvar_sql_auto_is_null)变量设置为1，则在成功插入自动生成的`AUTO_INCREMENT`值的语句之后，可以通过发出以下形式的语句找到该值：
- en: '[PRE27]'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If the statement returns a row, the value returned is the same as if you invoked
    the [`LAST_INSERT_ID()`](information-functions.html#function_last-insert-id) function.
    For details, including the return value after a multiple-row insert, see [Section 14.15,
    “Information Functions”](information-functions.html "14.15 Information Functions").
    If no `AUTO_INCREMENT` value was successfully inserted, the [`SELECT`](select.html
    "15.2.13 SELECT Statement") statement returns no row.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果语句返回一行，则返回的值与调用[`LAST_INSERT_ID()`](information-functions.html#function_last-insert-id)函数的结果相同。有关详细信息，包括多行插入后的返回值，请参见[第14.15节，“信息函数”](information-functions.html
    "14.15 信息函数")。如果没有成功插入`AUTO_INCREMENT`值，则[`SELECT`](select.html "15.2.13 SELECT语句")语句不返回任何行。
- en: The behavior of retrieving an `AUTO_INCREMENT` value by using an [`IS NULL`](comparison-operators.html#operator_is-null)
    comparison can be disabled by setting [`sql_auto_is_null = 0`](server-system-variables.html#sysvar_sql_auto_is_null).
    See [Section 7.1.8, “Server System Variables”](server-system-variables.html "7.1.8 Server
    System Variables").
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过设置[`sql_auto_is_null = 0`](server-system-variables.html#sysvar_sql_auto_is_null)可以禁用使用[`IS
    NULL`](comparison-operators.html#operator_is-null)比较来检索`AUTO_INCREMENT`值的行为。请参见[第7.1.8节，“服务器系统变量”](server-system-variables.html
    "7.1.8 服务器系统变量")。
- en: The default value of [`sql_auto_is_null`](server-system-variables.html#sysvar_sql_auto_is_null)
    is 0.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`sql_auto_is_null`](server-system-variables.html#sysvar_sql_auto_is_null)的默认值为0。'
- en: 'For [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    and [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    columns that are declared as `NOT NULL`, you can find the special date `''0000-00-00''`
    by using a statement like this:'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于声明为`NOT NULL`的[`DATE`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")和[`DATETIME`](datetime.html
    "13.2.2 DATE、DATETIME和TIMESTAMP类型")列，可以通过类似以下语句找到特殊日期`'0000-00-00'`：
- en: '[PRE28]'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This is needed to get some ODBC applications to work because ODBC does not support
    a `'0000-00-00'` date value.
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是为了使一些ODBC应用程序正常工作而需要的，因为ODBC不支持`'0000-00-00'`日期值。
- en: See [Obtaining Auto-Increment Values](/doc/connector-odbc/en/connector-odbc-usagenotes-functionality-last-insert-id.html),
    and the description for the `FLAG_AUTO_IS_NULL` option at [Connector/ODBC Connection
    Parameters](/doc/connector-odbc/en/connector-odbc-configuration-connection-parameters.html).
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见[获取自增值](/doc/connector-odbc/zh/connector-odbc-usagenotes-functionality-last-insert-id.html)，以及[Connector/ODBC连接参数](/doc/connector-odbc/zh/connector-odbc-configuration-connection-parameters.html)中`FLAG_AUTO_IS_NULL`选项的描述。
- en: '[`IS NOT NULL`](comparison-operators.html#operator_is-null)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IS NOT NULL`](comparison-operators.html#operator_is-null)'
- en: Tests whether a value is not `NULL`.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试一个值是否不为`NULL`。
- en: '[PRE29]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[`ISNULL(*`expr`*)`](comparison-operators.html#function_isnull)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ISNULL(*`expr`*)`](comparison-operators.html#function_isnull)'
- en: If *`expr`* is `NULL`, [`ISNULL()`](comparison-operators.html#function_isnull)
    returns `1`, otherwise it returns `0`.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`expr`*为`NULL`，[`ISNULL()`](comparison-operators.html#function_isnull)返回`1`，否则返回`0`。
- en: '[PRE30]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[`ISNULL()`](comparison-operators.html#function_isnull) can be used instead
    of [`=`](comparison-operators.html#operator_equal) to test whether a value is
    `NULL`. (Comparing a value to `NULL` using [`=`](comparison-operators.html#operator_equal)
    always yields `NULL`.)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ISNULL()`](comparison-operators.html#function_isnull)可用于代替[`=`](comparison-operators.html#operator_equal)来测试一个值是否为`NULL`。（使用[`=`](comparison-operators.html#operator_equal)将值与`NULL`进行比较总是返回`NULL`。）'
- en: The [`ISNULL()`](comparison-operators.html#function_isnull) function shares
    some special behaviors with the [`IS NULL`](comparison-operators.html#operator_is-null)
    comparison operator. See the description of [`IS NULL`](comparison-operators.html#operator_is-null).
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ISNULL()`](comparison-operators.html#function_isnull)函数与[`IS NULL`](comparison-operators.html#operator_is-null)比较运算符共享一些特殊行为。请参见[`IS
    NULL`](comparison-operators.html#operator_is-null)的描述。'
- en: '[`LEAST(*`value1`*,*`value2`*,...)`](comparison-operators.html#function_least)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LEAST(*`value1`*,*`value2`*,...)`](comparison-operators.html#function_least)'
- en: 'With two or more arguments, returns the smallest (minimum-valued) argument.
    The arguments are compared using the following rules:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于两个或更多参数，返回最小值的参数。参数将根据以下规则进行比较：
- en: If any argument is `NULL`, the result is `NULL`. No comparison is needed.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何参数为`NULL`，则结果为`NULL`。不需要进行比较。
- en: If all arguments are integer-valued, they are compared as integers.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有参数都是整数值，则它们将作为整数进行比较。
- en: If at least one argument is double precision, they are compared as double-precision
    values. Otherwise, if at least one argument is a [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") value, they are compared
    as [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point Types (Exact Value)
    - DECIMAL, NUMERIC") values.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果至少一个参数是双精度，则它们将作为双精度值进行比较。否则，如果至少一个参数是[`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC")值，则它们将作为[`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC")值进行比较。
- en: If the arguments comprise a mix of numbers and strings, they are compared as
    strings.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数包含数字和字符串的混合，则它们将作为字符串进行比较。
- en: If any argument is a nonbinary (character) string, the arguments are compared
    as nonbinary strings.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何参数是非二进制（字符）字符串，则参数将作为非二进制字符串进行比较。
- en: In all other cases, the arguments are compared as binary strings.
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有其他情况下，参数将作为二进制字符串进行比较。
- en: The return type of [`LEAST()`](comparison-operators.html#function_least) is
    the aggregated type of the comparison argument types.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`LEAST()`](comparison-operators.html#function_least)的返回类型是比较参数类型的聚合类型。'
- en: '[PRE31]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
