- en: 27.1 Defining Stored Programs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 27.1 定义存储程序
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/stored-programs-defining.html](https://dev.mysql.com/doc/refman/8.0/en/stored-programs-defining.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/stored-programs-defining.html](https://dev.mysql.com/doc/refman/8.0/en/stored-programs-defining.html)
- en: 'Each stored program contains a body that consists of an SQL statement. This
    statement may be a compound statement made up of several statements separated
    by semicolon (`;`) characters. For example, the following stored procedure has
    a body made up of a [`BEGIN ... END`](begin-end.html "15.6.1 BEGIN ... END Compound
    Statement") block that contains a [`SET`](set-variable.html "15.7.6.1 SET Syntax
    for Variable Assignment") statement and a [`REPEAT`](repeat.html "15.6.5.6 REPEAT
    Statement") loop that itself contains another [`SET`](set-variable.html "15.7.6.1 SET
    Syntax for Variable Assignment") statement:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个存储程序包含一个由SQL语句组成的主体。该语句可以是由分号(`;`)字符分隔的多个语句组成的复合语句。例如，以下存储过程具有由[`BEGIN ...
    END`](begin-end.html "15.6.1 BEGIN ... END Compound Statement")块组成的主体，其中包含一个[`SET`](set-variable.html
    "15.7.6.1 SET Syntax for Variable Assignment")语句和一个包含另一个[`SET`](set-variable.html
    "15.7.6.1 SET Syntax for Variable Assignment")语句的[`REPEAT`](repeat.html "15.6.5.6 REPEAT
    Statement")循环：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you use the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") client program to define a stored program containing semicolon characters,
    a problem arises. By default, [**mysql**](mysql.html "6.5.1 mysql — The MySQL
    Command-Line Client") itself recognizes the semicolon as a statement delimiter,
    so you must redefine the delimiter temporarily to cause [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") to pass the entire stored program
    definition to the server.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端程序定义包含分号字符的存储程序，则会出现问题。默认情况下，[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")本身将分号识别为语句分隔符，因此您必须临时重新定义分隔符，以使[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")将整个存储程序定义传递给服务器。
- en: To redefine the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") delimiter, use the `delimiter` command. The following example shows how
    to do this for the `dorepeat()` procedure just shown. The delimiter is changed
    to `//` to enable the entire definition to be passed to the server as a single
    statement, and then restored to `;` before invoking the procedure. This enables
    the `;` delimiter used in the procedure body to be passed through to the server
    rather than being interpreted by [**mysql**](mysql.html "6.5.1 mysql — The MySQL
    Command-Line Client") itself.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新定义[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")的分隔符，请使用`delimiter`命令。以下示例展示了如何为刚刚显示的`dorepeat()`过程执行此操作。将分隔符更改为`//`以便将整个定义作为单个语句传递给服务器，然后在调用过程之前将其恢复为`;`。这样可以使过程体中使用的`;`分隔符传递到服务器，而不是被[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")本身解释。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can redefine the delimiter to a string other than `//`, and the delimiter
    can consist of a single character or multiple characters. You should avoid the
    use of the backslash (`\`) character because that is the escape character for
    MySQL.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将分隔符重新定义为除`//`之外的其他字符串，并且分隔符可以由单个字符或多个字符组成。应避免使用反斜杠（`\`）字符，因为这是MySQL的转义字符。
- en: 'The following is an example of a function that takes a parameter, performs
    an operation using an SQL function, and returns the result. In this case, it is
    unnecessary to use `delimiter` because the function definition contains no internal
    `;` statement delimiters:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个接受参数、使用SQL函数执行操作并返回结果的函数示例。在这种情况下，不需要使用`delimiter`，因为函数定义不包含内部的`;`语句分隔符：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
