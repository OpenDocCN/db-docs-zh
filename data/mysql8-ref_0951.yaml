- en: 15.2.12 REPLACE Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.2.12 REPLACE Statement
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replace.html](https://dev.mysql.com/doc/refman/8.0/en/replace.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replace.html](https://dev.mysql.com/doc/refman/8.0/en/replace.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`REPLACE`](replace.html "15.2.12 REPLACE Statement") works exactly like [`INSERT`](insert.html
    "15.2.7 INSERT Statement"), except that if an old row in the table has the same
    value as a new row for a `PRIMARY KEY` or a `UNIQUE` index, the old row is deleted
    before the new row is inserted. See [Section 15.2.7, “INSERT Statement”](insert.html
    "15.2.7 INSERT Statement").'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`REPLACE`](replace.html "15.2.12 REPLACE Statement")的工作方式与[`INSERT`](insert.html
    "15.2.7 INSERT Statement")完全相同，唯一的区别是，如果表中的旧行与`PRIMARY KEY`或`UNIQUE`索引的新行具有相同的值，则在插入新行之前会删除旧行。请参见[第
    15.2.7 节，“INSERT Statement”](insert.html "15.2.7 INSERT Statement")。'
- en: '[`REPLACE`](replace.html "15.2.12 REPLACE Statement") is a MySQL extension
    to the SQL standard. It either inserts, or *deletes* and inserts. For another
    MySQL extension to standard SQL—that either inserts or *updates*—see [Section 15.2.7.2,
    “INSERT ... ON DUPLICATE KEY UPDATE Statement”](insert-on-duplicate.html "15.2.7.2 INSERT
    ... ON DUPLICATE KEY UPDATE Statement").'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`REPLACE`](replace.html "15.2.12 REPLACE Statement")是 MySQL 对 SQL 标准的扩展。它要么插入，要么*删除并插入*。对于另一个
    MySQL 对标准 SQL 的扩展——要么插入，要么*更新*，请参见[第 15.2.7.2 节，“INSERT ... ON DUPLICATE KEY UPDATE
    Statement”](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE
    Statement")。'
- en: '`DELAYED` inserts and replaces were deprecated in MySQL 5.6\. In MySQL 8.0,
    `DELAYED` is not supported. The server recognizes but ignores the `DELAYED` keyword,
    handles the replace as a nondelayed replace, and generates an `ER_WARN_LEGACY_SYNTAX_CONVERTED`
    warning: REPLACE DELAYED is no longer supported. The statement was converted to
    REPLACE. The `DELAYED` keyword is scheduled for removal in a future release. release.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`DELAYED`插入和替换在 MySQL 5.6 中已弃用。在 MySQL 8.0 中，不再支持`DELAYED`。服务器会识别但忽略`DELAYED`关键字，将替换处理为非延迟替换，并生成一个`ER_WARN_LEGACY_SYNTAX_CONVERTED`警告：REPLACE
    DELAYED 不再受支持。该语句已转换为 REPLACE。`DELAYED`关键字计划在将来的版本中移除。'
- en: Note
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`REPLACE`](replace.html "15.2.12 REPLACE Statement") makes sense only if a
    table has a `PRIMARY KEY` or `UNIQUE` index. Otherwise, it becomes equivalent
    to [`INSERT`](insert.html "15.2.7 INSERT Statement"), because there is no index
    to be used to determine whether a new row duplicates another.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[`REPLACE`](replace.html "15.2.12 REPLACE Statement")仅在表具有`PRIMARY KEY`或`UNIQUE`索引时才有意义。否则，它将等同于[`INSERT`](insert.html
    "15.2.7 INSERT Statement")，因为没有索引可用于确定新行是否重复。'
- en: Values for all columns are taken from the values specified in the [`REPLACE`](replace.html
    "15.2.12 REPLACE Statement") statement. Any missing columns are set to their default
    values, just as happens for [`INSERT`](insert.html "15.2.7 INSERT Statement").
    You cannot refer to values from the current row and use them in the new row. If
    you use an assignment such as `SET *`col_name`* = *`col_name`* + 1`, the reference
    to the column name on the right hand side is treated as [`DEFAULT(*`col_name`*)`](miscellaneous-functions.html#function_default),
    so the assignment is equivalent to `SET *`col_name`* = DEFAULT(*`col_name`*) +
    1`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有列的值都取自[`REPLACE`](replace.html "15.2.12 REPLACE Statement")语句中指定的值。任何缺失的列都将设置为它们的默认值，就像[`INSERT`](insert.html
    "15.2.7 INSERT Statement")一样。您不能引用当前行的值并在新行中使用它们。如果您使用类似`SET *col_name* = *col_name*
    + 1`的赋值，右侧的列名引用将被视为[`DEFAULT(*col_name*)`](miscellaneous-functions.html#function_default)，因此该赋值等效于`SET
    *col_name* = DEFAULT(*col_name*) + 1`。
- en: In MySQL 8.0.19 and later, you can specify the column values that `REPLACE`
    attempts to insert using [`VALUES ROW()`](values.html "15.2.19 VALUES Statement").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.19 及更高版本中，您可以使用[`VALUES ROW()`](values.html "15.2.19 VALUES Statement")指定`REPLACE`尝试插入的列值。
- en: To use [`REPLACE`](replace.html "15.2.12 REPLACE Statement"), you must have
    both the [`INSERT`](privileges-provided.html#priv_insert) and [`DELETE`](privileges-provided.html#priv_delete)
    privileges for the table.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用[`REPLACE`](replace.html "15.2.12 REPLACE Statement")，您必须对表具有[`INSERT`](privileges-provided.html#priv_insert)和[`DELETE`](privileges-provided.html#priv_delete)权限。
- en: If a generated column is replaced explicitly, the only permitted value is `DEFAULT`.
    For information about generated columns, see [Section 15.1.20.8, “CREATE TABLE
    and Generated Columns”](create-table-generated-columns.html "15.1.20.8 CREATE
    TABLE and Generated Columns").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个生成的列被显式替换，唯一允许的值是`DEFAULT`。有关生成列的信息，请参见[第 15.1.20.8 节，“CREATE TABLE and
    Generated Columns”](create-table-generated-columns.html "15.1.20.8 CREATE TABLE
    and Generated Columns")。
- en: '`REPLACE` supports explicit partition selection using the `PARTITION` clause
    with a list of comma-separated names of partitions, subpartitions, or both. As
    with [`INSERT`](insert.html "15.2.7 INSERT Statement"), if it is not possible
    to insert the new row into any of these partitions or subpartitions, the `REPLACE`
    statement fails with the error Found a row not matching the given partition set.
    For more information and examples, see [Section 26.5, “Partition Selection”](partitioning-selection.html
    "26.5 Partition Selection").'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`REPLACE`支持使用`PARTITION`子句显式选择分区，后面跟着逗号分隔的分区、子分区或两者名称列表。与[`INSERT`](insert.html
    "15.2.7 INSERT Statement")一样，如果无法将新行插入这些分区或子分区中的任何一个，`REPLACE`语句将失败，并显示错误信息“Found
    a row not matching the given partition set”。有关更多信息和示例，请参见[第26.5节，“分区选择”](partitioning-selection.html
    "26.5 Partition Selection")。'
- en: The [`REPLACE`](replace.html "15.2.12 REPLACE Statement") statement returns
    a count to indicate the number of rows affected. This is the sum of the rows deleted
    and inserted. If the count is 1 for a single-row [`REPLACE`](replace.html "15.2.12 REPLACE
    Statement"), a row was inserted and no rows were deleted. If the count is greater
    than 1, one or more old rows were deleted before the new row was inserted. It
    is possible for a single row to replace more than one old row if the table contains
    multiple unique indexes and the new row duplicates values for different old rows
    in different unique indexes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`REPLACE`](replace.html "15.2.12 REPLACE Statement")语句返回一个计数，指示受影响的行数。这是删除和插入的行数之和。如果对于单行[`REPLACE`](replace.html
    "15.2.12 REPLACE Statement")，计数为1，则插入了一行且未删除任何行。如果计数大于1，则在插入新行之前删除了一个或多个旧行。如果表包含多个唯一索引，并且新行在不同唯一索引中重复值以替换一个以上的旧行是可能的。'
- en: 'The affected-rows count makes it easy to determine whether [`REPLACE`](replace.html
    "15.2.12 REPLACE Statement") only added a row or whether it also replaced any
    rows: Check whether the count is 1 (added) or greater (replaced).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 受影响的行数计数使得很容易确定[`REPLACE`](replace.html "15.2.12 REPLACE Statement")是否仅添加了一行还是还替换了任何行：检查计数是否为1（添加）或大于1（替换）。
- en: If you are using the C API, the affected-rows count can be obtained using the
    [`mysql_affected_rows()`](/doc/c-api/8.0/en/mysql-affected-rows.html) function.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用C API，则可以使用[`mysql_affected_rows()`](/doc/c-api/8.0/en/mysql-affected-rows.html)函数获取受影响的行数计数。
- en: You cannot replace into a table and select from the same table in a subquery.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不能在子查询中将新行替换到表中并从同一表中进行选择。
- en: 'MySQL uses the following algorithm for [`REPLACE`](replace.html "15.2.12 REPLACE
    Statement") (and [`LOAD DATA ... REPLACE`](load-data.html "15.2.9 LOAD DATA Statement")):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL使用以下算法进行[`REPLACE`](replace.html "15.2.12 REPLACE Statement")（以及[`LOAD
    DATA ... REPLACE`](load-data.html "15.2.9 LOAD DATA Statement")）：
- en: Try to insert the new row into the table
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试将新行插入表中
- en: 'While the insertion fails because a duplicate-key error occurs for a primary
    key or unique index:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当由于主键或唯一索引发生重复键错误而插入失败时：
- en: Delete from the table the conflicting row that has the duplicate key value
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从表中删除具有重复键值的冲突行
- en: Try again to insert the new row into the table
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次尝试将新行插入表中
- en: It is possible that in the case of a duplicate-key error, a storage engine may
    perform the `REPLACE` as an update rather than a delete plus insert, but the semantics
    are the same. There are no user-visible effects other than a possible difference
    in how the storage engine increments `Handler_*`xxx`*` status variables.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在重复键错误的情况下，存储引擎可能将`REPLACE`作为更新而不是删除加插入来执行，但语义是相同的。除了存储引擎如何递增`Handler_*`xxx`*`状态变量可能有所不同外，没有其他用户可见的影响。
- en: Because the results of `REPLACE ... SELECT` statements depend on the ordering
    of rows from the [`SELECT`](select.html "15.2.13 SELECT Statement") and this order
    cannot always be guaranteed, it is possible when logging these statements for
    the source and the replica to diverge. For this reason, `REPLACE ... SELECT` statements
    are flagged as unsafe for statement-based replication. such statements produce
    a warning in the error log when using statement-based mode and are written to
    the binary log using the row-based format when using `MIXED` mode. See also [Section 19.2.1.1,
    “Advantages and Disadvantages of Statement-Based and Row-Based Replication”](replication-sbr-rbr.html
    "19.2.1.1 Advantages and Disadvantages of Statement-Based and Row-Based Replication").
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`REPLACE ... SELECT`语句的结果取决于从[`SELECT`](select.html "15.2.13 SELECT Statement")中的行的排序，而这种顺序并不能始终保证，所以在记录这些语句时，源和副本可能会发生分歧。因此，`REPLACE
    ... SELECT`语句被标记为不安全的基于语句的复制。当使用基于语句的模式时，这些语句在错误日志中产生警告，并在使用`MIXED`模式时以基于行的格式写入二进制日志。另请参阅[Section 19.2.1.1,
    “Advantages and Disadvantages of Statement-Based and Row-Based Replication”](replication-sbr-rbr.html
    "19.2.1.1 Advantages and Disadvantages of Statement-Based and Row-Based Replication")。
- en: MySQL 8.0.19 and later supports [`TABLE`](table.html "15.2.16 TABLE Statement")
    as well as [`SELECT`](select.html "15.2.13 SELECT Statement") with `REPLACE`,
    just as it does with [`INSERT`](insert.html "15.2.7 INSERT Statement"). See [Section 15.2.7.1,
    “INSERT ... SELECT Statement”](insert-select.html "15.2.7.1 INSERT ... SELECT
    Statement"), for more information and examples.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0.19及更高版本支持[`TABLE`](table.html "15.2.16 TABLE Statement")以及带有`REPLACE`的[`SELECT`](select.html
    "15.2.13 SELECT Statement")，就像它对[`INSERT`](insert.html "15.2.7 INSERT Statement")一样。有关更多信息和示例，请参见[Section 15.2.7.1,
    “INSERT ... SELECT Statement”](insert-select.html "15.2.7.1 INSERT ... SELECT
    Statement")。
- en: 'When modifying an existing table that is not partitioned to accommodate partitioning,
    or, when modifying the partitioning of an already partitioned table, you may consider
    altering the table''s primary key (see [Section 26.6.1, “Partitioning Keys, Primary
    Keys, and Unique Keys”](partitioning-limitations-partitioning-keys-unique-keys.html
    "26.6.1 Partitioning Keys, Primary Keys, and Unique Keys")). You should be aware
    that, if you do this, the results of `REPLACE` statements may be affected, just
    as they would be if you modified the primary key of a nonpartitioned table. Consider
    the table created by the following [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") statement:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当修改一个现有的非分区表以适应分区，或者修改已经分区表的分区时，您可能考虑修改表的主键（参见[Section 26.6.1, “Partitioning
    Keys, Primary Keys, and Unique Keys”](partitioning-limitations-partitioning-keys-unique-keys.html
    "26.6.1 Partitioning Keys, Primary Keys, and Unique Keys")）。您应该意识到，如果这样做，`REPLACE`语句的结果可能会受到影响，就像您修改非分区表的主键时一样。考虑以下由[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句创建的表：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we create this table and run the statements shown in the mysql client,
    the result is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建这个表并在mysql客户端中运行所示的语句时，结果如下：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we create a second table almost identical to the first, except that the
    primary key now covers 2 columns, as shown here (emphasized text):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建一个几乎与第一个表相同的第二个表，唯一不同的是主键现在涵盖了2列，如下所示（加粗文本）：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When we run on `test2` the same two `REPLACE` statements as we did on the original
    `test` table, we obtain a different result:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在`test2`上运行与原始`test`表相同的两个`REPLACE`语句时，我们得到不同的结果：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is due to the fact that, when run on `test2`, both the `id` and `ts` column
    values must match those of an existing row for the row to be replaced; otherwise,
    a row is inserted.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在`test2`上运行时，`id`和`ts`列的值必须与现有行的值匹配才能替换行；否则，将插入一行。
