- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/row-constructor-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/row-constructor-optimization.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/row-constructor-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/row-constructor-optimization.html)
- en: 10.2.1.22 Row Constructor Expression Optimization
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.2.1.22 行构造函数表达式优化
- en: 'Row constructors permit simultaneous comparisons of multiple values. For example,
    these two statements are semantically equivalent:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 行构造函数允许同时比较多个值。例如，以下两个语句在语义上是等价的：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In addition, the optimizer handles both expressions the same way.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，优化器以相同方式处理这两个表达式。
- en: 'The optimizer is less likely to use available indexes if the row constructor
    columns do not cover the prefix of an index. Consider the following table, which
    has a primary key on `(c1, c2, c3)`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果行构造函数的列不覆盖索引的前缀，优化器就不太可能使用可用的索引。考虑以下表，其主键为`(c1, c2, c3)`：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this query, the `WHERE` clause uses all columns in the index. However, the
    row constructor itself does not cover an index prefix, with the result that the
    optimizer uses only `c1` (`key_len=4`, the size of `c1`):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在此查询中，`WHERE`子句使用索引中的所有列。然而，行构造函数本身不覆盖索引前缀，导致优化器仅使用`c1`（`key_len=4`，即`c1`的大小）：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In such cases, rewriting the row constructor expression using an equivalent
    nonconstructor expression may result in more complete index use. For the given
    query, the row constructor and equivalent nonconstructor expressions are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，将行构造函数表达式重写为等效的非构造函数表达式可能会导致更完整的索引使用。对于给定的查询，行构造函数和等效的非构造函数表达式分别为：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Rewriting the query to use the nonconstructor expression results in the optimizer
    using all three columns in the index (`key_len=12`):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将查询重写为使用非构造函数表达式会导致优化器在索引中使用所有三列（`key_len=12`）：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Thus, for better results, avoid mixing row constructors with [`AND`](logical-operators.html#operator_and)/[`OR`](logical-operators.html#operator_or)
    expressions. Use one or the other.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了获得更好的结果，避免将行构造函数与[`AND`](logical-operators.html#operator_and)/[`OR`](logical-operators.html#operator_or)表达式混合使用。选择其中一个使用。
- en: Under certain conditions, the optimizer can apply the range access method to
    [`IN()`](comparison-operators.html#operator_in) expressions that have row constructor
    arguments. See [Range Optimization of Row Constructor Expressions](range-optimization.html#row-constructor-range-optimization
    "Range Optimization of Row Constructor Expressions").
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些条件下，优化器可以对具有行构造函数参数的[`IN()`](comparison-operators.html#operator_in)表达式应用范围访问方法。参见[行构造函数表达式的范围优化](range-optimization.html#row-constructor-range-optimization
    "行构造函数表达式的范围优化")。
