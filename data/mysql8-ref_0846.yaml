- en: 14.17.3 Functions That Search JSON Values
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.17.3 搜索JSON值的函数
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html](https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html)
- en: The functions in this section perform search or comparison operations on JSON
    values to extract data from them, report whether data exists at a location within
    them, or report the path to data within them. The [`MEMBER OF()`](json-search-functions.html#operator_member-of)
    operator is also documented herein.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的函数执行JSON值的搜索或比较操作，以从中提取数据，报告数据是否存在于其中的位置，或报告数据在其中的路径。此外，[`MEMBER OF()`](json-search-functions.html#operator_member-of)
    运算符也在此处记录。
- en: '[`JSON_CONTAINS(*`target`*, *`candidate`*[, *`path`*])`](json-search-functions.html#function_json-contains)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_CONTAINS(*`target`*, *`candidate`*[, *`path`*])`](json-search-functions.html#function_json-contains)'
- en: Indicates by returning 1 or 0 whether a given *`candidate`* JSON document is
    contained within a *`target`* JSON document, or—if a *`path`* argument was supplied—whether
    the candidate is found at a specific path within the target. Returns `NULL` if
    any argument is `NULL`, or if the path argument does not identify a section of
    the target document. An error occurs if *`target`* or *`candidate`* is not a valid
    JSON document, or if the *`path`* argument is not a valid path expression or contains
    a `*` or `**` wildcard.
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过返回1或0指示给定的*`candidate`* JSON文档是否包含在*`target`* JSON文档中，或者 - 如果提供了*`path`*参数
    - 候选是否在目标中的特定路径中找到。如果任何参数为`NULL`，或者路径参数未标识目标文档的某个部分，则返回`NULL`。如果*`target`*或*`candidate`*不是有效的JSON文档，或者*`path`*参数不是有效的路径表达式或包含`*`或`**`通配符，则会发生错误。
- en: To check only whether any data exists at the path, use [`JSON_CONTAINS_PATH()`](json-search-functions.html#function_json-contains-path)
    instead.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 若要仅检查路径上是否存在任何数据，请改用[`JSON_CONTAINS_PATH()`](json-search-functions.html#function_json-contains-path)。
- en: 'The following rules define containment:'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下规则定义包含：
- en: A candidate scalar is contained in a target scalar if and only if they are comparable
    and are equal. Two scalar values are comparable if they have the same [`JSON_TYPE()`](json-attribute-functions.html#function_json-type)
    types, with the exception that values of types `INTEGER` and `DECIMAL` are also
    comparable to each other.
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果且仅如果候选标量包含在目标标量中，则它们是可比较且相等。如果两个标量值具有相同的[`JSON_TYPE()`](json-attribute-functions.html#function_json-type)类型，则它们是可比较的，但`INTEGER`和`DECIMAL`类型的值也可以相互比较。
- en: A candidate array is contained in a target array if and only if every element
    in the candidate is contained in some element of the target.
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果且仅如果候选数组中的每个元素包含在目标数组的某个元素中，则候选数组包含在目标数组中。
- en: A candidate nonarray is contained in a target array if and only if the candidate
    is contained in some element of the target.
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果且仅如果候选非数组包含在目标数组中，则候选包含在目标的某个元素中。
- en: A candidate object is contained in a target object if and only if for each key
    in the candidate there is a key with the same name in the target and the value
    associated with the candidate key is contained in the value associated with the
    target key.
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果且仅如果候选对象包含在目标对象中，则对于候选中的每个键，目标中都有一个同名键，并且与候选键关联的值包含在与目标键关联的值中。
- en: Otherwise, the candidate value is not contained in the target document.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则，候选值不包含在目标文档中。
- en: Starting with MySQL 8.0.17, queries using `JSON_CONTAINS()` on [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") tables can be optimized using multi-valued
    indexes; see [Multi-Valued Indexes](create-index.html#create-index-multi-valued
    "Multi-Valued Indexes"), for more information.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.17开始，在[`InnoDB`](innodb-storage-engine.html "第17章 InnoDB存储引擎")表上使用`JSON_CONTAINS()`的查询可以通过多值索引进行优化；有关更多信息，请参见[多值索引](create-index.html#create-index-multi-valued
    "多值索引")。
- en: '[PRE0]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`JSON_CONTAINS_PATH(*`json_doc`*, *`one_or_all`*, *`path`*[, *`path`*] ...)`](json-search-functions.html#function_json-contains-path)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_CONTAINS_PATH(*`json_doc`*, *`one_or_all`*, *`path`*[, *`path`*] ...)`](json-search-functions.html#function_json-contains-path)'
- en: Returns 0 or 1 to indicate whether a JSON document contains data at a given
    path or paths. Returns `NULL` if any argument is `NULL`. An error occurs if the
    *`json_doc`* argument is not a valid JSON document, any *`path`* argument is not
    a valid path expression, or *`one_or_all`* is not `'one'` or `'all'`.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回0或1以指示JSON文档是否包含给定路径或路径上的数据。如果任何参数为`NULL`，则返回`NULL`。如果*`json_doc`*参数不是有效的JSON文档，任何*`path`*参数不是有效的路径表达式，或者*`one_or_all`*不是`'one'`或`'all'`，则会发生错误。
- en: To check for a specific value at a path, use [`JSON_CONTAINS()`](json-search-functions.html#function_json-contains)
    instead.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要检查路径上的特定值，请改用[`JSON_CONTAINS()`](json-search-functions.html#function_json-contains)。
- en: 'The return value is 0 if no specified path exists within the document. Otherwise,
    the return value depends on the *`one_or_all`* argument:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果文档中不存在指定路径，则返回值为0。否则，返回值取决于*`one_or_all`*参数：
- en: '`''one''`: 1 if at least one path exists within the document, 0 otherwise.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''one''`：如果至少有一个路径存在于文档中，则为1，否则为0。'
- en: '`''all''`: 1 if all paths exist within the document, 0 otherwise.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''all''`：如果所有路径都存在于文档中，则为1，否则为0。'
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`JSON_EXTRACT(*`json_doc`*, *`path`*[, *`path`*] ...)`](json-search-functions.html#function_json-extract)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_EXTRACT(*`json_doc`*, *`path`*[, *`path`*] ...)`](json-search-functions.html#function_json-extract)'
- en: Returns data from a JSON document, selected from the parts of the document matched
    by the *`path`* arguments. Returns `NULL` if any argument is `NULL` or no paths
    locate a value in the document. An error occurs if the *`json_doc`* argument is
    not a valid JSON document or any *`path`* argument is not a valid path expression.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从JSON文档中返回数据，选取由*`path`*参数匹配的部分。如果任何参数为`NULL`或没有路径定位到文档中的值，则返回`NULL`。如果*`json_doc`*参数不是有效的JSON文档，或任何*`path`*参数不是有效的路径表达式，则会发生错误。
- en: The return value consists of all values matched by the *`path`* arguments. If
    it is possible that those arguments could return multiple values, the matched
    values are autowrapped as an array, in the order corresponding to the paths that
    produced them. Otherwise, the return value is the single matched value.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回值由*`path`*参数匹配的所有值组成。如果这些参数可能返回多个值，则匹配的值会自动包装为数组，顺序与产生它们的路径对应。否则，返回值为单个匹配值。
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: MySQL supports the [`->`](json-search-functions.html#operator_json-column-path)
    operator as shorthand for this function as used with 2 arguments where the left
    hand side is a [`JSON`](json.html "13.5 The JSON Data Type") column identifier
    (not an expression) and the right hand side is the JSON path to be matched within
    the column.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL支持[`->`](json-search-functions.html#operator_json-column-path)运算符作为此函数的简写，用于左侧是[`JSON`](json.html
    "13.5 JSON数据类型")列标识符（而不是表达式），右侧是要在列中匹配的JSON路径的2个参数。
- en: '[`*`column`*->*`path`*`](json-search-functions.html#operator_json-column-path)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`column`*->*`path`*`](json-search-functions.html#operator_json-column-path)'
- en: The [`->`](json-search-functions.html#operator_json-column-path) operator serves
    as an alias for the [`JSON_EXTRACT()`](json-search-functions.html#function_json-extract)
    function when used with two arguments, a column identifier on the left and a JSON
    path (a string literal) on the right that is evaluated against the JSON document
    (the column value). You can use such expressions in place of column references
    wherever they occur in SQL statements.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与两个参数一起使用时，`->`运算符在左侧是列标识符，在右侧是针对JSON文档（列值）进行评估的JSON路径（字符串文字）时，充当[`JSON_EXTRACT()`](json-search-functions.html#function_json-extract)函数的别名。您可以在SQL语句中的任何列引用出现的地方使用这样的表达式。
- en: 'The two [`SELECT`](select.html "15.2.13 SELECT Statement") statements shown
    here produce the same output:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此处显示的两个[`SELECT`](select.html "15.2.13 SELECT Statement")语句产生相同的输出：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This functionality is not limited to `SELECT`, as shown here:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此功能不仅限于`SELECT`，如下所示：
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: (See [Indexing a Generated Column to Provide a JSON Column Index](create-table-secondary-indexes.html#json-column-indirect-index
    "Indexing a Generated Column to Provide a JSON Column Index"), for the statements
    used to create and populate the table just shown.)
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (参见[为JSON列索引创建生成列的索引](create-table-secondary-indexes.html#json-column-indirect-index
    "为JSON列索引创建生成列的索引")，用于创建和填充刚刚显示的表的语句。)
- en: 'This also works with JSON array values, as shown here:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这也适用于JSON数组值，如下所示：
- en: '[PRE5]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Nested arrays are supported. An expression using `->` evaluates as `NULL` if
    no matching key is found in the target JSON document, as shown here:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持嵌套数组。如果在目标JSON文档中找不到匹配的键，则使用`->`的表达式将评估为`NULL`，如下所示：
- en: '[PRE6]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is the same behavior as seen in such cases when using `JSON_EXTRACT()`:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这与使用`JSON_EXTRACT()`时看到的情况相同：
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[`*`column`*->>*`path`*`](json-search-functions.html#operator_json-inline-path)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`column`*->>*`path`*`](json-search-functions.html#operator_json-inline-path)'
- en: 'This is an improved, unquoting extraction operator. Whereas the `->` operator
    simply extracts a value, the `->>` operator in addition unquotes the extracted
    result. In other words, given a [`JSON`](json.html "13.5 The JSON Data Type")
    column value *`column`* and a path expression *`path`* (a string literal), the
    following three expressions return the same value:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个改进的去引号提取运算符。而`->`运算符仅仅提取一个值，`->>`运算符除此之外还去除提取结果的引号。换句话说，给定一个[`JSON`](json.html
    "13.5 The JSON Data Type")列值*`column`*和一个路径表达式*`path`*（一个字符串文字），以下三个表达式返回相同的值：
- en: '[`JSON_UNQUOTE(`](json-modification-functions.html#function_json-unquote) [`JSON_EXTRACT(*`column`*,
    *`path`*) )`](json-search-functions.html#function_json-extract)'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_UNQUOTE(`](json-modification-functions.html#function_json-unquote) [`JSON_EXTRACT(*`column`*,
    *`path`*) )`](json-search-functions.html#function_json-extract)'
- en: '`JSON_UNQUOTE(*`column`*` [`->`](json-search-functions.html#operator_json-column-path)
    `*`path`*)`'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_UNQUOTE(*`column`*` [`->`](json-search-functions.html#operator_json-column-path)
    `*`path`*)`'
- en: '`*`column`*->>*`path`*`'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`column`*->>*`path`*`'
- en: The `->>` operator can be used wherever `JSON_UNQUOTE(JSON_EXTRACT())` would
    be allowed. This includes (but is not limited to) `SELECT` lists, `WHERE` and
    `HAVING` clauses, and `ORDER BY` and `GROUP BY` clauses.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`->>`运算符可以在任何允许使用`JSON_UNQUOTE(JSON_EXTRACT())`的地方使用。这包括（但不限于）`SELECT`列表、`WHERE`和`HAVING`子句，以及`ORDER
    BY`和`GROUP BY`子句。'
- en: 'The next few statements demonstrate some `->>` operator equivalences with other
    expressions in the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") client:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来的几个语句演示了一些`->>`运算符与[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")客户端中其他表达式的等价性：
- en: '[PRE8]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See [Indexing a Generated Column to Provide a JSON Column Index](create-table-secondary-indexes.html#json-column-indirect-index
    "Indexing a Generated Column to Provide a JSON Column Index"), for the SQL statements
    used to create and populate the `jemp` table in the set of examples just shown.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅[为JSON列提供索引的生成列索引](create-table-secondary-indexes.html#json-column-indirect-index
    "为JSON列提供索引的生成列索引")，了解在刚刚展示的示例集中用于创建和填充`jemp`表的SQL语句。
- en: 'This operator can also be used with JSON arrays, as shown here:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该运算符也可以与JSON数组一起使用，如下所示：
- en: '[PRE9]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As with [`->`](json-search-functions.html#operator_json-column-path), the `->>`
    operator is always expanded in the output of [`EXPLAIN`](explain.html "15.8.2 EXPLAIN
    Statement"), as the following example demonstrates:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`->`](json-search-functions.html#operator_json-column-path)类似，`->>`运算符在[`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement")输出中总是展开的，如下例所示：
- en: '[PRE10]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is similar to how MySQL expands the [`->`](json-search-functions.html#operator_json-column-path)
    operator in the same circumstances.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这类似于MySQL在相同情况下展开[`->`](json-search-functions.html#operator_json-column-path)运算符的方式。
- en: '[`JSON_KEYS(*`json_doc`*[, *`path`*])`](json-search-functions.html#function_json-keys)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_KEYS(*`json_doc`*[, *`path`*])`](json-search-functions.html#function_json-keys)'
- en: Returns the keys from the top-level value of a JSON object as a JSON array,
    or, if a *`path`* argument is given, the top-level keys from the selected path.
    Returns `NULL` if any argument is `NULL`, the *`json_doc`* argument is not an
    object, or *`path`*, if given, does not locate an object. An error occurs if the
    *`json_doc`* argument is not a valid JSON document or the *`path`* argument is
    not a valid path expression or contains a `*` or `**` wildcard.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将JSON对象的顶级值的键作为JSON数组返回，或者如果给定了*`path`*参数，则从所选路径返回顶级键。如果任何参数为`NULL`，*`json_doc`*参数不是对象，或者如果给定了*`path`*，则无法定位对象，则返回`NULL`。如果*`json_doc`*参数不是有效的JSON文档，或者*`path`*参数不是有效的路径表达式或包含`*`或`**`通配符，则会发生错误。
- en: The result array is empty if the selected object is empty. If the top-level
    value has nested subobjects, the return value does not include keys from those
    subobjects.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果所选对象为空，则结果数组为空。如果顶层值有嵌套的子对象，则返回值不包括这些子对象的键。
- en: '[PRE11]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[`JSON_OVERLAPS(*`json_doc1`*, *`json_doc2`*)`](json-search-functions.html#function_json-overlaps)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_OVERLAPS(*`json_doc1`*, *`json_doc2`*)`](json-search-functions.html#function_json-overlaps)'
- en: Compares two JSON documents. Returns true (1) if the two document have any key-value
    pairs or array elements in common. If both arguments are scalars, the function
    performs a simple equality test. If either argument is `NULL`, the function returns
    `NULL`.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 比较两个JSON文档。如果两个文档有任何键值对或数组元素相同，则返回true（1）。如果两个参数都是标量，函数执行简单的相等性测试。如果任一参数为`NULL`，函数返回`NULL`。
- en: This function serves as counterpart to [`JSON_CONTAINS()`](json-search-functions.html#function_json-contains),
    which requires all elements of the array searched for to be present in the array
    searched in. Thus, `JSON_CONTAINS()` performs an `AND` operation on search keys,
    while `JSON_OVERLAPS()` performs an `OR` operation.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数作为 [`JSON_CONTAINS()`](json-search-functions.html#function_json-contains)
    的对应函数，要求搜索的数组中的所有元素都存在于搜索的数组中。因此，`JSON_CONTAINS()` 对搜索键执行 `AND` 操作，而 `JSON_OVERLAPS()`
    执行 `OR` 操作。
- en: Queries on JSON columns of [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine") tables using `JSON_OVERLAPS()` in the `WHERE` clause can
    be optimized using multi-valued indexes. [Multi-Valued Indexes](create-index.html#create-index-multi-valued
    "Multi-Valued Indexes"), provides detailed information and examples.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `WHERE` 子句中使用 `JSON_OVERLAPS()` 查询 [`InnoDB`](innodb-storage-engine.html "第17章
    InnoDB 存储引擎") 表的 JSON 列可以使用多值索引进行优化。[多值索引](create-index.html#create-index-multi-valued
    "多值索引") 提供了详细信息和示例。
- en: 'When comparing two arrays, `JSON_OVERLAPS()` returns true if they share one
    or more array elements in common, and false if they do not:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在比较两个数组时，如果它们共享一个或多个数组元素，则 `JSON_OVERLAPS()` 返回真，否则返回假：
- en: '[PRE12]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Partial matches are treated as no match, as shown here:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 部分匹配被视为无匹配，如下所示：
- en: '[PRE13]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When comparing objects, the result is true if they have at least one key-value
    pair in common.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在比较对象时，如果它们至少有一个键值对相同，则结果为真。
- en: '[PRE14]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If two scalars are used as the arguments to the function, `JSON_OVERLAPS()`
    performs a simple test for equality:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果两个标量用作函数的参数，`JSON_OVERLAPS()` 执行简单的相等性测试：
- en: '[PRE15]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When comparing a scalar with an array, `JSON_OVERLAPS()` attempts to treat
    the scalar as an array element. In this example, the second argument `6` is interpreted
    as `[6]`, as shown here:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将标量与数组进行比较时，`JSON_OVERLAPS()` 会尝试将标量视为数组元素。在此示例中，第二个参数 `6` 被解释为 `[6]`，如下所示：
- en: '[PRE16]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The function does not perform type conversions:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数不执行类型转换：
- en: '[PRE17]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`JSON_OVERLAPS()` was added in MySQL 8.0.17.'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`JSON_OVERLAPS()` 在 MySQL 8.0.17 中添加。'
- en: '[`JSON_SEARCH(*`json_doc`*, *`one_or_all`*, *`search_str`*[, *`escape_char`*[,
    *`path`*] ...])`](json-search-functions.html#function_json-search)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_SEARCH(*`json_doc`*, *`one_or_all`*, *`search_str`*[, *`escape_char`*[,
    *`path`*] ...])`](json-search-functions.html#function_json-search)'
- en: Returns the path to the given string within a JSON document. Returns `NULL`
    if any of the *`json_doc`*, *`search_str`*, or *`path`* arguments are `NULL`;
    no *`path`* exists within the document; or *`search_str`* is not found. An error
    occurs if the *`json_doc`* argument is not a valid JSON document, any *`path`*
    argument is not a valid path expression, *`one_or_all`* is not `'one'` or `'all'`,
    or *`escape_char`* is not a constant expression.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回 JSON 文档中给定字符串的路径。如果 *`json_doc`*、*`search_str`* 或 *`path`* 参数中有任何一个为 `NULL`；文档中不存在
    *`path`*；或未找到 *`search_str`*，则返回 `NULL`。如果 *`json_doc`* 参数不是有效的 JSON 文档，任何 *`path`*
    参数不是有效的路径表达式，*`one_or_all`* 不是 `'one'` 或 `'all'`，或 *`escape_char`* 不是常量表达式，则会出现错误。
- en: 'The *`one_or_all`* argument affects the search as follows:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`one_or_all`* 参数影响搜索如下：'
- en: '`''one''`: The search terminates after the first match and returns one path
    string. It is undefined which match is considered first.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''one''`：在第一个匹配后搜索终止并返回一个路径字符串。未定义哪个匹配被视为第一个。'
- en: '`''all''`: The search returns all matching path strings such that no duplicate
    paths are included. If there are multiple strings, they are autowrapped as an
    array. The order of the array elements is undefined.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''all''`：搜索返回所有匹配的路径字符串，以确保不包含重复路径。如果有多个字符串，它们将自动包装为数组。数组元素的顺序是未定义的。'
- en: 'Within the *`search_str`* search string argument, the `%` and `_` characters
    work as for the [`LIKE`](string-comparison-functions.html#operator_like) operator:
    `%` matches any number of characters (including zero characters), and `_` matches
    exactly one character.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 *`search_str`* 搜索字符串参数中，`%` 和 `_` 字符的工作方式与 [`LIKE`](string-comparison-functions.html#operator_like)
    运算符相同：`%` 匹配任意数量的字符（包括零个字符），`_` 精确匹配一个字符。
- en: To specify a literal `%` or `_` character in the search string, precede it by
    the escape character. The default is `\` if the *`escape_char`* argument is missing
    or `NULL`. Otherwise, *`escape_char`* must be a constant that is empty or one
    character.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在搜索字符串中指定字面上的 `%` 或 `_` 字符，请在其前面加上转义字符。如果 *`escape_char`* 参数缺失或为 `NULL`，则默认为
    `\`。否则，*`escape_char`* 必须是一个空的或一个字符的常量。
- en: For more information about matching and escape character behavior, see the description
    of [`LIKE`](string-comparison-functions.html#operator_like) in [Section 14.8.1,
    “String Comparison Functions and Operators”](string-comparison-functions.html
    "14.8.1 String Comparison Functions and Operators"). For escape character handling,
    a difference from the [`LIKE`](string-comparison-functions.html#operator_like)
    behavior is that the escape character for [`JSON_SEARCH()`](json-search-functions.html#function_json-search)
    must evaluate to a constant at compile time, not just at execution time. For example,
    if [`JSON_SEARCH()`](json-search-functions.html#function_json-search) is used
    in a prepared statement and the *`escape_char`* argument is supplied using a `?`
    parameter, the parameter value might be constant at execution time, but is not
    at compile time.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关匹配和转义字符行为的更多信息，请参阅[第14.8.1节，“字符串比较函数和运算符”](string-comparison-functions.html
    "14.8.1 字符串比较函数和运算符")中[`LIKE`](string-comparison-functions.html#operator_like)的描述。关于转义字符处理，与[`LIKE`](string-comparison-functions.html#operator_like)行为的不同之处在于，[`JSON_SEARCH()`](json-search-functions.html#function_json-search)的转义字符必须在编译时评估为常量，而不仅仅在执行时。例如，如果在准备语句中使用[`JSON_SEARCH()`](json-search-functions.html#function_json-search)，并且使用`?`参数提供了*`escape_char`*参数，则参数值可能在执行时是常量，但在编译时不是。
- en: '*`search_str`* and *`path`* are always interpreted as utf8mb4 strings, regardless
    of their actual encoding. This is a known issue which is fixed in MySQL 8.0.24
    ( Bug #32449181).'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`search_str`*和*`path`*始终被解释为utf8mb4字符串，而不管它们的实际编码如何。这是一个已知问题，在MySQL 8.0.24中已修复（Bug
    #32449181）。'
- en: '[PRE18]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: For more information about the JSON path syntax supported by MySQL, including
    rules governing the wildcard operators `*` and `**`, see [JSON Path Syntax](json.html#json-path-syntax
    "JSON Path Syntax").
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关MySQL支持的JSON路径语法的更多信息，包括控制通配符`*`和`**`的规则，请参阅[JSON路径语法](json.html#json-path-syntax
    "JSON路径语法")。
- en: '[`JSON_VALUE(*`json_doc`*, *`path`*)`](json-search-functions.html#function_json-value)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_VALUE(*`json_doc`*, *`path`*)`](json-search-functions.html#function_json-value)'
- en: 'Extracts a value from a JSON document at the path given in the specified document,
    and returns the extracted value, optionally converting it to a desired type. The
    complete syntax is shown here:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从指定文档中给定路径提取值，并返回提取的值，可选择将其转换为所需类型。完整的语法如下所示：
- en: '[PRE19]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*`json_doc`* is a valid JSON document. If this is `NULL`, the function returns
    `NULL`.'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`json_doc`*是一个有效的JSON文档。如果为`NULL`，函数将返回`NULL`。'
- en: '*`path`* is a JSON path pointing to a location in the document. This must be
    a string literal value.'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`path`*是指向文档中位置的JSON路径。这必须是一个字符串文字值。'
- en: '*`type`* is one of the following data types:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`type`*是以下数据类型之一：'
- en: '[`FLOAT`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE")'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FLOAT`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT、DOUBLE")'
- en: '[`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE")'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT、DOUBLE")'
- en: '[`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point Types (Exact Value)
    - DECIMAL, NUMERIC")'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DECIMAL`](fixed-point-types.html "13.1.3 定点类型（精确值） - DECIMAL、NUMERIC")'
- en: '`SIGNED`'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGNED`'
- en: '`UNSIGNED`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UNSIGNED`'
- en: '[`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DATE`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")'
- en: '[`TIME`](time.html "13.2.3 The TIME Type")'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TIME`](time.html "13.2.3 TIME类型")'
- en: '[`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DATETIME`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")'
- en: '[`YEAR`](year.html "13.2.4 The YEAR Type") (MySQL 8.0.22 and later)'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`YEAR`](year.html "13.2.4 YEAR类型")（MySQL 8.0.22及更高版本）'
- en: '`YEAR` values of one or two digits are not supported.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不支持一位或两位数字的`YEAR`值。
- en: '[`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")'
- en: '[`JSON`](json.html "13.5 The JSON Data Type")'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON`](json.html "13.5 JSON数据类型")'
- en: The types just listed are the same as the (non-array) types supported by the
    [`CAST()`](cast-functions.html#function_cast) function.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 刚列出的类型与[`CAST()`](cast-functions.html#function_cast)函数支持的（非数组）类型相同。
- en: If not specified by a `RETURNING` clause, the `JSON_VALUE()` function's return
    type is [`VARCHAR(512)`](char.html "13.3.2 The CHAR and VARCHAR Types"). When
    no character set is specified for the return type, `JSON_VALUE()` uses `utf8mb4`
    with the binary collation, which is case-sensitive; if `utf8mb4` is specified
    as the character set for the result, the server uses the default collation for
    this character set, which is not case-sensitive.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有由 `RETURNING` 子句指定，`JSON_VALUE()` 函数的返回类型为 [`VARCHAR(512)`](char.html "13.3.2 The
    CHAR and VARCHAR Types")。当没有为返回类型指定字符集时，`JSON_VALUE()` 使用带有二进制排序规则的 `utf8mb4`；如果指定
    `utf8mb4` 作为结果的字符集，则服务器使用此字符集的默认排序规则，这是不区分大小写的。
- en: When the data at the specified path consists of or resolves to a JSON null literal,
    the function returns SQL `NULL`.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当指定路径处的数据由 JSON 空字面量组成或解析为 JSON 空字面量时，该函数返回 SQL `NULL`。
- en: '*`on_empty`*, if specified, determines how `JSON_VALUE()` behaves when no data
    is found at the path given; this clause takes one of the following values:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`on_empty`*，如果指定，确定了当在给定路径找不到数据时 `JSON_VALUE()` 的行为；此子句可以取以下值：'
- en: '`NULL ON EMPTY`: The function returns `NULL`; this is the default `ON EMPTY`
    behavior.'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NULL ON EMPTY`: 函数返回 `NULL`；这是默认的 `ON EMPTY` 行为。'
- en: '`DEFAULT *`value`* ON EMPTY`: the provided *`value`* is returned. The value''s
    type must match that of the return type.'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEFAULT *`value`* ON EMPTY`: 返回提供的 *`value`*。该值的类型必须与返回类型匹配。'
- en: '`ERROR ON EMPTY`: The function throws an error.'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ERROR ON EMPTY`: 函数抛出错误。'
- en: 'If used, *`on_error`* takes one of the following values with the corresponding
    outcome when an error occurs, as listed here:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用，*`on_error`* 可以取以下值，当发生错误时会有相应的结果，如下所列：
- en: '`NULL ON ERROR`: `JSON_VALUE()` returns `NULL`; this is the default behavior
    if no `ON ERROR` clause is used.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NULL ON ERROR`: `JSON_VALUE()` 返回 `NULL`；如果没有使用 `ON ERROR` 子句，则这是默认行为。'
- en: '`DEFAULT *`value`* ON ERROR`: This is the value returned; its value must match
    that of the return type.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEFAULT *`value`* ON ERROR`: 这是返回的值；其值必须与返回类型匹配。'
- en: '`ERROR ON ERROR`: An error is thrown.'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ERROR ON ERROR`: 抛出错误。'
- en: '`ON EMPTY`, if used, must precede any `ON ERROR` clause. Specifying them in
    the wrong order results in a syntax error.'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用 `ON EMPTY`，必须在任何 `ON ERROR` 子句之前。指定错误的顺序会导致语法错误。
- en: '**Error handling. ** In general, errors are handled by `JSON_VALUE()` as follows:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**错误处理。** 一般来说，`JSON_VALUE()` 处理错误如下：'
- en: All JSON input (document and path) is checked for validity. If any of it is
    not valid, an SQL error is thrown without triggering the `ON ERROR` clause.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 JSON 输入（文档和路径）都会被检查其有效性。如果其中任何部分无效，则会抛出 SQL 错误，而不会触发 `ON ERROR` 子句。
- en: '`ON ERROR` is triggered whenever any of the following events occur:'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当发生以下事件之一时触发 `ON ERROR`：
- en: Attempting to extract an object or an array, such as that resulting from a path
    that resolves to multiple locations within the JSON document
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试提取对象或数组，例如由解析为 JSON 文档中多个位置的路径导致的对象或数组
- en: Conversion errors, such as attempting to convert `'asdf'` to an `UNSIGNED` value
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换错误，例如尝试将 `'asdf'` 转换为 `UNSIGNED` 值
- en: Truncation of values
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值的截断
- en: A conversion error always triggers a warning even if `NULL ON ERROR` or `DEFAULT
    ... ON ERROR` is specified.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使指定了 `NULL ON ERROR` 或 `DEFAULT ... ON ERROR`，转换错误始终会触发警告。
- en: The `ON EMPTY` clause is triggered when the source JSON document (*`expr`*)
    contains no data at the specified location (*`path`*).
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当源 JSON 文档（*`expr`*）在指定位置（*`path`*）不包含数据时，会触发 `ON EMPTY` 子句。
- en: '`JSON_VALUE()` was introduced in MySQL 8.0.21.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`JSON_VALUE()` 在 MySQL 8.0.21 中引入。'
- en: '**Examples. ** Two simple examples are shown here:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**示例。** 这里展示了两个简单的示例：'
- en: '[PRE20]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The statement `SELECT JSON_VALUE(*`json_doc`*, *`path`* RETURNING *`type`*)`
    is equivalent to the following statement:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语句 `SELECT JSON_VALUE(*`json_doc`*, *`path`* RETURNING *`type`*)` 等同于以下语句：
- en: '[PRE21]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`JSON_VALUE()` simplifies creating indexes on JSON columns by making it unnecessary
    in many cases to create a generated column and then an index on the generated
    column. You can do this when creating a table `t1` that has a [`JSON`](json.html
    "13.5 The JSON Data Type") column by creating an index on an expression that uses
    `JSON_VALUE()` operating on that column (with a path that matches a value in that
    column), as shown here:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`JSON_VALUE()` 简化了在 JSON 列上创建索引的过程，因为在许多情况下不需要创建一个生成列，然后在生成列上创建索引。您可以在创建具有
    [`JSON`](json.html "13.5 The JSON Data Type") 列的表 `t1` 时，通过在使用 `JSON_VALUE()`
    操作该列（使用与该列中值匹配的路径）的表达式上创建索引来实现这一点，如下所示：'
- en: '[PRE22]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following [`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement") output shows
    that a query against `t1` employing the index expression in the `WHERE` clause
    uses the index thus created:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下[`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement")输出显示，针对`t1`的查询在`WHERE`子句中使用索引表达式，使用了创建的索引：
- en: '[PRE23]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This achieves much the same effect as creating a table `t2` with an index on
    a generated column (see [Indexing a Generated Column to Provide a JSON Column
    Index](create-table-secondary-indexes.html#json-column-indirect-index "Indexing
    a Generated Column to Provide a JSON Column Index")), like this one:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这实现了与在生成列上创建具有索引的表`t2`（请参见[为JSON列提供索引的生成列索引](create-table-secondary-indexes.html#json-column-indirect-index
    "Indexing a Generated Column to Provide a JSON Column Index")）几乎相同的效果，如下所示：
- en: '[PRE24]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The [`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement") output for a query
    against this table, referencing the generated column, shows that the index is
    used in the same way as for the previous query against table `t1`:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对这个表的查询的[`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement")输出，引用生成的列，显示索引的使用方式与针对表`t1`的先前查询相同：
- en: '[PRE25]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: For information about using indexes on generated columns for indirect indexing
    of [`JSON`](json.html "13.5 The JSON Data Type") columns, see [Indexing a Generated
    Column to Provide a JSON Column Index](create-table-secondary-indexes.html#json-column-indirect-index
    "Indexing a Generated Column to Provide a JSON Column Index").
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关在生成列上使用索引对JSON列进行间接索引的信息，请参见[为JSON列提供索引的生成列索引](create-table-secondary-indexes.html#json-column-indirect-index
    "Indexing a Generated Column to Provide a JSON Column Index")。
- en: '[`*`value`* MEMBER OF(*`json_array`*)`](json-search-functions.html#operator_member-of)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`value`* MEMBER OF(*`json_array`*)`](json-search-functions.html#operator_member-of)'
- en: Returns true (1) if *`value`* is an element of *`json_array`*, otherwise returns
    false (0). *`value`* must be a scalar or a JSON document; if it is a scalar, the
    operator attempts to treat it as an element of a JSON array. If *`value`* or *`json_array`*
    is *`NULL`*, the function returns *`NULL`*.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`value`*是*`json_array`*的元素，则返回true（1），否则返回false（0）。*`value`*必须是标量或JSON文档；如果它是标量，运算符会尝试将其视为JSON数组的元素。如果*`value`*或*`json_array`*是*`NULL`*，函数将返回*`NULL`*。
- en: Queries using `MEMBER OF()` on JSON columns of [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") tables in the `WHERE` clause can be optimized
    using multi-valued indexes. See [Multi-Valued Indexes](create-index.html#create-index-multi-valued
    "Multi-Valued Indexes"), for detailed information and examples.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`WHERE`子句中对`InnoDB`表的JSON列使用`MEMBER OF()`查询可以通过使用多值索引进行优化。有关详细信息和示例，请参见[多值索引](create-index.html#create-index-multi-valued
    "Multi-Valued Indexes")。
- en: 'Simple scalars are treated as array values, as shown here:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简单标量被视为数组值，如下所示：
- en: '[PRE26]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Partial matches of array element values do not match:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 部分匹配数组元素值不匹配：
- en: '[PRE27]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Conversions to and from string types are not performed:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不执行到字符串类型的转换：
- en: '[PRE29]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To use this operator with a value which itself an array, it is necessary to
    cast it explicitly as a JSON array. You can do this with [`CAST(... AS JSON)`](cast-functions.html#function_cast):'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用这个运算符与一个本身是数组的值，必须将其显式转换为JSON数组。您可以使用[`CAST(... AS JSON)`](cast-functions.html#function_cast)来实现这一点：
- en: '[PRE30]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'It is also possible to perform the necessary cast using the [`JSON_ARRAY()`](json-creation-functions.html#function_json-array)
    function, like this:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还可以使用[`JSON_ARRAY()`](json-creation-functions.html#function_json-array)函数执行必要的转换，如下所示：
- en: '[PRE31]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Any JSON objects used as values to be tested or which appear in the target
    array must be coerced to the correct type using `CAST(... AS JSON)` or [`JSON_OBJECT()`](json-creation-functions.html#function_json-object).
    In addition, a target array containing JSON objects must itself be cast using
    `JSON_ARRAY`. This is demonstrated in the following sequence of statements:'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何用作要测试的值或出现在目标数组中的JSON对象必须使用`CAST(... AS JSON)`或[`JSON_OBJECT()`](json-creation-functions.html#function_json-object)强制转换为正确的类型。此外，包含JSON对象的目标数组必须使用`JSON_ARRAY`进行转换。下面的语句序列演示了这一点：
- en: '[PRE32]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `MEMBER OF()` operator was added in MySQL 8.0.17.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MEMBER OF()`运算符在MySQL 8.0.17中添加。'
