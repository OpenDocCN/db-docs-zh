- en: 17.8.1 InnoDB Startup Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.8.1 InnoDB 启动配置
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-init-startup-configuration.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-init-startup-configuration.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-init-startup-configuration.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-init-startup-configuration.html)
- en: The first decisions to make about `InnoDB` configuration involve the configuration
    of data files, log files, page size, and memory buffers, which should be configured
    before initializing `InnoDB`. Modifying the configuration after `InnoDB` is initialized
    may involve non-trivial procedures.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `InnoDB` 配置的首要决策涉及数据文件、日志文件、页面大小和内存缓冲区的配置，这些应在初始化 `InnoDB` 之前配置。在初始化 `InnoDB`
    后修改配置可能涉及非平凡的程序。
- en: This section provides information about specifying `InnoDB` settings in a configuration
    file, viewing `InnoDB` initialization information, and important storage considerations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了有关在配置文件中指定 `InnoDB` 设置、查看 `InnoDB` 初始化信息和重要存储考虑事项的信息。
- en: '[Specifying Options in a MySQL Option File](innodb-init-startup-configuration.html#innodb-startup-mysql-configuration-file
    "Specifying Options in a MySQL Option File")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 MySQL 选项文件中指定选项](innodb-init-startup-configuration.html#innodb-startup-mysql-configuration-file
    "Specifying Options in a MySQL Option File")'
- en: '[Viewing InnoDB Initialization Information](innodb-init-startup-configuration.html#innodb-startup-initialization-information
    "Viewing InnoDB Initialization Information")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查看 InnoDB 初始化信息](innodb-init-startup-configuration.html#innodb-startup-initialization-information
    "Viewing InnoDB Initialization Information")'
- en: '[Important Storage Considerations](innodb-init-startup-configuration.html#innodb-startup-storage-considerations
    "Important Storage Considerations")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[重要的存储考虑](innodb-init-startup-configuration.html#innodb-startup-storage-considerations
    "Important Storage Considerations")'
- en: '[System Tablespace Data File Configuration](innodb-init-startup-configuration.html#innodb-startup-data-file-configuration
    "System Tablespace Data File Configuration")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[系统表空间数据文件配置](innodb-init-startup-configuration.html#innodb-startup-data-file-configuration
    "System Tablespace Data File Configuration")'
- en: '[InnoDB Doublewrite Buffer File Configuration](innodb-init-startup-configuration.html#innodb-startup-doublewrite-file-config
    "InnoDB Doublewrite Buffer File Configuration")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[InnoDB 双写缓冲文件配置](innodb-init-startup-configuration.html#innodb-startup-doublewrite-file-config
    "InnoDB Doublewrite Buffer File Configuration")'
- en: '[Redo Log Configuration](innodb-init-startup-configuration.html#innodb-startup-log-file-configuration
    "Redo Log Configuration")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[重做日志配置](innodb-init-startup-configuration.html#innodb-startup-log-file-configuration
    "Redo Log Configuration")'
- en: '[Undo Tablespace Configuration](innodb-init-startup-configuration.html#innodb-startup-undo-tablespace
    "Undo Tablespace Configuration")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[撤销表空间配置](innodb-init-startup-configuration.html#innodb-startup-undo-tablespace
    "Undo Tablespace Configuration")'
- en: '[Global Temporary Tablespace Configuration](innodb-init-startup-configuration.html#innodb-startup-temporary-tablespace
    "Global Temporary Tablespace Configuration")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[全局临时表空间配置](innodb-init-startup-configuration.html#innodb-startup-temporary-tablespace
    "Global Temporary Tablespace Configuration")'
- en: '[Session Temporary Tablespace Configuration](innodb-init-startup-configuration.html#innodb-startup-session-temporary-tablespaces
    "Session Temporary Tablespace Configuration")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[会话临时表空间配置](innodb-init-startup-configuration.html#innodb-startup-session-temporary-tablespaces
    "Session Temporary Tablespace Configuration")'
- en: '[Page Size Configuration](innodb-init-startup-configuration.html#innodb-startup-page-size
    "Page Size Configuration")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[页面大小配置](innodb-init-startup-configuration.html#innodb-startup-page-size "Page
    Size Configuration")'
- en: '[Memory Configuration](innodb-init-startup-configuration.html#innodb-startup-memory-configuration
    "Memory Configuration")'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[内存配置](innodb-init-startup-configuration.html#innodb-startup-memory-configuration
    "Memory Configuration")'
- en: Specifying Options in a MySQL Option File
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 MySQL 选项文件中指定选项
- en: Because MySQL uses data file, log file, and page size settings to initialize
    `InnoDB`, it is recommended that you define these settings in an option file that
    MySQL reads at startup, prior to initializing `InnoDB`. Normally, `InnoDB` is
    initialized when the MySQL server is started for the first time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 MySQL 使用数据文件、日志文件和页面大小设置来初始化 `InnoDB`，建议您在 MySQL 在启动时读取的选项文件中定义这些设置，以便在初始化
    `InnoDB` 之前。通常情况下，当 MySQL 服务器首次启动时会初始化 `InnoDB`。
- en: You can place `InnoDB` options in the `[mysqld]` group of any option file that
    your server reads when it starts. The locations of MySQL option files are described
    in [Section 6.2.2.2, “Using Option Files”](option-files.html "6.2.2.2 Using Option
    Files").
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 `InnoDB` 选项放在服务器启动时读取的任何选项文件的 `[mysqld]` 组中。MySQL 选项文件的位置在 [Section 6.2.2.2,
    “Using Option Files”](option-files.html "6.2.2.2 Using Option Files") 中有描述。
- en: 'To make sure that [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")
    reads options only from a specific file (and `mysqld-auto.cnf`), use the [`--defaults-file`](option-file-options.html#option_general_defaults-file)
    option as the first option on the command line when starting the server:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")仅从特定文件（和`mysqld-auto.cnf`）中读取选项，请在启动服务器时将[`--defaults-file`](option-file-options.html#option_general_defaults-file)选项作为命令行中的第一个选项：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Viewing InnoDB Initialization Information
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查看InnoDB初始化信息
- en: To view `InnoDB` initialization information during startup, start [**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server") from a command prompt, which prints initialization
    information to the console.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看启动期间的`InnoDB`初始化信息，请从命令提示符启动[**mysqld**](mysqld.html "6.3.1 mysqld — The
    MySQL Server")，这会将初始化信息打印到控制台。
- en: 'For example, on Windows, if [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL
    Server") is located in `C:\Program Files\MySQL\MySQL Server 8.0\bin`, start the
    MySQL server like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Windows上，如果[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")位于`C:\Program
    Files\MySQL\MySQL Server 8.0\bin`，可以这样启动MySQL服务器：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On Unix-like systems, [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")
    is located in the `bin` directory of your MySQL installation:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在类Unix系统上，[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")位于MySQL安装目录的`bin`目录中：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you do not send server output to the console, check the error log after startup
    to see the initialization information `InnoDB` printed during the startup process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有将服务器输出发送到控制台，请在启动后检查错误日志，查看在启动过程中打印的`InnoDB`初始化信息。
- en: For information about starting MySQL using other methods, see [Section 2.9.5,
    “Starting and Stopping MySQL Automatically”](automatic-start.html "2.9.5 Starting
    and Stopping MySQL Automatically").
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用其他方法启动MySQL的信息，请参见[Section 2.9.5, “Starting and Stopping MySQL Automatically”](automatic-start.html
    "2.9.5 Starting and Stopping MySQL Automatically")。
- en: Note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`InnoDB` does not open all user tables and associated data files at startup.
    However, `InnoDB` does check for the existence of tablespace files referenced
    in the data dictionary. If a tablespace file is not found, `InnoDB` logs an error
    and continues the startup sequence. Tablespace files referenced in the redo log
    may be opened during crash recovery for redo application.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`在启动时不会打开所有用户表和相关数据文件。但是，`InnoDB`会检查数据字典中引用的表空间文件是否存在。如果找不到表空间文件，`InnoDB`会记录错误并继续启动序列。重做日志中引用的表空间文件可能在崩溃恢复期间打开以进行重做应用。'
- en: Important Storage Considerations
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重要的存储考虑事项
- en: Review the following storage-related considerations before proceeding with your
    startup configuration.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续进行启动配置之前，请查看以下与存储相关的考虑事项。
- en: In some cases, you can improve database performance by placing data and log
    files on separate physical disks. You can also use raw disk partitions (raw devices)
    for `InnoDB` data files, which may speed up I/O. See [Using Raw Disk Partitions
    for the System Tablespace](innodb-system-tablespace.html#innodb-raw-devices "Using
    Raw Disk Partitions for the System Tablespace").
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些情况下，通过将数据和日志文件放在不同的物理磁盘上，可以提高数据库性能。您还可以为`InnoDB`数据文件使用原始磁盘分区（原始设备），这可能加快I/O速度。请参阅[Using
    Raw Disk Partitions for the System Tablespace](innodb-system-tablespace.html#innodb-raw-devices
    "Using Raw Disk Partitions for the System Tablespace")。
- en: '`InnoDB` is a transaction-safe (ACID compliant) storage engine with commit,
    rollback, and crash-recovery capabilities to protect user data. **However, it
    cannot do so** if the underlying operating system or hardware does not work as
    advertised. Many operating systems or disk subsystems may delay or reorder write
    operations to improve performance. On some operating systems, the very `fsync()`
    system call that should wait until all unwritten data for a file has been flushed
    might actually return before the data has been flushed to stable storage. Because
    of this, an operating system crash or a power outage may destroy recently committed
    data, or in the worst case, even corrupt the database because write operations
    have been reordered. If data integrity is important to you, perform “pull-the-plug”
    tests before using anything in production. On macOS, `InnoDB` uses a special `fcntl()`
    file flush method. Under Linux, it is advisable to **disable the write-back cache**.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`是一个支持事务的（符合ACID标准）存储引擎，具有提交、回滚和崩溃恢复功能，以保护用户数据。**但是，如果底层操作系统或硬件不按照宣传的方式工作，它就无法做到**。许多操作系统或磁盘子系统可能会延迟或重新排序写操作以提高性能。在某些操作系统上，应该等待直到文件的所有未写入数据都已刷新的`fsync()`系统调用实际上可能会在数据刷新到稳定存储之前返回。由于这个原因，操作系统崩溃或停电可能会破坏最近提交的数据，或者在最坏的情况下，甚至损坏数据库，因为写操作已经被重新排序。如果数据完整性对您很重要，请在生产环境中使用任何内容之前执行“拔插头”测试。在macOS上，`InnoDB`使用一种特殊的`fcntl()`文件刷新方法。在Linux下，建议**禁用写回缓存**。'
- en: On ATA/SATA disk drives, a command such `hdparm -W0 /dev/hda` may work to disable
    the write-back cache. **Beware that some drives or disk controllers may be unable
    to disable the write-back cache.**
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ATA/SATA硬盘驱动器上，像`hdparm -W0 /dev/hda`这样的命令可能可以禁用写回缓存。**请注意，一些驱动器或磁盘控制器可能无法禁用写回缓存。**
- en: With regard to `InnoDB` recovery capabilities that protect user data, `InnoDB`
    uses a file flush technique involving a structure called the [doublewrite buffer](glossary.html#glos_doublewrite_buffer
    "doublewrite buffer"), which is enabled by default ([`innodb_doublewrite=ON`](innodb-parameters.html#sysvar_innodb_doublewrite)).
    The doublewrite buffer adds safety to recovery following an unexpected exit or
    power outage, and improves performance on most varieties of Unix by reducing the
    need for `fsync()` operations. It is recommended that the [`innodb_doublewrite`](innodb-parameters.html#sysvar_innodb_doublewrite)
    option remains enabled if you are concerned with data integrity or possible failures.
    For information about the doublewrite buffer, see [Section 17.11.1, “InnoDB Disk
    I/O”](innodb-disk-io.html "17.11.1 InnoDB Disk I/O").
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于保护用户数据的`InnoDB`恢复能力，`InnoDB`使用一种涉及名为[双写缓冲区](glossary.html#glos_doublewrite_buffer
    "doublewrite buffer")的结构的文件刷新技术，默认情况下启用（[`innodb_doublewrite=ON`](innodb-parameters.html#sysvar_innodb_doublewrite)）。双写缓冲区在意外退出或停电后的恢复过程中增加了安全性，并通过减少大多数Unix系统上`fsync()`操作的需求来提高性能。如果您关心数据完整性或可能的故障，请保持[`innodb_doublewrite`](innodb-parameters.html#sysvar_innodb_doublewrite)选项启用。有关双写缓冲区的信息，请参阅[第17.11.1节，“InnoDB磁盘I/O”](innodb-disk-io.html
    "17.11.1 InnoDB Disk I/O")。
- en: Before using NFS with `InnoDB`, review potential issues outlined in [Using NFS
    with MySQL](disk-issues.html#disk-issues-nfs "Using NFS with MySQL").
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用`InnoDB`与NFS之前，请查看[使用NFS与MySQL](disk-issues.html#disk-issues-nfs "Using NFS
    with MySQL")中概述的潜在问题。
- en: System Tablespace Data File Configuration
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 系统表空间数据文件配置
- en: 'The [`innodb_data_file_path`](innodb-parameters.html#sysvar_innodb_data_file_path)
    option defines the name, size, and attributes of `InnoDB` system tablespace data
    files. If you do not configure this option prior to initializing the MySQL server,
    the default behavior is to create a single auto-extending data file, slightly
    larger than 12MB, named `ibdata1`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_data_file_path`](innodb-parameters.html#sysvar_innodb_data_file_path)选项定义了`InnoDB`系统表空间数据文件的名称、大小和属性。如果在初始化MySQL服务器之前未配置此选项，则默认行为是创建一个稍大于12MB的单个自动扩展数据文件，名称为`ibdata1`：'
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The full data file specification syntax includes the file name, file size,
    `autoextend` attribute, and `max` attribute:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的数据文件规范语法包括文件名、文件大小、`autoextend`属性和`max`属性：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: File sizes are specified in kilobytes, megabytes, or gigabytes by appending
    `K`, `M` or `G` to the size value. If specifying the data file size in kilobytes,
    do so in multiples of 1024\. Otherwise, kilobyte values are rounded to nearest
    megabyte (MB) boundary. The sum of file sizes must be, at a minimum, slightly
    larger than 12MB.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 文件大小以KB、MB或GB为单位指定，通过在大小值后附加`K`、`M`或`G`来实现。如果以KB为单位指定数据文件大小，请以1024的倍数进行。否则，KB值将四舍五入到最近的兆字节（MB）边界。文件大小之和必须至少略大于12MB。
- en: 'You can specify more than one data file using a semicolon-separated list. For
    example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用分号分隔的列表指定多个数据文件。例如：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `autoextend` and `max` attributes can be used only for the data file that
    is specified last.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoextend`和`max`属性只能用于指定的最后一个数据文件。'
- en: When the `autoextend` attribute is specified, the data file automatically increases
    in size by 64MB increments as space is required. The [`innodb_autoextend_increment`](innodb-parameters.html#sysvar_innodb_autoextend_increment)
    variable controls the increment size.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定`autoextend`属性时，数据文件会根据需要自动增加64MB的增量。[`innodb_autoextend_increment`](innodb-parameters.html#sysvar_innodb_autoextend_increment)变量控制增量大小。
- en: 'To specify a maximum size for an auto-extending data file, use the `max` attribute
    following the `autoextend` attribute. Use the `max` attribute only in cases where
    constraining disk usage is of critical importance. The following configuration
    permits `ibdata1` to grow to a limit of 500MB:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要为自动扩展数据文件指定最大大小，请在`autoextend`属性后使用`max`属性。只有在约束磁盘使用量至关重要的情况下才使用`max`属性。以下配置允许`ibdata1`增长到500MB的限制：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A minimum file size is enforced for the *first* system tablespace data file
    to ensure that there is enough space for doublewrite buffer pages. The following
    table shows minimum file sizes for each `InnoDB` page size. The default `InnoDB`
    page size is 16384 (16KB).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为*第一个*系统表空间数据文件强制执行最小文件大小，以确保有足够的空间用于双写缓冲区页。以下表显示了每个`InnoDB`页大小的最小文件大小。默认的`InnoDB`页大小为16384（16KB）。
- en: '| Page Size (innodb_page_size) | Minimum File Size |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 页大小（innodb_page_size） | 最小文件大小 |'
- en: '| 16384 (16KB) or less | 3MB |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 16384 (16KB) 或更少 | 3MB |'
- en: '| 32768 (32KB) | 6MB |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 32768 (32KB) | 6MB |'
- en: '| 65536 (64KB) | 12MB |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 65536 (64KB) | 12MB |'
- en: If your disk becomes full, you can add a data file on another disk. For instructions,
    see [Resizing the System Tablespace](innodb-system-tablespace.html#innodb-resize-system-tablespace
    "Resizing the System Tablespace").
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的磁盘已满，可以在另一个磁盘上添加数据文件。有关说明，请参阅[调整系统表空间大小](innodb-system-tablespace.html#innodb-resize-system-tablespace
    "调整系统表空间大小")。
- en: The size limit for individual files is determined by your operating system.
    You can set the file size to more than 4GB on operating systems that support large
    files. You can also use raw disk partitions as data files. See [Using Raw Disk
    Partitions for the System Tablespace](innodb-system-tablespace.html#innodb-raw-devices
    "Using Raw Disk Partitions for the System Tablespace").
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 个别文件的大小限制由您的操作系统确定。在支持大文件的操作系统上，您可以将文件大小设置为超过4GB。您还可以将原始磁盘分区用作数据文件。请参阅[使用原始磁盘分区作为系统表空间](innodb-system-tablespace.html#innodb-raw-devices
    "使用原始磁盘分区作为系统表空间")。
- en: '`InnoDB` is not aware of the file system maximum file size, so be cautious
    on file systems where the maximum file size is a small value such as 2GB.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` 不了解文件系统的最大文件大小，因此在最大文件大小为2GB等较小值的文件系统上要小心。'
- en: 'System tablespace files are created in the data directory by default ([`datadir`](server-system-variables.html#sysvar_datadir)).
    To specify an alternate location, use the [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)
    option. For example, to create a system tablespace data file in a directory named
    `myibdata`, use this configuration:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，系统表空间文件在数据目录中创建（[`datadir`](server-system-variables.html#sysvar_datadir)）。要指定替代位置，请使用[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)选项。例如，要在名为`myibdata`的目录中创建系统表空间数据文件，请使用以下配置：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A trailing slash is required when specifying a value for [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir).
    `InnoDB` does not create directories, so ensure that the specified directory exists
    before you start the server. Also, ensure sure that the MySQL server has the proper
    access rights to create files in the directory.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在为[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)指定值时，需要添加尾随斜杠。`InnoDB`不会创建目录，因此请确保在启动服务器之前指定的目录存在。还要确保MySQL服务器具有在目录中创建文件的适当访问权限。
- en: '`InnoDB` forms the directory path for each data file by textually concatenating
    the value of [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)
    to the data file name. If [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)
    is not defined, the default value is “./”, which is the data directory. (The MySQL
    server changes its current working directory to the data directory when it begins
    executing.)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`通过将[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)的值与数据文件名文本连接来形成每个数据文件的目录路径。如果未定义[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)，默认值为“./”，即数据目录。（当MySQL服务器开始执行时，它会将当前工作目录更改为数据目录。）'
- en: 'Alternatively, you can specify an absolute path for system tablespace data
    files. The following configuration is equivalent to the preceding one:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以为系统表空间数据文件指定绝对路径。以下配置与前述配置等效：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When you specify an absolute path for [`innodb_data_file_path`](innodb-parameters.html#sysvar_innodb_data_file_path),
    the setting is not concatenated with the [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)
    setting. System tablespace files are created in the specified absolute path. The
    specified directory must exist before you start the server.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为[`innodb_data_file_path`](innodb-parameters.html#sysvar_innodb_data_file_path)指定绝对路径时，设置不会与[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)设置连接。系统表空间文件将在指定的绝对路径中创建。在启动服务器之前，指定的目录必须存在。
- en: InnoDB Doublewrite Buffer File Configuration
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: InnoDB双写缓冲区文件配置
- en: As of MySQL 8.0.20, the doublewrite buffer storage area resides in doublewrite
    files, which provides flexibility with respect to the storage location of doublewrite
    pages. In previous releases, the doublewrite buffer storage area resided in the
    system tablespace. The [`innodb_doublewrite_dir`](innodb-parameters.html#sysvar_innodb_doublewrite_dir)
    variable defines the directory where `InnoDB` creates doublewrite files at startup.
    If no directory is specified, doublewrite files are created in the [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)
    directory, which defaults to the data directory if unspecified.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 自MySQL 8.0.20起，双写缓冲区存储区域位于双写文件中，这提供了关于双写页存储位置的灵活性。在先前的版本中，双写缓冲区存储区域位于系统表空间中。[`innodb_doublewrite_dir`](innodb-parameters.html#sysvar_innodb_doublewrite_dir)变量定义了`InnoDB`在启动时创建双写文件的目录。如果未指定目录，则双写文件将在[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)目录中创建，如果未指定，则默认为数据目录。
- en: 'To have doublewrite files created in a location other than the [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)
    directory, configure [`innodb_doublewrite_dir`](innodb-parameters.html#sysvar_innodb_doublewrite_dir)
    variable. For example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)目录之外的位置创建双写文件，请配置[`innodb_doublewrite_dir`](innodb-parameters.html#sysvar_innodb_doublewrite_dir)变量。例如：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Other doublewrite buffer variables permit defining the number of doublewrite
    files, the number of pages per thread, and the doublewrite batch size. For more
    information about doublewrite buffer configuration, see [Section 17.6.4, “Doublewrite
    Buffer”](innodb-doublewrite-buffer.html "17.6.4 Doublewrite Buffer").
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 其他双写缓冲区变量允许定义双写文件数量、每个线程的页面数量以及双写批量大小。有关双写缓冲区配置的更多信息，请参阅[第17.6.4节，“双写缓冲区”](innodb-doublewrite-buffer.html
    "17.6.4 双写缓冲区")。
- en: Redo Log Configuration
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重做日志配置
- en: 'From MySQL 8.0.30, the amount of disk space occupied by redo log files is controlled
    by the [`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)
    variable, which can be set at startup or runtime; for example, to set the variable
    to 8GB in an option file, add the following entry:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.30开始，重做日志文件占用的磁盘空间量由[`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)变量控制，该变量可以在启动时或运行时设置；例如，要在选项文件中将变量设置为8GB，请添加以下条目：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For information about configuring redo log capacity at runtime, see [Configuring
    Redo Log Capacity (MySQL 8.0.30 or Higher)](innodb-redo-log.html#innodb-modifying-redo-log-capacity
    "Configuring Redo Log Capacity (MySQL 8.0.30 or Higher)").
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在运行时配置重做日志容量的信息，请参阅[配置重做日志容量（MySQL 8.0.30或更高版本）](innodb-redo-log.html#innodb-modifying-redo-log-capacity
    "配置重做日志容量（MySQL 8.0.30或更高版本）")。
- en: The [`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)
    variable supersedes the [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    and [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    variables, which are deprecated. When the `innodb_redo_log_capacity` setting is
    defined, the `innodb_log_file_size` and `innodb_log_files_in_group` settings are
    ignored; otherwise, these settings are used to compute the `innodb_redo_log_capacity`
    setting (`innodb_log_files_in_group` * `innodb_log_file_size` = `innodb_redo_log_capacity`).
    If none of those variables are set, `innodb_redo_log_capacity` is set to the default
    value, which is 104857600 bytes (100MB). The maximum setting is 128GB.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)变量取代了已弃用的[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)和[`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)变量。当定义了`innodb_redo_log_capacity`设置时，将忽略`innodb_log_file_size`和`innodb_log_files_in_group`设置；否则，这些设置用于计算`innodb_redo_log_capacity`设置（`innodb_log_files_in_group`
    * `innodb_log_file_size` = `innodb_redo_log_capacity`）。如果没有设置这些变量中的任何一个，`innodb_redo_log_capacity`将设置为默认值，即104857600字节（100MB）。最大设置为128GB。'
- en: From MySQL 8.0.30, `InnoDB` attempts to maintain 32 redo log files, with each
    file equal to 1/32 * `innodb_redo_log_capacity`. The redo log files reside in
    the `#innodb_redo` directory in the data directory unless a different directory
    was specified by the [`innodb_log_group_home_dir`](innodb-parameters.html#sysvar_innodb_log_group_home_dir)
    variable. If [`innodb_log_group_home_dir`](innodb-parameters.html#sysvar_innodb_log_group_home_dir)
    was defined, the redo log files reside in the `#innodb_redo` directory in that
    directory. For more information, see [Section 17.6.5, “Redo Log”](innodb-redo-log.html
    "17.6.5 Redo Log").
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.30开始，`InnoDB`尝试维护32个重做日志文件，每个文件大小为1/32 * `innodb_redo_log_capacity`。重做日志文件位于数据目录中的`#innodb_redo`目录中，除非通过[`innodb_log_group_home_dir`](innodb-parameters.html#sysvar_innodb_log_group_home_dir)变量指定了不同的目录。如果定义了[`innodb_log_group_home_dir`](innodb-parameters.html#sysvar_innodb_log_group_home_dir)，则重做日志文件位于该目录中的`#innodb_redo`目录中。有关更多信息，请参见[第17.6.5节，“重做日志”](innodb-redo-log.html
    "17.6.5 Redo Log")。
- en: Before MySQL 8.0.30, `InnoDB` creates two 5MB redo log files named `ib_logfile0`
    and `ib_logfile1` in the data directory by default. You can define a different
    number of redo log files and different redo log file size when initializing the
    MySQL Server instance by configuring the [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    and [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    variables.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.30之前，`InnoDB`默认在数据目录中创建两个5MB的重做日志文件，分别命名为`ib_logfile0`和`ib_logfile1`。您可以在初始化MySQL服务器实例时通过配置[`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)和[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)变量来定义不同数量和大小的重做日志文件。
- en: '[`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    defines the number of log files in the log group. The default and recommended
    value is 2.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)定义了日志组中日志文件的数量。默认值和推荐值为2。'
- en: '[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    defines the size in bytes of each log file in the log group. The combined log
    file size ([`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    * [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group))
    cannot exceed the maximum value, which is slightly less than 512GB. A pair of
    255 GB log files, for example, approaches the limit but does not exceed it. The
    default log file size is 48MB. Generally, the combined size of the log files should
    be large enough that the server can smooth out peaks and troughs in workload activity,
    which often means that there is enough redo log space to handle more than an hour
    of write activity. A larger log file size means less checkpoint flush activity
    in the buffer pool, which reduces disk I/O. For additional information, see [Section 10.5.4,
    “Optimizing InnoDB Redo Logging”](optimizing-innodb-logging.html "10.5.4 Optimizing
    InnoDB Redo Logging").'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)定义了日志组中每个日志文件的大小（以字节为单位）。组合日志文件大小（[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    * [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)）不能超过最大值，该值略小于512GB。例如，一对255GB的日志文件接近极限但不超过。默认的日志文件大小为48MB。通常，日志文件的组合大小应足够大，以使服务器能够平滑处理工作负载活动中的高峰和低谷，这通常意味着有足够的重做日志空间来处理超过一个小时的写入活动。较大的日志文件大小意味着在缓冲池中减少检查点刷新活动，从而减少磁盘I/O。有关更多信息，请参见[第10.5.4节，“优化InnoDB重做日志记录”](optimizing-innodb-logging.html
    "10.5.4 优化InnoDB重做日志记录")。'
- en: 'The [`innodb_log_group_home_dir`](innodb-parameters.html#sysvar_innodb_log_group_home_dir)
    defines directory path to the `InnoDB` log files. You might use this option to
    place `InnoDB` redo log files in a different physical storage location than `InnoDB`
    data files to avoid potential I/O resource conflicts; for example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_log_group_home_dir`](innodb-parameters.html#sysvar_innodb_log_group_home_dir)定义了`InnoDB`日志文件的目录路径。您可以使用此选项将`InnoDB`重做日志文件放置在与`InnoDB`数据文件不同的物理存储位置，以避免潜在的I/O资源冲突；例如：'
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`InnoDB` does not create directories, so make sure that the log directory exists
    before you start the server. Use the Unix or DOS `mkdir` command to create any
    necessary directories.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`不会创建目录，因此在启动服务器之前确保日志目录存在。使用Unix或DOS的`mkdir`命令创建任何必要的目录。'
- en: Make sure that the MySQL server has the proper access rights to create files
    in the log directory. More generally, the server must have access rights in any
    directory where it needs to create files.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 确保MySQL服务器具有在日志目录中创建文件的适当访问权限。更一般地，服务器必须在需要创建文件的任何目录中具有访问权限。
- en: Undo Tablespace Configuration
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 撤销表空间配置
- en: Undo logs, by default, reside in two undo tablespaces created when the MySQL
    instance is initialized.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，撤销日志驻留在MySQL实例初始化时创建的两个撤销表空间中。
- en: The [`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)
    variable defines the path where `InnoDB` creates default undo tablespaces. If
    that variable is undefined, default undo tablespaces are created in the data directory.
    The [`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)
    variable is not dynamic. Configuring it requires restarting the server.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)变量定义了`InnoDB`创建默认撤销表空间的路径。如果该变量未定义，则默认的撤销表空间将在数据目录中创建。[`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)变量不是动态的。配置它需要重新启动服务器。'
- en: The I/O patterns for undo logs make undo tablespaces good candidates for [SSD](glossary.html#glos_ssd
    "SSD") storage.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销日志的I/O模式使撤销表空间成为[SSD](glossary.html#glos_ssd "SSD")存储的良好选择。
- en: For information about configuring additional undo tablespaces, see [Section 17.6.3.4,
    “Undo Tablespaces”](innodb-undo-tablespaces.html "17.6.3.4 Undo Tablespaces").
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置额外撤销表空间的信息，请参见[第17.6.3.4节，“撤销表空间”](innodb-undo-tablespaces.html "17.6.3.4 撤销表空间")。
- en: Global Temporary Tablespace Configuration
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 全局临时表空间配置
- en: The global temporary tablespace stores rollback segments for changes made to
    user-created temporary tables.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 全局临时表空间存储对用户创建的临时表所做更改的回滚段。
- en: A single auto-extending global temporary tablespace data file named `ibtmp1`
    in the [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)
    directory by default. The initial file size is slightly larger than 12MB.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)目录中有一个名为`ibtmp1`的单个自动扩展全局临时表空间数据文件。初始文件大小略大于12MB。
- en: The [`innodb_temp_data_file_path`](innodb-parameters.html#sysvar_innodb_temp_data_file_path)
    option specifies the path, file name, and file size for global temporary tablespace
    data files. File size is specified in KB, MB, or GB by appending K, M, or G to
    the size value. The file size or combined file size must be slightly larger than
    12MB.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_temp_data_file_path`](innodb-parameters.html#sysvar_innodb_temp_data_file_path)
    选项指定了全局临时表空间数据文件的路径、文件名和文件大小。文件大小通过在大小值后附加 K、M 或 G 来指定为 KB、MB 或 GB。文件大小或组合文件大小必须略大于
    12MB。'
- en: To specify an alternate location for global temporary tablespace data files,
    configure the [`innodb_temp_data_file_path`](innodb-parameters.html#sysvar_innodb_temp_data_file_path)
    option at startup.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定全局临时表空间数据文件的替代位置，请在启动时配置 [`innodb_temp_data_file_path`](innodb-parameters.html#sysvar_innodb_temp_data_file_path)
    选项。
- en: Session Temporary Tablespace Configuration
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 会话临时表空间配置
- en: In MySQL 8.0.15 and earlier, session temporary tablespaces store user-created
    temporary tables and internal temporary tables created by the optimizer when `InnoDB`
    is configured as the on-disk storage engine for internal temporary tables ([`internal_tmp_disk_storage_engine=InnoDB`](server-system-variables.html#sysvar_internal_tmp_disk_storage_engine)).
    From MySQL 8.0.16, `InnoDB` is always used as the on-disk storage engine for internal
    temporary tables.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.15 及更早版本中，会话临时表空间存储用户创建的临时表和由优化器创建的内部临时表，当 `InnoDB` 被配置为内部临时表的磁盘存储引擎时（[`internal_tmp_disk_storage_engine=InnoDB`](server-system-variables.html#sysvar_internal_tmp_disk_storage_engine)）。从
    MySQL 8.0.16 开始，`InnoDB` 总是被用作内部临时表的磁盘存储引擎。
- en: The [`innodb_temp_tablespaces_dir`](innodb-parameters.html#sysvar_innodb_temp_tablespaces_dir)
    variable defines the location where `InnoDB` creates session temporary tablespaces.
    The default location is the `#innodb_temp` directory in the data directory.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_temp_tablespaces_dir`](innodb-parameters.html#sysvar_innodb_temp_tablespaces_dir)
    变量定义了 `InnoDB` 创建会话临时表空间的位置。默认位置是数据目录中的 `#innodb_temp` 目录。'
- en: To specify an alternate location for session temporary tablespaces, configure
    the [`innodb_temp_tablespaces_dir`](innodb-parameters.html#sysvar_innodb_temp_tablespaces_dir)
    variable at startup. A fully qualified path or path relative to the data directory
    is permitted.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定会话临时表空间的替代位置，请在启动时配置 [`innodb_temp_tablespaces_dir`](innodb-parameters.html#sysvar_innodb_temp_tablespaces_dir)
    变量。允许使用完全限定路径或相对于数据目录的路径。
- en: Page Size Configuration
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 页面大小配置
- en: The [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size) option
    specifies the page size for all `InnoDB` tablespaces in a MySQL instance. This
    value is set when the instance is created and remains constant afterward. Valid
    values are 64KB, 32KB, 16KB (the default), 8KB, and 4KB. Alternatively, you can
    specify page size in bytes (65536, 32768, 16384, 8192, 4096).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size) 选项指定了
    MySQL 实例中所有 `InnoDB` 表空间的页面大小。此值在实例创建时设置，并在此后保持不变。有效值为 64KB、32KB、16KB（默认值）、8KB
    和 4KB。另外，您也可以按字节指定页面大小（65536、32768、16384、8192、4096）。'
- en: The default 16KB page size is appropriate for a wide range of workloads, particularly
    for queries involving table scans and DML operations involving bulk updates. Smaller
    page sizes might be more efficient for OLTP workloads involving many small writes,
    where contention can be an issue when a single page contains many rows. Smaller
    pages can also be more efficient for SSD storage devices, which typically use
    small block sizes. Keeping the `InnoDB` page size close to the storage device
    block size minimizes the amount of unchanged data that is rewritten to disk.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 16KB 页面大小适用于各种工作负载，特别是涉及表扫描和涉及大量更新的 DML 操作的查询。对于涉及许多小写入的 OLTP 工作负载，较小的页面大小可能更有效，当单个页面包含许多行时，争用可能是一个问题。较小的页面对于通常使用小块大小的
    SSD 存储设备也可能更有效。保持 `InnoDB` 页面大小接近存储设备块大小可以最小化被重写到磁盘的未更改数据量。
- en: Important
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '[`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size) can be
    set only when initializing the data directory. See the description of this variable
    for more information.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size) 只能在初始化数据目录时设置。有关此变量的更多信息，请参阅其描述。'
- en: Memory Configuration
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内存配置
- en: MySQL allocates memory to various caches and buffers to improve performance
    of database operations. When allocating memory for `InnoDB`, always consider memory
    required by the operating system, memory allocated to other applications, and
    memory allocated for other MySQL buffers and caches. For example, if you use `MyISAM`
    tables, consider the amount of memory allocated for the key buffer ([`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)).
    For an overview of MySQL buffers and caches, see [Section 10.12.3.1, “How MySQL
    Uses Memory”](memory-use.html "10.12.3.1 How MySQL Uses Memory").
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL为各种缓存和缓冲区分配内存以提高数据库操作的性能。在为`InnoDB`分配内存时，始终考虑操作系统所需的内存、分配给其他应用程序的内存以及为其他MySQL缓冲区和缓存分配的内存。例如，如果您使用`MyISAM`表，请考虑为键缓冲区（[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)）分配的内存量。有关MySQL缓冲区和缓存的概述，请参阅[第10.12.3.1节，“MySQL如何使用内存”](memory-use.html
    "10.12.3.1 MySQL如何使用内存")。
- en: 'Buffers specific to `InnoDB` are configured using the following parameters:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`特定的缓冲区使用以下参数进行配置：'
- en: '[`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)
    defines size of the buffer pool, which is the memory area that holds cached data
    for `InnoDB` tables, indexes, and other auxiliary buffers. The size of the buffer
    pool is important for system performance, and it is typically recommended that
    [`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)
    is configured to 50 to 75 percent of system memory. The default buffer pool size
    is 128MB. For additional guidance, see [Section 10.12.3.1, “How MySQL Uses Memory”](memory-use.html
    "10.12.3.1 How MySQL Uses Memory"). For information about how to configure `InnoDB`
    buffer pool size, see [Section 17.8.3.1, “Configuring InnoDB Buffer Pool Size”](innodb-buffer-pool-resize.html
    "17.8.3.1 Configuring InnoDB Buffer Pool Size"). Buffer pool size can be configured
    at startup or dynamically.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)
    定义了缓冲池的大小，这是一个内存区域，用于保存`InnoDB`表、索引和其他辅助缓冲区的缓存数据。缓冲池的大小对系统性能很重要，通常建议将[`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)
    配置为系统内存的50%到75%。默认的缓冲池大小为128MB。有关更多指导，请参阅[第10.12.3.1节，“MySQL如何使用内存”](memory-use.html
    "10.12.3.1 MySQL如何使用内存")。有关如何配置`InnoDB`缓冲池大小的信息，请参阅[第17.8.3.1节，“配置InnoDB缓冲池大小”](innodb-buffer-pool-resize.html
    "17.8.3.1 配置InnoDB缓冲池大小")。缓冲池大小可以在启动时或动态配置。'
- en: On systems with a large amount of memory, you can improve concurrency by dividing
    the buffer pool into multiple buffer pool instances. The number of buffer pool
    instances is controlled by the by [`innodb_buffer_pool_instances`](innodb-parameters.html#sysvar_innodb_buffer_pool_instances)
    option. By default, `InnoDB` creates one buffer pool instance. The number of buffer
    pool instances can be configured at startup. For more information, see [Section 17.8.3.2,
    “Configuring Multiple Buffer Pool Instances”](innodb-multiple-buffer-pools.html
    "17.8.3.2 Configuring Multiple Buffer Pool Instances").
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在具有大量内存的系统上，可以通过将缓冲池划分为多个缓冲池实例来提高并发性。缓冲池实例的数量由[`innodb_buffer_pool_instances`](innodb-parameters.html#sysvar_innodb_buffer_pool_instances)
    选项控制。默认情况下，`InnoDB`创建一个缓冲池实例。缓冲池实例的数量可以在启动时配置。有关更多信息，请参阅[第17.8.3.2节，“配置多个缓冲池实例”](innodb-multiple-buffer-pools.html
    "17.8.3.2 配置多个缓冲池实例")。
- en: '[`innodb_log_buffer_size`](innodb-parameters.html#sysvar_innodb_log_buffer_size)
    defines the size of the buffer that `InnoDB` uses to write to the log files on
    disk. The default size is 16MB. A large log buffer enables large transactions
    to run without writing the log to disk before the transactions commit. If you
    have transactions that update, insert, or delete many rows, you might consider
    increasing the size of the log buffer to save disk I/O. [`innodb_log_buffer_size`](innodb-parameters.html#sysvar_innodb_log_buffer_size)
    can be configured at startup. For related information, see [Section 10.5.4, “Optimizing
    InnoDB Redo Logging”](optimizing-innodb-logging.html "10.5.4 Optimizing InnoDB
    Redo Logging").'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_buffer_size`](innodb-parameters.html#sysvar_innodb_log_buffer_size)
    定义了`InnoDB`用于向磁盘上的日志文件写入的缓冲区大小。默认大小为16MB。较大的日志缓冲区使得大型事务在提交之前可以运行而不必将日志写入磁盘。如果您有更新、插入或删除许多行的事务，可以考虑增加日志缓冲区的大小以节省磁盘I/O。[`innodb_log_buffer_size`](innodb-parameters.html#sysvar_innodb_log_buffer_size)
    可以在启动时配置。有关相关信息，请参阅[第10.5.4节，“优化InnoDB重做日志记录”](optimizing-innodb-logging.html
    "10.5.4 优化InnoDB重做日志记录")。'
- en: Warning
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: On 32-bit GNU/Linux x86, if memory usage is set too high, `glibc` may permit
    the process heap to grow over the thread stacks, causing a server failure. It
    is a risk if the memory allocated to the [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") process for global and per-thread buffers and caches is close
    to or exceeds 2GB.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在32位GNU/Linux x86上，如果内存使用量设置过高，`glibc`可能允许进程堆增长超过线程堆栈，导致服务器失败。如果为[**mysqld**](mysqld.html
    "6.3.1 mysqld — MySQL服务器")进程分配的全局和每个线程的缓冲区和缓存接近或超过2GB，这是一个风险。
- en: A formula similar to the following that calculates global and per-thread memory
    allocation for MySQL can be used to estimate MySQL memory usage. You may need
    to modify the formula to account for buffers and caches in your MySQL version
    and configuration. For an overview of MySQL buffers and caches, see [Section 10.12.3.1,
    “How MySQL Uses Memory”](memory-use.html "10.12.3.1 How MySQL Uses Memory").
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用类似于以下计算MySQL全局和每个线程内存分配的公式来估算MySQL内存使用量。您可能需要修改公式以考虑您的MySQL版本和配置中的缓冲区和缓存。有关MySQL缓冲区和缓存的概述，请参见[第10.12.3.1节，“MySQL如何使用内存”](memory-use.html
    "10.12.3.1 MySQL如何使用内存")。
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Each thread uses a stack (often 2MB, but only 256KB in MySQL binaries provided
    by Oracle Corporation.) and in the worst case also uses `sort_buffer_size + read_buffer_size`
    additional memory.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每个线程使用一个堆栈（通常为2MB，但由Oracle Corporation提供的MySQL二进制文件中仅为256KB），在最坏的情况下还会使用`sort_buffer_size
    + read_buffer_size`额外的内存。
- en: On Linux, if the kernel is enabled for large page support, `InnoDB` can use
    large pages to allocate memory for its buffer pool. See [Section 10.12.3.3, “Enabling
    Large Page Support”](large-page-support.html "10.12.3.3 Enabling Large Page Support").
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，如果内核启用了大页支持，`InnoDB`可以使用大页来为其缓冲池分配内存。参见[第10.12.3.3节，“启用大页支持”](large-page-support.html
    "10.12.3.3 启用大页支持")。
