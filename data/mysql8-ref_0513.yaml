- en: 10.2.1 Optimizing SELECT Statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.2.1 优化SELECT语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/select-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/select-optimization.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/select-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/select-optimization.html)
- en: '[10.2.1.1 WHERE Clause Optimization](where-optimization.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.1 WHERE 子句优化](where-optimization.html)'
- en: '[10.2.1.2 Range Optimization](range-optimization.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.2 范围优化](range-optimization.html)'
- en: '[10.2.1.3 Index Merge Optimization](index-merge-optimization.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.3 索引合并优化](index-merge-optimization.html)'
- en: '[10.2.1.4 Hash Join Optimization](hash-joins.html)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.4 哈希连接优化](hash-joins.html)'
- en: '[10.2.1.5 Engine Condition Pushdown Optimization](engine-condition-pushdown-optimization.html)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.5 引擎条件下推优化](engine-condition-pushdown-optimization.html)'
- en: '[10.2.1.6 Index Condition Pushdown Optimization](index-condition-pushdown-optimization.html)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.6 索引条件下推优化](index-condition-pushdown-optimization.html)'
- en: '[10.2.1.7 Nested-Loop Join Algorithms](nested-loop-joins.html)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.7 嵌套循环连接算法](nested-loop-joins.html)'
- en: '[10.2.1.8 Nested Join Optimization](nested-join-optimization.html)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.8 嵌套连接优化](nested-join-optimization.html)'
- en: '[10.2.1.9 Outer Join Optimization](outer-join-optimization.html)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.9 外连接优化](outer-join-optimization.html)'
- en: '[10.2.1.10 Outer Join Simplification](outer-join-simplification.html)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.10 外连接简化](outer-join-simplification.html)'
- en: '[10.2.1.11 Multi-Range Read Optimization](mrr-optimization.html)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.11 多范围读取优化](mrr-optimization.html)'
- en: '[10.2.1.12 Block Nested-Loop and Batched Key Access Joins](bnl-bka-optimization.html)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.12 块嵌套循环和批量键访问连接](bnl-bka-optimization.html)'
- en: '[10.2.1.13 Condition Filtering](condition-filtering.html)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.13 条件过滤](condition-filtering.html)'
- en: '[10.2.1.14 Constant-Folding Optimization](constant-folding-optimization.html)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.14 常量折叠优化](constant-folding-optimization.html)'
- en: '[10.2.1.15 IS NULL Optimization](is-null-optimization.html)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.15 IS NULL 优化](is-null-optimization.html)'
- en: '[10.2.1.16 ORDER BY Optimization](order-by-optimization.html)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.16 ORDER BY 优化](order-by-optimization.html)'
- en: '[10.2.1.17 GROUP BY Optimization](group-by-optimization.html)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.17 GROUP BY 优化](group-by-optimization.html)'
- en: '[10.2.1.18 DISTINCT Optimization](distinct-optimization.html)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.18 DISTINCT 优化](distinct-optimization.html)'
- en: '[10.2.1.19 LIMIT Query Optimization](limit-optimization.html)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.19 LIMIT 查询优化](limit-optimization.html)'
- en: '[10.2.1.20 Function Call Optimization](function-optimization.html)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.20 函数调用优化](function-optimization.html)'
- en: '[10.2.1.21 Window Function Optimization](window-function-optimization.html)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.21 窗口函数优化](window-function-optimization.html)'
- en: '[10.2.1.22 Row Constructor Expression Optimization](row-constructor-optimization.html)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.22 行构造表达式优化](row-constructor-optimization.html)'
- en: '[10.2.1.23 Avoiding Full Table Scans](table-scan-avoidance.html)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.2.1.23 避免全表扫描](table-scan-avoidance.html)'
- en: Queries, in the form of [`SELECT`](select.html "15.2.13 SELECT Statement") statements,
    perform all the lookup operations in the database. Tuning these statements is
    a top priority, whether to achieve sub-second response times for dynamic web pages,
    or to chop hours off the time to generate huge overnight reports.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 查询以[`SELECT`](select.html "15.2.13 SELECT Statement")语句的形式在数据库中执行所有查找操作。调优这些语句是首要任务，无论是为了实现动态网页的亚秒响应时间，还是为了缩短生成大型隔夜报告的时间。
- en: Besides [`SELECT`](select.html "15.2.13 SELECT Statement") statements, the tuning
    techniques for queries also apply to constructs such as [`CREATE TABLE...AS SELECT`](create-table-select.html
    "15.1.20.4 CREATE TABLE ... SELECT Statement"), [`INSERT INTO...SELECT`](insert-select.html
    "15.2.7.1 INSERT ... SELECT Statement"), and `WHERE` clauses in [`DELETE`](delete.html
    "15.2.2 DELETE Statement") statements. Those statements have additional performance
    considerations because they combine write operations with the read-oriented query
    operations.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了[`SELECT`](select.html "15.2.13 SELECT Statement")语句外，对查询的调优技术也适用于诸如[`CREATE
    TABLE...AS SELECT`](create-table-select.html "15.1.20.4 CREATE TABLE ... SELECT
    Statement")、[`INSERT INTO...SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT
    Statement")以及[`DELETE`](delete.html "15.2.2 DELETE Statement")语句中的`WHERE`子句。这些语句有额外的性能考虑，因为它们将写操作与面向读取的查询操作结合在一起。
- en: NDB Cluster supports a join pushdown optimization whereby a qualifying join
    is sent in its entirety to NDB Cluster data nodes, where it can be distributed
    among them and executed in parallel. For more information about this optimization,
    see [Conditions for NDB pushdown joins](mysql-cluster-options-variables.html#ndb_join_pushdown-conditions
    "Conditions for NDB pushdown joins").
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: NDB Cluster支持连接下推优化，其中符合条件的连接完整地发送到NDB Cluster数据节点，可以在这些节点之间分发并并行执行。有关此优化的更多信息，请参阅[Conditions
    for NDB pushdown joins](mysql-cluster-options-variables.html#ndb_join_pushdown-conditions
    "Conditions for NDB pushdown joins")。
- en: 'The main considerations for optimizing queries are:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 优化查询的主要考虑因素包括：
- en: To make a slow `SELECT ... WHERE` query faster, the first thing to check is
    whether you can add an [index](glossary.html#glos_index "index"). Set up indexes
    on columns used in the `WHERE` clause, to speed up evaluation, filtering, and
    the final retrieval of results. To avoid wasted disk space, construct a small
    set of indexes that speed up many related queries used in your application.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使慢`SELECT ... WHERE`查询更快，首先要检查的是是否可以添加[索引](glossary.html#glos_index "index")。在`WHERE`子句中设置索引，以加快评估、过滤和最终检索结果。为了避免浪费磁盘空间，构建一小组索引，可以加速应用程序中使用的许多相关查询。
- en: Indexes are especially important for queries that reference different tables,
    using features such as [joins](glossary.html#glos_join "join") and [foreign keys](glossary.html#glos_foreign_key
    "foreign key"). You can use the [`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement")
    statement to determine which indexes are used for a [`SELECT`](select.html "15.2.13 SELECT
    Statement"). See [Section 10.3.1, “How MySQL Uses Indexes”](mysql-indexes.html
    "10.3.1 How MySQL Uses Indexes") and [Section 10.8.1, “Optimizing Queries with
    EXPLAIN”](using-explain.html "10.8.1 Optimizing Queries with EXPLAIN").
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 索引对于引用不同表的查询特别重要，使用诸如[连接](glossary.html#glos_join "join")和[外键](glossary.html#glos_foreign_key
    "foreign key")等功能。您可以使用[`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement")语句确定哪些索引用于[`SELECT`](select.html
    "15.2.13 SELECT Statement")。请参阅[Section 10.3.1，“MySQL如何使用索引”](mysql-indexes.html
    "10.3.1 How MySQL Uses Indexes")和[Section 10.8.1，“使用EXPLAIN优化查询”](using-explain.html
    "10.8.1 Optimizing Queries with EXPLAIN")。
- en: Isolate and tune any part of the query, such as a function call, that takes
    excessive time. Depending on how the query is structured, a function could be
    called once for every row in the result set, or even once for every row in the
    table, greatly magnifying any inefficiency.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离和调整查询的任何部分，例如需要大量时间的函数调用。根据查询的结构，函数可能会为结果集中的每一行调用一次，甚至为表中的每一行调用一次，从而极大地放大任何低效性。
- en: Minimize the number of [full table scans](glossary.html#glos_full_table_scan
    "full table scan") in your queries, particularly for big tables.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量减少查询中的[全表扫描](glossary.html#glos_full_table_scan "full table scan")次数，特别是对于大表。
- en: Keep table statistics up to date by using the [`ANALYZE TABLE`](analyze-table.html
    "15.7.3.1 ANALYZE TABLE Statement") statement periodically, so the optimizer has
    the information needed to construct an efficient execution plan.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement")语句定期更新表统计信息，以便优化器具有构建高效执行计划所需的信息。
- en: Learn the tuning techniques, indexing techniques, and configuration parameters
    that are specific to the storage engine for each table. Both `InnoDB` and `MyISAM`
    have sets of guidelines for enabling and sustaining high performance in queries.
    For details, see [Section 10.5.6, “Optimizing InnoDB Queries”](optimizing-innodb-queries.html
    "10.5.6 Optimizing InnoDB Queries") and [Section 10.6.1, “Optimizing MyISAM Queries”](optimizing-queries-myisam.html
    "10.6.1 Optimizing MyISAM Queries").
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解针对每个表的存储引擎特定的调整技术、索引技术和配置参数。`InnoDB`和`MyISAM`都有一套指导原则，用于启用和维持查询的高性能。有关详细信息，请参阅[Section 10.5.6，“优化InnoDB查询”](optimizing-innodb-queries.html
    "10.5.6 Optimizing InnoDB Queries")和[Section 10.6.1，“优化MyISAM查询”](optimizing-queries-myisam.html
    "10.6.1 Optimizing MyISAM Queries")。
- en: You can optimize single-query transactions for `InnoDB` tables, using the technique
    in [Section 10.5.3, “Optimizing InnoDB Read-Only Transactions”](innodb-performance-ro-txn.html
    "10.5.3 Optimizing InnoDB Read-Only Transactions").
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用[Section 10.5.3，“优化InnoDB只读事务”](innodb-performance-ro-txn.html "10.5.3 Optimizing
    InnoDB Read-Only Transactions")中的技术，为`InnoDB`表优化单个查询事务。
- en: Avoid transforming the query in ways that make it hard to understand, especially
    if the optimizer does some of the same transformations automatically.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免以使其难以理解的方式转换查询，特别是如果优化器自动执行了一些相同的转换。
- en: If a performance issue is not easily solved by one of the basic guidelines,
    investigate the internal details of the specific query by reading the [`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement") plan and adjusting your indexes, `WHERE` clauses,
    join clauses, and so on. (When you reach a certain level of expertise, reading
    the [`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement") plan might be your first
    step for every query.)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果性能问题不容易通过基本准则之一解决，请通过阅读[`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement")计划的内部细节并调整您的索引、`WHERE`子句、连接子句等来调查特定查询。
    （当您达到一定的专业水平时，阅读[`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement")计划可能是每个查询的第一步。）
- en: Adjust the size and properties of the memory areas that MySQL uses for caching.
    With efficient use of the `InnoDB` [buffer pool](glossary.html#glos_buffer_pool
    "buffer pool"), `MyISAM` key cache, and the MySQL query cache, repeated queries
    run faster because the results are retrieved from memory the second and subsequent
    times.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整 MySQL 用于缓存的内存区域的大小和属性。通过有效利用`InnoDB` [缓冲池](glossary.html#glos_buffer_pool
    "buffer pool")、`MyISAM` 关键字缓存和 MySQL 查询缓存，重复查询会更快运行，因为第二次及以后的结果是从内存中检索的。
- en: Even for a query that runs fast using the cache memory areas, you might still
    optimize further so that they require less cache memory, making your application
    more scalable. Scalability means that your application can handle more simultaneous
    users, larger requests, and so on without experiencing a big drop in performance.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使使用缓存内存区域运行快速查询，您仍然可以进一步优化，使其需要更少的缓存内存，从而使您的应用程序更具可扩展性。可扩展性意味着您的应用程序可以处理更多同时用户、更大请求等，而不会出现性能大幅下降。
- en: Deal with locking issues, where the speed of your query might be affected by
    other sessions accessing the tables at the same time.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理锁定问题，其中您的查询速度可能会受到其他会话同时访问表的影响。
