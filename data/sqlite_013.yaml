- en: 1\. Amalgamation Versus Individual Source Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 合并与单独源文件
- en: 原文：[https://sqlite.com/howtocompile.html](https://sqlite.com/howtocompile.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/howtocompile.html](https://sqlite.com/howtocompile.html)
- en: <title>How To Compile SQLite</title>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <title>如何编译SQLite</title>
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: SQLite is ANSI-C source code. It must be compiled into machine code before it
    is useful. This article is a guide to the various ways of compiling SQLite.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是ANSI-C源代码，在实用之前必须编译成机器代码。本文指南介绍了编译SQLite的各种方法。
- en: This article does not contain a step-by-step recipe for compiling SQLite. That
    would be difficult since each development situation is different. Rather, this
    article describes and illustrates the principles behind the compilation of SQLite.
    Typical compilation commands are provided as examples with the expectation that
    application developers can use these examples as guidance for developing their
    own custom compilation procedures. In other words, this article provides ideas
    and insights, not turnkey solutions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本文并不提供编译SQLite的逐步指南，因为每个开发环境都不同，这样做会很困难。相反，本文描述和阐述了SQLite编译背后的原理。提供了典型的编译命令作为示例，期望应用程序开发者可以借此作为开发自定义编译过程的指导。换句话说，本文提供了思路和见解，而非成品解决方案。
- en: SQLite is built from over one hundred files of C code and script spread across
    multiple directories. The implementation of SQLite is pure ANSI-C, but many of
    the C-language source code files are either generated or transformed by auxiliary
    C programs and AWK, SED, and TCL scripts prior to being incorporated into the
    finished SQLite library. Building the necessary C programs and transforming and/or
    creating the C-language source code for SQLite is a complex process.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite由100多个C代码文件和分布在多个目录中的脚本构建而成。SQLite的实现是纯ANSI-C，但许多C语言源代码文件在最终SQLite库被合并之前，要经过辅助C程序、AWK、SED和TCL脚本的生成或转换。构建必要的C程序，以及转换和/或创建SQLite的C语言源代码是一个复杂的过程。
- en: 'To simplify matters, SQLite is also available as a pre-packaged [amalgamation](amalgamation.html)
    source code file: **sqlite3.c**. The amalgamation is a single file of ANSI-C code
    that implements the entire SQLite library. The amalgamation is much easier to
    deal with. Everything is contained within a single code file, so it is easy to
    drop into the source tree of a larger C or C++ program. All the code generation
    and transformation steps have already been carried out so there are no auxiliary
    C programs to configure and compile and no scripts to run. And, because the entire
    library is contained in a single translation unit, compilers are able to do more
    advanced optimizations resulting in a 5% to 10% performance improvement. For these
    reasons, the amalgamation source file ("**sqlite3.c**") is recommended for all
    applications.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化问题，SQLite也作为预打包的[合并](amalgamation.html)源代码文件**sqlite3.c**提供。合并是一个包含整个SQLite库的单个ANSI-C代码文件。合并文件更易于处理。所有内容都包含在一个代码文件中，因此很容易将其添加到较大的C或C++程序的源树中。所有代码生成和转换步骤都已完成，因此不需要配置和编译辅助C程序，也不需要运行脚本。而且，由于整个库包含在单个翻译单元中，编译器能够进行更高级的优化，从而实现5%至10%的性能提升。因此，推荐对所有应用程序使用合并源文件（**sqlite3.c**）。
- en: '*The use of the [amalgamation](amalgamation.html) is recommended for all applications.*'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*推荐所有应用程序使用[合并](amalgamation.html)。*'
- en: Building SQLite directly from individual source code files is certainly possible,
    but it is not recommended. For some specialized applications, it might be necessary
    to modify the build process in ways that cannot be done using just the prebuilt
    amalgamation source file downloaded from the website. For those situations, it
    is recommended that a customized amalgamation be built (as described [below](howtocompile.html#amal))
    and used. In other words, even if a project requires building SQLite beginning
    with individual source files, it is still recommended that an amalgamation source
    file be used as an intermediate step.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 直接从单独的源代码文件编译SQLite当然是可能的，但并不推荐。对于某些特定应用程序，可能需要修改构建过程，这是无法仅通过从网站下载的预构建的合并源文件完成的。对于这些情况，建议使用定制的合并文件构建（如下所述[howtocompile.html#amal](howtocompile.html#amal)）并使用它。换句话说，即使项目需要从单独的源文件开始构建SQLite，仍建议使用合并源文件作为中间步骤。
- en: 2\. Compiling The Command-Line Interface
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 编译命令行界面
- en: 'A build of the [command-line interface](cli.html) requires three source files:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[命令行界面](cli.html)的构建需要三个源文件：'
- en: '**sqlite3.c**: The SQLite amalgamation source file'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sqlite3.c**: SQLite汇编源文件'
- en: '**sqlite3.h**: The header files that accompanies sqlite3.c and defines the
    C-language interfaces to SQLite.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sqlite3.h**: 伴随sqlite3.c的头文件，定义了SQLite的C语言接口。'
- en: '**shell.c**: The command-line interface program itself. This is the C source
    code file that contains the definition of the **main()** routine and the loop
    that prompts for user input and passes that input into the SQLite database engine
    for processing.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**shell.c**: 命令行界面程序本身。这是包含**main()**例程定义和循环的C源代码文件，用于提示用户输入并将该输入传递给SQLite数据库引擎进行处理。'
- en: All three of the above source files are contained in the [amalgamation tarball](download.html#amalgtarball)
    available on the [download page](download.html).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这三个源文件都包含在[合并tarball](download.html#amalgtarball)中，可以从[下载页面](download.html)下载。
- en: 'To build the CLI, simply put these three files in the same directory and compile
    them together. Using MSVC:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建CLI，只需将这三个文件放在同一个目录中，并将它们一起编译。使用MSVC：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On Unix systems (or on Windows using cygwin or mingw+msys) the command typically
    looks something like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix系统上（或在Windows上使用cygwin或mingw+msys），命令通常看起来像这样：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The pthreads library is needed to make SQLite threadsafe. But since the CLI
    is single threaded, we could instruct SQLite to build in a non-threadsafe mode
    and thereby omit the pthreads library:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: pthreads库用于使SQLite线程安全。但由于CLI是单线程的，我们可以指示SQLite以非线程安全模式构建，从而省略pthreads库：
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The -ldl library is needed to support dynamic loading, the [sqlite3_load_extension()](c3ref/load_extension.html)
    interface and the [load_extension() SQL function](lang_corefunc.html#load_extension).
    If these features are not required, then they can be omitted using [SQLITE_OMIT_LOAD_EXTENSION](compile.html#omit_load_extension)
    compile-time option:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 需要-ldl库来支持动态加载，[sqlite3_load_extension()](c3ref/load_extension.html)接口和[load_extension()
    SQL函数](lang_corefunc.html#load_extension)。如果不需要这些功能，则可以使用[SQLITE_OMIT_LOAD_EXTENSION](compile.html#omit_load_extension)编译时选项来省略它们：
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: One might want to provide other [compile-time options](compile.html) such as
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可能希望提供其他[编译时选项](compile.html)，如
- en: '[-DSQLITE_ENABLE_FTS4](compile.html#enable_fts4) or [-DSQLITE_ENABLE_FTS5](compile.html#enable_fts5)
    for full-text search,'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[-DSQLITE_ENABLE_FTS4](compile.html#enable_fts4)或[-DSQLITE_ENABLE_FTS5](compile.html#enable_fts5)用于全文搜索，'
- en: '[-DSQLITE_ENABLE_RTREE](compile.html#enable_rtree) for the R*Tree search engine
    extension,'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[-DSQLITE_ENABLE_RTREE](compile.html#enable_rtree)用于R*Tree搜索引擎扩展，'
- en: '[-DSQLITE_ENABLE_DBSTAT_VTAB](compile.html#enable_dbstat_vtab) for the [dbstat
    virtual table](dbstat.html), or'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[-DSQLITE_ENABLE_DBSTAT_VTAB](compile.html#enable_dbstat_vtab)用于[dbstat虚拟表](dbstat.html)，或者'
- en: '[-DSQLITE_ENABLE_MATH_FUNCTIONS](compile.html#enable_math_functions) for extended
    math functions.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[-DSQLITE_ENABLE_MATH_FUNCTIONS](compile.html#enable_math_functions)用于扩展数学函数。'
- en: 'In order to see extra commentary in [EXPLAIN](lang_explain.html) listings,
    add the [-DSQLITE_ENABLE_EXPLAIN_COMMENTS](compile.html#enable_explain_comments)
    option. Add -DHAVE_READLINE and the -lreadline and -lncurses libraries to get
    command-line editing support. One might also want to specify some compiler optimization
    switches. (The precompiled CLI available for download from the SQLite website
    uses "-Os".) There are countless possible variations here. A command to compile
    a full-featured shell might look something like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在[EXPLAIN](lang_explain.html)列表中看到额外的注释，请添加[-DSQLITE_ENABLE_EXPLAIN_COMMENTS](compile.html#enable_explain_comments)选项。添加-DHAVE_READLINE以及-lreadline和-lncurses库以获取命令行编辑支持。您可能还希望指定一些编译器优化开关。（SQLite网站提供的可下载的预编译CLI使用了"-Os"。）这里有无数种可能的变化。编译完整特性的shell的命令可能如下所示：
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The key point is this: Building the CLI consists of compiling together two
    C-language files. The **shell.c** file contains the definition of the entry point
    and the user input loop and the SQLite amalgamation **sqlite3.c** contains the
    complete implementation of the SQLite library.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 关键点在于：构建CLI包括将两个C语言文件编译在一起。**shell.c**文件包含入口点和用户输入循环的定义，而SQLite汇编**sqlite3.c**包含了SQLite库的完整实现。
- en: 3\. Compiling The TCL Interface
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 编译TCL接口
- en: The TCL interface for SQLite is a small module that is added into the regular
    amalgamation. The result is a new amalgamated source file called "**tclsqlite3.c**".
    This single source file is all that is needed to generate a shared library that
    can be loaded into a standard [tclsh](http://wiki.tcl-lang.org/2541) or [wish](http://wiki.tcl-lang.org/2364)
    using the [TCL load command](http://wiki.tcl-lang.org/9830), or to generate a
    standalone tclsh that comes with SQLite built in. A copy of the tcl amalgamation
    is included on the [download page](download.html) as a file in the [TEA tarball](download.html#amalgtarball).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 对 TCL 的接口是一个小模块，它被添加到常规的汇编中。结果是一个新的汇编源文件称为“**tclsqlite3.c**”。这个单一的源文件就足以生成一个可以加载到标准
    [tclsh](http://wiki.tcl-lang.org/2541) 或 [wish](http://wiki.tcl-lang.org/2364)
    中使用 [TCL load 命令](http://wiki.tcl-lang.org/9830) 的共享库，或者生成一个内置 SQLite 的独立 tclsh。TCL
    汇编的一个副本已包含在 [下载页面](download.html) 上作为 [TEA tarball](download.html#amalgtarball)
    中的一个文件。
- en: 'To generate a TCL-loadable library for SQLite on Linux, the following command
    will suffice:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Linux 上生成可 TCL 加载的 SQLite 库，以下命令足以：
- en: '[PRE5]'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Building shared libraries for Mac OS X and Windows is not nearly so simple,
    unfortunately. For those platforms it is best to use the configure script and
    makefile that is included with the [TEA tarball](download.html#amalgtarball).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，为 Mac OS X 和 Windows 构建共享库并不那么简单。对于这些平台，最好使用包含在 [TEA tarball](download.html#amalgtarball)
    中的配置脚本和 makefile。
- en: 'To generate a standalone tclsh that is statically linked with SQLite, use this
    compiler invocation:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个静态链接到 SQLite 的独立 tclsh，使用以下编译器调用：
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The trick here is the -DTCLSH=1 option. The TCL interface module for SQLite
    includes a **main()** procedure that initializes a TCL interpreter and enters
    a command-line loop when it is compiled with -DTCLSH=1\. The command above works
    on both Linux and Mac OS X, though one may need to adjust the library options
    depending on the platform and which version of TCL one is linking against.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的技巧在于 -DTCLSH=1 选项。SQLite 的 TCL 接口模块包括一个 **main()** 程序，在编译时使用 -DTCLSH=1 编译时初始化
    TCL 解释器并进入命令行循环。上述命令适用于 Linux 和 Mac OS X，尽管可能需要根据平台和 TCL 版本调整库选项。
- en: 4\. Building The Amalgamation
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 构建汇编
- en: 'The versions of the SQLite amalgamation that are supplied on the [download
    page](download.html) are normally adequate for most users. However, some projects
    may want or need to build their own amalgamations. A common reason for building
    a custom amalgamation is in order to use certain [compile-time options](compile.html)
    to customize the SQLite library. Recall that the SQLite amalgamation contains
    a lot of C-code that is generated by auxiliary programs and scripts. Many of the
    compile-time options effect this generated code and must be supplied to the code
    generators before the amalgamation is assembled. The set of compile-time options
    that must be passed into the code generators can vary from one release of SQLite
    to the next, but at the time of this writing (circa SQLite 3.6.20, 2009-11-04)
    the set of options that must be known by the code generators includes:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 提供在 [下载页面](download.html) 上供应的 SQLite 汇编版本通常对大多数用户来说是足够的。然而，一些项目可能希望或需要构建自己的汇编。构建自定义汇编的常见原因是为了使用某些
    [编译时选项](compile.html) 来自定义 SQLite 库。记住，SQLite 汇编包含大量由辅助程序和脚本生成的 C 代码。许多编译时选项影响这些生成的代码，并且必须在组装汇编之前提供给代码生成器。必须传递给代码生成器的编译时选项集合可以因
    SQLite 的不同版本而异，但在撰写本文时（约 SQLite 3.6.20，2009-11-04），代码生成器必须知道的选项集包括：
- en: '[SQLITE_ENABLE_UPDATE_DELETE_LIMIT](compile.html#enable_update_delete_limit)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_ENABLE_UPDATE_DELETE_LIMIT](compile.html#enable_update_delete_limit)'
- en: '[SQLITE_OMIT_ALTERTABLE](compile.html#omit_altertable)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_ALTERTABLE](compile.html#omit_altertable)'
- en: '[SQLITE_OMIT_ANALYZE](compile.html#omit_analyze)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_ANALYZE](compile.html#omit_analyze)'
- en: '[SQLITE_OMIT_ATTACH](compile.html#omit_attach)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_ATTACH](compile.html#omit_attach)'
- en: '[SQLITE_OMIT_AUTOINCREMENT](compile.html#omit_autoincrement)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_AUTOINCREMENT](compile.html#omit_autoincrement)'
- en: '[SQLITE_OMIT_CAST](compile.html#omit_cast)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_CAST](compile.html#omit_cast)'
- en: '[SQLITE_OMIT_COMPOUND_SELECT](compile.html#omit_compound_select)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_COMPOUND_SELECT](compile.html#omit_compound_select)'
- en: '[SQLITE_OMIT_EXPLAIN](compile.html#omit_explain)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_EXPLAIN](compile.html#omit_explain)'
- en: '[SQLITE_OMIT_FOREIGN_KEY](compile.html#omit_foreign_key)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_FOREIGN_KEY](compile.html#omit_foreign_key)'
- en: '[SQLITE_OMIT_PRAGMA](compile.html#omit_pragma)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_PRAGMA](compile.html#omit_pragma)'
- en: '[SQLITE_OMIT_REINDEX](compile.html#omit_reindex)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_REINDEX](compile.html#omit_reindex)'
- en: '[SQLITE_OMIT_SUBQUERY](compile.html#omit_subquery)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_SUBQUERY](compile.html#omit_subquery)'
- en: '[SQLITE_OMIT_TEMPDB](compile.html#omit_tempdb)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_TEMPDB](compile.html#omit_tempdb)'
- en: '[SQLITE_OMIT_TRIGGER](compile.html#omit_trigger)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_TRIGGER](compile.html#omit_trigger)'
- en: '[SQLITE_OMIT_VACUUM](compile.html#omit_vacuum)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_VACUUM](compile.html#omit_vacuum)'
- en: '[SQLITE_OMIT_VIEW](compile.html#omit_view)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_VIEW](compile.html#omit_view)'
- en: '[SQLITE_OMIT_VIRTUALTABLE](compile.html#omit_virtualtable)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLITE_OMIT_VIRTUALTABLE](compile.html#omit_virtualtable)'
- en: To build a custom amalgamation, first download the original individual source
    files onto a Unix or Unix-like development platform. Be sure to get the original
    source files not the "preprocessed source files". One can obtain the complete
    set of original source files either from the [download page](download.html) or
    directly from the [configuration management system](https://www.sqlite.org/src).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建自定义的集成，首先在 Unix 或类 Unix 开发平台上下载原始的单个源文件。确保获取原始的源文件而不是“预处理源文件”。可以从[下载页面](download.html)或直接从[配置管理系统](https://www.sqlite.org/src)获取完整的原始源文件集合。
- en: 'Suppose the SQLite source tree is stored in a directory named "sqlite". Plan
    to construct the amalgamation in a parallel directory named (for example) "bld".
    First construct an appropriate Makefile by either running the configure script
    at the top of the SQLite source tree, or by making a copy of one of the template
    Makefiles at the top of the source tree. Then hand edit this Makefile to include
    the desired compile-time options. Finally run:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 SQLite 源代码树存储在名为 "sqlite" 的目录中。计划在并行目录中构建集成，例如名为 "bld"。首先通过在 SQLite 源代码树顶部运行配置脚本或复制顶部源代码树中的模板
    Makefile 之一来构建适当的 Makefile。然后手动编辑此 Makefile 以包括所需的编译时选项。最后运行：
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Or on Windows with MSVC:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在使用 MSVC 的 Windows 上：
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The "sqlite3.c" make target will automatically construct the regular "**sqlite3.c**"
    amalgamation source file, its header file "**sqlite3.h**", and the "**tclsqlite3.c**"
    amalgamation source file that includes the TCL interface. Afterwards, the needed
    files can be copied into project directories and compiled according to the procedures
    outlined above.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '"sqlite3.c" 的 make 目标将自动构建常规的 "**sqlite3.c**" 集成源文件，其头文件 "**sqlite3.h**"，以及包含
    TCL 接口的 "**tclsqlite3.c**" 集成源文件。然后，可以将所需的文件复制到项目目录中，并根据上述步骤进行编译。'
- en: 5\. Building A Windows DLL
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 构建 Windows DLL
- en: To build a DLL of SQLite for use in Windows, first acquire the appropriate amalgamated
    source code files, sqlite3.c and sqlite3.h. These can either be downloaded from
    the [SQLite website](https://www.sqlite.org/download.html) or custom generated
    from sources as shown above.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建用于 Windows 的 SQLite DLL，请首先获取适当的集成源代码文件，sqlite3.c 和 sqlite3.h。可以从[SQLite
    网站](https://www.sqlite.org/download.html)下载，或者按照上面显示的方式自定义生成。
- en: 'With source code files in the working directory, a DLL can be generated using
    MSVC with the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用工作目录中的源代码文件，可以使用以下命令在 MSVC 中生成 DLL：
- en: '[PRE9]'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The above command should be run from the MSVC Native Tools Command Prompt. If
    you have MSVC installed on your machine, you probably have multiple versions of
    this Command Prompt, for native builds for x86 and x64, and possibly also for
    cross-compiling to ARM. Use the appropriate Command Prompt depending on the desired
    DLL.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令应该从 MSVC 本机工具命令提示符中运行。如果在您的机器上安装了 MSVC，可能会有多个版本的此命令提示符，用于 x86 的本机构建，以及可能还用于交叉编译到
    ARM。根据所需的 DLL 使用适当的命令提示符。
- en: 'If using the MinGW compiler, the command-line is this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 MinGW 编译器，命令行是这样的：
- en: '[PRE10]'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that MinGW generates 32-bit DLLs only. There is a separate MinGW64 project
    that can be used to generate 64-bit DLLs. Presumably the command-line syntax is
    similar. Also note that recent versions of MSVC generate DLLs that will not work
    on WinXP and earlier versions of Windows. So for maximum compatibility of your
    generated DLL, MinGW is recommended. A good rule-of-thumb is to generate 32-bit
    DLLs using MinGW and 64-bit DLLs using MSVC.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，MinGW 只生成 32 位的 DLL。有一个单独的 MinGW64 项目可以用来生成 64 位的 DLL。假设命令行语法类似。还要注意，最近版本的
    MSVC 生成的 DLL 在 Windows XP 及更早版本的 Windows 上无法工作。因此，为了生成的 DLL 的最大兼容性，建议使用 MinGW。一个好的经验法则是使用
    MinGW 生成 32 位的 DLL，使用 MSVC 生成 64 位的 DLL。
- en: 'In most cases, you will want to supplement the basic commands above with [compile-time
    options](compile.html) appropriate for your application. Commonly used compile-time
    options include:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，您将希望根据您的应用程序补充上述基本命令，使用适合您的应用程序的[编译时选项](compile.html)。常用的编译时选项包括：
- en: '**-Os** - Optimize for size. Make the DLL as small as possible.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-Os** - 优化大小。尽可能使 DLL 文件尽量小。'
- en: '**-O2** - Optimize for speed. This will make the DLL larger by unrolling loops
    and inlining functions.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-O2** - 优化以提升速度。这会通过展开循环和内联函数来增加DLL的大小。'
- en: '**-DSQLITE_ENABLE_FTS4** - Include the [full-text search](fts3.html) engine
    code in SQLite.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-DSQLITE_ENABLE_FTS4** - 在SQLite中包括[全文搜索](fts3.html)引擎代码。'
- en: '**-DSQLITE_ENABLE_RTREE** - Include the [R-Tree extension](rtree.html).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-DSQLITE_ENABLE_RTREE** - 包括[R-Tree扩展](rtree.html)。'
- en: '**-DSQLITE_ENABLE_COLUMN_METADATA** - This enables some extra APIs that are
    required by some common systems, including Ruby-on-Rails.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**-DSQLITE_ENABLE_COLUMN_METADATA** - 启用一些额外的API，这些API被一些常见系统（包括Ruby-on-Rails）所需。'
