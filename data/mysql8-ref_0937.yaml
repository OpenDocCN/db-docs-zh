- en: 15.2.1 CALL Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.2.1 CALL 语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/call.html](https://dev.mysql.com/doc/refman/8.0/en/call.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/call.html](https://dev.mysql.com/doc/refman/8.0/en/call.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The [`CALL`](call.html "15.2.1 CALL Statement") statement invokes a stored procedure
    that was defined previously with [`CREATE PROCEDURE`](create-procedure.html "15.1.17 CREATE
    PROCEDURE and CREATE FUNCTION Statements").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CALL`](call.html "15.2.1 CALL Statement") 语句调用之前使用 [`CREATE PROCEDURE`](create-procedure.html
    "15.1.17 CREATE PROCEDURE and CREATE FUNCTION Statements") 之前定义的存储过程。'
- en: Stored procedures that take no arguments can be invoked without parentheses.
    That is, `CALL p()` and `CALL p` are equivalent.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不带参数的存储过程可以在不使用括号的情况下调用。也就是说，`CALL p()` 和 `CALL p` 是等效的。
- en: '[`CALL`](call.html "15.2.1 CALL Statement") can pass back values to its caller
    using parameters that are declared as `OUT` or `INOUT` parameters. When the procedure
    returns, a client program can also obtain the number of rows affected for the
    final statement executed within the routine: At the SQL level, call the [`ROW_COUNT()`](information-functions.html#function_row-count)
    function; from the C API, call the [`mysql_affected_rows()`](/doc/c-api/8.0/en/mysql-affected-rows.html)
    function.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CALL`](call.html "15.2.1 CALL Statement") 可以通过声明为 `OUT` 或 `INOUT` 参数的参数将值传回给调用者。当过程返回时，客户端程序还可以获取在例程内执行的最终语句影响的行数：在
    SQL 级别，调用 [`ROW_COUNT()`](information-functions.html#function_row-count) 函数；从
    C API，调用 [`mysql_affected_rows()`](/doc/c-api/8.0/en/mysql-affected-rows.html)
    函数。'
- en: For information about the effect of unhandled conditions on procedure parameters,
    see [Section 15.6.7.8, “Condition Handling and OUT or INOUT Parameters”](conditions-and-parameters.html
    "15.6.7.8 Condition Handling and OUT or INOUT Parameters").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有关未处理条件对过程参数的影响的信息，请参见 [第 15.6.7.8 节，“条件处理和 OUT 或 INOUT 参数”](conditions-and-parameters.html
    "15.6.7.8 Condition Handling and OUT or INOUT Parameters")。
- en: 'To get back a value from a procedure using an `OUT` or `INOUT` parameter, pass
    the parameter by means of a user variable, and then check the value of the variable
    after the procedure returns. (If you are calling the procedure from within another
    stored procedure or function, you can also pass a routine parameter or local routine
    variable as an `IN` or `INOUT` parameter.) For an `INOUT` parameter, initialize
    its value before passing it to the procedure. The following procedure has an `OUT`
    parameter that the procedure sets to the current server version, and an `INOUT`
    value that the procedure increments by one from its current value:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 `OUT` 或 `INOUT` 参数从过程中获取一个值，需要通过用户变量传递参数，然后在过程返回后检查变量的值。（如果你是从另一个存储过程或函数中调用该过程，也可以将例程参数或本地例程变量作为
    `IN` 或 `INOUT` 参数传递。）对于 `INOUT` 参数，在传递给过程之前初始化其值。以下过程具有一个 `OUT` 参数，该过程将该参数设置为当前服务器版本，并具有一个
    `INOUT` 值，该过程将该值从其当前值增加一：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Before calling the procedure, initialize the variable to be passed as the `INOUT`
    parameter. After calling the procedure, you can see that the values of the two
    variables are set or modified:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用过程之前，初始化要作为 `INOUT` 参数传递的变量。调用过程后，您可以看到这两个变量的值已设置或修改：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In prepared [`CALL`](call.html "15.2.1 CALL Statement") statements used with
    [`PREPARE`](prepare.html "15.5.1 PREPARE Statement") and [`EXECUTE`](execute.html
    "15.5.2 EXECUTE Statement"), placeholders can be used for `IN` parameters, `OUT`,
    and `INOUT` parameters. These types of parameters can be used as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 [`PREPARE`](prepare.html "15.5.1 PREPARE Statement") 和 [`EXECUTE`](execute.html
    "15.5.2 EXECUTE Statement") 语句准备的语句中，可以使用占位符来表示 `IN` 参数、`OUT` 参数和 `INOUT` 参数。这些类型的参数可以如下使用：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To write C programs that use the [`CALL`](call.html "15.2.1 CALL Statement")
    SQL statement to execute stored procedures that produce result sets, the `CLIENT_MULTI_RESULTS`
    flag must be enabled. This is because each [`CALL`](call.html "15.2.1 CALL Statement")
    returns a result to indicate the call status, in addition to any result sets that
    might be returned by statements executed within the procedure. `CLIENT_MULTI_RESULTS`
    must also be enabled if [`CALL`](call.html "15.2.1 CALL Statement") is used to
    execute any stored procedure that contains prepared statements. It cannot be determined
    when such a procedure is loaded whether those statements produce result sets,
    so it is necessary to assume that they do so.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写使用[`CALL`](call.html "15.2.1 CALL Statement") SQL语句执行生成结果集的存储过程的C程序，必须启用`CLIENT_MULTI_RESULTS`标志。这是因为每个[`CALL`](call.html
    "15.2.1 CALL Statement")都会返回一个结果来指示调用状态，除了存储过程内执行的可能返回的任何结果集。如果使用[`CALL`](call.html
    "15.2.1 CALL Statement")执行包含准备语句的任何存储过程，也必须启用`CLIENT_MULTI_RESULTS`。无法确定加载此类存储过程时这些语句是否生成结果集，因此必须假定它们会生成结果集。
- en: '`CLIENT_MULTI_RESULTS` can be enabled when you call [`mysql_real_connect()`](/doc/c-api/8.0/en/mysql-real-connect.html),
    either explicitly by passing the `CLIENT_MULTI_RESULTS` flag itself, or implicitly
    by passing `CLIENT_MULTI_STATEMENTS` (which also enables `CLIENT_MULTI_RESULTS`).
    `CLIENT_MULTI_RESULTS` is enabled by default.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用[`mysql_real_connect()`](/doc/c-api/8.0/en/mysql-real-connect.html)时，可以通过显式传递`CLIENT_MULTI_RESULTS`标志或隐式传递`CLIENT_MULTI_STATEMENTS`（也会启用`CLIENT_MULTI_RESULTS`）来启用`CLIENT_MULTI_RESULTS`。`CLIENT_MULTI_RESULTS`默认情况下是启用的。
- en: To process the result of a [`CALL`](call.html "15.2.1 CALL Statement") statement
    executed using [`mysql_query()`](/doc/c-api/8.0/en/mysql-query.html) or [`mysql_real_query()`](/doc/c-api/8.0/en/mysql-real-query.html),
    use a loop that calls [`mysql_next_result()`](/doc/c-api/8.0/en/mysql-next-result.html)
    to determine whether there are more results. For an example, see [Multiple Statement
    Execution Support](/doc/c-api/8.0/en/c-api-multiple-queries.html).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理使用[`mysql_query()`](/doc/c-api/8.0/en/mysql-query.html)或[`mysql_real_query()`](/doc/c-api/8.0/en/mysql-real-query.html)执行的[`CALL`](call.html
    "15.2.1 CALL Statement")语句的结果，请使用调用[`mysql_next_result()`](/doc/c-api/8.0/en/mysql-next-result.html)的循环来确定是否还有更多结果。有关示例，请参见[多语句执行支持](/doc/c-api/8.0/en/c-api-multiple-queries.html)。
- en: C programs can use the prepared-statement interface to execute [`CALL`](call.html
    "15.2.1 CALL Statement") statements and access `OUT` and `INOUT` parameters. This
    is done by processing the result of a [`CALL`](call.html "15.2.1 CALL Statement")
    statement using a loop that calls [`mysql_stmt_next_result()`](/doc/c-api/8.0/en/mysql-stmt-next-result.html)
    to determine whether there are more results. For an example, see [Prepared CALL
    Statement Support](/doc/c-api/8.0/en/c-api-prepared-call-statements.html). Languages
    that provide a MySQL interface can use prepared [`CALL`](call.html "15.2.1 CALL
    Statement") statements to directly retrieve `OUT` and `INOUT` procedure parameters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: C程序可以使用准备语句接口来执行[`CALL`](call.html "15.2.1 CALL Statement")语句并访问`OUT`和`INOUT`参数。这是通过处理[`CALL`](call.html
    "15.2.1 CALL Statement")语句的结果，使用调用[`mysql_stmt_next_result()`](/doc/c-api/8.0/en/mysql-stmt-next-result.html)的循环来确定是否还有更多结果。有关示例，请参见[准备
    CALL 语句支持](/doc/c-api/8.0/en/c-api-prepared-call-statements.html)。提供MySQL接口的语言可以使用准备的[`CALL`](call.html
    "15.2.1 CALL Statement")语句直接检索`OUT`和`INOUT`过程参数。
- en: Metadata changes to objects referred to by stored programs are detected and
    cause automatic reparsing of the affected statements when the program is next
    executed. For more information, see [Section 10.10.3, “Caching of Prepared Statements
    and Stored Programs”](statement-caching.html "10.10.3 Caching of Prepared Statements
    and Stored Programs").
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当存储程序引用的对象的元数据发生更改时，会检测到并在下次执行程序时自动重新解析受影响的语句。有关更多信息，请参见[第10.10.3节，“准备语句和存储程序的缓存”](statement-caching.html
    "10.10.3 Caching of Prepared Statements and Stored Programs")。
