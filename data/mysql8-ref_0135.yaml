- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/multiple-tables.html](https://dev.mysql.com/doc/refman/8.0/en/multiple-tables.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/multiple-tables.html](https://dev.mysql.com/doc/refman/8.0/en/multiple-tables.html)
- en: 5.3.4.9 Using More Than one Table
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5.3.4.9 使用多个表
- en: 'The `pet` table keeps track of which pets you have. If you want to record other
    information about them, such as events in their lives like visits to the vet or
    when litters are born, you need another table. What should this table look like?
    It needs to contain the following information:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`pet`表记录了你拥有的宠物。如果你想记录关于它们的其他信息，比如它们生活中的事件，比如去兽医那里或者生产幼崽的时间，你需要另一个表。这个表应该是什么样子？它需要包含以下信息：'
- en: The pet name so that you know which animal each event pertains to.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宠物名称，以便你知道每个事件涉及哪个动物。
- en: A date so that you know when the event occurred.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个日期，以便你知道事件发生的时间。
- en: A field to describe the event.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个描述事件的字段。
- en: An event type field, if you want to be able to categorize events.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个事件类型字段，如果你想对事件进行分类。
- en: 'Given these considerations, the [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") statement for the `event` table might look like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这些考虑，`event`表的[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句可能如下所示：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As with the `pet` table, it is easiest to load the initial records by creating
    a tab-delimited text file containing the following information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与`pet`表一样，最简单的方法是通过创建一个包含以下信息的制表符分隔文本文件来加载初始记录。
- en: '| name | date | type | remark |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 日期 | 类型 | 备注 |'
- en: '| Fluffy | 1995-05-15 | litter | 4 kittens, 3 female, 1 male |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 绒绒 | 1995-05-15 | 分娩 | 4 只小猫，3 只雌性，1 只雄性 |'
- en: '| Buffy | 1993-06-23 | litter | 5 puppies, 2 female, 3 male |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 巴菲 | 1993-06-23 | 分娩 | 5 只小狗，2 只雌性，3 只雄性 |'
- en: '| Buffy | 1994-06-19 | litter | 3 puppies, 3 female |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 巴菲 | 1994-06-19 | 分娩 | 3 只小狗，3 只雌性 |'
- en: '| Chirpy | 1999-03-21 | vet | needed beak straightened |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 啁啾 | 1999-03-21 | 兽医 | 需要修直喙 |'
- en: '| Slim | 1997-08-03 | vet | broken rib |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 苗条 | 1997-08-03 | 兽医 | 肋骨骨折 |'
- en: '| Bowser | 1991-10-12 | kennel |  |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 鲍泽 | 1991-10-12 | 狗舍 |  |'
- en: '| Fang | 1991-10-12 | kennel |  |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 方格 | 1991-10-12 | 狗舍 |  |'
- en: '| Fang | 1998-08-28 | birthday | Gave him a new chew toy |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 方格 | 1998-08-28 | 生日 | 给了他一个新的咬咬玩具 |'
- en: '| Claws | 1998-03-17 | birthday | Gave him a new flea collar |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 爪子 | 1998-03-17 | 生日 | 给了他一个新的跳蚤项圈 |'
- en: '| Whistler | 1998-12-09 | birthday | First birthday |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 威斯勒 | 1998-12-09 | 生日 | 第一个生日 |'
- en: '| name | date | type | remark |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 日期 | 类型 | 备注 |'
- en: 'Load the records like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 加载记录如下：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Based on what you have learned from the queries that you have run on the `pet`
    table, you should be able to perform retrievals on the records in the `event`
    table; the principles are the same. But when is the `event` table by itself insufficient
    to answer questions you might ask?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你在`pet`表上运行的查询所学到的知识，你应该能够在`event`表中执行检索；原则是相同的。但是`event`表本身何时不足以回答你可能提出的问题？
- en: 'Suppose that you want to find out the ages at which each pet had its litters.
    We saw earlier how to calculate ages from two dates. The litter date of the mother
    is in the `event` table, but to calculate her age on that date you need her birth
    date, which is stored in the `pet` table. This means the query requires both tables:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想找出每只宠物产下幼崽时的年龄。我们之前看到如何从两个日期计算年龄。母亲的产仔日期在`event`表中，但要计算她在那天的年龄，你需要她的出生日期，这个日期存储在`pet`表中。这意味着查询需要两个表：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are several things to note about this query:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个查询有几点需要注意：
- en: The `FROM` clause joins two tables because the query needs to pull information
    from both of them.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM`子句连接了两个表，因为查询需要从两个表中提取信息。'
- en: When combining (joining) information from multiple tables, you need to specify
    how records in one table can be matched to records in the other. This is easy
    because they both have a `name` column. The query uses an `ON` clause to match
    up records in the two tables based on the `name` values.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当从多个表中合并（连接）信息时，你需要指定如何将一个表中的记录与另一个表中的记录匹配。这很容易，因为它们都有一个`name`列。查询使用`ON`子句根据`name`值匹配两个表中的记录。
- en: The query uses an `INNER JOIN` to combine the tables. An `INNER JOIN` permits
    rows from either table to appear in the result if and only if both tables meet
    the conditions specified in the `ON` clause. In this example, the `ON` clause
    specifies that the `name` column in the `pet` table must match the `name` column
    in the `event` table. If a name appears in one table but not the other, the row
    does not appear in the result because the condition in the `ON` clause fails.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询使用`INNER JOIN`来合并这两个表。`INNER JOIN`允许只有当两个表都满足`ON`子句中指定的条件时，才能在结果中出现来自任一表的行。在这个例子中，`ON`子句指定`pet`表中的`name`列必须与`event`表中的`name`列匹配。如果一个名字出现在一个表中而在另一个表中没有出现，那么该行不会出现在结果中，因为`ON`子句中的条件不满足。
- en: Because the `name` column occurs in both tables, you must be specific about
    which table you mean when referring to the column. This is done by prepending
    the table name to the column name.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为`name`列在两个表中都存在，所以在引用该列时必须明确指定是指哪个表。这可以通过在列名前加上表名来实现。
- en: 'You need not have two different tables to perform a join. Sometimes it is useful
    to join a table to itself, if you want to compare records in a table to other
    records in that same table. For example, to find breeding pairs among your pets,
    you can join the `pet` table with itself to produce candidate pairs of live males
    and females of like species:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 执行连接操作并不一定需要两个不同的表。有时，如果要比较表中的记录与该表中的其他记录，则将表与自身连接是有用的。例如，要找出你的宠物中的配对，你可以将`pet`表与自身连接，以生成相同物种的活体雄性和雌性的候选配对：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this query, we specify aliases for the table name to refer to the columns
    and keep straight which instance of the table each column reference is associated
    with.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个查询中，我们为表名指定别名，以便引用列并清楚地知道每个列引用与哪个表实例相关联。
