- en: 27.2.1 Stored Routine Syntax
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 27.2.1 存储过程语法
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/stored-routines-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/stored-routines-syntax.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/stored-routines-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/stored-routines-syntax.html)
- en: A stored routine is either a procedure or a function. Stored routines are created
    with the [`CREATE PROCEDURE`](create-procedure.html "15.1.17 CREATE PROCEDURE
    and CREATE FUNCTION Statements") and [`CREATE FUNCTION`](create-function.html
    "15.1.14 CREATE FUNCTION Statement") statements (see [Section 15.1.17, “CREATE
    PROCEDURE and CREATE FUNCTION Statements”](create-procedure.html "15.1.17 CREATE
    PROCEDURE and CREATE FUNCTION Statements")). A procedure is invoked using a [`CALL`](call.html
    "15.2.1 CALL Statement") statement (see [Section 15.2.1, “CALL Statement”](call.html
    "15.2.1 CALL Statement")), and can only pass back values using output variables.
    A function can be called from inside a statement just like any other function
    (that is, by invoking the function's name), and can return a scalar value. The
    body of a stored routine can use compound statements (see [Section 15.6, “Compound
    Statement Syntax”](sql-compound-statements.html "15.6 Compound Statement Syntax")).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程可以是过程或函数。存储过程是使用[`CREATE PROCEDURE`](create-procedure.html "15.1.17 CREATE
    PROCEDURE and CREATE FUNCTION Statements")和[`CREATE FUNCTION`](create-function.html
    "15.1.14 CREATE FUNCTION Statement")语句创建的（参见[Section 15.1.17, “CREATE PROCEDURE
    and CREATE FUNCTION Statements”](create-procedure.html "15.1.17 CREATE PROCEDURE
    and CREATE FUNCTION Statements")）。通过[`CALL`](call.html "15.2.1 CALL Statement")语句调用过程（参见[Section 15.2.1,
    “CALL Statement”](call.html "15.2.1 CALL Statement")），只能使用输出变量传回值。函数可以像其他函数一样从语句内部调用（即通过调用函数的名称），并且可以返回一个标量值。存储过程的主体可以使用复合语句（参见[Section 15.6,
    “Compound Statement Syntax”](sql-compound-statements.html "15.6 Compound Statement
    Syntax")）。
- en: Stored routines can be dropped with the [`DROP PROCEDURE`](drop-procedure.html
    "15.1.29 DROP PROCEDURE and DROP FUNCTION Statements") and [`DROP FUNCTION`](drop-function.html
    "15.1.26 DROP FUNCTION Statement") statements (see [Section 15.1.29, “DROP PROCEDURE
    and DROP FUNCTION Statements”](drop-procedure.html "15.1.29 DROP PROCEDURE and
    DROP FUNCTION Statements")), and altered with the [`ALTER PROCEDURE`](alter-procedure.html
    "15.1.7 ALTER PROCEDURE Statement") and [`ALTER FUNCTION`](alter-function.html
    "15.1.4 ALTER FUNCTION Statement") statements (see [Section 15.1.7, “ALTER PROCEDURE
    Statement”](alter-procedure.html "15.1.7 ALTER PROCEDURE Statement")).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程可以使用[`DROP PROCEDURE`](drop-procedure.html "15.1.29 DROP PROCEDURE and DROP
    FUNCTION Statements")和[`DROP FUNCTION`](drop-function.html "15.1.26 DROP FUNCTION
    Statement")语句删除（参见[Section 15.1.29, “DROP PROCEDURE and DROP FUNCTION Statements”](drop-procedure.html
    "15.1.29 DROP PROCEDURE and DROP FUNCTION Statements")），并且可以使用[`ALTER PROCEDURE`](alter-procedure.html
    "15.1.7 ALTER PROCEDURE Statement")和[`ALTER FUNCTION`](alter-function.html "15.1.4 ALTER
    FUNCTION Statement")语句进行修改（参见[Section 15.1.7, “ALTER PROCEDURE Statement”](alter-procedure.html
    "15.1.7 ALTER PROCEDURE Statement")）。
- en: 'A stored procedure or function is associated with a particular database. This
    has several implications:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程或函数与特定数据库相关联。这有几个含义：
- en: When the routine is invoked, an implicit `USE *`db_name`*` is performed (and
    undone when the routine terminates). [`USE`](use.html "15.8.4 USE Statement")
    statements within stored routines are not permitted.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当调用例程时，会执行隐式的`USE *`db_name`*`（在例程终止时撤消）。存储过程内部不允许使用[`USE`](use.html "15.8.4 USE
    Statement")语句。
- en: You can qualify routine names with the database name. This can be used to refer
    to a routine that is not in the current database. For example, to invoke a stored
    procedure `p` or function `f` that is associated with the `test` database, you
    can say `CALL test.p()` or `test.f()`.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用数据库名称限定例程名称。这可用于引用不在当前数据库中的例程。例如，要调用与`test`数据库关联的存储过程`p`或函数`f`，可以使用`CALL
    test.p()`或`test.f()`。
- en: When a database is dropped, all stored routines associated with it are dropped
    as well.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个数据库被删除时，与之相关的所有存储过程也会被删除。
- en: Stored functions cannot be recursive.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 存储函数不能是递归的。
- en: Recursion in stored procedures is permitted but disabled by default. To enable
    recursion, set the [`max_sp_recursion_depth`](server-system-variables.html#sysvar_max_sp_recursion_depth)
    server system variable to a value greater than zero. Stored procedure recursion
    increases the demand on thread stack space. If you increase the value of [`max_sp_recursion_depth`](server-system-variables.html#sysvar_max_sp_recursion_depth),
    it may be necessary to increase thread stack size by increasing the value of [`thread_stack`](server-system-variables.html#sysvar_thread_stack)
    at server startup. See [Section 7.1.8, “Server System Variables”](server-system-variables.html
    "7.1.8 Server System Variables"), for more information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 存储过程中允许递归，但默认情况下被禁用。要启用递归，请将[`max_sp_recursion_depth`](server-system-variables.html#sysvar_max_sp_recursion_depth)服务器系统变量设置为大于零的值。存储过程递归会增加线程堆栈空间的需求。如果增加[`max_sp_recursion_depth`](server-system-variables.html#sysvar_max_sp_recursion_depth)的值，可能需要通过增加服务器启动时[`thread_stack`](server-system-variables.html#sysvar_thread_stack)的值来增加线程堆栈大小。有关更多信息，请参见[第7.1.8节，“服务器系统变量”](server-system-variables.html
    "7.1.8 服务器系统变量")。
- en: MySQL supports a very useful extension that enables the use of regular [`SELECT`](select.html
    "15.2.13 SELECT Statement") statements (that is, without using cursors or local
    variables) inside a stored procedure. The result set of such a query is simply
    sent directly to the client. Multiple [`SELECT`](select.html "15.2.13 SELECT Statement")
    statements generate multiple result sets, so the client must use a MySQL client
    library that supports multiple result sets. This means the client must use a client
    library from a version of MySQL at least as recent as 4.1\. The client should
    also specify the `CLIENT_MULTI_RESULTS` option when it connects. For C programs,
    this can be done with the [`mysql_real_connect()`](/doc/c-api/8.0/en/mysql-real-connect.html)
    C API function. See [mysql_real_connect()](/doc/c-api/8.0/en/mysql-real-connect.html),
    and [Multiple Statement Execution Support](/doc/c-api/8.0/en/c-api-multiple-queries.html).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL支持一个非常有用的扩展，允许在存储过程中使用常规的[`SELECT`](select.html "15.2.13 SELECT语句")语句（即，不使用游标或本地变量）。这种查询的结果集直接发送到客户端。多个[`SELECT`](select.html
    "15.2.13 SELECT语句")语句会生成多个结果集，因此客户端必须使用支持多个结果集的MySQL客户端库。这意味着客户端必须使用至少与MySQL 4.1版本一样新的客户端库。客户端在连接时还应指定`CLIENT_MULTI_RESULTS`选项。对于C程序，可以使用[`mysql_real_connect()`](/doc/c-api/8.0/en/mysql-real-connect.html)
    C API函数来实现。请参见[mysql_real_connect()](/doc/c-api/8.0/en/mysql-real-connect.html)，以及[多语句执行支持](/doc/c-api/8.0/en/c-api-multiple-queries.html)。
- en: In MySQL 8.0.22 and later, a user variable referenced by a statement in a stored
    procedure has its type determined the first time the procedure is invoked, and
    retains this type each time the procedure is invoked thereafter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.22及更高版本中，存储过程中的语句引用的用户变量在存储过程首次调用时确定其类型，并在此后的每次调用存储过程时保留此类型。
