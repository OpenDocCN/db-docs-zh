- en: 17.20.1 Benefits of the InnoDB memcached Plugin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.20.1 InnoDB memcached插件的优势
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-benefits.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-benefits.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-benefits.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-benefits.html)
- en: This section outlines advantages the `daemon_memcached` plugin. The combination
    of `InnoDB` tables and **memcached** offers advantages over using either by themselves.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节概述了`daemon_memcached`插件的优势。`InnoDB`表和**memcached**的结合优于单独使用任一项。
- en: Direct access to the `InnoDB` storage engine avoids the parsing and planning
    overhead of SQL.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接访问`InnoDB`存储引擎可以避免SQL的解析和规划开销。
- en: Running **memcached** in the same process space as the MySQL server avoids the
    network overhead of passing requests back and forth.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**memcached**与MySQL服务器在同一进程空间中运行，避免了来回传递请求的网络开销。
- en: Data written using the **memcached** protocol is transparently written to an
    `InnoDB` table, without going through the MySQL SQL layer. You can control frequency
    of writes to achieve higher raw performance when updating non-critical data.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**memcached**协议写入的数据会透明地写入到`InnoDB`表中，而不经过MySQL SQL层。您可以控制写入的频率，以实现在更新非关键数据时获得更高的原始性能。
- en: Data requested through the **memcached** protocol is transparently queried from
    an `InnoDB` table, without going through the MySQL SQL layer.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**memcached**协议请求的数据会透明地从`InnoDB`表中查询，而不经过MySQL SQL层。
- en: Subsequent requests for the same data is served from the `InnoDB` buffer pool.
    The buffer pool handles the in-memory caching. You can tune performance of data-intensive
    operations using `InnoDB` configuration options.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对相同数据的后续请求是从`InnoDB`缓冲池中提供的。缓冲池处理内存中的缓存。您可以使用`InnoDB`配置选项调整数据密集型操作的性能。
- en: Data can be unstructured or structured, depending on the type of application.
    You can create a new table for data, or use existing tables.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据可以是非结构化或结构化的，取决于应用程序的类型。您可以为数据创建新表，或使用现有表。
- en: '`InnoDB` can handle composing and decomposing multiple column values into a
    single **memcached** item value, reducing the amount of string parsing and concatenation
    required in your application. For example, you can store the string value `2|4|6|8`
    in the **memcached** cache, and have `InnoDB` split the value based on a separator
    character, then store the result in four numeric columns.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`可以处理将多列值组合和分解为单个**memcached**项值，从而减少应用程序中所需的字符串解析和连接数量。例如，您可以将字符串值`2|4|6|8`存储在**memcached**缓存中，并让`InnoDB`根据分隔符字符拆分值，然后将结果存储在四个数值列中。'
- en: The transfer between memory and disk is handled automatically, simplifying application
    logic.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存和磁盘之间的传输是自动处理的，简化了应用程序逻辑。
- en: Data is stored in a MySQL database to protect against crashes, outages, and
    corruption.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据存储在MySQL数据库中，以防止崩溃、宕机和损坏。
- en: You can access the underlying `InnoDB` table through SQL for reporting, analysis,
    ad hoc queries, bulk loading, multi-step transactional computations, set operations
    such as union and intersection, and other operations suited to the expressiveness
    and flexibility of SQL.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过SQL访问底层的`InnoDB`表进行报告、分析、临时查询、批量加载、多步事务计算、集合操作（如并集和交集）以及其他适合SQL表达力和灵活性的操作。
- en: You can ensure high availability by using the `daemon_memcached` plugin on a
    source server in combination with MySQL replication.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在源服务器上结合使用`daemon_memcached`插件和MySQL复制，可以确保高可用性。
- en: The integration of **memcached** with MySQL provides a way to make in-memory
    data persistent, so you can use it for more significant kinds of data. You can
    use more `add`, `incr`, and similar write operations in your application without
    concern that data could be lost. You can stop and start the **memcached** server
    without losing updates made to cached data. To guard against unexpected outages,
    you can take advantage of `InnoDB` crash recovery, replication, and backup capabilities.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**memcached**与MySQL的集成提供了一种使内存中数据持久化的方式，因此您可以将其用于更重要的数据。您可以在应用程序中使用更多的`add`、`incr`和类似的写操作，而不必担心数据丢失。您可以在不丢失缓存数据更新的情况下停止和启动**memcached**服务器。为防止意外宕机，您可以利用`InnoDB`的崩溃恢复、复制和备份功能。'
- en: The way `InnoDB` does fast [primary key](glossary.html#glos_primary_key "primary
    key") lookups is a natural fit for **memcached** single-item queries. The direct,
    low-level database access path used by the `daemon_memcached` plugin is much more
    efficient for key-value lookups than equivalent SQL queries.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`快速进行[主键](glossary.html#glos_primary_key "primary key")查找的方式非常适合**memcached**的单项查询。`daemon_memcached`插件使用的直接、低级别的数据库访问路径对于键-值查找比等效的SQL查询更有效率。'
- en: The serialization features of **memcached**, which can turn complex data structures,
    binary files, or even code blocks into storable strings, offer a simple way to
    get such objects into a database.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**memcached**的序列化功能可以将复杂数据结构、二进制文件甚至代码块转换为可存储的字符串，为将这些对象存入数据库提供了简单的方法。'
- en: Because you can access the underlying data through SQL, you can produce reports,
    search or update across multiple keys, and call functions such as `AVG()` and
    `MAX()` on **memcached** data. All of these operations are expensive or complicated
    using **memcached** by itself.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为您可以通过SQL访问底层数据，所以可以生成报告、跨多个键进行搜索或更新，并在**memcached**数据上调用诸如`AVG()`和`MAX()`之类的函数。所有这些操作在仅使用**memcached**时都是昂贵或复杂的。
- en: You do not need to manually load data into **memcached** at startup. As particular
    keys are requested by an application, values are retrieved from the database automatically,
    and cached in memory using the `InnoDB` [buffer pool](glossary.html#glos_buffer_pool
    "buffer pool").
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不需要在启动时手动加载数据到**memcached**中。当应用程序请求特定键时，值会自动从数据库中检索，并使用`InnoDB` [缓冲池](glossary.html#glos_buffer_pool
    "buffer pool")在内存中缓存。
- en: Because **memcached** consumes relatively little CPU, and its memory footprint
    is easy to control, it can run comfortably alongside a MySQL instance on the same
    system.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为**memcached**消耗的CPU相对较少，其内存占用量易于控制，所以它可以轻松地与同一系统上的MySQL实例一起运行。
- en: Because data consistency is enforced by mechanisms used for regular `InnoDB`
    tables, you do not have to worry about stale **memcached** data or fallback logic
    to query the database in the case of a missing key.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为数据一致性是由用于常规`InnoDB`表的机制强制执行的，所以您不必担心过时的**memcached**数据或在缺少键的情况下查询数据库的回退逻辑。
