- en: 17.3 InnoDB Multi-Versioning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.3 InnoDB 多版本
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html)
- en: '`InnoDB` is a multi-version storage engine. It keeps information about old
    versions of changed rows to support transactional features such as concurrency
    and rollback. This information is stored in undo tablespaces in a data structure
    called a rollback segment. See [Section 17.6.3.4, “Undo Tablespaces”](innodb-undo-tablespaces.html
    "17.6.3.4 Undo Tablespaces"). `InnoDB` uses the information in the rollback segment
    to perform the undo operations needed in a transaction rollback. It also uses
    the information to build earlier versions of a row for a consistent read. See
    [Section 17.7.2.3, “Consistent Nonlocking Reads”](innodb-consistent-read.html
    "17.7.2.3 Consistent Nonlocking Reads").'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`是一个多版本存储引擎。它保留有关已更改行的旧版本的信息，以支持事务功能，如并发和回滚。此信息存储在称为回滚段的数据结构中的撤销表空间中。请参见[第
    17.6.3.4 节，“撤销表空间”](innodb-undo-tablespaces.html "17.6.3.4 撤销表空间")。`InnoDB`使用回滚段中的信息执行事务回滚所需的撤销操作。它还使用信息为一致读取构建行的早期版本。请参见[第
    17.7.2.3 节，“一致非锁定读取”](innodb-consistent-read.html "17.7.2.3 一致非锁定读取")。'
- en: 'Internally, `InnoDB` adds three fields to each row stored in the database:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，`InnoDB`为存储在数据库中的每一行添加了三个字段：
- en: A 6-byte `DB_TRX_ID` field indicates the transaction identifier for the last
    transaction that inserted or updated the row. Also, a deletion is treated internally
    as an update where a special bit in the row is set to mark it as deleted.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 6 字节的`DB_TRX_ID`字段表示最后一次插入或更新行的事务标识符。此外，删除在内部被视为将一个特殊位设置为标记删除的更新。
- en: A 7-byte `DB_ROLL_PTR` field called the roll pointer. The roll pointer points
    to an undo log record written to the rollback segment. If the row was updated,
    the undo log record contains the information necessary to rebuild the content
    of the row before it was updated.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为 roll pointer 的 7 字节的`DB_ROLL_PTR`字段。roll pointer 指向写入回滚段的撤销日志记录。如果行已更新，则撤销日志记录包含重建行内容所需的信息，使其恢复到更新之前的状态。
- en: A 6-byte `DB_ROW_ID` field contains a row ID that increases monotonically as
    new rows are inserted. If `InnoDB` generates a clustered index automatically,
    the index contains row ID values. Otherwise, the `DB_ROW_ID` column does not appear
    in any index.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 6 字节的`DB_ROW_ID`字段包含一个行 ID，随着插入新行而单调递增。如果`InnoDB`自动生成聚簇索引，则索引包含行 ID 值。否则，`DB_ROW_ID`列不会出现在任何索引中。
- en: Undo logs in the rollback segment are divided into insert and update undo logs.
    Insert undo logs are needed only in transaction rollback and can be discarded
    as soon as the transaction commits. Update undo logs are used also in consistent
    reads, but they can be discarded only after there is no transaction present for
    which `InnoDB` has assigned a snapshot that in a consistent read could require
    the information in the update undo log to build an earlier version of a database
    row. For additional information about undo logs, see [Section 17.6.6, “Undo Logs”](innodb-undo-logs.html
    "17.6.6 Undo Logs").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚段中的撤销日志分为插入和更新撤销日志。插入撤销日志仅在事务回滚中需要，并且可以在事务提交后立即丢弃。更新撤销日志也用于一致读取，但只有在没有事务存在时才能丢弃，对于这些事务，`InnoDB`已分配了一个快照，一致读取可能需要更新撤销日志中的信息来构建数据库行的早期版本。有关撤销日志的其他信息，请参见[第
    17.6.6 节，“撤销日志”](innodb-undo-logs.html "17.6.6 撤销日志")。
- en: It is recommend that you commit transactions regularly, including transactions
    that issue only consistent reads. Otherwise, `InnoDB` cannot discard data from
    the update undo logs, and the rollback segment may grow too big, filling up the
    undo tablespace in which it resides. For information about managing undo tablespaces,
    see [Section 17.6.3.4, “Undo Tablespaces”](innodb-undo-tablespaces.html "17.6.3.4 Undo
    Tablespaces").
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您定期提交事务，包括仅发出一致读取的事务。否则，`InnoDB`无法从更新撤销日志中丢弃数据，回滚段可能会变得过大，填满其所在的撤销表空间。有关管理撤销表空间的信息，请参见[第
    17.6.3.4 节，“撤销表空间”](innodb-undo-tablespaces.html "17.6.3.4 撤销表空间")。
- en: The physical size of an undo log record in the rollback segment is typically
    smaller than the corresponding inserted or updated row. You can use this information
    to calculate the space needed for your rollback segment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚段中撤销日志记录的物理大小通常小于相应的插入或更新行。您可以使用此信息来计算回滚段所需的空间。
- en: In the `InnoDB` multi-versioning scheme, a row is not physically removed from
    the database immediately when you delete it with an SQL statement. `InnoDB` only
    physically removes the corresponding row and its index records when it discards
    the update undo log record written for the deletion. This removal operation is
    called a purge, and it is quite fast, usually taking the same order of time as
    the SQL statement that did the deletion.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InnoDB`多版本方案中，当使用SQL语句删除行时，行不会立即从数据库中物理删除。只有当`InnoDB`丢弃为删除编写的更新撤销日志记录时，才会物理删除相应的行和其索引记录。这个删除操作称为清理，通常非常快，通常与执行删除操作的SQL语句花费的时间相同。
- en: If you insert and delete rows in smallish batches at about the same rate in
    the table, the purge thread can start to lag behind and the table can grow bigger
    and bigger because of all the “dead” rows, making everything disk-bound and very
    slow. In such cases, throttle new row operations, and allocate more resources
    to the purge thread by tuning the [`innodb_max_purge_lag`](innodb-parameters.html#sysvar_innodb_max_purge_lag)
    system variable. For more information, see [Section 17.8.9, “Purge Configuration”](innodb-purge-configuration.html
    "17.8.9 Purge Configuration").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在表中以大致相同的速率批量插入和删除行，清理线程可能会开始滞后，表会因为所有“死”行而变得越来越大，使得所有操作都受限于磁盘，非常缓慢。在这种情况下，限制新行操作的速度，并通过调整[`innodb_max_purge_lag`](innodb-parameters.html#sysvar_innodb_max_purge_lag)系统变量为清理线程分配更多资源。更多信息，请参见[第17.8.9节，“清理配置”](innodb-purge-configuration.html
    "17.8.9 清理配置")。
- en: Multi-Versioning and Secondary Indexes
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多版本和辅助索引
- en: '`InnoDB` multiversion concurrency control (MVCC) treats secondary indexes differently
    than clustered indexes. Records in a clustered index are updated in-place, and
    their hidden system columns point undo log entries from which earlier versions
    of records can be reconstructed. Unlike clustered index records, secondary index
    records do not contain hidden system columns nor are they updated in-place.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` 多版本并发控制（MVCC）对待辅助索引与聚簇索引的方式不同。聚簇索引中的记录会原地更新，并且它们的隐藏系统列指向撤销日志条目，可以从中重建记录的早期版本。与聚簇索引记录不同，辅助索引记录不包含隐藏系统列，也不会原地更新。'
- en: When a secondary index column is updated, old secondary index records are delete-marked,
    new records are inserted, and delete-marked records are eventually purged. When
    a secondary index record is delete-marked or the secondary index page is updated
    by a newer transaction, `InnoDB` looks up the database record in the clustered
    index. In the clustered index, the record's `DB_TRX_ID` is checked, and the correct
    version of the record is retrieved from the undo log if the record was modified
    after the reading transaction was initiated.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当更新辅助索引列时，旧的辅助索引记录会被标记为删除，新记录会被插入，而标记为删除的记录最终会被清除。当辅助索引记录被标记为删除或辅助索引页被新事务更新时，`InnoDB`会在聚簇索引中查找数据库记录。在聚簇索引中，记录的`DB_TRX_ID`会被检查，如果记录在读取事务启动后被修改，则从撤销日志中检索记录的正确版本。
- en: If a secondary index record is marked for deletion or the secondary index page
    is updated by a newer transaction, the [covering index](glossary.html#glos_covering_index
    "covering index") technique is not used. Instead of returning values from the
    index structure, `InnoDB` looks up the record in the clustered index.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果辅助索引记录被标记为删除或辅助索引页被新事务更新，不会使用[覆盖索引](glossary.html#glos_covering_index "覆盖索引")技术。`InnoDB`不会从索引结构返回值，而是在聚簇索引中查找记录。
- en: However, if the [index condition pushdown (ICP)](index-condition-pushdown-optimization.html
    "10.2.1.6 Index Condition Pushdown Optimization") optimization is enabled, and
    parts of the `WHERE` condition can be evaluated using only fields from the index,
    the MySQL server still pushes this part of the `WHERE` condition down to the storage
    engine where it is evaluated using the index. If no matching records are found,
    the clustered index lookup is avoided. If matching records are found, even among
    delete-marked records, `InnoDB` looks up the record in the clustered index.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果启用了[index condition pushdown (ICP)](index-condition-pushdown-optimization.html
    "10.2.1.6 索引条件推送优化")优化，并且`WHERE`条件的部分可以仅使用索引字段进行评估，MySQL服务器仍然会将`WHERE`条件的这部分推送到存储引擎，在那里使用索引进行评估。如果找不到匹配的记录，则避免聚簇索引查找。如果找到匹配的记录，即使在标记为删除的记录中，`InnoDB`也会在聚簇索引中查找记录。
