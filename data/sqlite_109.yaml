- en: Database Speed Comparison
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库速度比较
- en: 原文：[https://sqlite.com/speed.html](https://sqlite.com/speed.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/speed.html](https://sqlite.com/speed.html)
- en: '**Note: This document is very very old. It describes a speed comparison between
    archaic versions of SQLite, MySQL and PostgreSQL.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：这份文档非常非常古老。它描述了SQLite、MySQL和PostgreSQL的过时版本的速度比较。**'
- en: The numbers here have become meaningless. This page has been retained only as
    an historical artifact.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的数据已经变得毫无意义。此页面仅作为历史文献保留。
- en: Executive Summary
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行摘要
- en: 'A series of tests were run to measure the relative performance of SQLite 2.7.6,
    PostgreSQL 7.1.3, and MySQL 3.23.41. The following are general conclusions drawn
    from these experiments:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 进行了一系列测试，以衡量SQLite 2.7.6、PostgreSQL 7.1.3和MySQL 3.23.41的相对性能。以下是从这些实验中得出的一般结论：
- en: SQLite 2.7.6 is significantly faster (sometimes as much as 10 or 20 times faster)
    than the default PostgreSQL 7.1.3 installation on RedHat 7.2 for most common operations.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite 2.7.6 在大多数常见操作中显著快速（有时快10到20倍），比RedHat 7.2上默认的PostgreSQL 7.1.3安装要快。
- en: SQLite 2.7.6 is often faster (sometimes more than twice as fast) than MySQL
    3.23.41 for most common operations.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于大多数常见操作，SQLite 2.7.6通常比MySQL 3.23.41快（有时快两倍以上）。
- en: SQLite does not execute CREATE INDEX or DROP TABLE as fast as the other databases.
    But this is not seen as a problem because those are infrequent operations.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite执行CREATE INDEX或DROP TABLE操作的速度不如其他数据库快。但这并不被视为问题，因为这些操作不频繁。
- en: SQLite works best if you group multiple operations together into a single transaction.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果将多个操作组合到单个事务中，SQLite将表现最佳。
- en: 'The results presented here come with the following caveats:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里呈现的结果有以下注意事项：
- en: These tests did not attempt to measure multi-user performance or optimization
    of complex queries involving multiple joins and subqueries.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些测试未尝试测量多用户性能或涉及多个连接和子查询的复杂查询的优化。
- en: These tests are on a relatively small (approximately 14 megabyte) database.
    They do not measure how well the database engines scale to larger problems.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些测试针对一个相对较小的（约14兆字节）数据库进行。它们不衡量数据库引擎在解决更大问题时的扩展能力。
- en: Test Environment
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试环境
- en: The platform used for these tests is a 1.6GHz Athlon with 1GB or memory and
    an IDE disk drive. The operating system is RedHat Linux 7.2 with a stock kernel.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试所使用的平台是一台1.6GHz的Athlon处理器，配备1GB内存和一块IDE硬盘驱动器。操作系统是RedHat Linux 7.2，带有一个原始内核。
- en: The PostgreSQL and MySQL servers used were as delivered by default on RedHat
    7.2\. (PostgreSQL version 7.1.3 and MySQL version 3.23.41.) No effort was made
    to tune these engines. Note in particular the default MySQL configuration on RedHat
    7.2 does not support transactions. Not having to support transactions gives MySQL
    a big speed advantage, but SQLite is still able to hold its own on most tests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的PostgreSQL和MySQL服务器是在RedHat 7.2上默认提供的。（PostgreSQL版本为7.1.3，MySQL版本为3.23.41。）没有对这些引擎进行调优。特别注意，RedHat
    7.2上默认的MySQL配置不支持事务。虽然不支持事务给MySQL带来了较大的速度优势，但SQLite在大多数测试中仍能自己站稳脚跟。
- en: I am told that the default PostgreSQL configuration in RedHat 7.3 is unnecessarily
    conservative (it is designed to work on a machine with 8MB of RAM) and that PostgreSQL
    could be made to run a lot faster with some knowledgeable configuration tuning.
    Matt Sergeant reports that he has tuned his PostgreSQL installation and rerun
    the tests shown below. His results show that PostgreSQL and MySQL run at about
    the same speed. For Matt's results, visit
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我被告知，RedHat 7.3中默认的PostgreSQL配置过于保守（它设计用于在有8MB RAM的机器上运行），PostgreSQL可以通过一些熟练的配置调整来显著提高性能。Matt
    Sergeant报告说他已调整了他的PostgreSQL安装，并重新运行了下面展示的测试。他的结果显示PostgreSQL和MySQL以大约相同的速度运行。有关Matt的结果，请访问
- en: 'Obsolete URL: http://www.sergeant.org/sqlite_vs_pgsync.html'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 废弃的网址：http://www.sergeant.org/sqlite_vs_pgsync.html
- en: SQLite was tested in the same configuration that it appears on the website.
    It was compiled with -O6 optimization and with the -DNDEBUG=1 switch which disables
    the many "assert()" statements in the SQLite code. The -DNDEBUG=1 compiler option
    roughly doubles the speed of SQLite.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite在网站上出现的相同配置下进行了测试。它使用了-O6优化并使用了-DNDEBUG=1开关，该开关禁用了SQLite代码中的许多“assert()”语句。编译器选项-DNDEBUG=1大致会使SQLite的速度提高一倍。
- en: All tests are conducted on an otherwise quiescent machine. A simple Tcl script
    was used to generate and run all the tests. A copy of this Tcl script can be found
    in the SQLite source tree in the file **tools/speedtest.tcl**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试均在一个静止的机器上进行。一个简单的Tcl脚本被用来生成和运行所有的测试。你可以在SQLite源代码树中的文件**tools/speedtest.tcl**中找到这个Tcl脚本的副本。
- en: The times reported on all tests represent wall-clock time in seconds. Two separate
    time values are reported for SQLite. The first value is for SQLite in its default
    configuration with full disk synchronization turned on. With synchronization turned
    on, SQLite executes an **fsync()** system call (or the equivalent) at key points
    to make certain that critical data has actually been written to the disk drive
    surface. Synchronization is necessary to guarantee the integrity of the database
    if the operating system crashes or the computer powers down unexpectedly in the
    middle of a database update. The second time reported for SQLite is when synchronization
    is turned off. With synchronization off, SQLite is sometimes much faster, but
    there is a risk that an operating system crash or an unexpected power failure
    could damage the database. Generally speaking, the synchronous SQLite times are
    for comparison against PostgreSQL (which is also synchronous) and the asynchronous
    SQLite times are for comparison against the asynchronous MySQL engine.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试报告中的时间均表示以秒为单位的挂钟时间。SQLite 报告了两个不同的时间值。第一个值是 SQLite 在默认配置下，打开完整磁盘同步时的表现。打开同步时，SQLite
    在关键点执行**fsync()**系统调用（或等效操作），确保关键数据实际写入磁盘驱动器表面。如果操作系统崩溃或计算机在数据库更新中断时意外关机，同步操作是确保数据库完整性的必要条件。第二个时间值是
    SQLite 在关闭同步时的表现。关闭同步时，SQLite 有时会更快，但存在操作系统崩溃或意外断电可能损坏数据库的风险。一般而言，同步 SQLite 的时间用于与同步的
    PostgreSQL 进行比较，而异步 SQLite 的时间用于与异步 MySQL 引擎进行比较。
- en: 'Test 1: 1000 INSERTs'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'Test 1: 1000 插入操作'
- en: CREATE TABLE t1(a INTEGER, b INTEGER, c VARCHAR(100));
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CREATE TABLE t1(a INTEGER, b INTEGER, c VARCHAR(100));
- en: INSERT INTO t1 VALUES(1,13153,'thirteen thousand one hundred fifty three');
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t1 VALUES(1,13153,'一万三千一百五十三');
- en: INSERT INTO t1 VALUES(2,75560,'seventy five thousand five hundred sixty');
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t1 VALUES(2,75560,'七万五千五百六十');
- en: '*... 995 lines omitted*'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*... 995 行被省略*'
- en: INSERT INTO t1 VALUES(998,66289,'sixty six thousand two hundred eighty nine');
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t1 VALUES(998,66289,'六万六千二百八十九');
- en: INSERT INTO t1 VALUES(999,24322,'twenty four thousand three hundred twenty two');
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t1 VALUES(999,24322,'二万四千三百二十二');
- en: INSERT INTO t1 VALUES(1000,94142,'ninety four thousand one hundred forty two');
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t1 VALUES(1000,94142,'九万四千一百四十二');
- en: '| PostgreSQL: |    4.373 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    4.373 |'
- en: '| MySQL: |    0.114 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    0.114 |'
- en: '| SQLite 2.7.6: |    13.061 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    13.061 |'
- en: '| SQLite 2.7.6 (nosync): |    0.223 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (无同步): |    0.223 |'
- en: Because it does not have a central server to coordinate access, SQLite must
    close and reopen the database file, and thus invalidate its cache, for each transaction.
    In this test, each SQL statement is a separate transaction so the database file
    must be opened and closed and the cache must be flushed 1000 times. In spite of
    this, the asynchronous version of SQLite is still nearly as fast as MySQL. Notice
    how much slower the synchronous version is, however. SQLite calls **fsync()**
    after each synchronous transaction to make sure that all data is safely on the
    disk surface before continuing. For most of the 13 seconds in the synchronous
    test, SQLite was sitting idle waiting on disk I/O to complete.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它没有一个中央服务器来协调访问，所以SQLite必须在每个事务中关闭和重新打开数据库文件，因此使其缓存失效。在这个测试中，每个SQL语句都是一个单独的事务，所以数据库文件必须被打开和关闭，并且缓存必须被刷新1000次。尽管如此，SQLite的异步版本仍然几乎和MySQL一样快。然而，请注意同步版本有多慢。在同步测试的大部分13秒中，SQLite都是处于等待磁盘I/O完成的空闲状态。
- en: 'Test 2: 25000 INSERTs in a transaction'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试2：在一个事务中插入25000条记录
- en: BEGIN;
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: BEGIN;
- en: CREATE TABLE t2(a INTEGER, b INTEGER, c VARCHAR(100));
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CREATE TABLE t2(a INTEGER, b INTEGER, c VARCHAR(100));
- en: INSERT INTO t2 VALUES(1,59672,'fifty nine thousand six hundred seventy two');
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t2 VALUES(1,59672,'五万九千六百七十二');
- en: '*... 24997 lines omitted*'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*... 24997 lines omitted*'
- en: INSERT INTO t2 VALUES(24999,89569,'eighty nine thousand five hundred sixty nine');
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t2 VALUES(24999,89569,'八万九千五百六十九');
- en: INSERT INTO t2 VALUES(25000,94666,'ninety four thousand six hundred sixty six');
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t2 VALUES(25000,94666,'九万四千六百六十六');
- en: COMMIT;
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: COMMIT;
- en: '| PostgreSQL: |    4.900 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    4.900 |'
- en: '| MySQL: |    2.184 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    2.184 |'
- en: '| SQLite 2.7.6: |    0.914 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    0.914 |'
- en: '| SQLite 2.7.6 (nosync): |    0.757 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    0.757 |'
- en: When all the INSERTs are put in a transaction, SQLite no longer has to close
    and reopen the database or invalidate its cache between each statement. It also
    does not have to do any fsync()s until the very end. When unshackled in this way,
    SQLite is much faster than either PostgreSQL and MySQL.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有的INSERT语句都放在一个事务中时，SQLite不再需要在每个语句之间关闭和重新打开数据库，或者在每个语句之间使缓存失效。它也不必在最后之前执行任何fsync()操作。在这种情况下，SQLite的性能比PostgreSQL和MySQL都要快得多。
- en: 'Test 3: 25000 INSERTs into an indexed table'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试3：向一个带索引的表中插入25000条记录
- en: BEGIN;
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: BEGIN;
- en: CREATE TABLE t3(a INTEGER, b INTEGER, c VARCHAR(100));
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CREATE TABLE t3(a INTEGER, b INTEGER, c VARCHAR(100));
- en: CREATE INDEX i3 ON t3(c);
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CREATE INDEX i3 ON t3(c);
- en: '*... 24998 lines omitted*'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*... 24998 lines omitted*'
- en: INSERT INTO t3 VALUES(24999,88509,'eighty eight thousand five hundred nine');
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t3 VALUES(24999,88509,'八万八千五百零九');
- en: INSERT INTO t3 VALUES(25000,84791,'eighty four thousand seven hundred ninety
    one');
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t3 VALUES(25000,84791,'八万四千七百九十一');
- en: COMMIT;
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: COMMIT;
- en: '| PostgreSQL: |    8.175 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    8.175 |'
- en: '| MySQL: |    3.197 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    3.197 |'
- en: '| SQLite 2.7.6: |    1.555 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    1.555 |'
- en: '| SQLite 2.7.6 (nosync): |    1.402 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    1.402 |'
- en: There were reports that SQLite did not perform as well on an indexed table.
    This test was recently added to disprove those rumors. It is true that SQLite
    is not as fast at creating new index entries as the other engines (see Test 6
    below) but its overall speed is still better.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有报道称SQLite在索引表上的表现不佳。最近增加了这个测试来证明这些谣言是不正确的。确实，SQLite在创建新的索引条目方面不如其他引擎快（见下面的第6个测试），但其总体速度仍然更快。
- en: 'Test 4: 100 SELECTs without an index'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'Test 4: 100个没有索引的SELECT查询'
- en: BEGIN;
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: BEGIN;
- en: SELECT count(*), avg(b) FROM t2 WHERE b>=0 AND b<1000;
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE b>=0 AND b<1000;
- en: SELECT count(*), avg(b) FROM t2 WHERE b>=100 AND b<1100;
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE b>=100 AND b<1100;
- en: '*... 96 lines omitted*'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*... 省略96行*'
- en: SELECT count(*), avg(b) FROM t2 WHERE b>=9800 AND b<10800;
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE b>=9800 AND b<10800;
- en: SELECT count(*), avg(b) FROM t2 WHERE b>=9900 AND b<10900;
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE b>=9900 AND b<10900;
- en: COMMIT;
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: COMMIT;
- en: '| PostgreSQL: |    3.629 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    3.629 |'
- en: '| MySQL: |    2.760 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    2.760 |'
- en: '| SQLite 2.7.6: |    2.494 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    2.494 |'
- en: '| SQLite 2.7.6 (nosync): |    2.526 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    2.526 |'
- en: This test does 100 queries on a 25000 entry table without an index, thus requiring
    a full table scan. Prior versions of SQLite used to be slower than PostgreSQL
    and MySQL on this test, but recent performance enhancements have increased its
    speed so that it is now the fastest of the group.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试在一个25000条目的表上执行100次查询，没有索引，因此需要完整表扫描。SQLite的先前版本在这个测试上比PostgreSQL和MySQL慢，但是最近的性能增强提高了其速度，使其成为这组中最快的。
- en: 'Test 5: 100 SELECTs on a string comparison'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'Test 5: 100个基于字符串比较的SELECT查询'
- en: BEGIN;
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: BEGIN;
- en: SELECT count(*), avg(b) FROM t2 WHERE c LIKE '%one%';
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE c LIKE '%one%';
- en: SELECT count(*), avg(b) FROM t2 WHERE c LIKE '%two%';
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE c LIKE '%two%';
- en: '*... 96 lines omitted*'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*... 省略96行*'
- en: SELECT count(*), avg(b) FROM t2 WHERE c LIKE '%ninety nine%';
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE c LIKE '%ninety nine%';
- en: SELECT count(*), avg(b) FROM t2 WHERE c LIKE '%one hundred%';
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE c LIKE '%one hundred%';
- en: COMMIT;
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: COMMIT;
- en: '| PostgreSQL: |    13.409 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    13.409 |'
- en: '| MySQL: |    4.640 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    4.640 |'
- en: '| SQLite 2.7.6: |    3.362 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    3.362 |'
- en: '| SQLite 2.7.6 (nosync): |    3.372 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    3.372 |'
- en: This test still does 100 full table scans but it uses uses string comparisons
    instead of numerical comparisons. SQLite is over three times faster than PostgreSQL
    here and about 30% faster than MySQL.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试仍然执行100次完整表扫描，但使用字符串比较而不是数值比较。SQLite在这里比PostgreSQL快三倍以上，比MySQL快约30%。
- en: 'Test 6: Creating an index'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'Test 6: 创建索引'
- en: CREATE INDEX i2a ON t2(a);
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CREATE INDEX i2a ON t2(a);
- en: CREATE INDEX i2b ON t2(b);
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CREATE INDEX i2b ON t2(b);
- en: '| PostgreSQL: |    0.381 |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    0.381 |'
- en: '| MySQL: |    0.318 |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    0.318 |'
- en: '| SQLite 2.7.6: |    0.777 |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    0.777 |'
- en: '| SQLite 2.7.6 (nosync): |    0.659 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    0.659 |'
- en: SQLite is slower at creating new indices. This is not a huge problem (since
    new indices are not created very often) but it is something that is being worked
    on. Hopefully, future versions of SQLite will do better here.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite在创建新索引时较慢。这不是一个很大的问题（因为新索引并不经常创建），但正在解决中。希望SQLite的未来版本能在这方面做得更好。
- en: 'Test 7: 5000 SELECTs with an index'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试7：带索引的5000次SELECT查询
- en: SELECT count(*), avg(b) FROM t2 WHERE b>=0 AND b<100;
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE b>=0 AND b<100;
- en: SELECT count(*), avg(b) FROM t2 WHERE b>=100 AND b<200;
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE b>=100 AND b<200;
- en: SELECT count(*), avg(b) FROM t2 WHERE b>=200 AND b<300;
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE b>=200 AND b<300;
- en: '*... 4994 lines omitted*'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*... 4994 lines omitted*'
- en: SELECT count(*), avg(b) FROM t2 WHERE b>=499700 AND b<499800;
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE b>=499700 AND b<499800;
- en: SELECT count(*), avg(b) FROM t2 WHERE b>=499800 AND b<499900;
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE b>=499800 AND b<499900;
- en: SELECT count(*), avg(b) FROM t2 WHERE b>=499900 AND b<500000;
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SELECT count(*), avg(b) FROM t2 WHERE b>=499900 AND b<500000;
- en: '| PostgreSQL: |    4.614 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    4.614 |'
- en: '| MySQL: |    1.270 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    1.270 |'
- en: '| SQLite 2.7.6: |    1.121 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    1.121 |'
- en: '| SQLite 2.7.6 (nosync): |    1.162 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    1.162 |'
- en: All three database engines run faster when they have indices to work with. But
    SQLite is still the fastest.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 三种数据库引擎在有索引时运行速度更快。但是SQLite仍然是最快的。
- en: 'Test 8: 1000 UPDATEs without an index'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试8：不带索引的1000次UPDATE操作
- en: BEGIN;
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: BEGIN;
- en: UPDATE t1 SET b=b*2 WHERE a>=0 AND a<10;
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE t1 SET b=b*2 WHERE a>=0 AND a<10;
- en: UPDATE t1 SET b=b*2 WHERE a>=10 AND a<20;
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE t1 SET b=b*2 WHERE a>=10 AND a<20;
- en: '*... 996 lines omitted*'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*... 996 lines omitted*'
- en: UPDATE t1 SET b=b*2 WHERE a>=9980 AND a<9990;
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE t1 SET b=b*2 WHERE a>=9980 AND a<9990;
- en: UPDATE t1 SET b=b*2 WHERE a>=9990 AND a<10000;
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE t1 SET b=b*2 WHERE a>=9990 AND a<10000;
- en: COMMIT;
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: COMMIT;
- en: '| PostgreSQL: |    1.739 |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    1.739 |'
- en: '| MySQL: |    8.410 |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    8.410 |'
- en: '| SQLite 2.7.6: |    0.637 |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    0.637 |'
- en: '| SQLite 2.7.6 (nosync): |    0.638 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    0.638 |'
- en: For this particular UPDATE test, MySQL is consistently five or ten times slower
    than PostgreSQL and SQLite. I do not know why. MySQL is normally a very fast engine.
    Perhaps this problem has been addressed in later versions of MySQL.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的UPDATE测试，MySQL在速度上始终比PostgreSQL和SQLite慢五到十倍。我不知道为什么。MySQL通常是一个非常快速的引擎。也许这个问题已经在MySQL的后续版本中得到了解决。
- en: 'Test 9: 25000 UPDATEs with an index'
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试9：带索引的25000次UPDATE操作
- en: BEGIN;
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: BEGIN;
- en: UPDATE t2 SET b=468026 WHERE a=1;
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE t2 SET b=468026 WHERE a=1;
- en: UPDATE t2 SET b=121928 WHERE a=2;
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE t2 SET b=121928 WHERE a=2;
- en: '*... 24996 lines omitted*'
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*... 24996 lines omitted*'
- en: UPDATE t2 SET b=35065 WHERE a=24999;
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE t2 SET b=35065 WHERE a=24999;
- en: UPDATE t2 SET b=347393 WHERE a=25000;
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE t2 SET b=347393 WHERE a=25000;
- en: COMMIT;
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: COMMIT;
- en: '| PostgreSQL: |    18.797 |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    18.797 |'
- en: '| MySQL: |    8.134 |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    8.134 |'
- en: '| SQLite 2.7.6: |    3.520 |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    3.520 |'
- en: '| SQLite 2.7.6 (nosync): |    3.104 |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    3.104 |'
- en: As recently as version 2.7.0, SQLite ran at about the same speed as MySQL on
    this test. But recent optimizations to SQLite have more than doubled speed of
    UPDATEs.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 就在最近的2.7.0版本中，SQLite在这个测试中的速度与MySQL相近。但是最近对SQLite的优化使得UPDATE操作的速度翻了一番还多。
- en: 'Test 10: 25000 text UPDATEs with an index'
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试10：带索引的25000次文本UPDATE操作
- en: BEGIN;
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 开始;
- en: UPDATE t2 SET c='one hundred forty eight thousand three hundred eighty two'
    WHERE a=1;
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更新 t2 设置 c='一十四万八千三百八十二' WHERE a=1;
- en: UPDATE t2 SET c='three hundred sixty six thousand five hundred two' WHERE a=2;
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更新 t2 设置 c='三十六万五千二' WHERE a=2;
- en: '*... 24996 lines omitted*'
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*... 24996 行省略*'
- en: UPDATE t2 SET c='three hundred eighty three thousand ninety nine' WHERE a=24999;
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更新 t2 设置 c='三十八万三千九十九' WHERE a=24999;
- en: UPDATE t2 SET c='two hundred fifty six thousand eight hundred thirty' WHERE
    a=25000;
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更新 t2 设置 c='二十五万六千八百三十' WHERE a=25000;
- en: COMMIT;
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提交;
- en: '| PostgreSQL: |    48.133 |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    48.133 |'
- en: '| MySQL: |    6.982 |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    6.982 |'
- en: '| SQLite 2.7.6: |    2.408 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    2.408 |'
- en: '| SQLite 2.7.6 (nosync): |    1.725 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    1.725 |'
- en: Here again, version 2.7.0 of SQLite used to run at about the same speed as MySQL.
    But now version 2.7.6 is over two times faster than MySQL and over twenty times
    faster than PostgreSQL.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，SQLite 2.7.0 版本运行速度与 MySQL 大致相同。但现在 2.7.6 版本比 MySQL 快两倍以上，比 PostgreSQL 快二十倍以上。
- en: In fairness to PostgreSQL, it started thrashing on this test. A knowledgeable
    administrator might be able to get PostgreSQL to run a lot faster here by tweaking
    and tuning the server a little.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 公平地对待 PostgreSQL，在这个测试中开始抛锚。一个有经验的管理员可能通过微调服务器来使 PostgreSQL 在这里运行得更快。
- en: 'Test 11: INSERTs from a SELECT'
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '测试 11: INSERTs from a SELECT'
- en: BEGIN;
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 开始;
- en: INSERT INTO t1 SELECT b,a,c FROM t2;
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 插入到 t1 从 t2 选择 b,a,c;
- en: INSERT INTO t2 SELECT b,a,c FROM t1;
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 插入到 t2 从 t1 选择 b,a,c;
- en: COMMIT;
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提交;
- en: '| PostgreSQL: |    61.364 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    61.364 |'
- en: '| MySQL: |    1.537 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    1.537 |'
- en: '| SQLite 2.7.6: |    2.787 |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    2.787 |'
- en: '| SQLite 2.7.6 (nosync): |    1.599 |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    1.599 |'
- en: The asynchronous SQLite is just a shade slower than MySQL on this test. (MySQL
    seems to be especially adept at INSERT...SELECT statements.) The PostgreSQL engine
    is still thrashing - most of the 61 seconds it used were spent waiting on disk
    I/O.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，SQLite 的异步版本比 MySQL 稍慢一点。（MySQL 在执行 INSERT...SELECT 语句时似乎特别擅长。）PostgreSQL
    引擎仍在抛锚 - 它使用的 61 秒大部分时间都花在等待磁盘 I/O 上。
- en: 'Test 12: DELETE without an index'
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '测试 12: DELETE without an index'
- en: DELETE FROM t2 WHERE c LIKE '%fifty%';
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 删除从 t2 WHERE c LIKE '%fifty%';
- en: '| PostgreSQL: |    1.509 |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    1.509 |'
- en: '| MySQL: |    0.975 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    0.975 |'
- en: '| SQLite 2.7.6: |    4.004 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    4.004 |'
- en: '| SQLite 2.7.6 (nosync): |    0.560 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    0.560 |'
- en: The synchronous version of SQLite is the slowest of the group in this test,
    but the asynchronous version is the fastest. The difference is the extra time
    needed to execute fsync().
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 的同步版本在这个测试中是最慢的，而异步版本是最快的。差异在于执行 fsync() 需要额外的时间。
- en: 'Test 13: DELETE with an index'
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '测试 13: DELETE with an index'
- en: DELETE FROM t2 WHERE a>10 AND a<20000;
  id: totrans-165
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 删除从 t2 WHERE a>10 AND a<20000;
- en: '| PostgreSQL: |    1.316 |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    1.316 |'
- en: '| MySQL: |    2.262 |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    2.262 |'
- en: '| SQLite 2.7.6: |    2.068 |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    2.068 |'
- en: '| SQLite 2.7.6 (nosync): |    0.752 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    0.752 |'
- en: This test is significant because it is one of the few where PostgreSQL is faster
    than MySQL. The asynchronous SQLite is, however, faster then both the other two.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试非常重要，因为它是 PostgreSQL 比 MySQL 更快的少数几个测试之一。异步 SQLite 在这一点上，然而，比其他两个都要快。
- en: 'Test 14: A big INSERT after a big DELETE'
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '测试 14: 大 DELETE 后的大 INSERT'
- en: INSERT INTO t2 SELECT * FROM t1;
  id: totrans-172
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t2 SELECT * FROM t1;
- en: '| PostgreSQL: |    13.168 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    13.168 |'
- en: '| MySQL: |    1.815 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    1.815 |'
- en: '| SQLite 2.7.6: |    3.210 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    3.210 |'
- en: '| SQLite 2.7.6 (nosync): |    1.485 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    1.485 |'
- en: Some older versions of SQLite (prior to version 2.4.0) would show decreasing
    performance after a sequence of DELETEs followed by new INSERTs. As this test
    shows, the problem has now been resolved.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一些旧版 SQLite（在 2.4.0 版本之前）在大量 DELETE 后的新 INSERT 操作中表现出性能下降。如此测试显示，此问题现在已得到解决。
- en: 'Test 15: A big DELETE followed by many small INSERTs'
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '测试 15: 大量小的 INSERT 后的大 DELETE'
- en: BEGIN;
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: BEGIN;
- en: DELETE FROM t1;
  id: totrans-180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DELETE FROM t1;
- en: INSERT INTO t1 VALUES(1,10719,'ten thousand seven hundred nineteen');
  id: totrans-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t1 VALUES(1,10719,'一万零七百一十九');
- en: '*... 11997 lines omitted*'
  id: totrans-182
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*... 省略了 11997 行*'
- en: INSERT INTO t1 VALUES(11999,72836,'seventy two thousand eight hundred thirty
    six');
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t1 VALUES(11999,72836,'七万二千八百三十六');
- en: INSERT INTO t1 VALUES(12000,64231,'sixty four thousand two hundred thirty one');
  id: totrans-184
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO t1 VALUES(12000,64231,'六万四千二百三十一');
- en: COMMIT;
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: COMMIT;
- en: '| PostgreSQL: |    4.556 |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    4.556 |'
- en: '| MySQL: |    1.704 |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    1.704 |'
- en: '| SQLite 2.7.6: |    0.618 |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    0.618 |'
- en: '| SQLite 2.7.6 (nosync): |    0.406 |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    0.406 |'
- en: SQLite is very good at doing INSERTs within a transaction, which probably explains
    why it is so much faster than the other databases at this test.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 在事务内执行 INSERT 操作非常出色，这可能解释了为什么在这个测试中它比其他数据库快得多。
- en: 'Test 16: DROP TABLE'
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '测试 16: DROP TABLE'
- en: DROP TABLE t1;
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DROP TABLE t1;
- en: DROP TABLE t2;
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DROP TABLE t2;
- en: DROP TABLE t3;
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DROP TABLE t3;
- en: '| PostgreSQL: |    0.135 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| PostgreSQL: |    0.135 |'
- en: '| MySQL: |    0.015 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| MySQL: |    0.015 |'
- en: '| SQLite 2.7.6: |    0.939 |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6: |    0.939 |'
- en: '| SQLite 2.7.6 (nosync): |    0.254 |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| SQLite 2.7.6 (nosync): |    0.254 |'
- en: SQLite is slower than the other databases when it comes to dropping tables.
    This probably is because when SQLite drops a table, it has to go through and erase
    the records in the database file that deal with that table. MySQL and PostgreSQL,
    on the other hand, use separate files to represent each table so they can drop
    a table simply by deleting a file, which is much faster.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到删除表时，SQLite 比其他数据库慢。这可能是因为当 SQLite 删除表时，它必须遍历并擦除数据库文件中处理该表的记录。而 MySQL 和
    PostgreSQL 则使用单独的文件来表示每个表，因此它们可以通过删除文件来简单地删除表，这样做要快得多。
- en: On the other hand, dropping tables is not a very common operation so if SQLite
    takes a little longer, that is not seen as a big problem.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，删除表不是一个非常常见的操作，因此如果 SQLite 花费更长时间，这并不被视为一个大问题。
