- en: '25.7.10 NDB Cluster Replication: Bidirectional and Circular Replication'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 25.7.10 NDB集群复制：双向和循环复制
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-multi-source.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-multi-source.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-multi-source.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-replication-multi-source.html)
- en: It is possible to use NDB Cluster for bidirectional replication between two
    clusters, as well as for circular replication between any number of clusters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用NDB集群在两个集群之间进行双向复制，也可以在任意数量的集群之间进行循环复制。
- en: '**Circular replication example. ** In the next few paragraphs we consider the
    example of a replication setup involving three NDB Clusters numbered 1, 2, and
    3, in which Cluster 1 acts as the replication source for Cluster 2, Cluster 2
    acts as the source for Cluster 3, and Cluster 3 acts as the source for Cluster
    1\. Each cluster has two SQL nodes, with SQL nodes A and B belonging to Cluster
    1, SQL nodes C and D belonging to Cluster 2, and SQL nodes E and F belonging to
    Cluster 3.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**循环复制示例。** 在接下来的几段中，我们考虑涉及三个NDB集群（编号为1、2和3）的复制设置示例，其中集群1充当集群2的复制源，集群2充当集群3的源，集群3充当集群1的源。每个集群都有两个SQL节点，SQL节点A和B属于集群1，SQL节点C和D属于集群2，SQL节点E和F属于集群3。'
- en: 'Circular replication using these clusters is supported as long as the following
    conditions are met:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 只要满足以下条件，就支持使用这些集群进行循环复制：
- en: The SQL nodes on all sources and replicas are the same.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有源和副本上的SQL节点都是相同的。
- en: All SQL nodes acting as sources and replicas are started with the system variable
    [`log_replica_updates`](replication-options-binary-log.html#sysvar_log_replica_updates)
    (beginning with NDB 8.0.26) or [`log_slave_updates`](replication-options-binary-log.html#sysvar_log_slave_updates)
    (NDB 8.0.26 and earlier) enabled.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有作为源和副本的SQL节点都启用了系统变量[`log_replica_updates`](replication-options-binary-log.html#sysvar_log_replica_updates)（从NDB
    8.0.26开始）或[`log_slave_updates`](replication-options-binary-log.html#sysvar_log_slave_updates)（NDB
    8.0.26及更早版本）。
- en: 'This type of circular replication setup is shown in the following diagram:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这种循环复制设置如下图所示：
- en: '**Figure 25.15 NDB Cluster Circular Replication with All Sources As Replicas**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 25.15 NDB集群循环复制，所有源均为副本**'
- en: '![Some content is described in the surrounding text. The diagram shows three
    clusters, each with two nodes. Arrows connecting SQL nodes in different clusters
    illustrate that all sources are also replicas.](../Images/de5f09a17240752cf7530788cfaae44f.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![周围文本描述了一些内容。图表显示了三个集群，每个集群有两个节点。连接不同集群中的SQL节点的箭头说明所有源也是副本。](../Images/de5f09a17240752cf7530788cfaae44f.png)'
- en: In this scenario, SQL node A in Cluster 1 replicates to SQL node C in Cluster
    2; SQL node C replicates to SQL node E in Cluster 3; SQL node E replicates to
    SQL node A. In other words, the replication line (indicated by the curved arrows
    in the diagram) directly connects all SQL nodes used as replication sources and
    replicas.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，集群1中的SQL节点A复制到集群2中的SQL节点C；SQL节点C复制到集群3中的SQL节点E；SQL节点E复制到SQL节点A。换句话说，复制线（图表中的曲线箭头表示）直接连接所有用作复制源和副本的SQL节点。
- en: 'It is also possible to set up circular replication in such a way that not all
    source SQL nodes are also replicas, as shown here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以设置循环复制，使得并非所有源SQL节点也是副本，如下所示：
- en: '**Figure 25.16 NDB Cluster Circular Replication Where Not All Sources Are Replicas**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 25.16 NDB集群循环复制，不是所有源都是副本**'
- en: '![Some content is described in the surrounding text. The diagram shows three
    clusters, each with two nodes. Arrows connecting SQL nodes in different clusters
    illustrate that not all sources are replicas.](../Images/da9464ae1a062348a81cbf8645860ee1.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![周围文本描述了一些内容。图表显示了三个集群，每个集群有两个节点。连接不同集群中的SQL节点的箭头说明并非所有源都是副本。](../Images/da9464ae1a062348a81cbf8645860ee1.png)'
- en: In this case, different SQL nodes in each cluster are used as replication sources
    and replicas. You must *not* start any of the SQL nodes with the system variable
    [`log_replica_updates`](replication-options-binary-log.html#sysvar_log_replica_updates)
    (NDB 8.0.26 and later) or [`log_slave_updates`](replication-options-binary-log.html#sysvar_log_slave_updates)
    (prior to NDB 8.0.26) enabled. This type of circular replication scheme for NDB
    Cluster, in which the line of replication (again indicated by the curved arrows
    in the diagram) is discontinuous, should be possible, but it should be noted that
    it has not yet been thoroughly tested and must therefore still be considered experimental.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，每个集群中的不同 SQL 节点被用作复制源和副本。您*不*应该启动任何带有系统变量[`log_replica_updates`](replication-options-binary-log.html#sysvar_log_replica_updates)（NDB
    8.0.26及更高版本）或[`log_slave_updates`](replication-options-binary-log.html#sysvar_log_slave_updates)（NDB
    8.0.26之前）的 SQL 节点。NDB 集群的这种循环复制方案，其中复制线路（在图中由曲线箭头表示）是不连续的，应该是可能的，但需要注意的是，这种方案尚未经过彻底测试，因此仍然被视为实验性。
- en: '**Using NDB-native backup and restore to initialize a replica cluster. ** When
    setting up circular replication, it is possible to initialize the replica cluster
    by using the management client [`START BACKUP`](mysql-cluster-backup-using-management-client.html
    "25.6.8.2 Using The NDB Cluster Management Client to Create a Backup") command
    on one NDB Cluster to create a backup and then applying this backup on another
    NDB Cluster using [**ndb_restore**](mysql-cluster-programs-ndb-restore.html "25.5.23 ndb_restore
    — Restore an NDB Cluster Backup"). This does not automatically create binary logs
    on the second NDB Cluster''s SQL node acting as the replica; in order to cause
    the binary logs to be created, you must issue a [`SHOW TABLES`](show-tables.html
    "15.7.7.39 SHOW TABLES Statement") statement on that SQL node; this should be
    done prior to running [`START REPLICA`](start-replica.html "15.4.2.6 START REPLICA
    Statement"). This is a known issue.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 NDB 本地备份和恢复初始化副本集群。** 在设置循环复制时，可以通过在一个 NDB 集群上使用管理客户端[`START BACKUP`](mysql-cluster-backup-using-management-client.html
    "25.6.8.2 使用 NDB 集群管理客户端创建备份")命令创建备份，然后在另一个 NDB 集群上使用[**ndb_restore**](mysql-cluster-programs-ndb-restore.html
    "25.5.23 ndb_restore — 恢复 NDB 集群备份")应用此备份来初始化副本集群。这不会自动在充当副本的第二个 NDB 集群的 SQL 节点上创建二进制日志；为了导致创建二进制日志，您必须在该
    SQL 节点上发出[`SHOW TABLES`](show-tables.html "15.7.7.39 SHOW TABLES 语句")语句；在运行[`START
    REPLICA`](start-replica.html "15.4.2.6 START REPLICA 语句")之前应该这样做。这是一个已知问题。'
- en: '**Multi-source failover example. ** In this section, we discuss failover in
    a multi-source NDB Cluster replication setup with three NDB Clusters having server
    IDs 1, 2, and 3\. In this scenario, Cluster 1 replicates to Clusters 2 and 3;
    Cluster 2 also replicates to Cluster 3\. This relationship is shown here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**多源故障转移示例。** 在本节中，我们讨论了具有服务器 ID 1、2 和 3 的三个 NDB 集群的多源 NDB 集群复制设置中的故障转移。在这种情况下，集群
    1 复制到集群 2 和 3；集群 2 也复制到集群 3。这种关系如下所示：'
- en: '**Figure 25.17 NDB Cluster Multi-Master Replication With 3 Sources**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 25.17 具有 3 个源的 NDB 集群多主复制**'
- en: '![Multi-source NDB Cluster replication setup with three NDB Clusters having
    server IDs 1, 2, and 3; Cluster 1 replicates to Clusters 2 and 3; Cluster 2 also
    replicates to Cluster 3.](../Images/adea4d06dfb0e0462ff342aae79c373c.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![具有服务器 ID 1、2 和 3 的三个 NDB 集群的多源 NDB 集群复制设置；集群 1 复制到集群 2 和 3；集群 2 也复制到集群 3。](../Images/adea4d06dfb0e0462ff342aae79c373c.png)'
- en: 'In other words, data replicates from Cluster 1 to Cluster 3 through 2 different
    routes: directly, and by way of Cluster 2.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，数据通过两种不同的路径从集群 1 复制到集群 3：直接和通过集群 2。
- en: 'Not all MySQL servers taking part in multi-source replication must act as both
    source and replica, and a given NDB Cluster might use different SQL nodes for
    different replication channels. Such a case is shown here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有参与多源复制的 MySQL 服务器都必须同时充当源和副本，给定的 NDB 集群可能会为不同的复制通道使用不同的 SQL 节点。这种情况如下所示：
- en: '**Figure 25.18 NDB Cluster Multi-Source Replication, With MySQL Servers**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 25.18 具有 MySQL 服务器的 NDB 集群多源复制**'
- en: '![Concepts are described in the surrounding text. Shows three nodes: SQL node
    A in Cluster 1 replicates to SQL node F in Cluster 3; SQL node B in Cluster 1
    replicates to SQL node C in Cluster 2; SQL node E in Cluster 3 replicates to SQL
    node G in Cluster 3\. SQL nodes A and B in cluster 1 have --log-slave-updates=0;
    SQL nodes C in Cluster 2, and SQL nodes F and G in Cluster 3 have --log-slave-updates=1;
    and SQL nodes D and E in Cluster 2 have --log-slave-updates=0.](../Images/cce499d54d58c902a2127587c2ac7743.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![概念在周围的文本中描述。显示三个节点：Cluster 1 中的 SQL 节点 A 复制到 Cluster 3 中的 SQL 节点 F；Cluster
    1 中的 SQL 节点 B 复制到 Cluster 2 中的 SQL 节点 C；Cluster 3 中的 SQL 节点 E 复制到 Cluster 3 中的
    SQL 节点 G。Cluster 1 中的 SQL 节点 A 和 B 的 --log-slave-updates=0；Cluster 2 中的 SQL 节点
    C，Cluster 3 中的 SQL 节点 F 和 G 的 --log-slave-updates=1；Cluster 2 中的 SQL 节点 D 和 E
    的 --log-slave-updates=0。](../Images/cce499d54d58c902a2127587c2ac7743.png)'
- en: MySQL servers acting as replicas must be run with the system variable [`log_replica_updates`](replication-options-binary-log.html#sysvar_log_replica_updates)
    (beginning with NDB 8.0.26) or [`log_slave_updates`](replication-options-binary-log.html#sysvar_log_slave_updates)
    (NDB 8.0.26 and earlier) enabled. Which [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") processes require this option is also shown in the preceding
    diagram.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 作为副本的 MySQL 服务器必须启用系统变量 [`log_replica_updates`](replication-options-binary-log.html#sysvar_log_replica_updates)（从
    NDB 8.0.26 开始）或 [`log_slave_updates`](replication-options-binary-log.html#sysvar_log_slave_updates)（NDB
    8.0.26 及更早版本）。在前面的图表中还显示了哪些 [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL
    Server") 进程需要此选项。
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Using the [`log_replica_updates`](replication-options-binary-log.html#sysvar_log_replica_updates)
    or [`log_slave_updates`](replication-options-binary-log.html#sysvar_log_slave_updates)
    system variable has no effect on servers not being run as replicas.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`log_replica_updates`](replication-options-binary-log.html#sysvar_log_replica_updates)
    或 [`log_slave_updates`](replication-options-binary-log.html#sysvar_log_slave_updates)
    系统变量对未作为副本运行的服务器没有影响。
- en: The need for failover arises when one of the replicating clusters goes down.
    In this example, we consider the case where Cluster 1 is lost to service, and
    so Cluster 3 loses 2 sources of updates from Cluster 1\. Because replication between
    NDB Clusters is asynchronous, there is no guarantee that Cluster 3's updates originating
    directly from Cluster 1 are more recent than those received through Cluster 2\.
    You can handle this by ensuring that Cluster 3 catches up to Cluster 2 with regard
    to updates from Cluster 1\. In terms of MySQL servers, this means that you need
    to replicate any outstanding updates from MySQL server C to server F.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当复制集群之一宕机时，就会出现故障切换的需求。在本例中，我们考虑 Cluster 1 丢失服务的情况，因此 Cluster 3 丢失了来自 Cluster
    1 的 2 个更新源。由于 NDB 集群之间的复制是异步的，不能保证 Cluster 3 直接源自 Cluster 1 的更新比通过 Cluster 2 接收的更新更近。您可以通过确保
    Cluster 3 追赶 Cluster 2 关于来自 Cluster 1 的更新来处理这个问题。在 MySQL 服务器方面，这意味着您需要将 MySQL
    服务器 C 的任何未完成更新复制到服务器 F。
- en: 'On server C, perform the following queries:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器 C 上执行以下查询：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can improve the performance of this query, and thus likely speed up failover
    times significantly, by adding the appropriate index to the `ndb_binlog_index`
    table. See [Section 25.7.4, “NDB Cluster Replication Schema and Tables”](mysql-cluster-replication-schema.html
    "25.7.4 NDB Cluster Replication Schema and Tables"), for more information.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过向 `ndb_binlog_index` 表添加适当的索引来提高此查询的性能，从而显着加快故障切换时间。有关更多信息，请参见 [第 25.7.4
    节，“NDB Cluster Replication Schema and Tables”](mysql-cluster-replication-schema.html
    "25.7.4 NDB Cluster Replication Schema and Tables")。
- en: 'Copy over the values for *`@file`* and *`@pos`* manually from server C to server
    F (or have your application perform the equivalent). Then, on server F, execute
    the following [`CHANGE REPLICATION SOURCE TO`](change-replication-source-to.html
    "15.4.2.3 CHANGE REPLICATION SOURCE TO Statement") statement (NDB 8.0.23 and later)
    or [`CHANGE MASTER TO`](change-master-to.html "15.4.2.1 CHANGE MASTER TO Statement")
    statement (prior to NDB 8.0.23):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务器 C 手动复制 *`@file`* 和 *`@pos`* 的值到服务器 F（或让您的应用程序执行相应操作）。然后，在服务器 F 上执行以下 [`CHANGE
    REPLICATION SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION
    SOURCE TO Statement") 语句（NDB 8.0.23 及更高版本）或 [`CHANGE MASTER TO`](change-master-to.html
    "15.4.2.1 CHANGE MASTER TO Statement") 语句（NDB 8.0.23 之前）：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Beginning with NDB 8.0.23, you can also use the following statement:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从 NDB 8.0.23 开始，您还可以使用以下语句：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once this has been done, you can issue a [`START REPLICA`](start-replica.html
    "15.4.2.6 START REPLICA Statement") statement on MySQL server F; this causes any
    missing updates originating from server B to be replicated to server F.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，在 MySQL 服务器 F 上发出 [`START REPLICA`](start-replica.html "15.4.2.6 START REPLICA
    Statement") 语句；这将导致来自服务器 B 的任何丢失更新被复制到服务器 F。
- en: The [`CHANGE REPLICATION SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE
    REPLICATION SOURCE TO Statement") | [`CHANGE MASTER TO`](change-master-to.html
    "15.4.2.1 CHANGE MASTER TO Statement") statement also supports an `IGNORE_SERVER_IDS`
    option which takes a comma-separated list of server IDs and causes events originating
    from the corresponding servers to be ignored. For more information, see [Section 15.4.2.1,
    “CHANGE MASTER TO Statement”](change-master-to.html "15.4.2.1 CHANGE MASTER TO
    Statement"), and [Section 15.7.7.36, “SHOW SLAVE | REPLICA STATUS Statement”](show-slave-status.html
    "15.7.7.36 SHOW SLAVE | REPLICA STATUS Statement"). For information about how
    this option interacts with the [`ndb_log_apply_status`](mysql-cluster-options-variables.html#sysvar_ndb_log_apply_status)
    variable, see [Section 25.7.8, “Implementing Failover with NDB Cluster Replication”](mysql-cluster-replication-failover.html
    "25.7.8 Implementing Failover with NDB Cluster Replication").
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CHANGE REPLICATION SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE
    REPLICATION SOURCE TO 语句") | [`CHANGE MASTER TO`](change-master-to.html "15.4.2.1 CHANGE
    MASTER TO 语句") 语句还支持一个 `IGNORE_SERVER_IDS` 选项，该选项接受一个逗号分隔的服务器ID列表，并导致来自相应服务器的事件被忽略。有关更多信息，请参见
    [第 15.4.2.1 节，“CHANGE MASTER TO 语句”](change-master-to.html "15.4.2.1 CHANGE MASTER
    TO 语句")，以及 [第 15.7.7.36 节，“SHOW SLAVE | REPLICA STATUS 语句”](show-slave-status.html
    "15.7.7.36 SHOW SLAVE | REPLICA STATUS 语句")。有关此选项如何与 [`ndb_log_apply_status`](mysql-cluster-options-variables.html#sysvar_ndb_log_apply_status)
    变量交互的信息，请参见 [第 25.7.8 节，“使用 NDB 集群复制实现故障切换”](mysql-cluster-replication-failover.html
    "25.7.8 使用 NDB 集群复制实现故障切换")。'
