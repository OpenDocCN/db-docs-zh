- en: 16.7 Data Dictionary Usage Differences
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 16.7 数据字典使用差异
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/data-dictionary-usage-differences.html](https://dev.mysql.com/doc/refman/8.0/en/data-dictionary-usage-differences.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/data-dictionary-usage-differences.html](https://dev.mysql.com/doc/refman/8.0/en/data-dictionary-usage-differences.html)
- en: 'Use of a data dictionary-enabled MySQL server entails some operational differences
    compared to a server that does not have a data dictionary:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用启用数据字典的MySQL服务器与没有数据字典的服务器相比，存在一些操作上的差异：
- en: 'Previously, enabling the [`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)
    system variable prevented creating and dropping tables only for the `InnoDB` storage
    engine. As of MySQL 8.0, enabling [`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)
    prevents these operations for all storage engines. Table creation and drop operations
    for any storage engine modify data dictionary tables in the `mysql` system database,
    but those tables use the `InnoDB` storage engine and cannot be modified when [`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)
    is enabled. The same principle applies to other table operations that require
    modifying data dictionary tables. Examples:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，启用[`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)系统变量仅阻止了`InnoDB`存储引擎的表的创建和删除。从MySQL
    8.0开始，启用[`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)阻止了所有存储引擎的这些操作。任何存储引擎的表创建和删除操作都会修改`mysql`系统数据库中的数据字典表，但这些表使用`InnoDB`存储引擎，在启用[`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)时无法修改。对需要修改数据字典表的其他表操作也适用相同原则。例如：
- en: '[`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement") fails
    because it updates table statistics, which are stored in the data dictionary.'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement")失败，因为它更新了存储在数据字典中的表统计信息。'
- en: '[`ALTER TABLE *`tbl_name`* ENGINE=*`engine_name`*`](alter-table.html "15.1.9 ALTER
    TABLE Statement") fails because it updates the storage engine designation, which
    is stored in the data dictionary.'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ALTER TABLE *`tbl_name`* ENGINE=*`engine_name`*`](alter-table.html "15.1.9 ALTER
    TABLE Statement")失败，因为它更新了存储在数据字典中的存储引擎指定。'
- en: Note
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Enabling [`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)
    also has important implications for non-data dictionary tables in the `mysql`
    system database. For details, see the description of [`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)
    in [Section 17.14, “InnoDB Startup Options and System Variables”](innodb-parameters.html
    "17.14 InnoDB Startup Options and System Variables")
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用[`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)对`mysql`系统数据库中的非数据字典表也有重要影响。有关详细信息，请参阅[第17.14节，“InnoDB启动选项和系统变量”](innodb-parameters.html
    "17.14 InnoDB Startup Options and System Variables")中对[`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)的描述。
- en: Previously, tables in the `mysql` system database were visible to DML and DDL
    statements. As of MySQL 8.0, data dictionary tables are invisible and cannot be
    modified or queried directly. However, in most cases there are corresponding `INFORMATION_SCHEMA`
    tables that can be queried instead. This enables the underlying data dictionary
    tables to be changed as server development proceeds, while maintaining a stable
    `INFORMATION_SCHEMA` interface for application use.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，`mysql`系统数据库中的表对DML和DDL语句可见。从MySQL 8.0开始，数据字典表是不可见的，不能直接修改或查询。然而，在大多数情况下，有对应的`INFORMATION_SCHEMA`表可以查询。这使得在服务器开发进行时可以更改底层数据字典表，同时保持稳定的`INFORMATION_SCHEMA`接口供应用程序使用。
- en: '`INFORMATION_SCHEMA` tables in MySQL 8.0 are closely tied to the data dictionary,
    resulting in several usage differences:'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8.0中的`INFORMATION_SCHEMA`表与数据字典密切相关，导致了几个使用上的差异：
- en: Previously, `INFORMATION_SCHEMA` queries for table statistics in the [`STATISTICS`](information-schema-statistics-table.html
    "28.3.34 The INFORMATION_SCHEMA STATISTICS Table") and [`TABLES`](information-schema-tables-table.html
    "28.3.38 The INFORMATION_SCHEMA TABLES Table") tables retrieved statistics directly
    from storage engines. As of MySQL 8.0, cached table statistics are used by default.
    The [`information_schema_stats_expiry`](server-system-variables.html#sysvar_information_schema_stats_expiry)
    system variable defines the period of time before cached table statistics expire.
    The default is 86400 seconds (24 hours). (To update the cached values at any time
    for a given table, use [`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE
    TABLE Statement").) If there are no cached statistics or statistics have expired,
    statistics are retrieved from storage engines when querying table statistics columns.
    To always retrieve the latest statistics directly from storage engines, set [`information_schema_stats_expiry`](server-system-variables.html#sysvar_information_schema_stats_expiry)
    to `0`. For more information, see [Section 10.2.3, “Optimizing INFORMATION_SCHEMA
    Queries”](information-schema-optimization.html "10.2.3 Optimizing INFORMATION_SCHEMA
    Queries").
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，在[`STATISTICS`](information-schema-statistics-table.html "28.3.34 The INFORMATION_SCHEMA
    STATISTICS Table")和[`TABLES`](information-schema-tables-table.html "28.3.38 The
    INFORMATION_SCHEMA TABLES Table")表中查询表统计信息的`INFORMATION_SCHEMA`查询直接从存储引擎中检索统计信息。从MySQL
    8.0开始，默认情况下使用缓存的表统计信息。[`information_schema_stats_expiry`](server-system-variables.html#sysvar_information_schema_stats_expiry)系统变量定义缓存表统计信息过期之前的时间段。默认值为86400秒（24小时）。（要随时更新给定表的缓存值，请使用[`ANALYZE
    TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement")。）如果没有缓存的统计信息或统计信息已过期，则在查询表统计列时从存储引擎中检索统计信息。要始终直接从存储引擎检索最新的统计信息，请将[`information_schema_stats_expiry`](server-system-variables.html#sysvar_information_schema_stats_expiry)设置为`0`。有关更多信息，请参见[Section 10.2.3,
    “Optimizing INFORMATION_SCHEMA Queries”](information-schema-optimization.html
    "10.2.3 Optimizing INFORMATION_SCHEMA Queries")。
- en: Several `INFORMATION_SCHEMA` tables are views on data dictionary tables, which
    enables the optimizer to use indexes on those underlying tables. Consequently,
    depending on optimizer choices, the row order of results for `INFORMATION_SCHEMA`
    queries might differ from previous results. If a query result must have specific
    row ordering characteristics, include an `ORDER BY` clause.
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几个`INFORMATION_SCHEMA`表是数据字典表上的视图，这使得优化器可以使用这些基础表上的索引。因此，根据优化器的选择，`INFORMATION_SCHEMA`查询的结果行顺序可能与以前的结果不同。如果查询结果必须具有特定的行排序特性，请包含`ORDER
    BY`子句。
- en: 'Queries on `INFORMATION_SCHEMA` tables may return column names in a different
    lettercase than in earlier MySQL series. Applications should test result set column
    names in case-insensitive fashion. If that is not feasible, a workaround is to
    use column aliases in the select list that return column names in the required
    lettercase. For example:'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`INFORMATION_SCHEMA`表的查询可能以不同的大小写返回列名，而不同于早期的MySQL系列。应用程序应以不区分大小写的方式测试结果集列名。如果这不可行，一个解决方法是在选择列表中使用列别名，以返回所需大小写的列名。例如：
- en: '[PRE0]'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    and [**mysqlpump**](mysqlpump.html "6.5.6 mysqlpump — A Database Backup Program")
    no longer dump the `INFORMATION_SCHEMA` database, even if explicitly named on
    the command line.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    和 [**mysqlpump**](mysqlpump.html "6.5.6 mysqlpump — A Database Backup Program")
    不再转储`INFORMATION_SCHEMA`数据库，即使在命令行上明确命名。'
- en: '[`CREATE TABLE *`dst_tbl`* LIKE *`src_tbl`*`](create-table-like.html "15.1.20.3 CREATE
    TABLE ... LIKE Statement") requires that *`src_tbl`* be a base table and fails
    if it is an `INFORMATION_SCHEMA` table that is a view on data dictionary tables.'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CREATE TABLE *`dst_tbl`* LIKE *`src_tbl`*`](create-table-like.html "15.1.20.3 CREATE
    TABLE ... LIKE Statement") 要求*`src_tbl`*是一个基本表，如果是一个在数据字典表上的`INFORMATION_SCHEMA`表的视图，则会失败。'
- en: 'Previously, result set headers of columns selected from `INFORMATION_SCHEMA`
    tables used the capitalization specified in the query. This query produces a result
    set with a header of `table_name`:'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，从`INFORMATION_SCHEMA`表中选择的列的结果集标题使用查询中指定的大写。这个查询生成一个带有`table_name`标题的结果集：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As of MySQL 8.0, these headers are capitalized; the preceding query produces
    a result set with a header of `TABLE_NAME`. If necessary, a column alias can be
    used to achieve a different lettercase. For example:'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0开始，这些标题是大写的；前面的查询生成一个带有`TABLE_NAME`标题的结果集。如果需要，可以使用列别名来实现不同的大小写。例如：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The data directory affects how [**mysqldump**](mysqldump.html "6.5.4 mysqldump
    — A Database Backup Program") and [**mysqlpump**](mysqlpump.html "6.5.6 mysqlpump
    — A Database Backup Program") dump information from the `mysql` system database:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据目录影响着[**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")和[**mysqlpump**](mysqlpump.html
    "6.5.6 mysqlpump — A Database Backup Program")从`mysql`系统数据库中导出信息的方式：
- en: Previously, it was possible to dump all tables in the `mysql` system database.
    As of MySQL 8.0, [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database
    Backup Program") and [**mysqlpump**](mysqlpump.html "6.5.6 mysqlpump — A Database
    Backup Program") dump only non-data dictionary tables in that database.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，可以导出`mysql`系统数据库中的所有表。从MySQL 8.0开始，[**mysqldump**](mysqldump.html "6.5.4 mysqldump
    — A Database Backup Program")和[**mysqlpump**](mysqlpump.html "6.5.6 mysqlpump
    — A Database Backup Program")只会导出该数据库中的非数据字典表。
- en: 'Previously, the [`--routines`](mysqldump.html#option_mysqldump_routines) and
    [`--events`](mysqldump.html#option_mysqldump_events) options were not required
    to include stored routines and events when using the [`--all-databases`](mysqldump.html#option_mysqldump_all-databases)
    option: The dump included the `mysql` system database, and therefore also the
    `proc` and `event` tables containing stored routine and event definitions. As
    of MySQL 8.0, the `event` and `proc` tables are not used. Definitions for the
    corresponding objects are stored in data dictionary tables, but those tables are
    not dumped. To include stored routines and events in a dump made using [`--all-databases`](mysqldump.html#option_mysqldump_all-databases),
    use the [`--routines`](mysqldump.html#option_mysqldump_routines) and [`--events`](mysqldump.html#option_mysqldump_events)
    options explicitly.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，在使用[`--all-databases`](mysqldump.html#option_mysqldump_all-databases)选项时，不需要[`--routines`](mysqldump.html#option_mysqldump_routines)和[`--events`](mysqldump.html#option_mysqldump_events)选项来包含存储过程和事件：导出包括`mysql`系统数据库，因此也包括包含存储过程和事件定义的`proc`和`event`表。从MySQL
    8.0开始，`event`和`proc`表不再使用。相应对象的定义存储在数据字典表中，但这些表不会被导出。要在使用[`--all-databases`](mysqldump.html#option_mysqldump_all-databases)进行导出时包含存储过程和事件，需要显式使用[`--routines`](mysqldump.html#option_mysqldump_routines)和[`--events`](mysqldump.html#option_mysqldump_events)选项。
- en: Previously, the [`--routines`](mysqldump.html#option_mysqldump_routines) option
    required the [`SELECT`](privileges-provided.html#priv_select) privilege for the
    `proc` table. As of MySQL 8.0, that table is not used; [`--routines`](mysqldump.html#option_mysqldump_routines)
    requires the global [`SELECT`](privileges-provided.html#priv_select) privilege
    instead.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，[`--routines`](mysqldump.html#option_mysqldump_routines)选项需要`proc`表的[`SELECT`](privileges-provided.html#priv_select)权限。从MySQL
    8.0开始，该表不再使用；[`--routines`](mysqldump.html#option_mysqldump_routines)现在需要全局的[`SELECT`](privileges-provided.html#priv_select)权限。
- en: Previously, it was possible to dump stored routine and event definitions together
    with their creation and modification timestamps, by dumping the `proc` and `event`
    tables. As of MySQL 8.0, those tables are not used, so it is not possible to dump
    timestamps.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，可以一起导出存储过程和事件定义以及它们的创建和修改时间戳，通过导出`proc`和`event`表。从MySQL 8.0开始，这些表不再使用，因此无法导出时间戳。
- en: Previously, creating a stored routine that contains illegal characters produced
    a warning. As of MySQL 8.0, this is an error.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，创建包含非法字符的存储过程会产生警告。从MySQL 8.0开始，这将会报错。
