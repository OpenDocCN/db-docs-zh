- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/using-stack-trace.html](https://dev.mysql.com/doc/refman/8.0/en/using-stack-trace.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/using-stack-trace.html](https://dev.mysql.com/doc/refman/8.0/en/using-stack-trace.html)
- en: 7.9.1.5 Using a Stack Trace
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 7.9.1.5 使用堆栈跟踪
- en: On some operating systems, the error log contains a stack trace if [**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server") dies unexpectedly. You can use this to find
    out where (and maybe why) [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")
    died. See [Section 7.4.2, “The Error Log”](error-log.html "7.4.2 The Error Log").
    To get a stack trace, you must not compile [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") with the `-fomit-frame-pointer` option to gcc. See [Section 7.9.1.1,
    “Compiling MySQL for Debugging”](compiling-for-debugging.html "7.9.1.1 Compiling
    MySQL for Debugging").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些操作系统上，如果[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")意外死机，错误日志中会包含堆栈跟踪。您可以使用这个来找出[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")死机的地方（也许是为什么）。参见[Section 7.4.2，“错误日志”](error-log.html
    "7.4.2 The Error Log")。要获得堆栈跟踪，您不能使用gcc的`-fomit-frame-pointer`选项来编译[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")。参见[Section 7.9.1.1，“为调试编译MySQL”](compiling-for-debugging.html
    "7.9.1.1 Compiling MySQL for Debugging")。
- en: 'A stack trace in the error log looks something like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 错误日志中的堆栈跟踪看起来像这样：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If resolution of function names for the trace fails, the trace contains less
    information:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果跟踪的函数名解析失败，跟踪将包含较少信息：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Newer versions of `glibc` stack trace functions also print the address as relative
    to the object. On `glibc`-based systems (Linux), the trace for an unexpected exit
    within a plugin looks something like:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 较新版本的`glibc`堆栈跟踪函数也会打印相对于对象的地址。在基于`glibc`的系统（Linux）上，插件意外退出的跟踪看起来像这样：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To translate the relative address (`+0x9a6`) into a file name and line number,
    use this command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要将相对地址(`+0x9a6`)翻译成文件名和行号，请使用以下命令：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The **addr2line** utility is part of the `binutils` package on Linux.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**addr2line**实用程序是Linux上`binutils`软件包的一部分。'
- en: 'On Solaris, the procedure is similar. The Solaris `printstack()` already prints
    relative addresses:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Solaris上，该过程类似。Solaris的`printstack()`已经打印了相对地址：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To translate, use this command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行翻译，请使用以下命令：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Windows already prints the address, function name and line:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Windows已经打印了地址、函数名和行号：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
