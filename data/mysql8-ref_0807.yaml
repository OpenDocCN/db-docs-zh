- en: 14.9.1 Natural Language Full-Text Searches
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.9.1 自然语言全文搜索
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/fulltext-natural-language.html](https://dev.mysql.com/doc/refman/8.0/en/fulltext-natural-language.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/fulltext-natural-language.html](https://dev.mysql.com/doc/refman/8.0/en/fulltext-natural-language.html)
- en: By default or with the `IN NATURAL LANGUAGE MODE` modifier, the [`MATCH()`](fulltext-search.html#function_match)
    function performs a natural language search for a string against a text collection.
    A collection is a set of one or more columns included in a `FULLTEXT` index. The
    search string is given as the argument to `AGAINST()`. For each row in the table,
    [`MATCH()`](fulltext-search.html#function_match) returns a relevance value; that
    is, a similarity measure between the search string and the text in that row in
    the columns named in the [`MATCH()`](fulltext-search.html#function_match) list.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下或使用`IN NATURAL LANGUAGE MODE`修饰符时，[`MATCH()`](fulltext-search.html#function_match)函数针对文本集合执行自然语言搜索。集合是包含在`FULLTEXT`索引中的一个或多个列的集合。搜索字符串作为参数传递给`AGAINST()`。对于表中的每一行，[`MATCH()`](fulltext-search.html#function_match)返回一个相关性值；即，搜索字符串与列中文本之间的相似度量，在[`MATCH()`](fulltext-search.html#function_match)列表中命名的列中。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By default, the search is performed in case-insensitive fashion. To perform
    a case-sensitive full-text search, use a case-sensitive or binary collation for
    the indexed columns. For example, a column that uses the `utf8mb4` character set
    of can be assigned a collation of `utf8mb4_0900_as_cs` or `utf8mb4_bin` to make
    it case-sensitive for full-text searches.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，搜索是以不区分大小写的方式执行的。要执行区分大小写的全文搜索，请为索引列使用区分大小写或二进制排序规则。例如，使用`utf8mb4`字符集的列可以分配`utf8mb4_0900_as_cs`或`utf8mb4_bin`排序规则，以使其对全文搜索区分大小写。
- en: 'When [`MATCH()`](fulltext-search.html#function_match) is used in a `WHERE`
    clause, as in the example shown earlier, the rows returned are automatically sorted
    with the highest relevance first as long as the following conditions are met:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`MATCH()`](fulltext-search.html#function_match)在`WHERE`子句中使用时，如前面示例所示，只要满足以下条件，返回的行将自动按相关性最高的顺序排序：
- en: There must be no explicit `ORDER BY` clause.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不得有显式的`ORDER BY`子句。
- en: The search must be performed using a full-text index scan rather than a table
    scan.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索必须使用全文索引扫描，而不是表扫描。
- en: If the query joins tables, the full-text index scan must be the leftmost non-constant
    table in the join.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果查询涉及表连接，则全文索引扫描必须是连接中最左边的非常量表。
- en: Given the conditions just listed, it is usually less effort to specify using
    `ORDER BY` an explicit sort order when one is necessary or desired.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于刚刚列出的条件，当需要或希望时，通常更容易通过使用`ORDER BY`指定显式排序顺序。
- en: Relevance values are nonnegative floating-point numbers. Zero relevance means
    no similarity. Relevance is computed based on the number of words in the row (document),
    the number of unique words in the row, the total number of words in the collection,
    and the number of rows that contain a particular word.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 相关性值是非负浮点数。零相关性表示没有相似性。相关性是基于行中的单词数、行中唯一单词数、集合中的总单词数以及包含特定单词的行数进行计算的。
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The term “document” may be used interchangeably with the term “row”, and both
    terms refer to the indexed part of the row. The term “collection” refers to the
    indexed columns and encompasses all rows.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “文档”一词可以与“行”一词互换使用，两个术语都指的是行的索引部分。“集合”一词指的是索引列，并包括所有行。
- en: 'To simply count matches, you could use a query like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要简单计算匹配项，可以使用如下查询：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You might find it quicker to rewrite the query as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现将查询重写为以下形式更快：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first query does some extra work (sorting the results by relevance) but
    also can use an index lookup based on the `WHERE` clause. The index lookup might
    make the first query faster if the search matches few rows. The second query performs
    a full table scan, which might be faster than the index lookup if the search term
    was present in most rows.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个查询做了一些额外的工作（按相关性对结果进行排序），但也可以根据`WHERE`子句使用索引查找。如果搜索匹配的行数较少，索引查找可能会使第一个查询更快。第二个查询执行全表扫描，如果搜索词在大多数行中存在，可能比索引查找更快。
- en: For natural-language full-text searches, the columns named in the [`MATCH()`](fulltext-search.html#function_match)
    function must be the same columns included in some `FULLTEXT` index in your table.
    For the preceding query, note that the columns named in the [`MATCH()`](fulltext-search.html#function_match)
    function (`title` and `body`) are the same as those named in the definition of
    the `article` table's `FULLTEXT` index. To search the `title` or `body` separately,
    you would create separate `FULLTEXT` indexes for each column.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自然语言全文搜索，[`MATCH()`](fulltext-search.html#function_match)函数中命名的列必须与表中某个`FULLTEXT`索引中包含的相同列相同。对于上述查询，请注意[`MATCH()`](fulltext-search.html#function_match)函数中命名的列（`title`和`body`）与`article`表的`FULLTEXT`索引定义中命名的列相同。要分别搜索`title`或`body`，您需要为每个列创建单独的`FULLTEXT`索引。
- en: You can also perform a boolean search or a search with query expansion. These
    search types are described in [Section 14.9.2, “Boolean Full-Text Searches”](fulltext-boolean.html
    "14.9.2 Boolean Full-Text Searches"), and [Section 14.9.3, “Full-Text Searches
    with Query Expansion”](fulltext-query-expansion.html "14.9.3 Full-Text Searches
    with Query Expansion").
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以执行布尔搜索或带有查询扩展的搜索。这些搜索类型在[第14.9.2节，“布尔全文搜索”](fulltext-boolean.html "14.9.2 Boolean
    Full-Text Searches")和[第14.9.3节，“带有查询扩展的全文搜索”](fulltext-query-expansion.html "14.9.3 Full-Text
    Searches with Query Expansion")中有描述。
- en: A full-text search that uses an index can name columns only from a single table
    in the [`MATCH()`](fulltext-search.html#function_match) clause because an index
    cannot span multiple tables. For `MyISAM` tables, a boolean search can be done
    in the absence of an index (albeit more slowly), in which case it is possible
    to name columns from multiple tables.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引的全文搜索在[`MATCH()`](fulltext-search.html#function_match)子句中只能命名来自单个表的列，因为索引不能跨越多个表。对于`MyISAM`表，如果没有索引，可以执行布尔搜索（尽管速度较慢），在这种情况下，可以命名来自多个表的列。
- en: 'The preceding example is a basic illustration that shows how to use the [`MATCH()`](fulltext-search.html#function_match)
    function where rows are returned in order of decreasing relevance. The next example
    shows how to retrieve the relevance values explicitly. Returned rows are not ordered
    because the [`SELECT`](select.html "15.2.13 SELECT Statement") statement includes
    neither `WHERE` nor `ORDER BY` clauses:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例是一个基本示例，展示了如何在返回的行按相关性递减的顺序中使用[`MATCH()`](fulltext-search.html#function_match)函数。下一个示例展示了如何显式检索相关性值。返回的行没有排序，因为[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句中既没有`WHERE`也没有`ORDER BY`子句：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following example is more complex. The query returns the relevance values
    and it also sorts the rows in order of decreasing relevance. To achieve this result,
    specify [`MATCH()`](fulltext-search.html#function_match) twice: once in the [`SELECT`](select.html
    "15.2.13 SELECT Statement") list and once in the `WHERE` clause. This causes no
    additional overhead, because the MySQL optimizer notices that the two [`MATCH()`](fulltext-search.html#function_match)
    calls are identical and invokes the full-text search code only once.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例更为复杂。该查询返回相关性值，并按相关性递减的顺序对行进行排序。为了实现这个结果，在[`SELECT`](select.html "15.2.13 SELECT
    Statement")列表中指定[`MATCH()`](fulltext-search.html#function_match)两次：一次在`SELECT`列表中，一次在`WHERE`子句中。这不会增加额外开销，因为MySQL优化器注意到两次[`MATCH()`](fulltext-search.html#function_match)调用是相同的，并且只调用一次全文搜索代码。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A phrase that is enclosed within double quote (`"`) characters matches only
    rows that contain the phrase *literally, as it was typed*. The full-text engine
    splits the phrase into words and performs a search in the `FULLTEXT` index for
    the words. Nonword characters need not be matched exactly: Phrase searching requires
    only that matches contain exactly the same words as the phrase and in the same
    order. For example, `"test phrase"` matches `"test, phrase"`. If the phrase contains
    no words that are in the index, the result is empty. For example, if all words
    are either stopwords or shorter than the minimum length of indexed words, the
    result is empty.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 用双引号(`"`)括起来的短语仅匹配包含该短语的行*文字，就像它被输入的那样*。全文引擎将短语拆分为单词，并在`FULLTEXT`索引中为这些单词执行搜索。非单词字符不需要完全匹配：短语搜索只需要匹配包含与短语完全相同的单词并且顺序相同的匹配项。例如，`"test
    phrase"`匹配`"test, phrase"`。如果短语不包含索引中的任何单词，则结果为空。例如，如果所有单词要么是停用词要么比索引单词的最小长度短，结果为空。
- en: The MySQL `FULLTEXT` implementation regards any sequence of true word characters
    (letters, digits, and underscores) as a word. That sequence may also contain apostrophes
    (`'`), but not more than one in a row. This means that `aaa'bbb` is regarded as
    one word, but `aaa''bbb` is regarded as two words. Apostrophes at the beginning
    or the end of a word are stripped by the `FULLTEXT` parser; `'aaa'bbb'` would
    be parsed as `aaa'bbb`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的`FULLTEXT`实现将任何真实单词字符序列（字母，数字和下划线）视为一个单词。该序列也可以包含撇号（`'`），但不能连续超过一个。这意味着`aaa'bbb`被视为一个单词，但`aaa''bbb`被视为两个单词。单词开头或结尾的撇号��被`FULLTEXT`解析器去除；`'aaa'bbb'`会被解析为`aaa'bbb`。
- en: The built-in `FULLTEXT` parser determines where words start and end by looking
    for certain delimiter characters; for example,  (space), `,` (comma), and `.`
    (period). If words are not separated by delimiters (as in, for example, Chinese),
    the built-in `FULLTEXT` parser cannot determine where a word begins or ends. To
    be able to add words or other indexed terms in such languages to a `FULLTEXT`
    index that uses the built-in `FULLTEXT` parser, you must preprocess them so that
    they are separated by some arbitrary delimiter. Alternatively, you can create
    `FULLTEXT` indexes using the ngram parser plugin (for Chinese, Japanese, or Korean)
    or the MeCab parser plugin (for Japanese).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的`FULLTEXT`解析器通过查找特定的分隔符字符来确定单词的起始和结束位置；例如，（空格），`,`（逗号）和`.`（句号）。如果单词没有被分隔符（例如，中文）分隔，内置的`FULLTEXT`解析器无法确定单词的起始或结束位置。为了能够将这些语言中的单词或其他索引术语添加到使用内置`FULLTEXT`解析器的`FULLTEXT`索引中，您必须预处理它们，以便它们被某种任意的分隔符分隔。或者，您可以使用ngram解析器插件（用于中文，日文或韩文）或MeCab解析器插件（用于日文）创建`FULLTEXT`索引。
- en: It is possible to write a plugin that replaces the built-in full-text parser.
    For details, see [The MySQL Plugin API](/doc/extending-mysql/8.0/en/plugin-api.html).
    For example parser plugin source code, see the `plugin/fulltext` directory of
    a MySQL source distribution.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以编写一个插件来替换内置的全文解析器。有关详细信息，请参阅[MySQL插件API](/doc/extending-mysql/8.0/en/plugin-api.html)。例如解析器插件源代码，请查看MySQL源代码分发的`plugin/fulltext`目录。
- en: 'Some words are ignored in full-text searches:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在全文搜索中会忽略一些词：
- en: 'Any word that is too short is ignored. The default minimum length of words
    that are found by full-text searches is three characters for `InnoDB` search indexes,
    or four characters for `MyISAM`. You can control the cutoff by setting a configuration
    option before creating the index: [`innodb_ft_min_token_size`](innodb-parameters.html#sysvar_innodb_ft_min_token_size)
    configuration option for `InnoDB` search indexes, or [`ft_min_word_len`](server-system-variables.html#sysvar_ft_min_word_len)
    for `MyISAM`.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何太短的单词都会被忽略。通过全文搜索找到的单词的默认最小长度为`InnoDB`搜索索引为三个字符，或者`MyISAM`为四个字符。您可以通过在创建索引之前设置配置选项来控制截断：`InnoDB`搜索索引的[`innodb_ft_min_token_size`](innodb-parameters.html#sysvar_innodb_ft_min_token_size)配置选项，或者`MyISAM`的[`ft_min_word_len`](server-system-variables.html#sysvar_ft_min_word_len)。
- en: Note
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This behavior does not apply to `FULLTEXT` indexes that use the ngram parser.
    For the ngram parser, token length is defined by the [`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)
    option.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种行为不适用于使用ngram解析器的`FULLTEXT`索引。对于ngram解析器，标记长度由[`ngram_token_size`](server-system-variables.html#sysvar_ngram_token_size)选项定义。
- en: Words in the stopword list are ignored. A stopword is a word such as “the” or
    “some” that is so common that it is considered to have zero semantic value. There
    is a built-in stopword list, but it can be overridden by a user-defined list.
    The stopword lists and related configuration options are different for `InnoDB`
    search indexes and `MyISAM` ones. Stopword processing is controlled by the configuration
    options [`innodb_ft_enable_stopword`](innodb-parameters.html#sysvar_innodb_ft_enable_stopword),
    [`innodb_ft_server_stopword_table`](innodb-parameters.html#sysvar_innodb_ft_server_stopword_table),
    and [`innodb_ft_user_stopword_table`](innodb-parameters.html#sysvar_innodb_ft_user_stopword_table)
    for `InnoDB` search indexes, and [`ft_stopword_file`](server-system-variables.html#sysvar_ft_stopword_file)
    for `MyISAM` ones.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停用词列表中的单词会被忽略。停用词是一些如“the”或“some”这样常见以至于被认为没有语义价值的单词。有一个内置的停用词列表，但可以被用户定义的列表覆盖。停用词列表和相关的配置选项对`InnoDB`搜索索引和`MyISAM`索引是不同的。停用词处理由配置选项[`innodb_ft_enable_stopword`](innodb-parameters.html#sysvar_innodb_ft_enable_stopword)，[`innodb_ft_server_stopword_table`](innodb-parameters.html#sysvar_innodb_ft_server_stopword_table)和[`innodb_ft_user_stopword_table`](innodb-parameters.html#sysvar_innodb_ft_user_stopword_table)控制`InnoDB`搜索索引，以及[`ft_stopword_file`](server-system-variables.html#sysvar_ft_stopword_file)控制`MyISAM`索引。
- en: See [Section 14.9.4, “Full-Text Stopwords”](fulltext-stopwords.html "14.9.4 Full-Text
    Stopwords") to view default stopword lists and how to change them. The default
    minimum word length can be changed as described in [Section 14.9.6, “Fine-Tuning
    MySQL Full-Text Search”](fulltext-fine-tuning.html "14.9.6 Fine-Tuning MySQL Full-Text
    Search").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[第14.9.4节，“全文停用词”](fulltext-stopwords.html "14.9.4 Full-Text Stopwords")查看默认停用词列表以及如何更改它们。默认最小单词长度可以按照[第14.9.6节，“调整MySQL全文搜索”](fulltext-fine-tuning.html
    "14.9.6 Fine-Tuning MySQL Full-Text Search")中描述的方式进行更改。
- en: Every correct word in the collection and in the query is weighted according
    to its significance in the collection or query. Thus, a word that is present in
    many documents has a lower weight, because it has lower semantic value in this
    particular collection. Conversely, if the word is rare, it receives a higher weight.
    The weights of the words are combined to compute the relevance of the row. This
    technique works best with large collections.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 集合和查询中的每个正确单词根据其在集合或查询中的重要性进行加权。因此，出现在许多文档中的单词权重较低，因为在这个特定集合中它的语义价值较低。相反，如果单词很少见，它将获得更高的权重。单词的权重组合在一起计算行的相关性。这种技术在大型集合中效果最佳。
- en: MyISAM Limitation
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MyISAM限制
- en: 'For very small tables, word distribution does not adequately reflect their
    semantic value, and this model may sometimes produce bizarre results for search
    indexes on `MyISAM` tables. For example, although the word “MySQL” is present
    in every row of the `articles` table shown earlier, a search for the word in a
    `MyISAM` search index produces no results:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非常小的表，单词分布不能充分反映它们的语义价值，这种模型有时可能会为`MyISAM`表上的搜索索引产生奇怪的结果。例如，尽管单词“MySQL”出现在先前显示的`articles`表的每一行中，但在`MyISAM`搜索索引中搜索该单词却没有结果：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The search result is empty because the word “MySQL” is present in at least 50%
    of the rows, and so is effectively treated as a stopword. This filtering technique
    is more suitable for large data sets, where you might not want the result set
    to return every second row from a 1GB table, than for small data sets where it
    might cause poor results for popular terms.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于单词“MySQL”至少出现在50%的行中，搜索结果为空，因此实际上被视为停用词。这种过滤技术更适用于大数据集，您可能不希望结果集从1GB表中返回每一秒的行，而不适用于小数据集，因为这可能导致热门术语的结果不佳。
- en: The 50% threshold can surprise you when you first try full-text searching to
    see how it works, and makes `InnoDB` tables more suited to experimentation with
    full-text searches. If you create a `MyISAM` table and insert only one or two
    rows of text into it, every word in the text occurs in at least 50% of the rows.
    As a result, no search returns any results until the table contains more rows.
    Users who need to bypass the 50% limitation can build search indexes on `InnoDB`
    tables, or use the boolean search mode explained in [Section 14.9.2, “Boolean
    Full-Text Searches”](fulltext-boolean.html "14.9.2 Boolean Full-Text Searches").
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次尝试全文搜索以查看其工作原理时，50%的阈值可能会让您感到惊讶，并使`InnoDB`表更适合用于全文搜索的实验。如果您创建一个`MyISAM`表并只插入一两行文本，那么文本中的每个单词至少在50%的行中出现。因此，在表包含更多行之前，任何搜索都不会返回任何结果。需要绕过50%限制的用户可以在`InnoDB`表上构建搜索索引，或者使用[第14.9.2节，“布尔全文搜索”](fulltext-boolean.html
    "14.9.2 Boolean Full-Text Searches")中解释的布尔搜索模式。
