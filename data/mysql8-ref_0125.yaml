- en: 5.3.3 Loading Data into a Table
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.3.3 将数据加载到表中
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/loading-tables.html](https://dev.mysql.com/doc/refman/8.0/en/loading-tables.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/loading-tables.html](https://dev.mysql.com/doc/refman/8.0/en/loading-tables.html)
- en: After creating your table, you need to populate it. The [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") and [`INSERT`](insert.html "15.2.7 INSERT Statement")
    statements are useful for this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 创建表后，你需要填充它。[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA 语句") 和 [`INSERT`](insert.html
    "15.2.7 INSERT 语句") 语句对此很有用。
- en: Suppose that your pet records can be described as shown here. (Observe that
    MySQL expects dates in `'*`YYYY-MM-DD`*'` format; this may differ from what you
    are used to.)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的宠物记录可以如下所示描述。（注意 MySQL 期望日期以 `'*`YYYY-MM-DD`*'` 格式；这可能与你习惯的格式不同。）
- en: '| name | owner | species | sex | birth | death |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 名字 | 主人 | 种类 | 性别 | 出生 | 死亡 |'
- en: '| Fluffy | Harold | cat | f | 1993-02-04 |  |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| Fluffy | Harold | 猫 | f | 1993-02-04 |  |'
- en: '| Claws | Gwen | cat | m | 1994-03-17 |  |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| Claws | Gwen | 猫 | m | 1994-03-17 |  |'
- en: '| Buffy | Harold | dog | f | 1989-05-13 |  |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| Buffy | Harold | 狗 | f | 1989-05-13 |  |'
- en: '| Fang | Benny | dog | m | 1990-08-27 |  |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| Fang | Benny | 狗 | m | 1990-08-27 |  |'
- en: '| Bowser | Diane | dog | m | 1979-08-31 | 1995-07-29 |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| Bowser | Diane | 狗 | m | 1979-08-31 | 1995-07-29 |'
- en: '| Chirpy | Gwen | bird | f | 1998-09-11 |  |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| Chirpy | Gwen | 鸟 | f | 1998-09-11 |  |'
- en: '| Whistler | Gwen | bird |  | 1997-12-09 |  |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| Whistler | Gwen | 鸟 |  | 1997-12-09 |  |'
- en: '| Slim | Benny | snake | m | 1996-04-29 |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| Slim | Benny | 蛇 | m | 1996-04-29 |  |'
- en: Because you are beginning with an empty table, an easy way to populate it is
    to create a text file containing a row for each of your animals, then load the
    contents of the file into the table with a single statement.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你从一个空表开始，一个简单的方法是创建一个包含每只动物一行的文本文件，然后用一条语句将文件内容加载到表中。
- en: 'You could create a text file `pet.txt` containing one record per line, with
    values separated by tabs, and given in the order in which the columns were listed
    in the [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement.
    For missing values (such as unknown sexes or death dates for animals that are
    still living), you can use `NULL` values. To represent these in your text file,
    use `\N` (backslash, capital-N). For example, the record for Whistler the bird
    would look like this (where the whitespace between values is a single tab character):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建一个文本文件 `pet.txt`，每行包含一条记录，值之间用制表符分隔，并按照 [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE 语句") 语句中列出的顺序给出。对于缺失的值（例如未知性别或仍然活着的动物的死亡日期），你可以使用 `NULL`
    值。在文本文件中表示这些值，使用 `\N`（反斜杠，大写 N）。例如，鸟 Whistler 的记录将如下所示（值之间的空格是一个制表符字符）：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To load the text file `pet.txt` into the `pet` table, use this statement:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要将文本文件 `pet.txt` 加载到 `pet` 表中，请使用以下语句：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you created the file on Windows with an editor that uses `\r\n` as a line
    terminator, you should use this statement instead:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Windows 上使用以 `\r\n` 作为行终止符的编辑器创建文件，你应该使用这条语句：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (On an Apple machine running macOS, you would likely want to use `LINES TERMINATED
    BY '\r'`.)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: (在运行 macOS 的 Apple 机器上，你可能想使用 `LINES TERMINATED BY '\r'`。)
- en: You can specify the column value separator and end of line marker explicitly
    in the [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement") statement if
    you wish, but the defaults are tab and linefeed. These are sufficient for the
    statement to read the file `pet.txt` properly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以在 [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA 语句") 语句中明确指定列值分隔符和行结束标记，但默认值是制表符和换行符。这对于语句正确读取文件
    `pet.txt` 是足够的。
- en: If the statement fails, it is likely that your MySQL installation does not have
    local file capability enabled by default. See [Section 8.1.6, “Security Considerations
    for LOAD DATA LOCAL”](load-data-local-security.html "8.1.6 Security Considerations
    for LOAD DATA LOCAL"), for information on how to change this.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果语句失败，很可能是因为你的 MySQL 安装默认没有启用本地文件功能。请参阅 [Section 8.1.6, “LOAD DATA LOCAL 安全注意事项”](load-data-local-security.html
    "8.1.6 LOAD DATA LOCAL 安全注意事项")，了解如何更改此设置。
- en: 'When you want to add new records one at a time, the [`INSERT`](insert.html
    "15.2.7 INSERT Statement") statement is useful. In its simplest form, you supply
    values for each column, in the order in which the columns were listed in the [`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement. Suppose
    that Diane gets a new hamster named “Puffball.” You could add a new record using
    an [`INSERT`](insert.html "15.2.7 INSERT Statement") statement like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想逐个添加新记录时，[`INSERT`](insert.html "15.2.7 INSERT Statement")语句很有用。在其最简单的形式中，您按照[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句中列出列的顺序为每一列提供值。假设黛安获得了一只名为“Puffball”的新仓鼠。您可以使用类似于以下的[`INSERT`](insert.html
    "15.2.7 INSERT Statement")语句添加新记录：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: String and date values are specified as quoted strings here. Also, with [`INSERT`](insert.html
    "15.2.7 INSERT Statement"), you can insert `NULL` directly to represent a missing
    value. You do not use `\N` like you do with [`LOAD DATA`](load-data.html "15.2.9 LOAD
    DATA Statement").
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串和日期值在此处被指定为带引号的字符串。此外，使用[`INSERT`](insert.html "15.2.7 INSERT Statement")，您可以直接插入`NULL`表示缺失值。您不像在[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement")中使用`\N`。
- en: From this example, you should be able to see that there would be a lot more
    typing involved to load your records initially using several [`INSERT`](insert.html
    "15.2.7 INSERT Statement") statements rather than a single [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") statement.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个例子中，您应该能够看到，使用多个[`INSERT`](insert.html "15.2.7 INSERT Statement")语句来最初加载您的记录将涉及更多的输入，而不是使用单个[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement")语句。
