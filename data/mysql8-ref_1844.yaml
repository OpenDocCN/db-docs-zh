- en: 26.2.2 LIST Partitioning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 26.2.2 LIST分区
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-list.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-list.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-list.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-list.html)
- en: List partitioning in MySQL is similar to range partitioning in many ways. As
    in partitioning by `RANGE`, each partition must be explicitly defined. The chief
    difference between the two types of partitioning is that, in list partitioning,
    each partition is defined and selected based on the membership of a column value
    in one of a set of value lists, rather than in one of a set of contiguous ranges
    of values. This is done by using `PARTITION BY LIST(*`expr`*)` where *`expr`*
    is a column value or an expression based on a column value and returning an integer
    value, and then defining each partition by means of a `VALUES IN (*`value_list`*)`,
    where *`value_list`* is a comma-separated list of integers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL中的列表分区在许多方面类似于范围分区。与按`RANGE`分区一样，每个分区必须明确定义。两种分区类型之间的主要区别在于，在列表分区中，每个分区是根据列值在一组值列表中的成员资格而定义和选择的，而不是在一组连续值范围中的一个。这是通过使用`PARTITION
    BY LIST(*`expr`*)`来完成的，其中*`expr`*是一个列值或基于列值并返回整数值的表达式，然后通过`VALUES IN (*`value_list`*)`来定义每个分区，其中*`value_list`*是一个逗号分隔的整数列表。
- en: Note
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In MySQL 8.0, it is possible to match against only a list of integers (and possibly
    `NULL`—see [Section 26.2.7, “How MySQL Partitioning Handles NULL”](partitioning-handling-nulls.html
    "26.2.7 How MySQL Partitioning Handles NULL")) when partitioning by `LIST`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，当按`LIST`分区时，只能匹配一组整数（可能包括`NULL`—请参见[第26.2.7节，“MySQL分区如何处理NULL”](partitioning-handling-nulls.html
    "26.2.7 How MySQL Partitioning Handles NULL")）。
- en: However, other column types may be used in value lists when employing `LIST
    COLUMN` partitioning, which is described later in this section.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在使用`LIST COLUMN`分区时，可以在值列表中使用其他列类型，该分区稍后在本节中描述。
- en: Unlike the case with partitions defined by range, list partitions do not need
    to be declared in any particular order. For more detailed syntactical information,
    see [Section 15.1.20, “CREATE TABLE Statement”](create-table.html "15.1.20 CREATE
    TABLE Statement").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与按范围定义的分区不同，列表分区不需要按任何特定顺序声明。有关更详细的语法信息，请参见[第15.1.20节，“CREATE TABLE Statement”](create-table.html
    "15.1.20 CREATE TABLE Statement")。
- en: 'For the examples that follow, we assume that the basic definition of the table
    to be partitioned is provided by the [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") statement shown here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于接下来的示例，我们假设要分区的表的基本定义由此处显示的[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement")语句提供：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (This is the same table used as a basis for the examples in [Section 26.2.1,
    “RANGE Partitioning”](partitioning-range.html "26.2.1 RANGE Partitioning"). As
    with the other partitioning examples, we assume that the [`default_storage_engine`](server-system-variables.html#sysvar_default_storage_engine)
    is `InnoDB`.)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: （这是用作[第26.2.1节，“RANGE分区”](partitioning-range.html "26.2.1 RANGE Partitioning")示例基础的相同表。与其他分区示例一样，我们假设[`default_storage_engine`](server-system-variables.html#sysvar_default_storage_engine)为`InnoDB`。）
- en: Suppose that there are 20 video stores distributed among 4 franchises as shown
    in the following table.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有20家视频商店分布在4个特许经营店中，如下表所示。
- en: '| Region | Store ID Numbers |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 地区 | 商店ID号码 |'
- en: '| North | 3, 5, 6, 9, 17 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 北部 | 3, 5, 6, 9, 17 |'
- en: '| East | 1, 2, 10, 11, 19, 20 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 东部 | 1, 2, 10, 11, 19, 20 |'
- en: '| West | 4, 12, 13, 14, 18 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 西部 | 4, 12, 13, 14, 18 |'
- en: '| Central | 7, 8, 15, 16 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 中部 | 7, 8, 15, 16 |'
- en: 'To partition this table in such a way that rows for stores belonging to the
    same region are stored in the same partition, you could use the [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statement shown here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此表分区，使属于同一地区的商店行存储在同一分区中，您可以使用此处显示的[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement")语句：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This makes it easy to add or drop employee records relating to specific regions
    to or from the table. For instance, suppose that all stores in the West region
    are sold to another company. In MySQL 8.0, all rows relating to employees working
    at stores in that region can be deleted with the query `ALTER TABLE employees
    TRUNCATE PARTITION pWest`, which can be executed much more efficiently than the
    equivalent [`DELETE`](delete.html "15.2.2 DELETE Statement") statement `DELETE
    FROM employees WHERE store_id IN (4,12,13,14,18);`. (Using `ALTER TABLE employees
    DROP PARTITION pWest` would also delete all of these rows, but would also remove
    the partition `pWest` from the definition of the table; you would need to use
    an `ALTER TABLE ... ADD PARTITION` statement to restore the table's original partitioning
    scheme.)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得很容易向表中添加或删除与特定区域相关的员工记录。例如，假设西区的所有商店都被卖给另一家公司。在MySQL 8.0中，可以使用查询`ALTER TABLE
    employees TRUNCATE PARTITION pWest`删除与该区域商店工作的员工相关的所有行，这比等效的[`DELETE`](delete.html
    "15.2.2 DELETE Statement")语句`DELETE FROM employees WHERE store_id IN (4,12,13,14,18);`执行效率更高。（使用`ALTER
    TABLE employees DROP PARTITION pWest`也会删除所有这些行，但也会从表的定义中删除分区`pWest`；您需要使用`ALTER
    TABLE ... ADD PARTITION`语句来恢复表的原始分区方案。）
- en: As with `RANGE` partitioning, it is possible to combine `LIST` partitioning
    with partitioning by hash or key to produce a composite partitioning (subpartitioning).
    See [Section 26.2.6, “Subpartitioning”](partitioning-subpartitions.html "26.2.6 Subpartitioning").
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与`RANGE`分区一样，可以将`LIST`分区与哈希或键分区组合以生成复合分区（子分区）。请参见[第26.2.6节，“子分区”](partitioning-subpartitions.html
    "26.2.6 Subpartitioning")。
- en: 'Unlike the case with `RANGE` partitioning, there is no “catch-all” such as
    `MAXVALUE`; all expected values for the partitioning expression should be covered
    in `PARTITION ... VALUES IN (...)` clauses. An [`INSERT`](insert.html "15.2.7 INSERT
    Statement") statement containing an unmatched partitioning column value fails
    with an error, as shown in this example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与`RANGE`分区不同，没有像`MAXVALUE`这样的“捕获所有”；分区表达式的所有预期值应该在`PARTITION ... VALUES IN (...)`子句中涵盖。包含不匹配的分区列值的[`INSERT`](insert.html
    "15.2.7 INSERT Statement")语句会失败并显示错误，如下例所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When inserting multiple rows using a single [`INSERT`](insert.html "15.2.7 INSERT
    Statement") statement into a single [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine") table, `InnoDB` considers the statement a single transaction,
    so that the presence of any unmatched values causes the statement to fail completely,
    and so no rows are inserted.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用单个[`INSERT`](insert.html "15.2.7 INSERT Statement")语句将多行插入单个[`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine")表时，`InnoDB`将该语句视为单个事务，因此任何不匹配的值的存在都会导致该语句完全失败，因此不会插入任何行。
- en: You can cause this type of error to be ignored by using the `IGNORE` keyword,
    although a warning is issued for each row containing unmatched partitioning column
    values, as shown here.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`IGNORE`关键字来忽略这种类型的错误，尽管对于每一行包含不匹配的分区列值的情况会发出警告，如下所示。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can see in the output of the following [`TABLE`](table.html "15.2.16 TABLE
    Statement") statement that rows containing unmatched partitioning column values
    were silently rejected, while rows containing no unmatched values were inserted
    into the table:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下[`TABLE`](table.html "15.2.16 TABLE Statement")语句的输出中看到，包含不匹配的分区列值的行被静默拒绝，而不包含不匹配值的行被插入到表中：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: MySQL also provides support for `LIST COLUMNS` partitioning, a variant of `LIST`
    partitioning that enables you to use columns of types other than integer for partitioning
    columns, and to use multiple columns as partitioning keys. For more information,
    see [Section 26.2.3.2, “LIST COLUMNS partitioning”](partitioning-columns-list.html
    "26.2.3.2 LIST COLUMNS partitioning").
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL还支持`LIST COLUMNS`分区，这是`LIST`分区的一种变体，允许您使用除整数以外的其他类型的列作为分区列，并使用多个列作为分区键。有关更多信息，请参见[第26.2.3.2节，“LIST
    COLUMNS分区”](partitioning-columns-list.html "26.2.3.2 LIST COLUMNS partitioning")。
