- en: 15.1.9 ALTER TABLE Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.1.9 ALTER TABLE 语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/alter-table.html](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/alter-table.html](https://dev.mysql.com/doc/refman/8.0/en/alter-table.html)
- en: '[15.1.9.1 ALTER TABLE Partition Operations](alter-table-partition-operations.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.1.9.1 ALTER TABLE 分区操作](alter-table-partition-operations.html)'
- en: '[15.1.9.2 ALTER TABLE and Generated Columns](alter-table-generated-columns.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.1.9.2 ALTER TABLE 和生成列](alter-table-generated-columns.html)'
- en: '[15.1.9.3 ALTER TABLE Examples](alter-table-examples.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.1.9.3 ALTER TABLE 示例](alter-table-examples.html)'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") changes the
    structure of a table. For example, you can add or delete columns, create or destroy
    indexes, change the type of existing columns, or rename columns or the table itself.
    You can also change characteristics such as the storage engine used for the table
    or the table comment.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") 改变表的结构。例如，您可以添加或删除列，创建或销毁索引，更改现有列的类型，或重命名列或表本身。您还可以更改诸如用于表的存储引擎或表注释等特性。'
- en: To use [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement"), you
    need [`ALTER`](privileges-provided.html#priv_alter), [`CREATE`](privileges-provided.html#priv_create),
    and [`INSERT`](privileges-provided.html#priv_insert) privileges for the table.
    Renaming a table requires [`ALTER`](privileges-provided.html#priv_alter) and [`DROP`](privileges-provided.html#priv_drop)
    on the old table, [`ALTER`](privileges-provided.html#priv_alter), [`CREATE`](privileges-provided.html#priv_create),
    and [`INSERT`](privileges-provided.html#priv_insert) on the new table.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")，您需要对表具有[`ALTER`](privileges-provided.html#priv_alter)、[`CREATE`](privileges-provided.html#priv_create)和[`INSERT`](privileges-provided.html#priv_insert)权限。重命名表需要对旧表具有[`ALTER`](privileges-provided.html#priv_alter)和[`DROP`](privileges-provided.html#priv_drop)权限，对新表具有[`ALTER`](privileges-provided.html#priv_alter)、[`CREATE`](privileges-provided.html#priv_create)和[`INSERT`](privileges-provided.html#priv_insert)权限。
- en: Following the table name, specify the alterations to be made. If none are given,
    [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") does nothing.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表名之后，指定要进行的更改。如果没有给出任何更改，则[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement")不执行任何操作。
- en: The syntax for many of the permissible alterations is similar to clauses of
    the [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement.
    *`column_definition`* clauses use the same syntax for `ADD` and `CHANGE` as for
    [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement"). For more
    information, see [Section 15.1.20, “CREATE TABLE Statement”](create-table.html
    "15.1.20 CREATE TABLE Statement").
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多允许的更改的语法与[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句的子句类似。*`column_definition`*
    子句对于 `ADD` 和 `CHANGE` 使用与[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE
    Statement")相同的语法。有关更多信息，请参见[Section 15.1.20, “CREATE TABLE Statement”](create-table.html
    "15.1.20 CREATE TABLE Statement")。
- en: The word `COLUMN` is optional and can be omitted, except for `RENAME COLUMN`
    (to distinguish a column-renaming operation from the `RENAME` table-renaming operation).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COLUMN` 这个词是可选的，可以省略，除了 `RENAME COLUMN`（用于区分列重命名操作和表重命名操作）。'
- en: 'Multiple `ADD`, `ALTER`, `DROP`, and `CHANGE` clauses are permitted in a single
    [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") statement, separated
    by commas. This is a MySQL extension to standard SQL, which permits only one of
    each clause per [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    statement. For example, to drop multiple columns in a single statement, do this:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单个[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句中允许多个 `ADD`、`ALTER`、`DROP`
    和 `CHANGE` 子句，用逗号分隔。这是 MySQL 对标准 SQL 的扩展，标准 SQL 每个[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")语句只允许每个子句中的一个。例如，要在单个语句中删除多个列，请执行以下操作：
- en: '[PRE1]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If a storage engine does not support an attempted [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") operation, a warning may result. Such warnings
    can be displayed with [`SHOW WARNINGS`](show-warnings.html "15.7.7.42 SHOW WARNINGS
    Statement"). See [Section 15.7.7.42, “SHOW WARNINGS Statement”](show-warnings.html
    "15.7.7.42 SHOW WARNINGS Statement"). For information on troubleshooting [`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement"), see [Section B.3.6.1,
    “Problems with ALTER TABLE”](alter-table-problems.html "B.3.6.1 Problems with
    ALTER TABLE").
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果存储引擎不支持尝试的[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")操作，则可能会产生警告。此类警告可以使用[`SHOW
    WARNINGS`](show-warnings.html "15.7.7.42 SHOW WARNINGS Statement")显示。请参阅[第15.7.7.42节，“SHOW
    WARNINGS语句”](show-warnings.html "15.7.7.42 SHOW WARNINGS Statement")。有关故障排除[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")的信息，请参阅[附录B.3.6.1，“ALTER
    TABLE问题”](alter-table-problems.html "B.3.6.1 Problems with ALTER TABLE")。
- en: For information about generated columns, see [Section 15.1.9.2, “ALTER TABLE
    and Generated Columns”](alter-table-generated-columns.html "15.1.9.2 ALTER TABLE
    and Generated Columns").
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关生成列的信息，请参阅[第15.1.9.2节，“ALTER TABLE和生成列”](alter-table-generated-columns.html
    "15.1.9.2 ALTER TABLE and Generated Columns")。
- en: For usage examples, see [Section 15.1.9.3, “ALTER TABLE Examples”](alter-table-examples.html
    "15.1.9.3 ALTER TABLE Examples").
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关用法示例，请参阅[第15.1.9.3节，“ALTER TABLE示例”](alter-table-examples.html "15.1.9.3 ALTER
    TABLE Examples")。
- en: '`InnoDB` in MySQL 8.0.17 and later supports addition of multi-valued indexes
    on JSON columns using a *`key_part`* specification can take the form `(CAST *`json_path`*
    AS *`type`* ARRAY)`. See [Multi-Valued Indexes](create-index.html#create-index-multi-valued
    "Multi-Valued Indexes"), for detailed information regarding multi-valued index
    creation and usage of, as well as restrictions and limitations on multi-valued
    indexes.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.17及更高版本中，`InnoDB`支持对JSON列添加多值索引，使用*`key_part`*规范可以采用`(CAST *`json_path`*
    AS *`type`* ARRAY)`的形式。请参阅[多值索引](create-index.html#create-index-multi-valued "Multi-Valued
    Indexes")，了解有关多值索引创建和使用的详细信息，以及多值索引的限制和限制。
- en: With the [`mysql_info()`](/doc/c-api/8.0/en/mysql-info.html) C API function,
    you can find out how many rows were copied by [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement"). See [mysql_info()](/doc/c-api/8.0/en/mysql-info.html).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`mysql_info()`](/doc/c-api/8.0/en/mysql-info.html) C API函数，您可以查找由[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")复制了多少行。请参阅[mysql_info()](/doc/c-api/8.0/en/mysql-info.html)。
- en: 'There are several additional aspects to the `ALTER TABLE` statement, described
    under the following topics in this section:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALTER TABLE`语句还有几个额外方面，在本节中的以下主题下进行了描述：'
- en: '[Table Options](alter-table.html#alter-table-options "Table Options")'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[表选项](alter-table.html#alter-table-options "表选项")'
- en: '[Performance and Space Requirements](alter-table.html#alter-table-performance
    "Performance and Space Requirements")'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[性能和空间要求](alter-table.html#alter-table-performance "性能和空间要求")'
- en: '[Concurrency Control](alter-table.html#alter-table-concurrency "Concurrency
    Control")'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[并发控制](alter-table.html#alter-table-concurrency "并发控制")'
- en: '[Adding and Dropping Columns](alter-table.html#alter-table-add-drop-column
    "Adding and Dropping Columns")'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[添加和删除列](alter-table.html#alter-table-add-drop-column "添加和删除列")'
- en: '[Renaming, Redefining, and Reordering Columns](alter-table.html#alter-table-redefine-column
    "Renaming, Redefining, and Reordering Columns")'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[重命名、重新定义和重新排序列](alter-table.html#alter-table-redefine-column "重命名、重新定义和重新排序列")'
- en: '[Primary Keys and Indexes](alter-table.html#alter-table-index "Primary Keys
    and Indexes")'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[主键和索引](alter-table.html#alter-table-index "主键和索引")'
- en: '[Foreign Keys and Other Constraints](alter-table.html#alter-table-foreign-key
    "Foreign Keys and Other Constraints")'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[外键和其他约束](alter-table.html#alter-table-foreign-key "外键和其他约束")'
- en: '[Changing the Character Set](alter-table.html#alter-table-character-set "Changing
    the Character Set")'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更改字符集](alter-table.html#alter-table-character-set "更改字符集")'
- en: '[Importing InnoDB Tables](alter-table.html#alter-table-import "Importing InnoDB
    Tables")'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[导入InnoDB表](alter-table.html#alter-table-import "导入InnoDB Tables")'
- en: '[Row Order for MyISAM Tables](alter-table.html#alter-table-row-order "Row Order
    for MyISAM Tables")'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MyISAM表的行顺序](alter-table.html#alter-table-row-order "MyISAM Tables的行顺序")'
- en: '[Partitioning Options](alter-table.html#alter-table-partition-options "Partitioning
    Options")'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分区选项](alter-table.html#alter-table-partition-options "分区选项")'
- en: Table Options
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 表选项
- en: '*`table_options`* signifies table options of the kind that can be used in the
    [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement,
    such as `ENGINE`, `AUTO_INCREMENT`, `AVG_ROW_LENGTH`, `MAX_ROWS`, `ROW_FORMAT`,
    or `TABLESPACE`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*`table_options`*表示可以在[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE
    Statement")语句中使用的表选项，例如`ENGINE`、`AUTO_INCREMENT`、`AVG_ROW_LENGTH`、`MAX_ROWS`、`ROW_FORMAT`或`TABLESPACE`。'
- en: For descriptions of all table options, see [Section 15.1.20, “CREATE TABLE Statement”](create-table.html
    "15.1.20 CREATE TABLE Statement"). However, [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") ignores `DATA DIRECTORY` and `INDEX DIRECTORY` when given as
    table options. [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    permits them only as partitioning options, and requires that you have the `FILE`
    privilege.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有关所有表选项的描述，请参见[Section 15.1.20, “CREATE TABLE Statement”](create-table.html
    "15.1.20 CREATE TABLE Statement")。但是，当作为表选项给出时，[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")会忽略`DATA DIRECTORY`和`INDEX DIRECTORY`。[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")仅允许它们作为分区选项，并要求您具有`FILE`权限。
- en: 'Use of table options with [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") provides a convenient way of altering single table characteristics.
    For example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")的表选项提供了一种方便的方式来更改单个表的特性。例如：
- en: 'If `t1` is currently not an `InnoDB` table, this statement changes its storage
    engine to `InnoDB`:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`t1`当前不是`InnoDB`表，则此语句将其存储引擎更改为`InnoDB`。
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See [Section 17.6.1.5, “Converting Tables from MyISAM to InnoDB”](converting-tables-to-innodb.html
    "17.6.1.5 Converting Tables from MyISAM to InnoDB") for considerations when switching
    tables to the `InnoDB` storage engine.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关将表切换到`InnoDB`存储引擎时的注意事项，请参见[Section 17.6.1.5, “Converting Tables from MyISAM
    to InnoDB”](converting-tables-to-innodb.html "17.6.1.5 Converting Tables from
    MyISAM to InnoDB")。
- en: When you specify an `ENGINE` clause, [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") rebuilds the table. This is true even if the table already has
    the specified storage engine.
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当指定`ENGINE`子句时，[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")会重建表。即使表已经具有指定的存储引擎，这也是正确的。
- en: Running [`ALTER TABLE *`tbl_name`* ENGINE=INNODB`](alter-table.html "15.1.9 ALTER
    TABLE Statement") on an existing `InnoDB` table performs a “null” [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") operation, which can be used to defragment an
    `InnoDB` table, as described in [Section 17.11.4, “Defragmenting a Table”](innodb-file-defragmenting.html
    "17.11.4 Defragmenting a Table"). Running [`ALTER TABLE *`tbl_name`* FORCE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") on an `InnoDB` table performs the same function.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在现有的`InnoDB`表上运行[`ALTER TABLE *`tbl_name`* ENGINE=INNODB`](alter-table.html
    "15.1.9 ALTER TABLE Statement")执行一个“null”[`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement")操作，可用于碎片整理`InnoDB`表，如[Section 17.11.4, “Defragmenting a Table”](innodb-file-defragmenting.html
    "17.11.4 Defragmenting a Table")中所述。在`InnoDB`表上运行[`ALTER TABLE *`tbl_name`* FORCE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")执行相同的功能。
- en: '[`ALTER TABLE *`tbl_name`* ENGINE=INNODB`](alter-table.html "15.1.9 ALTER TABLE
    Statement") and [`ALTER TABLE *`tbl_name`* FORCE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") use [online DDL](innodb-online-ddl.html "17.12 InnoDB and Online
    DDL"). For more information, see [Section 17.12, “InnoDB and Online DDL”](innodb-online-ddl.html
    "17.12 InnoDB and Online DDL").'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ALTER TABLE *`tbl_name`* ENGINE=INNODB`](alter-table.html "15.1.9 ALTER TABLE
    Statement")和[`ALTER TABLE *`tbl_name`* FORCE`](alter-table.html "15.1.9 ALTER
    TABLE Statement")使用[在线 DDL](innodb-online-ddl.html "17.12 InnoDB and Online DDL")。有关更多信息，请参见[Section 17.12,
    “InnoDB and Online DDL”](innodb-online-ddl.html "17.12 InnoDB and Online DDL")。'
- en: The outcome of attempting to change the storage engine of a table is affected
    by whether the desired storage engine is available and the setting of the [`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)
    SQL mode, as described in [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server
    SQL Modes").
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试更改表的存储引擎的结果受所需存储引擎是否可用以及[`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)
    SQL模式设置的影响，如[Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server
    SQL Modes")中所述。
- en: To prevent inadvertent loss of data, [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") cannot be used to change the storage engine of a table to `MERGE`
    or `BLACKHOLE`.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为防止数据意外丢失，[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")不能用于将表的存储引擎更改为`MERGE`或`BLACKHOLE`。
- en: 'To change the `InnoDB` table to use compressed row-storage format:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将`InnoDB`表更改为使用压缩行存储格式：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `ENCRYPTION` clause enables or disables page-level data encryption for an
    `InnoDB` table. A keyring plugin must be installed and configured to enable encryption.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENCRYPTION`子句为`InnoDB`表启用或禁用页面级数据加密。必须安装和配置一个密钥环插件才能启用加密。'
- en: If the [`table_encryption_privilege_check`](server-system-variables.html#sysvar_table_encryption_privilege_check)
    variable is enabled, the [`TABLE_ENCRYPTION_ADMIN`](privileges-provided.html#priv_table-encryption-admin)
    privilege is required to use an `ENCRYPTION` clause with a setting that differs
    from the default schema encryption setting.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果启用了[`table_encryption_privilege_check`](server-system-variables.html#sysvar_table_encryption_privilege_check)变量，则需要[`TABLE_ENCRYPTION_ADMIN`](privileges-provided.html#priv_table-encryption-admin)权限才能使用与默认模式加密设置不同的设置的`ENCRYPTION`子句。
- en: Prior to MySQL 8.0.16, the `ENCRYPTION` clause was only supported when altering
    tables residing in file-per-table tablespaces. As of MySQL 8.0.16, the `ENCRYPTION`
    clause is also supported for tables residing in general tablespaces.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.16之前，`ENCRYPTION`子句仅在更改位于每表一个文件表空间中的表时受支持。从MySQL 8.0.16开始，`ENCRYPTION`子句也支持位于通用表空间中的表。
- en: For tables that reside in general tablespaces, table and tablespace encryption
    must match.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于位于通用表空间中的表，表和表空间加密必须匹配。
- en: Altering table encryption by moving a table to a different tablespace or changing
    the storage engine is not permitted without explicitly specifying an `ENCRYPTION`
    clause.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不允许通过将表移动到不同的表空间或更改存储引擎来更改表加密，而不明确指定`ENCRYPTION`子句。
- en: As of MySQL 8.0.16, specifying an `ENCRYPTION` clause with a value other than
    `'N'` or `''` is not permitted if the table uses a storage engine that does not
    support encryption. Previously, the clause was accepted. Attempting to create
    a table without an `ENCRYPTION` clause in an encryption-enabled schema using a
    storage engine that does not support encryption is also not permitted.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.16开始，如果表使用不支持加密的存储引擎，则不允许使用值为`'N'`或`''`的`ENCRYPTION`子句。以前，该子句是被接受的。在使用不支持加密的存储引擎在启用加密的模式中创建不带`ENCRYPTION`子句的表也是不允许的。
- en: For more information, see [Section 17.13, “InnoDB Data-at-Rest Encryption”](innodb-data-encryption.html
    "17.13 InnoDB Data-at-Rest Encryption").
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[第17.13节，“InnoDB 数据静态加密”](innodb-data-encryption.html "17.13 InnoDB
    Data-at-Rest Encryption")。
- en: 'To reset the current auto-increment value:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要重置当前自增值：
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You cannot reset the counter to a value less than or equal to the value that
    is currently in use. For both `InnoDB` and `MyISAM`, if the value is less than
    or equal to the maximum value currently in the `AUTO_INCREMENT` column, the value
    is reset to the current maximum `AUTO_INCREMENT` column value plus one.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不能将计数器重置为小于或等于当前正在使用的值。对于`InnoDB`和`MyISAM`，如果该值小于或等于当前在`AUTO_INCREMENT`列中的最大值，则该值将重置为当前最大`AUTO_INCREMENT`列值加一。
- en: 'To change the default table character set:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更改默认表字符集：
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also [Changing the Character Set](alter-table.html#alter-table-character-set
    "Changing the Character Set").
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅[更改字符集](alter-table.html#alter-table-character-set "Changing the Character
    Set")。
- en: 'To add (or change) a table comment:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要添加（或更改）表注释：
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Use `ALTER TABLE` with the `TABLESPACE` option to move `InnoDB` tables between
    existing [general tablespaces](glossary.html#glos_general_tablespace "general
    tablespace"), [file-per-table](glossary.html#glos_file_per_table "file-per-table")
    tablespaces, and the [system tablespace](glossary.html#glos_system_tablespace
    "system tablespace"). See [Moving Tables Between Tablespaces Using ALTER TABLE](general-tablespaces.html#general-tablespaces-moving-non-partitioned-tables
    "Moving Tables Between Tablespaces Using ALTER TABLE").
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有`TABLESPACE`选项的`ALTER TABLE`来在现有[通用表空间](glossary.html#glos_general_tablespace
    "general tablespace")、[每表一个文件](glossary.html#glos_file_per_table "file-per-table")表空间和[系统表空间](glossary.html#glos_system_tablespace
    "system tablespace")之间移动`InnoDB`表。参见[使用 ALTER TABLE 在表空间之间移动表](general-tablespaces.html#general-tablespaces-moving-non-partitioned-tables
    "Moving Tables Between Tablespaces Using ALTER TABLE")。
- en: '`ALTER TABLE ... TABLESPACE` operations always cause a full table rebuild,
    even if the `TABLESPACE` attribute has not changed from its previous value.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALTER TABLE ... TABLESPACE` 操作总是导致完整的表重建，即使`TABLESPACE`属性未从其先前值更改。'
- en: '`ALTER TABLE ... TABLESPACE` syntax does not support moving a table from a
    temporary tablespace to a persistent tablespace.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALTER TABLE ... TABLESPACE` 语法不支持将表从临时表空间移动到持久表空间。'
- en: The `DATA DIRECTORY` clause, which is supported with [`CREATE TABLE ... TABLESPACE`](create-table.html
    "15.1.20 CREATE TABLE Statement"), is not supported with `ALTER TABLE ... TABLESPACE`,
    and is ignored if specified.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持与[`CREATE TABLE ... TABLESPACE`](create-table.html "15.1.20 CREATE TABLE Statement")一起使用的`DATA
    DIRECTORY`子句，在`ALTER TABLE ... TABLESPACE`中不受支持，并且如果指定了将被忽略。
- en: For more information about the capabilities and limitations of the `TABLESPACE`
    option, see [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement").
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`TABLESPACE`选项的功能和限制的更多信息，请参见[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement")。
- en: 'MySQL NDB Cluster 8.0 supports setting `NDB_TABLE` options for controlling
    a table''s partition balance (fragment count type), read-from-any-replica capability,
    full replication, or any combination of these, as part of the table comment for
    an `ALTER TABLE` statement in the same manner as for [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement"), as shown in this example:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL NDB Cluster 8.0支持设置`NDB_TABLE`选项，用于控制表的分区平衡（片段计数类型）、从任何副本读取的能力、完全复制，或这些选项的任意组合，作为`ALTER
    TABLE`语句的表注释的一部分，与[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")一样，如下例所示：
- en: '[PRE7]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It is also possible to set `NDB_COMMENT` options for columns of [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") tables as part of an `ALTER TABLE` statement,
    like this one:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还可以在`ALTER TABLE`语句中为[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0")表的列设置`NDB_COMMENT`选项，如下所示：
- en: '[PRE8]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Setting the blob inline size in this fashion is supported by NDB 8.0.30 and
    later. Bear in mind that `ALTER TABLE ... COMMENT ...` discards any existing comment
    for the table. See [Setting NDB_TABLE options](create-table.html#create-table-comment-ndb-table-options
    "Setting NDB_TABLE options"), for additional information and examples.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过NDB 8.0.30及更高版本支持以这种方式设置 blob 内联大小。请注意，`ALTER TABLE ... COMMENT ...`会丢弃表的任何现有注释。有关更多信息和示例，请参见[设置NDB_TABLE选项](create-table.html#create-table-comment-ndb-table-options
    "Setting NDB_TABLE options")。
- en: '`ENGINE_ATTRIBUTE` and `SECONDARY_ENGINE_ATTRIBUTE` options (available as of
    MySQL 8.0.21) are used to specify table, column, and index attributes for primary
    and secondary storage engines. The options are reserved for future use. Index
    attributes cannot be altered. An index must be dropped and added back with the
    desired change, which can be performed in a single [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") statement.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENGINE_ATTRIBUTE`和`SECONDARY_ENGINE_ATTRIBUTE`选项（自MySQL 8.0.21起可用）用于指定主要和次要存储引擎的表、列和索引属性。这些选项保留供将来使用。索引属性无法更改。必须删除索引并以所需更改重新添加，这可以在单个[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句中执行。'
- en: To verify that the table options were changed as intended, use [`SHOW CREATE
    TABLE`](show-create-table.html "15.7.7.10 SHOW CREATE TABLE Statement"), or query
    the Information Schema [`TABLES`](information-schema-tables-table.html "28.3.38 The
    INFORMATION_SCHEMA TABLES Table") table.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证表选项是否按预期更改，请使用[`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW
    CREATE TABLE Statement")，或查询信息模式[`TABLES`](information-schema-tables-table.html
    "28.3.38 The INFORMATION_SCHEMA TABLES Table")表。
- en: Performance and Space Requirements
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 性能和空间要求
- en: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") operations
    are processed using one of the following algorithms:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")操作使用以下算法之一进行处理：'
- en: '`COPY`: Operations are performed on a copy of the original table, and table
    data is copied from the original table to the new table row by row. Concurrent
    DML is not permitted.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPY`: 操作在原始表的副本上执行，并且表数据逐行从原始表复制到新表。不允许并发的 DML。'
- en: '`INPLACE`: Operations avoid copying table data but may rebuild the table in
    place. An exclusive metadata lock on the table may be taken briefly during preparation
    and execution phases of the operation. Typically, concurrent DML is supported.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INPLACE`: 操作避免复制表数据，但可能会就地重建表。在操作的准备和执行阶段可能会短暂地对表进行独占的元数据锁定。通常支持并发的 DML。'
- en: '`INSTANT`: Operations only modify metadata in the data dictionary. An exclusive
    metadata lock on the table may be taken briefly during the execution phase of
    the operation. Table data is unaffected, making operations instantaneous. Concurrent
    DML is permitted. (Introduced in MySQL 8.0.12)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSTANT`: 操作仅修改数据字典中的元数据。在操作的执行阶段可能会短暂地对表进行独占的元数据锁定。表数据不受影响，使操作瞬间完成。允许并发的
    DML。（MySQL 8.0.12中引入）'
- en: 'For tables using the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0") storage engine, these algorithms work as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")存储引擎的表，这些算法的工作方式如下：
- en: '`COPY`: `NDB` creates a copy of the table and alters it; the NDB Cluster handler
    then copies the data between the old and new versions of the table. Subsequently,
    `NDB` deletes the old table and renames the new one.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPY`：`NDB`创建表的副本并对其进行更改；然后NDB Cluster处理程序在旧表和新表之间复制数据。随后，`NDB`删除旧表并重命名新表。'
- en: This is sometimes also referred to as a “copying” or “offline” `ALTER TABLE`.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有时也被称为“复制”或“离线”`ALTER TABLE`。
- en: '`INPLACE`: The data nodes make the required changes; the NDB Cluster handler
    does not copy data or otherwise take part.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INPLACE`：数据节点进行所需更改；NDB Cluster处理程序不复制数据或以其他方式参与。'
- en: This is sometimes also referred to as a “non-copying” or “online” `ALTER TABLE`.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有时也被称为“非复制”或“在线”`ALTER TABLE`。
- en: '`INSTANT`: Not supported by `NDB`.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSTANT`：不被`NDB`支持。'
- en: See [Section 25.6.12, “Online Operations with ALTER TABLE in NDB Cluster”](mysql-cluster-online-operations.html
    "25.6.12 Online Operations with ALTER TABLE in NDB Cluster"), for more information.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见[Section 25.6.12, “NDB Cluster中的ALTER TABLE在线操作”](mysql-cluster-online-operations.html
    "25.6.12 Online Operations with ALTER TABLE in NDB Cluster")。
- en: The `ALGORITHM` clause is optional. If the `ALGORITHM` clause is omitted, MySQL
    uses `ALGORITHM=INSTANT` for storage engines and [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") clauses that support it. Otherwise, `ALGORITHM=INPLACE`
    is used. If `ALGORITHM=INPLACE` is not supported, `ALGORITHM=COPY` is used.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALGORITHM`子句是可选的。如果省略了`ALGORITHM`子句，MySQL将对支持它的存储引擎和[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")子句使用`ALGORITHM=INSTANT`。否则，将使用`ALGORITHM=INPLACE`。如果不支持`ALGORITHM=INPLACE`，则使用`ALGORITHM=COPY`。'
- en: Note
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: After adding a column to a partitioned table using `ALGORITHM=INSTANT`, it is
    no longer possible to perform [`ALTER TABLE ... EXCHANGE PARTITION`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations") on the table.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ALGORITHM=INSTANT`向分区表添加列后，不再可以对表执行[`ALTER TABLE ... EXCHANGE PARTITION`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations")操作。
- en: Specifying an `ALGORITHM` clause requires the operation to use the specified
    algorithm for clauses and storage engines that support it, or fail with an error
    otherwise. Specifying `ALGORITHM=DEFAULT` is the same as omitting the `ALGORITHM`
    clause.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 指定`ALGORITHM`子句要求操作使用指定的算法对支持它的子句和存储引擎，否则将失败并显示错误。指定`ALGORITHM=DEFAULT`与省略`ALGORITHM`子句相同。
- en: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") operations
    that use the `COPY` algorithm wait for other operations that are modifying the
    table to complete. After alterations are applied to the table copy, data is copied
    over, the original table is deleted, and the table copy is renamed to the name
    of the original table. While the [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") operation executes, the original table is readable by other
    sessions (with the exception noted shortly). Updates and writes to the table started
    after the [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") operation
    begins are stalled until the new table is ready, then are automatically redirected
    to the new table. The temporary copy of the table is created in the database directory
    of the original table unless it is a `RENAME TO` operation that moves the table
    to a database that resides in a different directory.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`COPY`算法的[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")操作会等待正在修改表的其他操作完成。在对表副本应用更改后，数据被复制过去，原始表被删除，表副本被重命名为原始表的名称。在[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")操作执行时，原始表可以被其他会话读取（除了不久前提到的例外）。在[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")操作开始后对表的更新和写入被暂停，直到新表准备就绪，然后自动重定向到新表。表的临时副本被创建在原始表的数据库目录中，除非是将表移动到不同目录中的数据库的`RENAME
    TO`操作。
- en: The exception referred to earlier is that [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") blocks reads (not just writes) at the point where it is ready
    to clear outdated table structures from the table and table definition caches.
    At this point, it must acquire an exclusive lock. To do so, it waits for current
    readers to finish, and blocks new reads and writes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 先前提到的异常是，[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")在准备清除过时表结构时会阻止读取（不仅仅是写入）。在这一点上，它必须获取独占锁。为此，它等待当前读取器完成，并阻止新的读取和写入。
- en: An [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") operation
    that uses the `COPY` algorithm prevents concurrent DML operations. Concurrent
    queries are still allowed. That is, a table-copying operation always includes
    at least the concurrency restrictions of `LOCK=SHARED` (allow queries but not
    DML). You can further restrict concurrency for operations that support the `LOCK`
    clause by specifying `LOCK=EXCLUSIVE`, which prevents DML and queries. For more
    information, see [Concurrency Control](alter-table.html#alter-table-concurrency
    "Concurrency Control").
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`COPY`算法的[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")操作会阻止并发的DML操作。仍然允许并发查询。也就是说，表复制操作始终至少包括`LOCK=SHARED`的并发限制（允许查询但不允许DML）。您可以通过指定`LOCK=EXCLUSIVE`进一步限制支持`LOCK`子句的操作的并发性，从而阻止DML和查询。有关更多信息，请参阅[并发控制](alter-table.html#alter-table-concurrency
    "Concurrency Control")。
- en: To force use of the `COPY` algorithm for an [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") operation that would otherwise not use it, specify
    `ALGORITHM=COPY` or enable the [`old_alter_table`](server-system-variables.html#sysvar_old_alter_table)
    system variable. If there is a conflict between the `old_alter_table` setting
    and an `ALGORITHM` clause with a value other than `DEFAULT`, the `ALGORITHM` clause
    takes precedence.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制使用`COPY`算法进行本来不使用的[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")操作，指定`ALGORITHM=COPY`或启用[`old_alter_table`](server-system-variables.html#sysvar_old_alter_table)系统变量。如果`old_alter_table`设置与具有非`DEFAULT`值的`ALGORITHM`子句之间存在冲突，则`ALGORITHM`子句优先。
- en: For `InnoDB` tables, an [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") operation that uses the `COPY` algorithm on a table that resides in
    a [shared tablespace](glossary.html#glos_shared_tablespace "shared tablespace")
    can increase the amount of space used by the tablespace. Such operations require
    as much additional space as the data in the table plus indexes. For a table residing
    in a shared tablespace, the additional space used during the operation is not
    released back to the operating system as it is for a table that resides in a [file-per-table](glossary.html#glos_file_per_table
    "file-per-table") tablespace.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`InnoDB`表，使用`COPY`算法进行[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement")操作的表位于[共享表空间](glossary.html#glos_shared_tablespace "shared tablespace")中，可能会增加表空间使用量。这种操作需要额外的空间，与表中的数据加索引一样多。对于位于共享表空间中的表，在操作期间使用的额外空间不会像位于[file-per-table](glossary.html#glos_file_per_table
    "file-per-table")表空间中的表那样释放回操作系统。
- en: For information about space requirements for online DDL operations, see [Section 17.12.3,
    “Online DDL Space Requirements”](innodb-online-ddl-space-requirements.html "17.12.3 Online
    DDL Space Requirements").
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在线DDL操作的空间要求，请参阅[Section 17.12.3, “Online DDL Space Requirements”](innodb-online-ddl-space-requirements.html
    "17.12.3 Online DDL Space Requirements")。
- en: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") operations
    that support the `INPLACE` algorithm include:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 支持`INPLACE`算法的[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")操作包括：
- en: '`ALTER TABLE` operations supported by the `InnoDB` [online DDL](glossary.html#glos_online_ddl
    "online DDL") feature. See [Section 17.12.1, “Online DDL Operations”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations").'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`支持的`ALTER TABLE`操作[在线DDL](glossary.html#glos_online_ddl "online DDL")功能。请参阅[Section 17.12.1,
    “Online DDL Operations”](innodb-online-ddl-operations.html "17.12.1 Online DDL
    Operations")。'
- en: Renaming a table. MySQL renames files that correspond to the table *`tbl_name`*
    without making a copy. (You can also use the [`RENAME TABLE`](rename-table.html
    "15.1.36 RENAME TABLE Statement") statement to rename tables. See [Section 15.1.36,
    “RENAME TABLE Statement”](rename-table.html "15.1.36 RENAME TABLE Statement").)
    Privileges granted specifically for the renamed table are not migrated to the
    new name. They must be changed manually.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名表。MySQL会重命名与表*`tbl_name`*对应的文件而不进行复制。（您也可以使用[`RENAME TABLE`](rename-table.html
    "15.1.36 RENAME TABLE Statement")语句来重命名表。请参见[第15.1.36节，“RENAME TABLE Statement”](rename-table.html
    "15.1.36 RENAME TABLE Statement")。）专门授予重命名表的权限不会迁移到新名称。必须手动更改它们。
- en: 'Operations that modify table metadata only. These operations are immediate
    because the server does not touch table contents. Metadata-only operations include:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅修改表元数据的操作。这些操作是立即执行的，因为服务器不会触及表内容。仅元数据操作包括：
- en: Renaming a column. In NDB Cluster 8.0.18 and later, this operation can also
    be performed online.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名列。在NDB Cluster 8.0.18及更高版本中，此操作也可以在线执行。
- en: Changing the default value of a column (except for [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") tables).
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改列的默认值（除了[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")表）。
- en: Modifying the definition of an [`ENUM`](enum.html "13.3.5 The ENUM Type") or
    [`SET`](set.html "13.3.6 The SET Type") column by adding new enumeration or set
    members to the *end* of the list of valid member values, as long as the storage
    size of the data type does not change. For example, adding a member to a [`SET`](set.html
    "13.3.6 The SET Type") column that has 8 members changes the required storage
    per value from 1 byte to 2 bytes; this requires a table copy. Adding members in
    the middle of the list causes renumbering of existing members, which requires
    a table copy.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在有效成员值列表的*末尾*添加新的枚举或集合成员来修改[`ENUM`](enum.html "第13.3.5节 ENUM类型")或[`SET`](set.html
    "第13.3.6节 SET类型")列的定义，只要数据类型的存储大小不变。例如，在具有8个成员的[`SET`](set.html "第13.3.6节 SET类型")列中添加一个成员会将每个值所需的存储从1字节更改为2字节；这需要复制表。在列表中间添加成员会导致现有成员的重新编号，这需要复制表。
- en: Changing the definition of a spatial column to remove the `SRID` attribute.
    (Adding or changing an `SRID` attribute requires a rebuild, and cannot be done
    in place, because the server must verify that all values have the specified `SRID`
    value.)
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改空间列的定义以删除`SRID`属性。（添加或更改`SRID`属性需要重建，不能就地完成，因为服务器必须验证所有值是否具有指定的`SRID`值。）
- en: 'As of MySQL 8.0.14, changing a column character set, when these conditions
    apply:'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.14，更改列字符集的条件如下：
- en: The column data type is [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), a [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") type, or [`ENUM`](enum.html "13.3.5 The ENUM
    Type").
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列数据类型为[`CHAR`](char.html "第13.3.2节 CHAR和VARCHAR类型")、[`VARCHAR`](char.html "第13.3.2节 CHAR和VARCHAR类型")、[`TEXT`](blob.html
    "第13.3.4节 BLOB和TEXT类型")类型或[`ENUM`](enum.html "第13.3.5节 ENUM类型")。
- en: The character set change is from `utf8mb3` to `utf8mb4`, or any character set
    to `binary`.
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符集从`utf8mb3`更改为`utf8mb4`，或任何字符集更改为`binary`。
- en: There is no index on the column.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列上没有索引。
- en: 'As of MySQL 8.0.14, changing a generated column, when these conditions apply:'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.14，更改生成列的条件如下：
- en: For `InnoDB` tables, statements that modify generated stored columns but do
    not change their type, expression, or nullability.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`InnoDB`表，修改生成的存储列但不更改其类型、表达式或可空性的语句。
- en: For non-`InnoDB` tables, statements that modify generated stored or virtual
    columns but do not change their type, expression, or nullability.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于非`InnoDB`表，修改生成的存储或虚拟列但不更改其类型、表达式或可空性的语句。
- en: An example of such a change is a change to the column comment.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改列注释的示例。
- en: Renaming an index.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名索引。
- en: Adding or dropping a secondary index, for [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") and [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") tables. See [Section 17.12.1, “Online DDL Operations”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations").
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为[`InnoDB`](innodb-storage-engine.html "第17章 InnoDB存储引擎")和[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")表添加或删除辅助索引。请参见[第17.12.1节，“在线DDL操作”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations")。
- en: For [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables, operations
    that add and drop indexes on variable-width columns. These operations occur online,
    without table copying and without blocking concurrent DML actions for most of
    their duration. See [Section 25.6.12, “Online Operations with ALTER TABLE in NDB
    Cluster”](mysql-cluster-online-operations.html "25.6.12 Online Operations with
    ALTER TABLE in NDB Cluster").
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")表，对可变宽度列添加和删除索引的操作。这些操作在线进行，无需复制表格，并且在大部分时间内不会阻塞并发的DML操作。请参见[第25.6.12节，“NDB
    Cluster中ALTER TABLE的在线操作”](mysql-cluster-online-operations.html "25.6.12 NDB Cluster中ALTER
    TABLE的在线操作")。
- en: Modifying index visibility with an `ALTER INDEX` operation.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ALTER INDEX`操作修改索引可见性。
- en: Column modifications of tables containing generated columns that depend on columns
    with a `DEFAULT` value if the modified columns are not involved in the generated
    column expressions. For example, changing the `NULL` property of a separate column
    can be done in place without a table rebuild.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改包含依赖于具有`DEFAULT`值的列的生成列的表的列。例如，可以在不重建表格的情况下进行单独列的`NULL`属性更改。
- en: '`ALTER TABLE` operations that support the `INSTANT` algorithm include:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 支持`INSTANT`算法的`ALTER TABLE`操作包括：
- en: Adding a column. This feature is referred to as “Instant `ADD COLUMN`”. Limitations
    apply. See [Section 17.12.1, “Online DDL Operations”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations").
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加列。此功能称为“即时`ADD COLUMN`”。有限制条件。请参见[第17.12.1节，“在线DDL操作”](innodb-online-ddl-operations.html
    "17.12.1 在线DDL操作")。
- en: Dropping a column. This feature is referred to as “Instant `DROP COLUMN`”. Limitations
    apply. See [Section 17.12.1, “Online DDL Operations”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations").
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除列。此功能称为“即时`DROP COLUMN`”。有限制条件。请参见[第17.12.1节，“在线DDL操作”](innodb-online-ddl-operations.html
    "17.12.1 在线DDL操作")。
- en: Adding or dropping a virtual column.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加或删除虚拟列。
- en: Adding or dropping a column default value.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加或删除列默认值。
- en: Modifying the definition of an [`ENUM`](enum.html "13.3.5 The ENUM Type") or
    [`SET`](set.html "13.3.6 The SET Type") column. The same restrictions apply as
    described above for `ALGORITHM=INSTANT`.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改[`ENUM`](enum.html "第13.3.5节 ENUM类型")或[`SET`](set.html "第13.3.6节 SET类型")列的定义。与上述描述的`ALGORITHM=INSTANT`相同的限制条件适用。
- en: Changing the index type.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改索引类型。
- en: Renaming a table. The same restrictions apply as described above for `ALGORITHM=INSTANT`.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名表。与上述描述的`ALGORITHM=INSTANT`相同的限制条件适用。
- en: For more information about operations that support `ALGORITHM=INSTANT`, see
    [Section 17.12.1, “Online DDL Operations”](innodb-online-ddl-operations.html "17.12.1 Online
    DDL Operations").
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有关支持`ALGORITHM=INSTANT`的操作的更多信息，请参见[第17.12.1节，“在线DDL操作”](innodb-online-ddl-operations.html
    "17.12.1 在线DDL操作")。
- en: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") upgrades MySQL
    5.5 temporal columns to 5.6 format for `ADD COLUMN`, `CHANGE COLUMN`, `MODIFY
    COLUMN`, `ADD INDEX`, and `FORCE` operations. This conversion cannot be done using
    the `INPLACE` algorithm because the table must be rebuilt, so specifying `ALGORITHM=INPLACE`
    in these cases results in an error. Specify `ALGORITHM=COPY` if necessary.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")将MySQL 5.5的时间列升级为5.6格式，用于`ADD
    COLUMN`、`CHANGE COLUMN`、`MODIFY COLUMN`、`ADD INDEX`和`FORCE`操作。此转换不能使用`INPLACE`算法进行，因为必须重建表格，因此在这些情况下指定`ALGORITHM=INPLACE`会导致错误。如有必要，请指定`ALGORITHM=COPY`。'
- en: If an `ALTER TABLE` operation on a multicolumn index used to partition a table
    by `KEY` changes the order of the columns, it can only be performed using `ALGORITHM=COPY`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对通过`KEY`对表进行分区的多列索引进行的`ALTER TABLE`操作改变了列的顺序，则只能使用`ALGORITHM=COPY`执行。
- en: The `WITHOUT VALIDATION` and `WITH VALIDATION` clauses affect whether [`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") performs an in-place
    operation for [virtual generated column](glossary.html#glos_virtual_generated_column
    "virtual generated column") modifications. See [Section 15.1.9.2, “ALTER TABLE
    and Generated Columns”](alter-table-generated-columns.html "15.1.9.2 ALTER TABLE
    and Generated Columns").
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`WITHOUT VALIDATION`和`WITH VALIDATION`子句影响[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE语句")对[虚拟生成列](glossary.html#glos_virtual_generated_column "虚拟生成列")修改的是否进行原地操作。请参见[第15.1.9.2节，“ALTER
    TABLE和生成列”](alter-table-generated-columns.html "15.1.9.2 ALTER TABLE和生成列")。'
- en: NDB Cluster 8.0 supports online operations using the same `ALGORITHM=INPLACE`
    syntax used with the standard MySQL Server. `NDB` does not support changing a
    tablespace online; beginning with NDB 8.0.21, it is disallowed. See [Section 25.6.12,
    “Online Operations with ALTER TABLE in NDB Cluster”](mysql-cluster-online-operations.html
    "25.6.12 Online Operations with ALTER TABLE in NDB Cluster"), for more information.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: NDB Cluster 8.0支持使用与标准MySQL Server相同的`ALGORITHM=INPLACE`语法进行在线操作。`NDB`不支持在线更改表空间；从NDB
    8.0.21开始，不允许这样做。有关更多信息，请参见[第25.6.12节，“NDB Cluster中的ALTER TABLE在线操作”](mysql-cluster-online-operations.html
    "25.6.12 NDB Cluster中的ALTER TABLE在线操作")。
- en: NDB 8.0.27 and later, when performing a copying `ALTER TABLE`, checks to ensure
    that no concurrent writes have been made to the affected table. If it finds that
    any have been made, [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")
    rejects the `ALTER TABLE` statement and raises [`ER_TABLE_DEF_CHANGED`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_table_def_changed).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在NDB 8.0.27及更高版本中，执行复制`ALTER TABLE`时，会检查确保没有对受影响表进行并发写入。如果发现有任何并发写入，[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")会拒绝`ALTER TABLE`语句并引发[`ER_TABLE_DEF_CHANGED`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_table_def_changed)。
- en: '`ALTER TABLE` with `DISCARD ... PARTITION ... TABLESPACE` or `IMPORT ... PARTITION
    ... TABLESPACE` does not create any temporary tables or temporary partition files.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`DISCARD ... PARTITION ... TABLESPACE`或`IMPORT ... PARTITION ... TABLESPACE`的`ALTER
    TABLE`不会创建任何临时表或临时分区文件。
- en: '`ALTER TABLE` with `ADD PARTITION`, `DROP PARTITION`, `COALESCE PARTITION`,
    `REBUILD PARTITION`, or `REORGANIZE PARTITION` does not create temporary tables
    (except when used with [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0") tables); however, these operations can and do create temporary partition
    files.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ADD PARTITION`、`DROP PARTITION`、`COALESCE PARTITION`、`REBUILD PARTITION`或`REORGANIZE
    PARTITION`的`ALTER TABLE`不会创建临时表（除非与[`NDB`](mysql-cluster.html "第25章 MySQL NDB
    Cluster 8.0")表一起使用）；但是，这些操作可以并且会创建临时分区文件。
- en: '`ADD` or `DROP` operations for `RANGE` or `LIST` partitions are immediate operations
    or nearly so. `ADD` or `COALESCE` operations for `HASH` or `KEY` partitions copy
    data between all partitions, unless `LINEAR HASH` or `LINEAR KEY` was used; this
    is effectively the same as creating a new table, although the `ADD` or `COALESCE`
    operation is performed partition by partition. `REORGANIZE` operations copy only
    changed partitions and do not touch unchanged ones.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`RANGE`或`LIST`分区的`ADD`或`DROP`操作是立即操作或几乎是立即操作。`HASH`或`KEY`分区的`ADD`或`COALESCE`操作会在所有分区之间复制数据，除非使用了`LINEAR
    HASH`或`LINEAR KEY`；这实际上等同于创建一个新表，尽管`ADD`或`COALESCE`操作是逐个分区执行的。`REORGANIZE`操作只复制已更改的分区，不会触及未更改的分区。'
- en: For `MyISAM` tables, you can speed up index re-creation (the slowest part of
    the alteration process) by setting the [`myisam_sort_buffer_size`](server-system-variables.html#sysvar_myisam_sort_buffer_size)
    system variable to a high value.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`MyISAM`表，可以通过将[`myisam_sort_buffer_size`](server-system-variables.html#sysvar_myisam_sort_buffer_size)系统变量设置为较高的值来加快索引重建（修改过程中最慢的部分）。
- en: Concurrency Control
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 并发控制
- en: For [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") operations
    that support it, you can use the `LOCK` clause to control the level of concurrent
    reads and writes on a table while it is being altered. Specifying a non-default
    value for this clause enables you to require a certain amount of concurrent access
    or exclusivity during the alter operation, and halts the operation if the requested
    degree of locking is not available.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支持的[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE 语句")操作，可以使用`LOCK`子句来控制在修改表时对表进行并发读写的级别。为此子句指定非默认值可以要求在修改操作期间具有一定程度的并发访问或独占性，并且如果所请求的锁定程度不可用，则会停止操作。
- en: Only `LOCK = DEFAULT` is permitted for operations that use `ALGORITHM=INSTANT`.
    The other `LOCK` clause parameters are not applicable.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 仅允许对使用`ALGORITHM=INSTANT`的操作使用`LOCK = DEFAULT`。其他`LOCK`子句参数不适用。
- en: 'The parameters for the `LOCK` clause are:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOCK`子句的参数为：'
- en: '`LOCK = DEFAULT`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCK = DEFAULT`'
- en: 'Maximum level of concurrency for the given `ALGORITHM` clause (if any) and
    `ALTER TABLE` operation: Permit concurrent reads and writes if supported. If not,
    permit concurrent reads if supported. If not, enforce exclusive access.'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定`ALGORITHM`子句（如果有）和`ALTER TABLE`操作的最大并发级别：如果支持，允许并发读写。如果不支持，则允许并发读取。如果不支持，则强制独占访问。
- en: '`LOCK = NONE`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCK = NONE`'
- en: If supported, permit concurrent reads and writes. Otherwise, an error occurs.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果支持，允许并发读写。否则，将发生错误。
- en: '`LOCK = SHARED`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCK = SHARED`'
- en: If supported, permit concurrent reads but block writes. Writes are blocked even
    if concurrent writes are supported by the storage engine for the given `ALGORITHM`
    clause (if any) and `ALTER TABLE` operation. If concurrent reads are not supported,
    an error occurs.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果支持，允许并发读取但阻止写入。即使存储引擎支持给定`ALGORITHM`子句（如果有）和`ALTER TABLE`操作的并发写入，写入也会被阻止。如果不支持并发读取，则会发生错误。
- en: '`LOCK = EXCLUSIVE`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCK = EXCLUSIVE`'
- en: Enforce exclusive access. This is done even if concurrent reads/writes are supported
    by the storage engine for the given `ALGORITHM` clause (if any) and `ALTER TABLE`
    operation.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 强制独占访问。即使存储引擎支持给定`ALGORITHM`子句（如果有）和`ALTER TABLE`操作的并发读/写，也会执行此操作。
- en: Adding and Dropping Columns
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加和删除列
- en: Use `ADD` to add new columns to a table, and `DROP` to remove existing columns.
    `DROP *`col_name`*` is a MySQL extension to standard SQL.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ADD`来向表中添加新列，使用`DROP`来移除现有列。`DROP *`col_name`*`是MySQL对标准SQL的扩展。
- en: To add a column at a specific position within a table row, use `FIRST` or `AFTER
    *`col_name`*`. The default is to add the column last.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要在表行中的特定位置添加列，请使用`FIRST`或`AFTER *`col_name`*`。默认情况下，将列添加到最后。
- en: If a table contains only one column, the column cannot be dropped. If what you
    intend is to remove the table, use the [`DROP TABLE`](drop-table.html "15.1.32 DROP
    TABLE Statement") statement instead.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表只包含一列，则无法删除该列。如果您打算删除表，请改用[`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE
    Statement")语句。
- en: If columns are dropped from a table, the columns are also removed from any index
    of which they are a part. If all columns that make up an index are dropped, the
    index is dropped as well. If you use `CHANGE` or `MODIFY` to shorten a column
    for which an index exists on the column, and the resulting column length is less
    than the index length, MySQL shortens the index automatically.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从表中删除列，则这些列也将从它们所属的任何索引中删除。如果组成索引的所有列都被删除，则索引也将被删除。如果使用`CHANGE`或`MODIFY`来缩短具有索引的列，并且结果列长度小于索引长度，则MySQL会自动缩短索引。
- en: For `ALTER TABLE ... ADD`, if the column has an expression default value that
    uses a nondeterministic function, the statement may produce a warning or error.
    For further information, see [Section 13.6, “Data Type Default Values”](data-type-defaults.html
    "13.6 Data Type Default Values"), and [Section 19.1.3.7, “Restrictions on Replication
    with GTIDs”](replication-gtids-restrictions.html "19.1.3.7 Restrictions on Replication
    with GTIDs").
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`ALTER TABLE ... ADD`，如果列具有使用非确定性函数的表达式默认值，该语句可能会产生警告或错误。有关更多信息，请参见[第13.6节，“数据类型默认值”](data-type-defaults.html
    "13.6 数据类型默认值")和[第19.1.3.7节，“带有GTID的复制限制”](replication-gtids-restrictions.html
    "19.1.3.7 带有GTID的复制限制")。
- en: Renaming, Redefining, and Reordering Columns
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重命名、重新定义和重新排序列
- en: 'The `CHANGE`, `MODIFY`, `RENAME COLUMN`, and `ALTER` clauses enable the names
    and definitions of existing columns to be altered. They have these comparative
    characteristics:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHANGE`，`MODIFY`，`RENAME COLUMN`和`ALTER`子句使得可以更改现有列的名称和定义。它们具有以下比较特性：'
- en: '`CHANGE`:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHANGE`：'
- en: Can rename a column and change its definition, or both.
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以重命名列并更改其定义，或两者兼而有之。
- en: Has more capability than `MODIFY` or `RENAME COLUMN`, but at the expense of
    convenience for some operations. `CHANGE` requires naming the column twice if
    not renaming it, and requires respecifying the column definition if only renaming
    it.
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有比`MODIFY`或`RENAME COLUMN`更多的功能，但某些操作的便利性受到牺牲。如果不重命名，`CHANGE`需要两次命名列，并且如果只是重命名，则需要重新指定列定义。
- en: With `FIRST` or `AFTER`, can reorder columns.
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`FIRST`或`AFTER`可以重新排序列。
- en: '`MODIFY`:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODIFY`：'
- en: Can change a column definition but not its name.
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以更改列定义但不能更改其名称。
- en: More convenient than `CHANGE` to change a column definition without renaming
    it.
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比`CHANGE`更方便，可以更改列定义而不重命名。
- en: With `FIRST` or `AFTER`, can reorder columns.
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`FIRST`或`AFTER`可以重新排序列。
- en: '`RENAME COLUMN`:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RENAME COLUMN`：'
- en: Can change a column name but not its definition.
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以更改列名但不能更改其定义。
- en: More convenient than `CHANGE` to rename a column without changing its definition.
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比`CHANGE`更方便，可以重命名列而不改变其定义。
- en: '`ALTER`: Used only to change a column default value.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALTER`：仅用于更改列的默认值。'
- en: '`CHANGE` is a MySQL extension to standard SQL. `MODIFY` and `RENAME COLUMN`
    are MySQL extensions for Oracle compatibility.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHANGE`是MySQL对标准SQL的扩展。`MODIFY`和`RENAME COLUMN`是为了Oracle兼容性而添加的MySQL扩展。'
- en: 'To alter a column to change both its name and definition, use `CHANGE`, specifying
    the old and new names and the new definition. For example, to rename an `INT NOT
    NULL` column from `a` to `b` and change its definition to use the `BIGINT` data
    type while retaining the `NOT NULL` attribute, do this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改列的名称和定义，请使用`CHANGE`，指定旧名称和新名称以及新定义。例如，要将`INT NOT NULL`列从`a`重命名为`b`并将其定义更改为使用`BIGINT`数据类型同时保留`NOT
    NULL`属性，请执行以下操作：
- en: '[PRE9]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To change a column definition but not its name, use `CHANGE` or `MODIFY`. With
    `CHANGE`, the syntax requires two column names, so you must specify the same name
    twice to leave the name unchanged. For example, to change the definition of column
    `b`, do this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改列定义但不更改其名称，请使用`CHANGE`或`MODIFY`。使用`CHANGE`，语法要求两个列名，因此您必须指定相同的名称两次以保持名称不变。例如，要更改列`b`的定义，请执行以下操作：
- en: '[PRE10]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`MODIFY` is more convenient to change the definition without changing the name
    because it requires the column name only once:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`MODIFY`更方便地更改定义而不更改名称，因为它只需要列名一次：'
- en: '[PRE11]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To change a column name but not its definition, use `CHANGE` or `RENAME COLUMN`.
    With `CHANGE`, the syntax requires a column definition, so to leave the definition
    unchanged, you must respecify the definition the column currently has. For example,
    to rename an `INT NOT NULL` column from `b` to `a`, do this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改列名称但不更改其定义，请使用`CHANGE`或`RENAME COLUMN`。使用`CHANGE`，语法要求列定义，因此要保持定义不变，您必须重新指定列当前具有的定义。例如，要将`INT
    NOT NULL`列从`b`重命名为`a`，请执行以下操作：
- en: '[PRE12]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`RENAME COLUMN` is more convenient to change the name without changing the
    definition because it requires only the old and new names:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`RENAME COLUMN`更方便地更改名称而不更改定义，因为它只需要旧名称和新名称：
- en: '[PRE13]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In general, you cannot rename a column to a name that already exists in the
    table. However, this is sometimes not the case, such as when you swap names or
    move them through a cycle. If a table has columns named `a`, `b`, and `c`, these
    are valid operations:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您不能将列重命名为表中已存在的名称。但是，有时情况并非如此，例如当您交换名称或通过循环移动它们时。如果表中有列名为`a`、`b`和`c`，则以下操作是有效的：
- en: '[PRE14]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For column definition changes using `CHANGE` or `MODIFY`, the definition must
    include the data type and all attributes that should apply to the new column,
    other than index attributes such as `PRIMARY KEY` or `UNIQUE`. Attributes present
    in the original definition but not specified for the new definition are not carried
    forward. Suppose that a column `col1` is defined as `INT UNSIGNED DEFAULT 1 COMMENT
    ''my column''` and you modify the column as follows, intending to change only
    `INT` to `BIGINT`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用`CHANGE`或`MODIFY`进行列定义更改，定义必须包括数据类型和应适用于新列的所有属性，除了索引属性如`PRIMARY KEY`或`UNIQUE`之外。原始定义中存在但未为新定义指定的属性不会被继承。假设列`col1`被定义为`INT
    UNSIGNED DEFAULT 1 COMMENT 'my column'`，并且您修改列如下，意图仅将`INT`更改为`BIGINT`：
- en: '[PRE15]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'That statement changes the data type from `INT` to `BIGINT`, but it also drops
    the `UNSIGNED`, `DEFAULT`, and `COMMENT` attributes. To retain them, the statement
    must include them explicitly:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句将数据类型从`INT`更改为`BIGINT`，但也会删除`UNSIGNED`、`DEFAULT`和`COMMENT`属性。要保留它们，语句必须显式包含它们：
- en: '[PRE16]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For data type changes using `CHANGE` or `MODIFY`, MySQL tries to convert existing
    column values to the new type as well as possible.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用`CHANGE`或`MODIFY`进行数据类型更改，MySQL会尽可能将现有列值转换为新类型。
- en: Warning
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This conversion may result in alteration of data. For example, if you shorten
    a string column, values may be truncated. To prevent the operation from succeeding
    if conversions to the new data type would result in loss of data, enable strict
    SQL mode before using [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    (see [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server SQL Modes")).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此转换可能导致数据的更改。例如，如果缩短字符串列，值可能会被截断。为防止如果转换为新数据类型会导致数据丢失，则在使用[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")之前启用严格的SQL模式（请参阅[Section 7.1.11, “Server SQL Modes”](sql-mode.html
    "7.1.11 Server SQL Modes")）。
- en: If you use `CHANGE` or `MODIFY` to shorten a column for which an index exists
    on the column, and the resulting column length is less than the index length,
    MySQL shortens the index automatically.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`CHANGE`或`MODIFY`缩短具有索引的列，并且结果列长度小于索引长度，则MySQL会自动缩短索引。
- en: 'For columns renamed by `CHANGE` or `RENAME COLUMN`, MySQL automatically renames
    these references to the renamed column:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于由`CHANGE`或`RENAME COLUMN`重命名的列，MySQL会自动重命名对重命名列的引用：
- en: Indexes that refer to the old column, including invisible indexes and disabled
    `MyISAM` indexes.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用旧列的索引，包括不可见索引和禁用的`MyISAM`索引。
- en: Foreign keys that refer to the old column.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外键引用旧列。
- en: 'For columns renamed by `CHANGE` or `RENAME COLUMN`, MySQL does not automatically
    rename these references to the renamed column:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于被`CHANGE`或`RENAME COLUMN`重命名的列，MySQL不会自动重命名这些引用到重命名列的引用：
- en: Generated column and partition expressions that refer to the renamed column.
    You must use `CHANGE` to redefine such expressions in the same [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") statement as the one that renames the column.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用重命名列的生成列和分区表达式。您必须在同一[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")语句中使用`CHANGE`重新定义这样的表达式，以重命名列。
- en: Views and stored programs that refer to the renamed column. You must manually
    alter the definition of these objects to refer to the new column name.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用重命名列的视图和存储程序。您必须手动修改这些对象的定义，以引用新的列名。
- en: To reorder columns within a table, use `FIRST` and `AFTER` in `CHANGE` or `MODIFY`
    operations.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要在表内重新排序列，请在`CHANGE`或`MODIFY`操作中使用`FIRST`和`AFTER`。
- en: '`ALTER ... SET DEFAULT` or `ALTER ... DROP DEFAULT` specify a new default value
    for a column or remove the old default value, respectively. If the old default
    is removed and the column can be `NULL`, the new default is `NULL`. If the column
    cannot be `NULL`, MySQL assigns a default value as described in [Section 13.6,
    “Data Type Default Values”](data-type-defaults.html "13.6 Data Type Default Values").'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALTER ... SET DEFAULT` 或 `ALTER ... DROP DEFAULT` 分别指定列的新默认值或移除旧的默认值。如果移除了旧的默认值并且列可以为`NULL`，新的默认值将为`NULL`。如果列不能为`NULL`，MySQL将分配一个默认值，如[第13.6节，“数据类型默认值”](data-type-defaults.html
    "13.6 数据类型默认值")中所述。'
- en: As of MySQL 8.0.23, `ALTER ... SET VISIBLE` and `ALTER ... SET INVISIBLE` enable
    column visibility to be changed. See [Section 15.1.20.10, “Invisible Columns”](invisible-columns.html
    "15.1.20.10 Invisible Columns").
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.23，`ALTER ... SET VISIBLE` 和 `ALTER ... SET INVISIBLE` 允许更改列的可见性。请参见[第15.1.20.10节，“不可见列”](invisible-columns.html
    "15.1.20.10 不可见列")。
- en: Primary Keys and Indexes
  id: totrans-194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主键和索引
- en: '`DROP PRIMARY KEY` drops the [primary key](glossary.html#glos_primary_key "primary
    key"). If there is no primary key, an error occurs. For information about the
    performance characteristics of primary keys, especially for `InnoDB` tables, see
    [Section 10.3.2, “Primary Key Optimization”](primary-key-optimization.html "10.3.2 Primary
    Key Optimization").'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`DROP PRIMARY KEY` 删除[主键](glossary.html#glos_primary_key "主键")。如果没有主键，将会出现错误。关于主键的性能特性的信息，尤其是对于`InnoDB`表，参见[第10.3.2节，“主键优化”](primary-key-optimization.html
    "10.3.2 主键优化")。'
- en: If the [`sql_require_primary_key`](server-system-variables.html#sysvar_sql_require_primary_key)
    system variable is enabled, attempting to drop a primary key produces an error.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了[`sql_require_primary_key`](server-system-variables.html#sysvar_sql_require_primary_key)系统变量，尝试删除主键将产生错误。
- en: If you add a `UNIQUE INDEX` or `PRIMARY KEY` to a table, MySQL stores it before
    any nonunique index to permit detection of duplicate keys as early as possible.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果向表中添加`UNIQUE INDEX`或`PRIMARY KEY`，MySQL会将其存储在任何非唯一索引之前，以便尽早检测到重复键。
- en: '[`DROP INDEX`](drop-index.html "15.1.27 DROP INDEX Statement") removes an index.
    This is a MySQL extension to standard SQL. See [Section 15.1.27, “DROP INDEX Statement”](drop-index.html
    "15.1.27 DROP INDEX Statement"). To determine index names, use `SHOW INDEX FROM
    *`tbl_name`*`.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DROP INDEX`](drop-index.html "15.1.27 DROP INDEX语句") 删除一个索引。这是MySQL对标准SQL的扩展。请参见[第15.1.27节，“DROP
    INDEX语句”](drop-index.html "15.1.27 DROP INDEX语句")。要确定索引名称，请使用`SHOW INDEX FROM
    *`tbl_name`*`。'
- en: Some storage engines permit you to specify an index type when creating an index.
    The syntax for the *`index_type`* specifier is `USING *`type_name`*`. For details
    about `USING`, see [Section 15.1.15, “CREATE INDEX Statement”](create-index.html
    "15.1.15 CREATE INDEX Statement"). The preferred position is after the column
    list. Expect support for use of the option before the column list to be removed
    in a future MySQL release.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 一些存储引擎允许在创建索引时指定索引类型。*`index_type`*指定符的语法为`USING *`type_name`*`。有关`USING`的详细信息，请参见[第15.1.15节，“CREATE
    INDEX语句”](create-index.html "15.1.15 CREATE INDEX语句")。首选位置是在列列表之后。预计在未来的MySQL版本中将删除在列列表之前使用该选项的支持。
- en: '*`index_option`* values specify additional options for an index. `USING` is
    one such option. For details about permissible *`index_option`* values, see [Section 15.1.15,
    “CREATE INDEX Statement”](create-index.html "15.1.15 CREATE INDEX Statement").'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '*`index_option`*值指定索引的附加选项。`USING`是其中之一。有关允许的*`index_option`*值的详细信息，请参见[第15.1.15节，“CREATE
    INDEX Statement”](create-index.html "15.1.15 CREATE INDEX Statement")。'
- en: '`RENAME INDEX *`old_index_name`* TO *`new_index_name`*` renames an index. This
    is a MySQL extension to standard SQL. The content of the table remains unchanged.
    *`old_index_name`* must be the name of an existing index in the table that is
    not dropped by the same [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    statement. *`new_index_name`* is the new index name, which cannot duplicate the
    name of an index in the resulting table after changes have been applied. Neither
    index name can be `PRIMARY`.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`RENAME INDEX *`old_index_name`* TO *`new_index_name`*` 重命名索引。这是MySQL对标准SQL的扩展。表的内容保持不变。*`old_index_name`*必须是表中现有索引的名称，该索引不会被相同的[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句删除。*`new_index_name`*是新的索引名称，在应用更改后的表中不能重复索引的名称。两个索引名称都不能是`PRIMARY`。'
- en: If you use [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    on a `MyISAM` table, all nonunique indexes are created in a separate batch (as
    for [`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement")). This
    should make [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") much
    faster when you have many indexes.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`MyISAM`表上使用[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")，所有非唯一索引将在单独的批处理中创建（就像[`REPAIR
    TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement")一样）。当有许多索引时，这应该使[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")速度更快。
- en: For `MyISAM` tables, key updating can be controlled explicitly. Use `ALTER TABLE
    ... DISABLE KEYS` to tell MySQL to stop updating nonunique indexes. Then use `ALTER
    TABLE ... ENABLE KEYS` to re-create missing indexes. `MyISAM` does this with a
    special algorithm that is much faster than inserting keys one by one, so disabling
    keys before performing bulk insert operations should give a considerable speedup.
    Using `ALTER TABLE ... DISABLE KEYS` requires the [`INDEX`](privileges-provided.html#priv_index)
    privilege in addition to the privileges mentioned earlier.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`MyISAM`表，可以显式控制键的更新。使用`ALTER TABLE ... DISABLE KEYS`告诉MySQL停止更新非唯一索引。然后使用`ALTER
    TABLE ... ENABLE KEYS`重新创建丢失的索引。`MyISAM`使用一种比逐个插入键更快的特殊算法来执行此操作，因此在执行大量插入操作之前禁用键应该会显著加快速度。使用`ALTER
    TABLE ... DISABLE KEYS`需要除了前面提到的权限之外的[`INDEX`](privileges-provided.html#priv_index)权限。
- en: While the nonunique indexes are disabled, they are ignored for statements such
    as [`SELECT`](select.html "15.2.13 SELECT Statement") and [`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement") that otherwise would use them.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在非唯一索引被禁用时，它们对于诸如[`SELECT`](select.html "15.2.13 SELECT Statement")和[`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement")等通常会使用它们的语句将被忽略。
- en: After an [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") statement,
    it may be necessary to run [`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE
    TABLE Statement") to update index cardinality information. See [Section 15.7.7.22,
    “SHOW INDEX Statement”](show-index.html "15.7.7.22 SHOW INDEX Statement").
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句之后，可能需要运行[`ANALYZE
    TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement")来更新索引基数信息。参见[第15.7.7.22节，“SHOW
    INDEX Statement”](show-index.html "15.7.7.22 SHOW INDEX Statement")。
- en: The `ALTER INDEX` operation permits an index to be made visible or invisible.
    An invisible index is not used by the optimizer. Modification of index visibility
    applies to indexes other than primary keys (either explicit or implicit), and
    cannot be performed using `ALGORITHM=INSTANT`. This feature is storage engine
    neutral (supported for any engine). For more information, see [Section 10.3.12,
    “Invisible Indexes”](invisible-indexes.html "10.3.12 Invisible Indexes").
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALTER INDEX`操作允许将索引设置为可见或不可见。不可见索引不会被优化器使用。索引可见性的修改适用于主键之外的索引（显式或隐式），并且不能使用`ALGORITHM=INSTANT`执行。此功能与存储引擎无关（支持任何引擎）。有关更多信息，请参见[第10.3.12节，“不可见索引”](invisible-indexes.html
    "10.3.12 Invisible Indexes")。'
- en: Foreign Keys and Other Constraints
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 外键和其他约束
- en: The `FOREIGN KEY` and `REFERENCES` clauses are supported by the `InnoDB` and
    `NDB` storage engines, which implement `ADD [CONSTRAINT [*`symbol`*]] FOREIGN
    KEY [*`index_name`*] (...) REFERENCES ... (...)`. See [Section 15.1.20.5, “FOREIGN
    KEY Constraints”](create-table-foreign-keys.html "15.1.20.5 FOREIGN KEY Constraints").
    For other storage engines, the clauses are parsed but ignored.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`FOREIGN KEY`和`REFERENCES`子句由`InnoDB`和`NDB`存储引擎支持，它们实现`ADD [CONSTRAINT [*`symbol`*]]
    FOREIGN KEY [*`index_name`*] (...) REFERENCES ... (...)`。请参见[第15.1.20.5节，“外键约束”](create-table-foreign-keys.html
    "15.1.20.5 外键约束")。对于其他存储引擎，这些子句会被解析但被忽略。'
- en: 'For [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement"), unlike
    [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement"), `ADD FOREIGN
    KEY` ignores *`index_name`* if given and uses an automatically generated foreign
    key name. As a workaround, include the `CONSTRAINT` clause to specify the foreign
    key name:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")，与[`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE语句")不同，如果给定，`ADD FOREIGN KEY`会忽略*`index_name`*并使用自动生成的外键名称。作为解决方法，包含`CONSTRAINT`子句来指定外键名称：
- en: '[PRE17]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Important
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: MySQL silently ignores inline `REFERENCES` specifications, where the references
    are defined as part of the column specification. MySQL accepts only `REFERENCES`
    clauses defined as part of a separate `FOREIGN KEY` specification.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL会默默忽略内联的`REFERENCES`规范，其中引用是作为列规范的一部分定义的。MySQL只接受作为单独`FOREIGN KEY`规范的一部分定义的`REFERENCES`子句。
- en: Note
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Partitioned `InnoDB` tables do not support foreign keys. This restriction does
    not apply to `NDB` tables, including those explicitly partitioned by `[LINEAR]
    KEY`. For more information, see [Section 26.6.2, “Partitioning Limitations Relating
    to Storage Engines”](partitioning-limitations-storage-engines.html "26.6.2 Partitioning
    Limitations Relating to Storage Engines").
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 分区化的`InnoDB`表不支持外键。这个限制不适用于`NDB`表，包括那些明确由`[LINEAR] KEY`分区的表。更多信息，请参见[第26.6.2节，“与存储引擎相关的分区限制”](partitioning-limitations-storage-engines.html
    "26.6.2 与存储引擎相关的分区限制")。
- en: 'MySQL Server and NDB Cluster both support the use of [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") to drop foreign keys:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器和NDB集群都支持使用[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")来删除外键：
- en: '[PRE18]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding and dropping a foreign key in the same [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") statement is supported for [`ALTER TABLE ... ALGORITHM=INPLACE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") but not for [`ALTER TABLE ... ALGORITHM=COPY`](alter-table.html
    "15.1.9 ALTER TABLE Statement").
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")语句中添加和删除外键对于[`ALTER
    TABLE ... ALGORITHM=INPLACE`](alter-table.html "15.1.9 ALTER TABLE语句")是支持的，但对于[`ALTER
    TABLE ... ALGORITHM=COPY`](alter-table.html "15.1.9 ALTER TABLE语句")不支持。
- en: 'The server prohibits changes to foreign key columns that have the potential
    to cause loss of referential integrity. A workaround is to use [`ALTER TABLE ...
    DROP FOREIGN KEY`](alter-table.html "15.1.9 ALTER TABLE Statement") before changing
    the column definition and [`ALTER TABLE ... ADD FOREIGN KEY`](alter-table.html
    "15.1.9 ALTER TABLE Statement") afterward. Examples of prohibited changes include:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器禁止更改可能导致引用完整性丢失的外键列。一个解决方法是在更改列定义之前使用[`ALTER TABLE ... DROP FOREIGN KEY`](alter-table.html
    "15.1.9 ALTER TABLE语句")，然后在之后使用[`ALTER TABLE ... ADD FOREIGN KEY`](alter-table.html
    "15.1.9 ALTER TABLE语句")。禁止的更改示例包括：
- en: Changes to the data type of foreign key columns that may be unsafe. For example,
    changing [`VARCHAR(20)`](char.html "13.3.2 The CHAR and VARCHAR Types") to [`VARCHAR(30)`](char.html
    "13.3.2 The CHAR and VARCHAR Types") is permitted, but changing it to [`VARCHAR(1024)`](char.html
    "13.3.2 The CHAR and VARCHAR Types") is not because that alters the number of
    length bytes required to store individual values.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改可能不安全的外键列的数据类型。例如，将[`VARCHAR(20)`](char.html "13.3.2 CHAR和VARCHAR类型")更改为[`VARCHAR(30)`](char.html
    "13.3.2 CHAR和VARCHAR类型")是允许的，但将其更改为[`VARCHAR(1024)`](char.html "13.3.2 CHAR和VARCHAR类型")是不允许的，因为这会改变存储单个值所需的长度字节数。
- en: Changing a `NULL` column to `NOT NULL` in non-strict mode is prohibited to prevent
    converting `NULL` values to default non-`NULL` values, for which there are no
    corresponding values in the referenced table. The operation is permitted in strict
    mode, but an error is returned if any such conversion is required.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在非严格模式下将`NULL`列更改为`NOT NULL`是被禁止的，以防止将`NULL`值转换为默认的非`NULL`值，而在引用表中没有相应的值。在严格模式下允许此操作，但如果需要任何此类转换，则会返回错误。
- en: '`ALTER TABLE *`tbl_name`* RENAME *`new_tbl_name`*` changes internally generated
    foreign key constraint names and user-defined foreign key constraint names that
    begin with the string “*`tbl_name`*_ibfk_” to reflect the new table name. `InnoDB`
    interprets foreign key constraint names that begin with the string “*`tbl_name`*_ibfk_”
    as internally generated names.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALTER TABLE *`tbl_name`* RENAME *`new_tbl_name`*` 在内部更改生成的外键约束名称和以字符串“*`tbl_name`*_ibfk_”开头的用户定义的外键约束名称，以反映新表名称。`InnoDB`将以字符串“*`tbl_name`*_ibfk_”开头的外键约束名称解释为内部生成的名称。'
- en: 'Prior to MySQL 8.0.16, [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") permits only the following limited version of `CHECK` constraint-adding
    syntax, which is parsed and ignored:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.16之前，[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")仅允许以下有限版本的`CHECK`约束添加语法，该语法被解析并忽略：
- en: '[PRE19]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As of MySQL 8.0.16, [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    permits `CHECK` constraints for existing tables to be added, dropped, or altered:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.16开始，[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")允许为现有表添加、删除或更改`CHECK`约束：
- en: 'Add a new `CHECK` constraint:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的`CHECK`约束：
- en: '[PRE20]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The meaning of constraint syntax elements is the same as for [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement"). See [Section 15.1.20.6, “CHECK Constraints”](create-table-check-constraints.html
    "15.1.20.6 CHECK Constraints").
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 约束语法元素的含义与[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")相同。请参阅[第15.1.20.6节，“CHECK约束”](create-table-check-constraints.html
    "15.1.20.6 CHECK Constraints")。
- en: 'Drop an existing `CHECK` constraint named *`symbol`*:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除现有命名为*`symbol`*的`CHECK`约束：
- en: '[PRE21]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Alter whether an existing `CHECK` constraint named *`symbol`* is enforced:'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改现有`CHECK`约束命名为*`symbol`*是否强制执行：
- en: '[PRE22]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `DROP CHECK` and `ALTER CHECK` clauses are MySQL extensions to standard
    SQL.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`DROP CHECK`和`ALTER CHECK`子句是MySQL对标准SQL的扩展。'
- en: 'As of MySQL 8.0.19, [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    permits more general (and SQL standard) syntax for dropping and altering existing
    constraints of any type, where the constraint type is determined from the constraint
    name:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.19开始，[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")允许更通用（符合SQL标准）的语法来删除和更改任何类型的现有约束，其中约束类型是根据约束名称确定的：
- en: 'Drop an existing constraint named *`symbol`*:'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除现有命名为*`symbol`*的约束：
- en: '[PRE23]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If the [`sql_require_primary_key`](server-system-variables.html#sysvar_sql_require_primary_key)
    system variable is enabled, attempting to drop a primary key produces an error.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果启用了[`sql_require_primary_key`](server-system-variables.html#sysvar_sql_require_primary_key)系统变量，则尝试删除主键会产生错误。
- en: 'Alter whether an existing constraint named *`symbol`* is enforced:'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改现有命名为*`symbol`*的约束是否强制执行：
- en: '[PRE24]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Only `CHECK` constraints can be altered to be unenforced. All other constraint
    types are always enforced.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有`CHECK`约束可以更改为不强制执行。所有其他约束类型始终强制执行。
- en: The SQL standard specifies that all types of constraints (primary key, unique
    index, foreign key, check) belong to the same namespace. In MySQL, each constraint
    type has its own namespace per schema. Consequently, names for each type of constraint
    must be unique per schema, but constraints of different types can have the same
    name. When multiple constraints have the same name, `DROP CONSTRAINT` and `ADD
    CONSTRAINT` are ambiguous and an error occurs. In such cases, constraint-specific
    syntax must be used to modify the constraint. For example, use `DROP PRIMARY KEY`
    or DROP FOREIGN KEY to drop a primary key or foreign key.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: SQL标准规定所有类型的约束（主键、唯一索引、外键、检查）属于同一命名空间。在MySQL中，每种约束类型在每个模式中都有自己的命名空间。因此，每种约束类型的名称在每个模式中必须是唯一的，但不同类型的约束可以具有相同的名称。当多个约束具有相同名称时，`DROP
    CONSTRAINT`和`ADD CONSTRAINT`是模棱两可的，会导致错误。在这种情况下，必须使用特定于约束的语法来修改约束。例如，使用`DROP PRIMARY
    KEY`或`DROP FOREIGN KEY`来删除主键或外键。
- en: 'If a table alteration causes a violation of an enforced `CHECK` constraint,
    an error occurs and the table is not modified. Examples of operations for which
    an error occurs:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表更改导致违反强制执行的`CHECK`约束，则会发生错误，表不会被修改。导致错误的操作示例：
- en: Attempts to add the `AUTO_INCREMENT` attribute to a column that is used in a
    `CHECK` constraint.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试向用于`CHECK`约束的列添加`AUTO_INCREMENT`属性。
- en: Attempts to add an enforced `CHECK` constraint or enforce a nonenforced `CHECK`
    constraint for which existing rows violate the constraint condition.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试添加强制执行的`CHECK`约束或强制执行现有行违反约束条件的非强制执行的`CHECK`约束。
- en: 'Attempts to modify, rename, or drop a column that is used in a `CHECK` constraint,
    unless that constraint is also dropped in the same statement. Exception: If a
    `CHECK` constraint refers only to a single column, dropping the column automatically
    drops the constraint.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试修改、重命名或删除用于`CHECK`约束的列，除非在同一语句中也删除该约束。例外：如果`CHECK`约束仅引用单个列，则删除该列会自动删除约束。
- en: '`ALTER TABLE *`tbl_name`* RENAME *`new_tbl_name`*` changes internally generated
    and user-defined `CHECK` constraint names that begin with the string “*`tbl_name`*_chk_”
    to reflect the new table name. MySQL interprets `CHECK` constraint names that
    begin with the string “*`tbl_name`*_chk_” as internally generated names.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALTER TABLE *`tbl_name`* RENAME *`new_tbl_name`*` 会更改内部生成和用户定义的以字符串“*`tbl_name`*_chk_”开头的`CHECK`约束名称，以反映新表名。MySQL将以字符串“*`tbl_name`*_chk_”开头的`CHECK`约束名称解释为内部生成的名称。'
- en: Changing the Character Set
  id: totrans-246
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更改字符集
- en: 'To change the table default character set and all character columns ([`CHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), [`VARCHAR`](char.html "13.3.2 The CHAR and
    VARCHAR Types"), [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")) to a new
    character set, use a statement like this:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改表的默认字符集和所有字符列([`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型"), [`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型"), [`TEXT`](blob.html "13.3.4 BLOB和TEXT类型"))为新字符集，使用如下语句：
- en: '[PRE25]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The statement also changes the collation of all character columns. If you specify
    no `COLLATE` clause to indicate which collation to use, the statement uses default
    collation for the character set. If this collation is inappropriate for the intended
    table use (for example, if it would change from a case-sensitive collation to
    a case-insensitive collation), specify a collation explicitly.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句还会更改所有字符列的排序规则。如果未指定`COLLATE`子句以指示使用哪种排序规则，则该语句将使用字符集的默认排序规则。如果此排序规则不适用于预期的表使用（例如，如果从区分大小写的排序规则更改为不区分大小写的排序规则），请明确指定排序规则。
- en: For a column that has a data type of [`VARCHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types") or one of the [`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types") types, `CONVERT TO CHARACTER SET` changes the data type as necessary to
    ensure that the new column is long enough to store as many characters as the original
    column. For example, a [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") column
    has two length bytes, which store the byte-length of values in the column, up
    to a maximum of 65,535\. For a `latin1` [`TEXT`](blob.html "13.3.4 The BLOB and
    TEXT Types") column, each character requires a single byte, so the column can
    store up to 65,535 characters. If the column is converted to `utf8mb4`, each character
    might require up to 4 bytes, for a maximum possible length of 4 × 65,535 = 262,140
    bytes. That length does not fit in a [`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types") column's length bytes, so MySQL converts the data type to [`MEDIUMTEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types"), which is the smallest string type for which
    the length bytes can record a value of 262,140\. Similarly, a [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types") column might be converted to [`MEDIUMTEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types").
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据类型为[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")或[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")之一的列，`CONVERT
    TO CHARACTER SET`会根据需要更改数据类型，以确保新列足够长，可以存储与原始列相同数量的字符。例如，[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")列有两个长度字节，用于存储列中值的字节长度，最多为65,535。对于`latin1`的[`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")列，每个字符需要一个字节，因此该列最多可以存储65,535个字符。如果将该列转换为`utf8mb4`，每个字符可能需要多达4个字节，因此最大可能长度为4
    × 65,535 = 262,140字节。该长度不适合[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")列的长度字节，因此MySQL将数据类型转换为[`MEDIUMTEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")，这是长度字节可以记录值为262,140的最小字符串类型。类似地，[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")列可能会转换为[`MEDIUMTEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")。
- en: 'To avoid data type changes of the type just described, do not use `CONVERT
    TO CHARACTER SET`. Instead, use `MODIFY` to change individual columns. For example:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 为避免发生刚才描述的数据类型更改，不要使用`CONVERT TO CHARACTER SET`。而是使用`MODIFY`来更改单个列。例如：
- en: '[PRE26]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you specify `CONVERT TO CHARACTER SET binary`, the [`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types"), [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    and [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") columns are converted
    to their corresponding binary string types ([`BINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types"), [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")).
    This means that the columns no longer have a character set and a subsequent `CONVERT
    TO` operation does not apply to them.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定 `CONVERT TO CHARACTER SET binary`，则 [`CHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types")、[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")
    和 [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") 列将转换为它们对应的二进制字符串类型（[`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types")、[`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types")、[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")）。这意味着这些列不再具有字符集，并且随后的
    `CONVERT TO` 操作不适用于它们。
- en: If *`charset_name`* is `DEFAULT` in a `CONVERT TO CHARACTER SET` operation,
    the character set named by the [`character_set_database`](server-system-variables.html#sysvar_character_set_database)
    system variable is used.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `CONVERT TO CHARACTER SET` 操作中的 *`charset_name`* 为 `DEFAULT`，则使用由 [`character_set_database`](server-system-variables.html#sysvar_character_set_database)
    系统变量命名的字符集。
- en: Warning
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'The `CONVERT TO` operation converts column values between the original and
    named character sets. This is *not* what you want if you have a column in one
    character set (like `latin1`) but the stored values actually use some other, incompatible
    character set (like `utf8mb4`). In this case, you have to do the following for
    each such column:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`CONVERT TO` 操作在原始字符集和命名字符集之间转换列值。如果您有一个列使用一个字符集（如 `latin1`），但存储的值实际上使用另一个不兼容的字符集（如
    `utf8mb4`），那么这不是您想要的。在这种情况下，您必须针对每个这样的列执行以下操作：'
- en: '[PRE27]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The reason this works is that there is no conversion when you convert to or
    from [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") columns.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因是在转换到或从 [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") 列时不进行转换。
- en: 'To change only the *default* character set for a table, use this statement:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅更改表的 *默认* 字符集，请使用此语句：
- en: '[PRE28]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The word `DEFAULT` is optional. The default character set is the character set
    that is used if you do not specify the character set for columns that you add
    to a table later (for example, with `ALTER TABLE ... ADD column`).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 单词 `DEFAULT` 是可选的。如果您在以后向表添加列时未指定字符集，则默认字符集是使用的字符集（例如，使用 `ALTER TABLE ... ADD
    column`）。
- en: 'When the [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)
    system variable is enabled, which is the default setting, character set conversion
    is not permitted on tables that include a character string column used in a foreign
    key constraint. The workaround is to disable [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)
    before performing the character set conversion. You must perform the conversion
    on both tables involved in the foreign key constraint before re-enabling [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks).
    If you re-enable [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)
    after converting only one of the tables, an `ON DELETE CASCADE` or `ON UPDATE
    CASCADE` operation could corrupt data in the referencing table due to implicit
    conversion that occurs during these operations (Bug #45290, Bug #74816).'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '当启用 [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)
    系统变量时（默认设置），不允许在包含在外键约束中使用字符串列的表上进行字符集转换。解决方法是在执行字符集转换之前禁用 [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)。在重新启用
    [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)
    之前，必须对涉及外键约束的两个表执行转换。如果在只转换其中一个表后重新启用 [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)，由于在这些操作期间发生的隐式转换，`ON
    DELETE CASCADE` 或 `ON UPDATE CASCADE` 操作可能会损坏引用表中的数据（Bug #45290，Bug #74816）。'
- en: Importing InnoDB Tables
  id: totrans-263
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 导入 InnoDB 表
- en: An `InnoDB` table created in its own [file-per-table](glossary.html#glos_file_per_table
    "file-per-table") tablespace can be imported from a backup or from another MySQL
    server instance using `DISCARD TABLEPACE` and `IMPORT TABLESPACE` clauses. See
    [Section 17.6.1.3, “Importing InnoDB Tables”](innodb-table-import.html "17.6.1.3 Importing
    InnoDB Tables").
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在其自己的 [file-per-table](glossary.html#glos_file_per_table "file-per-table") 表空间中创建的
    `InnoDB` 表可以使用 `DISCARD TABLESPACE` 和 `IMPORT TABLESPACE` 子句从备份或另一个 MySQL 服务器实例导入。参见
    [Section 17.6.1.3, “Importing InnoDB Tables”](innodb-table-import.html "17.6.1.3 Importing
    InnoDB Tables")。
- en: Row Order for MyISAM Tables
  id: totrans-265
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MyISAM 表的行顺序
- en: '`ORDER BY` enables you to create the new table with the rows in a specific
    order. This option is useful primarily when you know that you query the rows in
    a certain order most of the time. By using this option after major changes to
    the table, you might be able to get higher performance. In some cases, it might
    make sorting easier for MySQL if the table is in order by the column that you
    want to order it by later.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`ORDER BY`使您能够按特定顺序创建新表中的行。此选项主要在您知道大多数情况下以特定顺序查询行时很有用。通过在对表进行重大更改后使用此选项，您可能能够获得更高的性能。在某些情况下，如果表按照稍后要按其排序的列的顺序排列，可能会使MySQL更容易进行排序。'
- en: Note
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The table does not remain in the specified order after inserts and deletes.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 表在插入和删除后不会保持指定的顺序。
- en: '`ORDER BY` syntax permits one or more column names to be specified for sorting,
    each of which optionally can be followed by `ASC` or `DESC` to indicate ascending
    or descending sort order, respectively. The default is ascending order. Only column
    names are permitted as sort criteria; arbitrary expressions are not permitted.
    This clause should be given last after any other clauses.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`ORDER BY`语法允许指定一个或多个列名进行排序，每个列名后面可以选择跟随`ASC`或`DESC`以指示升序或降序排序顺序。默认为升序。只允许列名作为排序标准；不允许任意表达式。此子句应在任何其他子句之后给出。'
- en: '`ORDER BY` does not make sense for `InnoDB` tables because `InnoDB` always
    orders table rows according to the [clustered index](glossary.html#glos_clustered_index
    "clustered index").'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`InnoDB`表，`ORDER BY`没有意义，因为`InnoDB`始终根据[聚簇索引](glossary.html#glos_clustered_index
    "clustered index")对表行进行排序。
- en: When used on a partitioned table, `ALTER TABLE ... ORDER BY` orders rows within
    each partition only.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当在分区表上使用`ALTER TABLE ... ORDER BY`时，仅对每个分区内的行进行排序。
- en: Partitioning Options
  id: totrans-272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分区选项
- en: '*`partition_options`* signifies options that can be used with partitioned tables
    for repartitioning, to add, drop, discard, import, merge, and split partitions,
    and to perform partitioning maintenance.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '*`partition_options`*表示可用于分区表的选项，用于重新分区、添加、删除、丢弃、导入、合并和拆分分区，以及执行分区维护。'
- en: It is possible for an [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    statement to contain a `PARTITION BY` or `REMOVE PARTITIONING` clause in an addition
    to other alter specifications, but the `PARTITION BY` or `REMOVE PARTITIONING`
    clause must be specified last after any other specifications. The `ADD PARTITION`,
    `DROP PARTITION`, `DISCARD PARTITION`, `IMPORT PARTITION`, `COALESCE PARTITION`,
    `REORGANIZE PARTITION`, `EXCHANGE PARTITION`, `ANALYZE PARTITION`, `CHECK PARTITION`,
    and `REPAIR PARTITION` options cannot be combined with other alter specifications
    in a single `ALTER TABLE`, since the options just listed act on individual partitions.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句可以包含`PARTITION
    BY`或`REMOVE PARTITIONING`子句以及其他修改规范，但`PARTITION BY`或`REMOVE PARTITIONING`子句必须在任何其他规范之后指定。`ADD
    PARTITION`、`DROP PARTITION`、`DISCARD PARTITION`、`IMPORT PARTITION`、`COALESCE PARTITION`、`REORGANIZE
    PARTITION`、`EXCHANGE PARTITION`、`ANALYZE PARTITION`、`CHECK PARTITION`和`REPAIR
    PARTITION`选项不能与单个`ALTER TABLE`中的其他修改规范组合，因为列出的选项仅对单个分区起作用。'
- en: For more information about partition options, see [Section 15.1.20, “CREATE
    TABLE Statement”](create-table.html "15.1.20 CREATE TABLE Statement"), and [Section 15.1.9.1,
    “ALTER TABLE Partition Operations”](alter-table-partition-operations.html "15.1.9.1 ALTER
    TABLE Partition Operations"). For information about and examples of `ALTER TABLE
    ... EXCHANGE PARTITION` statements, see [Section 26.3.3, “Exchanging Partitions
    and Subpartitions with Tables”](partitioning-management-exchange.html "26.3.3 Exchanging
    Partitions and Subpartitions with Tables").
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 有关分区选项的更多信息，请参见[第15.1.20节，“CREATE TABLE Statement”](create-table.html "15.1.20 CREATE
    TABLE Statement")和[第15.1.9.1节，“ALTER TABLE Partition Operations”](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations")。有关`ALTER TABLE ... EXCHANGE PARTITION`语句的信息和示例，请参见[第26.3.3节，“Exchanging
    Partitions and Subpartitions with Tables”](partitioning-management-exchange.html
    "26.3.3 Exchanging Partitions and Subpartitions with Tables")。
