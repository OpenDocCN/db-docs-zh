- en: 18.6 The BLACKHOLE Storage Engine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18.6 BLACKHOLE存储引擎
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/blackhole-storage-engine.html](https://dev.mysql.com/doc/refman/8.0/en/blackhole-storage-engine.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/blackhole-storage-engine.html](https://dev.mysql.com/doc/refman/8.0/en/blackhole-storage-engine.html)
- en: 'The `BLACKHOLE` storage engine acts as a “black hole” that accepts data but
    throws it away and does not store it. Retrievals always return an empty result:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE`存储引擎充当一个“黑洞”，接受数据但将其丢弃并不存储。检索总是返回空结果：'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To enable the `BLACKHOLE` storage engine if you build MySQL from source, invoke
    **CMake** with the [`-DWITH_BLACKHOLE_STORAGE_ENGINE`](source-configuration-options.html#option_cmake_storage_engine_options
    "Storage Engine Options") option.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从源代码构建MySQL并希望启用`BLACKHOLE`存储引擎，请使用[`-DWITH_BLACKHOLE_STORAGE_ENGINE`](source-configuration-options.html#option_cmake_storage_engine_options
    "Storage Engine Options")选项调用**CMake**。
- en: To examine the source for the `BLACKHOLE` engine, look in the `sql` directory
    of a MySQL source distribution.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`BLACKHOLE`引擎的源代码，请查看MySQL源代码分发的`sql`目录。
- en: When you create a `BLACKHOLE` table, the server creates the table definition
    in the global data dictionary. There are no files associated with the table.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个`BLACKHOLE`表时，服务器会在全局数据字典中创建表定义。与表相关联的文件不存在。
- en: The `BLACKHOLE` storage engine supports all kinds of indexes. That is, you can
    include index declarations in the table definition.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE`存储引擎支持各种类型的索引。也就是说，您可以在表定义中包含索引声明。'
- en: The maximum key length is 3072 bytes as of MySQL 8.0.27\. Prior to 8.0.27, the
    maximum key length is 1000 bytes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.27，最大键长度为3072字节。在8.0.27之前，最大键长度为1000字节。
- en: The `BLACKHOLE` storage engine does not support partitioning.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE`存储引擎不支持分区。'
- en: You can check whether the `BLACKHOLE` storage engine is available with the [`SHOW
    ENGINES`](show-engines.html "15.7.7.16 SHOW ENGINES Statement") statement.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[`SHOW ENGINES`](show-engines.html "15.7.7.16 SHOW ENGINES Statement")语句检查`BLACKHOLE`存储引擎是否可用。
- en: Inserts into a `BLACKHOLE` table do not store any data, but if statement based
    binary logging is enabled, the SQL statements are logged and replicated to replica
    servers. This can be useful as a repeater or filter mechanism.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 插入到`BLACKHOLE`表中不会存储任何数据，但如果启用基于语句的二进制日志记录，则会记录SQL语句并复制到副本服务器。这可以作为中继器或过滤器机制。
- en: 'Suppose that your application requires replica-side filtering rules, but transferring
    all binary log data to the replica first results in too much traffic. In such
    a case, it is possible to set up on the replication source server a “dummy” replica
    process whose default storage engine is `BLACKHOLE`, depicted as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的应用程序需要副本端过滤规则，但首先将所有二进制日志数据传输到副本会导致太多的流量。在这种情况下，可以在复制源服务器上设置一个默认存储引擎为`BLACKHOLE`的“虚拟”副本进程，如下所示：
- en: '**Figure 18.1 Replication using BLACKHOLE for Filtering**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 18.1 使用BLACKHOLE进行过滤的复制**'
- en: '![The replication source server uses a source mysqld process and a dummy mysqld
    process. On the replica, the mysqld process replicates from the dummy mysqld process.](../Images/9ce39e1222db06ca391fea99dfdc3a5a.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![复制源服务器使用源mysqld进程和虚拟mysqld进程。在副本中，mysqld进程从虚拟mysqld进程复制。](../Images/9ce39e1222db06ca391fea99dfdc3a5a.png)'
- en: The source writes to its binary log. The “dummy” [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") process acts as a replica, applying the desired combination
    of `replicate-do-*` and `replicate-ignore-*` rules, and writes a new, filtered
    binary log of its own. (See [Section 19.1.6, “Replication and Binary Logging Options
    and Variables”](replication-options.html "19.1.6 Replication and Binary Logging
    Options and Variables").) This filtered log is provided to the replica.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 源服务器写入其二进制日志。“虚拟”[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")进程充当副本，应用所需的`replicate-do-*`和`replicate-ignore-*`规则，并写入自己的新的、经过过滤的二进制日志。（参见[Section 19.1.6,
    “Replication and Binary Logging Options and Variables”](replication-options.html
    "19.1.6 Replication and Binary Logging Options and Variables").）这个经过过滤的日志提供给副本。
- en: The dummy process does not actually store any data, so there is little processing
    overhead incurred by running the additional [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") process on the replication source server. This type of setup
    can be repeated with additional replicas.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟进程实际上不存储任何数据，因此在复制源服务器上运行额外的[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL
    Server")进程几乎没有处理开销。可以通过额外的副本重复这种设置。
- en: '[`INSERT`](insert.html "15.2.7 INSERT Statement") triggers for `BLACKHOLE`
    tables work as expected. However, because the `BLACKHOLE` table does not actually
    store any data, [`UPDATE`](update.html "15.2.17 UPDATE Statement") and [`DELETE`](delete.html
    "15.2.2 DELETE Statement") triggers are not activated: The `FOR EACH ROW` clause
    in the trigger definition does not apply because there are no rows.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE` 表的 [`INSERT`](insert.html "15.2.7 INSERT Statement") 触发器按预期工作。但是，由于
    `BLACKHOLE` 表实际上不存储任何数据，因此不会激活 [`UPDATE`](update.html "15.2.17 UPDATE Statement")
    和 [`DELETE`](delete.html "15.2.2 DELETE Statement") 触发器：触发器定义中的 `FOR EACH ROW`
    子句不适用，因为没有行。'
- en: 'Other possible uses for the `BLACKHOLE` storage engine include:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE` 存储引擎的其他可能用途包括：'
- en: Verification of dump file syntax.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证转储文件语法。
- en: Measurement of the overhead from binary logging, by comparing performance using
    `BLACKHOLE` with and without binary logging enabled.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过比较启用和禁用二进制日志记录时使用 `BLACKHOLE` 的性能来测量二进制日志记录的开销。
- en: '`BLACKHOLE` is essentially a “no-op” storage engine, so it could be used for
    finding performance bottlenecks not related to the storage engine itself.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BLACKHOLE` 本质上是一个“无操作”存储引擎，因此可以用于查找与存储引擎本身无关的性能瓶颈。'
- en: The `BLACKHOLE` engine is transaction-aware, in the sense that committed transactions
    are written to the binary log and rolled-back transactions are not.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE` 引擎是事务感知的，即已提交的事务会被写入二进制日志，而回滚的事务则不会。'
- en: '**Blackhole Engine and Auto Increment Columns**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**黑洞引擎和自增列**'
- en: The `BLACKHOLE` engine is a no-op engine. Any operations performed on a table
    using `BLACKHOLE` have no effect. This should be borne in mind when considering
    the behavior of primary key columns that auto increment. The engine does not automatically
    increment field values, and does not retain auto increment field state. This has
    important implications in replication.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLACKHOLE` 引擎是一个无操作引擎。对使用 `BLACKHOLE` 的表执行的任何操作都没有效果。在考虑自增主键列的行为时，应牢记这一点。该引擎不会自动增加字段值，并且不会保留自增字段状态。这在复制中具有重要影响。'
- en: 'Consider the following replication scenario where all three of the following
    conditions apply:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下复制场景，其中所有以下三个条件都适用：
- en: On a source server there is a blackhole table with an auto increment field that
    is a primary key.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源服务器上有一个带有自增字段的黑洞表，该字段是主键。
- en: On a replica the same table exists but using the MyISAM engine.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在副本中存在相同的表，但使用 MyISAM 引擎。
- en: Inserts are performed into the source's table without explicitly setting the
    auto increment value in the `INSERT` statement itself or through using a `SET
    INSERT_ID` statement.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `INSERT` 语句本身中或通过使用 `SET INSERT_ID` 语句显式设置自增值，将数据插入源表。
- en: In this scenario replication fails with a duplicate entry error on the primary
    key column.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，复制会因主键列上的重复条目错误而失败。
- en: In statement based replication, the value of `INSERT_ID` in the context event
    is always the same. Replication therefore fails due to trying insert a row with
    a duplicate value for a primary key column.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于语句的复制中，上下文事件中的 `INSERT_ID` 值始终相同。因此，由于尝试插入具有主键列重复值的行，复制失败。
- en: In row based replication, the value that the engine returns for the row always
    be the same for each insert. This results in the replica attempting to replay
    two insert log entries using the same value for the primary key column, and so
    replication fails.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于行的复制中，引擎为每次插入返回的行值始终相同。这导致副本尝试使用相同值为主键列重放两个插入日志条目，因此复制失败。
- en: '**Column Filtering**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**列过滤**'
- en: When using row-based replication, ([`binlog_format=ROW`](replication-options-binary-log.html#sysvar_binlog_format)),
    a replica where the last columns are missing from a table is supported, as described
    in the section [Section 19.5.1.9, “Replication with Differing Table Definitions
    on Source and Replica”](replication-features-differing-tables.html "19.5.1.9 Replication
    with Differing Table Definitions on Source and Replica").
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用基于行的复制（[`binlog_format=ROW`](replication-options-binary-log.html#sysvar_binlog_format)）时，支持表中缺少最后列的副本，如[第
    19.5.1.9 节，“源和副本上具有不同表定义的复制”](replication-features-differing-tables.html "19.5.1.9 源和副本上具有不同表定义的复制")中所述。
- en: 'This filtering works on the replica side, that is, the columns are copied to
    the replica before they are filtered out. There are at least two cases where it
    is not desirable to copy the columns to the replica:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此过滤在副本端执行，即在过滤之前将列复制到副本。至少有两种情况下不希望将列复制到副本：
- en: If the data is confidential, so the replica server should not have access to
    it.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果数据是机密的，那么副本服务器不应该访问它。
- en: If the source has many replicas, filtering before sending to the replicas may
    reduce network traffic.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果源有很多副本，那么在发送到副本之前进行过滤可能会减少网络流量。
- en: Source column filtering can be achieved using the `BLACKHOLE` engine. This is
    carried out in a way similar to how source table filtering is achieved - by using
    the `BLACKHOLE` engine and the [`--replicate-do-table`](replication-options-replica.html#option_mysqld_replicate-do-table)
    or [`--replicate-ignore-table`](replication-options-replica.html#option_mysqld_replicate-ignore-table)
    option.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`BLACKHOLE`引擎可以实现源列过滤。这是通过类似于源表过滤的方式实现的 - 使用`BLACKHOLE`引擎和[`--replicate-do-table`](replication-options-replica.html#option_mysqld_replicate-do-table)或[`--replicate-ignore-table`](replication-options-replica.html#option_mysqld_replicate-ignore-table)选项。
- en: 'The setup for the source is:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 源的设置为：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The setup for the trusted replica is:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 受信任副本的设置为：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The setup for the untrusted replica is:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不受信任副本的设置为：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
