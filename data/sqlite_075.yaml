- en: 1\. Summary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 总结
- en: 原文：[https://sqlite.com/fasterthanfs.html](https://sqlite.com/fasterthanfs.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/fasterthanfs.html](https://sqlite.com/fasterthanfs.html)
- en: SQLite reads and writes small blobs (for example, thumbnail images) [35% faster¹](#approx)
    than the same blobs can be read from or written to individual files on disk using
    fread() or fwrite().
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite读写小的blob（例如缩略图图像）比使用fread()或fwrite()从磁盘上的单独文件读取或写入这些blob要快35%¹。
- en: Furthermore, a single SQLite database holding 10-kilobyte blobs uses about 20%
    less disk space than storing the blobs in individual files.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一个单独的SQLite数据库存储10千字节的blob，比将blob存储在单独文件中少约20%的磁盘空间。
- en: The performance difference arises (we believe) because when working from an
    SQLite database, the open() and close() system calls are invoked only once, whereas
    open() and close() are invoked once for each blob when using blobs stored in individual
    files. It appears that the overhead of calling open() and close() is greater than
    the overhead of using the database. The size reduction arises from the fact that
    individual files are padded out to the next multiple of the filesystem block size,
    whereas the blobs are packed more tightly into an SQLite database.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为性能差异是因为从SQLite数据库中工作时，只调用一次open()和close()系统调用，而使用单独文件中存储的blob时，每个blob会调用一次open()和close()。似乎调用open()和close()的开销大于使用数据库的开销。大小的减少是因为单独文件会填充到文件系统块大小的下一个倍数，而blob更紧密地打包到SQLite数据库中。
- en: The measurements in this article were made during the week of 2017-06-05 using
    a version of SQLite in between 3.19.2 and 3.20.0\. You may expect future versions
    of SQLite to perform even better.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章中的测量是在2017-06-05那周使用的SQLite版本介于3.19.2和3.20.0之间。您可以预期未来的SQLite版本会表现得更好。
- en: 1.1\. Caveats
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1\. 注意事项
- en: ¹The 35% figure above is approximate. Actual timings vary depending on hardware,
    operating system, and the details of the experiment, and due to random performance
    fluctuations on real-world hardware. See the text below for more detail. Try the
    experiments yourself. Report significant deviations on the [SQLite forum](support.html#fx).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ¹上述的35%数字是大约的。实际的时间会因硬件、操作系统和实验细节的不同而变化，也会因真实硬件上的性能波动而变化。详细信息请参阅下文。请自行尝试这些实验。在[SQLite论坛](support.html#fx)上报告显著偏差。
- en: The 35% figure is based on running tests on every machine that the author has
    easily at hand. Some reviewers of this article report that SQLite has higher latency
    than direct I/O on their systems. We do not yet understand the difference. We
    also see indications that SQLite does not perform as well as direct I/O when experiments
    are run using a cold filesystem cache.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这35%的数字基于在作者手边容易获取的每台机器上运行测试。本文的一些审阅者报告说在他们的系统上，SQLite的延迟高于直接I/O。我们还不理解这种差异。我们还看到迹象表明，当使用冷文件系统缓存运行实验时，SQLite的表现不如直接I/O。
- en: 'So let your take-away be this: read/write latency for SQLite is competitive
    with read/write latency of individual files on disk. Often SQLite is faster. Sometimes
    SQLite is almost as fast. Either way, this article disproves the common assumption
    that a relational database must be slower than direct filesystem I/O.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您的收获是：SQLite 的读写延迟与磁盘上单个文件的读写延迟相竞争。通常情况下，SQLite 更快。有时候，SQLite 几乎一样快。总之，本文证明了一个常见的假设是错误的，即关系数据库一定比直接文件系统
    I/O 更慢。
- en: 1.2\. Related Studies
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2\. 相关研究
- en: A [2022 study](https://golangexample.com/an-unscientific-benchmark-of-sqlite-vs-the-file-system-btrfs/)
    ([alternative link on GitHub](https://github.com/chrisdavies/dbench)) found that
    SQLite is *roughly* twice as fast at real-world workloads compared to Btrfs and
    Ext4 on Linux.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一项 [2022 年的研究](https://golangexample.com/an-unscientific-benchmark-of-sqlite-vs-the-file-system-btrfs/)
    ([GitHub 上的备用链接](https://github.com/chrisdavies/dbench)) 发现，SQLite 在真实世界的工作负载中大约比
    Linux 上的 Btrfs 和 Ext4 快两倍。
- en: '[Jim Gray](https://www.microsoft.com/en-us/research/people/gray/) and others
    studied the read performance of BLOBs versus file I/O for Microsoft SQL Server
    and found that reading BLOBs out of the database was faster for BLOB sizes less
    than between 250KiB and 1MiB. ([Paper](https://www.microsoft.com/en-us/research/publication/to-blob-or-not-to-blob-large-object-storage-in-a-database-or-a-filesystem/)).
    In that study, the database still stores the filename of the content even if the
    content is held in a separate file. So the database is consulted for every BLOB,
    even if it is only to extract the filename. In this article, the key for the BLOB
    is the filename, so no preliminary database access is required. Because the database
    is never used at all when reading content from individual files in this article,
    the threshold at which direct file I/O becomes faster is smaller than it is in
    Gray''s paper.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jim Gray](https://www.microsoft.com/en-us/research/people/gray/) 和其他人研究了 Microsoft
    SQL Server 中 BLOB 与文件 I/O 的读取性能，并发现对于小于 250KiB 到 1MiB 的 BLOB 大小，直接从数据库中读取 BLOB
    的速度更快。([Paper](https://www.microsoft.com/en-us/research/publication/to-blob-or-not-to-blob-large-object-storage-in-a-database-or-a-filesystem/))。在该研究中，即使内容存储在单独的文件中，数据库仍会存储内容的文件名。因此，对于每个
    BLOB 都要查询数据库，即使仅仅是提取文件名。在本文中，BLOB 的关键是文件名，因此不需要预先访问数据库。由于在本文中从单个文件读取内容时根本不使用数据库，所以直接文件
    I/O 的速度优势的临界点比 Gray 的论文中更小。'
- en: The [Internal Versus External BLOBs](intern-v-extern-blob.html) article on this
    website is an earlier investigation (circa 2011) that uses the same approach as
    the Jim Gray paper — storing the blob filenames as entries in the database — but
    for SQLite instead of SQL Server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该网站上的 [内部与外部 BLOBs](intern-v-extern-blob.html) 文章是一个早期的研究（大约在 2011 年），采用了与 Jim
    Gray 论文相同的方法 —— 将 BLOB 文件名作为数据库中的条目存储 —— 但用于 SQLite 而不是 SQL Server。
- en: 2\. How These Measurements Are Made
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 如何进行这些测量
- en: 'I/O performance is measured using the [kvtest.c](https://www.sqlite.org/src/file/test/kvtest.c)
    program from the SQLite source tree. To compile this test program, first gather
    the kvtest.c source file into a directory with the [SQLite amalgamation](amalgamation.html)
    source files "sqlite3.c" and "sqlite3.h". Then on unix, run a command like the
    following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: I/O 性能使用 SQLite 源码树中的 [kvtest.c](https://www.sqlite.org/src/file/test/kvtest.c)
    程序进行测量。要编译此测试程序，首先将 kvtest.c 源文件与 SQLite 汇编源文件 "sqlite3.c" 和 "sqlite3.h" 放入同一个目录中。然后在
    Unix 系统上，运行如下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or on Windows with MSVC:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 MSVC 的 Windows 上：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Instructions for compiling for Android are [shown below](#compile-android).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 编译 Android 的说明在下面 [显示](#compile-android)。
- en: 'Use the resulting "kvtest" program to generate a test database with 100,000
    random uncompressible blobs, each with a random size between 8,000 and 12,000
    bytes using a command like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成的 "kvtest" 程序生成包含 100,000 个随机不可压缩 blob 的测试数据库，每个 blob 的随机大小在 8,000 到 12,000
    字节之间，使用如下命令：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If desired, you can verify the new database by running this command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以通过运行以下命令验证新数据库：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, make copies of all the blobs into individual files in a directory using
    a command like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用如下命令将所有 blob 的副本复制到一个目录中的各个文件中：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At this point, you can measure the amount of disk space used by the test1.db
    database and the space used by the test1.dir directory and all of its content.
    On a standard Ubuntu Linux desktop, the database file will be 1,024,512,000 bytes
    in size and the test1.dir directory will use 1,228,800,000 bytes of space (according
    to "du -k"), about 20% more than the database.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可以测量 test1.db 数据库使用的磁盘空间量以及 test1.dir 目录及其所有内容使用的空间量。在标准的 Ubuntu Linux 桌面上，数据库文件大小为
    1,024,512,000 字节，而 test1.dir 目录将使用 1,228,800,000 字节的空间（根据 "du -k"），比数据库多约 20%。
- en: 'The "test1.dir" directory created above puts all the blobs into a single folder.
    It was conjectured that some operating systems would perform poorly when a single
    directory contains 100,000 objects. To test this, the kvtest program can also
    store the blobs in a hierarchy of folders with no more than 100 files and/or subdirectories
    per folder. The alternative on-disk representation of the blobs can be created
    using the --tree command-line option to the "export" command, like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述创建的 "test1.dir" 目录将所有 blob 放入单个文件夹中。有人推测，当单个目录包含 100,000 个对象时，某些操作系统的性能可能会较差。为了测试这一点，kvtest
    程序还可以将 blob 存储在一个最多包含 100 个文件和/或子目录的文件夹层次结构中。可以使用 "export" 命令的 --tree 命令行选项来创建
    blob 的备选磁盘表示，例如：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The test1.dir directory will contain 100,000 files with names like "000000",
    "000001", "000002" and so forth but the test1.tree directory will contain the
    same files in subdirectories like "00/00/00", "00/00/01", and so on. The test1.dir
    and test1.test directories take up approximately the same amount of space, though
    test1.test is very slightly larger due to the extra directory entries.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: test1.dir 目录将包含 100,000 个文件，文件名类似于 "000000"、"000001"、"000002" 等，而 test1.tree
    目录将包含相同文件，但在子目录中，如 "00/00/00"、"00/00/01" 等。尽管 test1.test 稍微大一点，因为有额外的目录条目，但 test1.dir
    和 test1.test 目录大致占用相同的空间。
- en: All of the experiments that follow operate the same with either "test1.dir"
    or "test1.tree". Very little performance difference is measured in either case,
    regardless of operating system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 后续的所有实验使用 "test1.dir" 或 "test1.tree" 时效果相同。无论操作系统如何，在任一情况下测量的性能差异都很小。
- en: 'Measure the performance for reading blobs from the database and from individual
    files using these commands:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令来测量从数据库和从单个文件读取 blobs 的性能：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Depending on your hardware and operating system, you should see that reads from
    the test1.db database file are about 35% faster than reads from individual files
    in the test1.dir or test1.tree folders. Results can vary significantly from one
    run to the next due to caching, so it is advisable to run tests multiple times
    and take an average or a worst case or a best case, depending on your requirements.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的硬件和操作系统，您应该能看到从 test1.db 数据库文件读取的速度比从 test1.dir 或 test1.tree 文件夹中的单个文件读取快大约
    35%。由于缓存的原因，结果可能在多次运行中有显著变化，因此建议多次运行测试并取平均值或最坏情况或最佳情况，具体取决于您的要求。
- en: The --blob-api option on the database read test causes kvtest to use the [sqlite3_blob_read()](c3ref/blob_read.html)
    feature of SQLite to load the content of the blobs, rather than running pure SQL
    statements. This helps SQLite to run a little faster on read tests. You can omit
    that option to compare the performance of SQLite running SQL statements. In that
    case, the SQLite still out-performs direct reads, though by not as much as when
    using [sqlite3_blob_read()](c3ref/blob_read.html). The --blob-api option is ignored
    for tests that read from individual disk files.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库读取测试中使用 --blob-api 选项会导致 kvtest 使用 [sqlite3_blob_read()](c3ref/blob_read.html)
    特性来加载 blobs 的内容，而不是运行纯 SQL 语句。这有助于 SQLite 在读取测试中运行得更快一些。您可以省略该选项以比较运行 SQL 语句时的
    SQLite 性能。在这种情况下，SQLite 仍然优于直接读取，尽管不如使用 [sqlite3_blob_read()](c3ref/blob_read.html)
    时那么明显。对于从单独的磁盘文件读取的测试，--blob-api 选项会被忽略。
- en: Measure write performance by adding the --update option. This causes the blobs
    are overwritten in place with another random blob of exactly the same size.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加 --update 选项来测量写入性能。这会导致在原地用另一个大小完全相同的随机 blob 覆盖 blobs。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The writing test above is not completely fair, since SQLite is doing [power-safe
    transactions](transactional.html) whereas the direct-to-disk writing is not. To
    put the tests on a more equal footing, add either the --nosync option to the SQLite
    writes to disable calling fsync() or FlushFileBuffers() to force content to disk,
    or using the --fsync option for the direct-to-disk tests to force them to invoke
    fsync() or FlushFileBuffers() when updating disk files.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上述写入测试并不完全公平，因为SQLite正在执行[安全事务](transactional.html)，而直接写入磁盘则不是。为了使测试更加公平，可以向SQLite写入添加`--nosync`选项以禁用调用fsync()或FlushFileBuffers()来强制内容写入磁盘，或者使用`--fsync`选项将直接写入磁盘的测试强制调用fsync()或FlushFileBuffers()来更新磁盘文件。
- en: By default, kvtest runs the database I/O measurements all within a single transaction.
    Use the --multitrans option to run each blob read or write in a separate transaction.
    The --multitrans option makes SQLite much slower, and uncompetitive with direct
    disk I/O. This option proves, yet again, that to get the most performance out
    of SQLite, you should group as much database interaction as possible within a
    single transaction.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，kvtest在单个事务中运行所有数据库I/O测量。使用`--multitrans`选项可在单独事务中运行每个blob的读取或写入操作。`--multitrans`选项会使SQLite变得更慢，并且与直接磁盘I/O不竞争。这一选项再次证明，要想在SQLite中获得最佳性能，应尽可能将尽可能多的数据库交互集中在单个事务中进行。
- en: 'There are many other testing options, which can be seen by running the command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他测试选项，可以通过运行以下命令查看：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 2.1\. Read Performance Measurements
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1\. 读取性能测量
- en: 'The chart below shows data collected using [kvtest.c](https://www.sqlite.org/src/file/test/kvtest.c)
    on five different systems:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了在五种不同系统上使用[kvtest.c](https://www.sqlite.org/src/file/test/kvtest.c)收集的数据：
- en: '**Win7**: A circa-2009 Dell Inspiron laptop, Pentium dual-core at 2.30GHz,
    4GiB RAM, Windows7.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Win7**: 约2009年的戴尔Inspiron笔记本电脑，双核Pentium处理器，主频2.30GHz，4GiB RAM，Windows7。'
- en: '**Win10**: A 2016 Lenovo YOGA 910, Intel i7-7500 at 2.70GHz, 16GiB RAM, Windows10.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Win10**: 2016年款Lenovo YOGA 910，Intel i7-7500处理器，主频2.70GHz，16GiB RAM，Windows10。'
- en: '**Mac**: A 2015 MacBook Pro, 3.1GHz intel Core i7, 16GiB RAM, MacOS 10.12.5'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mac**: 2015年款MacBook Pro，3.1GHz Intel Core i7处理器，16GiB RAM，MacOS 10.12.5'
- en: '**Ubuntu**: Desktop built from Intel i7-4770K at 3.50GHz, 32GiB RAM, Ubuntu
    16.04.2 LTS'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ubuntu**: 台式机配置为Intel i7-4770K，主频3.50GHz，32GiB RAM，Ubuntu 16.04.2 LTS'
- en: '**Android**: Galaxy S3, ARMv7, 2GiB RAM'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**: Galaxy S3, ARMv7, 2GiB RAM'
- en: All machines use SSD except Win7 which has a hard-drive. The test database is
    100K blobs with sizes uniformly distributed between 8K and 12K, for a total of
    about 1 gigabyte of content. The database page size is 4KiB. The -DSQLITE_DIRECT_OVERFLOW_READ
    compile-time option was used for all of these tests. Tests were run multiple times.
    The first run was used to warm up the cache and its timings were discarded.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所有机器均使用SSD，除了Win7使用硬盘驱动器。测试数据库包含100K个blob，大小均匀分布在8K到12K之间，总计约1GB内容。数据库页面大小为4KiB。所有这些测试都使用了编译时选项`-DSQLITE_DIRECT_OVERFLOW_READ`。测试运行了多次，第一次运行用于热身缓存，其时间测量被丢弃。
- en: The chart below shows average time to read a blob directly from the filesystem
    versus the time needed to read the same blob from the SQLite database. The actual
    timings vary considerably from one system to another (the Ubuntu desktop is much
    faster than the Galaxy S3 phone, for example). This chart shows the ratio of the
    times needed to read blobs from a file divided by the time needed to from the
    database. The left-most column in the chart is the normalized time to read from
    the database, for reference.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表显示直接从文件系统读取一个 blob 的平均时间与从 SQLite 数据库读取相同 blob 所需的时间之间的差异。实际的时间在不同系统之间有很大的变化（例如，Ubuntu
    桌面比 Galaxy S3 手机快得多）。该图表显示了从数据库读取 blob 所需时间与从文件读取 blob 所需时间的比率。图表最左边的列是从数据库读取的标准化时间，作为参考。
- en: In this chart, an SQL statement ("SELECT v FROM kv WHERE k=?1") is prepared
    once. Then for each blob, the blob key value is bound to the ?1 parameter and
    the statement is evaluated to extract the blob content.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张图表中，一个 SQL 语句（"SELECT v FROM kv WHERE k=?1"）被预先准备好。然后对于每个 blob，blob 键值被绑定到参数
    ?1，并且该语句被评估以提取 blob 内容。
- en: The chart shows that on Windows10, content can be read from the SQLite database
    about 5 times faster than it can be read directly from disk. On Android, SQLite
    is only about 35% faster than reading from disk.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图表显示，在 Windows10 上，从 SQLite 数据库读取内容大约比直接从磁盘读取快 5 倍。在 Android 上，SQLite 只比从磁盘读取快约
    35%。
- en: '![](../Images/c01c3da25edefa1d3de834946e1a1211.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c01c3da25edefa1d3de834946e1a1211.png)'
- en: 'Chart 1: SQLite read latency relative to direct filesystem reads.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图表 1：SQLite 相对于直接文件系统读取的读取延迟。
- en: 100K blobs, avg 10KB each, random order using SQL
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 100K 个 blobs，每个平均 10KB，随机顺序使用 SQL。
- en: 'The performance can be improved slightly by bypassing the SQL layer and reading
    the blob content directly using the [sqlite3_blob_read()](c3ref/blob_read.html)
    interface, as shown in the next chart:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过绕过 SQL 层并直接使用[sqlite3_blob_read()](c3ref/blob_read.html)接口读取 blob 内容，可以略微提高性能，如下一个图表所示：
- en: '![](../Images/47fbd424c3e6c0cb96ee571f73d97a51.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/47fbd424c3e6c0cb96ee571f73d97a51.png)'
- en: 'Chart 2: SQLite read latency relative to direct filesystem reads.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图表 2：SQLite 相对于直接文件系统读取的读取延迟。
- en: 100K blobs, avg size 10KB, random order
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 100K 个 blobs，平均大小为 10KB，随机顺序。
- en: using sqlite3_blob_read().
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 sqlite3_blob_read()。
- en: Further performance improves can be made by using the [memory-mapped I/O](mmap.html)
    feature of SQLite. In the next chart, the entire 1GB database file is memory mapped
    and blobs are read (in random order) using the [sqlite3_blob_read()](c3ref/blob_read.html)
    interface. With these optimizations, SQLite is twice as fast as Android or MacOS-X
    and over 10 times faster than Windows.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用SQLite的[内存映射 I/O](mmap.html)特性可以进一步提高性能。在下一个图表中，整个 1GB 的数据库文件被内存映射，并且使用[sqlite3_blob_read()](c3ref/blob_read.html)接口以随机顺序读取
    blob 数据。通过这些优化，SQLite 的速度是 Android 或 MacOS-X 的两倍，比 Windows 快 10 倍以上。
- en: '![](../Images/358b5181493de2818cf710a2b40c57db.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/358b5181493de2818cf710a2b40c57db.png)'
- en: 'Chart 3: SQLite read latency relative to direct filesystem reads.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图表 3：SQLite 相对于直接文件系统读取的读取延迟。
- en: 100K blobs, avg size 10KB, random order
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 100K 个 blob，平均大小 10KB，随机顺序
- en: using sqlite3_blob_read() from a memory-mapped database.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用来自内存映射数据库的 sqlite3_blob_read()。
- en: The third chart shows that reading blob content out of SQLite can be twice as
    fast as reading from individual files on disk for Mac and Android, and an amazing
    ten times faster for Windows.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个图表显示，从 SQLite 中读取 blob 内容在 Mac 和 Android 上可以比从磁盘上的单个文件快两倍，而在 Windows 上则快十倍之多。
- en: 2.2\. Write Performance Measurements
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2\. 写入性能测量
- en: Writes are slower. On all systems, using both direct I/O and SQLite, write performance
    is between 5 and 15 times slower than reads.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 写入较慢。在所有系统上，无论是使用直接 I/O 还是 SQLite，写入性能都比读取慢 5 至 15 倍。
- en: Write performance measurements were made by replacing (overwriting) an entire
    blob with a different blob. All of the blobs in these experiment are random and
    incompressible. Because writes are so much slower than reads, only 10,000 of the
    100,000 blobs in the database are replaced. The blobs to be replaced are selected
    at random and are in no particular order.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将一个完整的 blob 用不同的 blob 进行替换（覆盖）来进行写入性能测量。这些实验中的所有 blob 都是随机且不可压缩的。由于写入比读取慢得多，数据库中的
    10,000 个 blob 中仅替换了 100,000 个。要替换的 blob 是随机选择的，没有特定顺序。
- en: The direct-to-disk writes are accomplished using fopen()/fwrite()/fclose().
    By default, and in all the results shown below, the OS filesystem buffers are
    never flushed to persistent storage using fsync() or FlushFileBuffers(). In other
    words, there is no attempt to make the direct-to-disk writes transactional or
    power-safe. We found that invoking fsync() or FlushFileBuffers() on each file
    written causes direct-to-disk storage to be about 10 times or more slower than
    writes to SQLite.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 直接写入磁盘使用 fopen()/fwrite()/fclose() 来完成。默认情况下，在下面显示的所有结果中，操作系统文件系统缓冲区不会使用 fsync()
    或 FlushFileBuffers() 刷新到持久存储。换句话说，没有尝试使直接写入磁盘的操作具有事务性或安全性保障。我们发现，对每个写入的文件调用 fsync()
    或 FlushFileBuffers() 会使直接写入磁盘的速度比写入 SQLite 慢大约 10 倍或更多。
- en: The next chart compares SQLite database updates in [WAL mode](wal.html) against
    raw direct-to-disk overwrites of separate files on disk. The [PRAGMA synchronous](pragma.html#pragma_synchronous)
    setting is NORMAL. All database writes are in a single transaction. The timer
    for the database writes is stopped after the transaction commits, but before a
    [checkpoint](wal.html#ckpt) is run. Note that the SQLite writes, unlike the direct-to-disk
    writes, are [transactional](transactional.html) and [power-safe](transactional.html),
    though because the synchronous setting is NORMAL instead of FULL, the transactions
    are not durable.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图表将 SQLite 数据库在 [WAL 模式](wal.html) 下的更新与在磁盘上的原始直接覆盖文件进行了比较。[PRAGMA synchronous](pragma.html#pragma_synchronous)
    设置为 NORMAL。所有数据库写入都在一个单一事务中。在事务提交后，但在运行 [checkpoint](wal.html#ckpt) 之前停止了数据库写入的计时器。请注意，与直接写入磁盘写入不同，SQLite
    写入是[事务性](transactional.html)和[安全的](transactional.html)，尽管因为同步设置为 NORMAL 而不是 FULL，事务并不是持久的。
- en: '![](../Images/96a455f3f9376c155bc70ee9bcbd4a35.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96a455f3f9376c155bc70ee9bcbd4a35.png)'
- en: 'Chart 4: SQLite write latency relative to direct filesystem writes.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图表4：SQLite写入延迟相对于直接文件系统写入。
- en: 10K blobs, avg size 10KB, random order,
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 10K个blob，平均大小为10KB，随机顺序，
- en: WAL mode with synchronous NORMAL,
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用具有同步NORMAL的WAL模式，
- en: exclusive of checkpoint time
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不包括检查点时间
- en: The android performance numbers for the write experiments are omitted because
    the performance tests on the Galaxy S3 are so random. Two consecutive runs of
    the exact same experiment would give wildly different times. And, to be fair,
    the performance of SQLite on android is slightly slower than writing directly
    to disk.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于写入实验，Android的性能数据被省略，因为Galaxy S3上的性能测试结果太随机了。两次连续运行完全相同的实验会得到截然不同的时间。而且公平地说，SQLite在Android上的性能略慢于直接写入磁盘。
- en: The next chart shows the performance of SQLite versus direct-to-disk when transactions
    are disabled ([PRAGMA journal_mode=OFF](pragma.html#pragma_journal_mode)) and
    [PRAGMA synchronous](pragma.html#pragma_synchronous) is set to OFF. These settings
    put SQLite on an equal footing with direct-to-disk writes, which is to say they
    make the data prone to corruption due to system crashes and power failures.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张图显示了当禁用事务（[PRAGMA journal_mode=OFF](pragma.html#pragma_journal_mode)）和[PRAGMA
    synchronous](pragma.html#pragma_synchronous)设置为OFF时，SQLite与直接写入磁盘的性能对比。这些设置使SQLite在与直接写入磁盘相等的环境下运行，这意味着数据容易因系统崩溃和电源故障而损坏。
- en: '![](../Images/5f0d2f90e3c4ecf2a390b98e773f18c1.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5f0d2f90e3c4ecf2a390b98e773f18c1.png)'
- en: 'Chart 5: SQLite write latency relative to direct filesystem writes.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图表5：SQLite写入延迟相对于直接文件系统写入。
- en: 10K blobs, avg size 10KB, random order,
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 10K个blob，平均大小为10KB，随机顺序，
- en: journaling disabled, synchronous OFF.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用日志记录，同步OFF。
- en: In all of the write tests, it is important to disable anti-virus software prior
    to running the direct-to-disk performance tests. We found that anti-virus software
    slows down direct-to-disk by an order of magnitude whereas it impacts SQLite writes
    very little. This is probably due to the fact that direct-to-disk changes thousands
    of separate files which all need to be checked by anti-virus, whereas SQLite writes
    only changes the single database file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有写入测试中，重要的是在运行直接写入磁盘性能测试之前禁用防病毒软件。我们发现，防病毒软件会使直接写入磁盘的速度减慢一个数量级，而它对SQLite写入的影响很小。这可能是因为直接写入磁盘会改变成千上万个单独的文件，所有这些文件都需要被防病毒软件检查，而SQLite写入只会改变单个数据库文件。
- en: 2.3\. Variations
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3\. 变体
- en: The [-DSQLITE_DIRECT_OVERFLOW_READ](compile.html#direct_overflow_read) compile-time
    option causes SQLite to bypass its page cache when reading content from overflow
    pages. This helps database reads of 10K blobs run a little faster, but not all
    that much faster. SQLite still holds a speed advantage over direct filesystem
    reads without the SQLITE_DIRECT_OVERFLOW_READ compile-time option.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[-DSQLITE_DIRECT_OVERFLOW_READ](compile.html#direct_overflow_read)编译时选项会导致SQLite在从溢出页面读取内容时绕过其页面缓存。这有助于提高对10K
    blob的数据库读取速度，但提高并不多。SQLite仍然比没有SQLITE_DIRECT_OVERFLOW_READ编译时选项的直接文件系统读取速度快。'
- en: Other compile-time options such as using -O3 instead of -Os or using [-DSQLITE_THREADSAFE=0](compile.html#threadsafe)
    and/or some of the other [recommended compile-time options](compile.html#rcmd)
    might help SQLite to run even faster relative to direct filesystem reads.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 其他编译时选项，如使用 -O3 而不是 -Os，或者使用 [-DSQLITE_THREADSAFE=0](compile.html#threadsafe)
    和/或一些其他 [推荐的编译时选项](compile.html#rcmd)，可能会帮助 SQLite 相对于直接文件系统读取更快地运行。
- en: The size of the blobs in the test data affects performance. The filesystem will
    generally be faster for larger blobs, since the overhead of open() and close()
    is amortized over more bytes of I/O, whereas the database will be more efficient
    in both speed and space as the average blob size decreases.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 测试数据中 blobs 的大小影响性能。对于更大的 blobs，文件系统通常更快，因为 open() 和 close() 的开销分摊在更多的 I/O 字节上，而平均
    blob 大小减小时，数据库在速度和空间上的效率更高。
- en: 3\. General Findings
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 总体发现
- en: SQLite is competitive with, and usually faster than, blobs stored in separate
    files on disk, for both reading and writing.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SQLite 在读写上通常比存储在独立文件中的二进制大对象（blobs）更具竞争力，且通常更快。
- en: SQLite is much faster than direct writes to disk on Windows when anti-virus
    protection is turned on. Since anti-virus software is and should be on by default
    in Windows, that means that SQLite is generally much faster than direct disk writes
    on Windows.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上，当启用反病毒保护时，SQLite 比直接写入磁盘快得多。由于在 Windows 中反病毒软件通常默认开启，这意味着 SQLite
    通常比直接写入磁盘快得多。
- en: Reading is about an order of magnitude faster than writing, for all systems
    and for both SQLite and direct-to-disk I/O.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于所有系统以及 SQLite 和直接写入磁盘 I/O 来说，读取大约比写入快一个数量级。
- en: I/O performance varies widely depending on operating system and hardware. Make
    your own measurements before drawing conclusions.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: I/O 性能因操作系统和硬件而异。在得出结论之前，请进行自己的测量。
- en: Some other SQL database engines advise developers to store blobs in separate
    files and then store the filename in the database. In that case, where the database
    must first be consulted to find the filename before opening and reading the file,
    simply storing the entire blob in the database gives much faster read and write
    performance with SQLite. See the [Internal Versus External BLOBs](intern-v-extern-blob.html)
    article for more information.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些其他 SQL 数据库引擎建议开发者将 blobs 存储在单独的文件中，然后在数据库中存储文件名。在这种情况下，必须首先查询数据库以查找文件名，然后打开和读取文件，而将整个
    blob 存储在数据库中则可以提供比 SQLite 更快的读写性能。详见 [Internal Versus External BLOBs](intern-v-extern-blob.html)
    文章获取更多信息。
- en: 4\. Additional Notes
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 附加说明
- en: 4.1\. Compiling And Testing on Android
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.1\. 在 Android 上编译和测试
- en: 'The kvtest program is compiled and run on Android as follows. First install
    the Android SDK and NDK. Then prepare a script named "android-gcc" that looks
    approximately like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: kvtest 程序在 Android 上编译和运行如下。首先安装 Android SDK 和 NDK。然后准备一个名为 "android-gcc" 的脚本，大致如下所示：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Make that script executable and put it on your $PATH. Then compile the kvtest
    program as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将该脚本设为可执行并放置在你的 $PATH 中。然后按如下方式编译 kvtest 程序：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, move the resulting kvtest-android executable to the Android device:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将生成的 kvtest-android 可执行文件移动到安卓设备上：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Finally use "adb shell" to get a shell prompt on the Android device, cd into
    the /data/local/tmp directory, and begin running the tests as with any other unix
    host.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 "adb shell" 在安卓设备上获取一个 shell 提示符，进入 /data/local/tmp 目录，并像在任何其他 Unix 主机上一样开始运行测试。
