- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/subquery-optimization-with-exists.html](https://dev.mysql.com/doc/refman/8.0/en/subquery-optimization-with-exists.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/subquery-optimization-with-exists.html](https://dev.mysql.com/doc/refman/8.0/en/subquery-optimization-with-exists.html)
- en: 10.2.2.3 Optimizing Subqueries with the EXISTS Strategy
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.2.2.3 优化 EXISTS 策略的子查询
- en: Certain optimizations are applicable to comparisons that use the `IN` (or `=ANY`)
    operator to test subquery results. This section discusses these optimizations,
    particularly with regard to the challenges that `NULL` values present. The last
    part of the discussion suggests how you can help the optimizer.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 某些优化适用于使用 `IN`（或 `=ANY`）运算符测试子查询结果的比较。本节讨论了这些优化，特别是关于 `NULL` 值带来的挑战。讨论的最后部分建议您如何帮助优化器。
- en: 'Consider the following subquery comparison:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下子查询比较：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: MySQL evaluates queries “from outside to inside.” That is, it first obtains
    the value of the outer expression *`outer_expr`*, and then runs the subquery and
    captures the rows that it produces.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 从“外到内”评估查询。也就是说，它首先获取外部表达式 *`outer_expr`* 的值，然后运行子查询并捕获其生成的行。
- en: 'A very useful optimization is to “inform” the subquery that the only rows of
    interest are those where the inner expression *`inner_expr`* is equal to *`outer_expr`*.
    This is done by pushing down an appropriate equality into the subquery''s `WHERE`
    clause to make it more restrictive. The converted comparison looks like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常有用的优化是“通知”子查询感兴趣的行仅为内部表达式 *`inner_expr`* 等于 *`outer_expr`* 的行。这是通过将适当的相等性推送到子查询的
    `WHERE` 子句中以使其更加严格来完成的。转换后的比较如下所示：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the conversion, MySQL can use the pushed-down equality to limit the number
    of rows it must examine to evaluate the subquery.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 转换后，MySQL 可以使用推送的相等性来限制必须检查的行数以评估子查询。
- en: 'More generally, a comparison of *`N`* values to a subquery that returns *`N`*-value
    rows is subject to the same conversion. If *`oe_i`* and *`ie_i`* represent corresponding
    outer and inner expression values, this subquery comparison:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地，将 *`N`* 个值与返回 *`N`* 个值行的子查询进行比较会受到相同的转换影响。如果 *`oe_i`* 和 *`ie_i`* 表示相应的外部和内部表达式值，则此子查询比较：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Becomes:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 变为：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For simplicity, the following discussion assumes a single pair of outer and
    inner expression values.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为简单起见，以下讨论假定有一对外部和内部表达式值。
- en: 'The “pushdown” strategy just described works if either of these conditions
    is true:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚描述的“推送”策略在以下条件之一为真时有效：
- en: '*`outer_expr`* and *`inner_expr`* cannot be `NULL`.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`outer_expr`* 和 *`inner_expr`* 不能为 `NULL`。'
- en: 'You need not distinguish `NULL` from `FALSE` subquery results. If the subquery
    is a part of an [`OR`](logical-operators.html#operator_or) or [`AND`](logical-operators.html#operator_and)
    expression in the `WHERE` clause, MySQL assumes that you do not care. Another
    instance where the optimizer notices that `NULL` and `FALSE` subquery results
    need not be distinguished is this construct:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您无需区分 `NULL` 和 `FALSE` 子查询结果。如果子查询是 `WHERE` 子句中的 [`OR`](logical-operators.html#operator_or)
    或 [`AND`](logical-operators.html#operator_and) 表达式的一部分，MySQL 假定您不关心。另一个优化器注意到
    `NULL` 和 `FALSE` 子查询结果无需区分的情况是这种结构：
- en: '[PRE4]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case, the `WHERE` clause rejects the row whether `IN (*`subquery`*)`
    returns `NULL` or `FALSE`.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，`WHERE` 子句拒绝行，无论 `IN (*`subquery`*)` 返回 `NULL` 还是 `FALSE`。
- en: 'Suppose that *`outer_expr`* is known to be a non-`NULL` value but the subquery
    does not produce a row such that *`outer_expr`* = *`inner_expr`*. Then `*`outer_expr`*
    IN (SELECT ...)` evaluates as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 *`outer_expr`* 已知是非 `NULL` 值，但子查询没有生成这样的行，使得 *`outer_expr`* = *`inner_expr`*。那么
    `*`outer_expr`* IN (SELECT ...)` 的评估如下：
- en: '`NULL`, if the [`SELECT`](select.html "15.2.13 SELECT Statement") produces
    any row where *`inner_expr`* is `NULL`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NULL`，如果 [`SELECT`](select.html "15.2.13 SELECT 语句") 生成任何行，其中 *`inner_expr`*
    为 `NULL`'
- en: '`FALSE`, if the [`SELECT`](select.html "15.2.13 SELECT Statement") produces
    only non-`NULL` values or produces nothing'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FALSE`，如果 [`SELECT`](select.html "15.2.13 SELECT 语句") 仅生成非 `NULL` 值或不生成任何内容'
- en: 'In this situation, the approach of looking for rows with `*`outer_expr`* =
    *`inner_expr`*` is no longer valid. It is necessary to look for such rows, but
    if none are found, also look for rows where *`inner_expr`* is `NULL`. Roughly
    speaking, the subquery can be converted to something like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，寻找 `*`outer_expr`* = *`inner_expr`*` 的行的方法不再有效。需要寻找这样的行，但如果找不到，则还需要寻找
    *`inner_expr`* 为 `NULL` 的行。粗略地说，子查询可以转换为类似于以下内容：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The need to evaluate the extra [`IS NULL`](comparison-operators.html#operator_is-null)
    condition is why MySQL has the [`ref_or_null`](explain-output.html#jointype_ref_or_null)
    access method:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 需要评估额外的[`IS NULL`](comparison-operators.html#operator_is-null)条件是MySQL拥有[`ref_or_null`](explain-output.html#jointype_ref_or_null)访问方法的原因：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The [`unique_subquery`](explain-output.html#jointype_unique_subquery) and [`index_subquery`](explain-output.html#jointype_index_subquery)
    subquery-specific access methods also have “or `NULL`” variants.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[`unique_subquery`](explain-output.html#jointype_unique_subquery)和[`index_subquery`](explain-output.html#jointype_index_subquery)子查询特定的访问方法也有“or
    `NULL`”变体。'
- en: The additional `OR ... IS NULL` condition makes query execution slightly more
    complicated (and some optimizations within the subquery become inapplicable),
    but generally this is tolerable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的`OR ... IS NULL`条件使得查询执行稍微复杂一些（子查询内的一些优化变得不适用），但通常是可以容忍的。
- en: 'The situation is much worse when *`outer_expr`* can be `NULL`. According to
    the SQL interpretation of `NULL` as “unknown value,” `NULL IN (SELECT *`inner_expr`*
    ...)` should evaluate to:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当*`outer_expr`*可以为`NULL`时情况会更糟。根据SQL将`NULL`解释为“未知值”，`NULL IN (SELECT *`inner_expr`*
    ...)`应该评估为：
- en: '`NULL`, if the [`SELECT`](select.html "15.2.13 SELECT Statement") produces
    any rows'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果[`SELECT`](select.html "15.2.13 SELECT Statement")产生任何行，则为`NULL`
- en: '`FALSE`, if the [`SELECT`](select.html "15.2.13 SELECT Statement") produces
    no rows'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果[`SELECT`](select.html "15.2.13 SELECT Statement")不产生任何行，则为`FALSE`
- en: For proper evaluation, it is necessary to be able to check whether the [`SELECT`](select.html
    "15.2.13 SELECT Statement") has produced any rows at all, so `*`outer_expr`* =
    *`inner_expr`*` cannot be pushed down into the subquery. This is a problem because
    many real world subqueries become very slow unless the equality can be pushed
    down.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确评估，有必要检查[`SELECT`](select.html "15.2.13 SELECT Statement")是否产生了任何行，因此`*`outer_expr`*
    = *`inner_expr`*`不能被推送到子查询中。这是一个问题，因为许多现实世界的子查询会变得非常缓慢，除非相等性可以被推送下去。
- en: Essentially, there must be different ways to execute the subquery depending
    on the value of *`outer_expr`*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，必须有不同的方式来执行子查询，取决于*`outer_expr`*的值。
- en: 'The optimizer chooses SQL compliance over speed, so it accounts for the possibility
    that *`outer_expr`* might be `NULL`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 优化器选择SQL的兼容性而非速度，因此它考虑到*`outer_expr`*可能是`NULL`的可能性：
- en: 'If *`outer_expr`* is `NULL`, to evaluate the following expression, it is necessary
    to execute the [`SELECT`](select.html "15.2.13 SELECT Statement") to determine
    whether it produces any rows:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*`outer_expr`*为`NULL`，为了评估以下表达式，需要执行[`SELECT`](select.html "15.2.13 SELECT
    Statement")以确定是否产生任何行：
- en: '[PRE7]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is necessary to execute the original [`SELECT`](select.html "15.2.13 SELECT
    Statement") here, without any pushed-down equalities of the kind mentioned previously.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里需要执行原始的[`SELECT`](select.html "15.2.13 SELECT Statement")，而不带有之前提到的任何推送下来的相等性。
- en: 'On the other hand, when *`outer_expr`* is not `NULL`, it is absolutely essential
    that this comparison:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，当*`outer_expr`*不为`NULL`时，绝对必要进行以下比较：
- en: '[PRE8]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Be converted to this expression that uses a pushed-down condition:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 被转换为使用推送下来条件的这个表达式：
- en: '[PRE9]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Without this conversion, subqueries are slow.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有这种转换，子查询会很慢。
- en: 'To solve the dilemma of whether or not to push down conditions into the subquery,
    the conditions are wrapped within “trigger” functions. Thus, an expression of
    the following form:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决是否将条件推送到子查询中的困境，条件被包装在“触发器”函数中。因此，以下形式的表达式：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Is converted into:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 被转换为：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'More generally, if the subquery comparison is based on several pairs of outer
    and inner expressions, the conversion takes this comparison:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地，如果子查询比较基于几对外部和内部表达式，转换将采用这种比较：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And converts it to this expression:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其转换为以下表达式：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Each `trigcond(*`X`*)` is a special function that evaluates to the following
    values:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`trigcond(*`X`*)`是一个特殊函数，其计算结果如下：
- en: '*`X`* when the “linked” outer expression *`oe_i`* is not `NULL`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当“链接”外部表达式*`oe_i`*不为`NULL`时为*`X`*
- en: '`TRUE` when the “linked” outer expression *`oe_i`* is `NULL`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当“链接”外部表达式*`oe_i`*为`NULL`时为`TRUE`
- en: Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Trigger functions are *not* triggers of the kind that you create with [`CREATE
    TRIGGER`](create-trigger.html "15.1.22 CREATE TRIGGER Statement").
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器函数不是您使用[`CREATE TRIGGER`](create-trigger.html "15.1.22 CREATE TRIGGER Statement")创建的那种触发器。
- en: 'Equalities that are wrapped within `trigcond()` functions are not first class
    predicates for the query optimizer. Most optimizations cannot deal with predicates
    that may be turned on and off at query execution time, so they assume any `trigcond(*`X`*)`
    to be an unknown function and ignore it. Triggered equalities can be used by those
    optimizations:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 被包裹在`trigcond()`函数内的相等性不是查询优化器的一流谓词。大多数优化无法处理可能在查询执行时打开和关闭的谓词，因此它们假定任何`trigcond(*`X`*)`都是一个未知函数并将其忽略。触发的相等性可以被这些优化使用：
- en: 'Reference optimizations: `trigcond(*`X`*=*`Y`* [OR *`Y`* IS NULL])` can be
    used to construct [`ref`](explain-output.html#jointype_ref), [`eq_ref`](explain-output.html#jointype_eq_ref),
    or [`ref_or_null`](explain-output.html#jointype_ref_or_null) table accesses.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考优化：`trigcond(*`X`*=*`Y`* [OR *`Y`* IS NULL])`可以用来构建[`ref`](explain-output.html#jointype_ref)、[`eq_ref`](explain-output.html#jointype_eq_ref)或[`ref_or_null`](explain-output.html#jointype_ref_or_null)表访问。
- en: 'Index lookup-based subquery execution engines: `trigcond(*`X`*=*`Y`*)` can
    be used to construct [`unique_subquery`](explain-output.html#jointype_unique_subquery)
    or [`index_subquery`](explain-output.html#jointype_index_subquery) accesses.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于索引查找的子查询执行引擎：`trigcond(*`X`*=*`Y`*)`可以用来构建[`unique_subquery`](explain-output.html#jointype_unique_subquery)或[`index_subquery`](explain-output.html#jointype_index_subquery)访问。
- en: 'Table-condition generator: If the subquery is a join of several tables, the
    triggered condition is checked as soon as possible.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表条件生成器：如果子查询是几个表的连接，触发的条件将尽快被检查。
- en: 'When the optimizer uses a triggered condition to create some kind of index
    lookup-based access (as for the first two items of the preceding list), it must
    have a fallback strategy for the case when the condition is turned off. This fallback
    strategy is always the same: Do a full table scan. In [`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement") output, the fallback shows up as `Full scan on NULL
    key` in the `Extra` column:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当优化器使用触发的条件来创建某种基于索引查找的访问（如前述列表的前两项），它必须有一个针对条件关闭的备用策略。这个备用策略总是相同的：做一个完整的表扫描。在[`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement")输出中，备用策略显示为`Extra`列中的`Full scan on NULL key`：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you run [`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement") followed by
    [`SHOW WARNINGS`](show-warnings.html "15.7.7.42 SHOW WARNINGS Statement"), you
    can see the triggered condition:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行[`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement")，然后跟着运行[`SHOW WARNINGS`](show-warnings.html
    "15.7.7.42 SHOW WARNINGS Statement")，你可以看到触发的条件：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The use of triggered conditions has some performance implications. A `NULL IN
    (SELECT ...)` expression now may cause a full table scan (which is slow) when
    it previously did not. This is the price paid for correct results (the goal of
    the trigger-condition strategy is to improve compliance, not speed).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用触发条件会带来一些性能影响。现在，一个`NULL IN (SELECT ...)`表达式可能会导致一个全表扫描（这是慢的），而以前则不会。这是为了获得正确结果而付出的代价（触发条件策略的目标是提高合规性，而不是速度）。
- en: For multiple-table subqueries, execution of `NULL IN (SELECT ...)` is particularly
    slow because the join optimizer does not optimize for the case where the outer
    expression is `NULL`. It assumes that subquery evaluations with `NULL` on the
    left side are very rare, even if there are statistics that indicate otherwise.
    On the other hand, if the outer expression might be `NULL` but never actually
    is, there is no performance penalty.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多表子查询，执行`NULL IN (SELECT ...)`特别慢，因为连接优化器不会为外部表达式为`NULL`的情况进行优化。它假设左侧带有`NULL`的子查询评估非常罕见，即使有统计数据表明相反。另一方面，如果外部表达式可能是`NULL`但实际上从未是，那么就不会有性能惩罚。
- en: 'To help the query optimizer better execute your queries, use these suggestions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助查询优化器更好地执行您的查询，请使用以下建议：
- en: Declare a column as `NOT NULL` if it really is. This also helps other aspects
    of the optimizer by simplifying condition testing for the column.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个列确实是`NOT NULL`，就声明它为`NOT NULL`。这也通过简化列的条件测试来帮助优化器的其他方面。
- en: 'If you need not distinguish a `NULL` from `FALSE` subquery result, you can
    easily avoid the slow execution path. Replace a comparison that looks like this:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你不需要区分`NULL`和`FALSE`子查询结果，你可以轻松避免慢执行路径。替换一个看起来像这样的比较：
- en: '[PRE16]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'with this expression:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用这个表达式：
- en: '[PRE17]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then `NULL IN (SELECT ...)` is never evaluated because MySQL stops evaluating
    [`AND`](logical-operators.html#operator_and) parts as soon as the expression result
    is clear.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后 `NULL IN (SELECT ...)` 从未被评估，因为一旦表达式结果明确，MySQL就会停止评估[`AND`](logical-operators.html#operator_and)部分。
- en: 'Another possible rewrite:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一种可能的重写：
- en: '[PRE18]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The [`subquery_materialization_cost_based`](switchable-optimizations.html#optflag_subquery-materialization-cost-based)
    flag of the [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    system variable enables control over the choice between subquery materialization
    and `IN`-to-`EXISTS` subquery transformation. See [Section 10.9.2, “Switchable
    Optimizations”](switchable-optimizations.html "10.9.2 Switchable Optimizations").
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)系统变量的[`subquery_materialization_cost_based`](switchable-optimizations.html#optflag_subquery-materialization-cost-based)标志允许控制在子查询材料化和`IN`到`EXISTS`子查询转换之间的选择。参见[第10.9.2节，“可切换优化”](switchable-optimizations.html
    "10.9.2 Switchable Optimizations")。'
