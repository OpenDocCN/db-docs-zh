- en: 7.4.6 Server Log Maintenance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.4.6 服务器日志维护
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/log-file-maintenance.html](https://dev.mysql.com/doc/refman/8.0/en/log-file-maintenance.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/log-file-maintenance.html](https://dev.mysql.com/doc/refman/8.0/en/log-file-maintenance.html)
- en: As described in [Section 7.4, “MySQL Server Logs”](server-logs.html "7.4 MySQL
    Server Logs"), MySQL Server can create several different log files to help you
    see what activity is taking place. However, you must clean up these files regularly
    to ensure that the logs do not take up too much disk space.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [第 7.4 节，“MySQL 服务器日志”](server-logs.html "7.4 MySQL 服务器日志") 中所述，MySQL 服务器可以创建几个不同的日志文件，帮助您查看正在发生的活动。然而，您必须定期清理这些文件，以确保日志不会占用太多磁盘空间。
- en: When using MySQL with logging enabled, you may want to back up and remove old
    log files from time to time and tell MySQL to start logging to new files. See
    [Section 9.2, “Database Backup Methods”](backup-methods.html "9.2 Database Backup
    Methods").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用启用日志记录的 MySQL 时，您可能希望定期备份并删除旧的日志文件，并告诉 MySQL 开始记录到新文件中。参见 [第 9.2 节，“数据库备份方法”](backup-methods.html
    "9.2 数据库备份方法")。
- en: On a Linux (Red Hat) installation, you can use the `mysql-log-rotate` script
    for log maintenance. If you installed MySQL from an RPM distribution, this script
    should have been installed automatically. Be careful with this script if you are
    using the binary log for replication. You should not remove binary logs until
    you are certain that their contents have been processed by all replicas.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux（Red Hat）安装中，您可以使用 `mysql-log-rotate` 脚本进行日志维护。如果您从 RPM 发行版安装了 MySQL，则此脚本应该已自动安装。如果您正在使用二进制日志进行复制，请小心使用此脚本。在确定所有副本都已处理其内容之前，不应删除二进制日志。
- en: On other systems, you must install a short script yourself that you start from
    **cron** (or its equivalent) for handling log files.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他系统上，您必须自己安装一个短脚本，然后从 **cron**（或其等效物）启动以处理日志文件。
- en: Binary log files are automatically removed after the server's binary log expiration
    period. Removal of the files can take place at startup and when the binary log
    is flushed. The default binary log expiration period is 30 days. To specify an
    alternative expiration period, use the [`binlog_expire_logs_seconds`](replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds)
    system variable. If you are using replication, you should specify an expiration
    period that is no lower than the maximum amount of time your replicas might lag
    behind the source. To remove binary logs on demand, use the [`PURGE BINARY LOGS`](purge-binary-logs.html
    "15.4.1.1 PURGE BINARY LOGS Statement") statement (see [Section 15.4.1.1, “PURGE
    BINARY LOGS Statement”](purge-binary-logs.html "15.4.1.1 PURGE BINARY LOGS Statement")).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制日志文件在服务器的二进制日志过期期间后会自动删除。文件的删除可以在启动时和二进制日志刷新时进行。默认的二进制日志过期期限为 30 天。要指定替代的过期期限，请使用
    [`binlog_expire_logs_seconds`](replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds)
    系统变量。如果您正在使用复制，您应该指定一个不低于副本可能滞后源的最长时间的过期期限。要按需删除二进制日志，请使用 [`PURGE BINARY LOGS`](purge-binary-logs.html
    "15.4.1.1 PURGE BINARY LOGS 语句") 语句（参见 [第 15.4.1.1 节，“PURGE BINARY LOGS 语句”](purge-binary-logs.html
    "15.4.1.1 PURGE BINARY LOGS 语句")）。
- en: To force MySQL to start using new log files, flush the logs. Log flushing occurs
    when you execute a [`FLUSH LOGS`](flush.html#flush-logs) statement or a [**mysqladmin
    flush-logs**](mysqladmin.html "6.5.2 mysqladmin — A MySQL Server Administration
    Program"), [**mysqladmin refresh**](mysqladmin.html "6.5.2 mysqladmin — A MySQL
    Server Administration Program"), [**mysqldump --flush-logs**](mysqldump.html "6.5.4 mysqldump
    — A Database Backup Program"), or [**mysqldump --master-data**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program") command. See [Section 15.7.8.3,
    “FLUSH Statement”](flush.html "15.7.8.3 FLUSH Statement"), [Section 6.5.2, “mysqladmin
    — A MySQL Server Administration Program”](mysqladmin.html "6.5.2 mysqladmin —
    A MySQL Server Administration Program"), and [Section 6.5.4, “mysqldump — A Database
    Backup Program”](mysqldump.html "6.5.4 mysqldump — A Database Backup Program").
    In addition, the server flushes the binary log automatically when current binary
    log file size reaches the value of the [`max_binlog_size`](replication-options-binary-log.html#sysvar_max_binlog_size)
    system variable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制MySQL开始使用新的日志文件，需要刷新日志。执行[`FLUSH LOGS`](flush.html#flush-logs)语句或[**mysqladmin
    flush-logs**](mysqladmin.html "6.5.2 mysqladmin — A MySQL Server Administration
    Program")、[**mysqladmin refresh**](mysqladmin.html "6.5.2 mysqladmin — A MySQL
    Server Administration Program")、[**mysqldump --flush-logs**](mysqldump.html "6.5.4 mysqldump
    — A Database Backup Program")或[**mysqldump --master-data**](mysqldump.html "6.5.4 mysqldump
    — A Database Backup Program")命令时会发生日志刷新。参见[第15.7.8.3节，“FLUSH语句”](flush.html "15.7.8.3 FLUSH
    Statement")、[第6.5.2节，“mysqladmin — A MySQL Server Administration Program”](mysqladmin.html
    "6.5.2 mysqladmin — A MySQL Server Administration Program")和[第6.5.4节，“mysqldump
    — A Database Backup Program”](mysqldump.html "6.5.4 mysqldump — A Database Backup
    Program")。此外，当当前二进制日志文件大小达到[`max_binlog_size`](replication-options-binary-log.html#sysvar_max_binlog_size)系统变量的值时，服务器会自动刷新二进制日志。
- en: '[`FLUSH LOGS`](flush.html#flush-logs) supports optional modifiers to enable
    selective flushing of individual logs (for example, [`FLUSH BINARY LOGS`](flush.html#flush-binary-logs)).
    See [Section 15.7.8.3, “FLUSH Statement”](flush.html "15.7.8.3 FLUSH Statement").'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FLUSH LOGS`](flush.html#flush-logs)支持可选修饰符，以启用对单个日志的选择性刷新（例如，[`FLUSH BINARY
    LOGS`](flush.html#flush-binary-logs)）。参见[第15.7.8.3节，“FLUSH语句”](flush.html "15.7.8.3 FLUSH
    Statement")。'
- en: 'A log-flushing operation has the following effects:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 日志刷新操作具有以下效果：
- en: If binary logging is enabled, the server closes the current binary log file
    and opens a new log file with the next sequence number.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了二进制日志记录，服务器会关闭当前的二进制日志文件，并打开下一个序列号的新日志文件。
- en: If general query logging or slow query logging to a log file is enabled, the
    server closes and reopens the log file.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了一般查询日志或慢查询日志到日志文件的记录，服务器会关闭并重新打开日志文件。
- en: If the server was started with the [`--log-error`](server-options.html#option_mysqld_log-error)
    option to cause the error log to be written to a file, the server closes and reopens
    the log file.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果服务器是使用[`--log-error`](server-options.html#option_mysqld_log-error)选项启动的，以将错误日志写入文件，服务器会关闭并重新打开日志文件。
- en: 'Execution of log-flushing statements or commands requires connecting to the
    server using an account that has the [`RELOAD`](privileges-provided.html#priv_reload)
    privilege. On Unix and Unix-like systems, another way to flush the logs is to
    send a signal to the server, which can be done by `root` or the account that owns
    the server process. (See [Section 6.10, “Unix Signal Handling in MySQL”](unix-signal-response.html
    "6.10 Unix Signal Handling in MySQL").) Signals enable log flushing to be performed
    without having to connect to the server:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 执行刷新日志语句或命令需要使用具有[`RELOAD`](privileges-provided.html#priv_reload)权限的帐户连接到服务器。在Unix和类Unix系统上，刷新日志的另一种方法是向服务器发送信号，可以由`root`或拥有服务器进程的帐户执行。（参见[第6.10节，“MySQL中的Unix信号处理”](unix-signal-response.html
    "6.10 MySQL中的Unix信号处理")。）信号使得可以在不连接到服务器的情况下执行日志刷新：
- en: A `SIGHUP` signal flushes all the logs. However, `SIGHUP` has additional effects
    other than log flushing that might be undesirable.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGHUP`信号会刷新所有日志。然而，`SIGHUP`除了日志刷新之外还有其他可能不希望的附加效果。'
- en: As of MySQL 8.0.19, `SIGUSR1` causes the server to flush the error log, general
    query log, and slow query log. If you are interested in flushing only those logs,
    `SIGUSR1` can be used as a more “lightweight” signal that does not have the `SIGHUP`
    effects that are unrelated to logs.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.19版本，`SIGUSR1`会导致服务器刷新错误日志、一般查询日志和慢查询日志。如果只想刷新这些日志，`SIGUSR1`可以作为一个更“轻量级”的信号，不会产生与日志无关的`SIGHUP`效果。
- en: 'As mentioned previously, flushing the binary log creates a new binary log file,
    whereas flushing the general query log, slow query log, or error log just closes
    and reopens the log file. For the latter logs, to cause a new log file to be created
    on Unix, rename the current log file first before flushing it. At flush time,
    the server opens the new log file with the original name. For example, if the
    general query log, slow query log, and error log files are named `mysql.log`,
    `mysql-slow.log`, and `err.log`, you can use a series of commands like this from
    the command line:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，刷新二进制日志会创建一个新的二进制日志文件，而刷新一般查询日志、慢查询日志或错误日志只是关闭并重新打开日志文件。对于后者的日志，在Unix上，要在刷新之前重命名当前日志文件以创建一个新的日志文件。在刷新时，服务器会使用原始名称打开新的日志文件。例如，如果一般查询日志、慢查询日志和错误日志文件分别命名为`mysql.log`、`mysql-slow.log`和`err.log`，您可以在命令行中使用一系列命令如下：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On Windows, use **rename** rather than **mv**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，使用**rename**而不是**mv**。
- en: At this point, you can make a backup of `mysql.log.old`, `mysql-slow.log.old`,
    and `err.log.old`, then remove them from disk.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可以备份`mysql.log.old`、`mysql-slow.log.old`和`err.log.old`，然后将它们从磁盘中删除。
- en: 'To rename the general query log or slow query log at runtime, first connect
    to the server and disable the log:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在运行时重命名一般查询日志或慢查询日志，首先连接到服务器并禁用日志：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the logs disabled, rename the log files externally (for example, from
    the command line). Then enable the logs again:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用日志后，可以在外部重命名日志文件（例如，从命令行）。然后再次启用日志：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This method works on any platform and does not require a server restart.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法适用于任何平台，不需要重新启动服务器。
- en: Note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For the server to recreate a given log file after you have renamed the file
    externally, the file location must be writable by the server. This may not always
    be the case. For example, on Linux, the server might write the error log as `/var/log/mysqld.log`,
    where `/var/log` is owned by `root` and not writable by [**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server"). In this case, log-flushing operations fail
    to create a new log file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在您在外部重命名文件后，服务器重新创建给定日志文件时，文件位置必须可被服务器写入。这并非总是如此。例如，在Linux上，服务器可能将错误日志写入为`/var/log/mysqld.log`，其中`/var/log`由`root`拥有且不可写入[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")。在这种情况下，日志刷新操作无法创建新的日志文件。
- en: 'To handle this situation, you must manually create the new log file with the
    proper ownership after renaming the original log file. For example, execute these
    commands as `root`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这种情况，您必须在重命名原始日志文件后手动创建具有适当所有权的新日志文件。例如，以`root`身份执行以下命令：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
