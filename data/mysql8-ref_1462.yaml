- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-features-transaction-inconsistencies.html](https://dev.mysql.com/doc/refman/8.0/en/replication-features-transaction-inconsistencies.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://dev.mysql.com/doc/refman/8.0/en/replication-features-transaction-inconsistencies.html](https://dev.mysql.com/doc/refman/8.0/en/replication-features-transaction-inconsistencies.html)
- en: 19.5.1.34 Replication and Transaction Inconsistencies
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 19.5.1.34 复制和事务不一致性
- en: Inconsistencies in the sequence of transactions that have been executed from
    the relay log can occur depending on your replication configuration. This section
    explains how to avoid inconsistencies and solve any problems they cause.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的复制配置，从中继日志中执行的事务序列可能存在不一致性。本节解释了如何避免不一致性并解决其引起的任何问题。
- en: 'The following types of inconsistencies can exist:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在以下类型的不一致性：
- en: '*Half-applied transactions*. A transaction which updates non-transactional
    tables has applied some but not all of its changes.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*未完成的事务*。更新非事务表的事务已应用部分但不是全部更改。'
- en: '*Gaps*. A gap in the externalized transaction set appears when, given an ordered
    sequence of transactions, a transaction that is later in the sequence is applied
    before some other transaction that is prior in the sequence. Gaps can only appear
    when using a multithreaded replica.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*间隙*。在外部化事务集中，当给定一个有序的事务序列时，后续序列中的事务在先前序列中的某些其他事务之前应用时，会出现间隙。只有在使用多线程副本时才会出现间隙。'
- en: To avoid gaps occurring on a multithreaded replica, set [`replica_preserve_commit_order=ON`](replication-options-replica.html#sysvar_replica_preserve_commit_order)
    (from MySQL 8.0.26) or [`slave_preserve_commit_order=ON`](replication-options-replica.html#sysvar_slave_preserve_commit_order)
    (before MySQL 8.0.26). From MySQL 8.0.27, this setting is the default, because
    all replicas are multithreaded by default from that release.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要避免多线程复制中出现的间隙，请设置[`replica_preserve_commit_order=ON`](replication-options-replica.html#sysvar_replica_preserve_commit_order)（从MySQL
    8.0.26开始）或[`slave_preserve_commit_order=ON`](replication-options-replica.html#sysvar_slave_preserve_commit_order)（在MySQL
    8.0.26之前）。从MySQL 8.0.27开始，默认情况下设置此选项，因为从该版本开始，默认情况下所有副本都是多线程的。
- en: Up to and including MySQL 8.0.18, preserving the commit order requires that
    binary logging ([`log_bin`](replication-options-binary-log.html#sysvar_log_bin))
    and replica update logging ([`log_replica_updates`](replication-options-binary-log.html#sysvar_log_replica_updates)
    or [`log_slave_updates`](replication-options-binary-log.html#sysvar_log_slave_updates))
    are also enabled, which are the default settings from MySQL 8.0\. From MySQL 8.0.19,
    binary logging and replica update logging are not required on the replica to set
    [`replica_preserve_commit_order=ON`](replication-options-replica.html#sysvar_replica_preserve_commit_order)
    or [`slave_preserve_commit_order=ON`](replication-options-replica.html#sysvar_slave_preserve_commit_order),
    and can be disabled if wanted.
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 直到MySQL 8.0.18，保留提交顺序需要启用二进制日志（[`log_bin`](replication-options-binary-log.html#sysvar_log_bin)）和副本更新日志（[`log_replica_updates`](replication-options-binary-log.html#sysvar_log_replica_updates)或[`log_slave_updates`](replication-options-binary-log.html#sysvar_log_slave_updates)），这是从MySQL
    8.0开始的默认设置。从MySQL 8.0.19开始，在副本上设置[`replica_preserve_commit_order=ON`](replication-options-replica.html#sysvar_replica_preserve_commit_order)或[`slave_preserve_commit_order=ON`](replication-options-replica.html#sysvar_slave_preserve_commit_order)不需要启用二进制日志和副本更新日志，并且如果需要，可以禁用。
- en: In all releases, setting [`replica_preserve_commit_order=ON`](replication-options-replica.html#sysvar_replica_preserve_commit_order)
    or [`slave_preserve_commit_order=ON`](replication-options-replica.html#sysvar_slave_preserve_commit_order)
    requires that [`replica_parallel_type`](replication-options-replica.html#sysvar_replica_parallel_type)
    (from MySQL 8.0.26) or [`slave_parallel_type`](replication-options-replica.html#sysvar_slave_parallel_type)
    (before MySQL 8.0.26) is set to `LOGICAL_CLOCK`. From MySQL 8.0.27 (but not for
    earlier releases), this is the default setting.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有版本中，设置[`replica_preserve_commit_order=ON`](replication-options-replica.html#sysvar_replica_preserve_commit_order)或[`slave_preserve_commit_order=ON`](replication-options-replica.html#sysvar_slave_preserve_commit_order)需要设置[`replica_parallel_type`](replication-options-replica.html#sysvar_replica_parallel_type)（从MySQL
    8.0.26开始）或[`slave_parallel_type`](replication-options-replica.html#sysvar_slave_parallel_type)（在MySQL
    8.0.26之前）为`LOGICAL_CLOCK`。从MySQL 8.0.27开始（但不适用于早期版本），这是默认设置。
- en: In some specific situations, as listed in the description for [`replica_preserve_commit_order`](replication-options-replica.html#sysvar_replica_preserve_commit_order)
    and [`slave_preserve_commit_order`](replication-options-replica.html#sysvar_slave_preserve_commit_order),
    setting [`replica_preserve_commit_order=ON`](replication-options-replica.html#sysvar_replica_preserve_commit_order)
    or [`slave_preserve_commit_order=ON`](replication-options-replica.html#sysvar_slave_preserve_commit_order)
    cannot preserve commit order on the replica, so in these cases gaps might still
    appear in the sequence of transactions that have been executed from the replica's
    relay log.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些特定情况下，如[`replica_preserve_commit_order`](replication-options-replica.html#sysvar_replica_preserve_commit_order)和[`slave_preserve_commit_order`](replication-options-replica.html#sysvar_slave_preserve_commit_order)的描述中列出的情况，设置[`replica_preserve_commit_order=ON`](replication-options-replica.html#sysvar_replica_preserve_commit_order)或[`slave_preserve_commit_order=ON`](replication-options-replica.html#sysvar_slave_preserve_commit_order)无法在复制品上保留提交顺序，因此在这些情况下，序列中仍可能出现间隙。
- en: Setting `replica_preserve_commit_order=ON` or `slave_preserve_commit_order=ON`
    does not prevent source binary log position lag.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置`replica_preserve_commit_order=ON`或`slave_preserve_commit_order=ON`不会阻止源二进制日志位置滞后。
- en: '*Source binary log position lag*. Even in the absence of gaps, it is possible
    that transactions after `Exec_master_log_pos` have been applied. That is, all
    transactions up to point `N` have been applied, and no transactions after `N`
    have been applied, but `Exec_master_log_pos` has a value smaller than `N`. In
    this situation, `Exec_master_log_pos` is a “low-water mark” of the transactions
    applied, and lags behind the position of the most recently applied transaction.
    This can only happen on multithreaded replicas. Enabling [`replica_preserve_commit_order`](replication-options-replica.html#sysvar_replica_preserve_commit_order)
    or [`slave_preserve_commit_order`](replication-options-replica.html#sysvar_slave_preserve_commit_order)
    does not prevent source binary log position lag.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*源二进制日志位置滞后*。即使没有间隙，也有可能在`Exec_master_log_pos`之后应用了事务。也就是说，直到点`N`之前的所有事务都已应用，但在点`N`之后没有应用任何事务，但`Exec_master_log_pos`的值小于`N`。在这种情况下，`Exec_master_log_pos`是已应用事务的“低水位标记”，落后于最近应用事务的位置。这只会发生在多线程复制中。启用[`replica_preserve_commit_order`](replication-options-replica.html#sysvar_replica_preserve_commit_order)或[`slave_preserve_commit_order`](replication-options-replica.html#sysvar_slave_preserve_commit_order)不会阻止源二进制日志位置滞后。'
- en: 'The following scenarios are relevant to the existence of half-applied transactions,
    gaps, and source binary log position lag:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下情景与部分应用事务、间隙和源二进制日志位置滞后有关：
- en: While replication threads are running, there may be gaps and half-applied transactions.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在复制线程运行时，可能会出现间隙和部分应用事务。
- en: '[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server") shuts down. Both
    clean and unclean shutdown abort ongoing transactions and may leave gaps and half-applied
    transactions.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")关闭。无论是干净的还是不干净的关闭都会中止正在进行的事务，并可能留下间隙和部分应用事务。'
- en: '[`KILL`](kill.html "15.7.8.4 KILL Statement") of replication threads (the SQL
    thread when using a single-threaded replica, the coordinator thread when using
    a multithreaded replica). This aborts ongoing transactions and may leave gaps
    and half-applied transactions.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制线程的[`KILL`](kill.html "15.7.8.4 KILL Statement")（在使用单线程复制时为SQL线程，在使用多线程复制时为协调器线程）。这会中止正在进行的事务，并可能留下间隙和部分应用事务。
- en: Error in applier threads. This may leave gaps. If the error is in a mixed transaction,
    that transaction is half-applied. When using a multithreaded replica, workers
    which have not received an error complete their queues, so it may take time to
    stop all threads.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序线程中发生错误。这可能会留下间隙。如果错误发生在混合事务中，则该事务将被部分应用。在使用多线程复制时，未收到错误的工作线程会完成它们的队列，因此可能需要一些时间来停止所有线程。
- en: '[`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA Statement") when
    using a multithreaded replica. After issuing [`STOP REPLICA`](stop-replica.html
    "15.4.2.8 STOP REPLICA Statement"), the replica waits for any gaps to be filled
    and then updates `Exec_master_log_pos`. This ensures it never leaves gaps or source
    binary log position lag, unless any of the cases above applies, in other words,
    before [`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA Statement") completes,
    either an error happens, or another thread issues [`KILL`](kill.html "15.7.8.4 KILL
    Statement"), or the server restarts. In these cases, [`STOP REPLICA`](stop-replica.html
    "15.4.2.8 STOP REPLICA Statement") returns successfully.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA Statement") 在使用多线程复制时使用。发出
    [`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA Statement") 后，复制品等待任何间隙被填充，然后更新
    `Exec_master_log_pos`。这确保它永远不会留下间隙或源二进制日志位置滞后，除非上述任何情况适用，换句话说，在 [`STOP REPLICA`](stop-replica.html
    "15.4.2.8 STOP REPLICA Statement") 完成之前，要么发生错误，要么另一个线程发出 [`KILL`](kill.html "15.7.8.4 KILL
    Statement")，要么服务器重新启动。在这些情况下，[`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP
    REPLICA Statement") 返回成功。'
- en: If the last transaction in the relay log is only half-received and the multithreaded
    replica's coordinator thread has started to schedule the transaction to a worker,
    then [`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA Statement") waits
    up to 60 seconds for the transaction to be received. After this timeout, the coordinator
    gives up and aborts the transaction. If the transaction is mixed, it may be left
    half-completed.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果中继日志中的最后一个事务仅被部分接收，并且多线程复制的协调器线程已开始将事务调度给工作线程，则 [`STOP REPLICA`](stop-replica.html
    "15.4.2.8 STOP REPLICA Statement") 最多等待 60 秒以接收事务。超时后，协调器放弃并中止事务。如果事务是混合的，则可能会留下未完成的部分。
- en: '[`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA Statement") when
    the ongoing transaction updates transactional tables only, in which case it is
    rolled back and [`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA Statement")
    stops immediately. If the ongoing transaction is mixed, [`STOP REPLICA`](stop-replica.html
    "15.4.2.8 STOP REPLICA Statement") waits up to 60 seconds for the transaction
    to complete. After this timeout, it aborts the transaction, so it may be left
    half-completed.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当正在进行的事务仅更新事务表时，[`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA Statement")
    立即回滚并停止。如果正在进行的事务是混合的，[`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP REPLICA
    Statement") 最多等待 60 秒以完成事务。超时后，它会中止事务，因此可能会留下未完成的部分。
- en: The global setting for the system variable [`rpl_stop_replica_timeout`](replication-options-replica.html#sysvar_rpl_stop_replica_timeout)
    (from MySQL 8.0.26) or [`rpl_stop_slave_timeout`](replication-options-replica.html#sysvar_rpl_stop_slave_timeout)
    (before MySQL 8.0.26) is unrelated to the process of stopping the replication
    threads. It only makes the client that issues [`STOP REPLICA`](stop-replica.html
    "15.4.2.8 STOP REPLICA Statement") return to the client, but the replication threads
    continue to try to stop.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 系统变量 [`rpl_stop_replica_timeout`](replication-options-replica.html#sysvar_rpl_stop_replica_timeout)（从
    MySQL 8.0.26 开始）或 [`rpl_stop_slave_timeout`](replication-options-replica.html#sysvar_rpl_stop_slave_timeout)（在
    MySQL 8.0.26 之前）的全局设置与停止复制线程的过程无关。它只是使发出 [`STOP REPLICA`](stop-replica.html "15.4.2.8 STOP
    REPLICA Statement") 的客户端返回给客户端，但���制线程继续尝试停止。
- en: 'If a replication channel has gaps, it has the following consequences:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果复制通道存在间隙，会产生以下后果：
- en: The replica database is in a state that may never have existed on the source.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制品数据库处于可能从未存在于源上的状态。
- en: The field `Exec_master_log_pos` in [`SHOW REPLICA STATUS`](show-replica-status.html
    "15.7.7.35 SHOW REPLICA STATUS Statement") is only a “low-water mark”. In other
    words, transactions appearing before the position are guaranteed to have committed,
    but transactions after the position may have committed or not.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`SHOW REPLICA STATUS`](show-replica-status.html "15.7.7.35 SHOW REPLICA STATUS
    Statement") 中的 `Exec_master_log_pos` 字段仅是“低水位标记”。换句话说，出现在该位置之前的事务已经提交，但在该位置之后的事务可能已经提交，也可能没有。'
- en: '[`CHANGE REPLICATION SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE
    REPLICATION SOURCE TO Statement") and [`CHANGE MASTER TO`](change-master-to.html
    "15.4.2.1 CHANGE MASTER TO Statement") statements for that channel fail with an
    error, unless the applier threads are running and the statement only sets receiver
    options.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于该通道，[`CHANGE REPLICATION SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE
    REPLICATION SOURCE TO Statement") 和 [`CHANGE MASTER TO`](change-master-to.html
    "15.4.2.1 CHANGE MASTER TO Statement") 语句将因错误而失败，除非应用程序线程正在运行且语句仅设置接收器选项。
- en: If [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server") is started with
    [`--relay-log-recovery`](replication-options-replica.html#sysvar_relay_log_recovery),
    no recovery is done for that channel, and a warning is printed.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果使用[`--relay-log-recovery`](replication-options-replica.html#sysvar_relay_log_recovery)启动[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")，则不会为该通道执行恢复，并会打印警告。
- en: If [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    is used with [`--dump-replica`](mysqldump.html#option_mysqldump_dump-replica)
    or [`--dump-slave`](mysqldump.html#option_mysqldump_dump-slave), it does not record
    the existence of gaps; thus it prints [`CHANGE REPLICATION SOURCE TO`](change-replication-source-to.html
    "15.4.2.3 CHANGE REPLICATION SOURCE TO Statement") | [`CHANGE MASTER TO`](change-master-to.html
    "15.4.2.1 CHANGE MASTER TO Statement") with `RELAY_LOG_POS` set to the “low-water
    mark” position in `Exec_master_log_pos`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果使用[`--dump-replica`](mysqldump.html#option_mysqldump_dump-replica)或[`--dump-slave`](mysqldump.html#option_mysqldump_dump-slave)来使用[**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program")，它不会记录间隙的存在；因此，它会打印[`CHANGE REPLICATION
    SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION SOURCE
    TO Statement") | [`CHANGE MASTER TO`](change-master-to.html "15.4.2.1 CHANGE MASTER
    TO Statement")，并将`RELAY_LOG_POS`设置为`Exec_master_log_pos`中的“低水位”位置。
- en: After applying the dump on another server, and starting the replication threads,
    transactions appearing after the position are replicated again. Note that this
    is harmless if GTIDs are enabled (however, in that case it is not recommended
    to use [`--dump-replica`](mysqldump.html#option_mysqldump_dump-replica) or [`--dump-slave`](mysqldump.html#option_mysqldump_dump-slave)).
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在另一台服务器上应用转储并启动复制线程后，出现在该位置之后的事务将再次被复制。请注意，如果启用了GTID（但在这种情况下不建议使用[`--dump-replica`](mysqldump.html#option_mysqldump_dump-replica)或[`--dump-slave`](mysqldump.html#option_mysqldump_dump-slave)），这是无害的。
- en: If a replication channel has source binary log position lag but no gaps, cases
    2 to 5 above apply, but case 1 does not.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果复制通道存在源二进制日志位置滞后但没有间隙，则适用于上述情况2至5，但不适用于情况1。
- en: The source binary log position information is persisted in binary format in
    the internal table `mysql.slave_worker_info`. [`START REPLICA [SQL_THREAD]`](start-replica.html
    "15.4.2.6 START REPLICA Statement") always consults this information so that it
    applies only the correct transactions. This remains true even if [`replica_parallel_workers`](replication-options-replica.html#sysvar_replica_parallel_workers)
    or [`slave_parallel_workers`](replication-options-replica.html#sysvar_slave_parallel_workers)
    has been changed to 0 before [`START REPLICA`](start-replica.html "15.4.2.6 START
    REPLICA Statement"), and even if [`START REPLICA`](start-replica.html "15.4.2.6 START
    REPLICA Statement") is used with `UNTIL` clauses. [`START REPLICA UNTIL SQL_AFTER_MTS_GAPS`](start-replica.html
    "15.4.2.6 START REPLICA Statement") only applies as many transactions as needed
    in order to fill in the gaps. If [`START REPLICA`](start-replica.html "15.4.2.6 START
    REPLICA Statement") is used with `UNTIL` clauses that tell it to stop before it
    has consumed all the gaps, then it leaves remaining gaps.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 源二进制日志位置信息以二进制格式持久化存储在内部表`mysql.slave_worker_info`中。[`START REPLICA [SQL_THREAD]`](start-replica.html
    "15.4.2.6 START REPLICA Statement")始终会查阅此信息，以便仅应用正确的事务。即使在[`START REPLICA`](start-replica.html
    "15.4.2.6 START REPLICA Statement")之前将[`replica_parallel_workers`](replication-options-replica.html#sysvar_replica_parallel_workers)或[`slave_parallel_workers`](replication-options-replica.html#sysvar_slave_parallel_workers)更改为0，甚至在使用`UNTIL`子句的情况下使用[`START
    REPLICA`](start-replica.html "15.4.2.6 START REPLICA Statement")，这仍然有效。[`START
    REPLICA UNTIL SQL_AFTER_MTS_GAPS`](start-replica.html "15.4.2.6 START REPLICA
    Statement")仅应用所需数量的事务以填补间隙。如果在消耗所有间隙之前告诉[`START REPLICA`](start-replica.html "15.4.2.6 START
    REPLICA Statement")停止的`UNTIL`子句，则会留下剩余的间隙。
- en: Warning
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '[`RESET REPLICA`](reset-replica.html "15.4.2.4 RESET REPLICA Statement") removes
    the relay logs and resets the replication position. Thus issuing [`RESET REPLICA`](reset-replica.html
    "15.4.2.4 RESET REPLICA Statement") on a multithreaded replica with gaps means
    the replica loses any information about the gaps, without correcting the gaps.
    In this situation, if binary log position based replication is in use, the recovery
    process fails.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RESET REPLICA`](reset-replica.html "15.4.2.4 RESET REPLICA Statement")会删除中继日志并重置复制位置。因此，在具有间隙的多线程复制中发出[`RESET
    REPLICA`](reset-replica.html "15.4.2.4 RESET REPLICA Statement")意味着复制丢失了有关间隙的任何信息，而没有纠正间隙。在这种情况下，如果使用基于二进制日志位置的复制，则恢复过程将失败。'
- en: When GTID-based replication is in use ([`GTID_MODE=ON`](replication-options-gtids.html#sysvar_gtid_mode))
    and `SOURCE_AUTO_POSITION` is set for the replication channel using the [`CHANGE
    REPLICATION SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION
    SOURCE TO Statement") statement, the old relay logs are not required for the recovery
    process. Instead, the replica can use GTID auto-positioning to calculate what
    transactions it is missing compared to the source. From MySQL 8.0.26, the process
    used for binary log position based replication to resolve gaps on a multithreaded
    replica is skipped entirely when GTID-based replication is in use. When the process
    is skipped, a [`START REPLICA UNTIL SQL_AFTER_MTS_GAPS`](start-replica.html "15.4.2.6 START
    REPLICA Statement") statement behaves differently, and does not attempt to check
    for gaps in the sequence of transactions. You can also issue [`CHANGE REPLICATION
    SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION SOURCE
    TO Statement") statements, which are not permitted on a non-GTID replica where
    there are gaps.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用基于GTID的复制时（[`GTID_MODE=ON`](replication-options-gtids.html#sysvar_gtid_mode)），并且使用[`CHANGE
    REPLICATION SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION
    SOURCE TO Statement")语句为复制通道设置了`SOURCE_AUTO_POSITION`时，旧的中继日志在恢复过程中不再需要。相反，复制品可以使用GTID自动定位来计算与源相比缺少的事务。从MySQL
    8.0.26开始，在使用基于GTID的复制时，用于在多线程复制品上解决间隙的基于二进制日志位置的过程将完全跳过。当跳过该过程时，[`START REPLICA
    UNTIL SQL_AFTER_MTS_GAPS`](start-replica.html "15.4.2.6 START REPLICA Statement")语句的行为会有所不同，并且不会尝试检查事务序列中的间隙。您还可以发出[`CHANGE
    REPLICATION SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION
    SOURCE TO Statement")语句，在非GTID复制品上不允许存在间隙的情况下。
