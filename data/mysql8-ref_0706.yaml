- en: 12.10.1 Unicode Character Sets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.10.1 Unicode字符集
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html](https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html](https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html)
- en: This section describes the collations available for Unicode character sets and
    their differentiating properties. For general information about Unicode, see [Section 12.9,
    “Unicode Support”](charset-unicode.html "12.9 Unicode Support").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了Unicode字符集可用的排序规则及其区分特性。有关Unicode的一般信息，请参见[第12.9节，“Unicode支持”](charset-unicode.html
    "12.9 Unicode Support")。
- en: 'MySQL supports multiple Unicode character sets:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL支持多个Unicode字符集：
- en: '`utf8mb4`: A UTF-8 encoding of the Unicode character set using one to four
    bytes per character.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8mb4`: 使用每个字符一到四个字节的Unicode字符集的UTF-8编码。'
- en: '`utf8mb3`: A UTF-8 encoding of the Unicode character set using one to three
    bytes per character. This character set is deprecated in MySQL 8.0, and you should
    use `utf8mb4` instead.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8mb3`: 使用每个字符一到三个字节的Unicode字符集的UTF-8编码。此字符集在MySQL 8.0中已弃用，您应该改用`utf8mb4`。'
- en: '`utf8`: An alias for `utf8mb3`. In MySQL 8.0, this alias is deprecated; use
    `utf8mb4` instead. `utf8` is expected in a future release to become an alias for
    `utf8mb4`.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8`: 对`utf8mb3`的别名。在MySQL 8.0中，此别名已被弃用；请改用`utf8mb4`。预计在将来的版本中，`utf8`将成为`utf8mb4`的别名。'
- en: '`ucs2`: The UCS-2 encoding of the Unicode character set using two bytes per
    character. Deprecated in MySQL 8.0.28; you should expect support for this character
    set to be removed in a future release.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ucs2`: 使用每个字符两个字节的Unicode字符集的UCS-2编码。在MySQL 8.0.28中已弃用；您应该预期在将来的版本中删除对此字符集的支持。'
- en: '`utf16`: The UTF-16 encoding for the Unicode character set using two or four
    bytes per character. Like `ucs2` but with an extension for supplementary characters.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf16`: Unicode字符集的UTF-16编码，每个字符使用两个或四个字节。类似于`ucs2`但具有用于补充字符的扩展。'
- en: '`utf16le`: The UTF-16LE encoding for the Unicode character set. Like `utf16`
    but little-endian rather than big-endian.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf16le`: Unicode字符集的UTF-16LE编码。类似于`utf16`但是小端序而不是大端序。'
- en: '`utf32`: The UTF-32 encoding for the Unicode character set using four bytes
    per character.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf32`: 使用每个字符四个字节的UTF-32编码的Unicode字符集。'
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `utf8mb3` character set is deprecated and you should expect it to be removed
    in a future MySQL release. Please use `utf8mb4` instead. `utf8` is currently an
    alias for `utf8mb3`, but it is now deprecated as such, and `utf8` is expected
    subsequently to become a reference to `utf8mb4`. Beginning with MySQL 8.0.28,
    `utf8mb3` is also displayed in place of `utf8` in columns of Information Schema
    tables, and in the output of SQL `SHOW` statements.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`utf8mb3`字符集已被弃用，您应该预期在将来的MySQL版本中将其移除。请改用`utf8mb4`。`utf8`目前是`utf8mb3`的别名，但现在已被弃用，`utf8`预计随后将成为`utf8mb4`的引用。从MySQL
    8.0.28开始，在Information Schema表的列和SQL `SHOW`语句的输出中，`utf8mb3`也会显示为`utf8`的替代项。'
- en: To avoid ambiguity about the meaning of `utf8`, consider specifying `utf8mb4`
    explicitly for character set references.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免关于`utf8`含义的歧义，考虑在字符集引用中明确指定`utf8mb4`。
- en: '`utf8mb4`, `utf16`, `utf16le`, and `utf32` support Basic Multilingual Plane
    (BMP) characters and supplementary characters that lie outside the BMP. `utf8mb3`
    and `ucs2` support only BMP characters.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`utf8mb4`、`utf16`、`utf16le`和`utf32`支持基本多文种平面（BMP）字符和超出BMP范围的补充字符。`utf8mb3`和`ucs2`仅支持BMP字符。'
- en: Most Unicode character sets have a general collation (indicated by `_general`
    in the name or by the absence of a language specifier), a binary collation (indicated
    by `_bin` in the name), and several language-specific collations (indicated by
    language specifiers). For example, for `utf8mb4`, `utf8mb4_general_ci` and `utf8mb4_bin`
    are its general and binary collations, and `utf8mb4_danish_ci` is one of its language-specific
    collations.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Unicode字符集都有一般排序规则（名称中带有`_general`或没有语言说明符号），二进制排序规则（名称中带有`_bin`），以及几种特定语言的排序规则（带有语言说明符号）。例如，对于`utf8mb4`，`utf8mb4_general_ci`和`utf8mb4_bin`是其一般和二进制排序规则，而`utf8mb4_danish_ci`是其特定语言之一的排序规则。
- en: 'Most character sets have a single binary collation. `utf8mb4` is an exception
    that has two: `utf8mb4_bin` and (as of MySQL 8.0.17) `utf8mb4_0900_bin`. These
    two binary collations have the same sort order but are distinguished by their
    pad attribute and collating weight characteristics. See [Collation Pad Attributes](charset-unicode-sets.html#charset-unicode-sets-pad-attributes
    "Collation Pad Attributes"), and [Character Collating Weights](charset-unicode-sets.html#charset-unicode-sets-collating-weights
    "Character Collating Weights").'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数字符集具有单一的二进制排序。`utf8mb4` 是一个例外，它有两个：`utf8mb4_bin` 和（从 MySQL 8.0.17 开始）`utf8mb4_0900_bin`。这两个二进制排序具有相同的排序顺序，但通过它们的填充属性和排序权重特性进行区分。参见
    [排序填充属性](charset-unicode-sets.html#charset-unicode-sets-pad-attributes "排序填充属性")
    和 [字符排序权重](charset-unicode-sets.html#charset-unicode-sets-collating-weights "字符排序权重")。
- en: Collation support for `utf16le` is limited. The only collations available are
    `utf16le_general_ci` and `utf16le_bin`. These are similar to `utf16_general_ci`
    and `utf16_bin`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`utf16le` 的排序支持有限。唯一可用的排序是 `utf16le_general_ci` 和 `utf16le_bin`。这些与 `utf16_general_ci`
    和 `utf16_bin` 类似。'
- en: '[Unicode Collation Algorithm (UCA) Versions](charset-unicode-sets.html#charset-unicode-sets-uca
    "Unicode Collation Algorithm (UCA) Versions")'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Unicode Collation Algorithm (UCA) 版本](charset-unicode-sets.html#charset-unicode-sets-uca
    "Unicode Collation Algorithm (UCA) 版本")'
- en: '[Collation Pad Attributes](charset-unicode-sets.html#charset-unicode-sets-pad-attributes
    "Collation Pad Attributes")'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[排序填充属性](charset-unicode-sets.html#charset-unicode-sets-pad-attributes "排序填充属性")'
- en: '[Language-Specific Collations](charset-unicode-sets.html#charset-unicode-sets-language-specific-collations
    "Language-Specific Collations")'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[特定语言排序](charset-unicode-sets.html#charset-unicode-sets-language-specific-collations
    "特定语言排序")'
- en: '[_general_ci Versus _unicode_ci Collations](charset-unicode-sets.html#charset-unicode-sets-general-versus-unicode
    "_general_ci Versus _unicode_ci Collations")'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[_general_ci 与 _unicode_ci 排序](charset-unicode-sets.html#charset-unicode-sets-general-versus-unicode
    "_general_ci 与 _unicode_ci 排序")'
- en: '[Character Collating Weights](charset-unicode-sets.html#charset-unicode-sets-collating-weights
    "Character Collating Weights")'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[字符排序权重](charset-unicode-sets.html#charset-unicode-sets-collating-weights "字符排序权重")'
- en: '[Miscellaneous Information](charset-unicode-sets.html#charset-unicode-sets-miscellaneous
    "Miscellaneous Information")'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[杂项信息](charset-unicode-sets.html#charset-unicode-sets-miscellaneous "杂项信息")'
- en: Unicode Collation Algorithm (UCA) Versions
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Unicode Collation Algorithm (UCA) 版本
- en: 'MySQL implements the `*`xxx`*_unicode_ci` collations according to the Unicode
    Collation Algorithm (UCA) described at [http://www.unicode.org/reports/tr10/](http://www.unicode.org/reports/tr10/).
    The collation uses the version-4.0.0 UCA weight keys: [http://www.unicode.org/Public/UCA/4.0.0/allkeys-4.0.0.txt](http://www.unicode.org/Public/UCA/4.0.0/allkeys-4.0.0.txt).
    The `*`xxx`*_unicode_ci` collations have only partial support for the Unicode
    Collation Algorithm. Some characters are not supported, and combining marks are
    not fully supported. This affects languages such as Vietnamese, Yoruba, and Navajo.
    A combined character is considered different from the same character written with
    a single unicode character in string comparisons, and the two characters are considered
    to have a different length (for example, as returned by the [`CHAR_LENGTH()`](string-functions.html#function_char-length)
    function or in result set metadata).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 根据 [http://www.unicode.org/reports/tr10/](http://www.unicode.org/reports/tr10/)
    中描述的 Unicode Collation Algorithm (UCA) 实现 `*`xxx`*_unicode_ci` 排序。该排序使用版本-4.0.0
    UCA 权重键：[http://www.unicode.org/Public/UCA/4.0.0/allkeys-4.0.0.txt](http://www.unicode.org/Public/UCA/4.0.0/allkeys-4.0.0.txt)。`*`xxx`*_unicode_ci`
    排序对 Unicode Collation Algorithm 仅有部分支持。某些字符不受支持，组合标记也没有完全支持。这影响到越南语、约鲁巴语和纳瓦霍语等语言。在字符串比较中，组合字符被视为与使用单个
    Unicode 字符写的相同字符不同，并且这两个字符被认为具有不同的长度（例如，由 [`CHAR_LENGTH()`](string-functions.html#function_char-length)
    函数返回或在结果集元数据中返回）。
- en: 'Unicode collations based on UCA versions higher than 4.0.0 include the version
    in the collation name. Examples:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 基于高于 4.0.0 的 UCA 版本的 Unicode 排序在排序名称中包含版本。例如：
- en: '`utf8mb4_unicode_520_ci` is based on UCA 5.2.0 weight keys ([http://www.unicode.org/Public/UCA/5.2.0/allkeys.txt](http://www.unicode.org/Public/UCA/5.2.0/allkeys.txt)),'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8mb4_unicode_520_ci` 基于 UCA 5.2.0 权重键 ([http://www.unicode.org/Public/UCA/5.2.0/allkeys.txt](http://www.unicode.org/Public/UCA/5.2.0/allkeys.txt)),'
- en: '`utf8mb4_0900_ai_ci` is based on UCA 9.0.0 weight keys ([http://www.unicode.org/Public/UCA/9.0.0/allkeys.txt](http://www.unicode.org/Public/UCA/9.0.0/allkeys.txt)).'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8mb4_0900_ai_ci` 基于 UCA 9.0.0 权重键 ([http://www.unicode.org/Public/UCA/9.0.0/allkeys.txt](http://www.unicode.org/Public/UCA/9.0.0/allkeys.txt)).'
- en: The [`LOWER()`](string-functions.html#function_lower) and [`UPPER()`](string-functions.html#function_upper)
    functions perform case folding according to the collation of their argument. A
    character that has uppercase and lowercase versions only in a Unicode version
    higher than 4.0.0 is converted by these functions only if the argument collation
    uses a high enough UCA version.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LOWER()`](string-functions.html#function_lower)和[`UPPER()`](string-functions.html#function_upper)函数根据其参数的校对执行大小写折叠。如果一个字符只有在Unicode版本高于4.0.0中才有大写和小写版本，则这些函数只会在参数校对使用足够高的UCA版本时转换该字符。'
- en: Collation Pad Attributes
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 校对填充属性
- en: Collations based on UCA 9.0.0 and higher are faster than collations based on
    UCA versions prior to 9.0.0\. They also have a pad attribute of `NO PAD`, in contrast
    to `PAD SPACE` as used in collations based on UCA versions prior to 9.0.0\. For
    comparison of nonbinary strings, `NO PAD` collations treat spaces at the end of
    strings like any other character (see [Trailing Space Handling in Comparisons](charset-binary-collations.html#charset-binary-collations-trailing-space-comparisons
    "Trailing Space Handling in Comparisons")).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 基于UCA 9.0.0及更高版本的校对比基于UCA 9.0.0之前版本的校对更快。它们的填充属性也是`NO PAD`，与基于UCA 9.0.0之前版本的校对中使用的`PAD
    SPACE`相反。对于非二进制字符串的比较，`NO PAD`校对将字符串末尾的空格视为任何其他字符（参见[比较中的尾随空格处理](charset-binary-collations.html#charset-binary-collations-trailing-space-comparisons
    "比较中的尾随空格处理")）。
- en: 'To determine the pad attribute for a collation, use the `INFORMATION_SCHEMA`
    [`COLLATIONS`](information-schema-collations-table.html "28.3.6 The INFORMATION_SCHEMA
    COLLATIONS Table") table, which has a `PAD_ATTRIBUTE` column. For example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定校对的填充属性，请使用`INFORMATION_SCHEMA`的[`COLLATIONS`](information-schema-collations-table.html
    "28.3.6 INFORMATION_SCHEMA COLLATIONS表")表，该表具有`PAD_ATTRIBUTE`列。例如：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Comparison of nonbinary string values (`CHAR`, `VARCHAR`, and `TEXT`) that
    have a `NO PAD` collation differ from other collations with respect to trailing
    spaces. For example, `''a''` and `''a ''` compare as different strings, not the
    same string. This can be seen using the binary collations for `utf8mb4`. The pad
    attribute for `utf8mb4_bin` is `PAD SPACE`, whereas for `utf8mb4_0900_bin` it
    is `NO PAD`. Consequently, operations involving `utf8mb4_0900_bin` do not add
    trailing spaces, and comparisons involving strings with trailing spaces may differ
    for the two collations:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`NO PAD`校对的非二进制字符串值（`CHAR`，`VARCHAR`和`TEXT`）与其他校对在尾随空格方面有所不同。例如，`'a'`和`'a '`比较为不同的字符串，而不是相同的字符串。可以使用`utf8mb4`的二进制校对来看到这一点。`utf8mb4_bin`的填充属性是`PAD
    SPACE`，而`utf8mb4_0900_bin`的填充属性是`NO PAD`。因此，涉及`utf8mb4_0900_bin`的操作不会添加尾随空格，并且涉及具有尾随空格的字符串的比较可能会因为两种校对而有所不同：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Language-Specific Collations
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 语言特定的校对
- en: MySQL implements language-specific Unicode collations if the ordering based
    only on the Unicode Collation Algorithm (UCA) does not work well for a language.
    Language-specific collations are UCA-based, with additional language tailoring
    rules. Examples of such rules appear later in this section. For questions about
    particular language orderings, [http://unicode.org](http://unicode.org) provides
    Common Locale Data Repository (CLDR) collation charts at [http://www.unicode.org/cldr/charts/30/collation/index.html](http://www.unicode.org/cldr/charts/30/collation/index.html).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仅基于Unicode校对算法（UCA）的排序对某种语言效果不佳，MySQL会实现语言特定的Unicode校对。语言特定的校对是基于UCA的，具有额外的语言定制规则。此类规则的示例稍后在本节中出现。有关特定语言排序的问题，[http://unicode.org](http://unicode.org)提供了通用语言环境数据存储库（CLDR）校对图表，网址为[http://www.unicode.org/cldr/charts/30/collation/index.html](http://www.unicode.org/cldr/charts/30/collation/index.html)。
- en: 'For example, the nonlanguage-specific `utf8mb4_0900_ai_ci` and language-specific
    `utf8mb4_*`LOCALE`*_0900_ai_ci` Unicode collations each have these characteristics:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，非语言特定的`utf8mb4_0900_ai_ci`和语言特定的`utf8mb4_*`LOCALE`*_0900_ai_ci` Unicode校对具有以下特点：
- en: 'The collation is based on UCA 9.0.0 and CLDR v30, is accent-insensitive and
    case-insensitive. These characteristics are indicated by `_0900`, `_ai`, and `_ci`
    in the collation name. Exception: `utf8mb4_la_0900_ai_ci` is not based on CLDR
    because Classical Latin is not defined in CLDR.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 校对基于UCA 9.0.0和CLDR v30，是不区分重音和大小写的。这些特征在校对名称中用`_0900`，`_ai`和`_ci`表示。例外：`utf8mb4_la_0900_ai_ci`不是基于CLDR，因为古典拉丁语在CLDR中未定义。
- en: The collation works for all characters in the range [U+0, U+10FFFF].
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 校对适用于范围[U+0, U+10FFFF]中的所有字符。
- en: If the collation is not language specific, it sorts all characters, including
    supplementary characters, in default order (described following). If the collation
    is language specific, it sorts characters of the language correctly according
    to language-specific rules, and characters not in the language in default order.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果排序规则不是特定于语言的，它会按照默认顺序（如下所述）对所有字符进行排序，包括补充字符。如果排序规则是特定于语言的，它会根据特定于语言的规则正确对该语言的字符进行排序，并对不属于该语言的字符按默认顺序排序。
- en: By default, the collation sorts characters having a code point listed in the
    DUCET table (Default Unicode Collation Element Table) according to the weight
    value assigned in the table. The collation sorts characters not having a code
    point listed in the DUCET table using their implicit weight value, which is constructed
    according to the UCA.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，排序规则根据 DUCET 表（默认 Unicode 排序元素表）中列出的代码点对字符进行排序，根据表中分配的权重值。排序规则根据 UCA 构造的隐式权重值对未在
    DUCET 表中列出代码点的字符进行排序。
- en: For non-language-specific collations, characters in contraction sequences are
    treated as separate characters. For language-specific collations, contractions
    might change character sorting order.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于非特定于语言的排序规则，缩约序列中的字符被视为单独的字符。对于特定于语言的排序规则，缩约可能会改变字符的排序顺序。
- en: A collation name that includes a locale code or language name shown in the following
    table is a language-specific collation. Unicode character sets may include collations
    for one or more of these languages.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在下表中显示的区域代码或语言名称的排序规则名称是特定于语言的排序规则。Unicode字符集可能包括一个或多个这些语言的排序规则。
- en: '**Table 12.3 Unicode Collation Language Specifiers**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 12.3 Unicode 排序语言标识符**'
- en: '| Language | Language Specifier |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 语言 | 语言标识符 |'
- en: '| Bosnian | `bs` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 波斯尼亚语 | `bs` |'
- en: '| Bulgarian | `bg` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 保加利亚语 | `bg` |'
- en: '| Chinese | `zh` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 中文 | `zh` |'
- en: '| Classical Latin | `la` or `roman` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 古典拉丁语 | `la` 或 `roman` |'
- en: '| Croatian | `hr` or `croatian` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 克罗地亚语 | `hr` 或 `croatian` |'
- en: '| Czech | `cs` or `czech` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 捷克语 | `cs` 或 `czech` |'
- en: '| Danish | `da` or `danish` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 丹麦语 | `da` 或 `danish` |'
- en: '| Esperanto | `eo` or `esperanto` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 世界语 | `eo` 或 `esperanto` |'
- en: '| Estonian | `et` or `estonian` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 爱沙尼亚语 | `et` 或 `estonian` |'
- en: '| Galician | `gl` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 加利西亚语 | `gl` |'
- en: '| German phone book order | `de_pb` or `german2` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 德语电话簿排序 | `de_pb` 或 `german2` |'
- en: '| Hungarian | `hu` or `hungarian` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 匈牙利语 | `hu` 或 `hungarian` |'
- en: '| Icelandic | `is` or `icelandic` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 冰岛语 | `is` 或 `icelandic` |'
- en: '| Japanese | `ja` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 日语 | `ja` |'
- en: '| Latvian | `lv` or `latvian` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 拉脱维亚语 | `lv` 或 `latvian` |'
- en: '| Lithuanian | `lt` or `lithuanian` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 立陶宛语 | `lt` 或 `lithuanian` |'
- en: '| Mongolian | `mn` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 蒙古语 | `mn` |'
- en: '| Norwegian / Bokmål | `nb` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 挪威语 / 书面挪威语 | `nb` |'
- en: '| Norwegian / Nynorsk | `nn` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 挪威语 / 新挪威语 | `nn` |'
- en: '| Persian | `persian` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 波斯语 | `persian` |'
- en: '| Polish | `pl` or `polish` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 波兰语 | `pl` 或 `polish` |'
- en: '| Romanian | `ro` or `romanian` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 罗马尼亚语 | `ro` 或 `romanian` |'
- en: '| Russian | `ru` |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 俄语 | `ru` |'
- en: '| Serbian | `sr` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 塞尔维亚语 | `sr` |'
- en: '| Sinhala | `sinhala` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 僧伽罗语 | `sinhala` |'
- en: '| Slovak | `sk` or `slovak` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 斯洛伐克语 | `sk` 或 `slovak` |'
- en: '| Slovenian | `sl` or `slovenian` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 斯洛文尼亚语 | `sl` 或 `slovenian` |'
- en: '| Modern Spanish | `es` or `spanish` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 现代西班牙语 | `es` 或 `spanish` |'
- en: '| Traditional Spanish | `es_trad` or `spanish2` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 传统西班牙语 | `es_trad` 或 `spanish2` |'
- en: '| Swedish | `sv` or `swedish` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 瑞典语 | `sv` 或 `swedish` |'
- en: '| Turkish | `tr` or `turkish` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 土耳其语 | `tr` 或 `turkish` |'
- en: '| Vietnamese | `vi` or `vietnamese` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 越南语 | `vi` 或 `vietnamese` |'
- en: '| Language | Language Specifier |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 语言 | 语言标识符 |'
- en: MySQL 8.0.30 and later provides the Bulgarian collations `utf8mb4_bg_0900_ai_ci`
    and `utf8mb4_bg_0900_as_cs`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0.30及更高版本提供了保加利亚语排序规则 `utf8mb4_bg_0900_ai_ci` 和 `utf8mb4_bg_0900_as_cs`。
- en: 'Croatian collations are tailored for these Croatian letters: `Č`, `Ć`, `Dž`,
    `Đ`, `Lj`, `Nj`, `Š`, `Ž`.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 克罗地亚排序规则专为以下克罗地亚字母定制：`Č`、`Ć`、`Dž`、`Đ`、`Lj`、`Nj`、`Š`、`Ž`。
- en: MySQL 8.0.30 and later provides the `utf8mb4_sr_latn_0900_ai_ci` and `utf8mb4_sr_latn_0900_as_cs`
    collations for Serbian and the `utf8mb4_bs_0900_ai_ci` and `utf8mb4_bs_0900_as_cs`
    collations for Bosnian, when these languages are written with the Latin alphabet.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0.30及更高版本为塞尔维亚语提供了 `utf8mb4_sr_latn_0900_ai_ci` 和 `utf8mb4_sr_latn_0900_as_cs`
    排序规则，为波斯尼亚语提供了 `utf8mb4_bs_0900_ai_ci` 和 `utf8mb4_bs_0900_as_cs` 排序规则，当这些语言使用拉丁字母书写时。
- en: 'Beginning with MySQL 8.0.30, MySQL provides collations for both major varieties
    of Norwegian: for Bokmål, you can use `utf8mb4_nb_0900_ai_ci` and `utf8mb4_nb_0900_as_cs`;
    for Nynorsk, MySQL now provides `utf8mb4_nn_0900_ai_ci` and `utf8mb4_nn_0900_as_cs`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '从 MySQL 8.0.30 开始，MySQL 为挪���的两种主要变体提供了排序规则：对于书面挪威语，您可以使用 `utf8mb4_nb_0900_ai_ci`
    和 `utf8mb4_nb_0900_as_cs`；对于新挪威语，MySQL 现在提供了 `utf8mb4_nn_0900_ai_ci` 和 `utf8mb4_nn_0900_as_cs`。 '
- en: For Japanese, the `utf8mb4` character set includes `utf8mb4_ja_0900_as_cs` and
    `utf8mb4_ja_0900_as_cs_ks` collations. Both collations are accent-sensitive and
    case-sensitive. `utf8mb4_ja_0900_as_cs_ks` is also kana-sensitive and distinguishes
    Katakana characters from Hiragana characters, whereas `utf8mb4_ja_0900_as_cs`
    treats Katakana and Hiragana characters as equal for sorting. Applications that
    require a Japanese collation but not kana sensitivity may use `utf8mb4_ja_0900_as_cs`
    for better sort performance. `utf8mb4_ja_0900_as_cs` uses three weight levels
    for sorting; `utf8mb4_ja_0900_as_cs_ks` uses four.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于日语，`utf8mb4`字符集包括`utf8mb4_ja_0900_as_cs`和`utf8mb4_ja_0900_as_cs_ks`校对。这两种校对都是区分重音和区分大小写的。`utf8mb4_ja_0900_as_cs_ks`还区分假名，将片假名字符与平假名字符区分开，而`utf8mb4_ja_0900_as_cs`将片假名和平假名字符视为排序相等。需要日语校对但不需要假名敏感性的应用程序可以使用`utf8mb4_ja_0900_as_cs`以获得更好的排序性能。`utf8mb4_ja_0900_as_cs`使用三个权重级别进行排序；`utf8mb4_ja_0900_as_cs_ks`使用四个。
- en: For Classical Latin collations that are accent-insensitive, `I` and `J` compare
    as equal, and `U` and `V` compare as equal. `I` and `J`, and `U` and `V` compare
    as equal on the base letter level. In other words, `J` is regarded as an accented
    `I`, and `U` is regarded as an accented `V`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不区分重音的古典拉丁校对，`I`和`J`视为相等，`U`和`V`视为相等。`I`和`J`，以及`U`和`V`在基本字母级别上视为相等。换句话说，`J`被视为带重音的`I`，`U`被视为带重音的`V`。
- en: MySQL 8.0.30 and later provides collations for the Mongolian language when written
    with Cyrillic characters, `utf8mb4_mn_cyrl_0900_ai_ci` and `utf8mb4_mn_cyrl_0900_as_cs`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0.30及更高版本提供了蒙古语的校对，使用西里尔字母书写，`utf8mb4_mn_cyrl_0900_ai_ci`和`utf8mb4_mn_cyrl_0900_as_cs`。
- en: Spanish collations are available for modern and traditional Spanish. For both,
    `ñ` (n-tilde) is a separate letter between `n` and `o`. In addition, for traditional
    Spanish, `ch` is a separate letter between `c` and `d`, and `ll` is a separate
    letter between `l` and `m`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 西班牙语校对适用于现代和传统西班牙语。对于两者，`ñ`（n-tilde）是`n`和`o`之间的单独字母。此外，对于传统西班牙语，`ch`是`c`和`d`之间的单独字母，`ll`是`l`和`m`之间的单独字母。
- en: Traditional Spanish collations may also be used for Asturian and Galician. Beginning
    with MySQL 8.0.30, MySQL also provides `utf8mb4_gl_0900_ai_ci` and `utf8mb4_gl_0900_as_cs`
    collations for Galician. (These are the same collations as `utf8mb4_es_0900_ai_ci`
    and `utf8mb4_es_0900_as_cs`, respectively.)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 传统西班牙语校对也可用于阿斯图里亚斯语和加利西亚语。从MySQL 8.0.30开始，MySQL还为加利西亚语提供了`utf8mb4_gl_0900_ai_ci`和`utf8mb4_gl_0900_as_cs`校对（这些校对与`utf8mb4_es_0900_ai_ci`和`utf8mb4_es_0900_as_cs`相同）。
- en: 'Swedish collations include Swedish rules. For example, in Swedish, the following
    relationship holds, which is not something expected by a German or French speaker:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 瑞典校对包括瑞典规则。例如，在瑞典语中，以下关系成立，这是德语或法语说话者所不期望的：
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: _general_ci Versus _unicode_ci Collations
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: _general_ci与_unicode_ci校对
- en: For any Unicode character set, operations performed using the `*`xxx`*_general_ci`
    collation are faster than those for the `*`xxx`*_unicode_ci` collation. For example,
    comparisons for the `utf8mb4_general_ci` collation are faster, but slightly less
    correct, than comparisons for `utf8mb4_unicode_ci`. The reason is that `utf8mb4_unicode_ci`
    supports mappings such as expansions; that is, when one character compares as
    equal to combinations of other characters. For example, `ß` is equal to `ss` in
    German and some other languages. `utf8mb4_unicode_ci` also supports contractions
    and ignorable characters. `utf8mb4_general_ci` is a legacy collation that does
    not support expansions, contractions, or ignorable characters. It can make only
    one-to-one comparisons between characters.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何 Unicode 字符集，使用`*`xxx`*_general_ci`校对的操作比`*`xxx`*_unicode_ci`校对的操作更快。例如，`utf8mb4_general_ci`校对的比较速度更快，但略微不够准确，比`utf8mb4_unicode_ci`校对的比较速度更快。原因是`utf8mb4_unicode_ci`支持映射，例如扩展；也就是说，当一个字符与其他字符的组合相等时。例如，在德语和其他一些语言中，`ß`等于`ss`。`utf8mb4_unicode_ci`还支持缩写和可忽略字符。`utf8mb4_general_ci`是一个不支持扩展、缩写或可忽略字符的传统校对。它只能在字符之间进行一对一的比较。
- en: 'To further illustrate, the following equalities hold in both `utf8mb4_general_ci`
    and `utf8mb4_unicode_ci` (for the effect of this in comparisons or searches, see
    [Section 12.8.6, “Examples of the Effect of Collation”](charset-collation-effect.html
    "12.8.6 Examples of the Effect of Collation")):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步说明，在`utf8mb4_general_ci`和`utf8mb4_unicode_ci`中以下相等性成立（对于比较或搜索的影响，请参阅[第12.8.6节，“校对效果示例”](charset-collation-effect.html
    "12.8.6 校对效果示例")）：
- en: '[PRE3]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A difference between the collations is that this is true for `utf8mb4_general_ci`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 校对规则之间的一个区别是对于`utf8mb4_general_ci`是真实的：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Whereas this is true for `utf8mb4_unicode_ci`, which supports the German DIN-1
    ordering (also known as dictionary order):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 而对于支持德国 DIN-1 排序（也称为字典顺序）的`utf8mb4_unicode_ci`是真实的：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: MySQL implements language-specific Unicode collations if the ordering with `utf8mb4_unicode_ci`
    does not work well for a language. For example, `utf8mb4_unicode_ci` works fine
    for German dictionary order and French, so there is no need to create special
    `utf8mb4` collations.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`utf8mb4_unicode_ci`的排序对某种语言不起作用，MySQL会实现特定语言的Unicode校对规则。例如，`utf8mb4_unicode_ci`适用于德语字典顺序和法语，因此不需要创建特殊的`utf8mb4`校对规则。
- en: '`utf8mb4_general_ci` also is satisfactory for both German and French, except
    that `ß` is equal to `s`, and not to `ss`. If this is acceptable for your application,
    you should use `utf8mb4_general_ci` because it is faster. If this is not acceptable
    (for example, if you require German dictionary order), use `utf8mb4_unicode_ci`
    because it is more accurate.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`utf8mb4_general_ci`对于德语和法语都是令人满意的，除了`ß`等于`s`，而不等于`ss`。如果这对您的应用程序可接受，应该使用`utf8mb4_general_ci`因为它更快。如果这不可接受（例如，如果需要德语字典顺序），应该使用`utf8mb4_unicode_ci`因为它更准确。'
- en: 'If you require German DIN-2 (phone book) ordering, use the `utf8mb4_german2_ci`
    collation, which compares the following sets of characters equal:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要德国 DIN-2（电话簿）排序，请使用`utf8mb4_german2_ci`校对规则，它将以下字符集视为相等：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`utf8mb4_german2_ci` is similar to `latin1_german2_ci`, but the latter does
    not compare `Æ` equal to `AE` or `Œ` equal to `OE`. There is no `utf8mb4_german_ci`
    corresponding to `latin1_german_ci` for German dictionary order because `utf8mb4_general_ci`
    suffices.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`utf8mb4_german2_ci`类似于`latin1_german2_ci`，但后者不将`Æ`视为等于`AE`或`Œ`视为等于`OE`。对于德语字典顺序，没有对应于`latin1_german_ci`的`utf8mb4_german_ci`，因为`utf8mb4_general_ci`已经足够。'
- en: Character Collating Weights
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符排序权重
- en: 'A character''s collating weight is determined as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 字符的排序权重确定如下：
- en: For all Unicode collations except the `_bin` (binary) collations, MySQL performs
    a table lookup to find a character's collating weight.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于除`_bin`（二进制）校对规则之外的所有Unicode校对规则，MySQL执行表查找以找到字符的排序权重。
- en: For `_bin` collations except `utf8mb4_0900_bin`, the weight is based on the
    code point, possibly with leading zero bytes added.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于除`utf8mb4_0900_bin`之外的`_bin`校对规则，权重基于代码点，可能会添加前导零字节。
- en: For `utf8mb4_0900_bin`, the weight is the `utf8mb4` encoding bytes. The sort
    order is the same as for `utf8mb4_bin`, but much faster.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`utf8mb4_0900_bin`，权重是`utf8mb4`编码的字节。排序顺序与`utf8mb4_bin`相同，但速度更快。
- en: 'Collating weights can be displayed using the [`WEIGHT_STRING()`](string-functions.html#function_weight-string)
    function. (See [Section 14.8, “String Functions and Operators”](string-functions.html
    "14.8 String Functions and Operators").) If a collation uses a weight lookup table,
    but a character is not in the table (for example, because it is a “new” character),
    collating weight determination becomes more complex:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`WEIGHT_STRING()`](string-functions.html#function_weight-string)函数显示排序权重。（参见[第14.8节，“字符串函数和运算符”](string-functions.html
    "14.8 字符串函数和运算符")。）如果校对规则使用权重查找表，但某个字符不在表中（例如，因为它是一个“新”字符），排序权重的确定变得更加复杂：
- en: For BMP characters in general collations (`*`xxx`*_general_ci`), the weight
    is the code point.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于一般校对规则中的BMP字符（`*`xxx`*_general_ci`），权重是代码点。
- en: 'For BMP characters in UCA collations (for example, `*`xxx`*_unicode_ci` and
    language-specific collations), the following algorithm applies:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于UCA校对规则中的BMP字符（例如`*`xxx`*_unicode_ci`和特定语言的校对规则），应用以下算法：
- en: '[PRE7]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The result is a sequence of two collating elements, `aaaa` followed by `bbbb`.
    For example:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果是两个排序元素的序列，`aaaa`后跟`bbbb`。例如：
- en: '[PRE8]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Thus, `U+04cf CYRILLIC SMALL LETTER PALOCHKA` (`ӏ`) is, with all UCA 4.0.0 collations,
    greater than `U+04c0 CYRILLIC LETTER PALOCHKA` (`Ӏ`). With UCA 5.2.0 collations,
    all palochkas sort together.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，`U+04cf CYRILLIC SMALL LETTER PALOCHKA`（`ӏ`）在所有UCA 4.0.0校对规则中都大于`U+04c0 CYRILLIC
    LETTER PALOCHKA`（`Ӏ`）。对于UCA 5.2.0校对规则，所有帕洛奇卡字符一起排序。
- en: For supplementary characters in general collations, the weight is the weight
    for `0xfffd REPLACEMENT CHARACTER`. For supplementary characters in UCA 4.0.0
    collations, their collating weight is `0xfffd`. That is, to MySQL, all supplementary
    characters are equal to each other, and greater than almost all BMP characters.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于一般校对规则中的补充字符，权重是`0xfffd REPLACEMENT CHARACTER`的权重。对于UCA 4.0.0校对规则中的补充字符，它们的排序权重是`0xfffd`。也就是说，对于MySQL来说，所有补充字符彼此相等，并且大于几乎所有BMP字符。
- en: 'An example with Deseret characters and `COUNT(DISTINCT)`:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用Deseret字符和`COUNT(DISTINCT)`的示例：
- en: '[PRE9]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The result is 2 because in the MySQL `*`xxx`*_unicode_ci` collations, the replacement
    character has a weight of `0x0dc6`, whereas Deseret Bee and Deseret Tee both have
    a weight of `0xfffd`. (Were the `utf32_general_ci` collation used instead, the
    result is 1 because all three characters have a weight of `0xfffd` in that collation.)
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果为2，因为在MySQL `*`xxx`*_unicode_ci`校对中，替换字符的权重为`0x0dc6`，而Deseret Bee和Deseret
    Tee的权重均为`0xfffd`。（如果使用`utf32_general_ci`校对，则结果为1，因为在该校对中，这三个字符的权重均为`0xfffd`。）
- en: 'An example with cuneiform characters and [`WEIGHT_STRING()`](string-functions.html#function_weight-string):'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用楔形文字字符和[`WEIGHT_STRING()`](string-functions.html#function_weight-string)的示例：
- en: '[PRE10]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result is:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果为：
- en: '[PRE11]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`0E33` and `0E4A` are primary weights as in [UCA 4.0.0](ftp://www.unicode.org/Public/UCA/4.0.0/allkeys-4.0.0.txt).
    `FFFD` is the weight for KAB and also for KISH.'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`0E33`和`0E4A`是[UCA 4.0.0](ftp://www.unicode.org/Public/UCA/4.0.0/allkeys-4.0.0.txt)中的主要权重。`FFFD`是KAB和KISH的权重。'
- en: 'The rule that all supplementary characters are equal to each other is nonoptimal
    but is not expected to cause trouble. These characters are very rare, so it is
    very rare that a multi-character string consists entirely of supplementary characters.
    In Japan, since the supplementary characters are obscure Kanji ideographs, the
    typical user does not care what order they are in, anyway. If you really want
    rows sorted by the MySQL rule and secondarily by code point value, it is easy:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有补充字符相等的规则并非最佳选择，但不会引起问题。这些字符非常罕见，因此很少出现多字符字符串完全由补充字符组成。在日本，由于补充字符是晦涩的汉字表意文字，典型用户无论如何都不在乎它们的顺序。如果您真的希望按照MySQL规则和其次按照代码点值对行进行排序，那很容易实现：
- en: '[PRE12]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For supplementary characters based on UCA versions higher than 4.0.0 (for example,
    `*`xxx`*_unicode_520_ci`), supplementary characters do not necessarily all have
    the same collating weight. Some have explicit weights from the UCA `allkeys.txt`
    file. Others have weights calculated from this algorithm:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于基于高于4.0.0版本的UCA的补充字符（例如，`*`xxx`*_unicode_520_ci`），补充字符不一定都具有相同的排序权重。有些具有来自UCA
    `allkeys.txt`文件的显式权重。其他根据此算法计算权重：
- en: '[PRE13]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There is a difference between “ordering by the character's code value” and “ordering
    by the character's binary representation,” a difference that appears only with
    `utf16_bin`, because of surrogates.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: “按字符的代码值排序”和“按字符的二进制表示排序”之间存在差异，这种差异仅在`utf16_bin`中出现，因为存在代理。
- en: Suppose that `utf16_bin` (the binary collation for `utf16`) was a binary comparison
    “byte by byte” rather than “character by character.” If that were so, the order
    of characters in `utf16_bin` would differ from the order in `utf8mb4_bin`. For
    example, the following chart shows two rare characters. The first character is
    in the range `E000`-`FFFF`, so it is greater than a surrogate but less than a
    supplementary. The second character is a supplementary.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`utf16_bin`（`utf16`的二进制校对）是一种“逐字节”而不是“逐字符”进行二进制比较。如果是这样，那么`utf16_bin`中字符的顺序将与`utf8mb4_bin`中的顺序不同。例如，以下图表显示了两个罕见字符。第一个字符位于`E000`-`FFFF`范围内，因此大于代理但小于补充字符。第二个字符是一个补充字符。
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The two characters in the chart are in order by code point value because `0xff9d`
    < `0x10384`. And they are in order by `utf8mb4` value because `0xef` < `0xf0`.
    But they are not in order by `utf16` value, if we use byte-by-byte comparison,
    because `0xff` > `0xd8`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图表中的两个字符按代码点值顺序排列，因为`0xff9d` < `0x10384`。它们按`utf8mb4`值顺序排列，因为`0xef` < `0xf0`。但如果我们使用逐字节比较，它们按`utf16`值顺序排列，因为`0xff`
    > `0xd8`。
- en: 'So MySQL''s `utf16_bin` collation is not “byte by byte.” It is “by code point.”
    When MySQL sees a supplementary-character encoding in `utf16`, it converts to
    the character''s code-point value, and then compares. Therefore, `utf8mb4_bin`
    and `utf16_bin` are the same ordering. This is consistent with the SQL:2008 standard
    requirement for a UCS_BASIC collation: “UCS_BASIC is a collation in which the
    ordering is determined entirely by the Unicode scalar values of the characters
    in the strings being sorted. It is applicable to the UCS character repertoire.
    Since every character repertoire is a subset of the UCS repertoire, the UCS_BASIC
    collation is potentially applicable to every character set. NOTE 11: The Unicode
    scalar value of a character is its code point treated as an unsigned integer.”'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，MySQL的`utf16_bin`校对不是“逐字节”的。它是“按代码点”。当MySQL在`utf16`中看到补充字符编码时，它会转换为字符的代码点值，然后进行比较。因此，`utf8mb4_bin`和`utf16_bin`具有相同的排序。这与SQL:2008标准对UCS_BASIC校对的要求一致：“UCS_BASIC是一种校对，其排序完全由要排序的字符串中字符的Unicode标量值确定。它适用于UCS字符库。由于每个字符库都是UCS字符库的子集，因此UCS_BASIC校对可能适用于每个字符集。注11：字符的Unicode标量值是将其代码点视为无符号整数。”
- en: If the character set is `ucs2`, comparison is byte-by-byte, but `ucs2` strings
    should not contain surrogates, anyway.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符集是`ucs2`，比较是逐字节的，但`ucs2`字符串不应包含代理项。
- en: Miscellaneous Information
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 其他信息
- en: 'The `*`xxx`*_general_mysql500_ci` collations preserve the pre-5.1.24 ordering
    of the original `*`xxx`*_general_ci` collations and permit upgrades for tables
    created before MySQL 5.1.24 (Bug #27877).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`*`xxx`*_general_mysql500_ci`校对保留了原始`*`xxx`*_general_ci`校对的5.1.24版本之前的排序，并允许升级用于在MySQL
    5.1.24之前创建的表（Bug＃27877）。'
