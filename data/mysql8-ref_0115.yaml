- en: 3.13 Upgrade Troubleshooting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.13 升级故障排除
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/upgrade-troubleshooting.html](https://dev.mysql.com/doc/refman/8.0/en/upgrade-troubleshooting.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/upgrade-troubleshooting.html](https://dev.mysql.com/doc/refman/8.0/en/upgrade-troubleshooting.html)
- en: A schema mismatch in a MySQL 5.7 instance between the `.frm` file of a table
    and the `InnoDB` data dictionary can cause an upgrade to MySQL 8.0 to fail. Such
    mismatches may be due to `.frm` file corruption. To address this issue, dump and
    restore affected tables before attempting the upgrade again.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 5.7实例中，表的`.frm`文件与`InnoDB`数据字典之间的模式不匹配可能导致升级到MySQL 8.0失败。这种不匹配可能是由于`.frm`文件损坏造成的。要解决此问题，请在再次尝试升级之前转储和恢复受影响的表。
- en: If problems occur, such as that the new [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") server does not start, verify that you do not have an old
    `my.cnf` file from your previous installation. You can check this with the [`--print-defaults`](option-file-options.html#option_general_print-defaults)
    option (for example, [**mysqld --print-defaults**](mysqld.html "6.3.1 mysqld —
    The MySQL Server")). If this command displays anything other than the program
    name, you have an active `my.cnf` file that affects server or client operation.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果出现问题，比如新的[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")服务器无法启动，请验证您是否有来自先前安装的旧`my.cnf`文件。您可以使用[`--print-defaults`](option-file-options.html#option_general_print-defaults)选项来检查（例如，[**mysqld
    --print-defaults**](mysqld.html "6.3.1 mysqld — The MySQL Server")）。如果此命令显示除程序名称之外的任何内容，则您有一个影响服务器或客户端操作的活动`my.cnf`文件。
- en: If, after an upgrade, you experience problems with compiled client programs,
    such as `Commands out of sync` or unexpected core dumps, you probably have used
    old header or library files when compiling your programs. In this case, check
    the date for your `mysql.h` file and `libmysqlclient.a` library to verify that
    they are from the new MySQL distribution. If not, recompile your programs with
    the new headers and libraries. Recompilation might also be necessary for programs
    compiled against the shared client library if the library major version number
    has changed (for example, from `libmysqlclient.so.20` to `libmysqlclient.so.21`).
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在升级后，您遇到编译的客户端程序出现问题，比如`Commands out of sync`或意外的核心转储，那么您可能在编译程序时使用了旧的头文件或库文件。在这种情况下，请检查您的`mysql.h`文件和`libmysqlclient.a`库文件的日期，以验证它们是否来自新的MySQL发行版。如果不是，请使用新的头文件和库文件重新编译您的程序。如果共享客户端库的主要版本号已更改（例如，从`libmysqlclient.so.20`到`libmysqlclient.so.21`），则可能还需要重新编译针对共享客户端库编译的程序。
- en: If you have created a loadable function with a given name and upgrade MySQL
    to a version that implements a new built-in function with the same name, the loadable
    function becomes inaccessible. To correct this, use [`DROP FUNCTION`](drop-function.html
    "15.1.26 DROP FUNCTION Statement") to drop the loadable function, and then use
    [`CREATE FUNCTION`](create-function.html "15.1.14 CREATE FUNCTION Statement")
    to re-create the loadable function with a different nonconflicting name. The same
    is true if the new version of MySQL implements a built-in function with the same
    name as an existing stored function. See [Section 11.2.5, “Function Name Parsing
    and Resolution”](function-resolution.html "11.2.5 Function Name Parsing and Resolution"),
    for the rules describing how the server interprets references to different kinds
    of functions.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您已经创建了一个具有特定名称的可加载函数，并将MySQL升级到实现具有相同名称的新内置函数的版本，则该可加载函数将变得无法访问。要纠正此问题，请使用[`DROP
    FUNCTION`](drop-function.html "15.1.26 DROP FUNCTION Statement")删除可加载函数，然后使用[`CREATE
    FUNCTION`](create-function.html "15.1.14 CREATE FUNCTION Statement")使用不冲突的不同名称重新创建可加载函数。如果新版本的MySQL实现了与现有存储函数同名的内置函数，则情况也是如此。有关服务器如何解释对不同类型函数的引用的规则，请参见[Section 11.2.5,
    “Function Name Parsing and Resolution”](function-resolution.html "11.2.5 Function
    Name Parsing and Resolution")。
- en: If upgrade to MySQL 8.0 fails due to any of the issues outlined in [Section 3.6,
    “Preparing Your Installation for Upgrade”](upgrade-prerequisites.html "3.6 Preparing
    Your Installation for Upgrade"), the server reverts all changes to the data directory.
    In this case, remove all redo log files and restart the MySQL 5.7 server on the
    existing data directory to address the errors. The redo log files (`ib_logfile*`)
    reside in the MySQL data directory by default. After the errors are fixed, perform
    a slow shutdown (by setting [`innodb_fast_shutdown=0`](innodb-parameters.html#sysvar_innodb_fast_shutdown))
    before attempting the upgrade again.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果由于[第3.6节“准备升级安装”](upgrade-prerequisites.html "3.6 准备升级安装")中概述的任何问题而导致升级到MySQL
    8.0失败，则服务器会将所有更改恢复到数据目录。在这种情况下，删除所有重做日志文件并在现有数据目录上重新启动MySQL 5.7服务器以解决错误。重做日志文件（`ib_logfile*`）默认位于MySQL数据目录中。在错误修复后，在尝试再次升级之前执行慢关闭（通过设置[`innodb_fast_shutdown=0`](innodb-parameters.html#sysvar_innodb_fast_shutdown)）。
