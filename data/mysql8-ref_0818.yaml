- en: 14.12 Bit Functions and Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.12 位函数和运算符
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html](https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html](https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html)
- en: '**Table 14.17 Bit Functions and Operators**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表14.17 位函数和运算符**'
- en: '| Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`&`](bit-functions.html#operator_bitwise-and) | Bitwise AND |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`&`](bit-functions.html#operator_bitwise-and) | 按位与 |'
- en: '| [`>>`](bit-functions.html#operator_right-shift) | Right shift |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`>>`](bit-functions.html#operator_right-shift) | 右移 |'
- en: '| [`<<`](bit-functions.html#operator_left-shift) | Left shift |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`<<`](bit-functions.html#operator_left-shift) | 左移 |'
- en: '| [`^`](bit-functions.html#operator_bitwise-xor) | Bitwise XOR |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`^`](bit-functions.html#operator_bitwise-xor) | 按位异或 |'
- en: '| [`BIT_COUNT()`](bit-functions.html#function_bit-count) | Return the number
    of bits that are set |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`BIT_COUNT()`](bit-functions.html#function_bit-count) | 返回设置的位数 |'
- en: '| [`&#124;`](bit-functions.html#operator_bitwise-or) | Bitwise OR |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`&#124;`](bit-functions.html#operator_bitwise-or) | 按位或 |'
- en: '| [`~`](bit-functions.html#operator_bitwise-invert) | Bitwise inversion |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`~`](bit-functions.html#operator_bitwise-invert) | 按位取反 |'
- en: 'The following list describes available bit functions and operators:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了可用的位函数和运算符：
- en: '[`|`](bit-functions.html#operator_bitwise-or)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`|`](bit-functions.html#operator_bitwise-or)'
- en: Bitwise OR.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按位或。
- en: 'The result type depends on whether the arguments are evaluated as binary strings
    or numbers:'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果类型取决于参数是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the arguments have a binary string type,
    and at least one of them is not a hexadecimal literal, bit literal, or `NULL`
    literal. Numeric evaluation occurs otherwise, with argument conversion to unsigned
    64-bit integers as necessary.
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当参数具有二进制字符串类型且至少有一个不是十六进制文字、位文字或`NULL`文字时，进行二进制字符串运算。否则进行数值运算，必要时将参数转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    arguments. If the arguments have unequal lengths, an [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    error occurs. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串运算会产生与参数相同长度的二进制字符串。如果参数长度不相等，则会出现[`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)错误。数值运算会产生一个无符号64位整数。
- en: For more information, see the introductory discussion in this section.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参阅本节的介绍性讨论。
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If bitwise OR is invoked from within the [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") client, binary string results display using
    hexadecimal notation, depending on the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端中调用按位或运算，二进制字符串结果将以十六进制表示，具体取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参阅[Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`&`](bit-functions.html#operator_bitwise-and)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`&`](bit-functions.html#operator_bitwise-and)'
- en: Bitwise AND.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按位与。
- en: 'The result type depends on whether the arguments are evaluated as binary strings
    or numbers:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果类型取决于参数是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the arguments have a binary string type,
    and at least one of them is not a hexadecimal literal, bit literal, or `NULL`
    literal. Numeric evaluation occurs otherwise, with argument conversion to unsigned
    64-bit integers as necessary.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当参数具有二进制字符串类型且至少有一个不是十六进制文字、位文字或`NULL`文字时，进行二进制字符串运算。否则进行数值运算，必要时将参数转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    arguments. If the arguments have unequal lengths, an [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    error occurs. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串运算会产生与参数相同长度的二进制字符串。如果参数长度不相等，则会出现[`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)错误。数值运算会产生一个无符号64位整数。
- en: For more information, see the introductory discussion in this section.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参阅本节的介绍性讨论。
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If bitwise AND is invoked from within the [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") client, binary string results display using
    hexadecimal notation, depending on the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — MySQL 命令行客户端")客户端中调用按位与，二进制字符串结果将以十六进制表示，具体取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参阅[第6.5.1节，“mysql
    — MySQL 命令行客户端”](mysql.html "6.5.1 mysql — MySQL 命令行客户端")。
- en: '[`^`](bit-functions.html#operator_bitwise-xor)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`^`](bit-functions.html#operator_bitwise-xor)'
- en: Bitwise XOR.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按位异或。
- en: 'The result type depends on whether the arguments are evaluated as binary strings
    or numbers:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果类型取决于参数是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the arguments have a binary string type,
    and at least one of them is not a hexadecimal literal, bit literal, or `NULL`
    literal. Numeric evaluation occurs otherwise, with argument conversion to unsigned
    64-bit integers as necessary.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当参数具有二进制字符串类型且至少一个参数不是十六进制文字、比特文字或`NULL`文字时，进行二进制字符串运算。否则进行数值运算，并根据需要将参数转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    arguments. If the arguments have unequal lengths, an [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    error occurs. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串运算产生与参数长度相同的二进制字符串。如果参数长度不相等，则会出现[`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)错误。数值运算产生一个无符号64位整数。
- en: For more information, see the introductory discussion in this section.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参阅本节的介绍性讨论。
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If bitwise XOR is invoked from within the [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") client, binary string results display using
    hexadecimal notation, depending on the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — MySQL 命令行客户端")客户端中调用按位异或，二进制字符串结果将以十六进制表示，具体取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参阅[第6.5.1节，“mysql
    — MySQL 命令行客户端”](mysql.html "6.5.1 mysql — MySQL 命令行客户端")。
- en: '[`<<`](bit-functions.html#operator_left-shift)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`<<`](bit-functions.html#operator_left-shift)'
- en: Shifts a longlong ([`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")) number or binary
    string to the left.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将一个长整型（[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT")）数字或二进制字符串向左移位。
- en: 'The result type depends on whether the bit argument is evaluated as a binary
    string or number:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果类型取决于比特参数是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the bit argument has a binary string type,
    and is not a hexadecimal literal, bit literal, or `NULL` literal. Numeric evaluation
    occurs otherwise, with argument conversion to an unsigned 64-bit integer as necessary.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当比特参数具有二进制字符串类型且不是十六进制文字、比特文字或`NULL`文字时，进行二进制字符串运算。否则进行数值运算，并根据需要将参数转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    bit argument. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串运算产生与比特参数长度相同的二进制字符串。数值运算产生一个无符号64位整数。
- en: Bits shifted off the end of the value are lost without warning, regardless of
    the argument type. In particular, if the shift count is greater or equal to the
    number of bits in the bit argument, all bits in the result are 0.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 超出值末尾的位将被丢弃，不会有警告，无论参数类型如何。特别是，如果移位计数大于或等于比特参数中的位数，则结果中的所有位都为0。
- en: For more information, see the introductory discussion in this section.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参阅本节的介绍性讨论。
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If a bit shift is invoked from within the [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") client, binary string results display using
    hexadecimal notation, depending on the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端内调用位移操作，则根据[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值，二进制字符串结果将以十六进制表示。有关该选项的更多信息，请参阅[Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`>>`](bit-functions.html#operator_right-shift)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`>>`](bit-functions.html#operator_right-shift)'
- en: Shifts a longlong ([`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")) number or binary
    string to the right.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将一个长整型([`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"))数字或二进制字符串向右移动。
- en: 'The result type depends on whether the bit argument is evaluated as a binary
    string or number:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果类型取决于位参数是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the bit argument has a binary string type,
    and is not a hexadecimal literal, bit literal, or `NULL` literal. Numeric evaluation
    occurs otherwise, with argument conversion to an unsigned 64-bit integer as necessary.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当位参数具有二进制字符串类型且不是十六进制文字、位文字或`NULL`文字时，进行二进制字符串评估。否则进行数值评估，必要时将参数转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    bit argument. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串评估会产生与位参数相同长度的二进制字符串。数值评估会产生一个无符号64位整数。
- en: Bits shifted off the end of the value are lost without warning, regardless of
    the argument type. In particular, if the shift count is greater or equal to the
    number of bits in the bit argument, all bits in the result are 0.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无论参数类型如何，超出值末尾的位都会被丢弃而不发出警告。特别是，如果位移计数大于或等于位参数中的位数，则结果中的所有位都为0。
- en: For more information, see the introductory discussion in this section.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅本节中的介绍性讨论。
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If a bit shift is invoked from within the [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") client, binary string results display using
    hexadecimal notation, depending on the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端内调用位移操作，则根据[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值，二进制字符串结果将以十六进制表示。有关该选项的更多信息，请参阅[Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`~`](bit-functions.html#operator_bitwise-invert)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~`](bit-functions.html#operator_bitwise-invert)'
- en: Invert all bits.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反转所有位。
- en: 'The result type depends on whether the bit argument is evaluated as a binary
    string or number:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果类型取决于位参数是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the bit argument has a binary string type,
    and is not a hexadecimal literal, bit literal, or `NULL` literal. Numeric evaluation
    occurs otherwise, with argument conversion to an unsigned 64-bit integer as necessary.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当位参数具有二进制字符串类型且不是十六进制文字、位文字或`NULL`文字时，进行二进制字符串评估。否则进行数值评估，必要时将参数转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    bit argument. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串评估会产生与位参数相同长度的二进制字符串。数值评估会产生一个无符号64位整数。
- en: For more information, see the introductory discussion in this section.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅本节中的介绍性讨论。
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If bitwise inversion is invoked from within the [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") client, binary string results display using
    hexadecimal notation, depending on the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端内调用位求反操作，则根据[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值，二进制字符串结果将以十六进制表示。有关该选项的更多信息，请参阅[Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`BIT_COUNT(*`N`*)`](bit-functions.html#function_bit-count)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIT_COUNT(*`N`*)`](bit-functions.html#function_bit-count)'
- en: Returns the number of bits that are set in the argument *`N`* as an unsigned
    64-bit integer, or `NULL` if the argument is `NULL`.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回参数 *`N`* 中设置的位数作为无符号 64 位整数，如果参数为 `NULL` 则返回 `NULL`。
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Bit functions and operators comprise [`BIT_COUNT()`](bit-functions.html#function_bit-count),
    [`BIT_AND()`](aggregate-functions.html#function_bit-and), [`BIT_OR()`](aggregate-functions.html#function_bit-or),
    [`BIT_XOR()`](aggregate-functions.html#function_bit-xor), [`&`](bit-functions.html#operator_bitwise-and),
    [`|`](bit-functions.html#operator_bitwise-or), [`^`](bit-functions.html#operator_bitwise-xor),
    [`~`](bit-functions.html#operator_bitwise-invert), [`<<`](bit-functions.html#operator_left-shift),
    and [`>>`](bit-functions.html#operator_right-shift). (The [`BIT_AND()`](aggregate-functions.html#function_bit-and),
    [`BIT_OR()`](aggregate-functions.html#function_bit-or), and [`BIT_XOR()`](aggregate-functions.html#function_bit-xor)
    aggregate functions are described in [Section 14.19.1, “Aggregate Function Descriptions”](aggregate-functions.html
    "14.19.1 Aggregate Function Descriptions").) Prior to MySQL 8.0, bit functions
    and operators required [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") (64-bit integer)
    arguments and returned [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") values, so they
    had a maximum range of 64 bits. Non-[`BIGINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") arguments
    were converted to [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") prior to performing the
    operation and truncation could occur.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 位函数和运算符包括 [`BIT_COUNT()`](bit-functions.html#function_bit-count), [`BIT_AND()`](aggregate-functions.html#function_bit-and),
    [`BIT_OR()`](aggregate-functions.html#function_bit-or), [`BIT_XOR()`](aggregate-functions.html#function_bit-xor),
    [`&`](bit-functions.html#operator_bitwise-and), [`|`](bit-functions.html#operator_bitwise-or),
    [`^`](bit-functions.html#operator_bitwise-xor), [`~`](bit-functions.html#operator_bitwise-invert),
    [`<<`](bit-functions.html#operator_left-shift), 以及 [`>>`](bit-functions.html#operator_right-shift)。（[`BIT_AND()`](aggregate-functions.html#function_bit-and),
    [`BIT_OR()`](aggregate-functions.html#function_bit-or), 和 [`BIT_XOR()`](aggregate-functions.html#function_bit-xor)
    聚合函数在 [第 14.19.1 节，“聚合函数描述”](aggregate-functions.html "14.19.1 聚合函数描述") 中有描述。）在
    MySQL 8.0 之前，位函数和运算符需要 [`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")（64 位整数）参数，并返回 [`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 值，因此它们的最大范围为
    64 位。非 [`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT") 参数在执行操作之前被转换为 [`BIGINT`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")，并且可能发生截断。
- en: In MySQL 8.0, bit functions and operators permit binary string type arguments
    ([`BINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), and the [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") types) and return a value of like type, which enables them
    to take arguments and produce return values larger than 64 bits. Nonbinary string
    arguments are converted to [`BIGINT`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") and processed
    as such, as before.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0 中，位函数和运算符允许二进制字符串类型的参数（[`BINARY`](binary-varbinary.html "13.3.3 BINARY
    和 VARBINARY 类型"), [`VARBINARY`](binary-varbinary.html "13.3.3 BINARY 和 VARBINARY
    类型"), 以及 [`BLOB`](blob.html "13.3.4 BLOB 和 TEXT 类型") 类型），并返回相同类型的值，这使它们能够接受参数并生成大于
    64 位的返回值。非二进制字符串参数被转换为 [`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 并按照此类处理，就像以前一样。
- en: An implication of this change in behavior is that bit operations on binary string
    arguments might produce a different result in MySQL 8.0 than in 5.7\. For information
    about how to prepare in MySQL 5.7 for potential incompatibilities between MySQL
    5.7 and 8.0, see [Bit Functions and Operators](/doc/refman/5.7/en/bit-functions.html),
    in [MySQL 5.7 Reference Manual](/doc/refman/5.7/en/).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为变化的一个影响是，在 MySQL 8.0 中对二进制字符串参数进行位操作可能会产生与 5.7 中不同的结果。有关如何在 MySQL 5.7 中准备可能的
    MySQL 5.7 和 8.0 之间不兼容性的信息，请参阅 [位函数和运算符](/doc/refman/5.7/en/bit-functions.html)，在
    [MySQL 5.7 参考手册](/doc/refman/5.7/en/) 中。
- en: '[Bit Operations Prior to MySQL 8.0](bit-functions.html#bit-operations-5-7 "Bit
    Operations Prior to MySQL 8.0")'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MySQL 8.0 之前的位操作](bit-functions.html#bit-operations-5-7 "MySQL 8.0 之前的位操作")'
- en: '[Bit Operations in MySQL 8.0](bit-functions.html#bit-operations-8-0 "Bit Operations
    in MySQL 8.0")'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MySQL 8.0中的位操作](bit-functions.html#bit-operations-8-0 "MySQL 8.0中的位操作")'
- en: '[Binary String Bit-Operation Examples](bit-functions.html#bit-operations-binary-string-examples
    "Binary String Bit-Operation Examples")'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[二进制字符串位操作示例](bit-functions.html#bit-operations-binary-string-examples "二进制字符串位操作示例")'
- en: '[Bitwise AND, OR, and XOR Operations](bit-functions.html#bit-operations-and-or-xor
    "Bitwise AND, OR, and XOR Operations")'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[位与、或和异或操作](bit-functions.html#bit-operations-and-or-xor "位与、或和异或操作")'
- en: '[Bitwise Complement and Shift Operations](bit-functions.html#bit-operations-complement-shift
    "Bitwise Complement and Shift Operations")'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[位取反和移位操作](bit-functions.html#bit-operations-complement-shift "位取反和移位操作")'
- en: '[BIT_COUNT() Operations](bit-functions.html#bit-operations-bit-count "BIT_COUNT()
    Operations")'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[BIT_COUNT() 操作](bit-functions.html#bit-operations-bit-count "BIT_COUNT() 操作")'
- en: '[BIT_AND(), BIT_OR(), and BIT_XOR() Operations](bit-functions.html#bit-operations-bit-aggregate
    "BIT_AND(), BIT_OR(), and BIT_XOR() Operations")'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[BIT_AND(), BIT_OR(), 和 BIT_XOR() 操作](bit-functions.html#bit-operations-bit-aggregate
    "BIT_AND(), BIT_OR(), 和 BIT_XOR() 操作")'
- en: '[Special Handling of Hexadecimal Literals, Bit Literals, and NULL Literals](bit-functions.html#bit-operations-literal-handling
    "Special Handling of Hexadecimal Literals, Bit Literals, and NULL Literals")'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[十六进制文字面量、位文字面量和NULL文字面量的特殊处理](bit-functions.html#bit-operations-literal-handling
    "十六进制文字面量、位文字面量和NULL文字面量的特殊处理")'
- en: '[Bit-Operation Incompatibilities with MySQL 5.7](bit-functions.html#bit-operations-incompatibilities
    "Bit-Operation Incompatibilities with MySQL 5.7")'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[与MySQL 5.7不兼容的位操作](bit-functions.html#bit-operations-incompatibilities "与MySQL
    5.7不兼容的位操作")'
- en: Bit Operations Prior to MySQL 8.0
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL 8.0之前的位操作
- en: 'Bit operations prior to MySQL 8.0 handle only unsigned 64-bit integer argument
    and result values (that is, unsigned [`BIGINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") values).
    Conversion of arguments of other types to [`BIGINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") occurs
    as necessary. Examples:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0之前的位操作仅处理无符号64位整数参数和结果值（即无符号[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") 值）。必要时将其他类型的参数转换为[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")。示例：
- en: 'This statement operates on numeric literals, treated as unsigned 64-bit integers:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此语句操作数字文字面量，将其视为无符号64位整数：
- en: '[PRE7]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This statement performs to-number conversions on the string arguments (`''127''`
    to `127`, and so forth) before performing the same operations as the first statement
    and producing the same results:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行此语句之前，对字符串参数进行了数字转换（例如，`'127'` 转换为 `127`），然后执行与第一个语句相同的操作并产生相同的结果：
- en: '[PRE8]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This statement uses hexadecimal literals for the bit-operation arguments. MySQL
    by default treats hexadecimal literals as binary strings, but in numeric context
    evaluates them as numbers (see [Section 11.1.4, “Hexadecimal Literals”](hexadecimal-literals.html
    "11.1.4 Hexadecimal Literals")). Prior to MySQL 8.0, numeric context includes
    bit operations. Examples:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此语句使用十六进制文字面量作为位操作参数。MySQL默认将十六进制文字面量视为二进制字符串，但在数字上下文中将其评估为数字（参见[第11.1.4节，“十六进制文字面量”](hexadecimal-literals.html
    "11.1.4 十六进制文字面量")）。在MySQL 8.0之前，数字上下文包括位操作。示例：
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Handling of bit-value literals in bit operations is similar to hexadecimal literals
    (that is, as numbers).
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在位操作中处理位值文字面量类似于十六进制文字面量（即作为数字）。
- en: Bit Operations in MySQL 8.0
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL 8.0中的位操作
- en: 'MySQL 8.0 extends bit operations to handle binary string arguments directly
    (without conversion) and produce binary string results. (Arguments that are not
    integers or binary strings are still converted to integers, as before.) This extension
    enhances bit operations in the following ways:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0扩展了位操作，直接处理二进制字符串参数（无需转换）并产生二进制字符串结果。（不是整数或二进制字符串的参数仍然会像以前一样转换为整数。）此扩展以以下方式增强了位操作：
- en: Bit operations become possible on values longer than 64 bits.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以对超过64位的值执行位操作。
- en: It is easier to perform bit operations on values that are more naturally represented
    as binary strings than as integers.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于更自然地表示为二进制字符串而不是整数的值执行位操作更容易。
- en: 'For example, consider UUID values and IPv6 addresses, which have human-readable
    text formats like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑UUID值和IPv6地址，它们具有人类可读的文本格式，如下所示：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It is cumbersome to operate on text strings in those formats. An alternative
    is convert them to fixed-length binary strings without delimiters. [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)
    and [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton) each produce
    a value of data type [`BINARY(16)`](binary-varbinary.html "13.3.3 The BINARY and
    VARBINARY Types"), a binary string 16 bytes (128 bits) long. The following statements
    illustrate this (`HEX()` is used to produce displayable values):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些格式的文本字符串上操作是繁琐的。一个替代方法是将它们转换为没有分隔符的固定长度二进制字符串。[`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)和[`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)分别产生数据类型为[`BINARY(16)`](binary-varbinary.html
    "13.3.3 二进制和VARBINARY类型")的值，一个16字节（128位）长的二进制字符串。以下语句说明了这一点（`HEX()`用于生成可显示的值）：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Those binary values are easily manipulable with bit operations to perform actions
    such as extracting the timestamp from UUID values, or extracting the network and
    host parts of IPv6 addresses. (For examples, see later in this discussion.)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 那些二进制值可以通过位操作轻松操作，执行诸如从UUID值中提取时间戳或从IPv6地址中提取网络和主机部分等操作。（有关示例，请参见本讨论后面。）
- en: 'Arguments that count as binary strings include column values, routine parameters,
    local variables, and user-defined variables that have a binary string type: [`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types"), or one of the [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") types.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 计为二进制字符串的参数包括列值、例程参数、局部变量和具有二进制字符串类型的用户定义变量：[`BINARY`](binary-varbinary.html
    "13.3.3 二进制和VARBINARY类型")、[`VARBINARY`](binary-varbinary.html "13.3.3 二进制和VARBINARY类型")或[`BLOB`](blob.html
    "13.3.4 BLOB和TEXT类型")类型之一。
- en: What about hexadecimal literals and bit literals? Recall that those are binary
    strings by default in MySQL, but numbers in numeric context. How are they handled
    for bit operations in MySQL 8.0? Does MySQL continue to evaluate them in numeric
    context, as is done prior to MySQL 8.0? Or do bit operations evaluate them as
    binary strings, now that binary strings can be handled “natively” without conversion?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 那么十六进制文字和位文字呢？回想一下，在MySQL中，默认情况下这些是二进制字符串，但在数字上下文中是数字。在MySQL 8.0中，它们如何处理用于位操作？MySQL是否继续在数字上下文中评估它们，就像在MySQL
    8.0之前所做的那样？还是位操作现在将它们作为二进制字符串进行评估，因为二进制字符串可以“原生”处理而无需转换？
- en: 'Answer: It has been common to specify arguments to bit operations using hexadecimal
    literals or bit literals with the intent that they represent numbers, so MySQL
    continues to evaluate bit operations in numeric context when all bit arguments
    are hexadecimal or bit literals, for backward compatbility. If you require evaluation
    as binary strings instead, that is easily accomplished: Use the `_binary` introducer
    for at least one literal.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：通常会使用十六进制文字或位文字指定位操作的参数，以表示数字，因此当所有位参数都是十六进制或位文字时，MySQL继续在数字上下文中评估位操作，以保持向后兼容性。如果您需要将其评估为二进制字符串，那很容易实现：至少使用一个文字的`_binary`引入者。
- en: 'These bit operations evaluate the hexadecimal literals and bit literals as
    integers:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些位操作将十六进制文字和位文字作为整数进行评估：
- en: '[PRE12]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'These bit operations evaluate the hexadecimal literals and bit literals as
    binary strings, due to the `_binary` introducer:'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些位操作将十六进制文字和位文字作为二进制字符串进行评估，这是由`_binary`引入者引起的：
- en: '[PRE13]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Although the bit operations in both statements produce a result with a numeric
    value of 65, the second statement operates in binary-string context, for which
    65 is ASCII `A`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管两个语句中的位操作都产生数值为65的结果，但第二个语句在二进制字符串上下文中运行，65在ASCII中是`A`。
- en: 'In numeric evaluation context, permitted values of hexadecimal literal and
    bit literal arguments have a maximum of 64 bits, as do results. By contrast, in
    binary-string evaluation context, permitted arguments (and results) can exceed
    64 bits:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字评估上下文中，十六进制文字和位文字参数的允许值最多为64位，结果也是如此。相比之下，在二进制字符串评估上下文中，允许的参数（和结果）可以超过64位：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There are several ways to refer to a hexadecimal literal or bit literal in
    a bit operation to cause binary-string evaluation:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以引用位操作中的十六进制文字或位文字，以导致二进制字符串评估：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Another way to produce binary-string evaluation of hexadecimal literals or
    bit literals is to assign them to user-defined variables, which results in variables
    that have a binary string type:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 将十六进制文字或位文字分配给用户定义变量是产生二进制字符串评估的另一种方法，这将导致具有二进制字符串类型的变量：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In binary-string context, bitwise operation arguments must have the same length
    or an [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    error occurs:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在二进制字符串上下文中，位操作的参数必须具有相同的长度，否则会出现[`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)错误：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To satisfy the equal-length requirement, pad the shorter value with leading
    zero digits or, if the longer value begins with leading zero digits and a shorter
    result value is acceptable, strip them:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为满足等长要求，使用前导零位填充较短值，或者如果较长值以前导零位开始且可以接受较短结果值，则剥离它们：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Padding or stripping can also be accomplished using functions such as [`LPAD()`](string-functions.html#function_lpad),
    [`RPAD()`](string-functions.html#function_rpad), [`SUBSTR()`](string-functions.html#function_substr),
    or [`CAST()`](cast-functions.html#function_cast). In such cases, the expression
    arguments are no longer all literals and `_binary` becomes unnecessary. Examples:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 填充或剥离也可以使用函数来完成，例如[`LPAD()`](string-functions.html#function_lpad)、[`RPAD()`](string-functions.html#function_rpad)、[`SUBSTR()`](string-functions.html#function_substr)或[`CAST()`](cast-functions.html#function_cast)。在这种情况下，表达式参数不再都是文字，并且`_binary`变得不必要。示例：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Binary String Bit-Operation Examples
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二进制字符串位操作示例
- en: The following example illustrates use of bit operations to extract parts of
    a UUID value, in this case, the timestamp and IEEE 802 node number. This technique
    requires bitmasks for each extracted part.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了使用位操作来提取UUID值的部分，例如时间戳和IEEE 802节点号。此技术需要为每个提取部分准备位掩码。
- en: 'Convert the text UUID to the corresponding 16-byte binary value so that it
    can be manipulated using bit operations in binary-string context:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将文本UUID转换为相应的16字节二进制值，以便在二进制字符串上下文中使用位操作进行操作：
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Construct bitmasks for the timestamp and node number parts of the value. The
    timestamp comprises the first three parts (64 bits, bits 0 to 63) and the node
    number is the last part (48 bits, bits 80 to 127):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为值的时间戳和节点号部分构造位掩码。时间戳包括前三部分（64位，位0到63），节点号是最后一部分（48位，位80到127）：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `CAST(... AS BINARY(16))` function is used here because the masks must
    be the same length as the UUID value against which they are applied. The same
    result can be produced using other functions to pad the masks to the required
    length:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用`CAST(... AS BINARY(16))`函数，因为掩码必须与其应用的UUID值长度相同。可以使用其他函数将掩码填充到所需长度以产生相同的结果：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Use the masks to extract the timestamp and node number parts:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用掩码提取时间戳和节点号部分：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding example uses these bit operations: right shift ([`>>`](bit-functions.html#operator_right-shift))
    and bitwise AND ([`&`](bit-functions.html#operator_bitwise-and)).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例使用了这些位操作：右移（[`>>`](bit-functions.html#operator_right-shift))和按位与（[`&`](bit-functions.html#operator_bitwise-and))。
- en: Note
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin) takes
    a flag that causes some bit rearrangement in the resulting binary UUID value.
    If you use that flag, modify the extraction masks accordingly.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)接受一个标志，导致生成的二进制UUID值中的一些位重新排列。如果使用该标志，请相应修改提取掩码。'
- en: The next example uses bit operations to extract the network and host parts of
    an IPv6 address. Suppose that the network part has a length of 80 bits. Then the
    host part has a length of 128 − 80 = 48 bits. To extract the network and host
    parts of the address, convert it to a binary string, then use bit operations in
    binary-string context.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例使用位操作来提取IPv6地址的网络和主机部分。假设网络部分长度为80位。那么主机部分长度为128 − 80 = 48位。要提取地址的网络和主机部分，将其转换为二进制字符串，然后在二进制字符串上下文中使用位操作。
- en: 'Convert the text IPv6 address to the corresponding binary string:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将文本IPv6地址转换为相应的二进制字符串：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Define the network length in bits:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 定义网络长度（以位为单位）：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Construct network and host masks by shifting the all-ones address left or right.
    To do this, begin with the address `::`, which is shorthand for all zeros, as
    you can see by converting it to a binary string like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将全为1的地址左移或右移来构造网络和主机掩码。为此，从地址`::`开始，这是所有零的简写，可以通过将其转换为二进制字符串来查看：
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To produce the complementary value (all ones), use the [`~`](bit-functions.html#operator_bitwise-invert)
    operator to invert the bits:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成补码值（全为1），使用[`~`](bit-functions.html#operator_bitwise-invert)运算符来反转位：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Shift the all-ones value left or right to produce the network and host masks:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将全为1的值左移或右移以生成网络和主机掩码：
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Display the masks to verify that they cover the correct parts of the address:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 显示掩码以验证其覆盖地址的正确部分：
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Extract and display the network and host parts of the address:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 提取并显示地址的网络部分和主机部分：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The preceding example uses these bit operations: Complement ([`~`](bit-functions.html#operator_bitwise-invert)),
    left shift ([`<<`](bit-functions.html#operator_left-shift)), and bitwise AND ([`&`](bit-functions.html#operator_bitwise-and)).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例使用了这些位操作：补码（[`~`](bit-functions.html#operator_bitwise-invert)）、左移（[`<<`](bit-functions.html#operator_left-shift)）和按位与（[`&`](bit-functions.html#operator_bitwise-and)）。
- en: The remaining discussion provides details on argument handling for each group
    of bit operations, more information about literal-value handling in bit operations,
    and potential incompatibilities between MySQL 8.0 and older MySQL versions.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的讨论提供了每组位操作的参数处理细节，位操作中字面值处理的更多信息，以及 MySQL 8.0 与旧版 MySQL 之间的潜在不兼容性。
- en: Bitwise AND, OR, and XOR Operations
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按位与、或和异或操作
- en: 'For [`&`](bit-functions.html#operator_bitwise-and), [`|`](bit-functions.html#operator_bitwise-or),
    and [`^`](bit-functions.html#operator_bitwise-xor) bit operations, the result
    type depends on whether the arguments are evaluated as binary strings or numbers:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`&`](bit-functions.html#operator_bitwise-and)、[`|`](bit-functions.html#operator_bitwise-or)和[`^`](bit-functions.html#operator_bitwise-xor)位操作，结果类型取决于参数是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the arguments have a binary string type,
    and at least one of them is not a hexadecimal literal, bit literal, or `NULL`
    literal. Numeric evaluation occurs otherwise, with argument conversion to unsigned
    64-bit integers as necessary.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当参数具有二进制字符串类型且至少有一个参数不是十六进制字面值、位字面值或`NULL`字面值时，进行二进制字符串评估。否则进行数值评估，必要时将参数转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    arguments. If the arguments have unequal lengths, an [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    error occurs. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串评估产生与参数相同长度的二进制字符串。如果参数长度不相等，则会出现 [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    错误。数值评估产生一个无符号64位整数。
- en: 'Examples of numeric evaluation:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 数值评估的示例：
- en: '[PRE31]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Examples of binary-string evaluation:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制字符串评估的示例：
- en: '[PRE32]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Bitwise Complement and Shift Operations
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按位补码和移位操作
- en: 'For [`~`](bit-functions.html#operator_bitwise-invert), [`<<`](bit-functions.html#operator_left-shift),
    and [`>>`](bit-functions.html#operator_right-shift) bit operations, the result
    type depends on whether the bit argument is evaluated as a binary string or number:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`~`](bit-functions.html#operator_bitwise-invert)、[`<<`](bit-functions.html#operator_left-shift)和[`>>`](bit-functions.html#operator_right-shift)位操作，结果类型取决于位参数是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the bit argument has a binary string type,
    and is not a hexadecimal literal, bit literal, or `NULL` literal. Numeric evaluation
    occurs otherwise, with argument conversion to an unsigned 64-bit integer as necessary.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当位参数具有二进制字符串类型且不是十六进制字面值、位字面值或`NULL`字面值时，进行二进制字符串评估。否则进行数值评估，必要时将参数转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    bit argument. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串评估产生与位参数相同长度的二进制字符串。数值评估产生一个无符号64位整数。
- en: For shift operations, bits shifted off the end of the value are lost without
    warning, regardless of the argument type. In particular, if the shift count is
    greater or equal to the number of bits in the bit argument, all bits in the result
    are 0.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于移位操作，超出值末尾的位将被丢弃，而不会有警告，无论参数类型如何。特别是，如果移位计数大于或等于位参数中的位数，则结果中的所有位都为 0。
- en: 'Examples of numeric evaluation:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 数值评估的示例：
- en: '[PRE33]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Examples of binary-string evaluation:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制字符串评估的示例：
- en: '[PRE34]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: BIT_COUNT() Operations
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BIT_COUNT() 操作
- en: The [`BIT_COUNT()`](bit-functions.html#function_bit-count) function always returns
    an unsigned 64-bit integer, or `NULL` if the argument is `NULL`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BIT_COUNT()`](bit-functions.html#function_bit-count) 函数始终返回一个无符号64位整数，如果参数为`NULL`，则返回`NULL`。'
- en: '[PRE35]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: BIT_AND(), BIT_OR(), and BIT_XOR() Operations
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BIT_AND()、BIT_OR() 和 BIT_XOR() 操作
- en: 'For the [`BIT_AND()`](aggregate-functions.html#function_bit-and), [`BIT_OR()`](aggregate-functions.html#function_bit-or),
    and [`BIT_XOR()`](aggregate-functions.html#function_bit-xor) bit functions, the
    result type depends on whether the function argument values are evaluated as binary
    strings or numbers:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`BIT_AND()`](aggregate-functions.html#function_bit-and)、[`BIT_OR()`](aggregate-functions.html#function_bit-or)和[`BIT_XOR()`](aggregate-functions.html#function_bit-xor)位函数，结果类型取决于函数参数值是作为二进制字符串还是数字进行评估：
- en: Binary-string evaluation occurs when the argument values have a binary string
    type, and the argument is not a hexadecimal literal, bit literal, or `NULL` literal.
    Numeric evaluation occurs otherwise, with argument value conversion to unsigned
    64-bit integers as necessary.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当参数值具有二进制字符串类型且参数不是十六进制文字、位文字或`NULL`文字时，会发生二进制字符串评估。否则会发生数值评估，必要时将参数值转换为无符号64位整数。
- en: Binary-string evaluation produces a binary string of the same length as the
    argument values. If argument values have unequal lengths, an [`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)
    error occurs. If the argument size exceeds 511 bytes, an [`ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size)
    error occurs. Numeric evaluation produces an unsigned 64-bit integer.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制字符串评估会产生与参数值相同长度的二进制字符串。如果参数值长度不相等，则会出现[`ER_INVALID_BITWISE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_operands_size)错误。如果参数大小超过511字节，则会出现[`ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size)错误。数值评估会产生一个无符号64位整数。
- en: '`NULL` values do not affect the result unless all values are `NULL`. In that
    case, the result is a neutral value having the same length as the length of the
    argument values (all bits 1 for [`BIT_AND()`](aggregate-functions.html#function_bit-and),
    all bits 0 for [`BIT_OR()`](aggregate-functions.html#function_bit-or), and [`BIT_XOR()`](aggregate-functions.html#function_bit-xor)).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`NULL`值不会影响结果，除非所有值都是`NULL`。在这种情况下，结果是一个中性值，其长度与参数值的长度相同（对于[`BIT_AND()`](aggregate-functions.html#function_bit-and)为所有位为1，对于[`BIT_OR()`](aggregate-functions.html#function_bit-or)为所有位为0，以及[`BIT_XOR()`](aggregate-functions.html#function_bit-xor)）。'
- en: 'Example:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE36]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Special Handling of Hexadecimal Literals, Bit Literals, and NULL Literals
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 十六进制文字、位文字和NULL文字的特殊处理
- en: For backward compatibility, MySQL 8.0 evaluates bit operations in numeric context
    when all bit arguments are hexadecimal literals, bit literals, or `NULL` literals.
    That is, bit operations on binary-string bit arguments do not use binary-string
    evaluation if all bit arguments are unadorned hexadecimal literals, bit literals,
    or `NULL` literals. (This does not apply to such literals if they are written
    with a `_binary` introducer, [`BINARY`](cast-functions.html#operator_binary) operator,
    or other way of specifying them explicitly as binary strings.)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，当所有位参数为十六进制文字、位文字或`NULL`文字时，MySQL 8.0会在数值上评估位操作。也就是说，如果所有位参数都是未修饰的十六进制文字、位文字或`NULL`文字，则对二进制字符串位参数的位操作不会使用二进制字符串评估。（如果它们是用`_binary`引导符、[`BINARY`](cast-functions.html#operator_binary)运算符或其他明确指定为二进制字符串的方式写入的，则不适用于这些文字。）
- en: 'The literal handling just described is the same as prior to MySQL 8.0\. Examples:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 刚才描述的文字处理与MySQL 8.0之前的版本相同。例如：
- en: 'These bit operations evaluate the literals in numeric context and produce a
    `BIGINT` result:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些位操作在数值上评估文字并产生一个`BIGINT`结果：
- en: '[PRE37]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'These bit operations evaluate `NULL` in numeric context and produce a `BIGINT`
    result that has a `NULL` value:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些位操作在数值上评估`NULL`并产生一个具有`NULL`值的`BIGINT`结果：
- en: '[PRE38]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In MySQL 8.0, you can cause those operations to evaluate the arguments in binary-string
    context by indicating explicitly that at least one argument is a binary string:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，您可以通过明确指示至少一个参数是二进制字符串来导致这些操作在二进制字符串上下文中评估参数：
- en: '[PRE39]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The result of the last two expressions is `NULL`, just as without the `BINARY`
    operator, but the data type of the result is a binary string type rather than
    an integer type.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两个表达式的结果是`NULL`，就像没有`BINARY`运算符一样，但结果的数据类型是二进制字符串类型而不是整数类型。
- en: Bit-Operation Incompatibilities with MySQL 5.7
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与MySQL 5.7不兼容的位操作
- en: 'Because bit operations can handle binary string arguments natively in MySQL
    8.0, some expressions produce a different result in MySQL 8.0 than in 5.7\. The
    five problematic expression types to watch out for are:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 MySQL 8.0 可以原生处理二进制字符串参数的位操作，一些表达式在 MySQL 8.0 中产生的结果与 5.7 中不同。需要注意的五种问题表达式类型是：
- en: '[PRE40]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Those expressions return [`BIGINT`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") in MySQL
    5.7, binary string in 8.0.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表达式在 MySQL 5.7 中返回[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")，在 8.0 中返回二进制字符串。
- en: 'Explanation of notation:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 符号说明：
- en: '`{ *`op1`* *`op2`* ... }`: List of operators that apply to the given expression
    type.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{ *`op1`* *`op2`* ... }`：适用于给定表达式类型的运算符列表。'
- en: '*`binary`*: Any kind of binary string argument, including a hexadecimal literal,
    bit literal, or `NULL` literal.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`binary`*：任何类型的二进制字符串参数，包括十六进制文字、位文字或`NULL`文字。'
- en: '*`nonliteral_binary`*: An argument that is a binary string value other than
    a hexadecimal literal, bit literal, or `NULL` literal.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`nonliteral_binary`*：一个不是十六进制文字、位文字或`NULL`文字的二进制字符串值的参数。'
- en: '*`AGGR_BIT_FUNC`*: An aggregate function that takes bit-value arguments: [`BIT_AND()`](aggregate-functions.html#function_bit-and),
    [`BIT_OR()`](aggregate-functions.html#function_bit-or), [`BIT_XOR()`](aggregate-functions.html#function_bit-xor).'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`AGGR_BIT_FUNC`*：一个接受位值参数的聚合函数：[`BIT_AND()`](aggregate-functions.html#function_bit-and)，[`BIT_OR()`](aggregate-functions.html#function_bit-or)，[`BIT_XOR()`](aggregate-functions.html#function_bit-xor)。'
- en: For information about how to prepare in MySQL 5.7 for potential incompatibilities
    between MySQL 5.7 and 8.0, see [Bit Functions and Operators](/doc/refman/5.7/en/bit-functions.html),
    in [MySQL 5.7 Reference Manual](/doc/refman/5.7/en/).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何在 MySQL 5.7 中准备可能的 MySQL 5.7 和 8.0 之间不兼容性的信息，请参阅[位函数和运算符](/doc/refman/5.7/en/bit-functions.html)，在[MySQL
    5.7 参考手册](/doc/refman/5.7/en/)中。
