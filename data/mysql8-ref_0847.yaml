- en: 14.17.4 Functions That Modify JSON Values
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.17.4 修改 JSON 值的函数
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html](https://dev.mysql.com/doc/refman/8.0/en/json-modification-functions.html)
- en: The functions in this section modify JSON values and return the result.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的函数修改 JSON 值并返回结果。
- en: '[`JSON_ARRAY_APPEND(*`json_doc`*, *`path`*, *`val`*[, *`path`*, *`val`*] ...)`](json-modification-functions.html#function_json-array-append)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_ARRAY_APPEND(*`json_doc`*, *`path`*, *`val`*[, *`path`*, *`val`*] ...)`](json-modification-functions.html#function_json-array-append)'
- en: Appends values to the end of the indicated arrays within a JSON document and
    returns the result. Returns `NULL` if any argument is `NULL`. An error occurs
    if the *`json_doc`* argument is not a valid JSON document or any *`path`* argument
    is not a valid path expression or contains a `*` or `**` wildcard.
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将值附加到 JSON 文档中指定数组的末尾，并返回结果。如果任何参数为`NULL`，则返回`NULL`。如果*`json_doc`*参数不是有效的 JSON
    文档，或任何*`path`*参数不是有效的路径表达式，或包含`*`或`**`通配符，则会发生错误。
- en: The path-value pairs are evaluated left to right. The document produced by evaluating
    one pair becomes the new value against which the next pair is evaluated.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 路径-值对从左到右进行评估。通过评估一个对产生的文档成为下一个对进行评估的新值。
- en: If a path selects a scalar or object value, that value is autowrapped within
    an array and the new value is added to that array. Pairs for which the path does
    not identify any value in the JSON document are ignored.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果路径选择标量或对象值，则该值会自动包装在数组中，并将新值添加到该数组中。在 JSON 文档中，路径未识别任何值的对将被忽略。
- en: '[PRE0]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In MySQL 5.7, this function was named `JSON_APPEND()`. That name is no longer
    supported in MySQL 8.0.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 5.7 中，此函数的名称为`JSON_APPEND()`。在 MySQL 8.0 中不再支持该名称。
- en: '[`JSON_ARRAY_INSERT(*`json_doc`*, *`path`*, *`val`*[, *`path`*, *`val`*] ...)`](json-modification-functions.html#function_json-array-insert)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_ARRAY_INSERT(*`json_doc`*, *`path`*, *`val`*[, *`path`*, *`val`*] ...)`](json-modification-functions.html#function_json-array-insert)'
- en: Updates a JSON document, inserting into an array within the document and returning
    the modified document. Returns `NULL` if any argument is `NULL`. An error occurs
    if the *`json_doc`* argument is not a valid JSON document or any *`path`* argument
    is not a valid path expression or contains a `*` or `**` wildcard or does not
    end with an array element identifier.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新 JSON 文档，将其插入到文档中的数组中，并返回修改后的文档。如果任何参数为`NULL`，则返回`NULL`。如果*`json_doc`*参数不是有效的
    JSON 文档，或任何*`path`*参数不是有效的路径表达式，或包含`*`或`**`通配符，或不以数组元素标识符结尾，则会发生错误。
- en: The path-value pairs are evaluated left to right. The document produced by evaluating
    one pair becomes the new value against which the next pair is evaluated.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 路径-值对从左到右进行评估。通过评估一个对产生的文档成为下一个对进行评估的新值。
- en: Pairs for which the path does not identify any array in the JSON document are
    ignored. If a path identifies an array element, the corresponding value is inserted
    at that element position, shifting any following values to the right. If a path
    identifies an array position past the end of an array, the value is inserted at
    the end of the array.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于路径未识别 JSON 文档中任何数组的对将被忽略。如果路径标识数组元素，则相应值将插入到该元素位置，将任何后续值向右移动。如果路径标识超出数组末尾的数组位置，则该值将插入到数组末尾。
- en: '[PRE1]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Earlier modifications affect the positions of the following elements in the
    array, so subsequent paths in the same [`JSON_ARRAY_INSERT()`](json-modification-functions.html#function_json-array-insert)
    call should take this into account. In the final example, the second path inserts
    nothing because the path no longer matches anything after the first insert.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 早期的修改会影响数组中后续元素的位置，因此同一[`JSON_ARRAY_INSERT()`](json-modification-functions.html#function_json-array-insert)调用中的后续路径应考虑这一点。在最后一个示例中，第二个路径不插入任何内容，因为在第一次插入后路径不再匹配任何内容。
- en: '[`JSON_INSERT(*`json_doc`*, *`path`*, *`val`*[, *`path`*, *`val`*] ...)`](json-modification-functions.html#function_json-insert)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_INSERT(*`json_doc`*, *`path`*, *`val`*[, *`path`*, *`val`*] ...)`](json-modification-functions.html#function_json-insert)'
- en: Inserts data into a JSON document and returns the result. Returns `NULL` if
    any argument is `NULL`. An error occurs if the *`json_doc`* argument is not a
    valid JSON document or any *`path`* argument is not a valid path expression or
    contains a `*` or `**` wildcard.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将数据插入 JSON 文档并返回结果。如果任何参数为`NULL`，则返回`NULL`。如果*`json_doc`*参数不是有效的 JSON 文档，或任何*`path`*参数不是有效的路径表达式，或包含`*`或`**`通配符，则会发生错误。
- en: The path-value pairs are evaluated left to right. The document produced by evaluating
    one pair becomes the new value against which the next pair is evaluated.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 路径-值对从左到右进行评估。通过评估一个对生成的文档成为下一个对要评估的新值。
- en: 'A path-value pair for an existing path in the document is ignored and does
    not overwrite the existing document value. A path-value pair for a nonexisting
    path in the document adds the value to the document if the path identifies one
    of these types of values:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对文档中现有路径的路径-值对被忽略，不会覆盖现有文档值。对文档中不存在路径的路径-值对，如果路径标识以下类型的值之一，则将该值添加到文档中：
- en: A member not present in an existing object. The member is added to the object
    and associated with the new value.
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不存在于现有对象中的成员。将该成员添加到对象中并与新值关联。
- en: A position past the end of an existing array. The array is extended with the
    new value. If the existing value is not an array, it is autowrapped as an array,
    then extended with the new value.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超出现有数组末尾的位置。数组将使用新值扩展。如果现有值不是数组，则会自动包装为数组，然后使用新值扩展。
- en: Otherwise, a path-value pair for a nonexisting path in the document is ignored
    and has no effect.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则，文档中不存在路径的路径-值对将被忽略且不起作用。
- en: For a comparison of [`JSON_INSERT()`](json-modification-functions.html#function_json-insert),
    [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace), and
    [`JSON_SET()`](json-modification-functions.html#function_json-set), see the discussion
    of [`JSON_SET()`](json-modification-functions.html#function_json-set).
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关[`JSON_INSERT()`](json-modification-functions.html#function_json-insert)、[`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)和[`JSON_SET()`](json-modification-functions.html#function_json-set)的比较，请参见[`JSON_SET()`](json-modification-functions.html#function_json-set)的讨论。
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The third and final value listed in the result is a quoted string and not an
    array like the second one (which is not quoted in the output); no casting of values
    to the JSON type is performed. To insert the array as an array, you must perform
    such casts explicitly, as shown here:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果中列出的第三个和最后一个值是带引号的字符串，而不像第二个值那样是数组（在输出中没有引号）；不执行将值转换为JSON类型的操作。要将数组插入为数组，必须显式执行此类转换，如下所示：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[`JSON_MERGE(*`json_doc`*, *`json_doc`*[, *`json_doc`*] ...)`](json-modification-functions.html#function_json-merge)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_MERGE(*`json_doc`*, *`json_doc`*[, *`json_doc`*] ...)`](json-modification-functions.html#function_json-merge)'
- en: Merges two or more JSON documents. Synonym for `JSON_MERGE_PRESERVE()`; deprecated
    in MySQL 8.0.3 and subject to removal in a future release.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 合并两个或多个JSON文档。`JSON_MERGE_PRESERVE()`的同义词；在MySQL 8.0.3中已弃用，并可能在将来的版本中删除。
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For additional examples, see the entry for [`JSON_MERGE_PRESERVE()`](json-modification-functions.html#function_json-merge-preserve).
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多示例，请参见[`JSON_MERGE_PRESERVE()`](json-modification-functions.html#function_json-merge-preserve)的条目。
- en: '[`JSON_MERGE_PATCH(*`json_doc`*, *`json_doc`*[, *`json_doc`*] ...)`](json-modification-functions.html#function_json-merge-patch)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_MERGE_PATCH(*`json_doc`*, *`json_doc`*[, *`json_doc`*] ...)`](json-modification-functions.html#function_json-merge-patch)'
- en: Performs an [RFC 7396](https://tools.ietf.org/html/rfc7396) compliant merge
    of two or more JSON documents and returns the merged result, without preserving
    members having duplicate keys. Raises an error if at least one of the documents
    passed as arguments to this function is not valid.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行符合[RFC 7396](https://tools.ietf.org/html/rfc7396)的两个或多个JSON文档的合并，并返回合并结果，不保留具有重复键的成员。如果传递给此函数的至少一个文档无效，则会引发错误。
- en: Note
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For an explanation and example of the differences between this function and
    `JSON_MERGE_PRESERVE()`, see [JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE()](json-modification-functions.html#json-merge-patch-json-merge-preserve-compared
    "JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE()").
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关此函数与`JSON_MERGE_PRESERVE()`之间差异的解释和示例，请参见[JSON_MERGE_PATCH()与JSON_MERGE_PRESERVE()的比较](json-modification-functions.html#json-merge-patch-json-merge-preserve-compared
    "JSON_MERGE_PATCH()与JSON_MERGE_PRESERVE()的比较")。
- en: '`JSON_MERGE_PATCH()` performs a merge as follows:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`JSON_MERGE_PATCH()`执行如下合并：'
- en: If the first argument is not an object, the result of the merge is the same
    as if an empty object had been merged with the second argument.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第一个参数不是对象，则合并的结果与将空对象与第二个参数合并的结果相同。
- en: If the second argument is not an object, the result of the merge is the second
    argument.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第二个参数不是对象，则合并的结果是第二个参数。
- en: 'If both arguments are objects, the result of the merge is an object with the
    following members:'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果两个参数都是对象，则合并的结果是具有以下成员的对象：
- en: All members of the first object which do not have a corresponding member with
    the same key in the second object.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个对象中所有没有与第二个对象中具有相同键的成员。
- en: All members of the second object which do not have a corresponding key in the
    first object, and whose value is not the JSON `null` literal.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个对象的所有成员，这些成员在第一个对象中没有相应的键，并且其值不是JSON `null`文字。
- en: All members with a key that exists in both the first and the second object,
    and whose value in the second object is not the JSON `null` literal. The values
    of these members are the results of recursively merging the value in the first
    object with the value in the second object.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有具有在第一个和第二个对象中都存在的键的成员，并且在第二个对象中的值不是JSON `null`文字。这些成员的值是通过递归地将第一个对象中的值与第二个对象中的值合并而得到的结果。
- en: For additional information, see [Normalization, Merging, and Autowrapping of
    JSON Values](json.html#json-normalization "Normalization, Merging, and Autowrapping
    of JSON Values").
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[JSON值的规范化、合并和自动包装](json.html#json-normalization "JSON值的规范化、合并和自动包装")。
- en: '[PRE5]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can use this function to remove a member by specifying `null` as the value
    of the same member in the second argument, as shown here:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用此函数通过在第二个参数中将相同成员的值指定为`null`来删除成员，如下所示：
- en: '[PRE6]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This example shows that the function operates in a recursive fashion; that
    is, values of members are not limited to scalars, but rather can themselves be
    JSON documents:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此示例显示该函数以递归方式运行；即，成员的值不仅限于标量，而是可以是JSON文档本身：
- en: '[PRE7]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`JSON_MERGE_PATCH()` is supported in MySQL 8.0.3 and later.'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`JSON_MERGE_PATCH()`在MySQL 8.0.3及更高版本中受支持。'
- en: '**JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE(). ** The behavior of
    `JSON_MERGE_PATCH()` is the same as that of [`JSON_MERGE_PRESERVE()`](json-modification-functions.html#function_json-merge-preserve),
    with the following two exceptions:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**JSON_MERGE_PATCH()与JSON_MERGE_PRESERVE()的比较。** `JSON_MERGE_PATCH()`的行为与[`JSON_MERGE_PRESERVE()`](json-modification-functions.html#function_json-merge-preserve)相同，但有以下两个例外：'
- en: '`JSON_MERGE_PATCH()` removes any member in the first object with a matching
    key in the second object, provided that the value associated with the key in the
    second object is not JSON `null`.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_MERGE_PATCH()`会删除第一个对象中具有与第二个对象中匹配键的成员，前提是与键相关联的值在第二个对象中不是JSON `null`。'
- en: If the second object has a member with a key matching a member in the first
    object, `JSON_MERGE_PATCH()` *replaces* the value in the first object with the
    value in the second object, whereas `JSON_MERGE_PRESERVE()` *appends* the second
    value to the first value.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果第二个对象具有与第一个对象中的成员匹配的键的成员，`JSON_MERGE_PATCH()`会用第二个对象中的值*替换*第一个对象中的值，而`JSON_MERGE_PRESERVE()`会*附加*第二个值到第一个值。
- en: 'This example compares the results of merging the same 3 JSON objects, each
    having a matching key `"a"`, with each of these two functions:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此示例比较了合并具有匹配键`"a"`的相同3个JSON对象的结果，每个函数都有：
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[`JSON_MERGE_PRESERVE(*`json_doc`*, *`json_doc`*[, *`json_doc`*] ...)`](json-modification-functions.html#function_json-merge-preserve)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_MERGE_PRESERVE(*`json_doc`*, *`json_doc`*[, *`json_doc`*] ...)`](json-modification-functions.html#function_json-merge-preserve)'
- en: Merges two or more JSON documents and returns the merged result. Returns `NULL`
    if any argument is `NULL`. An error occurs if any argument is not a valid JSON
    document.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 合并两个或多个JSON文档并返回合并后的结果。如果任何参数为`NULL`，则返回`NULL`。如果任何参数不是有效的JSON文档，则会发生错误。
- en: Merging takes place according to the following rules. For additional information,
    see [Normalization, Merging, and Autowrapping of JSON Values](json.html#json-normalization
    "Normalization, Merging, and Autowrapping of JSON Values").
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 合并按照以下规则进行。有关更多信息，请参阅[JSON值的规范化、合并和自动包装](json.html#json-normalization "JSON值的规范化、合并和自动包装")。
- en: Adjacent arrays are merged to a single array.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相邻的数组会合并为一个数组。
- en: Adjacent objects are merged to a single object.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相邻的对象会合并为一个对象。
- en: A scalar value is autowrapped as an array and merged as an array.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量值会自动包装为数组并作为数组合并。
- en: An adjacent array and object are merged by autowrapping the object as an array
    and merging the two arrays.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将对象自动包装为数组并合并两个数组，可以合并相邻的数组和对象。
- en: '[PRE9]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This function was added in MySQL 8.0.3 as a synonym for [`JSON_MERGE()`](json-modification-functions.html#function_json-merge).
    The `JSON_MERGE()` function is now deprecated, and is subject to removal in a
    future release of MySQL.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数在MySQL 8.0.3中作为[`JSON_MERGE()`](json-modification-functions.html#function_json-merge)的同义词添加。`JSON_MERGE()`函数现已弃用，并可能在将来的MySQL版本中被移除。
- en: This function is similar to but differs from [`JSON_MERGE_PATCH()`](json-modification-functions.html#function_json-merge-patch)
    in significant respects; see [JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE()](json-modification-functions.html#json-merge-patch-json-merge-preserve-compared
    "JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE()"), for more information.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数与 [`JSON_MERGE_PATCH()`](json-modification-functions.html#function_json-merge-patch)
    在重要方面类似但不同；有关更多信息，请参阅 [JSON_MERGE_PATCH() 与 JSON_MERGE_PRESERVE() 的比较](json-modification-functions.html#json-merge-patch-json-merge-preserve-compared
    "JSON_MERGE_PATCH() 与 JSON_MERGE_PRESERVE() 的比较")。
- en: '[`JSON_REMOVE(*`json_doc`*, *`path`*[, *`path`*] ...)`](json-modification-functions.html#function_json-remove)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_REMOVE(*`json_doc`*, *`path`*[, *`path`*] ...)`](json-modification-functions.html#function_json-remove)'
- en: Removes data from a JSON document and returns the result. Returns `NULL` if
    any argument is `NULL`. An error occurs if the *`json_doc`* argument is not a
    valid JSON document or any *`path`* argument is not a valid path expression or
    is `$` or contains a `*` or `**` wildcard.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 JSON 文档中移除数据并返回结果。如果任何参数为 `NULL`，则返回 `NULL`。如果 *`json_doc`* 参数不是有效的 JSON 文档，或任何
    *`path`* 参数不是有效的路径表达式，或包含 `$`，或包含 `*` 或 `**` 通配符，则会发生错误。
- en: The *`path`* arguments are evaluated left to right. The document produced by
    evaluating one path becomes the new value against which the next path is evaluated.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`path`* 参数从左到右进行评估。通过评估一个路径，生成的文档成为下一个路径要评估的新值。'
- en: It is not an error if the element to be removed does not exist in the document;
    in that case, the path does not affect the document.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果要移除的元素在文档中不存在，不会出错；在这种情况下，路径不会影响文档。
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[`JSON_REPLACE(*`json_doc`*, *`path`*, *`val`*[, *`path`*, *`val`*] ...)`](json-modification-functions.html#function_json-replace)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_REPLACE(*`json_doc`*, *`path`*, *`val`*[, *`path`*, *`val`*] ...)`](json-modification-functions.html#function_json-replace)'
- en: Replaces existing values in a JSON document and returns the result. Returns
    `NULL` if any argument is `NULL`. An error occurs if the *`json_doc`* argument
    is not a valid JSON document or any *`path`* argument is not a valid path expression
    or contains a `*` or `**` wildcard.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 替换 JSON 文档中的现有值并返回结果。如果任何参数为 `NULL`，则返回 `NULL`。如果 *`json_doc`* 参数不是有效的 JSON
    文档，或任何 *`path`* 参数不是有效的路径表达式，或包含 `*` 或 `**` 通配符，则会发生错误。
- en: The path-value pairs are evaluated left to right. The document produced by evaluating
    one pair becomes the new value against which the next pair is evaluated.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 路径-值对从左到右进行评估。通过评估一个对，生成的文档成为下一个对要评估的新值。
- en: A path-value pair for an existing path in the document overwrites the existing
    document value with the new value. A path-value pair for a nonexisting path in
    the document is ignored and has no effect.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于文档中现有路径的路径-值对，将现有文档值覆盖为新值。对于文档中不存在的路径的路径-值对，将被忽略且不起作用。
- en: In MySQL 8.0.4, the optimizer can perform a partial, in-place update of a `JSON`
    column instead of removing the old document and writing the new document in its
    entirety to the column. This optimization can be performed for an update statement
    that uses the [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)
    function and meets the conditions outlined in [Partial Updates of JSON Values](json.html#json-partial-updates
    "Partial Updates of JSON Values").
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.4 中，优化器可以对 `JSON` 列执行部分、原地更新，而不是删除旧文档并将新文档完全写入列中。这种优化可以用于使用 [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)
    函数的更新语句，并满足 [JSON 值的部分更新](json.html#json-partial-updates "JSON 值的部分更新") 中概述的条件。
- en: For a comparison of [`JSON_INSERT()`](json-modification-functions.html#function_json-insert),
    [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace), and
    [`JSON_SET()`](json-modification-functions.html#function_json-set), see the discussion
    of [`JSON_SET()`](json-modification-functions.html#function_json-set).
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 比较 [`JSON_INSERT()`](json-modification-functions.html#function_json-insert)、[`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)
    和 [`JSON_SET()`](json-modification-functions.html#function_json-set)，请参阅 [`JSON_SET()`](json-modification-functions.html#function_json-set)
    的讨论。
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[`JSON_SET(*`json_doc`*, *`path`*, *`val`*[, *`path`*, *`val`*] ...)`](json-modification-functions.html#function_json-set)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_SET(*`json_doc`*, *`path`*, *`val`*[, *`path`*, *`val`*] ...)`](json-modification-functions.html#function_json-set)'
- en: Inserts or updates data in a JSON document and returns the result. Returns `NULL`
    if *`json_doc`* or *`path`* is `NULL`, or if *`path`*, when given, does not locate
    an object. Otherwise, an error occurs if the *`json_doc`* argument is not a valid
    JSON document or any *`path`* argument is not a valid path expression or contains
    a `*` or `**` wildcard.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 JSON 文档中插入或更新数据并返回结果。如果 *`json_doc`* 或 *`path`* 为 `NULL`，或者给定 *`path`* 时未定位到对象，则返回
    `NULL`。否则，如果 *`json_doc`* 参数不是有效的 JSON 文档，或任何 *`path`* 参数不是有效的路径表达式或包含 `*` 或 `**`
    通配符，则会发生错误。
- en: The path-value pairs are evaluated left to right. The document produced by evaluating
    one pair becomes the new value against which the next pair is evaluated.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 路径-值对从左到右进行评估。通过评估一个对产生的文档成为下一个对进行评估的新值。
- en: 'A path-value pair for an existing path in the document overwrites the existing
    document value with the new value. A path-value pair for a nonexisting path in
    the document adds the value to the document if the path identifies one of these
    types of values:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档中现有路径的路径-值对将使用新值覆盖现有文档值。文档中不存在的路径的路径-值对将在路径标识以下类型值之一时将值添加到文档中：
- en: A member not present in an existing object. The member is added to the object
    and associated with the new value.
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个不在现有对象中的成员。该成员将添加到对象中并与新值关联。
- en: A position past the end of an existing array. The array is extended with the
    new value. If the existing value is not an array, it is autowrapped as an array,
    then extended with the new value.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超出现有数组末尾的位置。数组将使用新值扩展。如果现有值不是数组，则会自动包装为数组，然后使用新值扩展。
- en: Otherwise, a path-value pair for a nonexisting path in the document is ignored
    and has no effect.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则，文档中不存在的路径的路径-值对将被忽略且不起作用。
- en: In MySQL 8.0.4, the optimizer can perform a partial, in-place update of a `JSON`
    column instead of removing the old document and writing the new document in its
    entirety to the column. This optimization can be performed for an update statement
    that uses the [`JSON_SET()`](json-modification-functions.html#function_json-set)
    function and meets the conditions outlined in [Partial Updates of JSON Values](json.html#json-partial-updates
    "Partial Updates of JSON Values").
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.4 中，优化器可以对 `JSON` 列执行部分、原地更新，而不是将旧文档删除并完整地写入新文档到列中。这种优化可以用于使用 [`JSON_SET()`](json-modification-functions.html#function_json-set)
    函数的更新语句，并满足 [JSON 值的部分更新](json.html#json-partial-updates "JSON 值的部分更新") 中概述的条件。
- en: 'The [`JSON_SET()`](json-modification-functions.html#function_json-set), [`JSON_INSERT()`](json-modification-functions.html#function_json-insert),
    and [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)
    functions are related:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`JSON_SET()`](json-modification-functions.html#function_json-set)、[`JSON_INSERT()`](json-modification-functions.html#function_json-insert)
    和 [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace) 函数相关联：'
- en: '[`JSON_SET()`](json-modification-functions.html#function_json-set) replaces
    existing values and adds nonexisting values.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_SET()`](json-modification-functions.html#function_json-set) 替换现有值并添加不存在的值。'
- en: '[`JSON_INSERT()`](json-modification-functions.html#function_json-insert) inserts
    values without replacing existing values.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_INSERT()`](json-modification-functions.html#function_json-insert) 插入值而不替换现有值。'
- en: '[`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)
    replaces *only* existing values.'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)
    *仅* 替换现有值。'
- en: 'The following examples illustrate these differences, using one path that does
    exist in the document (`$.a`) and another that does not exist (`$.c`):'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下示例说明了这些差异，使用一个存在于文档中的路径 (`$.a`) 和另一个不存在的路径 (`$.c`)：
- en: '[PRE12]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[`JSON_UNQUOTE(*`json_val`*)`](json-modification-functions.html#function_json-unquote)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_UNQUOTE(*`json_val`*)`](json-modification-functions.html#function_json-unquote)'
- en: Unquotes JSON value and returns the result as a `utf8mb4` string. Returns `NULL`
    if the argument is `NULL`. An error occurs if the value starts and ends with double
    quotes but is not a valid JSON string literal.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 取消 JSON 值的引号并将结果作为 `utf8mb4` 字符串返回。如果参数为 `NULL`，则返回 `NULL`。如果值以双引号开头和结尾但不是有效的
    JSON 字符串文字，则会发生错误。
- en: Within a string, certain sequences have special meaning unless the [`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL mode is enabled. Each of these sequences begins with a backslash (`\`), known
    as the *escape character*. MySQL recognizes the escape sequences shown in [Table 14.23,
    “JSON_UNQUOTE() Special Character Escape Sequences”](json-modification-functions.html#json-unquote-character-escape-sequences
    "Table 14.23 JSON_UNQUOTE() Special Character Escape Sequences"). For all other
    escape sequences, backslash is ignored. That is, the escaped character is interpreted
    as if it was not escaped. For example, `\x` is just `x`. These sequences are case-sensitive.
    For example, `\b` is interpreted as a backspace, but `\B` is interpreted as `B`.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在字符串中，除非启用了[`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL 模式，否则某些序列具有特殊含义。每个序列都以反斜杠（`\`）开头，称为*转义字符*。MySQL识别[表格 14.23, “JSON_UNQUOTE()
    特殊字符转义序列”](json-modification-functions.html#json-unquote-character-escape-sequences
    "表格 14.23 JSON_UNQUOTE() 特殊字符转义序列")中显示的转义序列。对于所有其他转义序列，反斜杠将被忽略。也就是说，转义字符将被解释为未转义的字符。例如，`\x`
    就是 `x`。这些序列是区分大小写的。例如，`\b` 被解释为退格，但 `\B` 被解释为 `B`。
- en: '**Table 14.23 JSON_UNQUOTE() Special Character Escape Sequences**'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**表格 14.23 JSON_UNQUOTE() 特殊字符转义序列**'
- en: '| Escape Sequence | Character Represented by Sequence |'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 转义序列 | 序列表示的字符 |'
- en: '| `\"` | A double quote (`"`) character |'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\"` | 双引号（`"`）字符 |'
- en: '| `\b` | A backspace character |'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\b` | 退格字符 |'
- en: '| `\f` | A formfeed character |'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\f` | 换页字符 |'
- en: '| `\n` | A newline (linefeed) character |'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\n` | 换行（换行）字符 |'
- en: '| `\r` | A carriage return character |'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\r` | 回车字符 |'
- en: '| `\t` | A tab character |'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\t` | 制表符 |'
- en: '| `\\` | A backslash (`\`) character |'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\\` | 反斜杠（`\`）字符 |'
- en: '| `\u*`XXXX`*` | UTF-8 bytes for Unicode value *`XXXX`* |'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `\u*`XXXX`*` | Unicode 值 *`XXXX`* 的 UTF-8 字节 |'
- en: 'Two simple examples of the use of this function are shown here:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数的两个简单示例如下所示：
- en: '[PRE13]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following set of examples shows how `JSON_UNQUOTE` handles escapes with
    [`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes) disabled
    and enabled:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下一组示例展示了`JSON_UNQUOTE`如何处理启用和禁用[`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)时的转义：
- en: '[PRE14]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
