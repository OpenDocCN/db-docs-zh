- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-waits-current-table.html](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-waits-current-table.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-waits-current-table.html](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-waits-current-table.html)
- en: 29.12.4.1 The events_waits_current Table
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 29.12.4.1 events_waits_current 表
- en: The [`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table") table contains current wait events.
    The table stores one row per thread showing the current status of the thread's
    most recent monitored wait event, so there is no system variable for configuring
    the table size.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 events_waits_current 表") 表包含当前的等待事件。该表为每个线程存储一行，显示线程最近监视等待事件的当前状态，因此没有用于配置表大小的系统变量。'
- en: Of the tables that contain wait event rows, [`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table") is the most fundamental. Other tables
    that contain wait event rows are logically derived from the current events. For
    example, the [`events_waits_history`](performance-schema-events-waits-history-table.html
    "29.12.4.2 The events_waits_history Table") and [`events_waits_history_long`](performance-schema-events-waits-history-long-table.html
    "29.12.4.3 The events_waits_history_long Table") tables are collections of the
    most recent wait events that have ended, up to a maximum number of rows per thread
    and globally across all threads, respectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含等待事件行的表中，[`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 events_waits_current 表") 是最基本的。其他包含等待事件行的表从当前事件中逻辑派生。例如，[`events_waits_history`](performance-schema-events-waits-history-table.html
    "29.12.4.2 events_waits_history 表") 和 [`events_waits_history_long`](performance-schema-events-waits-history-long-table.html
    "29.12.4.3 events_waits_history_long 表") 表是最近已结束的等待事件的集合，每个线程和全局跨所有线程的最大行数。
- en: For more information about the relationship between the three wait event tables,
    see [Section 29.9, “Performance Schema Tables for Current and Historical Events”](performance-schema-event-tables.html
    "29.9 Performance Schema Tables for Current and Historical Events").
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有关三个等待事件表之间关系的更多信息，请参见 [Section 29.9, “Performance Schema Tables for Current
    and Historical Events”](performance-schema-event-tables.html "29.9 Performance
    Schema Tables for Current and Historical Events")。
- en: For information about configuring whether to collect wait events, see [Section 29.12.4,
    “Performance Schema Wait Event Tables”](performance-schema-wait-tables.html "29.12.4 Performance
    Schema Wait Event Tables").
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置是否收集等待事件的信息，请参见 [Section 29.12.4, “Performance Schema Wait Event Tables”](performance-schema-wait-tables.html
    "29.12.4 Performance Schema Wait Event Tables")。
- en: 'The [`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table") table has these columns:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 events_waits_current 表") 表具有以下列：'
- en: '`THREAD_ID`, `EVENT_ID`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREAD_ID`, `EVENT_ID`'
- en: The thread associated with the event and the thread current event number when
    the event starts. The `THREAD_ID` and `EVENT_ID` values taken together uniquely
    identify the row. No two rows have the same pair of values.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与事件相关联的线程以及事件开始时的线程当前事件编号。`THREAD_ID` 和 `EVENT_ID` 值一起唯一标识行。没有两行具有相同的值对。
- en: '`END_EVENT_ID`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`END_EVENT_ID`'
- en: This column is set to `NULL` when the event starts and updated to the thread
    current event number when the event ends.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当事件开始时，此列设置为 `NULL`，并在事件结束时更新为线程当前事件编号。
- en: '`EVENT_NAME`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EVENT_NAME`'
- en: The name of the instrument that produced the event. This is a `NAME` value from
    the [`setup_instruments`](performance-schema-setup-instruments-table.html "29.12.2.3 The
    setup_instruments Table") table. Instrument names may have multiple parts and
    form a hierarchy, as discussed in [Section 29.6, “Performance Schema Instrument
    Naming Conventions”](performance-schema-instrument-naming.html "29.6 Performance
    Schema Instrument Naming Conventions").
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 产生事件的工具的名称。这是来自 [`setup_instruments`](performance-schema-setup-instruments-table.html
    "29.12.2.3 setup_instruments 表") 表的 `NAME` 值。工具名称可能有多个部分并形成层次结构，如 [Section 29.6,
    “Performance Schema Instrument Naming Conventions”](performance-schema-instrument-naming.html
    "29.6 Performance Schema Instrument Naming Conventions") 中所讨论的。
- en: '`SOURCE`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOURCE`'
- en: The name of the source file containing the instrumented code that produced the
    event and the line number in the file at which the instrumentation occurs. This
    enables you to check the source to determine exactly what code is involved. For
    example, if a mutex or lock is being blocked, you can check the context in which
    this occurs.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含产生事件的有仪器代码的源文件的名称和仪器发生的文件中的行号。这使您可以检查源代码以确定涉及的确切代码。例如，如果互斥锁或锁被阻塞，您可以检查发生这种情况的上下文。
- en: '`TIMER_START`, `TIMER_END`, `TIMER_WAIT`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMER_START`，`TIMER_END`，`TIMER_WAIT`'
- en: Timing information for the event. The unit for these values is picoseconds (trillionths
    of a second). The `TIMER_START` and `TIMER_END` values indicate when event timing
    started and ended. `TIMER_WAIT` is the event elapsed time (duration).
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事件的时间信息。这些值的单位是皮秒（万亿分之一秒）。`TIMER_START`和`TIMER_END`值表示事件计时开始和结束的时间。`TIMER_WAIT`是事件经过的时间（持续时间）。
- en: If an event has not finished, `TIMER_END` is the current timer value and `TIMER_WAIT`
    is the time elapsed so far (`TIMER_END` − `TIMER_START`).
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事件尚未完成，`TIMER_END`是当前计时器值，`TIMER_WAIT`是到目前为止经过的时间（`TIMER_END` − `TIMER_START`）。
- en: If an event is produced from an instrument that has `TIMED = NO`, timing information
    is not collected, and `TIMER_START`, `TIMER_END`, and `TIMER_WAIT` are all `NULL`.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事件来自具有`TIMED = NO`的工具，将不会收集时间信息，`TIMER_START`，`TIMER_END`和`TIMER_WAIT`都为`NULL`。
- en: For discussion of picoseconds as the unit for event times and factors that affect
    time values, see [Section 29.4.1, “Performance Schema Event Timing”](performance-schema-timing.html
    "29.4.1 Performance Schema Event Timing").
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关以皮秒为事件时间单位和影响时间值的因素的讨论，请参阅[Section 29.4.1, “Performance Schema Event Timing”](performance-schema-timing.html
    "29.4.1 Performance Schema Event Timing")。
- en: '`SPINS`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SPINS`'
- en: For a mutex, the number of spin rounds. If the value is `NULL`, the code does
    not use spin rounds or spinning is not instrumented.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于互斥锁，自旋轮数。如果值为`NULL`，则代码不使用自旋轮数或自旋未被记录。
- en: '`OBJECT_SCHEMA`, `OBJECT_NAME`, `OBJECT_TYPE`, `OBJECT_INSTANCE_BEGIN`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_SCHEMA`，`OBJECT_NAME`，`OBJECT_TYPE`，`OBJECT_INSTANCE_BEGIN`'
- en: These columns identify the object “being acted on.” What that means depends
    on the object type.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些列标识了“被操作的”对象。具体含义取决于对象类型。
- en: 'For a synchronization object (`cond`, `mutex`, `rwlock`):'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于一个同步对象（`cond`，`mutex`，`rwlock`）：
- en: '`OBJECT_SCHEMA`, `OBJECT_NAME`, and `OBJECT_TYPE` are `NULL`.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_SCHEMA`，`OBJECT_NAME`和`OBJECT_TYPE`为`NULL`。'
- en: '`OBJECT_INSTANCE_BEGIN` is the address of the synchronization object in memory.'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_INSTANCE_BEGIN`是内存中同步对象的地址。'
- en: 'For a file I/O object:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于文件I/O对象：
- en: '`OBJECT_SCHEMA` is `NULL`.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_SCHEMA`为`NULL`。'
- en: '`OBJECT_NAME` is the file name.'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_NAME`是文件名。'
- en: '`OBJECT_TYPE` is `FILE`.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_TYPE`为`FILE`。'
- en: '`OBJECT_INSTANCE_BEGIN` is an address in memory.'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_INSTANCE_BEGIN`是内存中的地址。'
- en: 'For a socket object:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于套接字对象：
- en: '`OBJECT_NAME` is the `IP:PORT` value for the socket.'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_NAME`是套接字的`IP:PORT`值。'
- en: '`OBJECT_INSTANCE_BEGIN` is an address in memory.'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_INSTANCE_BEGIN`是内存中的地址。'
- en: 'For a table I/O object:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于表I/O对象：
- en: '`OBJECT_SCHEMA` is the name of the schema that contains the table.'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_SCHEMA`是包含表的模式的名称。'
- en: '`OBJECT_NAME` is the table name.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_NAME`是表名。'
- en: '`OBJECT_TYPE` is `TABLE` for a persistent base table or `TEMPORARY TABLE` for
    a temporary table.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于持久基表的`OBJECT_TYPE`为`TABLE`或临时表的`OBJECT_TYPE`为`TEMPORARY TABLE`。
- en: '`OBJECT_INSTANCE_BEGIN` is an address in memory.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_INSTANCE_BEGIN`是内存中的地址。'
- en: An `OBJECT_INSTANCE_BEGIN` value itself has no meaning, except that different
    values indicate different objects. `OBJECT_INSTANCE_BEGIN` can be used for debugging.
    For example, it can be used with `GROUP BY OBJECT_INSTANCE_BEGIN` to see whether
    the load on 1,000 mutexes (that protect, say, 1,000 pages or blocks of data) is
    spread evenly or just hitting a few bottlenecks. This can help you correlate with
    other sources of information if you see the same object address in a log file
    or another debugging or performance tool.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`OBJECT_INSTANCE_BEGIN`值本身没有意义，除非不同的值表示不同的对象。`OBJECT_INSTANCE_BEGIN`可用于调试。例如，可以与`GROUP
    BY OBJECT_INSTANCE_BEGIN`一起使用，以查看对1,000个互斥锁（保护1,000个页面或数据块）的负载是否均匀分布或只是击中了一些瓶颈。如果在日志文件或其他调试或性能工具中看到相同的对象地址，这可以帮助您与其他信息源进行关联。'
- en: '`INDEX_NAME`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INDEX_NAME`'
- en: The name of the index used. `PRIMARY` indicates the table primary index. `NULL`
    means that no index was used.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用的索引名称。`PRIMARY`表示表的主索引。`NULL`表示未使用索引。
- en: '`NESTING_EVENT_ID`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NESTING_EVENT_ID`'
- en: The `EVENT_ID` value of the event within which this event is nested.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此事件嵌套在其中的事件的`EVENT_ID`值。
- en: '`NESTING_EVENT_TYPE`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NESTING_EVENT_TYPE`'
- en: The nesting event type. The value is `TRANSACTION`, `STATEMENT`, `STAGE`, or
    `WAIT`.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 嵌套事件类型。值为`TRANSACTION`，`STATEMENT`，`STAGE`或`WAIT`。
- en: '`OPERATION`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPERATION`'
- en: The type of operation performed, such as `lock`, `read`, or `write`.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行的操作类型，例如`lock`，`read`或`write`。
- en: '`NUMBER_OF_BYTES`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NUMBER_OF_BYTES`'
- en: The number of bytes read or written by the operation. For table I/O waits (events
    for the `wait/io/table/sql/handler` instrument), `NUMBER_OF_BYTES` indicates the
    number of rows. If the value is greater than 1, the event is for a batch I/O operation.
    The following discussion describes the difference between exclusively single-row
    reporting and reporting that reflects batch I/O.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 操作读取或写入的字节数。对于表I/O等待（`wait/io/table/sql/handler`工具的事件），`NUMBER_OF_BYTES`表示行数。如果值大于1，则该事件是批量I/O操作。以下讨论描述了独占单行报告和反映批量I/O的报告之间的区别。
- en: 'MySQL executes joins using a nested-loop implementation. The job of the Performance
    Schema instrumentation is to provide row count and accumulated execution time
    per table in the join. Assume a join query of the following form that is executed
    using a table join order of `t1`, `t2`, `t3`:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL使用嵌套循环实现连接。性能模式仪表化的工作是为连接中的每个表提供行数和累积执行时间。假设执行以下形式的连接查询，使用表连接顺序为`t1`，`t2`，`t3`：
- en: '[PRE0]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Table “fanout” is the increase or decrease in number of rows from adding a
    table during join processing. If the fanout for table `t3` is greater than 1,
    the majority of row-fetch operations are for that table. Suppose that the join
    accesses 10 rows from `t1`, 20 rows from `t2` per row from `t1`, and 30 rows from
    `t3` per row of table `t2`. With single-row reporting, the total number of instrumented
    operations is:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表“扇出”是在连接处理过程中添加表后行数增加或减少的情况。如果表`t3`的扇出大于1，则大部分行提取操作是针对该表的。假设连接从`t1`提取10行，从`t2`每行`t1`提取20行，从`t3`每行`t2`提取30行。使用单行报告，总仪表化操作数为：
- en: '[PRE1]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A significant reduction in the number of instrumented operations is achievable
    by aggregating them per scan (that is, per unique combination of rows from `t1`
    and `t2`). With batch I/O reporting, the Performance Schema produces an event
    for each scan of the innermost table `t3` rather than for each row, and the number
    of instrumented row operations reduces to:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过按扫描（即从`t1`和`t2`的唯一组合）对其进行聚合，可以显著减少仪表化操作的数量。使用批量I/O报告，性能模式为内部表`t3`的每次扫描产生一个事件，而不是每行，仪表化行操作数量减少为：
- en: '[PRE2]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That is a reduction of 93%, illustrating how the batch-reporting strategy significantly
    reduces Performance Schema overhead for table I/O by reducing the number of reporting
    calls. The tradeoff is lesser accuracy for event timing. Rather than time for
    an individual row operation as in per-row reporting, timing for batch I/O includes
    time spent for operations such as join buffering, aggregation, and returning rows
    to the client.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是93%的减少，说明批量报告策略通过减少报告调用的数量显著减少了表I/O的性能模式开销。权衡是事件定时的准确性较低。与每行报告中的单行操作的时间不同，批量I/O的时间包括用于操作的时间，例如连接缓冲，聚合和将行返回给客户端的时间。
- en: 'For batch I/O reporting to occur, these conditions must be true:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要发生批量I/O报告，必须满足以下条件：
- en: Query execution accesses the innermost table of a query block (for a single-table
    query, that table counts as innermost)
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询执行访问查询块的最内部表（对于单表查询，该表计为最内部）
- en: Query execution does not request a single row from the table (so, for example,
    [`eq_ref`](explain-output.html#jointype_eq_ref) access prevents use of batch reporting)
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询执行不会从表中请求单行（因此，例如，[`eq_ref`](explain-output.html#jointype_eq_ref)访问会阻止批量报告的使用）
- en: Query execution does not evaluate a subquery containing table access for the
    table
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询执行不会评估包含表访问的子查询的表
- en: '`FLAGS`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FLAGS`'
- en: Reserved for future use.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保留供将来使用。
- en: 'The [`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table") table has these indexes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 events_waits_current表")表具有以下索引：'
- en: Primary key on (`THREAD_ID`, `EVENT_ID`)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主键为（`THREAD_ID`，`EVENT_ID`）
- en: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    is permitted for the [`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 The events_waits_current Table") table. It removes the rows.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 允许对[`events_waits_current`](performance-schema-events-waits-current-table.html
    "29.12.4.1 events_waits_current表")表进行[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE语句")。它会删除行。
