- en: 13.1.1 Numeric Data Type Syntax
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.1.1 数字数据类型语法
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html](https://dev.mysql.com/doc/refman/8.0/en/numeric-type-syntax.html)
- en: For integer data types, *`M`* indicates the minimum display width. The maximum
    display width is 255. Display width is unrelated to the range of values a type
    can store, as described in [Section 13.1.6, “Numeric Type Attributes”](numeric-type-attributes.html
    "13.1.6 Numeric Type Attributes").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于整数数据类型，*`M`* 表示最小显示宽度。最大显示宽度为 255。显示宽度与类型可以存储的值范围无关，如 [第 13.1.6 节，“数字类型属性”](numeric-type-attributes.html
    "13.1.6 数字类型属性") 中所述。
- en: For floating-point and fixed-point data types, *`M`* is the total number of
    digits that can be stored.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于浮点和定点数据类型，*`M`* 是可以存储的总位数。
- en: As of MySQL 8.0.17, the display width attribute is deprecated for integer data
    types; you should expect support for it to be removed in a future version of MySQL.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.17 版本，整数数据类型的显示宽度属性已被弃用；您应该预期在未来的 MySQL 版本中将其移除。
- en: If you specify `ZEROFILL` for a numeric column, MySQL automatically adds the
    `UNSIGNED` attribute to the column.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为数字列指定了 `ZEROFILL`，MySQL 会自动向列添加 `UNSIGNED` 属性。
- en: As of MySQL 8.0.17, the `ZEROFILL` attribute is deprecated for numeric data
    types; you should expect support for it to be removed in a future version of MySQL.
    Consider using an alternative means of producing the effect of this attribute.
    For example, applications could use the [`LPAD()`](string-functions.html#function_lpad)
    function to zero-pad numbers up to the desired width, or they could store the
    formatted numbers in [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") columns.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.17 版本，`ZEROFILL` 属性对于数字数据类型已被弃用；您应该预期在未来的 MySQL 版本中将其移除。考虑使用其他方法来产生此属性的效果。例如，应用程序可以使用
    [`LPAD()`](string-functions.html#function_lpad) 函数将数字零填充到所需宽度，或者它们可以将格式化的数字存储在
    [`CHAR`](char.html "13.3.2 CHAR 和 VARCHAR 类型") 列中。
- en: Numeric data types that permit the `UNSIGNED` attribute also permit `SIGNED`.
    However, these data types are signed by default, so the `SIGNED` attribute has
    no effect.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 允许 `UNSIGNED` 属性的数字数据类型也允许 `SIGNED`。但是，这些数据类型默认为有符号，因此 `SIGNED` 属性没有效果。
- en: As of MySQL 8.0.17, the `UNSIGNED` attribute is deprecated for columns of type
    [`FLOAT`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE"), [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE"), and [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") (and any synonyms);
    you should expect support for it to be removed in a future version of MySQL. Consider
    using a simple `CHECK` constraint instead for such columns.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.17 版本，`UNSIGNED` 属性对于 [`FLOAT`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")、[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT,
    DOUBLE") 和 [`DECIMAL`](fixed-point-types.html "13.1.3 定点类型（精确值） - DECIMAL, NUMERIC")（以及任何同义词）列已被弃用；您应该预期在未来的
    MySQL 版本中将其移除。考虑为这些列使用简单的 `CHECK` 约束代替。
- en: '`SERIAL` is an alias for `BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`SERIAL` 是 `BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE` 的别名。'
- en: '`SERIAL DEFAULT VALUE` in the definition of an integer column is an alias for
    `NOT NULL AUTO_INCREMENT UNIQUE`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在整数列的定义中，`SERIAL DEFAULT VALUE` 是 `NOT NULL AUTO_INCREMENT UNIQUE` 的别名。
- en: Warning
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When you use subtraction between integer values where one is of type `UNSIGNED`,
    the result is unsigned unless the [`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    SQL mode is enabled. See [Section 14.10, “Cast Functions and Operators”](cast-functions.html
    "14.10 Cast Functions and Operators").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在一个类型为 `UNSIGNED` 的整数值之间进行减法运算时，结果是无符号的，除非启用了 [`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    SQL 模式。参见 [第 14.10 节，“转换函数和运算符”](cast-functions.html "14.10 转换函数和运算符")。
- en: '[`BIT[(*`M`*)]`](bit-type.html "13.1.5 Bit-Value Type - BIT")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIT[(*`M`*)]`](bit-type.html "13.1.5 位值类型 - BIT")'
- en: A bit-value type. *`M`* indicates the number of bits per value, from 1 to 64\.
    The default is 1 if *`M`* is omitted.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 位值类型。*`M`* 表示每个值的位数，从 1 到 64。如果省略 *`M`*，默认值为 1。
- en: '[`TINYINT[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TINYINT[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
- en: A very small integer. The signed range is `-128` to `127`. The unsigned range
    is `0` to `255`.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非常小的整数。有符号范围为 `-128` 到 `127`。无符号范围为 `0` 到 `255`。
- en: '[`BOOL`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`BOOLEAN`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BOOL`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT,
    MEDIUMINT, BIGINT"), [`BOOLEAN`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
- en: 'These types are synonyms for [`TINYINT(1)`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"). A
    value of zero is considered false. Nonzero values are considered true:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些类型是[`TINYINT(1)`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT")的同义词。零值被视为假。非零值被视为真：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'However, the values `TRUE` and `FALSE` are merely aliases for `1` and `0`,
    respectively, as shown here:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，值`TRUE`和`FALSE`仅仅是`1`和`0`的别名，如下所示：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The last two statements display the results shown because `2` is equal to neither
    `1` nor `0`.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后两个语句显示的结果是因为`2`既不等于`1`也不等于`0`。
- en: '[`SMALLINT[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SMALLINT[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
- en: A small integer. The signed range is `-32768` to `32767`. The unsigned range
    is `0` to `65535`.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个小整数。有符号范围是`-32768`到`32767`。无符号范围是`0`到`65535`。
- en: '[`MEDIUMINT[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MEDIUMINT[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
- en: A medium-sized integer. The signed range is `-8388608` to `8388607`. The unsigned
    range is `0` to `16777215`.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个中等大小的整数。有符号范围是`-8388608`到`8388607`。无符号范围是`0`到`16777215`。
- en: '[`INT[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INT[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
- en: A normal-size integer. The signed range is `-2147483648` to `2147483647`. The
    unsigned range is `0` to `4294967295`.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个正常大小的整数。有符号范围是`-2147483648`到`2147483647`。无符号范围是`0`到`4294967295`。
- en: '[`INTEGER[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INTEGER[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
- en: This type is a synonym for [`INT`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT").
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种类型是[`INT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT")的同义词。
- en: '[`BIGINT[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIGINT[(*`M`*)] [UNSIGNED] [ZEROFILL]`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")'
- en: A large integer. The signed range is `-9223372036854775808` to `9223372036854775807`.
    The unsigned range is `0` to `18446744073709551615`.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个大整数。有符号范围是`-9223372036854775808`到`9223372036854775807`。无符号范围是`0`到`18446744073709551615`。
- en: '`SERIAL` is an alias for `BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE`.'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SERIAL`是`BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE`的别名。'
- en: 'Some things you should be aware of with respect to [`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") columns:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT")列，有一些需要注意的事项：
- en: All arithmetic is done using signed [`BIGINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") or
    [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE") values, so you should not use unsigned big integers larger
    than `9223372036854775807` (63 bits) except with bit functions! If you do that,
    some of the last digits in the result may be wrong because of rounding errors
    when converting a [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") value to a [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE").
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有算术运算都是使用有符号的[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT,
    SMALLINT, TINYINT, MEDIUMINT, BIGINT")或[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")值进行的，因此除了使用位函数外，不应使用大于`9223372036854775807`（63位）的无符号大整数！如果这样做，由于将[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")值转换为[`DOUBLE`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")时的四舍五入误差，结果中的一些最后几位可能是错误的。
- en: 'MySQL can handle [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") in the following
    cases:'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL可以在以下情况下处理[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT,
    SMALLINT, TINYINT, MEDIUMINT, BIGINT")：
- en: When using integers to store large unsigned values in a [`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") column.
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用整数来存储大无符号值在[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT,
    SMALLINT, TINYINT, MEDIUMINT, BIGINT")列中。
- en: In [`MIN(*`col_name`*)`](aggregate-functions.html#function_min) or [`MAX(*`col_name`*)`](aggregate-functions.html#function_max),
    where *`col_name`* refers to a [`BIGINT`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") column.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`MIN(*`col_name`*)`](aggregate-functions.html#function_min)或[`MAX(*`col_name`*)`](aggregate-functions.html#function_max)中，其中*`col_name`*指的是[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")列。
- en: When using operators ([`+`](arithmetic-functions.html#operator_plus), [`-`](arithmetic-functions.html#operator_minus),
    [`*`](arithmetic-functions.html#operator_times), and so on) where both operands
    are integers.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用操作符（[`+`](arithmetic-functions.html#operator_plus)、[`-`](arithmetic-functions.html#operator_minus)、[`*`](arithmetic-functions.html#operator_times)等）其中两个操作数都是整数时。
- en: You can always store an exact integer value in a [`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") column by storing it using a string. In this case, MySQL performs a string-to-number
    conversion that involves no intermediate double-precision representation.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您始终可以通过使用字符串将精确整数值存储在[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")列中来存储它。在这种情况下，MySQL执行一个涉及没有中间双精度表示的字符串到数字的转换。
- en: The [`-`](arithmetic-functions.html#operator_minus), [`+`](arithmetic-functions.html#operator_plus),
    and [`*`](arithmetic-functions.html#operator_times) operators use [`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") arithmetic when both operands are integer values. This means that if
    you multiply two big integers (or results from functions that return integers),
    you may get unexpected results when the result is larger than `9223372036854775807`.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当两个操作数都是整数值时，[`-`](arithmetic-functions.html#operator_minus)、[`+`](arithmetic-functions.html#operator_plus)和[`*`](arithmetic-functions.html#operator_times)运算符使用[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")算术。这意味着如果您将两个大整数相乘（或从返回整数的函数得到的结果），当结果大于`9223372036854775807`时，您可能会得到意外的结果。
- en: '[`DECIMAL[(*`M`*[,*`D`*])] [UNSIGNED] [ZEROFILL]`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC")'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DECIMAL[(*`M`*[,*`D`*])] [UNSIGNED] [ZEROFILL]`](fixed-point-types.html "13.1.3 定点类型（精确值）
    - DECIMAL, NUMERIC")'
- en: A packed “exact” fixed-point number. *`M`* is the total number of digits (the
    precision) and *`D`* is the number of digits after the decimal point (the scale).
    The decimal point and (for negative numbers) the `-` sign are not counted in *`M`*.
    If *`D`* is 0, values have no decimal point or fractional part. The maximum number
    of digits (*`M`*) for [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point Types
    (Exact Value) - DECIMAL, NUMERIC") is 65\. The maximum number of supported decimals
    (*`D`*) is 30\. If *`D`* is omitted, the default is 0\. If *`M`* is omitted, the
    default is 10\. (There is also a limit on how long the text of [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") literals can be;
    see [Section 14.24.3, “Expression Handling”](precision-math-expressions.html "14.24.3 Expression
    Handling").)
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一种紧凑的“精确”固定点数。*`M`*是总位数（精度），*`D`*是小数点后的位数（比例）。小数点和（对于负数）`-`符号不计入*`M`*。如果*`D`*为0，则值没有小数点或小数部分。[`DECIMAL`](fixed-point-types.html
    "13.1.3 固定点类型（精确值） - DECIMAL, NUMERIC")的最大数字（*`M`*）为65。支持的小数位数（*`D`*）的最大值为30。如果省略*`D`*，默认值为0。如果省略*`M`*，默认值为10。（[`DECIMAL`](fixed-point-types.html
    "13.1.3 固定点类型（精确值） - DECIMAL, NUMERIC")文本的长度也有限制；请参阅[第14.24.3节，“表达式处理”](precision-math-expressions.html
    "14.24.3 表达式处理")。）
- en: '`UNSIGNED`, if specified, disallows negative values. As of MySQL 8.0.17, the
    `UNSIGNED` attribute is deprecated for columns of type [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") (and any synonyms);
    you should expect support for it to be removed in a future version of MySQL. Consider
    using a simple `CHECK` constraint instead for such columns.'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果指定了`UNSIGNED`，则不允许负值。截至MySQL 8.0.17，对于[`DECIMAL`](fixed-point-types.html "13.1.3 固定点类型（精确值）
    - DECIMAL, NUMERIC")（以及任何同义词）列，`UNSIGNED`属性已被弃用；您应该期望在将来的MySQL版本中删除对其的支持。考虑为这些列使用简单的`CHECK`约束。
- en: All basic calculations (`+, -, *, /`) with [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") columns are done
    with a precision of 65 digits.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有对[`DECIMAL`](fixed-point-types.html "13.1.3 固定点类型（精确值） - DECIMAL, NUMERIC")列的基本计算（`+`，`-`，`*`，`/`）都以65位数字的精度进行。
- en: '[`DEC[(*`M`*[,*`D`*])] [UNSIGNED] [ZEROFILL]`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC"), [`NUMERIC[(*`M`*[,*`D`*])] [UNSIGNED]
    [ZEROFILL]`](fixed-point-types.html "13.1.3 Fixed-Point Types (Exact Value) -
    DECIMAL, NUMERIC"), [`FIXED[(*`M`*[,*`D`*])] [UNSIGNED] [ZEROFILL]`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC")'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DEC[(*`M`*[,*`D`*])] [UNSIGNED] [ZEROFILL]`](fixed-point-types.html "13.1.3 固定点类型（精确值）
    - DECIMAL, NUMERIC")，[`NUMERIC[(*`M`*[,*`D`*])] [UNSIGNED] [ZEROFILL]`](fixed-point-types.html
    "13.1.3 固定点类型（精确值） - DECIMAL, NUMERIC")，[`FIXED[(*`M`*[,*`D`*])] [UNSIGNED] [ZEROFILL]`](fixed-point-types.html
    "13.1.3 固定点类型（精确值） - DECIMAL, NUMERIC")'
- en: These types are synonyms for [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC"). The [`FIXED`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") synonym is available
    for compatibility with other database systems.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些类型是[`DECIMAL`](fixed-point-types.html "13.1.3 固定点类型（精确值） - DECIMAL, NUMERIC")的同义词。[`FIXED`](fixed-point-types.html
    "13.1.3 固定点类型（精确值） - DECIMAL, NUMERIC")同义词可用于与其他数据库系统的兼容性。
- en: '[`FLOAT[(*`M`*,*`D`*)] [UNSIGNED] [ZEROFILL]`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE")'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FLOAT[(*`M`*,*`D`*)] [UNSIGNED] [ZEROFILL]`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")'
- en: A small (single-precision) floating-point number. Permissible values are `-3.402823466E+38`
    to `-1.175494351E-38`, `0`, and `1.175494351E-38` to `3.402823466E+38`. These
    are the theoretical limits, based on the IEEE standard. The actual range might
    be slightly smaller depending on your hardware or operating system.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个小（单精度）浮点数。允许的值为`-3.402823466E+38`到`-1.175494351E-38`，`0`，和`1.175494351E-38`到`3.402823466E+38`。这些是基于IEEE标准的理论极限。实际范围可能会略小，取决于您的硬件或操作系统。
- en: '*`M`* is the total number of digits and *`D`* is the number of digits following
    the decimal point. If *`M`* and *`D`* are omitted, values are stored to the limits
    permitted by the hardware. A single-precision floating-point number is accurate
    to approximately 7 decimal places.'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`M`*是总位数，*`D`*是小数点后的位数。如果省略*`M`*和*`D`*，则值将存储到硬件允许的极限。单精度浮点数精确到大约7位小数。'
- en: '`FLOAT(*`M`*,*`D`*)` is a nonstandard MySQL extension. As of MySQL 8.0.17,
    this syntax is deprecated, and you should expect support for it to be removed
    in a future version of MySQL.'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FLOAT(*M*,*D*)`是一个非标准的MySQL扩展。截至MySQL 8.0.17版本，此语法已被弃用，您应该期待在未来的MySQL版本中移除对其的支持。'
- en: '`UNSIGNED`, if specified, disallows negative values. As of MySQL 8.0.17, the
    `UNSIGNED` attribute is deprecated for columns of type [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") (and any synonyms)
    and you should expect support for it to be removed in a future version of MySQL.
    Consider using a simple `CHECK` constraint instead for such columns.'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UNSIGNED`，如果指定，将禁止负值。截至MySQL 8.0.17版本，对于[`FLOAT`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")类型的列，`UNSIGNED`属性已被弃用（以及任何同义词），您应该期待在未来的MySQL版本中移除对其的支持。考虑为这些列使用简单的`CHECK`约束。'
- en: Using [`FLOAT`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE") might give you some unexpected problems because all calculations
    in MySQL are done with double precision. See [Section B.3.4.7, “Solving Problems
    with No Matching Rows”](no-matching-rows.html "B.3.4.7 Solving Problems with No
    Matching Rows").
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL中，所有计算都是以双精度进行的，因此使用[`FLOAT`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")可能会导致一些意外的问题。参见[第B.3.4.7节，“解决没有匹配行的问题”](no-matching-rows.html
    "B.3.4.7 解决没有匹配行的问题")。
- en: '[`FLOAT(*`p`*) [UNSIGNED] [ZEROFILL]`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE")'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FLOAT(*p*) [UNSIGNED] [ZEROFILL]`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")'
- en: A floating-point number. *`p`* represents the precision in bits, but MySQL uses
    this value only to determine whether to use [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") or [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") for the resulting
    data type. If *`p`* is from 0 to 24, the data type becomes [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") with no *`M`*
    or *`D`* values. If *`p`* is from 25 to 53, the data type becomes [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") with no *`M`*
    or *`D`* values. The range of the resulting column is the same as for the single-precision
    [`FLOAT`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE") or double-precision [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") data types
    described earlier in this section.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个浮点数。*p*表示位数精度，但MySQL仅使用此值来确定是否使用[`FLOAT`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")或[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT,
    DOUBLE")作为结果数据类型。如果*p*从0到24，数据类型变为没有*M*或*D*值的[`FLOAT`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")。如果*p*从25到53，数据类型变为没有*M*或*D*值的[`DOUBLE`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")。结果列的范围与本节前面描述的单精度[`FLOAT`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")或双精度[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")数据类型的范围相同。
- en: '`UNSIGNED`, if specified, disallows negative values. As of MySQL 8.0.17, the
    `UNSIGNED` attribute is deprecated for columns of type [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") (and any synonyms)
    and you should expect support for it to be removed in a future version of MySQL.
    Consider using a simple `CHECK` constraint instead for such columns.'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UNSIGNED`，如果指定，将禁止负值。截至MySQL 8.0.17版本，对于[`FLOAT`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")类型的列，`UNSIGNED`属性已被弃用（以及任何同义词），您应该期待在未来的MySQL版本中移除对其的支持。考虑为这些列使用简单的`CHECK`约束。'
- en: '[`FLOAT(*`p`*)`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE") syntax is provided for ODBC compatibility.'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`FLOAT(*p*)`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")语法是为了ODBC兼容性而提供的。'
- en: '[`DOUBLE[(*`M`*,*`D`*)] [UNSIGNED] [ZEROFILL]`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE")'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DOUBLE[(*M*,*D*)] [UNSIGNED] [ZEROFILL]`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")'
- en: A normal-size (double-precision) floating-point number. Permissible values are
    `-1.7976931348623157E+308` to `-2.2250738585072014E-308`, `0`, and `2.2250738585072014E-308`
    to `1.7976931348623157E+308`. These are the theoretical limits, based on the IEEE
    standard. The actual range might be slightly smaller depending on your hardware
    or operating system.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个正常大小（双精度）的浮点数。允许的值为`-1.7976931348623157E+308`到`-2.2250738585072014E-308`，`0`，以及`2.2250738585072014E-308`到`1.7976931348623157E+308`。这些是基于IEEE标准的理论极限。实际范围可能会略小，取决于您的硬件或操作系统。
- en: '*`M`* is the total number of digits and *`D`* is the number of digits following
    the decimal point. If *`M`* and *`D`* are omitted, values are stored to the limits
    permitted by the hardware. A double-precision floating-point number is accurate
    to approximately 15 decimal places.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`M`*是总位数，*`D`*是小数点后的位数。如果省略了*`M`*和*`D`*，则值将存储到硬件允许的极限。双精度浮点数精确到大约15位小数。'
- en: '`DOUBLE(*`M`*,*`D`*)` is a nonstandard MySQL extension. As of MySQL 8.0.17,
    this syntax is deprecated and you should expect support for it to be removed in
    a future version of MySQL.'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`DOUBLE(*`M`*,*`D`*)`是MySQL的非标准扩展。截至MySQL 8.0.17版本，此语法已被弃用，您应该期待在未来的MySQL版本中移除对其的支持。'
- en: '`UNSIGNED`, if specified, disallows negative values. As of MySQL 8.0.17, the
    `UNSIGNED` attribute is deprecated for columns of type [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") (and any synonyms)
    and you should expect support for it to be removed in a future version of MySQL.
    Consider using a simple `CHECK` constraint instead for such columns.'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UNSIGNED`，如果指定，将不允许负值。截至MySQL 8.0.17版本，对于[`DOUBLE`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT，DOUBLE")类型的列，`UNSIGNED`属性已被弃用（以及任何同义词），您应该期待在未来的MySQL版本中移除对其的支持。考虑为这些列使用简单的`CHECK`约束。'
- en: '[`DOUBLE PRECISION[(*`M`*,*`D`*)] [UNSIGNED] [ZEROFILL]`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"), [`REAL[(*`M`*,*`D`*)]
    [UNSIGNED] [ZEROFILL]`](floating-point-types.html "13.1.4 Floating-Point Types
    (Approximate Value) - FLOAT, DOUBLE")'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DOUBLE PRECISION[(*`M`*,*`D`*)] [UNSIGNED] [ZEROFILL]`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT，DOUBLE")，[`REAL[(*`M`*,*`D`*)] [UNSIGNED] [ZEROFILL]`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT，DOUBLE")'
- en: 'These types are synonyms for [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE"). Exception: If the [`REAL_AS_FLOAT`](sql-mode.html#sqlmode_real_as_float)
    SQL mode is enabled, [`REAL`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE") is a synonym for [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") rather than
    [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE").'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些类型是[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT，DOUBLE")的同义词。例外：如果启用了[`REAL_AS_FLOAT`](sql-mode.html#sqlmode_real_as_float)
    SQL模式，则[`REAL`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT，DOUBLE")是[`FLOAT`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT，DOUBLE")的同义词，而不是[`DOUBLE`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT，DOUBLE")。
