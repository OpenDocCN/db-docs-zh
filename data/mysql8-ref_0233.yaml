- en: 7.1.9 Using System Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.1.9 使用系统变量
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/using-system-variables.html](https://dev.mysql.com/doc/refman/8.0/en/using-system-variables.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/using-system-variables.html](https://dev.mysql.com/doc/refman/8.0/en/using-system-variables.html)
- en: '[7.1.9.1 System Variable Privileges](system-variable-privileges.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[7.1.9.1 系统变量权限](system-variable-privileges.html)'
- en: '[7.1.9.2 Dynamic System Variables](dynamic-system-variables.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[7.1.9.2 动态系统变量](dynamic-system-variables.html)'
- en: '[7.1.9.3 Persisted System Variables](persisted-system-variables.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[7.1.9.3 持久化系统变量](persisted-system-variables.html)'
- en: '[7.1.9.4 Nonpersistible and Persist-Restricted System Variables](nonpersistible-system-variables.html)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[7.1.9.4 非持久性和持久受限制的系统变量](nonpersistible-system-variables.html)'
- en: '[7.1.9.5 Structured System Variables](structured-system-variables.html)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[7.1.9.5 结构化系统变量](structured-system-variables.html)'
- en: The MySQL server maintains many system variables that configure its operation.
    [Section 7.1.8, “Server System Variables”](server-system-variables.html "7.1.8 Server
    System Variables"), describes the meaning of these variables. Each system variable
    has a default value. System variables can be set at server startup using options
    on the command line or in an option file. Most of them can be changed dynamically
    while the server is running by means of the [`SET`](set-variable.html "15.7.6.1 SET
    Syntax for Variable Assignment") statement, which enables you to modify operation
    of the server without having to stop and restart it. You can also use system variable
    values in expressions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器维护许多系统变量来配置其操作。[第7.1.8节，“服务器系统变量”](server-system-variables.html "7.1.8 服务器系统变量")，描述了这些变量的含义。每个系统变量都有一个默认值。系统变量可以在服务器启动时使用命令行选项或选项文件进行设置。大多数系统变量可以通过[`SET`](set-variable.html
    "15.7.6.1 变量赋值的SET语法")语句在服务器运行时动态更改，这使您可以修改服务器的操作而无需停止和重新启动它。您还可以在表达式中使用系统变量的值。
- en: 'Many system variables are built in. System variables may also be installed
    by server plugins or components:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 许多系统变量是内置的。系统变量也可以由服务器插件或组件安装：
- en: System variables implemented by a server plugin are exposed when the plugin
    is installed and have names that begin with the plugin name. For example, the
    `audit_log` plugin implements a system variable named [`audit_log_policy`](audit-log-reference.html#sysvar_audit_log_policy).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当服务器插件安装时，由插件实现的系统变量会暴露出来，并且其名称以插件名称开头。例如，`audit_log`插件实现了一个名为[`audit_log_policy`](audit-log-reference.html#sysvar_audit_log_policy)的系统变量。
- en: System variables implemented by a component are exposed when the component is
    installed and have names that begin with a component-specific prefix. For example,
    the `log_filter_dragnet` error log filter component implements a system variable
    named `log_error_filter_rules`, the full name of which is [`dragnet.log_error_filter_rules`](server-system-variables.html#sysvar_dragnet.log_error_filter_rules).
    To refer to this variable, use the full name.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当组件实现的系统变量在安装组件时暴露出来时，其名称以组件特定前缀开头。例如，`log_filter_dragnet`错误日志过滤组件实现了一个名为`log_error_filter_rules`的系统变量，其完整名称为[`dragnet.log_error_filter_rules`](server-system-variables.html#sysvar_dragnet.log_error_filter_rules)。要引用此变量，请使用完整名称。
- en: 'There are two scopes in which system variables exist. Global variables affect
    the overall operation of the server. Session variables affect its operation for
    individual client connections. A given system variable can have both a global
    and a session value. Global and session system variables are related as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 系统变量存在两个范围。全局变量影响服务器的整体操作。会话变量影响单个客户端连接的操作。给定的系统变量可以同时具有全局值和会话值。全局和会话系统变量之间的关系如下：
- en: When the server starts, it initializes each global variable to its default value.
    These defaults can be changed by options specified on the command line or in an
    option file. (See [Section 6.2.2, “Specifying Program Options”](program-options.html
    "6.2.2 Specifying Program Options").)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当服务器启动时，它会将每个全局变量初始化为其默认值。这些默认值可以通过在命令行或选项文件中指定的选项进行更改。（参见[第6.2.2节，“指定程序选项”](program-options.html
    "6.2.2 指定程序选项").）
- en: The server also maintains a set of session variables for each client that connects.
    The client's session variables are initialized at connect time using the current
    values of the corresponding global variables. For example, a client's SQL mode
    is controlled by the session [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    value, which is initialized when the client connects to the value of the global
    [`sql_mode`](server-system-variables.html#sysvar_sql_mode) value.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器还为每个连接的客户端维护一组会话变量。客户端的会话变量在连接时使用相应全局变量的当前值进行初始化。例如，客户端的SQL模式由会话[`sql_mode`](server-system-variables.html#sysvar_sql_mode)值控制，该值在客户端连接到全局[`sql_mode`](server-system-variables.html#sysvar_sql_mode)值时进行初始化。
- en: For some system variables, the session value is not initialized from the corresponding
    global value; if so, that is indicated in the variable description.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于某些系统变量，会话值不是从相应的全局值初始化的；如果是这样，变量描述中会指出。
- en: System variable values can be set globally at server startup by using options
    on the command line or in an option file. At startup, the syntax for system variables
    is the same as for command options, so within variable names, dashes and underscores
    may be used interchangeably. For example, [`--general_log=ON`](server-system-variables.html#sysvar_general_log)
    and [`--general-log=ON`](server-system-variables.html#sysvar_general_log) are
    equivalent.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在命令行或选项文件中使用选项在服务器启动时全局设置系统变量的值。在启动时，系统变量的语法与命令选项相同，因此在变量名称中，破折号和下划线可以互换使用。例如，[`--general_log=ON`](server-system-variables.html#sysvar_general_log)和[`--general-log=ON`](server-system-variables.html#sysvar_general_log)是等效的。
- en: 'When you use a startup option to set a variable that takes a numeric value,
    the value can be given with a suffix of `K`, `M`, or `G` (either uppercase or
    lowercase) to indicate a multiplier of 1024, 1024² or 1024³; that is, units of
    kilobytes, megabytes, or gigabytes, respectively. As of MySQL 8.0.14, a suffix
    can also be `T`, `P`, and `E` to indicate a multiplier of 1024⁴, 1024⁵ or 1024⁶.
    Thus, the following command starts the server with a sort buffer size of 256 kilobytes
    and a maximum packet size of one gigabyte:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用启动选项设置需要数字值的变量时，可以使用`K`、`M`或`G`（大写或小写）的后缀表示1024、1024²或1024³的倍数；即，单位为千字节、兆字节或千兆字节。从MySQL
    8.0.14开始，后缀也可以是`T`、`P`和`E`，表示1024⁴、1024⁵或1024⁶的倍数。因此，以下命令启动服务器时，排序缓冲区大小为256千字节，最大数据包大小为1千兆字节：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Within an option file, those variables are set like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在选项文件中，这些变量设置如下：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The lettercase of suffix letters does not matter; `256K` and `256k` are equivalent,
    as are `1G` and `1g`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 后缀字母的大小写不重要；`256K`和`256k`是等效的，`1G`和`1g`也是等效的。
- en: To restrict the maximum value to which a system variable can be set at runtime
    with the [`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment")
    statement, specify this maximum by using an option of the form `--maximum-*`var_name`*=*`value`*`
    at server startup. For example, to prevent the value of [`sort_buffer_size`](server-system-variables.html#sysvar_sort_buffer_size)
    from being increased to more than 32MB at runtime, use the option `--maximum-sort-buffer-size=32M`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要限制可以在运行时使用[`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment")语句设置的系统变量的最大值，请在服务器启动时使用形式为`--maximum-*`var_name`*=*`value`*`的选项指定此最大值。例如，要防止[`sort_buffer_size`](server-system-variables.html#sysvar_sort_buffer_size)的值在运行时增加到超过32MB，使用选项`--maximum-sort-buffer-size=32M`。
- en: 'Many system variables are dynamic and can be changed at runtime by using the
    [`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment") statement.
    For a list, see [Section 7.1.9.2, “Dynamic System Variables”](dynamic-system-variables.html
    "7.1.9.2 Dynamic System Variables"). To change a system variable with [`SET`](set-variable.html
    "15.7.6.1 SET Syntax for Variable Assignment"), refer to it by name, optionally
    preceded by a modifier. At runtime, system variable names must be written using
    underscores, not dashes. The following examples briefly illustrate this syntax:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 许多系统变量是动态的，可以通过使用[`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable
    Assignment")语句在运行时进行更改。有关列表，请参见[Section 7.1.9.2，“动态系统变量”](dynamic-system-variables.html
    "7.1.9.2 Dynamic System Variables")。要使用[`SET`](set-variable.html "15.7.6.1 SET
    Syntax for Variable Assignment")更改系统变量，请按名称引用，可选地在前面加上修饰符。在运行时，系统变量名称必须使用下划线而不是破折号编写。以下示例简要说明了此语法：
- en: 'Set a global system variable:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置全局系统变量：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Persist a global system variable to the `mysqld-auto.cnf` file (and set the
    runtime value):'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将全局系统变量持久化到`mysqld-auto.cnf`文件（并设置运行时值）：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Persist a global system variable to the `mysqld-auto.cnf` file (without setting
    the runtime value):'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '将全局系统变量持久化到`mysqld-auto.cnf`文件（而不设置运行时值）:'
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Set a session system variable:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置会话系统变量：
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For complete details about [`SET`](set-variable.html "15.7.6.1 SET Syntax for
    Variable Assignment") syntax, see [Section 15.7.6.1, “SET Syntax for Variable
    Assignment”](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment").
    For a description of the privilege requirements for setting and persisting system
    variables, see [Section 7.1.9.1, “System Variable Privileges”](system-variable-privileges.html
    "7.1.9.1 System Variable Privileges")
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment")语法的完整详细信息，请参阅[Section 15.7.6.1,
    “SET Syntax for Variable Assignment”](set-variable.html "15.7.6.1 SET Syntax for
    Variable Assignment")。有关设置和持久化系统变量所需的特权要求的描述，请参阅[Section 7.1.9.1, “System Variable
    Privileges”](system-variable-privileges.html "7.1.9.1 System Variable Privileges")
- en: 'Suffixes for specifying a value multiplier can be used when setting a variable
    at server startup, but not to set the value with [`SET`](set-variable.html "15.7.6.1 SET
    Syntax for Variable Assignment") at runtime. On the other hand, with [`SET`](set-variable.html
    "15.7.6.1 SET Syntax for Variable Assignment") you can assign a variable''s value
    using an expression, which is not true when you set a variable at server startup.
    For example, the first of the following lines is legal at server startup, but
    the second is not:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器启动时设置变量时，可以使用值乘数后缀，但不能在运行时使用[`SET`](set-variable.html "15.7.6.1 SET Syntax
    for Variable Assignment")设置值。另一方面，使用[`SET`](set-variable.html "15.7.6.1 SET Syntax
    for Variable Assignment")可以使用表达式分配变量的值，在服务器启动时设置变量时不适用。例如，以下行中的第一行在服务器启动时是合法的，但第二行不是：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Conversely, the second of the following lines is legal at runtime, but the
    first is not:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，以下行中的第二行在运行时是合法的，但第一行不是：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To display system variable names and values, use the [`SHOW VARIABLES`](show-variables.html
    "15.7.7.41 SHOW VARIABLES Statement") statement:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示系统变量名称和值，请使用[`SHOW VARIABLES`](show-variables.html "15.7.7.41 SHOW VARIABLES
    Statement")语句：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With a [`LIKE`](string-comparison-functions.html#operator_like) clause, the
    statement displays only those variables that match the pattern. To obtain a specific
    variable name, use a [`LIKE`](string-comparison-functions.html#operator_like)
    clause as shown:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`LIKE`](string-comparison-functions.html#operator_like)子句，语句仅显示与模式匹配的变量。要获取特定变量名，请使用如下所示的[`LIKE`](string-comparison-functions.html#operator_like)子句：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To get a list of variables whose name match a pattern, use the `%` wildcard
    character in a [`LIKE`](string-comparison-functions.html#operator_like) clause:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取与模式匹配的变量列表，请在[`LIKE`](string-comparison-functions.html#operator_like)子句中使用`%`通配符字符：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Wildcard characters can be used in any position within the pattern to be matched.
    Strictly speaking, because `_` is a wildcard that matches any single character,
    you should escape it as `\_` to match it literally. In practice, this is rarely
    necessary.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符字符可以在要匹配的模式中的任何位置使用。严格来说，因为`_`是匹配任意单个字符的通配符，您应该将其转义为`\_`以确实匹配它。实际上，这很少是必要的。
- en: For [`SHOW VARIABLES`](show-variables.html "15.7.7.41 SHOW VARIABLES Statement"),
    if you specify neither `GLOBAL` nor `SESSION`, MySQL returns `SESSION` values.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`SHOW VARIABLES`](show-variables.html "15.7.7.41 SHOW VARIABLES Statement")，如果既不指定`GLOBAL`也不指定`SESSION`，MySQL将返回`SESSION`值。
- en: 'The reason for requiring the `GLOBAL` keyword when setting `GLOBAL`-only variables
    but not when retrieving them is to prevent problems in the future:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置仅限`GLOBAL`变量时需要`GLOBAL`关键字但在检索时不需要的原因是为了防止未来出现问题：
- en: Were a `SESSION` variable to be removed that has the same name as a `GLOBAL`
    variable, a client with privileges sufficient to modify global variables might
    accidentally change the `GLOBAL` variable rather than just the `SESSION` variable
    for its own session.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果删除具有与`GLOBAL`变量相同名称的`SESSION`变量，则具有足够权限修改全局变量的客户端可能会意外更改`GLOBAL`变量，而不仅仅是自己会话的`SESSION`变量。
- en: Were a `SESSION` variable to be added with the same name as a `GLOBAL` variable,
    a client that intends to change the `GLOBAL` variable might find only its own
    `SESSION` variable changed.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果添加具有与`GLOBAL`变量相同名称的`SESSION`变量，则打算更改`GLOBAL`变量的客户端可能只会发现自己的`SESSION`变量被更改。
