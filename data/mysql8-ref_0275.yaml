- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/binary-log-setting.html](https://dev.mysql.com/doc/refman/8.0/en/binary-log-setting.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/binary-log-setting.html](https://dev.mysql.com/doc/refman/8.0/en/binary-log-setting.html)
- en: 7.4.4.2 Setting The Binary Log Format
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 7.4.4.2 设置二进制日志格式
- en: 'You can select the binary logging format explicitly by starting the MySQL server
    with [`--binlog-format=*`type`*`](replication-options-binary-log.html#sysvar_binlog_format).
    The supported values for *`type`* are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用[`--binlog-format=*`type`*`](replication-options-binary-log.html#sysvar_binlog_format)启动MySQL服务器来明确选择二进制日志记录格式。*`type`*支持的值为：
- en: '`STATEMENT` causes logging to be statement based.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STATEMENT`导致记录以语句为基础。'
- en: '`ROW` causes logging to be row based. This is the default.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ROW`导致记录以行为基础。这是默认设置。'
- en: '`MIXED` causes logging to use mixed format.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MIXED`导致记录使用混合格式。'
- en: Setting the binary logging format does not activate binary logging for the server.
    The setting only takes effect when binary logging is enabled on the server, which
    is the case when the [`log_bin`](replication-options-binary-log.html#sysvar_log_bin)
    system variable is set to `ON`. From MySQL 8.0, binary logging is enabled by default,
    and is only disabled if you specify the [`--skip-log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)
    or [`--disable-log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)
    option at startup.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 设置二进制日志记录格式不会激活服务器的二进制日志记录。该设置仅在服务器启用二进制日志记录时生效，当[`log_bin`](replication-options-binary-log.html#sysvar_log_bin)系统变量设置为`ON`时为此情况。从MySQL
    8.0开始，默认情况下启用二进制日志记录，只有在启动时指定[`--skip-log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)或[`--disable-log-bin`](replication-options-binary-log.html#option_mysqld_log-bin)选项时才会禁用。
- en: 'The logging format also can be switched at runtime, although note that there
    are a number of situations in which you cannot do this, as discussed later in
    this section. Set the global value of the [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    system variable to specify the format for clients that connect subsequent to the
    change:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 记录格式也可以在运行时切换，尽管请注意，在本节后面讨论的一些情况下，您无法这样做。设置全局值[`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)系统变量以指定更改后连接的客户端的格式：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An individual client can control the logging format for its own statements
    by setting the session value of [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置[`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)的会话值，个别客户端可以控制其自己语句的记录格式：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Changing the global [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    value requires privileges sufficient to set global system variables. Changing
    the session [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    value requires privileges sufficient to set restricted session system variables.
    See [Section 7.1.9.1, “System Variable Privileges”](system-variable-privileges.html
    "7.1.9.1 System Variable Privileges").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 更改全局[`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)值需要具有足够权限来设置全局系统变量。更改会话[`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)值需要具有足够权限来设置受限会话系统变量。参见[Section 7.1.9.1,
    “System Variable Privileges”](system-variable-privileges.html "7.1.9.1 System
    Variable Privileges")。
- en: 'There are several reasons why a client might want to set binary logging on
    a per-session basis:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个原因可能导致客户端希望按会话设置二进制日志记录：
- en: A session that makes many small changes to the database might want to use row-based
    logging.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数据库进行许多小更改的会话可能希望使用基于行的记录。
- en: A session that performs updates that match many rows in the `WHERE` clause might
    want to use statement-based logging because it is more efficient to log a few
    statements than many rows.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行更新匹配`WHERE`子句中许多行的会话可能希望使用基于语句的记录，因为记录少量语句比记录许多行更有效率。
- en: Some statements require a lot of execution time on the source, but result in
    just a few rows being modified. It might therefore be beneficial to replicate
    them using row-based logging.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些语句在源端执行时需要大量时间，但只会修改少量行。因此，使用基于行的记录可能是有益的。
- en: 'There are exceptions when you cannot switch the replication format at runtime:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时无法切换复制格式的情况有例外：
- en: The replication format cannot be changed from within a stored function or a
    trigger.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法从存储函数或触发器内部更改复制格式。
- en: If the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") storage
    engine is enabled.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")存储引擎。
- en: If a session has open temporary tables, the replication format cannot be changed
    for the session (`SET @@SESSION.binlog_format`).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果会话中有打开的临时表，则无法为该会话更改复制格式（`SET @@SESSION.binlog_format`）。
- en: If any replication channel has open temporary tables, the replication format
    cannot be changed globally (`SET @@GLOBAL.binlog_format` or `SET @@PERSIST.binlog_format`).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何复制通道有打开的临时表，则无法全局更改复制格式（`SET @@GLOBAL.binlog_format` 或 `SET @@PERSIST.binlog_format`）。
- en: If any replication channel applier thread is currently running, the replication
    format cannot be changed globally (`SET @@GLOBAL.binlog_format` or `SET @@PERSIST.binlog_format`).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何复制通道应用程序线程当前正在运行，则无法全局更改复制格式（`SET @@GLOBAL.binlog_format` 或 `SET @@PERSIST.binlog_format`）。
- en: Trying to switch the replication format in any of these cases (or attempting
    to set the current replication format) results in an error. You can, however,
    use `PERSIST_ONLY` (`SET @@PERSIST_ONLY.binlog_format`) to change the replication
    format at any time, because this action does not modify the runtime global system
    variable value, and takes effect only after a server restart.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下尝试切换复制格式（或尝试设置当前复制格式）会导致错误。但是，您可以随时使用 `PERSIST_ONLY`（`SET @@PERSIST_ONLY.binlog_format`）更改复制格式，因为此操作不会修改运行时全局系统变量值，并且仅在服务器重新启动后生效。
- en: Switching the replication format at runtime is not recommended when any temporary
    tables exist, because temporary tables are logged only when using statement-based
    replication, whereas with row-based replication and mixed replication, they are
    not logged.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议在存在任何临时表时在运行时切换复制格式，因为仅在使用基于语句的复制时才记录临时表，而在基于行的复制和混合复制中，它们不会被记录。
- en: Switching the replication format while replication is ongoing can also cause
    issues. Each MySQL Server can set its own and only its own binary logging format
    (true whether [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    is set with global or session scope). This means that changing the logging format
    on a replication source server does not cause a replica to change its logging
    format to match. When using `STATEMENT` mode, the [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    system variable is not replicated. When using `MIXED` or `ROW` logging mode, it
    is replicated but is ignored by the replica.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当复制正在进行时切换复制格式也可能会导致问题。每个 MySQL 服务器都可以设置自己的二进制日志格式（无论 [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    是以全局还是会话范围设置）。这意味着在复制源服务器上更改日志格式不会导致副本更改其日志格式以匹配。在使用 `STATEMENT` 模式时，[`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    系统变量不会被复制。在使用 `MIXED` 或 `ROW` 日志模式时，它会被复制，但副本会忽略它。
- en: 'A replica is not able to convert binary log entries received in `ROW` logging
    format to `STATEMENT` format for use in its own binary log. The replica must therefore
    use `ROW` or `MIXED` format if the source does. Changing the binary logging format
    on the source from `STATEMENT` to `ROW` or `MIXED` while replication is ongoing
    to a replica with `STATEMENT` format can cause replication to fail with errors
    such as Error executing row event: ''Cannot execute statement: impossible to write
    to binary log since statement is in row format and BINLOG_FORMAT = STATEMENT.''
    Changing the binary logging format on the replica to `STATEMENT` format when the
    source is still using `MIXED` or `ROW` format also causes the same type of replication
    failure. To change the format safely, you must stop replication and ensure that
    the same change is made on both the source and the replica.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 副本无法将以 `ROW` 日志格式接收的二进制日志条目转换为 `STATEMENT` 格式以在其自己的二进制日志中使用。因此，如果源使用 `ROW` 或
    `MIXED` 格式，则副本必须使用 `ROW` 或 `MIXED` 格式。在复制仍在进行的情况下，将源上的二进制日志格式从 `STATEMENT` 更改为
    `ROW` 或 `MIXED` 到具有 `STATEMENT` 格式的副本可能会导致复制失败，出现错误，例如执行行事件时出错：'无法执行语句：由于语句处于行格式且
    BINLOG_FORMAT = STATEMENT，因此无法写入二进制日志。' 当源仍在使用 `MIXED` 或 `ROW` 格式时，将副本上的二进制日志格式更改为
    `STATEMENT` 格式也会导致相同类型的复制失败。要安全更改格式，必须停止复制，并确保在源和副本上都进行相同的更改。
- en: If you are using [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine") tables and the transaction isolation level is [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)
    or [`READ UNCOMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-uncommitted),
    only row-based logging can be used. It is *possible* to change the logging format
    to `STATEMENT`, but doing so at runtime leads very rapidly to errors because `InnoDB`
    can no longer perform inserts.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 [`InnoDB`](innodb-storage-engine.html "第 17 章 InnoDB 存储引擎") 表，并且事务隔离级别为
    [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)
    或 [`READ UNCOMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-uncommitted)，则只能使用基于行的日志记录。可以*可能*将日志格式更改为
    `STATEMENT`，但在运行时这样做会非常快速地导致错误，因为 `InnoDB` 无法再执行插入操作。
- en: With the binary log format set to `ROW`, many changes are written to the binary
    log using the row-based format. Some changes, however, still use the statement-based
    format. Examples include all DDL (data definition language) statements such as
    [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement"), [`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement"), or [`DROP TABLE`](drop-table.html
    "15.1.32 DROP TABLE Statement").
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将二进制日志格式设置为 `ROW` 后，许多更改将以基于行的格式写入二进制日志。然而，仍然有一些更改使用基于语句的格式。例如，所有 DDL（数据定义语言）语句，如
    [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE 语句"), [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE 语句"), 或 [`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE
    语句")。
- en: When row-based binary logging is used, the [`binlog_row_event_max_size`](replication-options-binary-log.html#sysvar_binlog_row_event_max_size)
    system variable and its corresponding startup option [`--binlog-row-event-max-size`](replication-options-binary-log.html#option_mysqld_binlog-row-event-max-size)
    set a soft limit on the maximum size of row events. The default value is 8192
    bytes, and the value can only be changed at server startup. Where possible, rows
    stored in the binary log are grouped into events with a size not exceeding the
    value of this setting. If an event cannot be split, the maximum size can be exceeded.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用基于行的二进制日志记录时，[`binlog_row_event_max_size`](replication-options-binary-log.html#sysvar_binlog_row_event_max_size)
    系统变量及其对应的启动选项 [`--binlog-row-event-max-size`](replication-options-binary-log.html#option_mysqld_binlog-row-event-max-size)
    设置了行事件的最大大小的软限制。默认值为 8192 字节，该值只能在服务器启动时更改。在可能的情况下，存储在二进制日志中的行被分组为大小不超过此设置值的事件。如果事件无法分割，则最大大小可能会超过。
- en: The [`--binlog-row-event-max-size`](replication-options-binary-log.html#option_mysqld_binlog-row-event-max-size)
    option is available for servers that are capable of row-based replication. Rows
    are stored into the binary log in chunks having a size in bytes not exceeding
    the value of this option. The value must be a multiple of 256\. The default value
    is 8192.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`--binlog-row-event-max-size`](replication-options-binary-log.html#option_mysqld_binlog-row-event-max-size)
    选项适用于能够进行基于行的复制的服务器。行以不超过此选项值的字节大小的块存储在二进制日志中。该值必须是 256 的倍数。默认值为 8192。'
- en: Warning
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When using *statement-based logging* for replication, it is possible for the
    data on the source and replica to become different if a statement is designed
    in such a way that the data modification is nondeterministic; that is, it is left
    up to the query optimizer. In general, this is not a good practice even outside
    of replication. For a detailed explanation of this issue, see [Section B.3.7,
    “Known Issues in MySQL”](known-issues.html "B.3.7 Known Issues in MySQL").
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当为复制使用*基于语句的日志记录*时，如果语句设计为数据修改是非确定性的，即由查询优化器决定，则源和副本上的数据可能会变得不同。一般来说，即使在复制之外，这也不是一个好的做法。有关此问题的详细解释，请参见
    [Section B.3.7, “MySQL 中的已知问题”](known-issues.html "B.3.7 MySQL 中的已知问题")。
