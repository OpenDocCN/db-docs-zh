- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-autocommit-commit-rollback.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-autocommit-commit-rollback.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-autocommit-commit-rollback.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-autocommit-commit-rollback.html)
- en: 17.7.2.2 autocommit, Commit, and Rollback
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.7.2.2 自动提交、提交和回滚
- en: In `InnoDB`, all user activity occurs inside a transaction. If [`autocommit`](server-system-variables.html#sysvar_autocommit)
    mode is enabled, each SQL statement forms a single transaction on its own. By
    default, MySQL starts the session for each new connection with [`autocommit`](server-system-variables.html#sysvar_autocommit)
    enabled, so MySQL does a commit after each SQL statement if that statement did
    not return an error. If a statement returns an error, the commit or rollback behavior
    depends on the error. See [Section 17.21.5, “InnoDB Error Handling”](innodb-error-handling.html
    "17.21.5 InnoDB Error Handling").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InnoDB`中，所有用户活动都发生在一个事务内。如果启用了[`autocommit`](server-system-variables.html#sysvar_autocommit)模式，每个SQL语句都形成一个独立的事务。默认情况下，MySQL会在每个新连接的会话中启用[`autocommit`](server-system-variables.html#sysvar_autocommit)，因此如果该语句没有返回错误，MySQL会在每个SQL语句后执行提交。如果语句返回错误，则提交或回滚行为取决于错误。参见[第17.21.5节，“InnoDB错误处理”](innodb-error-handling.html
    "17.21.5 InnoDB Error Handling")。
- en: A session that has [`autocommit`](server-system-variables.html#sysvar_autocommit)
    enabled can perform a multiple-statement transaction by starting it with an explicit
    [`START TRANSACTION`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK
    Statements") or [`BEGIN`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK
    Statements") statement and ending it with a [`COMMIT`](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements") or [`ROLLBACK`](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements") statement. See [Section 15.3.1,
    “START TRANSACTION, COMMIT, and ROLLBACK Statements”](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用显式的[`START TRANSACTION`](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements")或[`BEGIN`](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements")语句开始，以及使用[`COMMIT`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements")或[`ROLLBACK`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements")语句结束，启用了[`autocommit`](server-system-variables.html#sysvar_autocommit)的会话可以执行多语句事务。参见[第15.3.1节，“START
    TRANSACTION, COMMIT和ROLLBACK语句”](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements")。
- en: If [`autocommit`](server-system-variables.html#sysvar_autocommit) mode is disabled
    within a session with `SET autocommit = 0`, the session always has a transaction
    open. A [`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK
    Statements") or [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION, COMMIT, and
    ROLLBACK Statements") statement ends the current transaction and a new one starts.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在使用`SET autocommit = 0`禁用了[`autocommit`](server-system-variables.html#sysvar_autocommit)模式的会话中，该会话始终保持一个事务处于打开状态。[`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")或[`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")语句结束当前事务并启动一个新事务。
- en: If a session that has [`autocommit`](server-system-variables.html#sysvar_autocommit)
    disabled ends without explicitly committing the final transaction, MySQL rolls
    back that transaction.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果禁用了[`autocommit`](server-system-variables.html#sysvar_autocommit)的会话在没有显式提交最终事务的情况下结束，MySQL会回滚该事务。
- en: Some statements implicitly end a transaction, as if you had done a [`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements") before executing
    the statement. For details, see [Section 15.3.3, “Statements That Cause an Implicit
    Commit”](implicit-commit.html "15.3.3 Statements That Cause an Implicit Commit").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一些语句会隐式结束一个事务，就好像在执行该语句之前执行了[`COMMIT`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements")。详情请参见[第15.3.3节，“导致隐式提交的语句”](implicit-commit.html
    "15.3.3 Statements That Cause an Implicit Commit")。
- en: A [`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")
    means that the changes made in the current transaction are made permanent and
    become visible to other sessions. A [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements") statement, on the other hand, cancels all modifications
    made by the current transaction. Both [`COMMIT`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements") and [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements") release all `InnoDB` locks that were set during
    the current transaction.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")表示当前事务中所做的更改已经永久生效，并对其他会话可见。另一方面，[`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")语句会取消当前事务所做的所有修改。[`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")和[`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")都会释放在当前事务期间设置的所有`InnoDB`锁。
- en: Grouping DML Operations with Transactions
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用事务对DML操作进行分组
- en: By default, connection to the MySQL server begins with [autocommit](glossary.html#glos_autocommit
    "autocommit") mode enabled, which automatically commits every SQL statement as
    you execute it. This mode of operation might be unfamiliar if you have experience
    with other database systems, where it is standard practice to issue a sequence
    of [DML](glossary.html#glos_dml "DML") statements and commit them or roll them
    back all together.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，连接到MySQL服务器时会启用[自动提交](glossary.html#glos_autocommit "autocommit")模式，这会在执行每个SQL语句时自动提交。如果您有其他数据库系统的经验，在那些系统中，通常会发出一系列[DML](glossary.html#glos_dml
    "DML")语句并一起提交或回滚，这种操作模式可能会让您感到陌生。
- en: To use multiple-statement [transactions](glossary.html#glos_transaction "transaction"),
    switch autocommit off with the SQL statement `SET autocommit = 0` and end each
    transaction with [`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT, and
    ROLLBACK Statements") or [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements") as appropriate. To leave autocommit on, begin each transaction
    with [`START TRANSACTION`](commit.html "15.3.1 START TRANSACTION, COMMIT, and
    ROLLBACK Statements") and end it with [`COMMIT`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements") or [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements"). The following example shows two transactions.
    The first is committed; the second is rolled back.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用多语句[事务](glossary.html#glos_transaction "transaction")，请使用SQL语句`SET autocommit
    = 0`关闭自动提交，并在每个事务结束时使用[`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements")或[`ROLLBACK`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements")。要保持自动提交状态，请在每个事务开始时使用[`START TRANSACTION`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")，并在结束时使用[`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")或[`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")。以下示例展示了两个事务。第一个被提交；第二个被回滚。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Transactions in Client-Side Languages
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 客户端语言中的事务
- en: In APIs such as PHP, Perl DBI, JDBC, ODBC, or the standard C call interface
    of MySQL, you can send transaction control statements such as [`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements") to the MySQL server
    as strings just like any other SQL statements such as [`SELECT`](select.html "15.2.13 SELECT
    Statement") or [`INSERT`](insert.html "15.2.7 INSERT Statement"). Some APIs also
    offer separate special transaction commit and rollback functions or methods.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在诸如PHP、Perl DBI、JDBC、ODBC或MySQL的标准C调用接口等API中，您可以像发送其他SQL语句（如[`SELECT`](select.html
    "15.2.13 SELECT Statement")或[`INSERT`](insert.html "15.2.7 INSERT Statement")）一样，将事务控制语句（如[`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")）作为字符串发送到MySQL服务器。一些API还提供单独的特殊事务提交和回滚函数或方法。
