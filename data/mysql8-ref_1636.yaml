- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-multiple-nodes.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-multiple-nodes.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-multiple-nodes.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-multiple-nodes.html)
- en: 25.2.7.10 Limitations Relating to Multiple NDB Cluster Nodes
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 25.2.7.10 与多个 NDB Cluster 节点相关的限制
- en: '**Multiple SQL nodes. ** The following are issues relating to the use of multiple
    MySQL servers as NDB Cluster SQL nodes, and are specific to the [`NDBCLUSTER`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") storage engine:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**多个 SQL 节点。** 以下是关于将多个 MySQL 服务器用作 NDB Cluster SQL 节点的问题，这些问题特定于[`NDBCLUSTER`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0")存储引擎：'
- en: '**Stored programs not distributed. ** Stored procedures, stored functions,
    triggers, and scheduled events are all supported by tables using the [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") storage engine, but these do *not* propagate
    automatically between MySQL Servers acting as Cluster SQL nodes, and must be re-created
    separately on each SQL node. See [Stored routines and triggers in NDB Cluster](stored-program-restrictions.html#stored-routines-ndbcluster
    "Stored routines and triggers in NDB Cluster").'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储程序不分布。** 存储过程、存储函数、触发器和定时事件都受到使用[`NDB`](mysql-cluster.html "Chapter 25
    MySQL NDB Cluster 8.0")存储引擎的表的支持，但这些内容*不会*在充当集群 SQL 节点的 MySQL 服务器之间自动传播，必须在每个
    SQL 节点上单独重新创建。请参阅[NDB Cluster 中的存储例程和触发器](stored-program-restrictions.html#stored-routines-ndbcluster
    "Stored routines and triggers in NDB Cluster")。'
- en: '**No distributed table locks. ** A [`LOCK TABLES`](lock-tables.html "15.3.6 LOCK
    TABLES and UNLOCK TABLES Statements") statement or [`GET_LOCK()`](locking-functions.html#function_get-lock)
    call works only for the SQL node on which the lock is issued; no other SQL node
    in the cluster “sees” this lock. This is true for a lock issued by any statement
    that locks tables as part of its operations. (See next item for an example.)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有分布式表锁。** [`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK
    TABLES Statements")语句或[`GET_LOCK()`](locking-functions.html#function_get-lock)调用仅对发出锁的
    SQL 节点有效；集群中的其他 SQL 节点不会“看到”此锁。这适用于锁定表作为其操作的一部分的任何语句发出的锁。 （请参阅下一项以获取示例。）'
- en: Implementing table locks in `NDBCLUSTER` can be done in an API application,
    and ensuring that all applications start by setting [`LockMode`](/doc/ndbapi/en/ndb-ndboperation.html#ndb-ndboperation-lockmode)
    to `LM_Read` or `LM_Exclusive`. For more information about how to do this, see
    the description of [`NdbOperation::getLockHandle()`](/doc/ndbapi/en/ndb-ndboperation.html#ndb-ndboperation-getlockhandle)
    in the *NDB Cluster API Guide*.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`NDBCLUSTER`中实现表锁可以在 API 应用程序中完成，并确保所有应用程序都通过将[`LockMode`](/doc/ndbapi/en/ndb-ndboperation.html#ndb-ndboperation-lockmode)设置为`LM_Read`或`LM_Exclusive`来启动。有关如何执行此操作的更多信息，请参阅*NDB
    Cluster API Guide*中[`NdbOperation::getLockHandle()`](/doc/ndbapi/en/ndb-ndboperation.html#ndb-ndboperation-getlockhandle)的描述。
- en: '**ALTER TABLE operations. ** [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") is not fully locking when running multiple MySQL servers (SQL
    nodes). (As discussed in the previous item, NDB Cluster does not support distributed
    table locks.)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ALTER TABLE 操作。** 在运行多个 MySQL 服务器（SQL 节点）时，[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")在执行时不会完全锁定。（正如前一项所讨论的，NDB Cluster 不支持分布式表锁。）'
- en: '**Multiple management nodes. ** When using multiple management servers:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**多个管理节点。** 在使用多个管理服务器时：'
- en: If any of the management servers are running on the same host, you must give
    nodes explicit IDs in connection strings because automatic allocation of node
    IDs does not work across multiple management servers on the same host. This is
    not required if every management server resides on a different host.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何管理服务器在同一主机上运行，则必须在连接字符串中为节点分配显式 ID，因为在同一主机上的多个管理服务器之间不会自动分配节点 ID。如果每个管理服务器位于不同的主机上，则不需要此操作。
- en: When a management server starts, it first checks for any other management server
    in the same NDB Cluster, and upon successful connection to the other management
    server uses its configuration data. This means that the management server [`--reload`](mysql-cluster-programs-ndb-mgmd.html#option_ndb_mgmd_reload)
    and [`--initial`](mysql-cluster-programs-ndb-mgmd.html#option_ndb_mgmd_initial)
    startup options are ignored unless the management server is the only one running.
    It also means that, when performing a rolling restart of an NDB Cluster with multiple
    management nodes, the management server reads its own configuration file if (and
    only if) it is the only management server running in this NDB Cluster. See [Section 25.6.5,
    “Performing a Rolling Restart of an NDB Cluster”](mysql-cluster-rolling-restart.html
    "25.6.5 Performing a Rolling Restart of an NDB Cluster"), for more information.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当管理服务器启动时，首先检查同一NDB集群中是否有其他管理服务器，并在成功连接到其他管理服务器后使用其配置数据。这意味着管理服务器[`--reload`](mysql-cluster-programs-ndb-mgmd.html#option_ndb_mgmd_reload)和[`--initial`](mysql-cluster-programs-ndb-mgmd.html#option_ndb_mgmd_initial)启动选项将被忽略，除非管理服务器是唯一运行的。这也意味着，在对具有多个管理节点的NDB集群执行滚动重启时，只有当管理服务器是该NDB集群中唯一运行的管理服务器时，管理服务器才会读取自己的配置文件。有关更多信息，请参见[第25.6.5节，“执行NDB集群的滚动重启”](mysql-cluster-rolling-restart.html
    "25.6.5 执行NDB集群的滚动重启")。
- en: '**Multiple network addresses. ** Multiple network addresses per data node are
    not supported. Use of these is liable to cause problems: In the event of a data
    node failure, an SQL node waits for confirmation that the data node went down
    but never receives it because another route to that data node remains open. This
    can effectively make the cluster inoperable.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**多个网络地址。** 每个数据节点的多个网络地址不受支持。使用这些可能会导致问题：在数据节点故障的情况下，SQL节点等待确认数据节点已关闭，但永远不会收到确认，因为到该数据节点的另一条路线仍然打开。这可能会导致集群无法运行。'
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to use multiple network hardware *interfaces* (such as Ethernet
    cards) for a single data node, but these must be bound to the same address. This
    also means that it not possible to use more than one `[tcp]` section per connection
    in the `config.ini` file. See [Section 25.4.3.10, “NDB Cluster TCP/IP Connections”](mysql-cluster-tcp-definition.html
    "25.4.3.10 NDB Cluster TCP/IP Connections"), for more information.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为单个数据节点使用多个网络硬件*接口*（例如以太网卡），但这些接口必须绑定到相同的地址。这也意味着在`config.ini`文件中每个连接中不可能使用多个`[tcp]`部分。有关更多信息，请参见[第25.4.3.10节，“NDB集群TCP/IP连接”](mysql-cluster-tcp-definition.html
    "25.4.3.10 NDB集群TCP/IP连接")。
