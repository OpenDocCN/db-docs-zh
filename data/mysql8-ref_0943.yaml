- en: 15.2.7 INSERT Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.2.7 插入语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/insert.html](https://dev.mysql.com/doc/refman/8.0/en/insert.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/insert.html](https://dev.mysql.com/doc/refman/8.0/en/insert.html)
- en: '[15.2.7.1 INSERT ... SELECT Statement](insert-select.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.2.7.1 插入...选择语句](insert-select.html)'
- en: '[15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement](insert-on-duplicate.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.2.7.2 插入...在重复键更新语句中](insert-on-duplicate.html)'
- en: '[15.2.7.3 INSERT DELAYED Statement](insert-delayed.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.2.7.3 延迟插入语句](insert-delayed.html)'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`INSERT`](insert.html "15.2.7 INSERT Statement") inserts new rows into an
    existing table. The [`INSERT ... VALUES`](insert.html "15.2.7 INSERT Statement"),
    [`INSERT ... VALUES ROW()`](values.html "15.2.19 VALUES Statement"), and [`INSERT
    ... SET`](insert.html "15.2.7 INSERT Statement") forms of the statement insert
    rows based on explicitly specified values. The [`INSERT ... SELECT`](insert-select.html
    "15.2.7.1 INSERT ... SELECT Statement") form inserts rows selected from another
    table or tables. You can also use [`INSERT ... TABLE`](table.html "15.2.16 TABLE
    Statement") in MySQL 8.0.19 and later to insert rows from a single table. [`INSERT`](insert.html
    "15.2.7 INSERT Statement") with an `ON DUPLICATE KEY UPDATE` clause enables existing
    rows to be updated if a row to be inserted would cause a duplicate value in a
    `UNIQUE` index or `PRIMARY KEY`. In MySQL 8.0.19 and later, a row alias with one
    or more optional column aliases can be used with `ON DUPLICATE KEY UPDATE` to
    refer to the row to be inserted.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`INSERT`](insert.html "15.2.7 INSERT Statement")将新行插入到现有表中。[`INSERT ... VALUES`](insert.html
    "15.2.7 INSERT Statement")、[`INSERT ... VALUES ROW()`](values.html "15.2.19 VALUES
    Statement")和[`INSERT ... SET`](insert.html "15.2.7 INSERT Statement")形式的语句根据明确指定的值插入行。[`INSERT
    ... SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement")形式从另一个表或表中选择的行插入。您还可以在MySQL
    8.0.19及更高版本中使用[`INSERT ... TABLE`](table.html "15.2.16 TABLE Statement")从单个表中插入行。带有`ON
    DUPLICATE KEY UPDATE`子句的[`INSERT`](insert.html "15.2.7 INSERT Statement")使得如果要插入的行会导致在`UNIQUE`索引或`PRIMARY
    KEY`中出现重复值，则现有行可以被更新。在MySQL 8.0.19及更高版本中，可以使用带有一个或多个可选列别名的行别名与`ON DUPLICATE KEY
    UPDATE`一起引用要插入的行。'
- en: For additional information about [`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT
    ... SELECT Statement") and [`INSERT ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement"), see [Section 15.2.7.1,
    “INSERT ... SELECT Statement”](insert-select.html "15.2.7.1 INSERT ... SELECT
    Statement"), and [Section 15.2.7.2, “INSERT ... ON DUPLICATE KEY UPDATE Statement”](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement")和[`INSERT
    ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON
    DUPLICATE KEY UPDATE Statement")的更多信息，请参见[第15.2.7.1节，“插入...选择语句”](insert-select.html
    "15.2.7.1 INSERT ... SELECT Statement")和[第15.2.7.2节，“插入...在重复键更新语句中”](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement")。
- en: In MySQL 8.0, the `DELAYED` keyword is accepted but ignored by the server. For
    the reasons for this, see [Section 15.2.7.3, “INSERT DELAYED Statement”](insert-delayed.html
    "15.2.7.3 INSERT DELAYED Statement"),
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，服务器接受但忽略`DELAYED`关键字。关于这一点的原因，请参见[第15.2.7.3节，“延迟插入语句”](insert-delayed.html
    "15.2.7.3 INSERT DELAYED Statement")，
- en: Inserting into a table requires the [`INSERT`](privileges-provided.html#priv_insert)
    privilege for the table. If the `ON DUPLICATE KEY UPDATE` clause is used and a
    duplicate key causes an [`UPDATE`](update.html "15.2.17 UPDATE Statement") to
    be performed instead, the statement requires the [`UPDATE`](privileges-provided.html#priv_update)
    privilege for the columns to be updated. For columns that are read but not modified
    you need only the [`SELECT`](privileges-provided.html#priv_select) privilege (such
    as for a column referenced only on the right hand side of an *`col_name`*=*`expr`*
    assignment in an `ON DUPLICATE KEY UPDATE` clause).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 插入到表中需要表的[`INSERT`](privileges-provided.html#priv_insert)权限。如果使用`ON DUPLICATE
    KEY UPDATE`子句，并且重复键导致执行[`UPDATE`](update.html "15.2.17 UPDATE Statement")，则语句需要更新要更新的列的[`UPDATE`](privileges-provided.html#priv_update)权限。对于只读取但不修改的列，您只需要[`SELECT`](privileges-provided.html#priv_select)权限（例如，在`ON
    DUPLICATE KEY UPDATE`子句中仅在赋值的右侧引用的列）。
- en: When inserting into a partitioned table, you can control which partitions and
    subpartitions accept new rows. The `PARTITION` clause takes a list of the comma-separated
    names of one or more partitions or subpartitions (or both) of the table. If any
    of the rows to be inserted by a given [`INSERT`](insert.html "15.2.7 INSERT Statement")
    statement do not match one of the partitions listed, the [`INSERT`](insert.html
    "15.2.7 INSERT Statement") statement fails with the error Found a row not matching
    the given partition set. For more information and examples, see [Section 26.5,
    “Partition Selection”](partitioning-selection.html "26.5 Partition Selection").
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在插入分区表时，可以控制哪些分区和子分区接受新行。`PARTITION`子句接受表的一个或多个分区或子分区（或两者）的逗号分隔名称列表。如果给定[`INSERT`](insert.html
    "15.2.7 INSERT Statement")语句要插入的任何行与列出的分区之一不匹配，则该[`INSERT`](insert.html "15.2.7 INSERT
    Statement")语句将失败，并显示错误消息找到一个不匹配给定分区集的行。有关更多信息和示例，请参见[第26.5节，“分区选择”](partitioning-selection.html
    "26.5 Partition Selection")。
- en: '*`tbl_name`* is the table into which rows should be inserted. Specify the columns
    for which the statement provides values as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*`tbl_name`*是应该插入行的表。按照以下方式指定语句提供值的列：'
- en: Provide a parenthesized list of comma-separated column names following the table
    name. In this case, a value for each named column must be provided by the `VALUES`
    list, [`VALUES ROW()`](values.html "15.2.19 VALUES Statement") list, or [`SELECT`](select.html
    "15.2.13 SELECT Statement") statement. For the `INSERT TABLE` form, the number
    of columns in the source table must match the number of columns to be inserted.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表名后提供一个用逗号分隔的列名的括号列表。在这种情况下，每个命名列的值必须由`VALUES`列表、[`VALUES ROW()`](values.html
    "15.2.19 VALUES Statement")列表或[`SELECT`](select.html "15.2.13 SELECT Statement")语句提供。对于`INSERT
    TABLE`形式，源表中的列数必须与要插入的列数相匹配。
- en: If you do not specify a list of column names for [`INSERT ... VALUES`](insert.html
    "15.2.7 INSERT Statement") or [`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT
    ... SELECT Statement"), values for every column in the table must be provided
    by the `VALUES` list, [`SELECT`](select.html "15.2.13 SELECT Statement") statement,
    or [`TABLE`](table.html "15.2.16 TABLE Statement") statement. If you do not know
    the order of the columns in the table, use `DESCRIBE *`tbl_name`*` to find out.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果对于[`INSERT ... VALUES`](insert.html "15.2.7 INSERT Statement")或[`INSERT ...
    SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement")没有指定列名列表，则必须通过`VALUES`列表、[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句或[`TABLE`](table.html "15.2.16 TABLE Statement")语句为表中的每个列提供值。如果不知道表中列的顺序，请使用`DESCRIBE
    *`tbl_name`*`来查找。
- en: A `SET` clause indicates columns explicitly by name, together with the value
    to assign each one.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET`子句通过列名明确指定，以及为每个列分配的值。'
- en: 'Column values can be given in several ways:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 列值可以以多种方式给出：
- en: If strict SQL mode is not enabled, any column not explicitly given a value is
    set to its default (explicit or implicit) value. For example, if you specify a
    column list that does not name all the columns in the table, unnamed columns are
    set to their default values. Default value assignment is described in [Section 13.6,
    “Data Type Default Values”](data-type-defaults.html "13.6 Data Type Default Values").
    See also [Section 1.6.3.3, “Enforced Constraints on Invalid Data”](constraint-invalid-data.html
    "1.6.3.3 Enforced Constraints on Invalid Data").
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用严格的SQL模式，则未明确给定值的任何列都将设置为其默认（显式或隐式）值。例如，如果指定的列列表未命名表中的所有列，则未命名列将设置为其默认值。默认值分配在[第13.6节，“数据类型默认值”](data-type-defaults.html
    "13.6 Data Type Default Values")中描述。另请参阅[第1.6.3.3节，“对无效数据的强制约束”](constraint-invalid-data.html
    "1.6.3.3 Enforced Constraints on Invalid Data")。
- en: If strict SQL mode is enabled, an [`INSERT`](insert.html "15.2.7 INSERT Statement")
    statement generates an error if it does not specify an explicit value for every
    column that has no default value. See [Section 7.1.11, “Server SQL Modes”](sql-mode.html
    "7.1.11 Server SQL Modes").
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果启用了严格的SQL模式，[`INSERT`](insert.html "15.2.7 INSERT Statement")语句将在没有为没有默认值的每个列指定显式值时生成错误。参见[第7.1.11节，“服务器SQL模式”](sql-mode.html
    "7.1.11 Server SQL Modes")。
- en: 'If both the column list and the `VALUES` list are empty, [`INSERT`](insert.html
    "15.2.7 INSERT Statement") creates a row with each column set to its default value:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果列列表和`VALUES`列表都为空，[`INSERT`](insert.html "15.2.7 INSERT Statement")将创建一行，其中每个列都设置为其默认值：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If strict mode is not enabled, MySQL uses the implicit default value for any
    column that has no explicitly defined default. If strict mode is enabled, an error
    occurs if any column has no default value.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未启用严格模式，MySQL将对任何没有明确定义默认值的列使用隐式默认值。如果启用了严格模式，如果任何列没有默认值，则会发生错误。
- en: Use the keyword `DEFAULT` to set a column explicitly to its default value. This
    makes it easier to write [`INSERT`](insert.html "15.2.7 INSERT Statement") statements
    that assign values to all but a few columns, because it enables you to avoid writing
    an incomplete `VALUES` list that does not include a value for each column in the
    table. Otherwise, you must provide the list of column names corresponding to each
    value in the `VALUES` list.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用关键字`DEFAULT`将列明确设置为其默认值。这样可以更轻松地编写[`INSERT`](insert.html "15.2.7 INSERT Statement")语句，为除少数列外的所有列分配值，因为它使您可以避免编写不包括表中每列值的不完整`VALUES`列表。否则，您必须提供与`VALUES`列表中每个值对应的列名列表。
- en: If a generated column is inserted into explicitly, the only permitted value
    is `DEFAULT`. For information about generated columns, see [Section 15.1.20.8,
    “CREATE TABLE and Generated Columns”](create-table-generated-columns.html "15.1.20.8 CREATE
    TABLE and Generated Columns").
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果插入生成的列，则唯一允许的值是`DEFAULT`。有关生成列的信息，请参见[第 15.1.20.8 节，“CREATE TABLE and Generated
    Columns”](create-table-generated-columns.html "15.1.20.8 CREATE TABLE and Generated
    Columns")。
- en: In expressions, you can use [`DEFAULT(*`col_name`*)`](miscellaneous-functions.html#function_default)
    to produce the default value for column *`col_name`*.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表达式中，您可以使用[`DEFAULT(*`col_name`*)`](miscellaneous-functions.html#function_default)来为列*`col_name`*生成默认值。
- en: Type conversion of an expression *`expr`* that provides a column value might
    occur if the expression data type does not match the column data type. Conversion
    of a given value can result in different inserted values depending on the column
    type. For example, inserting the string `'1999.0e-2'` into an [`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT"), [`FLOAT`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE"), [`DECIMAL(10,6)`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC"), or [`YEAR`](year.html "13.2.4 The YEAR
    Type") column inserts the value `1999`, `19.9921`, `19.992100`, or `1999`, respectively.
    The value stored in the [`INT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") and [`YEAR`](year.html
    "13.2.4 The YEAR Type") columns is `1999` because the string-to-number conversion
    looks only at as much of the initial part of the string as may be considered a
    valid integer or year. For the [`FLOAT`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE") and [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") columns, the string-to-number
    conversion considers the entire string a valid numeric value.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供列值的表达式*`expr`*的数据类型与列数据类型不匹配，则可能发生类型转换。给定值的转换可能导致根据列类型而插入不同的值。例如，将字符串`'1999.0e-2'`插入到[`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT")、[`FLOAT`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE")、[`DECIMAL(10,6)`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC")或[`YEAR`](year.html "13.2.4 The YEAR Type")列中，分别插入值`1999`、`19.9921`、`19.992100`或`1999`。存储在[`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT")和[`YEAR`](year.html "13.2.4 The YEAR Type")列中的值为`1999`，因为字符串转换为数字仅查看字符串的初始部分，该部分可能被视为有效整数或年份。对于[`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE")和[`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC")列，字符串转换为数字将整个字符串视为有效的数值。
- en: 'An expression *`expr`* can refer to any column that was set earlier in a value
    list. For example, you can do this because the value for `col2` refers to `col1`,
    which has previously been assigned:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式*`expr`*可以引用先前在值列表中设置的任何列。例如，您可以这样做，因为`col2`的值引用了先前分配的`col1`：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But the following is not legal, because the value for `col1` refers to `col2`,
    which is assigned after `col1`:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 但是以下内容是不合法的，因为`col1`的值引用了在`col1`之后分配的`col2`：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: An exception occurs for columns that contain `AUTO_INCREMENT` values. Because
    `AUTO_INCREMENT` values are generated after other value assignments, any reference
    to an `AUTO_INCREMENT` column in the assignment returns a `0`.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于包含`AUTO_INCREMENT`值的列会出现异常。因为`AUTO_INCREMENT`值是在其他值分配之后生成的，对`AUTO_INCREMENT`列的任何引用在赋值时返回`0`。
- en: '[`INSERT`](insert.html "15.2.7 INSERT Statement") statements that use `VALUES`
    syntax can insert multiple rows. To do this, include multiple lists of comma-separated
    column values, with lists enclosed within parentheses and separated by commas.
    Example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`VALUES`语法的[`INSERT`](insert.html "15.2.7 INSERT Statement")语句可以插入多行。要做到这一点，包含多个逗号分隔的列值列表，列表用括号括起并用逗号分隔。示例：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Each values list must contain exactly as many values as are to be inserted
    per row. The following statement is invalid because it contains one list of nine
    values, rather than three lists of three values each:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个值列表必须包含与要插入的每行的值数量完全相同的值。以下语句是无效的，因为它包含一个包含九个值的列表，而不是三个包含三个值的列表：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`VALUE` is a synonym for `VALUES` in this context. Neither implies anything
    about the number of values lists, nor about the number of values per list. Either
    may be used whether there is a single values list or multiple lists, and regardless
    of the number of values per list.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`VALUE`是`VALUES`的同义词。两者都不暗示值列表的数量，也不暗示每个列表的值的数量。无论是单个值列表还是多个列表，以及每个列表中的值的数量，都可以使用任一项。
- en: '[`INSERT`](insert.html "15.2.7 INSERT Statement") statements using [`VALUES
    ROW()`](values.html "15.2.19 VALUES Statement") syntax can also insert multiple
    rows. In this case, each value list must be contained within a `ROW()` (row constructor),
    like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`VALUES ROW()`](values.html "15.2.19 VALUES Statement")语法的[`INSERT`](insert.html
    "15.2.7 INSERT Statement")语句也可以插入多行。在这种情况下，每个值列表必须包含在一个`ROW()`（行构造函数）中，就像这样：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The affected-rows value for an [`INSERT`](insert.html "15.2.7 INSERT Statement")
    can be obtained using the [`ROW_COUNT()`](information-functions.html#function_row-count)
    SQL function or the [`mysql_affected_rows()`](/doc/c-api/8.0/en/mysql-affected-rows.html)
    C API function. See [Section 14.15, “Information Functions”](information-functions.html
    "14.15 Information Functions"), and [mysql_affected_rows()](/doc/c-api/8.0/en/mysql-affected-rows.html).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`ROW_COUNT()`](information-functions.html#function_row-count) SQL函数或[`mysql_affected_rows()`](/doc/c-api/8.0/en/mysql-affected-rows.html)
    C API函数获取[`INSERT`](insert.html "15.2.7 INSERT Statement")的受影响行数。请参阅[第14.15节，“信息函数”](information-functions.html
    "14.15 Information Functions")和[mysql_affected_rows()](/doc/c-api/8.0/en/mysql-affected-rows.html)。
- en: 'If you use [`INSERT ... VALUES`](insert.html "15.2.7 INSERT Statement") or
    `INSERT ... VALUES ROW()` with multiple value lists, or [`INSERT ... SELECT`](insert-select.html
    "15.2.7.1 INSERT ... SELECT Statement") or `INSERT ... TABLE`, the statement returns
    an information string in this format:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用[`INSERT ... VALUES`](insert.html "15.2.7 INSERT Statement")或`INSERT ...
    VALUES ROW()`插入多个值列表，或者[`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT
    ... SELECT Statement")或`INSERT ... TABLE`，则语句以以下格式返回信息字符串：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you are using the C API, the information string can be obtained by invoking
    the [`mysql_info()`](/doc/c-api/8.0/en/mysql-info.html) function. See [mysql_info()](/doc/c-api/8.0/en/mysql-info.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用C API，可以通过调用[`mysql_info()`](/doc/c-api/8.0/en/mysql-info.html)函数获取信息字符串。请参阅[mysql_info()](/doc/c-api/8.0/en/mysql-info.html)。
- en: '`Records` indicates the number of rows processed by the statement. (This is
    not necessarily the number of rows actually inserted because `Duplicates` can
    be nonzero.) `Duplicates` indicates the number of rows that could not be inserted
    because they would duplicate some existing unique index value. `Warnings` indicates
    the number of attempts to insert column values that were problematic in some way.
    Warnings can occur under any of the following conditions:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`Records`表示语句处理的行数。（这不一定是实际插入的行数，因为`Duplicates`可能不为零。）`Duplicates`表示由于重复某些现有唯一索引值而无法插入的行数。`Warnings`表示尝试插入某种方式有问题的列值的次数。警告可能在以下任何条件下发生：'
- en: Inserting `NULL` into a column that has been declared `NOT NULL`. For multiple-row
    [`INSERT`](insert.html "15.2.7 INSERT Statement") statements or [`INSERT INTO
    ... SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement") statements,
    the column is set to the implicit default value for the column data type. This
    is `0` for numeric types, the empty string (`''`) for string types, and the “zero”
    value for date and time types. [`INSERT INTO ... SELECT`](insert-select.html "15.2.7.1 INSERT
    ... SELECT Statement") statements are handled the same way as multiple-row inserts
    because the server does not examine the result set from the [`SELECT`](select.html
    "15.2.13 SELECT Statement") to see whether it returns a single row. (For a single-row
    [`INSERT`](insert.html "15.2.7 INSERT Statement"), no warning occurs when `NULL`
    is inserted into a `NOT NULL` column. Instead, the statement fails with an error.)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`NULL`插入已声明为`NOT NULL`的列。对于多行[`INSERT`](insert.html "15.2.7 INSERT Statement")语句或[`INSERT
    INTO ... SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT Statement")语句，该列设置为列数据类型的隐式默认值。对于数值类型，这是`0`，对于字符串类型，这是空字符串（`''`），对于日期和时间类型，这是“零”值。由于服务器不会检查[`SELECT`](select.html
    "15.2.13 SELECT Statement")的结果集是否返回单行，因此[`INSERT INTO ... SELECT`](insert-select.html
    "15.2.7.1 INSERT ... SELECT Statement")语句与多行插入处理方式相同。 （对于单行[`INSERT`](insert.html
    "15.2.7 INSERT Statement")，当将`NULL`插入到`NOT NULL`列时，不会发出警告。相反，该语句将因错误而失败。）
- en: Setting a numeric column to a value that lies outside the column range. The
    value is clipped to the closest endpoint of the range.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数值列设置为超出列范围的值。该值被截断为范围的最近端点。
- en: Assigning a value such as `'10.34 a'` to a numeric column. The trailing nonnumeric
    text is stripped off and the remaining numeric part is inserted. If the string
    value has no leading numeric part, the column is set to `0`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将值赋给数值列，例如`'10.34 a'`。尾随的非数字文本被剥离，剩余的数值部分被插入。如果字符串值没有前导数值部分，则该列设置为`0`。
- en: Inserting a string into a string column ([`CHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types"), [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"),
    [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types"), or [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types")) that exceeds the column maximum length. The value is truncated
    to the column maximum length.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符串插入字符串列（[`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")、[`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")、[`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types")或[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")），其超过列的最大长度。该值被截断为列的最大长度。
- en: Inserting a value into a date or time column that is illegal for the data type.
    The column is set to the appropriate zero value for the type.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将值插入日期或时间列，该值对于数据类型是非法的。该列设置为该类型的适当零值。
- en: For [`INSERT`](insert.html "15.2.7 INSERT Statement") examples involving `AUTO_INCREMENT`
    column values, see [Section 5.6.9, “Using AUTO_INCREMENT”](example-auto-increment.html
    "5.6.9 Using AUTO_INCREMENT").
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关涉及`AUTO_INCREMENT`列值的[`INSERT`](insert.html "15.2.7 INSERT Statement")示例，请参见[第5.6.9节“使用AUTO_INCREMENT”](example-auto-increment.html
    "5.6.9 Using AUTO_INCREMENT")。
- en: If [`INSERT`](insert.html "15.2.7 INSERT Statement") inserts a row into a table
    that has an `AUTO_INCREMENT` column, you can find the value used for that column
    by using the [`LAST_INSERT_ID()`](information-functions.html#function_last-insert-id)
    SQL function or the [`mysql_insert_id()`](/doc/c-api/8.0/en/mysql-insert-id.html)
    C API function.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果[`INSERT`](insert.html "15.2.7 INSERT Statement")向具有`AUTO_INCREMENT`列的表中插入一行，则可以使用[`LAST_INSERT_ID()`](information-functions.html#function_last-insert-id)
    SQL函数或[`mysql_insert_id()`](/doc/c-api/8.0/en/mysql-insert-id.html) C API函数找到用于该列的值。
- en: Note
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: These two functions do not always behave identically. The behavior of [`INSERT`](insert.html
    "15.2.7 INSERT Statement") statements with respect to `AUTO_INCREMENT` columns
    is discussed further in [Section 14.15, “Information Functions”](information-functions.html
    "14.15 Information Functions"), and [mysql_insert_id()](/doc/c-api/8.0/en/mysql-insert-id.html).
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个函数的行为并不总是相同。关于与`AUTO_INCREMENT`列有关的[`INSERT`](insert.html "15.2.7 INSERT
    Statement")语句的行为在[第14.15节“信息函数”](information-functions.html "14.15 Information
    Functions")和[mysql_insert_id()](/doc/c-api/8.0/en/mysql-insert-id.html)中进一步讨论。
- en: 'The [`INSERT`](insert.html "15.2.7 INSERT Statement") statement supports the
    following modifiers:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`INSERT`](insert.html "15.2.7 INSERT Statement")语句支持以下修饰符：'
- en: If you use the `LOW_PRIORITY` modifier, execution of the [`INSERT`](insert.html
    "15.2.7 INSERT Statement") is delayed until no other clients are reading from
    the table. This includes other clients that began reading while existing clients
    are reading, and while the `INSERT LOW_PRIORITY` statement is waiting. It is possible,
    therefore, for a client that issues an `INSERT LOW_PRIORITY` statement to wait
    for a very long time.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用`LOW_PRIORITY`修饰符，[`INSERT`](insert.html "15.2.7 INSERT语句")的执行将延迟，直到没有其他客户端从表中读取数据。这包括在现有客户端正在读取数据时开始读取数据的其他客户端，以及`INSERT
    LOW_PRIORITY`语句正在等待的情况。因此，发出`INSERT LOW_PRIORITY`语句的客户端可能需要等待很长时间。
- en: '`LOW_PRIORITY` affects only storage engines that use only table-level locking
    (such as `MyISAM`, `MEMORY`, and `MERGE`).'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LOW_PRIORITY`仅影响仅使用表级锁定的存储引擎（如`MyISAM`，`MEMORY`和`MERGE`）。'
- en: Note
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '`LOW_PRIORITY` should normally not be used with `MyISAM` tables because doing
    so disables concurrent inserts. See [Section 10.11.3, “Concurrent Inserts”](concurrent-inserts.html
    "10.11.3 Concurrent Inserts").'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LOW_PRIORITY`通常不应与`MyISAM`表一起使用，因为这样做会禁用并发插入。参见[第10.11.3节，“并发插入”](concurrent-inserts.html
    "10.11.3 并发插入")。'
- en: If you specify `HIGH_PRIORITY`, it overrides the effect of the [`--low-priority-updates`](server-system-variables.html#sysvar_low_priority_updates)
    option if the server was started with that option. It also causes concurrent inserts
    not to be used. See [Section 10.11.3, “Concurrent Inserts”](concurrent-inserts.html
    "10.11.3 Concurrent Inserts").
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果指定了`HIGH_PRIORITY`，它会覆盖服务器在启动时使用[`--low-priority-updates`](server-system-variables.html#sysvar_low_priority_updates)选项的效果。它还会导致不使用并发插入。参见[第10.11.3节，“并发插入”](concurrent-inserts.html
    "10.11.3 并发插入")。
- en: '`HIGH_PRIORITY` affects only storage engines that use only table-level locking
    (such as `MyISAM`, `MEMORY`, and `MERGE`).'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`HIGH_PRIORITY`仅影响仅使用表级锁定的存储引擎（如`MyISAM`，`MEMORY`和`MERGE`）。'
- en: If you use the `IGNORE` modifier, ignorable errors that occur while executing
    the [`INSERT`](insert.html "15.2.7 INSERT Statement") statement are ignored. For
    example, without `IGNORE`, a row that duplicates an existing `UNIQUE` index or
    `PRIMARY KEY` value in the table causes a duplicate-key error and the statement
    is aborted. With `IGNORE`, the row is discarded and no error occurs. Ignored errors
    generate warnings instead.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用`IGNORE`修饰符，执行[`INSERT`](insert.html "15.2.7 INSERT语句")语句时发生的可忽略错误将被忽略。例如，如果没有`IGNORE`，在表中重复现有`UNIQUE`索引或`PRIMARY
    KEY`值的行会导致重复键错误并中止语句。使用`IGNORE`，该行将被丢弃，不会发生错误。被忽略的错误会生成警告。
- en: '`IGNORE` has a similar effect on inserts into partitioned tables where no partition
    matching a given value is found. Without `IGNORE`, such [`INSERT`](insert.html
    "15.2.7 INSERT Statement") statements are aborted with an error. When [`INSERT
    IGNORE`](insert.html "15.2.7 INSERT Statement") is used, the insert operation
    fails silently for rows containing the unmatched value, but inserts rows that
    are matched. For an example, see [Section 26.2.2, “LIST Partitioning”](partitioning-list.html
    "26.2.2 LIST Partitioning").'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`IGNORE`对于插入到未找到匹配给定值的分区表具有类似的效果。如果没有`IGNORE`，这样的[`INSERT`](insert.html "15.2.7 INSERT语句")语句将因错误而中止。当使用[`INSERT
    IGNORE`](insert.html "15.2.7 INSERT语句")时，对于包含不匹配值的行，插入操作会悄悄失败，但会插入匹配的行。例如，请参见[第26.2.2节，“LIST分区”](partitioning-list.html
    "26.2.2 LIST分区")。'
- en: Data conversions that would trigger errors abort the statement if `IGNORE` is
    not specified. With `IGNORE`, invalid values are adjusted to the closest values
    and inserted; warnings are produced but the statement does not abort. You can
    determine with the [`mysql_info()`](/doc/c-api/8.0/en/mysql-info.html) C API function
    how many rows were actually inserted into the table.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未指定`IGNORE`，会触发错误的数据转换将中止语句。使用`IGNORE`，无效值将调整为最接近的值并插入；会产生警告，但语句不会中止。您可以使用[`mysql_info()`](/doc/c-api/8.0/en/mysql-info.html)
    C API函数确定实际插入表中的行数。
- en: For more information, see [The Effect of IGNORE on Statement Execution](sql-mode.html#ignore-effect-on-execution
    "The Effect of IGNORE on Statement Execution").
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[IGNORE对语句执行的影响](sql-mode.html#ignore-effect-on-execution "IGNORE对语句执行的影响")。
- en: 'You can use [`REPLACE`](replace.html "15.2.12 REPLACE Statement") instead of
    [`INSERT`](insert.html "15.2.7 INSERT Statement") to overwrite old rows. [`REPLACE`](replace.html
    "15.2.12 REPLACE Statement") is the counterpart to [`INSERT IGNORE`](insert.html
    "15.2.7 INSERT Statement") in the treatment of new rows that contain unique key
    values that duplicate old rows: The new rows replace the old rows rather than
    being discarded. See [Section 15.2.12, “REPLACE Statement”](replace.html "15.2.12 REPLACE
    Statement").'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用[`REPLACE`](replace.html "15.2.12 REPLACE Statement")来覆盖旧行，而不是使用[`INSERT`](insert.html
    "15.2.7 INSERT Statement")。[`REPLACE`](replace.html "15.2.12 REPLACE Statement")是对待包含重复旧行的唯一键值的新行的处理的对应项：新行取代旧行而不是被丢弃。参见[Section 15.2.12,
    “REPLACE Statement”](replace.html "15.2.12 REPLACE Statement")。
- en: If you specify `ON DUPLICATE KEY UPDATE`, and a row is inserted that would cause
    a duplicate value in a `UNIQUE` index or `PRIMARY KEY`, an [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") of the old row occurs. The affected-rows value per
    row is 1 if the row is inserted as a new row, 2 if an existing row is updated,
    and 0 if an existing row is set to its current values. If you specify the `CLIENT_FOUND_ROWS`
    flag to the [`mysql_real_connect()`](/doc/c-api/8.0/en/mysql-real-connect.html)
    C API function when connecting to [**mysqld**](mysqld.html "6.3.1 mysqld — The
    MySQL Server"), the affected-rows value is 1 (not 0) if an existing row is set
    to its current values. See [Section 15.2.7.2, “INSERT ... ON DUPLICATE KEY UPDATE
    Statement”](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE
    Statement").
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你指定了`ON DUPLICATE KEY UPDATE`，并且插入了一行会导致在`UNIQUE`索引或`PRIMARY KEY`中出现重复值的情况，旧行将被[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")。每行的受影响行数为1，如果该行被插入为新行，则为2，如果更新了现有行，则为0。如果在连接到[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")时，通过在[`mysql_real_connect()`](/doc/c-api/8.0/en/mysql-real-connect.html)
    C API函数中指定`CLIENT_FOUND_ROWS`标志，受影响行数为1（而不是0），如果现有行被设置为其当前值。参见[Section 15.2.7.2,
    “INSERT ... ON DUPLICATE KEY UPDATE Statement”](insert-on-duplicate.html "15.2.7.2 INSERT
    ... ON DUPLICATE KEY UPDATE Statement")。
- en: '[`INSERT DELAYED`](insert-delayed.html "15.2.7.3 INSERT DELAYED Statement")
    was deprecated in MySQL 5.6, and is scheduled for eventual removal. In MySQL 8.0,
    the `DELAYED` modifier is accepted but ignored. Use `INSERT` (without `DELAYED`)
    instead. See [Section 15.2.7.3, “INSERT DELAYED Statement”](insert-delayed.html
    "15.2.7.3 INSERT DELAYED Statement").'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INSERT DELAYED`](insert-delayed.html "15.2.7.3 INSERT DELAYED Statement")在MySQL
    5.6中已被弃用，并计划最终移除。在MySQL 8.0中，`DELAYED`修饰符被接受但被忽略。请改用`INSERT`（不带`DELAYED`）。参见[Section 15.2.7.3,
    “INSERT DELAYED Statement”](insert-delayed.html "15.2.7.3 INSERT DELAYED Statement")。'
