- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/limit-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/limit-optimization.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/limit-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/limit-optimization.html)
- en: 10.2.1.19 LIMIT Query Optimization
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.2.1.19 LIMIT查询优化
- en: If you need only a specified number of rows from a result set, use a `LIMIT`
    clause in the query, rather than fetching the whole result set and throwing away
    the extra data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只需要结果集中的指定数量的行，请在查询中使用`LIMIT`子句，而不是获取整个结果集并丢弃额外的数据。
- en: 'MySQL sometimes optimizes a query that has a `LIMIT *`row_count`*` clause and
    no `HAVING` clause:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL有时会优化具有`LIMIT *`row_count`*`子句而没有`HAVING`子句的查询：
- en: If you select only a few rows with `LIMIT`, MySQL uses indexes in some cases
    when normally it would prefer to do a full table scan.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用`LIMIT`只选择了少数几行，MySQL在某些情况下会使用索引，而通常情况下它更倾向于进行全表扫描。
- en: If you combine `LIMIT *`row_count`*` with `ORDER BY`, MySQL stops sorting as
    soon as it has found the first *`row_count`* rows of the sorted result, rather
    than sorting the entire result. If ordering is done by using an index, this is
    very fast. If a filesort must be done, all rows that match the query without the
    `LIMIT` clause are selected, and most or all of them are sorted, before the first
    *`row_count`* are found. After the initial rows have been found, MySQL does not
    sort any remainder of the result set.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果将`LIMIT *`row_count`*`与`ORDER BY`结合使用，MySQL会在找到排序结果的前*`row_count`*行后停止排序，而不是对整个结果进行排序。如果使用索引进行排序，这是非常快的。如果必须进行文件排序，那么在找到不带`LIMIT`子句的查询的所有匹配行之前，将选择大多数或全部行，并对它们进行排序，然后才找到前*`row_count`*行。在找到初始行之后，MySQL不会对结果集的任何剩余部分进行排序。
- en: One manifestation of this behavior is that an `ORDER BY` query with and without
    `LIMIT` may return rows in different order, as described later in this section.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种行为的一种表现是，带有和不带有`LIMIT`的`ORDER BY`查询可能以不同的顺序返回行，如本节后面所述。
- en: If you combine `LIMIT *`row_count`*` with `DISTINCT`, MySQL stops as soon as
    it finds *`row_count`* unique rows.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果将`LIMIT *`row_count`*`与`DISTINCT`结合使用，MySQL会在找到*`row_count`*个唯一行后停止。
- en: In some cases, a `GROUP BY` can be resolved by reading the index in order (or
    doing a sort on the index), then calculating summaries until the index value changes.
    In this case, `LIMIT *`row_count`*` does not calculate any unnecessary `GROUP
    BY` values.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些情况下，`GROUP BY`可以通过按顺序读取索引（或对索引进行排序），然后计算摘要直到索引值发生变化来解决。在这种情况下，`LIMIT *`row_count`*`不会计算任何不必要的`GROUP
    BY`值。
- en: As soon as MySQL has sent the required number of rows to the client, it aborts
    the query unless you are using `SQL_CALC_FOUND_ROWS`. In that case, the number
    of rows can be retrieved with `SELECT FOUND_ROWS()`. See [Section 14.15, “Information
    Functions”](information-functions.html "14.15 Information Functions").
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦MySQL向客户端发送了所需数量的行，除非你使用`SQL_CALC_FOUND_ROWS`，否则它会中止查询。在这种情况下，可以使用`SELECT
    FOUND_ROWS()`检索行数。参见[第14.15节，“信息函数”](information-functions.html "14.15 信息函数")。
- en: '`LIMIT 0` quickly returns an empty set. This can be useful for checking the
    validity of a query. It can also be employed to obtain the types of the result
    columns within applications that use a MySQL API that makes result set metadata
    available. With the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") client program, you can use the [`--column-type-info`](mysql-command-options.html#option_mysql_column-type-info)
    option to display result column types.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LIMIT 0`会快速返回一个空集。这对于检查查询的有效性很有用。它还可以用于在使用使结果集元数据可用的MySQL API的应用程序中获取结果列的类型。使用[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")客户端程序，你可以使用[`--column-type-info`](mysql-command-options.html#option_mysql_column-type-info)选项来显示结果列类型。'
- en: If the server uses temporary tables to resolve a query, it uses the `LIMIT *`row_count`*`
    clause to calculate how much space is required.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果服务器使用临时表来解析查询，它会使用`LIMIT *`row_count`*`子句来计算所需的空间。
- en: If an index is not used for `ORDER BY` but a `LIMIT` clause is also present,
    the optimizer may be able to avoid using a merge file and sort the rows in memory
    using an in-memory `filesort` operation.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未对`ORDER BY`使用索引但同时存在`LIMIT`子句，优化器可能能够避免使用合并文件，并使用内存中的`filesort`操作在内存中对行进行排序。
- en: If multiple rows have identical values in the `ORDER BY` columns, the server
    is free to return those rows in any order, and may do so differently depending
    on the overall execution plan. In other words, the sort order of those rows is
    nondeterministic with respect to the nonordered columns.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果多行在`ORDER BY`列中具有相同的值，服务器可以自由地以任何顺序返回这些行，并且可能根据整体执行计划而有所不同。换句话说，这些行的排序顺序对于非排序列是不确定的。
- en: 'One factor that affects the execution plan is `LIMIT`, so an `ORDER BY` query
    with and without `LIMIT` may return rows in different orders. Consider this query,
    which is sorted by the `category` column but nondeterministic with respect to
    the `id` and `rating` columns:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 影响执行计划的一个因素是`LIMIT`，因此带有和不带有`LIMIT`的`ORDER BY`查询可能以不同的顺序返回行。考虑这个查询，它按`category`列排序，但对于`id`和`rating`列是不确定的：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Including `LIMIT` may affect order of rows within each `category` value. For
    example, this is a valid query result:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 包含`LIMIT`可能会影响每个`category`值内行的顺序。例如，这是一个有效的查询结果：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In each case, the rows are sorted by the `ORDER BY` column, which is all that
    is required by the SQL standard.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，行都按照`ORDER BY`列排序，这是SQL标准要求的全部内容。
- en: 'If it is important to ensure the same row order with and without `LIMIT`, include
    additional columns in the `ORDER BY` clause to make the order deterministic. For
    example, if `id` values are unique, you can make rows for a given `category` value
    appear in `id` order by sorting like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果确保带有和不带有`LIMIT`时返回相同的行顺序很重要，请在`ORDER BY`子句中包含额外的列，以使顺序确定。例如，如果`id`值是唯一的，您可以通过像这样排序来使给定`category`值的行按`id`顺序显示：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For a query with an `ORDER BY` or `GROUP BY` and a `LIMIT` clause, the optimizer
    tries to choose an ordered index by default when it appears doing so would speed
    up query execution. Prior to MySQL 8.0.21, there was no way to override this behavior,
    even in cases where using some other optimization might be faster. Beginning with
    MySQL 8.0.21, it is possible to turn off this optimization by setting the [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    system variable's [`prefer_ordering_index`](switchable-optimizations.html#optflag_prefer-ordering-index)
    flag to `off`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于带有`ORDER BY`或`GROUP BY`以及`LIMIT`子句的查询，优化器会尝试默认选择有序索引，以加快查询执行速度。在MySQL 8.0.21之前，即使在使用其他优化可能更快的情况下，也无法覆盖此行为。从MySQL
    8.0.21开始，可以通过将[`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)系统变量的[`prefer_ordering_index`](switchable-optimizations.html#optflag_prefer-ordering-index)标志设置为`off`来关闭此优化。
- en: '*Example*: First we create and populate a table `t` as shown here:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例*：首先我们创建并填充一个表`t`，如下所示：'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Verify that the [`prefer_ordering_index`](switchable-optimizations.html#optflag_prefer-ordering-index)
    flag is enabled:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 验证[`prefer_ordering_index`](switchable-optimizations.html#optflag_prefer-ordering-index)标志是否已启用：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Since the following query has a `LIMIT` clause, we expect it to use an ordered
    index, if possible. In this case, as we can see from the [`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement") output, it uses the table's primary key.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以下查询有一个`LIMIT`子句，我们期望它使用有序索引，如果可能的话。在这种情况下，正如我们从[`EXPLAIN`](explain.html "15.8.2 EXPLAIN
    Statement")输出中看到的那样，它使用了表的主键。
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we disable the [`prefer_ordering_index`](switchable-optimizations.html#optflag_prefer-ordering-index)
    flag, and re-run the same query; this time it uses the index `i` (which includes
    the `id2` column used in the `WHERE` clause), and a filesort:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们禁用[`prefer_ordering_index`](switchable-optimizations.html#optflag_prefer-ordering-index)标志，并重新运行相同的查询；这次它使用索引`i`（其中包括`WHERE`子句中使用的`id2`列），以及一个文件排序：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See also [Section 10.9.2, “Switchable Optimizations”](switchable-optimizations.html
    "10.9.2 Switchable Optimizations").
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[第10.9.2节，“可切换优化”](switchable-optimizations.html "10.9.2 Switchable Optimizations")。
