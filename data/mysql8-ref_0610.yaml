- en: 10.10.2 The MyISAM Key Cache
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.10.2 MyISAM关键缓存
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/myisam-key-cache.html](https://dev.mysql.com/doc/refman/8.0/en/myisam-key-cache.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/myisam-key-cache.html](https://dev.mysql.com/doc/refman/8.0/en/myisam-key-cache.html)
- en: '[10.10.2.1 Shared Key Cache Access](shared-key-cache.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.10.2.1 共享关键缓存访问](shared-key-cache.html)'
- en: '[10.10.2.2 Multiple Key Caches](multiple-key-caches.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.10.2.2 多个关键缓存](multiple-key-caches.html)'
- en: '[10.10.2.3 Midpoint Insertion Strategy](midpoint-insertion.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.10.2.3 中点插入策略](midpoint-insertion.html)'
- en: '[10.10.2.4 Index Preloading](index-preloading.html)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.10.2.4 索引预加载](index-preloading.html)'
- en: '[10.10.2.5 Key Cache Block Size](key-cache-block-size.html)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.10.2.5 关键缓存块大小](key-cache-block-size.html)'
- en: '[10.10.2.6 Restructuring a Key Cache](key-cache-restructuring.html)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[10.10.2.6 重构关键缓存](key-cache-restructuring.html)'
- en: 'To minimize disk I/O, the `MyISAM` storage engine exploits a strategy that
    is used by many database management systems. It employs a cache mechanism to keep
    the most frequently accessed table blocks in memory:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最小化磁盘I/O，`MyISAM`存储引擎利用了许多数据库管理系统使用的策略。它使用缓存机制将最常访问的表块保留在内存中：
- en: For index blocks, a special structure called the key cache (or key buffer) is
    maintained. The structure contains a number of block buffers where the most-used
    index blocks are placed.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于索引块，维护一个称为关键缓存（或关键缓冲区）的特殊结构。该结构包含多个块缓冲区，其中放置了最常用的索引块。
- en: For data blocks, MySQL uses no special cache. Instead it relies on the native
    operating system file system cache.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于数据块，MySQL不使用特殊缓存。相反，它依赖于本机操作系统文件系统缓存。
- en: 'This section first describes the basic operation of the `MyISAM` key cache.
    Then it discusses features that improve key cache performance and that enable
    you to better control cache operation:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节首先描述了`MyISAM`关键缓存的基本操作。然后讨论了改进关键缓存性能的特性，以及使您能够更好地控制缓存操作的功能：
- en: Multiple sessions can access the cache concurrently.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个会话可以同时访问缓存。
- en: You can set up multiple key caches and assign table indexes to specific caches.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以设置多个关键缓存并将表索引分配给特定缓存。
- en: To control the size of the key cache, use the [`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)
    system variable. If this variable is set equal to zero, no key cache is used.
    The key cache also is not used if the [`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)
    value is too small to allocate the minimal number of block buffers (8).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制关键缓存的大小，请使用[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)系统变量。如果将此变量设置为零，则不使用关键缓存。如果[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)的值太小，无法分配最小数量的块缓冲区（8），则也不使用关键缓存。
- en: When the key cache is not operational, index files are accessed using only the
    native file system buffering provided by the operating system. (In other words,
    table index blocks are accessed using the same strategy as that employed for table
    data blocks.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当关键缓存不可用时，索引文件仅使用操作系统提供的本机文件系统缓冲区进行访问。（换句话说，表索引块的访问采用与表数据块相同的策略。）
- en: An index block is a contiguous unit of access to the `MyISAM` index files. Usually
    the size of an index block is equal to the size of nodes of the index B-tree.
    (Indexes are represented on disk using a B-tree data structure. Nodes at the bottom
    of the tree are leaf nodes. Nodes above the leaf nodes are nonleaf nodes.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 索引块是对`MyISAM`索引文件的连续访问单元。通常，索引块的大小等于索引B树节点的大小。（索引在磁盘上使用B树数据结构表示。树底部的节点是叶节点。叶节点上面的节点是非叶节点。）
- en: All block buffers in a key cache structure are the same size. This size can
    be equal to, greater than, or less than the size of a table index block. Usually
    one these two values is a multiple of the other.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关键缓存结构中的所有块缓冲区大小相同。这个大小可以等于、大于或小于表索引块的大小。通常这两个值中的一个是另一个的倍数。
- en: When data from any table index block must be accessed, the server first checks
    whether it is available in some block buffer of the key cache. If it is, the server
    accesses data in the key cache rather than on disk. That is, it reads from the
    cache or writes into it rather than reading from or writing to disk. Otherwise,
    the server chooses a cache block buffer containing a different table index block
    (or blocks) and replaces the data there by a copy of required table index block.
    As soon as the new index block is in the cache, the index data can be accessed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要访问任何表索引块的数据时，服务器首先检查它是否在关键缓存的某个块缓冲区中可用。如果是，服务器访问关键缓存中的数据而不是在磁盘上。也就是说，它从缓存中读取或写入数据，而不是从磁盘读取或写入数据。否则，服务器选择一个包含不同表索引块（或块）的缓存块缓冲区，并将数据替换为所需表索引块的副本。一旦新的索引块在缓存中，索引数据就可以被访问。
- en: If it happens that a block selected for replacement has been modified, the block
    is considered “dirty.” In this case, prior to being replaced, its contents are
    flushed to the table index from which it came.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择要替换的块已被修改，该块被视为“脏”。在这种情况下，在替换之前，其内容被刷新到其来源的表索引中。
- en: 'Usually the server follows an LRU (Least Recently Used) strategy: When choosing
    a block for replacement, it selects the least recently used index block. To make
    this choice easier, the key cache module maintains all used blocks in a special
    list (LRU chain) ordered by time of use. When a block is accessed, it is the most
    recently used and is placed at the end of the list. When blocks need to be replaced,
    blocks at the beginning of the list are the least recently used and become the
    first candidates for eviction.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，服务器遵循LRU（最近最少使用）策略：在选择要替换的块时，它选择最近最少使用的索引块。为了更容易做出这个选择，关键缓存模块维护了一个特殊列表（LRU链），按使用时间排序所有已使用的块。当访问一个块时，它是最近使用的，并被放在列表的末尾。当需要替换块时，列表开头的块是最近最少使用的，成为首选的驱逐候选。
- en: The `InnoDB` storage engine also uses an LRU algorithm, to manage its buffer
    pool. See [Section 17.5.1, “Buffer Pool”](innodb-buffer-pool.html "17.5.1 Buffer
    Pool").
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`存储引擎也使用LRU算法来管理其缓冲池。请参阅[第17.5.1节，“缓冲池”](innodb-buffer-pool.html "17.5.1
    缓冲池")。'
