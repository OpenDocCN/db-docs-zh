- en: 10.11.4 Metadata Locking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.11.4 元数据锁定
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html](https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html](https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html)
- en: MySQL uses metadata locking to manage concurrent access to database objects
    and to ensure data consistency. Metadata locking applies not just to tables, but
    also to schemas, stored programs (procedures, functions, triggers, scheduled events),
    tablespaces, user locks acquired with the [`GET_LOCK()`](locking-functions.html#function_get-lock)
    function (see [Section 14.14, “Locking Functions”](locking-functions.html "14.14 Locking
    Functions")), and locks acquired with the locking service described in [Section 7.6.9.1,
    “The Locking Service”](locking-service.html "7.6.9.1 The Locking Service").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL使用元数据锁定来管理对数据库对象的并发访问，并确保数据一致性。元数据锁定不仅适用于表，还适用于模式、存储程序（过程、函数、触发器、计划事件）、表空间、使用
    [`GET_LOCK()`](locking-functions.html#function_get-lock) 函数获取的用户锁（参见 [Section 14.14,
    “锁定函数”](locking-functions.html "14.14 锁定函数")），以及在 [Section 7.6.9.1, “锁定服务”](locking-service.html
    "7.6.9.1 锁定服务") 中描述的锁定服务中获取的锁。
- en: The Performance Schema [`metadata_locks`](performance-schema-metadata-locks-table.html
    "29.12.13.3 The metadata_locks Table") table exposes metadata lock information,
    which can be useful for seeing which sessions hold locks, are blocked waiting
    for locks, and so forth. For details, see [Section 29.12.13.3, “The metadata_locks
    Table”](performance-schema-metadata-locks-table.html "29.12.13.3 The metadata_locks
    Table").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Performance Schema [`metadata_locks`](performance-schema-metadata-locks-table.html
    "29.12.13.3 metadata_locks表") 表公开了元数据锁信息，可以用于查看哪些会话持有锁，正在等待锁等情况。详情请参见 [Section 29.12.13.3,
    “metadata_locks表”](performance-schema-metadata-locks-table.html "29.12.13.3 metadata_locks表")。
- en: Metadata locking does involve some overhead, which increases as query volume
    increases. Metadata contention increases the more that multiple queries attempt
    to access the same objects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据锁定确实会带来一些开销，随着查询量的增加而增加。当多个查询尝试访问相同对象时，元数据争用会增加。
- en: Metadata locking is not a replacement for the table definition cache, and its
    mutexes and locks differ from the `LOCK_open` mutex. The following discussion
    provides some information about how metadata locking works.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据锁定不是表定义缓存的替代品，其互斥体和锁与 `LOCK_open` 互斥体不同。以下讨论提供了有关元数据锁定工作原理的一些信息。
- en: '[Metadata Lock Acquisition](metadata-locking.html#metadata-lock-acquisition
    "Metadata Lock Acquisition")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[元数据锁获取](metadata-locking.html#metadata-lock-acquisition "元数据锁获取")'
- en: '[Metadata Lock Release](metadata-locking.html#metadata-lock-release "Metadata
    Lock Release")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[元数据锁释放](metadata-locking.html#metadata-lock-release "元数据锁释放")'
- en: Metadata Lock Acquisition
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 元数据锁获取
- en: If there are multiple waiters for a given lock, the highest-priority lock request
    is satisfied first, with an exception related to the [`max_write_lock_count`](server-system-variables.html#sysvar_max_write_lock_count)
    system variable. Write lock requests have higher priority than read lock requests.
    However, if [`max_write_lock_count`](server-system-variables.html#sysvar_max_write_lock_count)
    is set to some low value (say, 10), read lock requests may be preferred over pending
    write lock requests if the read lock requests have already been passed over in
    favor of 10 write lock requests. Normally this behavior does not occur because
    [`max_write_lock_count`](server-system-variables.html#sysvar_max_write_lock_count)
    by default has a very large value.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个等待者请求同一个锁，则最高优先级的锁请求首先得到满足，与 [`max_write_lock_count`](server-system-variables.html#sysvar_max_write_lock_count)
    系统变量相关的一个例外。写锁请求比读锁请求具有更高的优先级。但是，如果 [`max_write_lock_count`](server-system-variables.html#sysvar_max_write_lock_count)
    设置为较低值（比如，10），则读锁请求可能优先于待处理的写锁请求，如果读锁请求已经被忽略以优先处理10个写锁请求。通常情况下，这种行为不会发生，因为 [`max_write_lock_count`](server-system-variables.html#sysvar_max_write_lock_count)
    默认情况下具有非常大的值。
- en: Statements acquire metadata locks one by one, not simultaneously, and perform
    deadlock detection in the process.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 语句逐个获取元数据锁，而不是同时获取，并在此过程中执行死锁检测。
- en: DML statements normally acquire locks in the order in which tables are mentioned
    in the statement.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: DML语句通常按照语句中提到表的顺序获取锁。
- en: DDL statements, [`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK
    TABLES Statements"), and other similar statements try to reduce the number of
    possible deadlocks between concurrent DDL statements by acquiring locks on explicitly
    named tables in name order. Locks might be acquired in a different order for implicitly
    used tables (such as tables in foreign key relationships that also must be locked).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: DDL语句、[`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES
    Statements")和其他类似语句尝试通过按名称顺序在显式命名的表上获取锁来减少并发DDL语句之间可能发生的死锁数量。对于隐式使用的表（例如外键关系中必须锁定的表），锁可能按不同顺序获取。
- en: 'For example, [`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement")
    is a DDL statement that acquires locks in name order:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement")是一个按名称顺序获取锁的DDL语句：
- en: 'This [`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement") statement
    renames `tbla` to something else, and renames `tblc` to `tbla`:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个[`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement")语句将`tbla`重命名为其他内容，并将`tblc`重命名为`tbla`：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The statement acquires metadata locks, in order, on `tbla`, `tblc`, and `tbld`
    (because `tbld` follows `tblc` in name order):'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该语句按顺序在`tbla`、`tblc`和`tbld`上获取元数据锁（因为`tbld`在名称顺序中跟随`tblc`）。
- en: 'This slightly different statement also renames `tbla` to something else, and
    renames `tblc` to `tbla`:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个稍有不同的语句还将`tbla`重命名为其他内容，并将`tblc`重命名为`tbla`：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this case, the statement acquires metadata locks, in order, on `tbla`, `tblb`,
    and `tblc` (because `tblb` precedes `tblc` in name order):'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，语句按顺序在`tbla`、`tblb`和`tblc`上获取元数据锁（因为`tblb`在名称顺序中位于`tblc`之前）。
- en: Both statements acquire locks on `tbla` and `tblc`, in that order, but differ
    in whether the lock on the remaining table name is acquired before or after `tblc`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 两个语句按顺序获取`tbla`和`tblc`上的锁，但在剩余表名的锁是在`tblc`之前还是之后获取有所不同。
- en: Metadata lock acquisition order can make a difference in operation outcome when
    multiple transactions execute concurrently, as the following example illustrates.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个事务同时执行时，元数据锁获取顺序可能会影响操作结果，如下例所示。
- en: 'Begin with two tables `x` and `x_new` that have identical structure. Three
    clients issue statements that involve these tables:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从具有相同结构的两个表`x`和`x_new`开始。三个客户端发出涉及这些表的语句：
- en: 'Client 1:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Client 1：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The statement requests and acquires write locks in name order on `x` and `x_new`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句按名称顺序请求并获取`x`和`x_new`上的写锁。
- en: 'Client 2:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Client 2：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The statement requests and blocks waiting for a write lock on `x`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句请求并在`x`上等待写锁。
- en: 'Client 3:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Client 3：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The statement requests exclusive locks in name order on `x`, `x_new`, and `x_old`,
    but blocks waiting for the lock on `x`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句按名称顺序请求`x`、`x_new`和`x_old`上的排他锁，但在等待`x`上的锁时被阻塞。
- en: 'Client 1:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Client 1：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The statement releases the write locks on `x` and `x_new`. The exclusive lock
    request for `x` by Client 3 has higher priority than the write lock request by
    Client 2, so Client 3 acquires its lock on `x`, then also on `x_new` and `x_old`,
    performs the renaming, and releases its locks. Client 2 then acquires its lock
    on `x`, performs the insert, and releases its lock.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句释放了`x`和`x_new`上的写锁。Client 3对`x`的排他锁请求比Client 2的写锁请求优先级更高，因此Client 3先获取了`x`的锁，然后也获取了`x_new`和`x_old`的锁，执行重命名操作，然后释放锁。然后Client
    2获取了`x`的锁，执行插入操作，然后释放锁。
- en: 'Lock acquisition order results in the [`RENAME TABLE`](rename-table.html "15.1.36 RENAME
    TABLE Statement") executing before the [`INSERT`](insert.html "15.2.7 INSERT Statement").
    The `x` into which the insert occurs is the table that was named `x_new` when
    Client 2 issued the insert and was renamed to `x` by Client 3:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 锁获取顺序导致[`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement")在[`INSERT`](insert.html
    "15.2.7 INSERT Statement")之前执行。插入发生的`x`是Client 2发出插入时命名为`x_new`，并由Client 3重命名为`x`的表：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now begin instead with tables named `x` and `new_x` that have identical structure.
    Again, three clients issue statements that involve these tables:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在改为以名称为`x`和`new_x`的表具有相同结构开始。再次，三个客户端发出涉及这些表的语句：
- en: 'Client 1:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Client 1：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The statement requests and acquires write locks in name order on `new_x` and
    `x`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句按名称顺序请求并获取`new_x`和`x`上的写锁。
- en: 'Client 2:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Client 2：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The statement requests and blocks waiting for a write lock on `x`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句请求并在`x`上等待写锁。
- en: 'Client 3:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Client 3：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The statement requests exclusive locks in name order on `new_x`, `old_x`, and
    `x`, but blocks waiting for the lock on `new_x`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句按名称顺序请求`new_x`、`old_x`和`x`上的排他锁，但在等待`new_x`上的锁时被阻塞。
- en: 'Client 1:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Client 1：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The statement releases the write locks on `x` and `new_x`. For `x`, the only
    pending request is by Client 2, so Client 2 acquires its lock, performs the insert,
    and releases the lock. For `new_x`, the only pending request is by Client 3, which
    is permitted to acquire that lock (and also the lock on `old_x`). The rename operation
    still blocks for the lock on `x` until the Client 2 insert finishes and releases
    its lock. Then Client 3 acquires the lock on `x`, performs the rename, and releases
    its lock.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句释放了`x`和`new_x`的写锁。对于`x`，唯一的挂起请求来自客户端2，因此客户端2获取其锁，执行插入操作，并释放锁。对于`new_x`，唯一的挂起请求来自客户端3，允许其获取该锁（以及`old_x`的锁）。重命名操作仍然会因为在客户端2插入完成并释放其锁之前对`x`的锁而阻塞。然后客户端3获取`x`的锁，执行重命名操作，并释放其锁。
- en: 'In this case, lock acquisition order results in the [`INSERT`](insert.html
    "15.2.7 INSERT Statement") executing before the [`RENAME TABLE`](rename-table.html
    "15.1.36 RENAME TABLE Statement"). The `x` into which the insert occurs is the
    original `x`, now renamed to `old_x` by the rename operation:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，锁获取顺序导致[`INSERT`](insert.html "15.2.7 INSERT Statement")在[`RENAME TABLE`](rename-table.html
    "15.1.36 RENAME TABLE Statement")之前执行。插入发生的`x`是原始的`x`，现在被重命名为`old_x`：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If order of lock acquisition in concurrent statements makes a difference to
    an application in operation outcome, as in the preceding example, you may be able
    to adjust the table names to affect the order of lock acquisition.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果并发语句中锁获取顺序对操作结果有影响，如前面的例子，您可以调整表名以影响锁获取顺序。
- en: Metadata locks are extended, as necessary, to tables related by a foreign key
    constraint to prevent conflicting DML and DDL operations from executing concurrently
    on the related tables. When updating a parent table, a metadata lock is taken
    on the child table while updating foreign key metadata. Foreign key metadata is
    owned by the child table.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止相关表上的冲突DML和DDL操作同时执行，元数据锁会根据外键约束扩展到相关表。在更新父表时，会在更新外键元数据时在子表上获取元数据锁。外键元数据由子表拥有。
- en: Metadata Lock Release
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 元数据锁释放
- en: To ensure transaction serializability, the server must not permit one session
    to perform a data definition language (DDL) statement on a table that is used
    in an uncompleted explicitly or implicitly started transaction in another session.
    The server achieves this by acquiring metadata locks on tables used within a transaction
    and deferring release of those locks until the transaction ends. A metadata lock
    on a table prevents changes to the table's structure. This locking approach has
    the implication that a table that is being used by a transaction within one session
    cannot be used in DDL statements by other sessions until the transaction ends.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保事务的可串行化，服务器不得允许一个会话在另一个会话中的未完成的显式或隐式启动的事务中对表执行数据定义语言（DDL）语句。服务器通过在事务中使用的表上获取元数据锁并推迟释放这些锁直到事务结束来实现这一点。表上的元数据锁阻止对表结构的更改。这种锁定方法意味着一个会话中正在使用的表在事务结束之前不能被其他会话用于DDL语句。
- en: 'This principle applies not only to transactional tables, but also to nontransactional
    tables. Suppose that a session begins a transaction that uses transactional table
    `t` and nontransactional table `nt` as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则不仅适用于事务表，也适用于非事务表。假设一个会话开始一个事务，使用事务表`t`和非事务表`nt`如下：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The server holds metadata locks on both `t` and `nt` until the transaction
    ends. If another session attempts a DDL or write lock operation on either table,
    it blocks until metadata lock release at transaction end. For example, a second
    session blocks if it attempts any of these operations:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器在事务结束之前会持有表`t`和`nt`的元数据锁。如果另一个会话尝试在任一表上执行DDL或写锁操作，它会阻塞，直到事务结束时释放元数据锁。例如，如果第二个会话尝试执行以下任何操作，它会被阻塞：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The same behavior applies for The [`LOCK TABLES ... READ`](lock-tables.html
    "15.3.6 LOCK TABLES and UNLOCK TABLES Statements"). That is, explicitly or implicitly
    started transactions that update any table (transactional or nontransactional)
    block and are blocked by `LOCK TABLES ... READ` for that table.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的行为也适用于[`LOCK TABLES ... READ`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK
    TABLES Statements")。也就是说，显式或隐式启动的更新任何表（事务或非事务）的事务会被`LOCK TABLES ... READ`阻塞，并且被该表阻塞。
- en: If the server acquires metadata locks for a statement that is syntactically
    valid but fails during execution, it does not release the locks early. Lock release
    is still deferred to the end of the transaction because the failed statement is
    written to the binary log and the locks protect log consistency.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器为一个在语法上有效但在执行过程中失败的语句获取元数据锁，它不会提前释放锁。锁的释放仍然延迟到事务结束，因为失败的语句被写入二进制日志，而锁保护日志的一致性。
- en: In autocommit mode, each statement is in effect a complete transaction, so metadata
    locks acquired for the statement are held only to the end of the statement.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动提交模式下，每个语句实际上是一个完整的事务，因此为语句获取的元数据锁仅在语句结束时保持。
- en: Metadata locks acquired during a [`PREPARE`](prepare.html "15.5.1 PREPARE Statement")
    statement are released once the statement has been prepared, even if preparation
    occurs within a multiple-statement transaction.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`PREPARE`](prepare.html "15.5.1 PREPARE Statement")语句期间获取的元数据锁在语句准备完成后会被释放，即使准备过程发生在多语句事务中。
- en: As of MySQL 8.0.13, for XA transactions in `PREPARED` state, metadata locks
    are maintained across client disconnects and server restarts, until an [`XA COMMIT`](xa.html
    "15.3.8 XA Transactions") or [`XA ROLLBACK`](xa.html "15.3.8 XA Transactions")
    is executed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.13版本，对于处于`PREPARED`状态的XA事务，元数据锁在客户端断开连接和服务器重新启动时会被保留，直到执行[`XA COMMIT`](xa.html
    "15.3.8 XA Transactions")或[`XA ROLLBACK`](xa.html "15.3.8 XA Transactions")。
