- en: 1.6.1 MySQL Extensions to Standard SQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.6.1 MySQL对标准SQL的扩展
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/extensions-to-ansi.html](https://dev.mysql.com/doc/refman/8.0/en/extensions-to-ansi.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/extensions-to-ansi.html](https://dev.mysql.com/doc/refman/8.0/en/extensions-to-ansi.html)
- en: 'MySQL Server supports some extensions that you are not likely to find in other
    SQL DBMSs. Be warned that if you use them, your code is most likely not portable
    to other SQL servers. In some cases, you can write code that includes MySQL extensions,
    but is still portable, by using comments of the following form:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器支持一些其他SQL DBMS中不太可能找到的扩展。请注意，如果您使用它们，您的代码很可能无法在其他SQL服务器上移植。在某些情况下，您可以编写包含MySQL扩展的代码，但仍然是可移植的，方法是使用以下形式的注释：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this case, MySQL Server parses and executes the code within the comment
    as it would any other SQL statement, but other SQL servers should ignore the extensions.
    For example, MySQL Server recognizes the `STRAIGHT_JOIN` keyword in the following
    statement, but other servers should not:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，MySQL服务器会解析并执行注释中的代码，就像执行任何其他SQL语句一样，但其他SQL服务器应该忽略这些扩展。例如，MySQL服务器会识别以下语句中的`STRAIGHT_JOIN`关键字，但其他服务器不应该：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you add a version number after the `!` character, the syntax within the
    comment is executed only if the MySQL version is greater than or equal to the
    specified version number. The `KEY_BLOCK_SIZE` clause in the following comment
    is executed only by servers from MySQL 5.1.10 or higher:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`!`字符后添加版本号，则仅当MySQL版本大于或等于指定版本号时才执行注释中的语法。以下注释中的`KEY_BLOCK_SIZE`子句仅在MySQL
    5.1.10或更高版本的服务器上执行：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The following descriptions list MySQL extensions, organized by category.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下描述列出了按类别组织的MySQL扩展。
- en: Organization of data on disk
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据在磁盘上的组织
- en: MySQL Server maps each database to a directory under the MySQL data directory,
    and maps tables within a database to file names in the database directory. Consequently,
    database and table names are case-sensitive in MySQL Server on operating systems
    that have case-sensitive file names (such as most Unix systems). See [Section 11.2.3,
    “Identifier Case Sensitivity”](identifier-case-sensitivity.html "11.2.3 Identifier
    Case Sensitivity").
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL服务器将每个数据库映射到MySQL数据目录下的一个目录，并将数据库中的表映射到数据库目录中的文件名。因此，在具有区分大小写文件名的操作系统上（例如大多数Unix系统），MySQL服务器中的数据库和表名称是区分大小写的。请参阅[Section 11.2.3,
    “Identifier Case Sensitivity”](identifier-case-sensitivity.html "11.2.3 Identifier
    Case Sensitivity")。
- en: General language syntax
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用语言语法
- en: By default, strings can be enclosed by `"` as well as `'`. If the [`ANSI_QUOTES`](sql-mode.html#sqlmode_ansi_quotes)
    SQL mode is enabled, strings can be enclosed only by `'` and the server interprets
    strings enclosed by `"` as identifiers.
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，字符串可以用`"`或`'`括起来。如果启用了[`ANSI_QUOTES`](sql-mode.html#sqlmode_ansi_quotes)
    SQL 模式，则字符串只能用`'`括起来，服务器会将用`"`括起来的字符串解释为标识符。
- en: '`\` is the escape character in strings.'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\`是字符串中的转义字符。'
- en: 'In SQL statements, you can access tables from different databases with the
    *`db_name.tbl_name`* syntax. Some SQL servers provide the same functionality but
    call this `User space`. MySQL Server doesn''t support tablespaces such as used
    in statements like this: `CREATE TABLE ralph.my_table ... IN my_tablespace`.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SQL语句中，您可以使用*`db_name.tbl_name`*语法访问不同数据库中的表。一些SQL服务器提供相同的功能，但称其为`User space`。MySQL服务器不支持像这样使用表空间的语句：`CREATE
    TABLE ralph.my_table ... IN my_tablespace`。
- en: SQL statement syntax
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL语句语法
- en: The [`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement"),
    [`CHECK TABLE`](check-table.html "15.7.3.2 CHECK TABLE Statement"), [`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement"), and [`REPAIR
    TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement") statements.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement")、[`CHECK
    TABLE`](check-table.html "15.7.3.2 CHECK TABLE Statement")、[`OPTIMIZE TABLE`](optimize-table.html
    "15.7.3.4 OPTIMIZE TABLE Statement")和[`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR
    TABLE Statement")语句。'
- en: The [`CREATE DATABASE`](create-database.html "15.1.12 CREATE DATABASE Statement"),
    [`DROP DATABASE`](drop-database.html "15.1.24 DROP DATABASE Statement"), and [`ALTER
    DATABASE`](alter-database.html "15.1.2 ALTER DATABASE Statement") statements.
    See [Section 15.1.12, “CREATE DATABASE Statement”](create-database.html "15.1.12 CREATE
    DATABASE Statement"), [Section 15.1.24, “DROP DATABASE Statement”](drop-database.html
    "15.1.24 DROP DATABASE Statement"), and [Section 15.1.2, “ALTER DATABASE Statement”](alter-database.html
    "15.1.2 ALTER DATABASE Statement").
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CREATE DATABASE`](create-database.html "15.1.12 CREATE DATABASE Statement")、[`DROP
    DATABASE`](drop-database.html "15.1.24 DROP DATABASE Statement")和[`ALTER DATABASE`](alter-database.html
    "15.1.2 ALTER DATABASE Statement")语句。参见[第15.1.12节，“CREATE DATABASE Statement”](create-database.html
    "15.1.12 CREATE DATABASE Statement")，[第15.1.24节，“DROP DATABASE Statement”](drop-database.html
    "15.1.24 DROP DATABASE Statement")和[第15.1.2节，“ALTER DATABASE Statement”](alter-database.html
    "15.1.2 ALTER DATABASE Statement")。'
- en: The [`DO`](do.html "15.2.3 DO Statement") statement.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DO`](do.html "15.2.3 DO Statement")语句。'
- en: '[`EXPLAIN SELECT`](explain.html "15.8.2 EXPLAIN Statement") to obtain a description
    of how tables are processed by the query optimizer.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`EXPLAIN SELECT`](explain.html "15.8.2 EXPLAIN Statement")以获取查询优化器如何处理表格的描述。'
- en: The [`FLUSH`](flush.html "15.7.8.3 FLUSH Statement") and [`RESET`](reset.html
    "15.7.8.6 RESET Statement") statements.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FLUSH`](flush.html "15.7.8.3 FLUSH Statement")和[`RESET`](reset.html "15.7.8.6 RESET
    Statement")语句。'
- en: The [`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment")
    statement. See [Section 15.7.6.1, “SET Syntax for Variable Assignment”](set-variable.html
    "15.7.6.1 SET Syntax for Variable Assignment").
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment")语句。参见[第15.7.6.1节，“SET
    Syntax for Variable Assignment”](set-variable.html "15.7.6.1 SET Syntax for Variable
    Assignment")。'
- en: The [`SHOW`](show.html "15.7.7 SHOW Statements") statement. See [Section 15.7.7,
    “SHOW Statements”](show.html "15.7.7 SHOW Statements"). The information produced
    by many of the MySQL-specific [`SHOW`](show.html "15.7.7 SHOW Statements") statements
    can be obtained in more standard fashion by using [`SELECT`](select.html "15.2.13 SELECT
    Statement") to query `INFORMATION_SCHEMA`. See [Chapter 28, *INFORMATION_SCHEMA
    Tables*](information-schema.html "Chapter 28 INFORMATION_SCHEMA Tables").
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SHOW`](show.html "15.7.7 SHOW Statements")语句。参见[第15.7.7节，“SHOW Statements”](show.html
    "15.7.7 SHOW Statements")。许多特定于MySQL的[`SHOW`](show.html "15.7.7 SHOW Statements")语句产生的信息可以通过使用[`SELECT`](select.html
    "15.2.13 SELECT Statement")查询`INFORMATION_SCHEMA`来更标准地获取。参见[第28章，“INFORMATION_SCHEMA
    Tables”](information-schema.html "Chapter 28 INFORMATION_SCHEMA Tables")。'
- en: Use of [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement"). In many cases,
    this syntax is compatible with Oracle [`LOAD DATA`](load-data.html "15.2.9 LOAD
    DATA Statement"). See [Section 15.2.9, “LOAD DATA Statement”](load-data.html "15.2.9 LOAD
    DATA Statement").
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")语句。在许多情况下，此语法与Oracle的[`LOAD
    DATA`](load-data.html "15.2.9 LOAD DATA Statement")兼容。参见[第15.2.9节，“LOAD DATA Statement”](load-data.html
    "15.2.9 LOAD DATA Statement")。
- en: Use of [`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement").
    See [Section 15.1.36, “RENAME TABLE Statement”](rename-table.html "15.1.36 RENAME
    TABLE Statement").
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement")语句。参见[第15.1.36节，“RENAME
    TABLE Statement”](rename-table.html "15.1.36 RENAME TABLE Statement")。
- en: Use of [`REPLACE`](replace.html "15.2.12 REPLACE Statement") instead of [`DELETE`](delete.html
    "15.2.2 DELETE Statement") plus [`INSERT`](insert.html "15.2.7 INSERT Statement").
    See [Section 15.2.12, “REPLACE Statement”](replace.html "15.2.12 REPLACE Statement").
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`REPLACE`](replace.html "15.2.12 REPLACE Statement")代替[`DELETE`](delete.html
    "15.2.2 DELETE Statement")加[`INSERT`](insert.html "15.2.7 INSERT Statement")。参见[第15.2.12节，“REPLACE
    Statement”](replace.html "15.2.12 REPLACE Statement")。
- en: Use of `CHANGE *`col_name`*`, `DROP *`col_name`*`, or [`DROP INDEX`](drop-index.html
    "15.1.27 DROP INDEX Statement"), `IGNORE` or `RENAME` in [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") statements. Use of multiple `ADD`, `ALTER`, `DROP`,
    or `CHANGE` clauses in an [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") statement. See [Section 15.1.9, “ALTER TABLE Statement”](alter-table.html
    "15.1.9 ALTER TABLE Statement").
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句中使用`CHANGE
    *`col_name`*`，`DROP *`col_name`*`，或[`DROP INDEX`](drop-index.html "15.1.27 DROP
    INDEX Statement")，`IGNORE`或`RENAME`。在[`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement")语句中使用多个`ADD`，`ALTER`，`DROP`或`CHANGE`子句。参见[第15.1.9节，“ALTER TABLE
    Statement”](alter-table.html "15.1.9 ALTER TABLE Statement")。
- en: Use of index names, indexes on a prefix of a column, and use of `INDEX` or `KEY`
    in [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statements.
    See [Section 15.1.20, “CREATE TABLE Statement”](create-table.html "15.1.20 CREATE
    TABLE Statement").
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") 语句中使用索引名称、列前缀上的索引，以及使用
    `INDEX` 或 `KEY`。参见 [第 15.1.20 节，“CREATE TABLE Statement”](create-table.html "15.1.20 CREATE
    TABLE Statement")。
- en: Use of `TEMPORARY` or `IF NOT EXISTS` with [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement").
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") 中使用 `TEMPORARY`
    或 `IF NOT EXISTS`。
- en: Use of `IF EXISTS` with [`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE Statement")
    and [`DROP DATABASE`](drop-database.html "15.1.24 DROP DATABASE Statement").
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE Statement") 和 [`DROP DATABASE`](drop-database.html
    "15.1.24 DROP DATABASE Statement") 中使用 `IF EXISTS`。
- en: The capability of dropping multiple tables with a single [`DROP TABLE`](drop-table.html
    "15.1.32 DROP TABLE Statement") statement.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单个 [`DROP TABLE`](drop-table.html "15.1.32 DROP TABLE Statement") 语句删除多个表的能力。
- en: The `ORDER BY` and `LIMIT` clauses of the [`UPDATE`](update.html "15.2.17 UPDATE
    Statement") and [`DELETE`](delete.html "15.2.2 DELETE Statement") statements.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UPDATE`](update.html "15.2.17 UPDATE Statement") 和 [`DELETE`](delete.html
    "15.2.2 DELETE Statement") 语句的 `ORDER BY` 和 `LIMIT` 子句。'
- en: '`INSERT INTO *`tbl_name`* SET *`col_name`* = ...` syntax.'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSERT INTO *`tbl_name`* SET *`col_name`* = ...` 语法。'
- en: The `DELAYED` clause of the [`INSERT`](insert.html "15.2.7 INSERT Statement")
    and [`REPLACE`](replace.html "15.2.12 REPLACE Statement") statements.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INSERT`](insert.html "15.2.7 INSERT Statement") 和 [`REPLACE`](replace.html
    "15.2.12 REPLACE Statement") 语句的 `DELAYED` 子句。'
- en: The `LOW_PRIORITY` clause of the [`INSERT`](insert.html "15.2.7 INSERT Statement"),
    [`REPLACE`](replace.html "15.2.12 REPLACE Statement"), [`DELETE`](delete.html
    "15.2.2 DELETE Statement"), and [`UPDATE`](update.html "15.2.17 UPDATE Statement")
    statements.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INSERT`](insert.html "15.2.7 INSERT Statement")、[`REPLACE`](replace.html
    "15.2.12 REPLACE Statement")、[`DELETE`](delete.html "15.2.2 DELETE Statement")
    和 [`UPDATE`](update.html "15.2.17 UPDATE Statement") 语句的 `LOW_PRIORITY` 子句。'
- en: Use of `INTO OUTFILE` or `INTO DUMPFILE` in [`SELECT`](select.html "15.2.13 SELECT
    Statement") statements. See [Section 15.2.13, “SELECT Statement”](select.html
    "15.2.13 SELECT Statement").
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [`SELECT`](select.html "15.2.13 SELECT Statement") 语句中使用 `INTO OUTFILE` 或
    `INTO DUMPFILE`。参见 [第 15.2.13 节，“SELECT Statement”](select.html "15.2.13 SELECT
    Statement")。
- en: Options such as `STRAIGHT_JOIN` or `SQL_SMALL_RESULT` in [`SELECT`](select.html
    "15.2.13 SELECT Statement") statements.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [`SELECT`](select.html "15.2.13 SELECT Statement") 语句中的选项，如 `STRAIGHT_JOIN`
    或 `SQL_SMALL_RESULT`。
- en: You don't need to name all selected columns in the `GROUP BY` clause. This gives
    better performance for some very specific, but quite normal queries. See [Section 14.19,
    “Aggregate Functions”](aggregate-functions-and-modifiers.html "14.19 Aggregate
    Functions").
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `GROUP BY` 子句中不需要命名所有选定的列。这对于一些非常特定但相当常见的查询可以提供更好的性能。参见 [第 14.19 节，“聚合函数”](aggregate-functions-and-modifiers.html
    "14.19 Aggregate Functions")。
- en: You can specify `ASC` and `DESC` with `GROUP BY`, not just with `ORDER BY`.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在 `GROUP BY` 中指定 `ASC` 和 `DESC`，而不仅仅是在 `ORDER BY` 中。
- en: The ability to set variables in a statement with the `:=` assignment operator.
    See [Section 11.4, “User-Defined Variables”](user-variables.html "11.4 User-Defined
    Variables").
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `:=` 赋值运算符在语句中设置变量的能力��参见 [第 11.4 节，“用户定义变量”](user-variables.html "11.4 User-Defined
    Variables")。
- en: Data types
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型
- en: The [`MEDIUMINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`SET`](set.html "13.3.6 The SET
    Type"), and [`ENUM`](enum.html "13.3.5 The ENUM Type") data types, and the various
    [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") and [`TEXT`](blob.html "13.3.4 The
    BLOB and TEXT Types") data types.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MEDIUMINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")、[`SET`](set.html "13.3.6 The SET Type")
    和 [`ENUM`](enum.html "13.3.5 The ENUM Type") 数据类型，以及各种 [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") 和 [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") 数据类型。'
- en: The `AUTO_INCREMENT`, `BINARY`, `NULL`, `UNSIGNED`, and `ZEROFILL` data type
    attributes.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTO_INCREMENT`、`BINARY`、`NULL`、`UNSIGNED` 和 `ZEROFILL` 数据类型属性。'
- en: Functions and operators
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数和运算符
- en: To make it easier for users who migrate from other SQL environments, MySQL Server
    supports aliases for many functions. For example, all string functions support
    both standard SQL syntax and ODBC syntax.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了方便从其他 SQL 环境迁移的用户，MySQL Server 支持许多函数的别名。例如，所有字符串函数都支持标准 SQL 语法和 ODBC 语法。
- en: MySQL Server understands the [`||`](logical-operators.html#operator_or) and
    [`&&`](logical-operators.html#operator_and) operators to mean logical OR and AND,
    as in the C programming language. In MySQL Server, [`||`](logical-operators.html#operator_or)
    and [`OR`](logical-operators.html#operator_or) are synonyms, as are [`&&`](logical-operators.html#operator_and)
    and [`AND`](logical-operators.html#operator_and). Because of this nice syntax,
    MySQL Server doesn't support the standard SQL [`||`](logical-operators.html#operator_or)
    operator for string concatenation; use [`CONCAT()`](string-functions.html#function_concat)
    instead. Because [`CONCAT()`](string-functions.html#function_concat) takes any
    number of arguments, it is easy to convert use of the [`||`](logical-operators.html#operator_or)
    operator to MySQL Server.
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL Server 理解 [`||`](logical-operators.html#operator_or) 和 [`&&`](logical-operators.html#operator_and)
    运算符表示逻辑 OR 和 AND，就像 C 编程语言中一样。在 MySQL Server 中，[`||`](logical-operators.html#operator_or)
    和 [`OR`](logical-operators.html#operator_or) 是同义词，[`&&`](logical-operators.html#operator_and)
    和 [`AND`](logical-operators.html#operator_and) 也是同义词。由于这种良好的语法，MySQL Server 不支持标准
    SQL 中用于字符串连接的 [`||`](logical-operators.html#operator_or) 运算符；请使用 [`CONCAT()`](string-functions.html#function_concat)。由于
    [`CONCAT()`](string-functions.html#function_concat) 接受任意数量的参数，因此很容易将 [`||`](logical-operators.html#operator_or)
    运算符的用法转换为 MySQL Server。
- en: Use of [`COUNT(DISTINCT *`value_list`*)`](aggregate-functions.html#function_count)
    where *`value_list`* has more than one element.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *`value_list`* 具有多个元素的情况下使用 [`COUNT(DISTINCT *`value_list`*)`](aggregate-functions.html#function_count)。
- en: String comparisons are case-insensitive by default, with sort ordering determined
    by the collation of the current character set, which is `utf8mb4` by default.
    To perform case-sensitive comparisons instead, you should declare your columns
    with the `BINARY` attribute or use the `BINARY` cast, which causes comparisons
    to be done using the underlying character code values rather than a lexical ordering.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串比较默认不区分大小写，排序顺序由当前字符集的排序规则决定，默认为 `utf8mb4`。要执行区分大小写的比较，应该使用 `BINARY` 属性声明列或使用
    `BINARY` 转换，这将导致使用基��字符代码值而不是词法排序进行比较。
- en: The [`%`](mathematical-functions.html#function_mod) operator is a synonym for
    [`MOD()`](mathematical-functions.html#function_mod). That is, `*`N`* % *`M`*`
    is equivalent to [`MOD(*`N`*,*`M`*)`](mathematical-functions.html#function_mod).
    [`%`](mathematical-functions.html#function_mod) is supported for C programmers
    and for compatibility with PostgreSQL.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`%`](mathematical-functions.html#function_mod) 运算符是 [`MOD()`](mathematical-functions.html#function_mod)
    的同义词。也就是说，`*`N`* % *`M`*` 等同于 [`MOD(*`N`*,*`M`*)`](mathematical-functions.html#function_mod)。[`%`](mathematical-functions.html#function_mod)
    支持 C 程序员和与 PostgreSQL 的兼容性。'
- en: 'The [`=`](comparison-operators.html#operator_equal), [`<>`](comparison-operators.html#operator_not-equal),
    [`<=`](comparison-operators.html#operator_less-than-or-equal), [`<`](comparison-operators.html#operator_less-than),
    [`>=`](comparison-operators.html#operator_greater-than-or-equal), [`>`](comparison-operators.html#operator_greater-than),
    [`<<`](bit-functions.html#operator_left-shift), [`>>`](bit-functions.html#operator_right-shift),
    [`<=>`](comparison-operators.html#operator_equal-to), [`AND`](logical-operators.html#operator_and),
    [`OR`](logical-operators.html#operator_or), or [`LIKE`](string-comparison-functions.html#operator_like)
    operators may be used in expressions in the output column list (to the left of
    the `FROM`) in [`SELECT`](select.html "15.2.13 SELECT Statement") statements.
    For example:'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`=`](comparison-operators.html#operator_equal), [`<>`](comparison-operators.html#operator_not-equal),
    [`<=`](comparison-operators.html#operator_less-than-or-equal), [`<`](comparison-operators.html#operator_less-than),
    [`>=`](comparison-operators.html#operator_greater-than-or-equal), [`>`](comparison-operators.html#operator_greater-than),
    [`<<`](bit-functions.html#operator_left-shift), [`>>`](bit-functions.html#operator_right-shift),
    [`<=>`](comparison-operators.html#operator_equal-to), [`AND`](logical-operators.html#operator_and),
    [`OR`](logical-operators.html#operator_or), 或 [`LIKE`](string-comparison-functions.html#operator_like)
    运算符可以在[`SELECT`](select.html "15.2.13 SELECT Statement")语句中的输出列列表（`FROM`的左侧）中使用。例如：'
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The [`LAST_INSERT_ID()`](information-functions.html#function_last-insert-id)
    function returns the most recent `AUTO_INCREMENT` value. See [Section 14.15, “Information
    Functions”](information-functions.html "14.15 Information Functions").
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LAST_INSERT_ID()`](information-functions.html#function_last-insert-id) 函数返回最近的
    `AUTO_INCREMENT` 值。参见 [Section 14.15, “Information Functions”](information-functions.html
    "14.15 Information Functions")。'
- en: '[`LIKE`](string-comparison-functions.html#operator_like) is permitted on numeric
    values.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数字值上允许使用[`LIKE`](string-comparison-functions.html#operator_like)。
- en: The [`REGEXP`](regexp.html#operator_regexp) and [`NOT REGEXP`](regexp.html#operator_not-regexp)
    extended regular expression operators.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REGEXP`](regexp.html#operator_regexp) 和 [`NOT REGEXP`](regexp.html#operator_not-regexp)
    扩展正则表达式运算符。'
- en: '[`CONCAT()`](string-functions.html#function_concat) or [`CHAR()`](string-functions.html#function_char)
    with one argument or more than two arguments. (In MySQL Server, these functions
    can take a variable number of arguments.)'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CONCAT()`](string-functions.html#function_concat) 或 [`CHAR()`](string-functions.html#function_char)
    函数的一个参数或两个以上参数。（在 MySQL Server 中，这些函数可以接受可变数量的参数。）'
- en: The [`BIT_COUNT()`](bit-functions.html#function_bit-count), [`CASE`](flow-control-functions.html#operator_case),
    [`ELT()`](string-functions.html#function_elt), [`FROM_DAYS()`](date-and-time-functions.html#function_from-days),
    [`FORMAT()`](string-functions.html#function_format), [`IF()`](flow-control-functions.html#function_if),
    [`MD5()`](encryption-functions.html#function_md5), [`PERIOD_ADD()`](date-and-time-functions.html#function_period-add),
    [`PERIOD_DIFF()`](date-and-time-functions.html#function_period-diff), [`TO_DAYS()`](date-and-time-functions.html#function_to-days),
    and [`WEEKDAY()`](date-and-time-functions.html#function_weekday) functions.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIT_COUNT()`](bit-functions.html#function_bit-count)、[`CASE`](flow-control-functions.html#operator_case)、[`ELT()`](string-functions.html#function_elt)、[`FROM_DAYS()`](date-and-time-functions.html#function_from-days)、[`FORMAT()`](string-functions.html#function_format)、[`IF()`](flow-control-functions.html#function_if)、[`MD5()`](encryption-functions.html#function_md5)、[`PERIOD_ADD()`](date-and-time-functions.html#function_period-add)、[`PERIOD_DIFF()`](date-and-time-functions.html#function_period-diff)、[`TO_DAYS()`](date-and-time-functions.html#function_to-days)
    和 [`WEEKDAY()`](date-and-time-functions.html#function_weekday) 函数。'
- en: Use of [`TRIM()`](string-functions.html#function_trim) to trim substrings. Standard
    SQL supports removal of single characters only.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [`TRIM()`](string-functions.html#function_trim) 函数修剪子字符串。标准 SQL 仅支持删除单个字符。
- en: The `GROUP BY` functions [`STD()`](aggregate-functions.html#function_std), [`BIT_OR()`](aggregate-functions.html#function_bit-or),
    [`BIT_AND()`](aggregate-functions.html#function_bit-and), [`BIT_XOR()`](aggregate-functions.html#function_bit-xor),
    and [`GROUP_CONCAT()`](aggregate-functions.html#function_group-concat). See [Section 14.19,
    “Aggregate Functions”](aggregate-functions-and-modifiers.html "14.19 Aggregate
    Functions").
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GROUP BY` 函数 [`STD()`](aggregate-functions.html#function_std)、[`BIT_OR()`](aggregate-functions.html#function_bit-or)、[`BIT_AND()`](aggregate-functions.html#function_bit-and)、[`BIT_XOR()`](aggregate-functions.html#function_bit-xor)
    和 [`GROUP_CONCAT()`](aggregate-functions.html#function_group-concat)。参见 [第 14.19
    节，“聚合函数”](aggregate-functions-and-modifiers.html "14.19 Aggregate Functions")。'
