- en: 15.5 Prepared Statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.5 准备语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/sql-prepared-statements.html](https://dev.mysql.com/doc/refman/8.0/en/sql-prepared-statements.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/sql-prepared-statements.html](https://dev.mysql.com/doc/refman/8.0/en/sql-prepared-statements.html)
- en: '[15.5.1 PREPARE Statement](prepare.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.5.1 PREPARE语句](prepare.html)'
- en: '[15.5.2 EXECUTE Statement](execute.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.5.2 EXECUTE语句](execute.html)'
- en: '[15.5.3 DEALLOCATE PREPARE Statement](deallocate-prepare.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[15.5.3 DEALLOCATE PREPARE语句](deallocate-prepare.html)'
- en: 'MySQL 8.0 provides support for server-side prepared statements. This support
    takes advantage of the efficient client/server binary protocol. Using prepared
    statements with placeholders for parameter values has the following benefits:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0支持服务器端准备语句。此支持利用了高效的客户端/服务器二进制协议。使用带有参数值占位符的准备语句具有以下优点：
- en: Less overhead for parsing the statement each time it is executed. Typically,
    database applications process large volumes of almost-identical statements, with
    only changes to literal or variable values in clauses such as `WHERE` for queries
    and deletes, `SET` for updates, and `VALUES` for inserts.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次执行语句时解析语句的开销较小。通常，数据库应用程序处理大量几乎相同的语句，只有在查询和删除的`WHERE`、更新的`SET`以及插入的`VALUES`等子句中的文字或变量值发生变化。
- en: Protection against SQL injection attacks. The parameter values can contain unescaped
    SQL quote and delimiter characters.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止SQL注入攻击。参数值可以包含未转义的SQL引号和分隔符字符。
- en: 'The following sections provide an overview of the characteristics of prepared
    statements:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节概述了准备语句的特性：
- en: '[Prepared Statements in Application Programs](sql-prepared-statements.html#prepared-statements-in-applications
    "Prepared Statements in Application Programs")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[应用程序中的准备语句](sql-prepared-statements.html#prepared-statements-in-applications
    "应用程序中的准备语句")'
- en: '[Prepared Statements in SQL Scripts](sql-prepared-statements.html#prepared-statements-in-scripts
    "Prepared Statements in SQL Scripts")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL脚本中的准备语句](sql-prepared-statements.html#prepared-statements-in-scripts "SQL脚本中的准备语句")'
- en: '[PREPARE, EXECUTE, and DEALLOCATE PREPARE Statements](sql-prepared-statements.html#prepared-statement-types
    "PREPARE, EXECUTE, and DEALLOCATE PREPARE Statements")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PREPARE、EXECUTE和DEALLOCATE PREPARE语句](sql-prepared-statements.html#prepared-statement-types
    "PREPARE、EXECUTE和DEALLOCATE PREPARE语句")'
- en: '[SQL Syntax Permitted in Prepared Statements](sql-prepared-statements.html#prepared-statements-permitted
    "SQL Syntax Permitted in Prepared Statements")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[准备语句中允许的SQL语法](sql-prepared-statements.html#prepared-statements-permitted
    "准备语句中允许的SQL语法")'
- en: Prepared Statements in Application Programs
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序中的准备语句
- en: You can use server-side prepared statements through client programming interfaces,
    including the [MySQL C API client library](/doc/c-api/8.0/en/) for C programs,
    [MySQL Connector/J](/doc/connector-j/8.0/en/) for Java programs, and [MySQL Connector/NET](/doc/connector-net/en/)
    for programs using .NET technologies. For example, the C API provides a set of
    function calls that make up its prepared statement API. See [C API Prepared Statement
    Interface](/doc/c-api/8.0/en/c-api-prepared-statement-interface.html). Other language
    interfaces can provide support for prepared statements that use the binary protocol
    by linking in the C client library, one example being the [`mysqli` extension](http://php.net/mysqli),
    available in PHP 5.0 and higher.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过客户端编程接口使用服务器端准备语句，包括用于C程序的[MySQL C API客户端库](/doc/c-api/8.0/en/)，用于Java程序的[MySQL
    Connector/J](/doc/connector-j/8.0/en/)，以及用于使用.NET技术的程序的[MySQL Connector/NET](/doc/connector-net/en/)。例如，C
    API提供了一组构成其准备语句API的函数调用。请参阅[C API准备语句接口](/doc/c-api/8.0/en/c-api-prepared-statement-interface.html)。其他语言接口可以通过链接C客户端库提供支持，其中一个例子是[`mysqli`扩展](http://php.net/mysqli)，可在PHP
    5.0及更高版本中使用。
- en: Prepared Statements in SQL Scripts
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL脚本中的准备语句
- en: 'An alternative SQL interface to prepared statements is available. This interface
    is not as efficient as using the binary protocol through a prepared statement
    API, but requires no programming because it is available directly at the SQL level:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可用另一种SQL接口来处理准备语句。这种接口不如通过准备语句API使用二进制协议高效，但不需要编程，因为它直接在SQL级别提供：
- en: You can use it when no programming interface is available to you.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您无法使用编程接口时，可以使用它。
- en: You can use it from any program that can send SQL statements to the server to
    be executed, such as the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") client program.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从任何可以向服务器发送SQL语句以执行的程序中使用它，例如[**mysql**](mysql.html "6.5.1 mysql — MySQL命令行客户端")客户端程序。
- en: You can use it even if the client is using an old version of the client library.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使客户端使用旧版本的客户端库，也可以使用它。
- en: 'SQL syntax for prepared statements is intended to be used for situations such
    as these:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好的语句的 SQL 语法旨在用于以下情况：
- en: To test how prepared statements work in your application before coding it.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编码之前测试准备好的语句在您的应用程序中的工作方式。
- en: To use prepared statements when you do not have access to a programming API
    that supports them.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您没有访问支持它们的编程 API 时使用准备好的语句。
- en: To interactively troubleshoot application issues with prepared statements.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与准备好的语句交互式地解决应用程序问题。
- en: To create a test case that reproduces a problem with prepared statements, so
    that you can file a bug report.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个重现准备好的语句问题的测试用例，以便您可以提交 bug 报告。
- en: PREPARE, EXECUTE, and DEALLOCATE PREPARE Statements
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PREPARE、EXECUTE 和 DEALLOCATE PREPARE 语句
- en: 'SQL syntax for prepared statements is based on three SQL statements:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好的语句的 SQL 语法基于三个 SQL 语句：
- en: '[`PREPARE`](prepare.html "15.5.1 PREPARE Statement") prepares a statement for
    execution (see [Section 15.5.1, “PREPARE Statement”](prepare.html "15.5.1 PREPARE
    Statement")).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PREPARE`](prepare.html "15.5.1 PREPARE Statement") 为执行准备了一个语句（参见 [Section 15.5.1,
    “PREPARE Statement”](prepare.html "15.5.1 PREPARE Statement")）。'
- en: '[`EXECUTE`](execute.html "15.5.2 EXECUTE Statement") executes a prepared statement
    (see [Section 15.5.2, “EXECUTE Statement”](execute.html "15.5.2 EXECUTE Statement")).'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`EXECUTE`](execute.html "15.5.2 EXECUTE Statement") 执行一个准备好的语句（参见 [Section 15.5.2,
    “EXECUTE Statement”](execute.html "15.5.2 EXECUTE Statement")）。'
- en: '[`DEALLOCATE PREPARE`](deallocate-prepare.html "15.5.3 DEALLOCATE PREPARE Statement")
    releases a prepared statement (see [Section 15.5.3, “DEALLOCATE PREPARE Statement”](deallocate-prepare.html
    "15.5.3 DEALLOCATE PREPARE Statement")).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DEALLOCATE PREPARE`](deallocate-prepare.html "15.5.3 DEALLOCATE PREPARE Statement")
    释放一个准备好的语句（参见 [Section 15.5.3, “DEALLOCATE PREPARE Statement”](deallocate-prepare.html
    "15.5.3 DEALLOCATE PREPARE Statement")）。'
- en: The following examples show two equivalent ways of preparing a statement that
    computes the hypotenuse of a triangle given the lengths of the two sides.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了两种等效的准备好一个语句计算三角形的斜边长度的方法。
- en: 'The first example shows how to create a prepared statement by using a string
    literal to supply the text of the statement:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例展示了如何通过使用字符串文字来提供语句的文本来创建一个准备好的语句：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The second example is similar, but supplies the text of the statement as a
    user variable:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例类似，但将语句的文本作为用户变量提供：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is an additional example that demonstrates how to choose the table on
    which to perform a query at runtime, by storing the name of the table as a user
    variable:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是另一个示例，演示如何在运行时选择要执行查询的表，方法是将表名存储为用户变量：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A prepared statement is specific to the session in which it was created. If
    you terminate a session without deallocating a previously prepared statement,
    the server deallocates it automatically.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好的语句特定于创建它的会话。如果您终止一个会话而没有取消分配先前准备好的语句，服务器会自动取消分配它。
- en: A prepared statement is also global to the session. If you create a prepared
    statement within a stored routine, it is not deallocated when the stored routine
    ends.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好的语句也是会话全局的。如果您在存储过程中创建了一个准备好的语句，当存储过程结束时不会取消分配它。
- en: To guard against too many prepared statements being created simultaneously,
    set the [`max_prepared_stmt_count`](server-system-variables.html#sysvar_max_prepared_stmt_count)
    system variable. To prevent the use of prepared statements, set the value to 0.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为防止同时创建太多准备好的语句，设置 [`max_prepared_stmt_count`](server-system-variables.html#sysvar_max_prepared_stmt_count)
    系统变量。要防止使用准备好的语句，将值设置为 0。
- en: SQL Syntax Permitted in Prepared Statements
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许在准备好的语句中使用的 SQL 语法
- en: 'The following SQL statements can be used as prepared statements:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 SQL 语句可用作准备好的语句：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Other statements are not supported.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 不支持其他语句。
- en: 'For compliance with the SQL standard, which states that diagnostics statements
    are not preparable, MySQL does not support the following as prepared statements:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了符合 SQL 标准，该标准规定诊断语句不可准备，MySQL 不支持以下作为准备好的语句：
- en: '`SHOW WARNINGS`, `SHOW COUNT(*) WARNINGS`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW WARNINGS`，`SHOW COUNT(*) WARNINGS`'
- en: '`SHOW ERRORS`, `SHOW COUNT(*) ERRORS`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW ERRORS`，`SHOW COUNT(*) ERRORS`'
- en: Statements containing any reference to the [`warning_count`](server-system-variables.html#sysvar_warning_count)
    or [`error_count`](server-system-variables.html#sysvar_error_count) system variable.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含对 [`warning_count`](server-system-variables.html#sysvar_warning_count) 或 [`error_count`](server-system-variables.html#sysvar_error_count)
    系统变量的任何引用的语句。
- en: Generally, statements not permitted in SQL prepared statements are also not
    permitted in stored programs. Exceptions are noted in [Section 27.8, “Restrictions
    on Stored Programs”](stored-program-restrictions.html "27.8 Restrictions on Stored
    Programs").
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，SQL预处理语句中不允许的语句在存储程序中也不允许。特殊情况在[第27.8节，“存储程序的限制”](stored-program-restrictions.html
    "27.8 Restrictions on Stored Programs")中有说明。
- en: Metadata changes to tables or views referred to by prepared statements are detected
    and cause automatic repreparation of the statement when it is next executed. For
    more information, see [Section 10.10.3, “Caching of Prepared Statements and Stored
    Programs”](statement-caching.html "10.10.3 Caching of Prepared Statements and
    Stored Programs").
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当预处理语句引用的表或视图的元数据发生更改时，会检测到并在下次执行时自动重新准备该语句。更多信息，请参见[第10.10.3节，“预处理语句和存储程序的缓存”](statement-caching.html
    "10.10.3 Caching of Prepared Statements and Stored Programs")。
- en: Placeholders can be used for the arguments of the `LIMIT` clause when using
    prepared statements. See [Section 15.2.13, “SELECT Statement”](select.html "15.2.13 SELECT
    Statement").
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用预处理语句时，可以为`LIMIT`子句的参数使用占位符。参见[第15.2.13节，“SELECT语句”](select.html "15.2.13 SELECT
    Statement")。
- en: In prepared [`CALL`](call.html "15.2.1 CALL Statement") statements used with
    [`PREPARE`](prepare.html "15.5.1 PREPARE Statement") and [`EXECUTE`](execute.html
    "15.5.2 EXECUTE Statement"), placeholder support for `OUT` and `INOUT` parameters
    is available beginning with MySQL 8.0\. See [Section 15.2.1, “CALL Statement”](call.html
    "15.2.1 CALL Statement"), for an example and a workaround for earlier versions.
    Placeholders can be used for `IN` parameters regardless of version.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在与[`PREPARE`](prepare.html "15.5.1 PREPARE Statement")和[`EXECUTE`](execute.html
    "15.5.2 EXECUTE Statement")一起使用的预处理[`CALL`](call.html "15.2.1 CALL Statement")语句中，从MySQL
    8.0开始支持`OUT`和`INOUT`参数的占位符。请参见[第15.2.1节，“CALL语句”](call.html "15.2.1 CALL Statement")，以获取一个示例和早期版本的解决方法。无论版本如何，都可以为`IN`参数使用占位符。
- en: SQL syntax for prepared statements cannot be used in nested fashion. That is,
    a statement passed to [`PREPARE`](prepare.html "15.5.1 PREPARE Statement") cannot
    itself be a [`PREPARE`](prepare.html "15.5.1 PREPARE Statement"), [`EXECUTE`](execute.html
    "15.5.2 EXECUTE Statement"), or [`DEALLOCATE PREPARE`](deallocate-prepare.html
    "15.5.3 DEALLOCATE PREPARE Statement") statement.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理语句的SQL语法不能以嵌套方式使用。也就是说，传递给[`PREPARE`](prepare.html "15.5.1 PREPARE Statement")的语句本身不能是[`PREPARE`](prepare.html
    "15.5.1 PREPARE Statement")、[`EXECUTE`](execute.html "15.5.2 EXECUTE Statement")或[`DEALLOCATE
    PREPARE`](deallocate-prepare.html "15.5.3 DEALLOCATE PREPARE Statement")语句。
- en: SQL syntax for prepared statements is distinct from using prepared statement
    API calls. For example, you cannot use the [`mysql_stmt_prepare()`](/doc/c-api/8.0/en/mysql-stmt-prepare.html)
    C API function to prepare a [`PREPARE`](prepare.html "15.5.1 PREPARE Statement"),
    [`EXECUTE`](execute.html "15.5.2 EXECUTE Statement"), or [`DEALLOCATE PREPARE`](deallocate-prepare.html
    "15.5.3 DEALLOCATE PREPARE Statement") statement.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理语句的SQL语法与使用预处理语句API调用是不同的。例如，你不能使用[`mysql_stmt_prepare()`](/doc/c-api/8.0/en/mysql-stmt-prepare.html)
    C API函数来准备[`PREPARE`](prepare.html "15.5.1 PREPARE Statement")、[`EXECUTE`](execute.html
    "15.5.2 EXECUTE Statement")或[`DEALLOCATE PREPARE`](deallocate-prepare.html "15.5.3 DEALLOCATE
    PREPARE Statement")语句。
- en: SQL syntax for prepared statements can be used within stored procedures, but
    not in stored functions or triggers. However, a cursor cannot be used for a dynamic
    statement that is prepared and executed with [`PREPARE`](prepare.html "15.5.1 PREPARE
    Statement") and [`EXECUTE`](execute.html "15.5.2 EXECUTE Statement"). The statement
    for a cursor is checked at cursor creation time, so the statement cannot be dynamic.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理语句的SQL语法可以在存储过程中使用，但不能在存储函数或触发器中使用。然而，不能对使用[`PREPARE`](prepare.html "15.5.1 PREPARE
    Statement")和[`EXECUTE`](execute.html "15.5.2 EXECUTE Statement")准备和执行的动态语句使用游标。游标的语句在游标创建时进行检查，因此语句不能是动态的。
- en: SQL syntax for prepared statements does not support multi-statements (that is,
    multiple statements within a single string separated by `;` characters).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理语句的SQL语法不支持多语句（即，在一个字符串中由`;`字符分隔的多个语句）。
- en: To write C programs that use the [`CALL`](call.html "15.2.1 CALL Statement")
    SQL statement to execute stored procedures that contain prepared statements, the
    `CLIENT_MULTI_RESULTS` flag must be enabled. This is because each [`CALL`](call.html
    "15.2.1 CALL Statement") returns a result to indicate the call status, in addition
    to any result sets that might be returned by statements executed within the procedure.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写使用[`CALL`](call.html "15.2.1 CALL Statement") SQL语句执行包含准备语句的存储过程的C程序，必须启用`CLIENT_MULTI_RESULTS`标志。这是因为每个[`CALL`](call.html
    "15.2.1 CALL Statement")都会返回一个结果以指示调用状态，除了存储过程内执行的语句可能返回的任何结果集。
- en: '`CLIENT_MULTI_RESULTS` can be enabled when you call [`mysql_real_connect()`](/doc/c-api/8.0/en/mysql-real-connect.html),
    either explicitly by passing the `CLIENT_MULTI_RESULTS` flag itself, or implicitly
    by passing `CLIENT_MULTI_STATEMENTS` (which also enables `CLIENT_MULTI_RESULTS`).
    For additional information, see [Section 15.2.1, “CALL Statement”](call.html "15.2.1 CALL
    Statement").'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用[`mysql_real_connect()`](/doc/c-api/8.0/en/mysql-real-connect.html)时，可以通过显式传递`CLIENT_MULTI_RESULTS`标志或隐式传递`CLIENT_MULTI_STATEMENTS`（也会启用`CLIENT_MULTI_RESULTS`）来启用`CLIENT_MULTI_RESULTS`。有关更多信息，请参见[第15.2.1节，“CALL语句”](call.html
    "15.2.1 CALL Statement")。
