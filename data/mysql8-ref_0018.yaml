- en: 1.6.3 How MySQL Deals with Constraints
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.6.3 MySQL 如何处理约束
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/constraints.html](https://dev.mysql.com/doc/refman/8.0/en/constraints.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/constraints.html](https://dev.mysql.com/doc/refman/8.0/en/constraints.html)
- en: '[1.6.3.1 PRIMARY KEY and UNIQUE Index Constraints](constraint-primary-key.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.6.3.1 主键和唯一索引约束](constraint-primary-key.html)'
- en: '[1.6.3.2 FOREIGN KEY Constraints](constraint-foreign-key.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.6.3.2 外键约束](constraint-foreign-key.html)'
- en: '[1.6.3.3 Enforced Constraints on Invalid Data](constraint-invalid-data.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.6.3.3 对无效数据强制执行的约束](constraint-invalid-data.html)'
- en: '[1.6.3.4 ENUM and SET Constraints](constraint-enum.html)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[1.6.3.4 枚举和集合约束](constraint-enum.html)'
- en: MySQL enables you to work both with transactional tables that permit rollback
    and with nontransactional tables that do not. Because of this, constraint handling
    is a bit different in MySQL than in other DBMSs. We must handle the case when
    you have inserted or updated a lot of rows in a nontransactional table for which
    changes cannot be rolled back when an error occurs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 允许您同时使用允许回滚的事务表和不允许回滚的非事务表。因此，在 MySQL 中，约束处理与其他数据库管理系统有些不同。当在非事务表中插入或更新了大量行且发生错误时，无法回滚更改时，我们必须处理这种情况。
- en: The basic philosophy is that MySQL Server tries to produce an error for anything
    that it can detect while parsing a statement to be executed, and tries to recover
    from any errors that occur while executing the statement. We do this in most cases,
    but not yet for all.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 基本理念是，MySQL 服务器尝试为解析要执行的语句中可以检测到的任何内容生成错误，并尝试从执行语句时发生的任何错误中恢复。在大多数情况下，我们会这样做，但还不是全部。
- en: The options MySQL has when an error occurs are to stop the statement in the
    middle or to recover as well as possible from the problem and continue. By default,
    the server follows the latter course. This means, for example, that the server
    may coerce invalid values to the closest valid values.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当 MySQL 发生错误时，其选项包括停止语句执行或尽可能从问题中恢复并继续。默认情况下，服务器遵循后一种方式。这意味着，例如，服务器可能会将无效值强制转换为最接近的有效值。
- en: Several SQL mode options are available to provide greater control over handling
    of bad data values and whether to continue statement execution or abort when errors
    occur. Using these options, you can configure MySQL Server to act in a more traditional
    fashion that is like other DBMSs that reject improper input. The SQL mode can
    be set globally at server startup to affect all clients. Individual clients can
    set the SQL mode at runtime, which enables each client to select the behavior
    most appropriate for its requirements. See [Section 7.1.11, “Server SQL Modes”](sql-mode.html
    "7.1.11 Server SQL Modes").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个 SQL 模式选项可用于更好地控制处理不良数据值的方式以及在发生错误时是否继续语句执行或中止。使用这些选项，您可以配置 MySQL 服务器以更传统的方式运行，类似于其他拒绝不当输入的数据库管理系统。SQL
    模式可以在服务器启动时全局设置以影响所有客户端。各个客户端可以在运行时设置 SQL 模式，从而使每个客户端选择最适合其需求的行为。请参阅 [第 7.1.11
    节，“服务器 SQL 模式”](sql-mode.html "7.1.11 服务器 SQL 模式")。
- en: The following sections describe how MySQL Server handles different types of
    constraints.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节描述了 MySQL 服务器如何处理不同类型的约束。
