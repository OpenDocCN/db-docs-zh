- en: 19.4.2 Handling an Unexpected Halt of a Replica
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 19.4.2 处理复制品意外停止
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-solutions-unexpected-replica-halt.html](https://dev.mysql.com/doc/refman/8.0/en/replication-solutions-unexpected-replica-halt.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-solutions-unexpected-replica-halt.html](https://dev.mysql.com/doc/refman/8.0/en/replication-solutions-unexpected-replica-halt.html)
- en: In order for replication to be resilient to unexpected halts of the server (sometimes
    described as crash-safe) it must be possible for the replica to recover its state
    before halting. This section describes the impact of an unexpected halt of a replica
    during replication, and how to configure a replica for the best chance of recovery
    to continue replication.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使复制对服务器的意外停止具有弹性（有时被描述为崩溃安全），必须使复制品能够在停止之前恢复其状态。本节描述了复制过程中复制品意外停止的影响，以及如何配置复制品以获得继续复制的最佳恢复机会。
- en: After an unexpected halt of a replica, upon restart the replication SQL thread
    must recover information about which transactions have been executed already.
    The information required for recovery is stored in the replica's applier metadata
    repository. From MySQL 8.0, this repository is created by default as an [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") table named `mysql.slave_relay_log_info`.
    By using this transactional storage engine the information is always recoverable
    upon restart. Updates to the applier metadata repository are committed together
    with the transactions, meaning that the replica's progress information recorded
    in that repository is always consistent with what has been applied to the database,
    even in the event of an unexpected server halt. For more information on the applier
    metadata repository, see [Section 19.2.4, “Relay Log and Replication Metadata
    Repositories”](replica-logs.html "19.2.4 Relay Log and Replication Metadata Repositories").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制品意外停止后，重新启动时，复制SQL线程必须恢复已执行的事务的信息。恢复所需的信息存储在复制品的应用程序元数据存储库中。从MySQL 8.0开始，默认情况下，此存储库以名为`mysql.slave_relay_log_info`的[`InnoDB`](innodb-storage-engine.html
    "第17章InnoDB存储引擎")表的形式创建。通过使用这种事务性存储引擎，信息始终可以在重新启动时恢复。对应用程序元数据存储库的更新与事务一起提交，这意味着记录在该存储库中的复制品进度信息始终与已应用于数据库的内容一致，即使服务器意外停止也是如此。有关应用程序元数据存储库的更多信息，请参见[第19.2.4节“中继日志和复制元数据存储库”](replica-logs.html
    "19.2.4 中继日志和复制元数据存储库")。
- en: DML transactions and also atomic DDL update the replication positions in the
    replica's applier metadata repository in the `mysql.slave_relay_log_info` table
    together with applying the changes to the database, as an atomic operation. In
    all other cases, including DDL statements that are not fully atomic, and exempted
    storage engines that do not support atomic DDL, the `mysql.slave_relay_log_info`
    table might be missing updates associated with replicated data if the server halts
    unexpectedly. Restoring updates in this case is a manual process. For details
    on atomic DDL support in MySQL 8.0, and the resulting behavior for the replication
    of certain statements, see [Section 15.1.1, “Atomic Data Definition Statement
    Support”](atomic-ddl.html "15.1.1 Atomic Data Definition Statement Support").
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: DML事务和原子DDL更新也会在`mysql.slave_relay_log_info`表中更新复制品的应用程序元数据存储库的复制位置，并将更改应用于数据库，作为一个原子操作。在所有其他情况下，包括不完全原子的DDL语句和不支持原子DDL的豁免存储引擎，如果服务器意外停止，`mysql.slave_relay_log_info`表可能会缺少与复制数据相关的更新。在这种情况下，恢复更新是一个手动过程。有关MySQL
    8.0中原子DDL支持的详细信息以及某些语句复制的结果行为，请参见[第15.1.1节“原子数据定义语句支持”](atomic-ddl.html "15.1.1 原子数据定义语句支持")。
- en: The recovery process by which a replica recovers from an unexpected halt varies
    depending on the configuration of the replica. The details of the recovery process
    are influenced by the chosen method of replication, whether the replica is single-threaded
    or multithreaded, and the setting of relevant system variables. The overall aim
    of the recovery process is to identify what transactions had already been applied
    on the replica's database before the unexpected halt occurred, and retrieve and
    apply the transactions that the replica missed following the unexpected halt.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 复制品从意外停止中恢复的恢复过程取决于复制品的配置。恢复过程的细节受到复制方法的选择、复制品是单线程还是多线程以及相关系统变量设置的影响。恢复过程的总体目标是确定在意外停止发生之前复制品的数据库上已经应用了哪些事务，并检索并应用在意外停止后复制品错过的事务。
- en: For GTID-based replication, the recovery process needs the GTIDs of the transactions
    that were already received or committed by the replica. The missing transactions
    can be retrieved from the source using GTID auto-positioning, which automatically
    compares the source's transactions to the replica's transactions and identifies
    the missing transactions.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于基于GTID的复制，恢复过程需要副本已经接收或提交的事务的GTID。缺失的事务可以通过GTID自动定位从源获取，该过程会自动比较源的事务和副本的事务，并识别缺失的事务。
- en: For file position based replication, the recovery process needs an accurate
    replication SQL thread (applier) position showing the last transaction that was
    applied on the replica. Based on that position, the replication I/O thread (receiver)
    retrieves from the source's binary log all of the transactions that should be
    applied on the replica from that point on.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于基于文件位置的复制，恢复过程需要准确的复制SQL线程（应用程序）位置，显示在副本上应用的最后一个事务。基于该位置，复制I/O线程（接收器）从源的二进制日志中检索应该从该点开始在副本上应用的所有事务。
- en: Using GTID-based replication makes it easiest to configure replication to be
    resilient to unexpected halts. GTID auto-positioning means the replica can reliably
    identify and retrieve missing transactions, even if there are gaps in the sequence
    of applied transactions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于GTID的复制使得配置复制以应对意外停止变得最容易。GTID自动定位意味着副本可以可靠地识别和检索缺失的事务，即使应用事务序列中存在间隙。
- en: The following information provides combinations of settings that are appropriate
    for different types of replica to guarantee recovery as far as this is under the
    control of replication.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下信息提供了适用于不同类型副本的设置组合，以确保在复制控制范围内尽可能实现恢复。
- en: Important
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Some factors outside the control of replication can have an impact on the replication
    recovery process and the overall state of replication after the recovery process.
    In particular, the settings that influence the recovery process for individual
    storage engines might result in transactions being lost in the event of an unexpected
    halt of a replica, and therefore unavailable to the replication recovery process.
    The [`innodb_flush_log_at_trx_commit=1`](innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
    setting mentioned in the list below is a key setting for a replication setup that
    uses [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    with transactions. However, other settings specific to [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") or to other storage engines, especially
    those relating to flushing or synchronization, can also have an impact. Always
    check for and apply recommendations made by your chosen storage engines about
    crash-safe settings.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 复制控制范围之外的一些因素可能会影响复制恢复过程和恢复过程后复制的整体状态。特别是，影响各个存储引擎恢复过程的设置可能导致在副本意外停止时丢失事务，因此这些事务对于复制恢复过程不可用。下面列表中提到的[`innodb_flush_log_at_trx_commit=1`](innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)设置是使用带有事务的[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")的复制设置的关键设置。然而，特定于[`InnoDB`](innodb-storage-engine.html "第17章
    InnoDB存储引擎")或其他存储引擎的其他设置，特别是与刷新或同步相关的设置，也可能会产生影响。始终检查并应用您选择的存储引擎关于崩溃安全设置的建议。
- en: 'The following combination of settings on a replica is the most resilient to
    unexpected halts:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在副本上的以下设置组合对于意外停止是最具弹性的：
- en: When GTID-based replication is in use ([`gtid_mode=ON`](replication-options-gtids.html#sysvar_gtid_mode)),
    set `SOURCE_AUTO_POSITION=1` | `MASTER_AUTO_POSITION=1`, which activates GTID
    auto-positioning for the connection to the source to automatically identify and
    retrieve missing transactions. This option is set using a [`CHANGE REPLICATION
    SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION SOURCE
    TO Statement") statement (from MySQL 8.0.23) or [`CHANGE MASTER TO`](change-master-to.html
    "15.4.2.1 CHANGE MASTER TO Statement") statement (before MySQL 8.0.23). If the
    replica has multiple replication channels, you need to set this option for each
    channel individually. For details of how GTID auto-positioning works, see [Section 19.1.3.3,
    “GTID Auto-Positioning”](replication-gtids-auto-positioning.html "19.1.3.3 GTID
    Auto-Positioning"). When file position based replication is in use, `SOURCE_AUTO_POSITION=1`
    | `MASTER_AUTO_POSITION=1` is not used, and instead the binary log position or
    relay log position is used to control where replication starts.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用基于GTID的复制时（[`gtid_mode=ON`](replication-options-gtids.html#sysvar_gtid_mode)），设置`SOURCE_AUTO_POSITION=1`
    | `MASTER_AUTO_POSITION=1`，这将激活GTID自动定位，使连接到源的连接自动识别并检索丢失的事务。可以使用[`CHANGE REPLICATION
    SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION SOURCE
    TO Statement")语句（从MySQL 8.0.23开始）或[`CHANGE MASTER TO`](change-master-to.html "15.4.2.1 CHANGE
    MASTER TO Statement")语句（MySQL 8.0.23之前）来设置此选项。如果复制品有多个复制通道，则需要为每个通道单独设置此选项。有关GTID自动定位的工作原理的详细信息，请参见[第19.1.3.3节，“GTID自动定位”](replication-gtids-auto-positioning.html
    "19.1.3.3 GTID Auto-Positioning")。当使用基于文件位置的复制时，不使用`SOURCE_AUTO_POSITION=1` |
    `MASTER_AUTO_POSITION=1`，而是使用二进制日志位置或中继日志位置来控制复制开始的位置。
- en: From MySQL 8.0.27, when GTID-based replication is in use ([`gtid_mode=ON`](replication-options-gtids.html#sysvar_gtid_mode)),
    set `GTID_ONLY=1`, which makes the replica use only GTIDs in the recovery process,
    and stop persisting binary log and relay log file names and file positions in
    the replication metadata repositories. This option is set using a [`CHANGE REPLICATION
    SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION SOURCE
    TO Statement") statement. If the replica has multiple replication channels, you
    need to set this option for each channel individually. With `GTID_ONLY=1`, during
    recovery, the file position information is ignored and GTID auto-skip is used
    to skip transactions that have already been supplied, rather than identifying
    the correct file position. This strategy is more efficient provided that you purge
    relay logs using the default setting for [`relay_log_purge`](replication-options-replica.html#sysvar_relay_log_purge),
    which means only one relay log file needs to be inspected.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.27开始，当使用基于GTID的复制时（[`gtid_mode=ON`](replication-options-gtids.html#sysvar_gtid_mode)），设置`GTID_ONLY=1`，这使得复制品在恢复过程中仅使用GTID，并停止在复制元数据存储库中持久化二进制日志和中继日志文件名和文件位置。可以使用[`CHANGE
    REPLICATION SOURCE TO`](change-replication-source-to.html "15.4.2.3 CHANGE REPLICATION
    SOURCE TO Statement")语句来设置此选项。如果复制品有多个复制通道，则需要为每个通道单独设置此选项。使用`GTID_ONLY=1`时，在恢复过程中，将忽略文件位置信息，并使用GTID自动跳过来跳过已经提供的事务，而不是识别正确的文件位置。这种策略更有效，前提是您使用[`relay_log_purge`](replication-options-replica.html#sysvar_relay_log_purge)的默认设置清除中继日志，这意味着只需要检查一个中继日志文件。
- en: Set [`sync_relay_log=1`](replication-options-replica.html#sysvar_sync_relay_log),
    which instructs the replication receiver thread to synchronize the relay log to
    disk after each received transaction is written to it. This means the replica's
    record of the current position read from the source's binary log (in the applier
    metadata repository) is never ahead of the record of transactions saved in the
    relay log. Note that although this setting is the safest, it is also the slowest
    due to the number of disk writes involved. With `sync_relay_log > 1`, or `sync_relay_log=0`
    (where synchronization is handled by the operating system), in the event of an
    unexpected halt of a replica there might be committed transactions that have not
    been synchronized to disk. Such transactions can cause the recovery process to
    fail if the recovering replica, based on the information it has in the relay log
    as last synchronized to disk, tries to retrieve and apply the transactions again
    instead of skipping them. Setting `sync_relay_log=1` is particularly important
    for a multi-threaded replica, where the recovery process fails if gaps in the
    sequence of transactions cannot be filled using the information in the relay log.
    For a single-threaded replica, the recovery process only needs to use the relay
    log if the relevant information is not available in the applier metadata repository.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置[`sync_relay_log=1`](replication-options-replica.html#sysvar_sync_relay_log)，指示复制接收线程在每个接收的事务写入后将中继日志同步到磁盘。这意味着副本从源二进制日志中读取的当前位置记录（在应用程序元数据存储库中）永远不会超过保存在中继日志中的事务记录。请注意，尽管这个设置是最安全的，但由于涉及磁盘写入的次数较多，因此也是最慢的。当`sync_relay_log
    > 1`或`sync_relay_log=0`（其中同步由操作系统处理）时，在副本意外停止的情况下，可能存在已提交但尚未同步到磁盘的事务。这些事务可能会导致恢复过程失败，如果正在恢复的副本根据中继日志中的信息（最后一次同步到磁盘）尝试重新检索和应用事务而不是跳过它们。设置`sync_relay_log=1`对于多线程副本尤为重要，如果无法使用中继日志中的信息填补事务序列中的间隙，则恢复过程将失败。对于单线程副本，只有在应用程序元数据存储库中没有相关信息时，恢复过程才需要使用中继日志。
- en: Set [`innodb_flush_log_at_trx_commit=1`](innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit),
    which synchronizes the [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine") logs to disk before each transaction is committed. This setting,
    which is the default, ensures that [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine") tables and the [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine") logs are saved on disk so that there is no longer a requirement
    for the information in the relay log regarding the transaction. Combined with
    the setting [`sync_relay_log=1`](replication-options-replica.html#sysvar_sync_relay_log),
    this setting further ensures that the content of the [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") tables and the [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") logs is consistent with the content of
    the relay log at all times, so that purging the relay log files cannot cause unfillable
    gaps in the replica's history of transactions in the event of an unexpected halt.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置[`innodb_flush_log_at_trx_commit=1`](innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)，在每个事务提交之前将[`InnoDB`](innodb-storage-engine.html
    "第17章InnoDB存储引擎")日志同步到磁盘。这个默认设置确保[`InnoDB`](innodb-storage-engine.html "第17章InnoDB存储引擎")表和[`InnoDB`](innodb-storage-engine.html
    "第17章InnoDB存储引擎")日志被保存在磁盘上，因此不再需要关于事务的中继日志中的信息。结合设置[`sync_relay_log=1`](replication-options-replica.html#sysvar_sync_relay_log)，这个设置进一步确保[`InnoDB`](innodb-storage-engine.html
    "第17章InnoDB存储引擎")表和[`InnoDB`](innodb-storage-engine.html "第17章InnoDB存储引擎")日志的内容始终与中继日志的内容一致，以便在意外停止时，清除中继日志文件不会导致副本事务历史中存在无法填补的间隙。
- en: Set [`relay_log_info_repository = TABLE`](replication-options-replica.html#sysvar_relay_log_info_repository),
    which stores the replication SQL thread position in the [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") table `mysql.slave_relay_log_info`, and
    updates it together with the transaction commit to ensure a record that is always
    accurate. This setting is the default from MySQL 8.0, and the `FILE` setting is
    deprecated. From MySQL 8.0.23, the use of the system variable itself is deprecated,
    so omit it and allow it to default. If the `FILE` setting is used, which was the
    default in earlier releases, the information is stored in a file in the data directory
    that is updated after the transaction has been applied. This creates a risk of
    losing synchrony with the source depending at which stage of processing a transaction
    the replica halts at, or even corruption of the file itself. With the setting
    [`relay_log_info_repository = FILE`](replication-options-replica.html#sysvar_relay_log_info_repository),
    recovery is not guaranteed.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置[`relay_log_info_repository = TABLE`](replication-options-replica.html#sysvar_relay_log_info_repository)，将复制SQL线程位置存储在[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")表`mysql.slave_relay_log_info`中，并与事务提交一起更新，以确保始终准确的记录。这个设置是MySQL
    8.0的默认设置，`FILE`设置已被弃用。从MySQL 8.0.23开始，系统变量本身的使用已被弃用，因此可以省略它并允许其默认值。如果使用了`FILE`设置，这在早期版本中是默认设置，信息将存储在数据目录中的文件中，在事务应用后更新。这会导致与源的同步丢失的风险，具体取决于副本在处理事务的哪个阶段停止，甚至文件本身的损坏。使用设置[`relay_log_info_repository
    = FILE`](replication-options-replica.html#sysvar_relay_log_info_repository)，无法保证恢复。
- en: Set [`relay_log_recovery = ON`](replication-options-replica.html#sysvar_relay_log_recovery),
    which enables automatic relay log recovery immediately following server startup.
    This global variable defaults to `OFF` and is read-only at runtime, but you can
    set it to `ON` with the [`--relay-log-recovery`](replication-options-replica.html#sysvar_relay_log_recovery)
    option at replica startup following an unexpected halt of a replica. Note that
    this setting ignores the existing relay log files, in case they are corrupted
    or inconsistent. The relay log recovery process starts a new relay log file and
    fetches transactions from the source beginning at the replication SQL thread position
    recorded in the applier metadata repository. The previous relay log files are
    removed over time by the replica's normal purge mechanism.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置[`relay_log_recovery = ON`](replication-options-replica.html#sysvar_relay_log_recovery)，在服务器启动后立即启用自动中继日志恢复。这个全局变量默认为`OFF`，在运行时是只读的，但您可以在副本启动时使用[`--relay-log-recovery`](replication-options-replica.html#sysvar_relay_log_recovery)选项将其设置为`ON`，以应对副本意外停止。请注意，此设置会忽略现有的中继日志文件，以防它们损坏或不一致。中继日志恢复过程会启动一个新的中继日志文件，并从在应用程序元数据存储库中记录的复制SQL线程位置开始从源获取事务。副本的正常清理机制会随着时间删除先前的中继日志文件。
- en: For a multithreaded replica, setting [`relay_log_recovery = ON`](replication-options-replica.html#sysvar_relay_log_recovery)
    automatically handles any inconsistencies and gaps in the sequence of transactions
    that have been executed from the relay log. These gaps can occur when file position
    based replication is in use. (For more details, see [Section 19.5.1.34, “Replication
    and Transaction Inconsistencies”](replication-features-transaction-inconsistencies.html
    "19.5.1.34 Replication and Transaction Inconsistencies").) The relay log recovery
    process deals with gaps using the same method as the [`START REPLICA UNTIL SQL_AFTER_MTS_GAPS`](start-replica.html
    "15.4.2.6 START REPLICA Statement") (or before MySQL 8.0.22, `START SLAVE` instead
    of `START REPLICA`) statement would. When the replica reaches a consistent gap-free
    state, the relay log recovery process goes on to fetch further transactions from
    the source beginning at the replication SQL thread position. When GTID-based replication
    is in use, from MySQL 8.0.18 a multithreaded replica checks first whether `MASTER_AUTO_POSITION`
    is set to `ON`, and if it is, omits the step of calculating the transactions that
    should be skipped or not skipped, so that the old relay logs are not required
    for the recovery process.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多线程复制，设置[`relay_log_recovery = ON`](replication-options-replica.html#sysvar_relay_log_recovery)会自动处理中继日志中已执行的事务序列中的任何不一致和间隙。当使用基于文件位置的复制时，这些间隙可能会发生。（有关更多详细信息，请参见[第19.5.1.34节，“复制和事务不一致性”](replication-features-transaction-inconsistencies.html
    "19.5.1.34 复制和事务不一致性")。）中继日志恢复过程使用与[`START REPLICA UNTIL SQL_AFTER_MTS_GAPS`](start-replica.html
    "15.4.2.6 START REPLICA Statement")（或在MySQL 8.0.22之前，使用`START SLAVE`而不是`START
    REPLICA`）语句相同的方法处理间隙。当复制达到一致的无间隙状态时，中继日志恢复过程继续从源头开始获取进一步的事务，从复制SQL线程位置开始。当使用基于GTID的复制时，从MySQL
    8.0.18开始，多线程复制首先检查`MASTER_AUTO_POSITION`是否设置为`ON`，如果是，则省略计算应跳过或不跳过的事务的步骤，因此旧的中继日志不需要用于恢复过程。
