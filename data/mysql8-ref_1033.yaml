- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/get-diagnostics.html](https://dev.mysql.com/doc/refman/8.0/en/get-diagnostics.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/get-diagnostics.html](https://dev.mysql.com/doc/refman/8.0/en/get-diagnostics.html)
- en: 15.6.7.3 GET DIAGNOSTICS Statement
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.6.7.3 获取诊断信息语句
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: SQL statements produce diagnostic information that populates the diagnostics
    area. The [`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS Statement")
    statement enables applications to inspect this information. (You can also use
    [`SHOW WARNINGS`](show-warnings.html "15.7.7.42 SHOW WARNINGS Statement") or [`SHOW
    ERRORS`](show-errors.html "15.7.7.17 SHOW ERRORS Statement") to see conditions
    or errors.)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQL语句生成填充诊断区域的诊断信息。[`获取诊断信息`](get-diagnostics.html "15.6.7.3 获取诊断信息语句")语句使应用程序能够检查这些信息。（您还可以使用[`显示警告`](show-warnings.html
    "15.7.7.42 显示警告语句")或[`显示错误`](show-errors.html "15.7.7.17 显示错误语句")来查看条件或错误。）
- en: No special privileges are required to execute [`GET DIAGNOSTICS`](get-diagnostics.html
    "15.6.7.3 GET DIAGNOSTICS Statement").
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 执行[`获取诊断信息`](get-diagnostics.html "15.6.7.3 获取诊断信息语句")不需要特殊权限。
- en: The keyword `CURRENT` means to retrieve information from the current diagnostics
    area. The keyword `STACKED` means to retrieve information from the second diagnostics
    area, which is available only if the current context is a condition handler. If
    neither keyword is given, the default is to use the current diagnostics area.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字`CURRENT`表示从当前诊断区域检索信息。关键字`STACKED`表示从第二诊断区域检索信息，仅当当前上下文为条件处理程序时才可用。如果未给出任何关键字，则默认使用当前诊断区域。
- en: 'The [`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS Statement")
    statement is typically used in a handler within a stored program. It is a MySQL
    extension that [`GET [CURRENT] DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET
    DIAGNOSTICS Statement") is permitted outside handler context to check the execution
    of any SQL statement. For example, if you invoke the [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") client program, you can enter these statements
    at the prompt:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`获取诊断信息`](get-diagnostics.html "15.6.7.3 获取诊断信息语句")语句通常在存储程序内的处理程序中使用。这是MySQL的一个扩展，允许在处理程序上下文之外使用[`获取[当前]诊断信息`](get-diagnostics.html
    "15.6.7.3 获取诊断信息语句")来检查任何SQL语句的执行。例如，如果调用[**mysql**](mysql.html "6.5.1 mysql —
    MySQL命令行客户端")客户端程序，则可以在提示符下输入这些语句：'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This extension applies only to the current diagnostics area. It does not apply
    to the second diagnostics area because `GET STACKED DIAGNOSTICS` is permitted
    only if the current context is a condition handler. If that is not the case, a
    `GET STACKED DIAGNOSTICS when handler not active` error occurs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展仅适用于当前诊断区域。它不适用于第二诊断区域，因为只有在当前上下文为条件处理程序时才允许使用`获取堆叠诊断信息`。如果不是这种情况，则会发生`处理程序未激活时获取堆叠诊断信息`错误。
- en: 'For a description of the diagnostics area, see [Section 15.6.7.7, “The MySQL
    Diagnostics Area”](diagnostics-area.html "15.6.7.7 The MySQL Diagnostics Area").
    Briefly, it contains two kinds of information:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有关诊断区域的描述，请参阅[第15.6.7.7节，“MySQL诊断区域”](diagnostics-area.html "15.6.7.7 MySQL诊断区域")。简而言之，它包含两种信息：
- en: Statement information, such as the number of conditions that occurred or the
    affected-rows count.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语句信息，如发生的条件数或受影响行数。
- en: Condition information, such as the error code and message. If a statement raises
    multiple conditions, this part of the diagnostics area has a condition area for
    each one. If a statement raises no conditions, this part of the diagnostics area
    is empty.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件信息，如错误代码和消息。如果语句引发多个条件，则诊断区域的此部分为每个条件区域。如果语句未引发任何条件，则诊断区域的此部分为空。
- en: 'For a statement that produces three conditions, the diagnostics area contains
    statement and condition information like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于产生三个条件的语句，诊断区域包含如下语句和条件信息：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS Statement")
    can obtain either statement or condition information, but not both in the same
    statement:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[`获取诊断信息`](get-diagnostics.html "15.6.7.3 获取诊断信息语句")可以获取语句或条件信息，但不能在同一语句中同时获取两者：'
- en: 'To obtain statement information, retrieve the desired statement items into
    target variables. This instance of [`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET
    DIAGNOSTICS Statement") assigns the number of available conditions and the rows-affected
    count to the user variables `@p1` and `@p2`:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取语句信息，请将所需的语句项检索到目标变量中。此[`获取诊断信息`](get-diagnostics.html "15.6.7.3 获取诊断信息语句")实例将可用条件数和受影响行数分配给用户变量`@p1`和`@p2`：
- en: '[PRE3]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To obtain condition information, specify the condition number and retrieve
    the desired condition items into target variables. This instance of [`GET DIAGNOSTICS`](get-diagnostics.html
    "15.6.7.3 GET DIAGNOSTICS Statement") assigns the SQLSTATE value and error message
    to the user variables `@p3` and `@p4`:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取条件信息，请指定条件编号，并将所需的条件项检索到目标变量中。[`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET
    DIAGNOSTICS Statement")的这个实例将SQLSTATE值和错误消息分配给用户变量`@p3`和`@p4`：
- en: '[PRE4]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The retrieval list specifies one or more `*`target`* = *`item_name`*` assignments,
    separated by commas. Each assignment names a target variable and either a *`statement_information_item_name`*
    or *`condition_information_item_name`* designator, depending on whether the statement
    retrieves statement or condition information.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 检索列表指定一个或多个`*`target`* = *`item_name`*`赋值，用逗号分隔。每个赋值命名一个目标变量，要么是*`statement_information_item_name`*，要么是*`condition_information_item_name`*标识符，取决于语句检索语句还是条件信息。
- en: Valid *`target`* designators for storing item information can be stored procedure
    or function parameters, stored program local variables declared with [`DECLARE`](declare.html
    "15.6.3 DECLARE Statement"), or user-defined variables.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 用于存储项目信息的有效*`target`*标识符可以是存储过程或函数参数，使用[`DECLARE`](declare.html "15.6.3 DECLARE
    Statement")声明的存储程序本地变量，或用户定义变量。
- en: Valid *`condition_number`* designators can be stored procedure or function parameters,
    stored program local variables declared with [`DECLARE`](declare.html "15.6.3 DECLARE
    Statement"), user-defined variables, system variables, or literals. A character
    literal may include a *`_charset`* introducer. A warning occurs if the condition
    number is not in the range from 1 to the number of condition areas that have information.
    In this case, the warning is added to the diagnostics area without clearing it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的*`condition_number`*标识符可以是存储过程或函数参数，使用[`DECLARE`](declare.html "15.6.3 DECLARE
    Statement")声明的存储程序本地变量，用户定义变量，系统变量或文字。如果条件编号不在具有信息的条件区域数量范围内，则会发出警告。在这种情况下，警告将添加到诊断区域而不清除它。
- en: 'When a condition occurs, MySQL does not populate all condition items recognized
    by [`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS Statement").
    For example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生条件时，MySQL不会填充[`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS
    Statement")识别的所有条件项。例如：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In standard SQL, if there are multiple conditions, the first condition relates
    to the `SQLSTATE` value returned for the previous SQL statement. In MySQL, this
    is not guaranteed. To get the main error, you cannot do this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准SQL中，如果存在多个条件，则第一个条件与前一个SQL语句返回的`SQLSTATE`值相关。在MySQL中，这并不保证。要获取主要错误，不能这样做：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Instead, retrieve the condition count first, then use it to specify which condition
    number to inspect:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，首先检索条件计数，然后使用它指定要检查的条件编号：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For information about permissible statement and condition information items,
    and which ones are populated when a condition occurs, see [Diagnostics Area Information
    Items](diagnostics-area.html#diagnostics-area-information-items "Diagnostics Area
    Information Items").
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有关允许的语句和条件信息项以及在发生条件时哪些信息项被填充的信息，请参阅[诊断区域信息项](diagnostics-area.html#diagnostics-area-information-items
    "诊断区域信息项")。
- en: Here is an example that uses [`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET
    DIAGNOSTICS Statement") and an exception handler in stored procedure context to
    assess the outcome of an insert operation. If the insert was successful, the procedure
    uses [`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS Statement")
    to get the rows-affected count. This shows that you can use [`GET DIAGNOSTICS`](get-diagnostics.html
    "15.6.7.3 GET DIAGNOSTICS Statement") multiple times to retrieve information about
    a statement as long as the current diagnostics area has not been cleared.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在存储过程上下文中使用[`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS
    Statement")和异常处理程序来评估插入操作结果的示例。如果插入成功，该过程使用[`GET DIAGNOSTICS`](get-diagnostics.html
    "15.6.7.3 GET DIAGNOSTICS Statement")获取受影响行数。这表明只要当前诊断区域未被清除，您可以多次使用[`GET DIAGNOSTICS`](get-diagnostics.html
    "15.6.7.3 GET DIAGNOSTICS Statement")来检索有关语句的信息。
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Suppose that `t1.int_col` is an integer column that is declared as `NOT NULL`.
    The procedure produces these results when invoked to insert non-`NULL` and `NULL`
    values, respectively:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`t1.int_col`是声明为`NOT NULL`的整数列。当调用该过程以插入非`NULL`和`NULL`值时，该过程产生以下结果：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When a condition handler activates, a push to the diagnostics area stack occurs:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当条件处理程序激活时，会发生对诊断区域堆栈的推送：
- en: The first (current) diagnostics area becomes the second (stacked) diagnostics
    area and a new current diagnostics area is created as a copy of it.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个（当前）诊断区域变为第二个（堆叠）诊断区域，并创建一个新的当前诊断区域作为其副本。
- en: '[`GET [CURRENT] DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS
    Statement") and [`GET STACKED DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET
    DIAGNOSTICS Statement") can be used within the handler to access the contents
    of the current and stacked diagnostics areas.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`GET [CURRENT] DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS
    Statement")和[`GET STACKED DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS
    Statement")可以在处理程序内部使用，以访问当前诊断区域和堆叠诊断区域的内容。'
- en: Initially, both diagnostics areas return the same result, so it is possible
    to get information from the current diagnostics area about the condition that
    activated the handler, *as long as* you execute no statements within the handler
    that change its current diagnostics area.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最初，两个诊断区域返回相同的结果，因此可以从当前诊断区域获取有关激活处理程序的条件的信息，*只要*在处理程序内不执行更改其当前诊断区域的语句。
- en: However, statements executing within the handler can modify the current diagnostics
    area, clearing and setting its contents according to the normal rules (see [How
    the Diagnostics Area is Cleared and Populated](diagnostics-area.html#diagnostics-area-populating
    "How the Diagnostics Area is Cleared and Populated")).
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，在处理程序内执行的语句可以修改当前诊断区域，根据正常规则清除和设置其内容（参见[诊断区域如何清除和填充](diagnostics-area.html#diagnostics-area-populating
    "诊断区域如何清除和填充")）。
- en: A more reliable way to obtain information about the handler-activating condition
    is to use the stacked diagnostics area, which cannot be modified by statements
    executing within the handler except [`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL
    Statement"). For information about when the current diagnostics area is set and
    cleared, see [Section 15.6.7.7, “The MySQL Diagnostics Area”](diagnostics-area.html
    "15.6.7.7 The MySQL Diagnostics Area").
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 获取有关激活处理程序条件的更可靠方法是使用堆叠的诊断区域，除了[`RESIGNAL`](resignal.html "15.6.7.4 RESIGNAL
    Statement")之外，处理程序内执行的语句无法修改它。有关当前诊断区域何时设置和清除的信息，请参见[第15.6.7.7节，“MySQL诊断区域”](diagnostics-area.html
    "15.6.7.7 MySQL诊断区域")。
- en: The next example shows how `GET STACKED DIAGNOSTICS` can be used within a handler
    to obtain information about the handled exception, even after the current diagnostics
    area has been modified by handler statements.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例展示了如何在处理程序内部使用`GET STACKED DIAGNOSTICS`来获取有关已处理异常的信息，即使当前诊断区域已被处理程序语句修改。
- en: 'Within a stored procedure `p()`, we attempt to insert two values into a table
    that contains a `TEXT NOT NULL` column. The first value is a non-`NULL` string
    and the second is `NULL`. The column prohibits `NULL` values, so the first insert
    succeeds but the second causes an exception. The procedure includes an exception
    handler that maps attempts to insert `NULL` into inserts of the empty string:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储过程`p()`中，我们尝试向包含`TEXT NOT NULL`列的表中插入两个值。第一个值是非`NULL`字符串，第二个是`NULL`。该列禁止`NULL`值，因此第一个插入成功，但第二个导致异常。该过程包括一个异常处理程序，将尝试插入`NULL`映射为插入空字符串：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When the handler activates, a copy of the current diagnostics area is pushed
    to the diagnostics area stack. The handler first displays the contents of the
    current and stacked diagnostics areas, which are both the same initially:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理程序激活时，当前诊断区域的副本被推送到诊断区域堆栈。处理程序首先显示当前诊断区域和堆叠诊断区域的内容，最初两者都相同：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Statements executing after the [`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET
    DIAGNOSTICS Statement") statements may reset the current diagnostics area. statements
    may reset the current diagnostics area. For example, the handler maps the `NULL`
    insert to an empty-string insert and displays the result. The new insert succeeds
    and clears the current diagnostics area, but the stacked diagnostics area remains
    unchanged and still contains information about the condition that activated the
    handler:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS Statement")语句之后执行的语句可能会重置当前诊断区域。例如，处理程序将`NULL`插入映射为空字符串插入并显示结果。新插入成功并清除当前诊断区域，但堆叠的诊断区域保持不变，仍然包含激活处理程序的条件信息：'
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When the condition handler ends, its current diagnostics area is popped from
    the stack and the stacked diagnostics area becomes the current diagnostics area
    in the stored procedure.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当条件处理程序结束时，其当前诊断区域从堆栈中弹出，堆叠的诊断区域成为存储过程中的当前诊断区域。
- en: 'After the procedure returns, the table contains two rows. The empty row results
    from the attempt to insert `NULL` that was mapped to an empty-string insert:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 执行完该过程后，表中包含两行。空行是由于尝试插入`NULL`而映射到空字符串插入导致的：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding example, the first two [`GET DIAGNOSTICS`](get-diagnostics.html
    "15.6.7.3 GET DIAGNOSTICS Statement") statements within the condition handler
    that retrieve information from the current and stacked diagnostics areas return
    the same values. This is not the case if statements that reset the current diagnostics
    area execute earlier within the handler. Suppose that `p()` is rewritten to place
    the [`DECLARE`](declare.html "15.6.3 DECLARE Statement") statements within the
    handler definition rather than preceding it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，在条件处理程序中的前两个[`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS
    Statement")语句中，从当前和堆叠的诊断区域检索信息的返回值相同。如果在处理程序内部较早执行重置当前诊断区域的语句，则情况就不同了。假设`p()`被重写为将[`DECLARE`](declare.html
    "15.6.3 DECLARE Statement")语句放在处理程序定义内部而不是在其之前：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this case, the result is version dependent:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，结果取决于版本：
- en: Before MySQL 5.7.2, [`DECLARE`](declare.html "15.6.3 DECLARE Statement") does
    not change the current diagnostics area, so the first two [`GET DIAGNOSTICS`](get-diagnostics.html
    "15.6.7.3 GET DIAGNOSTICS Statement") statements return the same result, just
    as in the original version of `p()`.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 5.7.2之前，[`DECLARE`](declare.html "15.6.3 DECLARE Statement")不会更改当前诊断区域，因此前两个[`GET
    DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET DIAGNOSTICS Statement")语句返回相同的结果，就像在`p()`的原始版本中一样。
- en: 'In MySQL 5.7.2, work was done to ensure that all nondiagnostic statements populate
    the diagnostics area, per the SQL standard. [`DECLARE`](declare.html "15.6.3 DECLARE
    Statement") is one of them, so in 5.7.2 and higher, [`DECLARE`](declare.html "15.6.3 DECLARE
    Statement") statements executing at the beginning of the handler clear the current
    diagnostics area and the [`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET
    DIAGNOSTICS Statement") statements produce different results:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 5.7.2中，已经做了工作以确保所有非诊断语句填充诊断区域，符合SQL标准。[`DECLARE`](declare.html "15.6.3 DECLARE
    Statement")是其中之一，因此在5.7.2及更高版本中，执行处理程序开头的[`DECLARE`](declare.html "15.6.3 DECLARE
    Statement")语句会清除当前诊断区域，并且[`GET DIAGNOSTICS`](get-diagnostics.html "15.6.7.3 GET
    DIAGNOSTICS Statement")语句会产生不同的结果：
- en: '[PRE15]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To avoid this issue within a condition handler when seeking to obtain information
    about the condition that activated the handler, be sure to access the stacked
    diagnostics area, not the current diagnostics area.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在条件处理程序中避免此问题时，当试图获取激活处理程序的条件的信息时，请确保访问堆叠的诊断区域，而不是当前诊断区域。
