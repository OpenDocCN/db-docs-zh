- en: 13.3.3 The BINARY and VARBINARY Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.3.3 BINARY 和 VARBINARY 类型
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html](https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html](https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html)
- en: The `BINARY` and `VARBINARY` types are similar to [`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") and [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types"), except that they store binary strings rather than nonbinary strings.
    That is, they store byte strings rather than character strings. This means they
    have the `binary` character set and collation, and comparison and sorting are
    based on the numeric values of the bytes in the values.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`BINARY` 和 `VARBINARY` 类型类似于 [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types") 和 [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")，只是它们存储二进制字符串而不是非二进制字符串。也就是说，它们存储字节字符串而不是字符字符串。这意味着它们具有
    `binary` 字符集和校对，比较和排序基于值中字节的数值。'
- en: The permissible maximum length is the same for `BINARY` and `VARBINARY` as it
    is for [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") and [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), except that the length for `BINARY` and
    `VARBINARY` is measured in bytes rather than characters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`BINARY` 和 `VARBINARY` 的最大长度与 [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types") 和 [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") 的最大长度相同，只是
    `BINARY` 和 `VARBINARY` 的长度是以字节而不是字符计量的。'
- en: The `BINARY` and `VARBINARY` data types are distinct from the `CHAR BINARY`
    and `VARCHAR BINARY` data types. For the latter types, the `BINARY` attribute
    does not cause the column to be treated as a binary string column. Instead, it
    causes the binary (`_bin`) collation for the column character set (or the table
    default character set if no column character set is specified) to be used, and
    the column itself stores nonbinary character strings rather than binary byte strings.
    For example, if the default character set is `utf8mb4`, `CHAR(5) BINARY` is treated
    as `CHAR(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin`. This differs from `BINARY(5)`,
    which stores 5-byte binary strings that have the `binary` character set and collation.
    For information about the differences between the `binary` collation of the `binary`
    character set and the `_bin` collations of nonbinary character sets, see [Section 12.8.5,
    “The binary Collation Compared to _bin Collations”](charset-binary-collations.html
    "12.8.5 The binary Collation Compared to _bin Collations").
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`BINARY` 和 `VARBINARY` 数据类型与 `CHAR BINARY` 和 `VARCHAR BINARY` 数据类型不同。对于后者，`BINARY`
    属性不会导致列被视为二进制字符串列。相反，它会导致使用列字符集的二进制 (`_bin`) 校对（如果未指定列字符集，则使用表默认字符集），并且列本身存储非二进制字符字符串而不是二进制字节字符串。例如，如果默认字符集是
    `utf8mb4`，`CHAR(5) BINARY` 被视为 `CHAR(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin`。这与
    `BINARY(5)` 不同，后者存储具有 `binary` 字符集和校对的 5 字节二进制字符串。有关 `binary` 字符集的 `binary` 校对与非二进制字符集的
    `_bin` 校对之间的差异的信息，请参见 [Section 12.8.5, “The binary Collation Compared to _bin
    Collations”](charset-binary-collations.html "12.8.5 The binary Collation Compared
    to _bin Collations")。'
- en: If strict SQL mode is not enabled and you assign a value to a `BINARY` or `VARBINARY`
    column that exceeds the column's maximum length, the value is truncated to fit
    and a warning is generated. For cases of truncation, to cause an error to occur
    (rather than a warning) and suppress insertion of the value, use strict SQL mode.
    See [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server SQL Modes").
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未启用严格的 SQL 模式，并且将值分配给超出列最大长度的 `BINARY` 或 `VARBINARY` 列，则该值将被截断以适应，并生成警告。对于截断的情况，要导致发生错误（而不是警告）并阻止插入该值，请使用严格的
    SQL 模式。请参见 [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server SQL
    Modes")。
- en: When `BINARY` values are stored, they are right-padded with the pad value to
    the specified length. The pad value is `0x00` (the zero byte). Values are right-padded
    with `0x00` for inserts, and no trailing bytes are removed for retrievals. All
    bytes are significant in comparisons, including `ORDER BY` and `DISTINCT` operations.
    `0x00` and space differ in comparisons, with `0x00` sorting before space.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 存储 `BINARY` 值时，它们会使用填充值右填充到指定长度。填充值为 `0x00`（零字节）。对于插入，值会使用 `0x00` 右填充，检索时不会删除尾随字节。在比较中，所有字节都是重要的，包括
    `ORDER BY` 和 `DISTINCT` 操作。`0x00` 和空格在比较中不同，`0x00` 排在空格之前。
- en: 'Example: For a `BINARY(3)` column, `''a ''` becomes `''a \0''` when inserted.
    `''a\0''` becomes `''a\0\0''` when inserted. Both inserted values remain unchanged
    for retrievals.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：对于 `BINARY(3)` 列，`'a '` 在插入时变为 `'a \0'`。`'a\0'` 在插入时变为 `'a\0\0'`。这两个插入值在检索时保持不变。
- en: For `VARBINARY`, there is no padding for inserts and no bytes are stripped for
    retrievals. All bytes are significant in comparisons, including `ORDER BY` and
    `DISTINCT` operations. `0x00` and space differ in comparisons, with `0x00` sorting
    before space.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`VARBINARY`，插入时不进行填充，检索时不剥离任何字节。在比较中，所有字节都是重要的，包括`ORDER BY`和`DISTINCT`操作。在比较中，`0x00`和空格是不同的，`0x00`在排序中排在空格之前。
- en: For those cases where trailing pad bytes are stripped or comparisons ignore
    them, if a column has an index that requires unique values, inserting values into
    the column that differ only in number of trailing pad bytes results in a duplicate-key
    error. For example, if a table contains `'a'`, an attempt to store `'a\0'` causes
    a duplicate-key error.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些剥离尾随填充字节或比较忽略它们的情况，如果列具有需要唯一值的索引，那么在列中插入仅在尾随填充字节数量上不同的值会导致重复键错误。例如，如果表中包含`'a'`，尝试存储`'a\0'`会导致重复键错误。
- en: 'You should consider the preceding padding and stripping characteristics carefully
    if you plan to use the `BINARY` data type for storing binary data and you require
    that the value retrieved be exactly the same as the value stored. The following
    example illustrates how `0x00`-padding of `BINARY` values affects column value
    comparisons:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划使用`BINARY`数据类型存储二进制数据，并且需要检索的值与存储的值完全相同，那么您应该仔细考虑前导填充和剥离特性。以下示例说明了`BINARY`值的`0x00`填充如何影响列值比较：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the value retrieved must be the same as the value specified for storage with
    no padding, it might be preferable to use `VARBINARY` or one of the [`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types") data types instead.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检索的值必须与存储时指定的值完全相同且没有填充，则最好使用`VARBINARY`或[`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types")数据类型之一。
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端中，二进制字符串使用十六进制表示，取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)选项的值。有关该选项的更多信息，请参见[Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
