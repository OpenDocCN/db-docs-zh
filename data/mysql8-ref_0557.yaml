- en: 10.3.6 Multiple-Column Indexes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.3.6 多列索引
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html](https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html](https://dev.mysql.com/doc/refman/8.0/en/multiple-column-indexes.html)
- en: MySQL can create composite indexes (that is, indexes on multiple columns). An
    index may consist of up to 16 columns. For certain data types, you can index a
    prefix of the column (see [Section 10.3.5, “Column Indexes”](column-indexes.html
    "10.3.5 Column Indexes")).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 可以创建复合索引（即，多列索引）。一个索引最多可以包含 16 列。对于某些数据类型，您可以对列的前缀进行索引（参见 [第 10.3.5 节，“列索引”](column-indexes.html
    "10.3.5 列索引")）。
- en: MySQL can use multiple-column indexes for queries that test all the columns
    in the index, or queries that test just the first column, the first two columns,
    the first three columns, and so on. If you specify the columns in the right order
    in the index definition, a single composite index can speed up several kinds of
    queries on the same table.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 可以为测试索引中的所有列或仅测试第一列、前两列、前三列等的查询使用多列索引。如果您在索引定义中以正确的顺序指定列，单个复合索引可以加速对同一表的多种查询。
- en: A multiple-column index can be considered a sorted array, the rows of which
    contain values that are created by concatenating the values of the indexed columns.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 多列索引可以被视为排序数组，其行包含通过连接索引列的值创建的值。
- en: Note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'As an alternative to a composite index, you can introduce a column that is
    “hashed” based on information from other columns. If this column is short, reasonably
    unique, and indexed, it might be faster than a “wide” index on many columns. In
    MySQL, it is very easy to use this extra column:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为复合索引的替代方案，您可以引入一个根据其他列信息“哈希”生成的列。如果此列较短、相对唯一且已建立索引，则可能比对许多列进行“宽”索引更快。在 MySQL
    中，使用此额外列非常容易：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Suppose that a table has the following specification:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设表具有以下规范：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `name` index is an index over the `last_name` and `first_name` columns.
    The index can be used for lookups in queries that specify values in a known range
    for combinations of `last_name` and `first_name` values. It can also be used for
    queries that specify just a `last_name` value because that column is a leftmost
    prefix of the index (as described later in this section). Therefore, the `name`
    index is used for lookups in the following queries:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`name` 索引是在 `last_name` 和 `first_name` 列上的索引。该索引可用于查询中指定已知范围值的 `last_name`
    和 `first_name` 值的组合的查找。它也可用于仅指定 `last_name` 值的查询，因为该列是索引的最左前缀（如本节后面所述）。因此，`name`
    索引用于以下查询中的查找：'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, the `name` index is *not* used for lookups in the following queries:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`name` 索引*不*用于以下查询中的查找：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Suppose that you issue the following [`SELECT`](select.html "15.2.13 SELECT
    Statement") statement:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您发出以下 [`SELECT`](select.html "15.2.13 SELECT 语句") 语句：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If a multiple-column index exists on `col1` and `col2`, the appropriate rows
    can be fetched directly. If separate single-column indexes exist on `col1` and
    `col2`, the optimizer attempts to use the Index Merge optimization (see [Section 10.2.1.3,
    “Index Merge Optimization”](index-merge-optimization.html "10.2.1.3 Index Merge
    Optimization")), or attempts to find the most restrictive index by deciding which
    index excludes more rows and using that index to fetch the rows.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 `col1` 和 `col2` 上存在多列索引，则可以直接获取适当的行。如果在 `col1` 和 `col2` 上存在单列索引，则优化器尝试使用索引合并优化（参见
    [第 10.2.1.3 节，“索引合并优化”](index-merge-optimization.html "10.2.1.3 索引合并优化")），或者尝试通过决定哪个索引排除更多行并使用该索引来获取行。
- en: If the table has a multiple-column index, any leftmost prefix of the index can
    be used by the optimizer to look up rows. For example, if you have a three-column
    index on `(col1, col2, col3)`, you have indexed search capabilities on `(col1)`,
    `(col1, col2)`, and `(col1, col2, col3)`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表具有多列索引，则优化器可以使用索引的任何最左前缀来查找行。例如，如果您在 `(col1, col2, col3)` 上有一个三列索引，则可以在 `(col1)`、`(col1,
    col2)` 和 `(col1, col2, col3)` 上进行索引搜索。
- en: 'MySQL cannot use the index to perform lookups if the columns do not form a
    leftmost prefix of the index. Suppose that you have the [`SELECT`](select.html
    "15.2.13 SELECT Statement") statements shown here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列不形成索引的最左前缀，则 MySQL 无法使用索引进行查找。假设您有以下所示的 [`SELECT`](select.html "15.2.13 SELECT
    语句") 语句：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If an index exists on `(col1, col2, col3)`, only the first two queries use the
    index. The third and fourth queries do involve indexed columns, but do not use
    an index to perform lookups because `(col2)` and `(col2, col3)` are not leftmost
    prefixes of `(col1, col2, col3)`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`(col1, col2, col3)`上存在索引，只有前两个查询会使用该索引。第三个和第四个查询涉及索引列，但不使用索引进行查找，因为`(col2)`和`(col2,
    col3)`不是`(col1, col2, col3)`的最左前缀。
