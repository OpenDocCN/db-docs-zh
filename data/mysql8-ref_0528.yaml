- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/is-null-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/is-null-optimization.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/is-null-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/is-null-optimization.html)
- en: 10.2.1.15 IS NULL Optimization
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.2.1.15 `IS NULL` 优化
- en: MySQL can perform the same optimization on *`col_name`* [`IS NULL`](comparison-operators.html#operator_is-null)
    that it can use for *`col_name`* `=` *`constant_value`*. For example, MySQL can
    use indexes and ranges to search for `NULL` with [`IS NULL`](comparison-operators.html#operator_is-null).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 可以对 *`col_name`* [`IS NULL`](comparison-operators.html#operator_is-null)
    执行与 *`col_name`* `=` *`constant_value`* 相同的优化。例如，MySQL 可以使用索引和范围来搜索带有 [`IS NULL`](comparison-operators.html#operator_is-null)
    的 `NULL`。
- en: 'Examples:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '示例:'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If a `WHERE` clause includes a *`col_name`* [`IS NULL`](comparison-operators.html#operator_is-null)
    condition for a column that is declared as `NOT NULL`, that expression is optimized
    away. This optimization does not occur in cases when the column might produce
    `NULL` anyway (for example, if it comes from a table on the right side of a `LEFT
    JOIN`).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `WHERE` 子句包含对声明为 `NOT NULL` 的列的 *`col_name`* [`IS NULL`](comparison-operators.html#operator_is-null)
    条件，则该表达式会被优化掉。在列可能产生 `NULL` 的情况下（例如，如果它来自 `LEFT JOIN` 的右侧表），此优化不会发生。
- en: MySQL can also optimize the combination `*`col_name`* = *`expr`* OR *`col_name`*
    IS NULL`, a form that is common in resolved subqueries. [`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement") shows [`ref_or_null`](explain-output.html#jointype_ref_or_null)
    when this optimization is used.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 也可以优化组合 `*`col_name`* = *`expr`* OR *`col_name`* IS NULL`，这种形式在解析子查询中很常见。[`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement") 在使用此优化时显示 [`ref_or_null`](explain-output.html#jointype_ref_or_null)。
- en: This optimization can handle one [`IS NULL`](comparison-operators.html#operator_is-null)
    for any key part.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此优化可以处理任何关键部分的一个 [`IS NULL`](comparison-operators.html#operator_is-null)。
- en: 'Some examples of queries that are optimized, assuming that there is an index
    on columns `a` and `b` of table `t2`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一些查询示例，假设在表 `t2` 的列 `a` 和 `b` 上有索引：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`ref_or_null`](explain-output.html#jointype_ref_or_null) works by first doing
    a read on the reference key, and then a separate search for rows with a `NULL`
    key value.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ref_or_null`](explain-output.html#jointype_ref_or_null) 首先对参考键进行读取，然后单独搜索具有
    `NULL` 键值的行。'
- en: 'The optimization can handle only one [`IS NULL`](comparison-operators.html#operator_is-null)
    level. In the following query, MySQL uses key lookups only on the expression `(t1.a=t2.a
    AND t2.a IS NULL)` and is not able to use the key part on `b`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该优化只能处理一个 [`IS NULL`](comparison-operators.html#operator_is-null) 级别。在下面的查询中，MySQL
    仅在表达式 `(t1.a=t2.a AND t2.a IS NULL)` 上使用关键查找，并不能使用列 `b` 上的关键部分：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
