- en: 8.1.7 Client Programming Security Guidelines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.1.7 客户端编程安全准则
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/secure-client-programming.html](https://dev.mysql.com/doc/refman/8.0/en/secure-client-programming.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/secure-client-programming.html](https://dev.mysql.com/doc/refman/8.0/en/secure-client-programming.html)
- en: Client applications that access MySQL should use the following guidelines to
    avoid interpreting external data incorrectly or exposing sensitive information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 访问MySQL的客户端应用程序应遵循以下准则，以避免错误解释外部数据或暴露敏感信息。
- en: '[Handle External Data Properly](secure-client-programming.html#client-external-data-handling
    "Handle External Data Properly")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[正确处理外部数据](secure-client-programming.html#client-external-data-handling "正确处理外部数据")'
- en: '[Handle MySQL Error Messages Properly](secure-client-programming.html#client-mysql-error-handling
    "Handle MySQL Error Messages Properly")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[正确处理MySQL错误消息](secure-client-programming.html#client-mysql-error-handling
    "正确处理MySQL错误消息")'
- en: Handle External Data Properly
  id: totrans-5
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 正确处理外部数据
- en: Applications that access MySQL should not trust any data entered by users, who
    can try to trick your code by entering special or escaped character sequences
    in Web forms, URLs, or whatever application you have built. Be sure that your
    application remains secure if a user tries to perform SQL injection by entering
    something like `; DROP DATABASE mysql;` into a form. This is an extreme example,
    but large security leaks and data loss might occur as a result of hackers using
    similar techniques, if you do not prepare for them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 访问MySQL的应用程序不应信任用户输入的任何数据，用户可以尝试通过在网络表单、URL或您构建的任何应用程序中输入特殊或转义字符序列来欺骗您的代码。确保如果用户尝试通过在表单中输入类似`；删除数据库mysql；`的内容来执行SQL注入，您的应用程序仍然保持安全。这是一个极端的例子，但如果您不为此做好准备，可能会发生大规模的安全漏洞和数据丢失。
- en: 'A common mistake is to protect only string data values. Remember to check numeric
    data as well. If an application generates a query such as `SELECT * FROM table
    WHERE ID=234` when a user enters the value `234`, the user can enter the value
    `234 OR 1=1` to cause the application to generate the query `SELECT * FROM table
    WHERE ID=234 OR 1=1`. As a result, the server retrieves every row in the table.
    This exposes every row and causes excessive server load. The simplest way to protect
    from this type of attack is to use single quotation marks around the numeric constants:
    `SELECT * FROM table WHERE ID=''234''`. If the user enters extra information,
    it all becomes part of the string. In a numeric context, MySQL automatically converts
    this string to a number and strips any trailing nonnumeric characters from it.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的错误是仅保护字符串数据值。请记得检查数值数据。如果一个应用程序生成类似`SELECT * FROM table WHERE ID=234`的查询，当用户输入值`234`时，用户可以输入值`234
    OR 1=1`来导致应用程序生成查询`SELECT * FROM table WHERE ID=234 OR 1=1`。结果，服务器检索表中的每一行。这暴露了每一行并导致服务器负载过大。保护免受此类攻击的最简单方法是在数值常量周围使用单引号：`SELECT
    * FROM table WHERE ID='234'`。如果用户输入额外信息，它都将成为字符串的一部分。在数值上下文中，MySQL会自动将此字符串转换为数字并剥离其中的任何尾随非数字字符。
- en: Sometimes people think that if a database contains only publicly available data,
    it need not be protected. This is incorrect. Even if it is permissible to display
    any row in the database, you should still protect against denial of service attacks
    (for example, those that are based on the technique in the preceding paragraph
    that causes the server to waste resources). Otherwise, your server becomes unresponsive
    to legitimate users.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有时人们认为如果数据库只包含公开可用的数据，则无需保护。这是不正确的。即使可以显示数据库中的任何行，您仍应防范拒绝服务攻击（例如，基于前一段中导致服务器浪费资源的技术）。否则，您的服务器将对合法用户不响应。
- en: 'Checklist:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 检查清单：
- en: Enable strict SQL mode to tell the server to be more restrictive of what data
    values it accepts. See [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server
    SQL Modes").
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用严格的SQL模式，告诉服务器更严格地接受哪些数据值。请参阅[第7.1.11节，“服务器SQL模式”](sql-mode.html "7.1.11 服务器SQL模式")。
- en: Try to enter single and double quotation marks (`'` and `"`) in all of your
    Web forms. If you get any kind of MySQL error, investigate the problem right away.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试在所有的网络表单中输入单引号和双引号（`'` 和 `"`）。如果出现任何MySQL错误，请立即调查问题。
- en: Try to modify dynamic URLs by adding `%22` (`"`), `%23` (`#`), and `%27` (`'`)
    to them.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试通过向动态URL添加`%22`（`"`）、`%23`（`#`）和`%27`（`'`）来修改它们。
- en: Try to modify data types in dynamic URLs from numeric to character types using
    the characters shown in the previous examples. Your application should be safe
    against these and similar attacks.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试将动态 URL 中的数据类型从数字类型修改为字符类型，使用前面示例中显示的字符。您的应用程序应对这些攻击和类似攻击保持安全。
- en: Try to enter characters, spaces, and special symbols rather than numbers in
    numeric fields. Your application should remove them before passing them to MySQL
    or else generate an error. Passing unchecked values to MySQL is very dangerous!
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试在数字字段中输入字符、空格和特殊符号而不是数字。您的应用程序应在传递给 MySQL 之前将它们删除，否则会生成错误。将未经检查的值传递给 MySQL
    非常危险！
- en: Check the size of data before passing it to MySQL.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将数据传递给 MySQL 之前检查数据的大小。
- en: Have your application connect to the database using a user name different from
    the one you use for administrative purposes. Do not give your applications any
    access privileges they do not need.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让应用程序使用与您用于管理目的不同的用户名连接到数据库。不要给予应用程序任何不需要的访问权限。
- en: 'Many application programming interfaces provide a means of escaping special
    characters in data values. Properly used, this prevents application users from
    entering values that cause the application to generate statements that have a
    different effect than you intend:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序编程接口提供了一种方法来转义数据值中的特殊字符。正确使用可以防止应用程序用户输入导致应用程序生成具有不同效果的语句：
- en: 'MySQL SQL statements: Use SQL prepared statements and accept data values only
    by means of placeholders; see [Section 15.5, “Prepared Statements”](sql-prepared-statements.html
    "15.5 Prepared Statements").'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL SQL 语句：使用 SQL 预处理语句，并仅通过占位符接受数据值；参见 [第 15.5 节，“预处理语句”](sql-prepared-statements.html
    "15.5 预处理语句")。
- en: 'MySQL C API: Use the [`mysql_real_escape_string_quote()`](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html)
    API call. Alternatively, use the C API prepared statement interface and accept
    data values only by means of placeholders; see [C API Prepared Statement Interface](/doc/c-api/8.0/en/c-api-prepared-statement-interface.html).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL C API：使用 [`mysql_real_escape_string_quote()`](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html)
    API 调用。或者，使用 C API 预处理语句接口，并仅通过占位符接受数据值；参见 [C API 预处理语句接口](/doc/c-api/8.0/en/c-api-prepared-statement-interface.html)。
- en: 'MySQL++: Use the `escape` and `quote` modifiers for query streams.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL++：对查询流使用 `escape` 和 `quote` 修饰符。
- en: 'PHP: Use either the `mysqli` or `pdo_mysql` extensions, and not the older `ext/mysql`
    extension. The preferred API''s support the improved MySQL authentication protocol
    and passwords, as well as prepared statements with placeholders. See also [MySQL
    and PHP](/doc/apis-php/en/).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP：使用 `mysqli` 或 `pdo_mysql` 扩展，而不是旧的 `ext/mysql` 扩展。首选的 API 支持改进的 MySQL 认证协议和密码，以及带有占位符的预处理语句。另请参阅
    [MySQL 和 PHP](/doc/apis-php/en/)。
- en: If the older `ext/mysql` extension must be used, then for escaping use the [`mysql_real_escape_string_quote()`](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html)
    function and not [`mysql_escape_string()`](/doc/c-api/8.0/en/mysql-escape-string.html)
    or `addslashes()` because only [`mysql_real_escape_string_quote()`](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html)
    is character set-aware; the other functions can be “bypassed” when using (invalid)
    multibyte character sets.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果必须使用旧的 `ext/mysql` 扩展，则用 [`mysql_real_escape_string_quote()`](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html)
    函数进行转义，而不是 [`mysql_escape_string()`](/doc/c-api/8.0/en/mysql-escape-string.html)
    或 `addslashes()`，因为只有 [`mysql_real_escape_string_quote()`](/doc/c-api/8.0/en/mysql-real-escape-string-quote.html)
    是字符集感知的；在使用（无效的）多字节字符集时，其他函数可能会被“绕过”。
- en: 'Perl DBI: Use placeholders or the `quote()` method.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perl DBI：使用占位符或 `quote()` 方法。
- en: 'Java JDBC: Use a `PreparedStatement` object and placeholders.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java JDBC：使用 `PreparedStatement` 对象和占位符。
- en: Other programming interfaces might have similar capabilities.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 其他编程接口可能具有类似的功能。
- en: Handle MySQL Error Messages Properly
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 适当处理 MySQL 错误消息
- en: It is the application's responsibility to intercept errors that occur as a result
    of executing SQL statements with the MySQL database server and handle them appropriately.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序有责任拦截由执行与 MySQL 数据库服务器的 SQL 语句导致的错误，并适当处理这些错误。
- en: The information returned in a MySQL error is not gratuitous because that information
    is key in debugging MySQL using applications. It would be nearly impossible, for
    example, to debug a common 10-way join [`SELECT`](select.html "15.2.13 SELECT
    Statement") statement without providing information regarding which databases,
    tables, and other objects are involved with problems. Thus, MySQL errors must
    sometimes necessarily contain references to the names of those objects.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL错误返回的信息并非毫无意义，因为这些信息对于使用应用程序调试MySQL至关重要。例如，要调试一个常见的10路连接[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句，如果不提供涉及问题的数据库、表和其他对象的信息，几乎是不可能的。因此，MySQL错误有时必须包含对这些对象名称的引用。
- en: A simple but insecure approach for an application when it receives such an error
    from MySQL is to intercept it and display it verbatim to the client. However,
    revealing error information is a known application vulnerability type ([CWE-209](http://cwe.mitre.org/data/definitions/209.html))
    and the application developer must ensure the application does not have this vulnerability.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序从MySQL接收到这样的错误时，一个简单但不安全的方法是拦截并将其原样显示给客户端。然而，揭示错误信息是一种已知的应用程序漏洞类型（[CWE-209](http://cwe.mitre.org/data/definitions/209.html)），应用程序开发人员必须确保应用程序没有这种漏洞。
- en: 'For example, an application that displays a message such as this exposes both
    a database name and a table name to clients, which is information a client might
    attempt to exploit:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个显示如下消息的应用程序向客户端暴露了数据库名称和表名称，这是客户端可能会尝试利用的信息：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Instead, the proper behavior for an application when it receives such an error
    from MySQL is to log appropriate information, including the error information,
    to a secure audit location only accessible to trusted personnel. The application
    can return something more generic such as “Internal Error” to the user.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，当应用程序从MySQL接收到这样的错误时，正确的行为是记录适当的信息，包括错误信息，仅供信任人员访问的安全审计位置。应用程序可以向用户返回更通用的信息，比如“内部错误”。
