- en: 'A.14 MySQL 8.0 FAQ: Replication'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'A.14 MySQL 8.0 FAQ: 复制'
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/faqs-replication.html](https://dev.mysql.com/doc/refman/8.0/en/faqs-replication.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/faqs-replication.html](https://dev.mysql.com/doc/refman/8.0/en/faqs-replication.html)
- en: In the following section, we provide answers to questions that are most frequently
    asked about MySQL Replication.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们提供关于 MySQL 复制最常见问题的答案。
- en: A.14.1\. [Must the replica be connected to the source all the time?](faqs-replication.html#faq-replication-have-connected-replica)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.1\. [副本必须始终连接到源吗？](faqs-replication.html#faq-replication-have-connected-replica)
- en: A.14.2\. [Must I enable networking on my source and replica to enable replication?](faqs-replication.html#faq-replication-have-enable-networking)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.2\. [必须在源和副本上启用网络才能启用复制吗？](faqs-replication.html#faq-replication-have-enable-networking)
- en: A.14.3\. [How do I know how late a replica is compared to the source? In other
    words, how do I know the date of the last statement replicated by the replica?](faqs-replication.html#faq-replication-how-compare-replica-date)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.3\. [如何知道副本相对于源有多晚？换句话说，如何知道副本复制的最后一个语句的日期？](faqs-replication.html#faq-replication-how-compare-replica-date)
- en: A.14.4\. [How do I force the source to block updates until the replica catches
    up?](faqs-replication.html#faq-replication-how-block-updates)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.4\. [如何强制源阻止更新，直到副本赶上？](faqs-replication.html#faq-replication-how-block-updates)
- en: A.14.5\. [What issues should I be aware of when setting up two-way replication?](faqs-replication.html#faq-replication-how-two-way-problems)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.5\. [设置双向复制时应注意的问题](faqs-replication.html#faq-replication-how-two-way-problems)
- en: A.14.6\. [How can I use replication to improve performance of my system?](faqs-replication.html#faq-replication-how-improves-performance)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.6\. [如何利用复制来提高系统性能？](faqs-replication.html#faq-replication-how-improves-performance)
- en: A.14.7\. [What should I do to prepare client code in my own applications to
    use performance-enhancing replication?](faqs-replication.html#faq-replication-how-prepare-for-replication)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.7\. [我应该如何准备自己应用程序中的客户端代码以使用性能增强的复制？](faqs-replication.html#faq-replication-how-prepare-for-replication)
- en: A.14.8\. [When and how much can MySQL replication improve the performance of
    my system?](faqs-replication.html#faq-replication-how-benefits-me)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.8\. [MySQL 复制何时以及在多大程度上可以提高系统性能？](faqs-replication.html#faq-replication-how-benefits-me)
- en: A.14.9\. [How can I use replication to provide redundancy or high availability?](faqs-replication.html#faq-replication-how-high-availability)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.9\. [如何利用复制提供冗余或高可用性？](faqs-replication.html#faq-replication-how-high-availability)
- en: A.14.10\. [How do I tell whether a replication source server is using statement-based
    or row-based binary logging format?](faqs-replication.html#faq-replication-how-know-log-format)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.10\. [如何确定复制源服务器是使用基于语句还是基于行的二进制日志格式？](faqs-replication.html#faq-replication-how-know-log-format)
- en: A.14.11\. [How do I tell a replica to use row-based replication?](faqs-replication.html#faq-replication-how-use-row-based)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.11\. [如何告诉副本使用基于行的复制？](faqs-replication.html#faq-replication-how-use-row-based)
- en: A.14.12\. [How do I prevent GRANT and REVOKE statements from replicating to
    replica machines?](faqs-replication.html#faq-replication-how-prevent-grant-revoke)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.12\. [如何防止 GRANT 和 REVOKE 语句复制到副本机器？](faqs-replication.html#faq-replication-how-prevent-grant-revoke)
- en: A.14.13\. [Does replication work on mixed operating systems (for example, the
    source runs on Linux while replicas run on macOS and Windows)?](faqs-replication.html#faq-replication-can-mix-os)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.13\. [复制是否适用于混合操作系统（例如，源在 Linux 上运行，而副本在 macOS 和 Windows 上运行）？](faqs-replication.html#faq-replication-can-mix-os)
- en: A.14.14\. [Does replication work on mixed hardware architectures (for example,
    the source runs on a 64-bit machine while replicas run on 32-bit machines)?](faqs-replication.html#faq-replication-can-mix-arch)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: A.14.14\. [复制是否适用于混合硬件架构（例如，源在 64 位机器上运行，而副本在 32 位机器上运行）？](faqs-replication.html#faq-replication-can-mix-arch)
- en: '| **A.14.1.** | Must the replica be connected to the source all the time? |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.1.** | 副本必须始终连接到源吗？ |'
- en: '|  | No, it does not. The replica can go down or stay disconnected for hours
    or even days, and then reconnect and catch up on updates. For example, you can
    set up a source/replica relationship over a dial-up link where the link is up
    only sporadically and for short periods of time. The implication of this is that,
    at any given time, the replica is not guaranteed to be in synchrony with the source
    unless you take some special measures.To ensure that catchup can occur for a replica
    that has been disconnected, you must not remove binary log files from the source
    that contain information that has not yet been replicated to the replicas. Asynchronous
    replication can work only if the replica is able to continue reading the binary
    log from the point where it last read events. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '|  | 不，它不会。复制品可以在几个小时甚至几天内断开连接，然后重新连接并赶上更新。例如，您可以在仅偶尔连接且连接时间很短的拨号链接上建立源/复制品关系。这意味着，在任何给定时间，除非您采取一些特殊措施，否则不能保证复制品与源同步。为了确保断开连接的复制品可以进行追赶，您不能从包含尚未复制到复制品的信息的源中删除二进制日志文件。异步复制只有在复制品能够从上次读取事件的地方继续读取二进制日志时才能工作。
    |'
- en: '| **A.14.2.** | Must I enable networking on my source and replica to enable
    replication? |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.2.** | 我必须在源和复制品上启用网络才能启用复制吗？ |'
- en: '|  | Yes, networking must be enabled on the source and replica. If networking
    is not enabled, the replica cannot connect to the source and transfer the binary
    log. Verify that the [`skip_networking`](server-system-variables.html#sysvar_skip_networking)
    system variable has not been enabled in the configuration file for either server.
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '|  | 是的，必须在源和复制品上启用网络。如果未启用网络，则复制品无法连接到源并传输二进制日志。请验证配置文件中未启用[`skip_networking`](server-system-variables.html#sysvar_skip_networking)系统变量。
    |'
- en: '| **A.14.3.** | How do I know how late a replica is compared to the source?
    In other words, how do I know the date of the last statement replicated by the
    replica? |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.3.** | 我如何知道复制品相对于源有多晚？换句话说，我如何知道复制品复制的最后一个语句的日期？ |'
- en: '|  | Check the `Seconds_Behind_Master` column in the output from [`SHOW REPLICA
    &#124; SLAVE STATUS`](show-replica-status.html "15.7.7.35 SHOW REPLICA STATUS
    Statement"). See [Section 19.1.7.1, “Checking Replication Status”](replication-administration-status.html
    "19.1.7.1 Checking Replication Status").When the replication SQL thread executes
    an event read from the source, it modifies its own time to the event timestamp.
    (This is why [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types") is well replicated.) In the `Time` column in the output of [`SHOW PROCESSLIST`](show-processlist.html
    "15.7.7.29 SHOW PROCESSLIST Statement"), the number of seconds displayed for the
    replication SQL thread is the number of seconds between the timestamp of the last
    replicated event and the real time of the replica machine. You can use this to
    determine the date of the last replicated event. Note that if your replica has
    been disconnected from the source for one hour, and then reconnects, you may immediately
    see large `Time` values such as 3600 for the replication SQL thread in [`SHOW
    PROCESSLIST`](show-processlist.html "15.7.7.29 SHOW PROCESSLIST Statement"). This
    is because the replica is executing statements that are one hour old. See [Section 19.2.3,
    “Replication Threads”](replication-threads.html "19.2.3 Replication Threads").
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '|  | 在[`SHOW REPLICA &#124; SLAVE STATUS`](show-replica-status.html "15.7.7.35 SHOW
    REPLICA STATUS Statement")的输出中检查`Seconds_Behind_Master`列。参见[Section 19.1.7.1，“检查复制状态”](replication-administration-status.html
    "19.1.7.1 Checking Replication Status")。当复制SQL线程执行从源读取的事件时，它会将自己的时间修改为事件时间戳。（这就是为什么[`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")很好地复制。）在[`SHOW PROCESSLIST`](show-processlist.html
    "15.7.7.29 SHOW PROCESSLIST Statement")的输出中的`Time`列中，复制SQL线程显示的秒数是最后一个复制事件的时间戳与复制品机器的实际时间之间的秒数。您可以使用此来确定最后一个复制事件的日期。请注意，如果您的复制品与源断开连接了一个小时，然后重新连接，您可能会立即看到大的`Time`值，例如在[`SHOW
    PROCESSLIST`](show-processlist.html "15.7.7.29 SHOW PROCESSLIST Statement")中的复制SQL线程为3600。这是因为复制品正在执行一个小时前的语句。参见[Section 19.2.3，“复制线程”](replication-threads.html
    "19.2.3 Replication Threads")。 |'
- en: '| **A.14.4.** | How do I force the source to block updates until the replica
    catches up? |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.4.** | 我如何强制源阻止更新直到复制品赶上？ |'
- en: '|  | Use the following procedure:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | 使用以下步骤：'
- en: 'On the source, execute these statements:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源上执行以下语句：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Record the replication coordinates (the current binary log file name and position)
    from the output of the [`SHOW`](show.html "15.7.7 SHOW Statements") statement.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记录从[`SHOW`](show.html "15.7.7 SHOW Statements")语句的输出中获取的复制坐标（当前二进制日志文件名和位置）。
- en: 'On the replica, issue the following statement, where the arguments to the [`SOURCE_POS_WAIT()`](replication-functions-synchronization.html#function_source-pos-wait)
    or [`MASTER_POS_WAIT()`](replication-functions-synchronization.html#function_master-pos-wait)
    function are the replication coordinate values obtained in the previous step:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在复制品上，发出以下语句，其中[`SOURCE_POS_WAIT()`](replication-functions-synchronization.html#function_source-pos-wait)或[`MASTER_POS_WAIT()`](replication-functions-synchronization.html#function_master-pos-wait)函数的参数是在上一步中获取的复制坐标值：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The [`SELECT`](select.html "15.2.13 SELECT Statement") statement blocks until
    the replica reaches the specified log file and position. At that point, the replica
    is in synchrony with the source and the statement returns.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SELECT`](select.html "15.2.13 SELECT Statement") 语句会阻塞，直到复制品达到指定的日志文件和位置。在那一点上，复制品与源头同步，语句返回。'
- en: 'On the source, issue the following statement to enable the source to begin
    processing updates again:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源头上，发出以下语句以使源头能够再次开始处理更新：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **A.14.5.** | What issues should I be aware of when setting up two-way replication?
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.5.** | 在设置双向复制时我应该注意哪些问题？'
- en: '|  | MySQL replication currently does not support any locking protocol between
    source and replica to guarantee the atomicity of a distributed (cross-server)
    update. In other words, it is possible for client A to make an update to co-source
    1, and in the meantime, before it propagates to co-source 2, client B could make
    an update to co-source 2 that makes the update of client A work differently than
    it did on co-source 1\. Thus, when the update of client A makes it to co-source
    2, it produces tables that are different from what you have on co-source 1, even
    after all the updates from co-source 2 have also propagated. This means that you
    should not chain two servers together in a two-way replication relationship unless
    you are sure that your updates can safely happen in any order, or unless you take
    care of mis-ordered updates somehow in the client code.You should also realize
    that two-way replication actually does not improve performance very much (if at
    all) as far as updates are concerned. Each server must do the same number of updates,
    just as you would have a single server do. The only difference is that there is
    a little less lock contention because the updates originating on another server
    are serialized in one replication thread. Even this benefit might be offset by
    network delays. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|  | MySQL 复制目前不支持源头和复制品之间的任何锁定协议，以保证分布式（跨服务器）更新的原子性。换句话说，客户端 A 可能会对共源 1 进行更新，同时，在它传播到共源
    2 之前，客户端 B 可能会对共源 2 进行更新，使得客户端 A 的更新在共源 1 上的工作方式与共源 2 上的工作方式不同。因此，当客户端 A 的更新到达共源
    2 时，它生成的表与您在共源 1 上拥有的表不同，即使所有来自共源 2 的更新也已传播。这意味着您不应该将两个服务器链接在一起形成双向复制关系，除非您确信您的更新可以安全地以任何顺序发生，或者除非您在客户端代码中以某种方式处理错误排序的更新。您还应该意识到，双向复制实际上在更新方面并没有多大（如果有的话）性能提升。每个服务器必须执行相同数量的更新，就像您只有一个服务器执行一样。唯一的区别是，由于来自另一个服务器的更新在一个复制线程中串行化，因此锁定争用会少一点。即使这种好处可能会被网络延迟抵消。'
- en: '| **A.14.6.** | How can I use replication to improve performance of my system?
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.6.** | 我如何利用复制来提高系统性能？'
- en: '|  | Set up one server as the source and direct all writes to it. Then configure
    as many replicas as you have the budget and rackspace for, and distribute the
    reads among the source and the replicas. You can also start the replicas with
    the [`--skip-innodb`](innodb-parameters.html#option_mysqld_innodb) option, enable
    the [`low_priority_updates`](server-system-variables.html#sysvar_low_priority_updates)
    system variable, and set the [`delay_key_write`](server-system-variables.html#sysvar_delay_key_write)
    system variable to `ALL` to get speed improvements on the replica end. In this
    case, the replica uses nontransactional `MyISAM` tables instead of `InnoDB` tables
    to get more speed by eliminating transactional overhead. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|  | 将一个服务器设置为源服务器，并将所有写操作定向到该服务器。然后配置尽可能多的副本，以适应预算和机架空间，并在源服务器和副本之间分配读操作。您还可以使用[`--skip-innodb`](innodb-parameters.html#option_mysqld_innodb)选项启动副本，启用[`low_priority_updates`](server-system-variables.html#sysvar_low_priority_updates)系统变量，并将[`delay_key_write`](server-system-variables.html#sysvar_delay_key_write)系统变量设置为`ALL`，以在副本端获得速度改进。在这种情况下，副本使用非事务性的`MyISAM`表而不是`InnoDB`表，通过消除事务开销来获得更快的速度。
    |'
- en: '| **A.14.7.** | What should I do to prepare client code in my own applications
    to use performance-enhancing replication? |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.7.** | 我应该如何准备自己应用程序中的客户端代码以使用性能增强的复制？ |'
- en: '|  | See the guide to using replication as a scale-out solution, [Section 19.4.5,
    “Using Replication for Scale-Out”](replication-solutions-scaleout.html "19.4.5 Using
    Replication for Scale-Out"). |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|  | 查看使用复制作为扩展解决方案的指南，[第19.4.5节，“使用复制进行扩展”](replication-solutions-scaleout.html
    "19.4.5 使用复制进行扩展")。 |'
- en: '| **A.14.8.** | When and how much can MySQL replication improve the performance
    of my system? |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.8.** | MySQL复制何时以及在多大程度上可以提高系统性能？ |'
- en: '|  | MySQL replication is most beneficial for a system that processes frequent
    reads and infrequent writes. In theory, by using a single-source/multiple-replica
    setup, you can scale the system by adding more replicas until you either run out
    of network bandwidth, or your update load grows to the point that the source cannot
    handle it.To determine how many replicas you can use before the added benefits
    begin to level out, and how much you can improve performance of your site, you
    must know your query patterns, and determine empirically by benchmarking the relationship
    between the throughput for reads and writes on a typical source and a typical
    replica. The example here shows a rather simplified calculation of what you can
    get with replication for a hypothetical system. Let `reads` and `writes` denote
    the number of reads and writes per second, respectively.Let''s say that system
    load consists of 10% writes and 90% reads, and we have determined by benchmarking
    that `reads` is 1200 - 2 * `writes`. In other words, the system can do 1,200 reads
    per second with no writes, the average write is twice as slow as the average read,
    and the relationship is linear. Suppose that the source and each replica have
    the same capacity, and that we have one source and *`N`* replicas. Then we have
    for each server (source or replica):`reads` = 1200 - 2 * `writes``reads` = 9 *
    `writes` / (*`N`* + 1) (reads are split, but writes replicated to all replicas)9
    * `writes` / (*`N`* + 1) + 2 * `writes` = 1200`writes` = 1200 / (2 + 9/(*`N`*
    + 1))The last equation indicates the maximum number of writes for *`N`* replicas,
    given a maximum possible read rate of 1,200 per second and a ratio of nine reads
    per write.This analysis yields the following conclusions:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | MySQL复制对于处理频繁读取和不频繁写入的系统最为有益。理论上，通过使用单源/多副本设置，您可以通过添加更多副本来扩展系统，直到您耗尽网络带宽，或者更新负载增长到源服务器无法处理的程度。要确定在增加副本数量之前增加的好处何时开始趋于平稳，以及您可以提高站点性能多少，您必须了解您的查询模式，并通过基准测试确定典型源服务器和典型副本之间读取和写入吞吐量之间的关系。这里的示例展示了对假设系统使用复制可以获得的相当简化的计算。让`reads`和`writes`分别表示每秒读取和写入的次数。假设系统负载由10%的写入和90%的读取组成，并且我们通过基准测试确定`reads`为1200
    - 2 * `writes`。换句话说，系统可以在没有写入的情况下每秒进行1,200次读取，平均写入速度是平均读取速度的两倍，且关系是线性的。假设源服务器和每个副本具有相同的容量，并且我们有一个源服务器和*N*个副本。那么对于每台服务器（源服务器或副本）：`reads`
    = 1200 - 2 * `writes``reads` = 9 * `writes` / (*N* + 1)（读取被分割，但写入被复制到所有副本）9 *
    `writes` / (*N* + 1) + 2 * `writes` = 1200`writes` = 1200 / (2 + 9/(*N* + 1))最后一个方程表示了在*N*个副本的情况下，给定每秒最大可能的读取速率为1,200次和九次读取一次写入的比率，最大写入次数。这个分析得出以下结论：'
- en: If *`N`* = 0 (which means we have no replication), our system can handle about
    1200/11 = 109 writes per second.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*`N`* = 0（表示我们没有复制），我们的系统可以处理约1200/11 = 109次写入每秒。
- en: If *`N`* = 1, we get up to 184 writes per second.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*`N`* = 1，我们可以达到每秒184次写入。
- en: If *`N`* = 8, we get up to 400 writes per second.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*`N`* = 8，我们可以达到每秒400次写入。
- en: If *`N`* = 17, we get up to 480 writes per second.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*`N`* = 17，我们可以达到每秒480次写入。
- en: Eventually, as *`N`* approaches infinity (and our budget negative infinity),
    we can get very close to 600 writes per second, increasing system throughput about
    5.5 times. However, with only eight servers, we increase it nearly four times.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终，当*`N`*趋近于无穷大（我们的预算趋近于负无穷大）时，我们可以接近每秒600次写入，系统吞吐量增加约5.5倍。然而，只有八台服务器时，我们将其增加近四倍。
- en: 'These computations assume infinite network bandwidth and neglect several other
    factors that could be significant on your system. In many cases, you may not be
    able to perform a computation similar to the one just shown that accurately predicts
    what happens on your system if you add *`N`* replicas. However, answering the
    following questions should help you decide whether and by how much replication
    may improve the performance of your system:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些计算假定有无限的网络带宽，并忽略了可能在您的系统上具有重要意义的其他几个因素。在许多情况下，您可能无法执行类似于刚刚显示的计算，准确预测如果添加*`N`*个副本会发生什么。然而，回答以下问题应该帮助您决定复制可能如何以及在多大程度上改善系统性能：
- en: What is the read/write ratio on your system?
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的系统读写比是多少？
- en: How much more write load can one server handle if you reduce the reads?
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果减少读取，一个服务器可以处理多少更多的写入负载？
- en: For how many replicas do you have bandwidth available on your network?
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的网络上有多少副本可以使用带宽？
- en: '|'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **A.14.9.** | How can I use replication to provide redundancy or high availability?
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.9.** | 如何使用复制提供冗余或高可用性？'
- en: '|  | How you implement redundancy is entirely dependent on your application
    and circumstances. High-availability solutions (with automatic failover) require
    active monitoring and either custom scripts or third party tools to provide the
    failover support from the original MySQL server to the replica.To handle the process
    manually, you should be able to switch from a failed source to a pre-configured
    replica by altering your application to talk to the new server or by adjusting
    the DNS for the MySQL server from the failed server to the new server.For more
    information and some example solutions, see [Section 19.4.8, “Switching Sources
    During Failover”](replication-solutions-switch.html "19.4.8 Switching Sources
    During Failover"). |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|  | 如何实现冗余完全取决于您的应用程序和情况。高可用性解决方案（具有自动故障转移）需要主动监视和自定义脚本或第三方工具来提供从原始MySQL服务器到副本的故障转移支持。要手动处理该过程，您应该能够通过修改应用程序以与新服务器通信或通过调整MySQL服务器的DNS从故障服务器切换到新服务器来切换从失败源到预配置副本。有关更多信息和一些示例解决方案，请参见[Section 19.4.8,
    “Switching Sources During Failover”](replication-solutions-switch.html "19.4.8 Switching
    Sources During Failover")。'
- en: '| **A.14.10.** | How do I tell whether a replication source server is using
    statement-based or row-based binary logging format? |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.10.** | 如何确定复制源服务器是使用基于语句还是基于行的二进制日志格式？'
- en: '|  | Check the value of the [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    system variable:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | 检查[`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)系统变量的值：'
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The value shown is always one of `STATEMENT`, `ROW`, or `MIXED`. For `MIXED`
    mode, statement-based logging is used by default but replication switches automatically
    to row-based logging under certain conditions, such as unsafe statements. For
    information about when this may occur, see [Section 7.4.4.3, “Mixed Binary Logging
    Format”](binary-log-mixed.html "7.4.4.3 Mixed Binary Logging Format"). |
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的值始终是`STATEMENT`、`ROW`或`MIXED`之一。对于`MIXED`模式，默认情况下使用基于语句的日志记录，但在某些条件下，例如不安全的语句，复制会自动切换到基于行的日志记录。有关可能发生这种情况的信息，请参见[Section 7.4.4.3,
    “Mixed Binary Logging Format”](binary-log-mixed.html "7.4.4.3 Mixed Binary Logging
    Format")。
- en: '| **A.14.11.** | How do I tell a replica to use row-based replication? |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.11.** | 如何告诉副本使用基于行的复制？'
- en: '|  | Replicas automatically know which format to use. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '|  | 副本自动知道要使用哪种格式。'
- en: '| **A.14.12.** | How do I prevent [`GRANT`](grant.html "15.7.1.6 GRANT Statement")
    and [`REVOKE`](revoke.html "15.7.1.8 REVOKE Statement") statements from replicating
    to replica machines? |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.12.** | 如何防止[`GRANT`](grant.html "15.7.1.6 GRANT Statement")和[`REVOKE`](revoke.html
    "15.7.1.8 REVOKE Statement")语句复制到副本机器？'
- en: '|  | Start the server with the [`--replicate-wild-ignore-table=mysql.%`](replication-options-replica.html#option_mysqld_replicate-wild-ignore-table)
    option to ignore replication for tables in the `mysql` database. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '|  | 使用[`--replicate-wild-ignore-table=mysql.%`](replication-options-replica.html#option_mysqld_replicate-wild-ignore-table)选项启动服务器，以忽略`mysql`数据库中的表的复制。
    |'
- en: '| **A.14.13.** | Does replication work on mixed operating systems (for example,
    the source runs on Linux while replicas run on macOS and Windows)? |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.13.** | 复制是否在混合操作系统上工作（例如，源在Linux上运行，而副本在macOS和Windows上运行）？ |'
- en: '|  | Yes. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '|  | 是的。 |'
- en: '| **A.14.14.** | Does replication work on mixed hardware architectures (for
    example, the source runs on a 64-bit machine while replicas run on 32-bit machines)?
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **A.14.14.** | 复制是否在混合硬件架构上工作（例如，源在64位机器上运行，而副本在32位机器上运行）？ |'
- en: '|  | Yes. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '|  | 是的。 |'
