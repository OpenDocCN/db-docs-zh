- en: 17.12.1 Online DDL Operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.12.1 在线 DDL 操作
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html)
- en: Online support details, syntax examples, and usage notes for DDL operations
    are provided under the following topics in this section.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中提供了 DDL 操作的在线支持详细信息、语法示例和用法说明。
- en: '[Index Operations](innodb-online-ddl-operations.html#online-ddl-index-operations
    "Index Operations")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[索引操作](innodb-online-ddl-operations.html#online-ddl-index-operations "索引操作")'
- en: '[Primary Key Operations](innodb-online-ddl-operations.html#online-ddl-primary-key-operations
    "Primary Key Operations")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[主键操作](innodb-online-ddl-operations.html#online-ddl-primary-key-operations
    "主键操作")'
- en: '[Column Operations](innodb-online-ddl-operations.html#online-ddl-column-operations
    "Column Operations")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列操作](innodb-online-ddl-operations.html#online-ddl-column-operations "列操作")'
- en: '[Generated Column Operations](innodb-online-ddl-operations.html#online-ddl-generated-column-operations
    "Generated Column Operations")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[生成列操作](innodb-online-ddl-operations.html#online-ddl-generated-column-operations
    "生成列操作")'
- en: '[Foreign Key Operations](innodb-online-ddl-operations.html#online-ddl-foreign-key-operations
    "Foreign Key Operations")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[外键操作](innodb-online-ddl-operations.html#online-ddl-foreign-key-operations
    "外键操作")'
- en: '[Table Operations](innodb-online-ddl-operations.html#online-ddl-table-operations
    "Table Operations")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[表操作](innodb-online-ddl-operations.html#online-ddl-table-operations "表操作")'
- en: '[Tablespace Operations](innodb-online-ddl-operations.html#online-ddl-tablespace-operations
    "Tablespace Operations")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[表空间操作](innodb-online-ddl-operations.html#online-ddl-tablespace-operations
    "表空间操作")'
- en: '[Partitioning Operations](innodb-online-ddl-operations.html#online-ddl-partitioning
    "Partitioning Operations")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分区操作](innodb-online-ddl-operations.html#online-ddl-partitioning "分区操作")'
- en: Index Operations
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 索引操作
- en: The following table provides an overview of online DDL support for index operations.
    An asterisk indicates additional information, an exception, or a dependency. For
    details, see [Syntax and Usage Notes](innodb-online-ddl-operations.html#online-ddl-index-syntax-notes
    "Syntax and Usage Notes").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格概述了索引操作的在线 DDL 支持。星号表示额外信息、异常或依赖关系。详情请参阅[语法和用法说明](innodb-online-ddl-operations.html#online-ddl-index-syntax-notes
    "语法和用法说明")。
- en: '**Table 17.16 Online DDL Support for Index Operations**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 17.16 索引操作的在线 DDL 支持**'
- en: '| Operation | Instant | In Place | Rebuilds Table | Permits Concurrent DML
    | Only Modifies Metadata |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 立即 | 就地 | 重建表 | 允许并发 DML | 仅修改元数据 |'
- en: '| Creating or adding a secondary index | No | Yes | No | Yes | No |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 创建或添加二级索引 | 否 | 是 | 否 | 是 | 否 |'
- en: '| Dropping an index | No | Yes | No | Yes | Yes |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 删除索引 | 否 | 是 | 否 | 是 | 是 |'
- en: '| Renaming an index | No | Yes | No | Yes | Yes |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 重命名索引 | 否 | 是 | 否 | 是 | 是 |'
- en: '| Adding a `FULLTEXT` index | No | Yes* | No* | No | No |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 添加`FULLTEXT`索引 | 否 | 是* | 否* | 否 | 否 |'
- en: '| Adding a `SPATIAL` index | No | Yes | No | No | No |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 添加`SPATIAL`索引 | 否 | 是 | 否 | 否 | 否 |'
- en: '| Changing the index type | Yes | Yes | No | Yes | Yes |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 更改索引类型 | 是 | 是 | 否 | 是 | 是 |'
- en: Syntax and Usage Notes
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 语法和用法说明
- en: Creating or adding a secondary index
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建或添加二级索引
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The table remains available for read and write operations while the index is
    being created. The [`CREATE INDEX`](create-index.html "15.1.15 CREATE INDEX Statement")
    statement only finishes after all transactions that are accessing the table are
    completed, so that the initial state of the index reflects the most recent contents
    of the table.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在创建索引时，表仍可用于读写操作。[`CREATE INDEX`](create-index.html "15.1.15 CREATE INDEX 语句")语句仅在访问表的所有事务完成后才完成，以便索引的初始状态反映表的最新内容。
- en: Online DDL support for adding secondary indexes means that you can generally
    speed the overall process of creating and loading a table and associated indexes
    by creating the table without secondary indexes, then adding secondary indexes
    after the data is loaded.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加二级索引的在线 DDL 支持意味着您通常可以通过在加载数据后创建不带二级索引的表，然后在数据加载后添加二级索引，从而加快创建和加载表及相关索引的整个过程。
- en: A newly created secondary index contains only the committed data in the table
    at the time the [`CREATE INDEX`](create-index.html "15.1.15 CREATE INDEX Statement")
    or [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") statement
    finishes executing. It does not contain any uncommitted values, old versions of
    values, or values marked for deletion but not yet removed from the old index.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新创建的二级索引仅包含在[`CREATE INDEX`](create-index.html "15.1.15 CREATE INDEX 语句")或[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE 语句")语句执行完成时表中的已提交数据。它不包含任何未提交的值、旧版本的值或标记为删除但尚未从旧索引中删除的值。
- en: Some factors affect the performance, space usage, and semantics of this operation.
    For details, see [Section 17.12.8, “Online DDL Limitations”](innodb-online-ddl-limitations.html
    "17.12.8 Online DDL Limitations").
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些因素会影响此操作的性能、空间使用和语义。详情请参阅[Section 17.12.8, “在线 DDL 限制”](innodb-online-ddl-limitations.html
    "17.12.8 在线 DDL 限制")。
- en: Dropping an index
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除索引
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The table remains available for read and write operations while the index is
    being dropped. The [`DROP INDEX`](drop-index.html "15.1.27 DROP INDEX Statement")
    statement only finishes after all transactions that are accessing the table are
    completed, so that the initial state of the index reflects the most recent contents
    of the table.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当索引被删除时，表仍然可用于读写操作。[`DROP INDEX`](drop-index.html "15.1.27 DROP INDEX 语句")语句只有在访问表的所有事务完成后才会完成，以便索引的初始状态反映表的最新内容。
- en: Renaming an index
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名索引
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Adding a `FULLTEXT` index
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`FULLTEXT`索引
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Adding the first `FULLTEXT` index rebuilds the table if there is no user-defined
    `FTS_DOC_ID` column. Additional `FULLTEXT` indexes may be added without rebuilding
    the table.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加第一个`FULLTEXT`索引会在没有用户定义的`FTS_DOC_ID`列的情况下重建表。可以在不重建表的情况下添加额外的`FULLTEXT`索引。
- en: Adding a `SPATIAL` index
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`SPATIAL`索引
- en: '[PRE6]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Changing the index type (`USING {BTREE | HASH}`)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改索引类型（`USING {BTREE | HASH}`）
- en: '[PRE7]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Primary Key Operations
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 主键操作
- en: The following table provides an overview of online DDL support for primary key
    operations. An asterisk indicates additional information, an exception, or a dependency.
    See [Syntax and Usage Notes](innodb-online-ddl-operations.html#online-ddl-primary-key-syntax-notes
    "Syntax and Usage Notes").
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下表概述了主键操作的在线 DDL 支持。星号表示额外信息、异常或依赖项。请参阅[语法和用法说明](innodb-online-ddl-operations.html#online-ddl-primary-key-syntax-notes
    "语法和用法说明")。
- en: '**Table 17.17 Online DDL Support for Primary Key Operations**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 17.17 主键操作的在线 DDL 支持**'
- en: '| Operation | Instant | In Place | Rebuilds Table | Permits Concurrent DML
    | Only Modifies Metadata |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 立即 | 原地 | 重建表 | 允许并发 DML | 仅修改元数据 |'
- en: '| Adding a primary key | No | Yes* | Yes* | Yes | No |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 添加主键 | 否 | 是* | 是* | 是 | 否 |'
- en: '| Dropping a primary key | No | No | Yes | No | No |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 删除主键 | 否 | 否 | 是 | 否 | 否 |'
- en: '| Dropping a primary key and adding another | No | Yes | Yes | Yes | No |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 删除主键并添加另一个 | 否 | 是 | 是 | 是 | 否 |'
- en: Syntax and Usage Notes
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 语法和用法说明
- en: Adding a primary key
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加主键
- en: '[PRE8]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Rebuilds the table in place. Data is reorganized substantially, making it an
    expensive operation. `ALGORITHM=INPLACE` is not permitted under certain conditions
    if columns have to be converted to `NOT NULL`.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在原地重建表。数据被大幅重新组织，使其成为一项昂贵的操作。如果必须将列转换为`NOT NULL`，则在某些条件下不允许使用`ALGORITHM=INPLACE`。
- en: Restructuring the [clustered index](glossary.html#glos_clustered_index "clustered
    index") always requires copying of table data. Thus, it is best to define the
    [primary key](glossary.html#glos_primary_key "primary key") when you create a
    table, rather than issuing `ALTER TABLE ... ADD PRIMARY KEY` later.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构[聚簇索引](glossary.html#glos_clustered_index "聚簇索引")总是需要复制表数据。因此，最好在创建表时定义[主键](glossary.html#glos_primary_key
    "主键")，而不是稍后发出`ALTER TABLE ... ADD PRIMARY KEY`。
- en: When you create a `UNIQUE` or `PRIMARY KEY` index, MySQL must do some extra
    work. For `UNIQUE` indexes, MySQL checks that the table contains no duplicate
    values for the key. For a `PRIMARY KEY` index, MySQL also checks that none of
    the `PRIMARY KEY` columns contains a `NULL`.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当创建`UNIQUE`或`PRIMARY KEY`索引时，MySQL必须做一些额外的工作。对于`UNIQUE`索引，MySQL检查表中是否没有重复键值。对于`PRIMARY
    KEY`索引，MySQL还检查是否没有`PRIMARY KEY`列包含`NULL`。
- en: 'When you add a primary key using the `ALGORITHM=COPY` clause, MySQL converts
    `NULL` values in the associated columns to default values: 0 for numbers, an empty
    string for character-based columns and BLOBs, and 0000-00-00 00:00:00 for `DATETIME`.
    This is a non-standard behavior that Oracle recommends you not rely on. Adding
    a primary key using `ALGORITHM=INPLACE` is only permitted when the [`SQL_MODE`](server-system-variables.html#sysvar_sql_mode)
    setting includes the `strict_trans_tables` or `strict_all_tables` flags; when
    the `SQL_MODE` setting is strict, `ALGORITHM=INPLACE` is permitted, but the statement
    can still fail if the requested primary key columns contain `NULL` values. The
    `ALGORITHM=INPLACE` behavior is more standard-compliant.'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用`ALGORITHM=COPY`子句添加主键时，MySQL会将相关列中的`NULL`值转换为默认值：数字为0，基于字符的列和BLOB为空字符串，`DATETIME`为0000-00-00
    00:00:00。这是一种非标准行为，Oracle建议您不要依赖于此。只有在[`SQL_MODE`](server-system-variables.html#sysvar_sql_mode)设置包括`strict_trans_tables`或`strict_all_tables`标志时，才允许使用`ALGORITHM=INPLACE`添加主键；当`SQL_MODE`设置为strict时，允许使用`ALGORITHM=INPLACE`，但如果请求的主键列包含`NULL`值，则语句仍可能失败。`ALGORITHM=INPLACE`行为更符合标准。
- en: If you create a table without a primary key, `InnoDB` chooses one for you, which
    can be the first `UNIQUE` key defined on `NOT NULL` columns, or a system-generated
    key. To avoid uncertainty and the potential space requirement for an extra hidden
    column, specify the `PRIMARY KEY` clause as part of the [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statement.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果创建一个没有主键的表，`InnoDB`会为您选择一个主键，可以是第一个在`NOT NULL`列上定义的`UNIQUE`键，或者是系统生成的键。为了避免不确定性和额外隐藏列的潜在空间需求，请在[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句中指定`PRIMARY KEY`子句。
- en: MySQL creates a new clustered index by copying the existing data from the original
    table to a temporary table that has the desired index structure. Once the data
    is completely copied to the temporary table, the original table is renamed with
    a different temporary table name. The temporary table comprising the new clustered
    index is renamed with the name of the original table, and the original table is
    dropped from the database.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL通过将现有数据从原始表复制到具有所需索引结构的临时表来创建新的聚集索引。一旦数据完全复制到临时表，原始表将以不同的临时表名称重命名。包含新聚集索引的临时表将以原始表的名称重命名，并且原始表将从数据库中删除。
- en: The online performance enhancements that apply to operations on secondary indexes
    do not apply to the primary key index. The rows of an InnoDB table are stored
    in a [clustered index](glossary.html#glos_clustered_index "clustered index") organized
    based on the [primary key](glossary.html#glos_primary_key "primary key"), forming
    what some database systems call an “index-organized table”. Because the table
    structure is closely tied to the primary key, redefining the primary key still
    requires copying the data.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 适用于次要索引操作的在线性能增强不适用于主键索引。InnoDB表的行存储在基于[主键](glossary.html#glos_primary_key "primary
    key")组织的[聚集索引](glossary.html#glos_clustered_index "clustered index")中，形成一些数据库系统称为“索引组织表”的结构。由于表结构与主键紧密相关，重新定义主键仍然需要复制数据。
- en: 'When an operation on the primary key uses `ALGORITHM=INPLACE`, even though
    the data is still copied, it is more efficient than using `ALGORITHM=COPY` because:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当对主键使用`ALGORITHM=INPLACE`时，即使数据仍在复制，也比使用`ALGORITHM=COPY`更有效，因为：
- en: No undo logging or associated redo logging is required for `ALGORITHM=INPLACE`.
    These operations add overhead to DDL statements that use `ALGORITHM=COPY`.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`ALGORITHM=INPLACE`不需要撤消日志或相关的重做日志。这些操作会给使用`ALGORITHM=COPY`的DDL语句增加开销。
- en: The secondary index entries are pre-sorted, and so can be loaded in order.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 次要索引条目已经预先排序，因此可以按顺序加载。
- en: The change buffer is not used, because there are no random-access inserts into
    the secondary indexes.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于没有随机访问插入到次要索引中，因此不使用更改缓冲区。
- en: Dropping a primary key
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除主键
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Only `ALGORITHM=COPY` supports dropping a primary key without adding a new one
    in the same `ALTER TABLE` statement.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有`ALGORITHM=COPY`支持在同一`ALTER TABLE`语句中删除主键而不添加新主键。
- en: Dropping a primary key and adding another
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除一个主键并添加另一个
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Data is reorganized substantially, making it an expensive operation.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据进行了大幅重组，这是一项昂贵的操作。
- en: Column Operations
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 列操作
- en: The following table provides an overview of online DDL support for column operations.
    An asterisk indicates additional information, an exception, or a dependency. For
    details, see [Syntax and Usage Notes](innodb-online-ddl-operations.html#online-ddl-column-syntax-notes
    "Syntax and Usage Notes").
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下表提供了关于列操作的在线DDL支持的概述。星号表示额外信息、异常或依赖关系。详情请参见[语法和用法说明](innodb-online-ddl-operations.html#online-ddl-column-syntax-notes
    "Syntax and Usage Notes")。
- en: '**Table 17.18 Online DDL Support for Column Operations**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**表17.18列操作的在线DDL支持**'
- en: '| Operation | Instant | In Place | Rebuilds Table | Permits Concurrent DML
    | Only Modifies Metadata |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | Instant | In Place | 重建表 | 允许并发DML | 仅修改元数据 |'
- en: '| Adding a column | Yes* | Yes | No* | Yes* | Yes |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 添加列 | 是* | 是 | 否* | 是* | 是 |'
- en: '| Dropping a column | Yes* | Yes | Yes | Yes | Yes |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 删除列 | 是* | 是 | 是 | 是 | 是 |'
- en: '| Renaming a column | Yes* | Yes | No | Yes* | Yes |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 重命名列 | 是* | 是 | 否 | 是* | 是 |'
- en: '| Reordering columns | No | Yes | Yes | Yes | No |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 重新排序列 | 否 | 是 | 是 | 是 | 否 |'
- en: '| Setting a column default value | Yes | Yes | No | Yes | Yes |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 设置列默认值 | 是 | 是 | 否 | 是 | 是 |'
- en: '| Changing the column data type | No | No | Yes | No | No |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 更改列数据类型 | 否 | 否 | 是 | 否 | 否 |'
- en: '| Extending `VARCHAR` column size | No | Yes | No | Yes | Yes |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 扩展`VARCHAR`列大小 | 否 | 是 | 否 | 是 | 是 |'
- en: '| Dropping the column default value | Yes | Yes | No | Yes | Yes |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 删除列默认值 | 是 | 是 | 否 | 是 | 是 |'
- en: '| Changing the auto-increment value | No | Yes | No | Yes | No* |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 更改自增值 | 否 | 是 | 否 | 是 | 否* |'
- en: '| Making a column `NULL` | No | Yes | Yes* | Yes | No |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 使列为`NULL` | 否 | 是 | 是* | 是 | 否 |'
- en: '| Making a column `NOT NULL` | No | Yes* | Yes* | Yes | No |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 使列为`NOT NULL` | 否 | 是* | 是* | 是 | 否 |'
- en: '| Modifying the definition of an `ENUM` or `SET` column | Yes | Yes | No |
    Yes | Yes |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 修改`ENUM`或`SET`列的定义 | 是 | 是 | 否 | 是 | 是 |'
- en: '| Operation | Instant | In Place | Rebuilds Table | Permits Concurrent DML
    | Only Modifies Metadata |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | Instant | In Place | 重建表 | 允许并发DML | 仅修改元数据 |'
- en: Syntax and Usage Notes
  id: totrans-86
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 语法和用法说明
- en: Adding a column
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加列
- en: '[PRE11]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`INSTANT` is the default algorithm as of MySQL 8.0.12, and `INPLACE` before
    that.'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`INSTANT`是MySQL 8.0.12之后的默认算法，之前是`INPLACE`。'
- en: 'The following limitations apply when the `INSTANT` algorithm adds a column:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`INSTANT`算法添加列时，以下限制适用：
- en: A statement cannot combine the addition of a column with other `ALTER TABLE`
    actions that do not support the `INSTANT` algorithm.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条语句不能将添加列与不支持`INSTANT`算法的其他`ALTER TABLE`操作结合在一起。
- en: The `INSTANT` algorithm can add a column at any position in the table. Before
    MySQL 8.0.29, the `INSTANT` algorithm could only add a column as the last column
    of the table.
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSTANT`算法可以在表中的任何位置添加列。在MySQL 8.0.29之前，`INSTANT`算法只能将列添加为表的最后一列。'
- en: Columns cannot be added to tables that use `ROW_FORMAT=COMPRESSED`, tables with
    a `FULLTEXT` index, tables that reside in the data dictionary tablespace, or temporary
    tables. Temporary tables only support `ALGORITHM=COPY`.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能向使用`ROW_FORMAT=COMPRESSED`、具有`FULLTEXT`索引、位于数据字典表空间中的表或临时表添加列。临时表仅支持`ALGORITHM=COPY`。
- en: MySQL checks the row size when the `INSTANT` algorithm adds a column, and throws
    the following error if the addition exceeds the limit.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`INSTANT`算法添加列时，MySQL会检查行大小，如果添加超过限制，则会抛出以下错误。
- en: 'ERROR 4092 (HY000): Column can''t be added with ALGORITHM=INSTANT as after
    this max possible row size crosses max permissible row size. Try ALGORITHM=INPLACE/COPY.'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误4092（HY000）：无法使用ALGORITHM=INSTANT添加列，因为此后最大可能行大小超过了最大允许行大小。请尝试ALGORITHM=INPLACE/COPY。
- en: Before MySQL 8.0.29, MySQL does not check the row size when the `INSTANT` algorithm
    adds a column. However, MySQL does check the row size during DML operations that
    insert and update rows in the table.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.29之前，MySQL在`INSTANT`算法添加列时不会检查行大小。但是，在插入和更新表中的行的DML操作期间，MySQL会检查行大小。
- en: 'The maximum number of columns in the internal representation of the table cannot
    exceed 1022 after column addition with the `INSTANT` algorithm. The error message
    is:'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用`INSTANT`算法添加列后，表的内部表示中列的最大数量不能超过1022。错误消息为：
- en: 'ERROR 4158 (HY000): Column can''t be added to *`tbl_name`* with ALGORITHM=INSTANT
    anymore. Please try ALGORITHM=INPLACE/COPY'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误4158（HY000）：无法使用ALGORITHM=INSTANT将列添加到*`tbl_name`*。请尝试ALGORITHM=INPLACE/COPY
- en: The `INSTANT` algorithm can not add or drop columns to system schema tables,
    such as the internal `mysql` table. This limitation was added in MySQL 8.0.29.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSTANT`算法无法向系统模式表（如内部`mysql`表）添加或删除列。此限制是在MySQL 8.0.29中添加的。'
- en: 'Multiple columns may be added in the same [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") statement. For example:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以在同一 [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") 语句中添加多个列。例如：
- en: '[PRE12]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A new row version is created after each [`ALTER TABLE ... ALGORITHM=INSTANT`](alter-table.html
    "15.1.9 ALTER TABLE Statement") operation that adds one or more columns, drops
    one or more columns, or adds and drops one or more columns in the same operation.
    The `INFORMATION_SCHEMA.INNODB_TABLES.TOTAL_ROW_VERSIONS` column tracks the number
    of row versions for a table. The value is incremented each time a column is instantly
    added or dropped. The initial value is 0.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次执行[`ALTER TABLE ... ALGORITHM=INSTANT`](alter-table.html "15.1.9 ALTER TABLE
    Statement") 操作添加一个或多个列、删除一个或多个列，或者在同一操作中添加和删除一个或多个列后，都会创建一个新的行版本。`INFORMATION_SCHEMA.INNODB_TABLES.TOTAL_ROW_VERSIONS`
    列跟踪表的行版本数量。每次立即添加或删除列时，该值都会递增。初始值为0。
- en: '[PRE13]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When a table with instantly added or dropped columns is rebuilt by table-rebuilding
    [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") or [`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement") operation, the
    `TOTAL_ROW_VERSIONS` value is reset to 0\. The maximum number of row versions
    permitted is 64, as each row version requires additional space for table metadata.
    When the row version limit is reached, `ADD COLUMN` and `DROP COLUMN` operations
    using `ALGORITHM=INSTANT` are rejected with an error message that recommends rebuilding
    the table using the `COPY` or `INPLACE` algorithm.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当具有立即添加或删除列的表通过表重建的 [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    或 [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    操作重建时，`TOTAL_ROW_VERSIONS` 值将重置为0。允许的最大行版本数为64，因为每个行版本都需要额外的表元数据空间。当达到行版本限制时，使用`ALGORITHM=INSTANT`的`ADD
    COLUMN`和`DROP COLUMN`操作将被拒绝，并显示错误消息建议使用`COPY`或`INPLACE`算法重建表。
- en: 'ERROR 4080 (HY000): Maximum row versions reached for table test/t1\. No more
    columns can be added or dropped instantly. Please use COPY/INPLACE.'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '错误 4080 (HY000): 表test/t1的最大行版本已达到。无法立即添加或删除更多列。请使用COPY/INPLACE。'
- en: The following [`INFORMATION_SCHEMA`](information-schema.html "Chapter 28 INFORMATION_SCHEMA
    Tables") columns provide additional metadata for instantly added columns. Refer
    to the descriptions of those columns for more information. See [Section 28.4.9,
    “The INFORMATION_SCHEMA INNODB_COLUMNS Table”](information-schema-innodb-columns-table.html
    "28.4.9 The INFORMATION_SCHEMA INNODB_COLUMNS Table"), and [Section 28.4.23, “The
    INFORMATION_SCHEMA INNODB_TABLES Table”](information-schema-innodb-tables-table.html
    "28.4.23 The INFORMATION_SCHEMA INNODB_TABLES Table").
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下 [`INFORMATION_SCHEMA`](information-schema.html "Chapter 28 INFORMATION_SCHEMA
    Tables") 列提供了立即添加列的附加元数据。有关这些列的描述，请参考这些列的描述以获取更多信息。参见 [Section 28.4.9, “The INFORMATION_SCHEMA
    INNODB_COLUMNS Table”](information-schema-innodb-columns-table.html "28.4.9 The
    INFORMATION_SCHEMA INNODB_COLUMNS Table") 和 [Section 28.4.23, “The INFORMATION_SCHEMA
    INNODB_TABLES Table”](information-schema-innodb-tables-table.html "28.4.23 The
    INFORMATION_SCHEMA INNODB_TABLES Table")。
- en: '`INNODB_COLUMNS.DEFAULT_VALUE`'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INNODB_COLUMNS.DEFAULT_VALUE`'
- en: '`INNODB_COLUMNS.HAS_DEFAULT`'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INNODB_COLUMNS.HAS_DEFAULT`'
- en: '`INNODB_TABLES.INSTANT_COLS`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INNODB_TABLES.INSTANT_COLS`'
- en: Concurrent DML is not permitted when adding an [auto-increment](glossary.html#glos_auto_increment
    "auto-increment") column. Data is reorganized substantially, making it an expensive
    operation. At a minimum, `ALGORITHM=INPLACE, LOCK=SHARED` is required.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在添加自增列时不允许并发DML。数据会被大幅重组，使其成为一项昂贵的操作。至少需要`ALGORITHM=INPLACE, LOCK=SHARED`。
- en: The table is rebuilt if `ALGORITHM=INPLACE` is used to add a column.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用`ALGORITHM=INPLACE`添加列，则表将被重建。
- en: Dropping a column
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除列
- en: '[PRE14]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`INSTANT` is the default algorithm as of MySQL 8.0.29, and `INPLACE` before
    that.'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.29，`INSTANT`是默认算法，之前是`INPLACE`。
- en: 'The following limitations apply when the `INSTANT` algorithm is used to drop
    a column:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`INSTANT`算法删除列时会出现以下限制：
- en: Dropping a column cannot be combined in the same statement with other [`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") actions that do not support
    `ALGORITHM=INSTANT`.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能将删除列与不支持`ALGORITHM=INSTANT`的其他 [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") 操作结合在同一语句中。
- en: Columns cannot be dropped from tables that use `ROW_FORMAT=COMPRESSED`, tables
    with a `FULLTEXT` index, tables that reside in the data dictionary tablespace,
    or temporary tables. Temporary tables only support `ALGORITHM=COPY`.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能从使用`ROW_FORMAT=COMPRESSED`、具有`FULLTEXT`索引、位于数据字典表空间中的表或临时表中删除列。临时表仅支持`ALGORITHM=COPY`。
- en: 'Multiple columns may be dropped in the same [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") statement; for example:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以在同一[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句中删除多个列；例如：
- en: '[PRE15]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Each time a column is added or dropped using `ALGORITHM=INSTANT`, a new row
    version is created. The `INFORMATION_SCHEMA.INNODB_TABLES.TOTAL_ROW_VERSIONS`
    column tracks the number of row versions for a table. The value is incremented
    each time a column is instantly added or dropped. The initial value is 0.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次使用`ALGORITHM=INSTANT`添加或删除列时，都会创建一个新的行版本。`INFORMATION_SCHEMA.INNODB_TABLES.TOTAL_ROW_VERSIONS`列跟踪表的行版本数。每次立即添加或删除列时，该值都会递增。初始值为0。
- en: '[PRE16]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When a table with instantly added or dropped columns is rebuilt by table-rebuilding
    [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") or [`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement") operation, the
    `TOTAL_ROW_VERSIONS` value is reset to 0\. The maximum number of row versions
    permitted is 64, as each row version requires additional space for table metadata.
    When the row version limit is reached, `ADD COLUMN` and `DROP COLUMN` operations
    using `ALGORITHM=INSTANT` are rejected with an error message that recommends rebuilding
    the table using the `COPY` or `INPLACE` algorithm.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当具有立即添加或删除列的表通过表重建[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")或[`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")操作重建时，`TOTAL_ROW_VERSIONS`值将重置为0。允许的最大行版本数为64，因为每个行版本都需要额外的空间用于表元数据。当达到行版本限制时，使用`ALGORITHM=INSTANT`的`ADD
    COLUMN`和`DROP COLUMN`操作将被拒绝，并显示错误消息建议使用`COPY`或`INPLACE`算法重建表。
- en: 'ERROR 4080 (HY000): Maximum row versions reached for table test/t1\. No more
    columns can be added or dropped instantly. Please use COPY/INPLACE.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误 4080 (HY000)：表test/t1的最大行版本已达到。无法立即添加或删除更多列。请使用COPY/INPLACE。
- en: If an algorithm other than `ALGORITHM=INSTANT` is used, data is reorganized
    substantially, making it an expensive operation.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用`ALGORITHM=INSTANT`之外的算法，数据会被大幅重组，使其成为一项昂贵的操作。
- en: Renaming a column
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名列
- en: '[PRE17]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`ALGORITHM=INSTANT` support for renaming a column was added in MySQL 8.0.28\.
    Earlier MySQL Server releases support only `ALGORITHM=INPLACE` and `ALGORITHM=COPY`
    when renaming a column.'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 8.0.28中添加了对重命名列的`ALGORITHM=INSTANT`支持。在较早的MySQL Server版本中，重命名列仅支持`ALGORITHM=INPLACE`和`ALGORITHM=COPY`。
- en: To permit concurrent DML, keep the same data type and only change the column
    name.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了允许并发DML，请保持相同的数据类型，只更改列名。
- en: When you keep the same data type and `[NOT] NULL` attribute, only changing the
    column name, the operation can always be performed online.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当保持相同的数据类型和`[NOT] NULL`属性，仅更改列名时，该操作始终可以在线执行。
- en: Renaming a column referenced from another table is only permitted with `ALGORITHM=INPLACE`.
    If you use `ALGORITHM=INSTANT`, `ALGORITHM=COPY`, or some other condition that
    causes the operation to use those algorithms, the `ALTER TABLE` statement fails.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅允许使用`ALGORITHM=INPLACE`重命名另一个表引用的列。如果使用`ALGORITHM=INSTANT`、`ALGORITHM=COPY`或导致操作使用这些算法的其他条件，则`ALTER
    TABLE`语句将失败。
- en: '`ALGORITHM=INSTANT` supports renaming a virtual column; `ALGORITHM=INPLACE`
    does not.'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ALGORITHM=INSTANT`支持重命名虚拟列；`ALGORITHM=INPLACE`不支持。'
- en: '`ALGORITHM=INSTANT` and `ALGORITHM=INPLACE` do not support renaming a column
    when adding or dropping a virtual column in the same statement. In this case,
    only `ALGORITHM=COPY` is supported.'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在相同语句中添加或删除虚拟列时，`ALGORITHM=INSTANT`和`ALGORITHM=INPLACE`不支持重命名列。在这种情况下，只支持`ALGORITHM=COPY`。
- en: Reordering columns
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新排序列
- en: To reorder columns, use `FIRST` or `AFTER` in `CHANGE` or `MODIFY` operations.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要重新排序列，请在`CHANGE`或`MODIFY`操作中使用`FIRST`或`AFTER`。
- en: '[PRE18]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Data is reorganized substantially, making it an expensive operation.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据会被大幅重组，使其成为一项昂贵的操作。
- en: Changing the column data type
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改列数据类型
- en: '[PRE19]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Changing the column data type is only supported with `ALGORITHM=COPY`.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有使用`ALGORITHM=COPY`才支持更改列数据类型。
- en: Extending `VARCHAR` column size
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展`VARCHAR`列大小
- en: '[PRE20]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The number of length bytes required by a [`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") column must remain the same. For [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types") columns of 0 to 255 bytes in size, one length
    byte is required to encode the value. For [`VARCHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types") columns of 256 bytes in size or more, two length bytes are
    required. As a result, in-place [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") only supports increasing [`VARCHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types") column size from 0 to 255 bytes, or from 256 bytes to a greater
    size. In-place [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    does not support increasing the size of a [`VARCHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types") column from less than 256 bytes to a size equal to or greater
    than 256 bytes. In this case, the number of required length bytes changes from
    1 to 2, which is only supported by a table copy (`ALGORITHM=COPY`). For example,
    attempting to change [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")
    column size for a single byte character set from VARCHAR(255) to VARCHAR(256)
    using in-place [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    returns this error:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")列所需的长度字节数必须保持不变。对于大小为0到255字节的[`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")列，需要一个长度字节来编码值。对于大小为256字节或更大的[`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")列，需要两个长度字节。因此，原地[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")仅支持将[`VARCHAR`](char.html "13.3.2 The CHAR and
    VARCHAR Types")列大小从0到255字节增加，或从256字节增加到更大的大小。原地[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")不支持将[`VARCHAR`](char.html "13.3.2 The CHAR and
    VARCHAR Types")列大小从小于256字节增加到等于或大于256字节。在这种情况下，所需的长度字节数从1变为2，只能通过表复制（`ALGORITHM=COPY`）支持。例如，尝试使用原地[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")将单字节字符集的[`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")列大小从VARCHAR(255)更改为VARCHAR(256)会返回此错误：'
- en: '[PRE21]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The byte length of a `VARCHAR` column is dependant on the byte length of the
    character set.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`VARCHAR`列的字节长度取决于字符集的字节长度。'
- en: Decreasing [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") size using
    in-place [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") is not
    supported. Decreasing [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")
    size requires a table copy (`ALGORITHM=COPY`).
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用原地[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")不支持减小[`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")大小。减小[`VARCHAR`](char.html "13.3.2 The CHAR
    and VARCHAR Types")大小需要表复制（`ALGORITHM=COPY`）。
- en: Setting a column default value
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置列默认值
- en: '[PRE22]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Only modifies table metadata. Default column values are stored in the [data
    dictionary](glossary.html#glos_data_dictionary "data dictionary").
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅修改表元数据。默认列值存储在[数据字典](glossary.html#glos_data_dictionary "数据字典")中。
- en: Dropping a column default value
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除列默认值
- en: '[PRE23]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Changing the auto-increment value
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改自增值
- en: '[PRE24]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Modifies a value stored in memory, not the data file.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改存储在内存中的值，而不是数据文件中的值。
- en: In a distributed system using replication or sharding, you sometimes reset the
    auto-increment counter for a table to a specific value. The next row inserted
    into the table uses the specified value for its auto-increment column. You might
    also use this technique in a data warehousing environment where you periodically
    empty all the tables and reload them, and restart the auto-increment sequence
    from 1.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用复制或分片的分布式系统中，有时会将表的自增计数器重置为特定值。表中插入的下一行将使用其自增列的指定值。您也可以在数据仓库环境中使用此技术，定期清空所有表并重新加载它们，并从1重新启动自增序列。
- en: Making a column `NULL`
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使列`NULL`
- en: '[PRE25]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Rebuilds the table in place. Data is reorganized substantially, making it an
    expensive operation.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在原地重建表。数据被大幅重新组织，使其成为昂贵的操作。
- en: Making a column `NOT NULL`
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使列`NOT NULL`
- en: '[PRE26]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Rebuilds the table in place. `STRICT_ALL_TABLES` or `STRICT_TRANS_TABLES` [`SQL_MODE`](server-system-variables.html#sysvar_sql_mode)
    is required for the operation to succeed. The operation fails if the column contains
    NULL values. The server prohibits changes to foreign key columns that have the
    potential to cause loss of referential integrity. See [Section 15.1.9, “ALTER
    TABLE Statement”](alter-table.html "15.1.9 ALTER TABLE Statement"). Data is reorganized
    substantially, making it an expensive operation.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在原地重建表格。操作需要`STRICT_ALL_TABLES`或`STRICT_TRANS_TABLES` [`SQL_MODE`](server-system-variables.html#sysvar_sql_mode)
    的支持才能成功。如果列包含NULL值，则操作将失败。服务器禁止对可能导致引用完整性丢失的外键列进行更改。请参阅[第15.1.9节，“ALTER TABLE
    Statement”](alter-table.html "15.1.9 ALTER TABLE Statement")。数据将被大幅重新组织，这是一个昂贵的操作。
- en: Modifying the definition of an `ENUM` or `SET` column
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`ENUM`或`SET`列的定义
- en: '[PRE27]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Modifying the definition of an [`ENUM`](enum.html "13.3.5 The ENUM Type") or
    [`SET`](set.html "13.3.6 The SET Type") column by adding new enumeration or set
    members to the *end* of the list of valid member values may be performed instantly
    or in place, as long as the storage size of the data type does not change. For
    example, adding a member to a [`SET`](set.html "13.3.6 The SET Type") column that
    has 8 members changes the required storage per value from 1 byte to 2 bytes; this
    requires a table copy. Adding members in the middle of the list causes renumbering
    of existing members, which requires a table copy.
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过在有效成员值列表的*末尾*添加新的枚举或集合成员来修改[`ENUM`](enum.html "13.3.5 The ENUM Type")或[`SET`](set.html
    "13.3.6 The SET Type")列的定义可以立即执行或原地执行，只要数据类型的存储大小不变。例如，向具有8个成员的[`SET`](set.html
    "13.3.6 The SET Type")列添加一个成员会将每个值所需的存储从1字节更改为2字节；这需要复制表格。在列表中间添加成员会导致现有成员的重新编号，这需要复制表格。
- en: Generated Column Operations
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成列操作
- en: The following table provides an overview of online DDL support for generated
    column operations. For details, see [Syntax and Usage Notes](innodb-online-ddl-operations.html#online-ddl-generated-column-syntax-notes
    "Syntax and Usage Notes").
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 下表提供了生成列操作的在线DDL支持概述。详情请参阅[语法和用法注意事项](innodb-online-ddl-operations.html#online-ddl-generated-column-syntax-notes
    "Syntax and Usage Notes")。
- en: '**Table 17.19 Online DDL Support for Generated Column Operations**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**表17.19 生成列操作的在线DDL支持**'
- en: '| Operation | Instant | In Place | Rebuilds Table | Permits Concurrent DML
    | Only Modifies Metadata |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 立即执行 | 原地执行 | 重建表格 | 允许并发DML | 仅修改元数据 |'
- en: '| Adding a `STORED` column | No | No | Yes | No | No |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 添加`STORED`列 | 否 | 否 | 是 | 否 | 否 |'
- en: '| Modifying `STORED` column order | No | No | Yes | No | No |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 修改`STORED`列顺序 | 否 | 否 | 是 | 否 | 否 |'
- en: '| Dropping a `STORED` column | No | Yes | Yes | Yes | No |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 删除`STORED`列 | 否 | 是 | 是 | 是 | 否 |'
- en: '| Adding a `VIRTUAL` column | Yes | Yes | No | Yes | Yes |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 添加`VIRTUAL`列 | 是 | 是 | 否 | 是 | 是 |'
- en: '| Modifying `VIRTUAL` column order | No | No | Yes | No | No |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 修改`VIRTUAL`列顺序 | 否 | 否 | 是 | 否 | 否 |'
- en: '| Dropping a `VIRTUAL` column | Yes | Yes | No | Yes | Yes |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 删除`VIRTUAL`列 | 是 | 是 | 否 | 是 | 是 |'
- en: Syntax and Usage Notes
  id: totrans-175
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 语法和用法注意事项
- en: Adding a `STORED` column
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`STORED`列
- en: '[PRE28]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`ADD COLUMN` is not an in-place operation for stored columns (done without
    using a temporary table) because the expression must be evaluated by the server.'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ADD COLUMN`对于存储列（不使用临时表）不是一个原地操作，因为表达式必须由服务器评估。'
- en: Modifying `STORED` column order
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`STORED`列顺序
- en: '[PRE29]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Rebuilds the table in place.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在原地重建表格。
- en: Dropping a `STORED` column
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除`STORED`列
- en: '[PRE30]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Rebuilds the table in place.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在原地重建表格。
- en: Adding a `VIRTUAL` column
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`VIRTUAL`列
- en: '[PRE31]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Adding a virtual column can be performed instantly or in place for non-partitioned
    tables.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于非分区表，添加虚拟列可以立即执行或原地执行。
- en: Adding a `VIRTUAL` is not an in-place operation for partitioned tables.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对分区表来说，添加`VIRTUAL`列不是一个原地操作。
- en: Modifying `VIRTUAL` column order
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`VIRTUAL`列顺序
- en: '[PRE32]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Dropping a `VIRTUAL` column
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除`VIRTUAL`列
- en: '[PRE33]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Dropping a `VIRTUAL` column can be performed instantly or in place for non-partitioned
    tables.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于非分区表，删除`VIRTUAL`列可以立即执行或原地执行。
- en: Foreign Key Operations
  id: totrans-194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 外键操作
- en: The following table provides an overview of online DDL support for foreign key
    operations. An asterisk indicates additional information, an exception, or a dependency.
    For details, see [Syntax and Usage Notes](innodb-online-ddl-operations.html#online-ddl-foreign-key-syntax-notes
    "Syntax and Usage Notes").
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 下表提供了外键操作的在线DDL支持概述。星号表示额外信息、异常或依赖关系。详情请参阅[语法和用法注意事项](innodb-online-ddl-operations.html#online-ddl-foreign-key-syntax-notes
    "Syntax and Usage Notes")。
- en: '**Table 17.20 Online DDL Support for Foreign Key Operations**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 17.20 外键操作的在线 DDL 支持**'
- en: '| Operation | Instant | In Place | Rebuilds Table | Permits Concurrent DML
    | Only Modifies Metadata |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 立即 | 就地 | 重建表 | 允许并发 DML | 仅修改元数据 |'
- en: '| Adding a foreign key constraint | No | Yes* | No | Yes | Yes |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 添加外键约束 | 否 | 是* | 否 | 是 | 是 |'
- en: '| Dropping a foreign key constraint | No | Yes | No | Yes | Yes |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 删除外键约束 | 否 | 是 | 否 | 是 | 是 |'
- en: Syntax and Usage Notes
  id: totrans-200
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 语法和用法说明
- en: Adding a foreign key constraint
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加外键约束
- en: The `INPLACE` algorithm is supported when [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)
    is disabled. Otherwise, only the `COPY` algorithm is supported.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)被禁用时，支持`INPLACE`算法。否则，只支持`COPY`算法。
- en: '[PRE34]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Dropping a foreign key constraint
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除外键约束
- en: '[PRE35]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Dropping a foreign key can be performed online with the [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)
    option enabled or disabled.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以在启用或禁用[`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)选项的情况下在线执行删除外键操作。
- en: 'If you do not know the names of the foreign key constraints on a particular
    table, issue the following statement and find the constraint name in the `CONSTRAINT`
    clause for each foreign key:'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果不知道特定表上外键约束的名称，请发出以下语句，并在每个外键的`CONSTRAINT`子句中找到约束名称：
- en: '[PRE36]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Or, query the Information Schema [`TABLE_CONSTRAINTS`](information-schema-table-constraints-table.html
    "28.3.42 The INFORMATION_SCHEMA TABLE_CONSTRAINTS Table") table and use the `CONSTRAINT_NAME`
    and `CONSTRAINT_TYPE` columns to identify the foreign key names.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，查询信息模式[`TABLE_CONSTRAINTS`](information-schema-table-constraints-table.html
    "28.3.42 The INFORMATION_SCHEMA TABLE_CONSTRAINTS Table")表，并使用`CONSTRAINT_NAME`和`CONSTRAINT_TYPE`列来识别外键名称。
- en: 'You can also drop a foreign key and its associated index in a single statement:'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还可以在单个语句中删除外键及其关联的索引：
- en: '[PRE37]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If [foreign keys](glossary.html#glos_foreign_key "foreign key") are already
    present in the table being altered (that is, it is a [child table](glossary.html#glos_child_table
    "child table") containing a `FOREIGN KEY ... REFERENCE` clause), additional restrictions
    apply to online DDL operations, even those not directly involving the foreign
    key columns:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表中已经存在[外键](glossary.html#glos_foreign_key "foreign key")（即，它是包含`FOREIGN KEY
    ... REFERENCE`子句的[子表](glossary.html#glos_child_table "child table")），则对在线 DDL
    操作会有额外限制，即使这些操作并不直接涉及外键列：
- en: An [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") on the child
    table could wait for another transaction to commit, if a change to the parent
    table causes associated changes in the child table through an `ON UPDATE` or `ON
    DELETE` clause using the `CASCADE` or `SET NULL` parameters.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果对父表的更改通过`ON UPDATE`或`ON DELETE`子句使用`CASCADE`或`SET NULL`参数导致子表中的关联更改，那么对子表进行的[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")可能需要等待另一个事务提交。
- en: In the same way, if a table is the [parent table](glossary.html#glos_parent_table
    "parent table") in a foreign key relationship, even though it does not contain
    any `FOREIGN KEY` clauses, it could wait for the [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") to complete if an [`INSERT`](insert.html "15.2.7 INSERT
    Statement"), [`UPDATE`](update.html "15.2.17 UPDATE Statement"), or [`DELETE`](delete.html
    "15.2.2 DELETE Statement") statement causes an `ON UPDATE` or `ON DELETE` action
    in the child table.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，如果一张表是外键关系中的[父表](glossary.html#glos_parent_table "parent table")，即使它不包含任何`FOREIGN
    KEY`子句，如果[`INSERT`](insert.html "15.2.7 INSERT Statement")、[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")或[`DELETE`](delete.html "15.2.2 DELETE Statement")语句导致子表中的`ON
    UPDATE`或`ON DELETE`操作，它也可能需要等待[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement")完成。
- en: Table Operations
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 表操作
- en: The following table provides an overview of online DDL support for table operations.
    An asterisk indicates additional information, an exception, or a dependency. For
    details, see [Syntax and Usage Notes](innodb-online-ddl-operations.html#online-ddl-table-syntax-notes
    "Syntax and Usage Notes").
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格提供了表操作的在线 DDL 支持概述。星号表示额外信息、异常或依赖关系。有关详细信息，请参阅[语法和用法说明](innodb-online-ddl-operations.html#online-ddl-table-syntax-notes
    "Syntax and Usage Notes")。
- en: '**Table 17.21 Online DDL Support for Table Operations**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 17.21 表操作的在线 DDL 支持**'
- en: '| Operation | Instant | In Place | Rebuilds Table | Permits Concurrent DML
    | Only Modifies Metadata |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 立即 | 就地 | 重建表 | 允许并发 DML | 仅修改元数据 |'
- en: '| Changing the `ROW_FORMAT` | No | Yes | Yes | Yes | No |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| 更改 `ROW_FORMAT` | 否 | 是 | 是 | 是 | 否 |'
- en: '| Changing the `KEY_BLOCK_SIZE` | No | Yes | Yes | Yes | No |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| 更改 `KEY_BLOCK_SIZE` | 否 | 是 | 是 | 是 | 否 |'
- en: '| Setting persistent table statistics | No | Yes | No | Yes | Yes |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 设置持久表统计信息 | 否 | 是 | 否 | 是 | 是 |'
- en: '| Specifying a character set | No | Yes | Yes* | Yes | No |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 指定字符集 | 否 | 是 | 是* | 是 | 否 |'
- en: '| Converting a character set | No | No | Yes* | No | No |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 转换字符集 | 否 | 否 | 是* | 否 | 否 |'
- en: '| Optimizing a table | No | Yes* | Yes | Yes | No |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 优化表 | 否 | 是* | 是 | 是 | 否 |'
- en: '| Rebuilding with the `FORCE` option | No | Yes* | Yes | Yes | No |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| 使用 `FORCE` 选项重建 | 否 | 是* | 是 | 是 | 否 |'
- en: '| Performing a null rebuild | No | Yes* | Yes | Yes | No |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 执行空重建 | 否 | 是* | 是 | 是 | 否 |'
- en: '| Renaming a table | Yes | Yes | No | Yes | Yes |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| 重命名表 | 是 | 是 | 否 | 是 | 是 |'
- en: Syntax and Usage Notes
  id: totrans-229
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 语法和用法说明
- en: Changing the `ROW_FORMAT`
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改 `ROW_FORMAT`
- en: '[PRE38]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Data is reorganized substantially, making it an expensive operation.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据进行了大幅重组，这是一个昂贵的操作。
- en: For additional information about the `ROW_FORMAT` option, see [Table Options](create-table.html#create-table-options
    "Table Options").
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关 `ROW_FORMAT` 选项的更多信息，请参见[表选项](create-table.html#create-table-options "Table
    Options")。
- en: Changing the `KEY_BLOCK_SIZE`
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改 `KEY_BLOCK_SIZE`
- en: '[PRE39]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Data is reorganized substantially, making it an expensive operation.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据进行了大幅重组，这是一个昂贵的操作。
- en: For additional information about the `KEY_BLOCK_SIZE` option, see [Table Options](create-table.html#create-table-options
    "Table Options").
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关 `KEY_BLOCK_SIZE` 选项的更多信息，请参见[表选项](create-table.html#create-table-options
    "Table Options")。
- en: Setting persistent table statistics options
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置持久表统计信息选项
- en: '[PRE40]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Only modifies table metadata.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅修改表元数据。
- en: Persistent statistics include `STATS_PERSISTENT`, `STATS_AUTO_RECALC`, and `STATS_SAMPLE_PAGES`.
    For more information, see [Section 17.8.10.1, “Configuring Persistent Optimizer
    Statistics Parameters”](innodb-persistent-stats.html "17.8.10.1 Configuring Persistent
    Optimizer Statistics Parameters").
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 持久统计信息包括 `STATS_PERSISTENT`、`STATS_AUTO_RECALC` 和 `STATS_SAMPLE_PAGES`。有关更多信息，请参见[Section 17.8.10.1,
    “Configuring Persistent Optimizer Statistics Parameters”](innodb-persistent-stats.html
    "17.8.10.1 Configuring Persistent Optimizer Statistics Parameters")。
- en: Specifying a character set
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定字符集
- en: '[PRE41]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Rebuilds the table if the new character encoding is different.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果新的字符编码不同，则重新构建表。
- en: Converting a character set
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换字符集
- en: '[PRE42]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Rebuilds the table if the new character encoding is different.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果新的字符编码不同，则重新构建表。
- en: Optimizing a table
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化表
- en: '[PRE43]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In-place operation is not supported for tables with `FULLTEXT` indexes. The
    operation uses the `INPLACE` algorithm, but `ALGORITHM` and `LOCK` syntax is not
    permitted.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不支持具有 `FULLTEXT` 索引的表的就地操作。该操作使用 `INPLACE` 算法，但不允��使用 `ALGORITHM` 和 `LOCK` 语法。
- en: Rebuilding a table with the `FORCE` option
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `FORCE` 选项重建表
- en: '[PRE44]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Uses `ALGORITHM=INPLACE` as of MySQL 5.6.17`. `ALGORITHM=INPLACE` is not supported
    for tables with `FULLTEXT` indexes.`
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 5.6.17 中使用 `ALGORITHM=INPLACE`。对于具有 `FULLTEXT` 索引的表，不支持 `ALGORITHM=INPLACE`。
- en: '`Performing a "null" rebuild`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`执行“null”重建`'
- en: '[PRE45]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`Uses `ALGORITHM=INPLACE` as of MySQL 5.6.17\. `ALGORITHM=INPLACE` is not supported
    for tables with `FULLTEXT` indexes.`'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 5.6.17 中使用 `ALGORITHM=INPLACE`。对于具有 `FULLTEXT` 索引的表，不支持 `ALGORITHM=INPLACE`。
- en: '`Renaming a table`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`重命名表`'
- en: '[PRE46]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '`Renaming a table can be performed instantly or in place. MySQL renames files
    that correspond to the table *`tbl_name`* without making a copy. (You can also
    use the [`RENAME TABLE`](rename-table.html "15.1.36 RENAME TABLE Statement") statement
    to rename tables. See [Section 15.1.36, “RENAME TABLE Statement”](rename-table.html
    "15.1.36 RENAME TABLE Statement").) Privileges granted specifically for the renamed
    table are not migrated to the new name. They must be changed manually.`'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`重命名表可以立即执行或就地执行。MySQL 重命名与表 *`tbl_name`* 对应的文件，而不进行复制。（您也可以使用 [`RENAME TABLE`](rename-table.html
    "15.1.36 RENAME TABLE Statement") 语句来重命名表。请参见 [Section 15.1.36, “RENAME TABLE
    Statement”](rename-table.html "15.1.36 RENAME TABLE Statement")。）专门授予重命名表的权限不会迁移到新名称。必须手动更改。`'
- en: '`#### Tablespace Operations'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`#### 表空间操作'
- en: The following table provides an overview of online DDL support for tablespace
    operations. For details, see [Syntax and Usage Notes](innodb-online-ddl-operations.html#online-ddl-tablespace-syntax-notes
    "Syntax and Usage Notes").
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格概述了表空间操作的在线 DDL 支持。有关详细信息，请参见[语法和用法说明](innodb-online-ddl-operations.html#online-ddl-tablespace-syntax-notes
    "Syntax and Usage Notes")。
- en: '**Table 17.22 Online DDL Support for Tablespace Operations**'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 17.22 表空间操作的在线 DDL 支持**'
- en: '| Operation | Instant | In Place | Rebuilds Table | Permits Concurrent DML
    | Only Modifies Metadata |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| 操作 | 立即 | 就地 | 重建表 | 允许并发 DML | 仅修改元数据 |'
- en: '| Renaming a general tablespace | No | Yes | No | Yes | Yes |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| 重命名通用表空间 | 否 | 是 | 否 | 是 | 是 |'
- en: '| Enabling or disabling general tablespace encryption | No | Yes | No | Yes
    | No |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| 启用或禁用通用表空间加密 | 否 | 是 | 否 | 是 | 否 |'
- en: '| Enabling or disabling file-per-table tablespace encryption | No | No | Yes
    | No | No |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| 启用或禁用按表加密的表空间 | 否 | 否 | 是 | 否 | 否 |'
- en: Syntax and Usage Notes
  id: totrans-267
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 语法和使用说明
- en: Renaming a general tablespace
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名通用表空间
- en: '[PRE47]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[`ALTER TABLESPACE ... RENAME TO`](alter-tablespace.html "15.1.10 ALTER TABLESPACE
    Statement") uses the `INPLACE` algorithm but does not support the `ALGORITHM`
    clause.'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ALTER TABLESPACE ... RENAME TO`](alter-tablespace.html "15.1.10 ALTER TABLESPACE
    Statement")使用`INPLACE`算法，但不支持`ALGORITHM`子句。'
- en: Enabling or disabling general tablespace encryption
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用或禁用通用表空间加密
- en: '[PRE48]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[`ALTER TABLESPACE ... ENCRYPTION`](alter-tablespace.html "15.1.10 ALTER TABLESPACE
    Statement") uses the `INPLACE` algorithm but does not support the `ALGORITHM`
    clause.'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ALTER TABLESPACE ... ENCRYPTION`](alter-tablespace.html "15.1.10 ALTER TABLESPACE
    Statement")使用`INPLACE`算法，但不支持`ALGORITHM`子句。'
- en: For related information, see [Section 17.13, “InnoDB Data-at-Rest Encryption”](innodb-data-encryption.html
    "17.13 InnoDB Data-at-Rest Encryption").
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关相关信息，请参阅[第17.13节，“InnoDB数据静态加密”](innodb-data-encryption.html "17.13 InnoDB
    Data-at-Rest Encryption")。
- en: Enabling or disabling file-per-table tablespace encryption
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用或禁用按表加密的表空间
- en: '[PRE49]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: For related information, see [Section 17.13, “InnoDB Data-at-Rest Encryption”](innodb-data-encryption.html
    "17.13 InnoDB Data-at-Rest Encryption").
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关相关信息，请参阅[第17.13节，“InnoDB数据静态加密”](innodb-data-encryption.html "17.13 InnoDB
    Data-at-Rest Encryption")。
- en: Partitioning Operations
  id: totrans-278
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分区操作
- en: With the exception of some [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") partitioning clauses, online DDL operations for partitioned `InnoDB`
    tables follow the same rules that apply to regular `InnoDB` tables.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 除了一些[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")分区子句外，针对分区`InnoDB`表的在线DDL操作遵循适用于常规`InnoDB`表的相同规则。
- en: Some [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") partitioning
    clauses do not go through the same internal online DDL API as regular non-partitioned
    `InnoDB` tables. As a result, online support for [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") partitioning clauses varies.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 一些[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")分区子句不会像常规非分区`InnoDB`表一样通过相同的内部在线DDL
    API。因此，对于[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")分区子句的在线支持有所不同。
- en: The following table shows the online status for each `ALTER TABLE` partitioning
    statement. Regardless of the online DDL API that is used, MySQL attempts to minimize
    data copying and locking where possible.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了每个`ALTER TABLE`分区语句的在线状态。无论使用哪种在线DDL API，MySQL都会尽可能减少数据复制和锁定。
- en: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") partitioning
    options that use `ALGORITHM=COPY` or that only permit “`ALGORITHM=DEFAULT, LOCK=DEFAULT`”,
    repartition the table using the `COPY` algorithm. In other words, a new partitioned
    table is created with the new partitioning scheme. The newly created table includes
    any changes applied by the [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") statement, and table data is copied into the new table structure.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ALGORITHM=COPY`的[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")分区选项或仅允许“`ALGORITHM=DEFAULT,
    LOCK=DEFAULT`”的选项，使用`COPY`算法重新分区表。换句话说，使用新的分区方案创建了一个新的分区表。新创建的表包括[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")语句应用的任何更改，并且表数据被复制到新表结构中。
- en: '**Table 17.23 Online DDL Support for Partitioning Operations**'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**表17.23 分区操作的在线DDL支持**'
- en: '| Partitioning Clause | Instant | In Place | Permits DML | Notes |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| 分区子句 | 立即 | 就地 | 允许DML | 备注 |'
- en: '| [`PARTITION BY`](alter-table.html "15.1.9 ALTER TABLE Statement") | No |
    No | No | Permits `ALGORITHM=COPY`, `LOCK={DEFAULT&#124;SHARED&#124;EXCLUSIVE}`
    |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| [`PARTITION BY`](alter-table.html "15.1.9 ALTER TABLE Statement") | 否 | 否
    | 否 | 允许`ALGORITHM=COPY`，`LOCK={DEFAULT&#124;SHARED&#124;EXCLUSIVE}` |'
- en: '| [`ADD PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") | No |
    Yes* | Yes* | `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;NONE&#124;SHARED&#124;EXCLUSISVE}`
    is supported for `RANGE` and `LIST` partitions, `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;SHARED&#124;EXCLUSISVE}`
    for `HASH` and `KEY` partitions, and `ALGORITHM=COPY, LOCK={SHARED&#124;EXCLUSIVE}`
    for all partition types. Does not copy existing data for tables partitioned by
    `RANGE` or `LIST`. Concurrent queries are permitted with `ALGORITHM=COPY` for
    tables partitioned by `HASH` or `LIST`, as MySQL copies the data while holding
    a shared lock. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| [`ADD PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") | 否 |
    是* | 是* | 对于 `RANGE` 和 `LIST` 分区，支持 `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;NONE&#124;SHARED&#124;EXCLUSISVE}`，对于
    `HASH` 和 `KEY` 分区，支持 `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;SHARED&#124;EXCLUSISVE}`，对于所有分区类型，支持
    `ALGORITHM=COPY, LOCK={SHARED&#124;EXCLUSIVE}`。对于使用 `RANGE` 或 `LIST` 进行分区的表，不会复制现有数据。对于使用
    `HASH` 或 `LIST` 进行分区的表，允许使用 `ALGORITHM=COPY` 进行并发查询，因为 MySQL 在持有共享锁的同时复制数据。 |'
- en: '| [`DROP PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") | No
    | Yes* | Yes* | `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;NONE&#124;SHARED&#124;EXCLUSIVE}`
    is supported. Does not copy data for tables partitioned by `RANGE` or `LIST`.`DROP
    PARTITION` with `ALGORITHM=INPLACE` deletes data stored in the partition and drops
    the partition. However, `DROP PARTITION` with `ALGORITHM=COPY` or [`old_alter_table=ON`](server-system-variables.html#sysvar_old_alter_table)
    rebuilds the partitioned table and attempts to move data from the dropped partition
    to another partition with a compatible `PARTITION ... VALUES` definition. Data
    that cannot be moved to another partition is deleted. |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| [`DROP PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") | 否 |
    是* | 是* | 支持 `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;NONE&#124;SHARED&#124;EXCLUSIVE}`。对于使用
    `RANGE` 或 `LIST` 进行分区的表，不会复制数据。使用 `ALGORITHM=INPLACE` 的 `DROP PARTITION` 删除存储在分区中的数据并删除该分区。然而，使用
    `ALGORITHM=COPY` 或 [`old_alter_table=ON`](server-system-variables.html#sysvar_old_alter_table)
    的 `DROP PARTITION` 会重建分区表，并尝试将数据从已删除的分区移动到具有兼容的 `PARTITION ... VALUES` 定义的另一个分区。无法移动到另一个分区的数据将被删除。
    |'
- en: '| [`DISCARD PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    No | No | No | Only permits `ALGORITHM=DEFAULT`, `LOCK=DEFAULT` |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| [`DISCARD PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    否 | 否 | 否 | 仅允许 `ALGORITHM=DEFAULT`, `LOCK=DEFAULT` |'
- en: '| [`IMPORT PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") | No
    | No | No | Only permits `ALGORITHM=DEFAULT`, `LOCK=DEFAULT` |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| [`IMPORT PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") | 否
    | 否 | 否 | 仅允许 `ALGORITHM=DEFAULT`, `LOCK=DEFAULT` |'
- en: '| [`TRUNCATE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    No | Yes | Yes | Does not copy existing data. It merely deletes rows; it does
    not alter the definition of the table itself, or of any of its partitions. |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| [`TRUNCATE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    否 | 是 | 是 | 不复制现有数据。它仅删除行；不会改变表本身或任何分区的定义。 |'
- en: '| [`COALESCE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    No | Yes* | No | `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;SHARED&#124;EXCLUSIVE}`
    is supported. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| [`COALESCE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    否 | 是* | 否 | 支持 `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;SHARED&#124;EXCLUSIVE}`。
    |'
- en: '| [`REORGANIZE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement")
    | No | Yes* | No | `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;SHARED&#124;EXCLUSIVE}`
    is supported. |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| [`REORGANIZE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement")
    | 否 | 是* | 否 | 支持 `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;SHARED&#124;EXCLUSIVE}`。
    |'
- en: '| [`EXCHANGE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    No | Yes | Yes |  |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| [`EXCHANGE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    否 | 是 | 是 |  |'
- en: '| [`ANALYZE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    No | Yes | Yes |  |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| [`ANALYZE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    否 | 是 | 是 |  |'
- en: '| [`CHECK PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") | No
    | Yes | Yes |  |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| [`CHECK PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") | 否
    | 是 | 是 |  |'
- en: '| [`OPTIMIZE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    No | No | No | `ALGORITHM` and `LOCK` clauses are ignored. Rebuilds the entire
    table. See [Section 26.3.4, “Maintenance of Partitions”](partitioning-maintenance.html
    "26.3.4 Maintenance of Partitions"). |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| [`OPTIMIZE PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    否 | 否 | 否 | `ALGORITHM` 和 `LOCK` 子句被忽略。重建整个表。参见 [Section 26.3.4, “Maintenance
    of Partitions”](partitioning-maintenance.html "26.3.4 Maintenance of Partitions")。
    |'
- en: '| [`REBUILD PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    No | Yes* | No | `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;SHARED&#124;EXCLUSIVE}`
    is supported. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| [`REBUILD PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") |
    否 | 是* | 否 | 支持 `ALGORITHM=INPLACE, LOCK={DEFAULT&#124;SHARED&#124;EXCLUSIVE}`。
    |'
- en: '| [`REPAIR PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") | No
    | Yes | Yes |  |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| [`REPAIR PARTITION`](alter-table.html "15.1.9 ALTER TABLE Statement") | 否
    | 是 | 是 |  |'
- en: '| [`REMOVE PARTITIONING`](alter-table.html "15.1.9 ALTER TABLE Statement")
    | No | No | No | Permits `ALGORITHM=COPY`, `LOCK={DEFAULT&#124;SHARED&#124;EXCLUSIVE}`
    |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| [`REMOVE PARTITIONING`](alter-table.html "15.1.9 ALTER TABLE Statement")
    | 否 | 否 | 否 | 允许 `ALGORITHM=COPY`，`LOCK={DEFAULT&#124;SHARED&#124;EXCLUSIVE}`
    |'
- en: '| Partitioning Clause | Instant | In Place | Permits DML | Notes |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| 分区子句 | 瞬时 | 就地 | 允许 DML | 备注 |'
- en: Non-partitioning online [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") operations on partitioned tables follow the same rules that apply
    to regular tables. However, [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement") performs online operations on each table partition, which causes increased
    demand on system resources due to operations being performed on multiple partitions.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 针对分区表的非分区在线[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")操作遵循适用于常规表的相同规则。然而，[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")对每个表分区执行在线操作，这会导致系统资源需求增加，因为操作在多个分区上执行。
- en: For additional information about [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") partitioning clauses, see [Partitioning Options](alter-table.html#alter-table-partition-options
    "Partitioning Options"), and [Section 15.1.9.1, “ALTER TABLE Partition Operations”](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations"). For information about partitioning
    in general, see [Chapter 26, *Partitioning*](partitioning.html "Chapter 26 Partitioning").`
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")分区子句的更多信息，请参阅[分区选项](alter-table.html#alter-table-partition-options
    "Partitioning Options")，以及[第15.1.9.1节，“ALTER TABLE分区操作”](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations")。有关分区的一般信息，请参阅[第26章，“*分区*”](partitioning.html
    "Chapter 26 Partitioning")。
