- en: 14.23 Miscellaneous Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.23 杂项函数
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html](https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html)
- en: '**Table 14.33 Miscellaneous Functions**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.33 杂项函数**'
- en: '| Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`ANY_VALUE()`](miscellaneous-functions.html#function_any-value) | Suppress
    ONLY_FULL_GROUP_BY value rejection |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`ANY_VALUE()`](miscellaneous-functions.html#function_any-value) | 抑制`ONLY_FULL_GROUP_BY`值拒绝
    |'
- en: '| [`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid) | Convert
    binary UUID to string |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid) | 将二进制
    UUID 转换为字符串 |'
- en: '| [`DEFAULT()`](miscellaneous-functions.html#function_default) | Return the
    default value for a table column |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`DEFAULT()`](miscellaneous-functions.html#function_default) | 返回表列的默认值 |'
- en: '| [`GROUPING()`](miscellaneous-functions.html#function_grouping) | Distinguish
    super-aggregate ROLLUP rows from regular rows |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`GROUPING()`](miscellaneous-functions.html#function_grouping) | 区分超级聚合 ROLLUP
    行和常规行 |'
- en: '| [`INET_ATON()`](miscellaneous-functions.html#function_inet-aton) | Return
    the numeric value of an IP address |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`INET_ATON()`](miscellaneous-functions.html#function_inet-aton) | 返回 IP
    地址的数值 |'
- en: '| [`INET_NTOA()`](miscellaneous-functions.html#function_inet-ntoa) | Return
    the IP address from a numeric value |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`INET_NTOA()`](miscellaneous-functions.html#function_inet-ntoa) | 返回数值的
    IP 地址 |'
- en: '| [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton) | Return
    the numeric value of an IPv6 address |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton) | 返回 IPv6
    地址的数值 |'
- en: '| [`INET6_NTOA()`](miscellaneous-functions.html#function_inet6-ntoa) | Return
    the IPv6 address from a numeric value |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`INET6_NTOA()`](miscellaneous-functions.html#function_inet6-ntoa) | 返回数值的
    IPv6 地址 |'
- en: '| [`IS_IPV4()`](miscellaneous-functions.html#function_is-ipv4) | Whether argument
    is an IPv4 address |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`IS_IPV4()`](miscellaneous-functions.html#function_is-ipv4) | 参数是否为 IPv4
    地址 |'
- en: '| [`IS_IPV4_COMPAT()`](miscellaneous-functions.html#function_is-ipv4-compat)
    | Whether argument is an IPv4-compatible address |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`IS_IPV4_COMPAT()`](miscellaneous-functions.html#function_is-ipv4-compat)
    | 参数是否为 IPv4 兼容地址 |'
- en: '| [`IS_IPV4_MAPPED()`](miscellaneous-functions.html#function_is-ipv4-mapped)
    | Whether argument is an IPv4-mapped address |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`IS_IPV4_MAPPED()`](miscellaneous-functions.html#function_is-ipv4-mapped)
    | 参数是否为 IPv4 映射地址 |'
- en: '| [`IS_IPV6()`](miscellaneous-functions.html#function_is-ipv6) | Whether argument
    is an IPv6 address |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`IS_IPV6()`](miscellaneous-functions.html#function_is-ipv6) | 参数是否为 IPv6
    地址 |'
- en: '| [`IS_UUID()`](miscellaneous-functions.html#function_is-uuid) | Whether argument
    is a valid UUID |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`IS_UUID()`](miscellaneous-functions.html#function_is-uuid) | 参数是否为有效的 UUID
    |'
- en: '| [`NAME_CONST()`](miscellaneous-functions.html#function_name-const) | Cause
    the column to have the given name |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`NAME_CONST()`](miscellaneous-functions.html#function_name-const) | 使列具有给定名称
    |'
- en: '| [`SLEEP()`](miscellaneous-functions.html#function_sleep) | Sleep for a number
    of seconds |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`SLEEP()`](miscellaneous-functions.html#function_sleep) | 休眠若干秒 |'
- en: '| [`UUID()`](miscellaneous-functions.html#function_uuid) | Return a Universal
    Unique Identifier (UUID) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`UUID()`](miscellaneous-functions.html#function_uuid) | 返回通用唯一标识符（UUID）
    |'
- en: '| [`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short) | Return
    an integer-valued universal identifier |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short) | 返回整数值的通用标识符
    |'
- en: '| [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin) | Convert
    string UUID to binary |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin) | 将字符串
    UUID 转换为二进制 |'
- en: '| [`VALUES()`](miscellaneous-functions.html#function_values) | Define the values
    to be used during an INSERT |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`VALUES()`](miscellaneous-functions.html#function_values) | 定义在插入期间要使用的值
    |'
- en: '| Name | Description |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '[`ANY_VALUE(*`arg`*)`](miscellaneous-functions.html#function_any-value)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ANY_VALUE(*`arg`*)`](miscellaneous-functions.html#function_any-value)'
- en: This function is useful for `GROUP BY` queries when the [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)
    SQL mode is enabled, for cases when MySQL rejects a query that you know is valid
    for reasons that MySQL cannot determine. The function return value and type are
    the same as the return value and type of its argument, but the function result
    is not checked for the [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)
    SQL mode.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当启用[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by) SQL 模式时，此函数对`GROUP
    BY`查询很有用，用于 MySQL 拒绝你知道是有效的查询的情况，但 MySQL 无法确定拒绝的原因。函数的返回值和类型与其参数的返回值和类型相同，但函数结果不会被检查[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)
    SQL 模式。
- en: 'For example, if `name` is a nonindexed column, the following query fails with
    [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by) enabled:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，如果`name`是一个非索引列，在启用[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)的情况下，以下查询将失败：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The failure occurs because `address` is a nonaggregated column that is neither
    named among `GROUP BY` columns nor functionally dependent on them. As a result,
    the `address` value for rows within each `name` group is nondeterministic. There
    are multiple ways to cause MySQL to accept the query:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 失败的原因是`address`是一个非聚合列，既不在`GROUP BY`列中，也不在函数上依赖于它们。因此，每个`name`组内的行的`address`值是不确定的。有多种方法可以使
    MySQL 接受查询：
- en: Alter the table to make `name` a primary key or a unique `NOT NULL` column.
    This enables MySQL to determine that `address` is functionally dependent on `name`;
    that is, `address` is uniquely determined by `name`. (This technique is inapplicable
    if `NULL` must be permitted as a valid `name` value.)
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改表，使`name`成为主键或唯一的`NOT NULL`列。这样 MySQL 就可以确定`address`在`name`上是函数上依赖的；也就是说，`address`是由`name`唯一确定的。（如果`NULL`必须被允许作为有效的`name`值，则此技术不适用。）
- en: 'Use [`ANY_VALUE()`](miscellaneous-functions.html#function_any-value) to refer
    to `address`:'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)来引用`address`：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, MySQL ignores the nondeterminism of `address` values within each
    `name` group and accepts the query. This may be useful if you simply do not care
    which value of a nonaggregated column is chosen for each group. [`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)
    is not an aggregate function, unlike functions such as [`SUM()`](aggregate-functions.html#function_sum)
    or [`COUNT()`](aggregate-functions.html#function_count). It simply acts to suppress
    the test for nondeterminism.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，MySQL忽略了每个`name`组内`address`值的不确定性，并接受了查询。如果您只是不关心为每个组选择哪个非聚合列的值，那么这可能是有用的。[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)不是一个聚合函数，不像[`SUM()`](aggregate-functions.html#function_sum)或[`COUNT()`](aggregate-functions.html#function_count)等函数。它只是用来抑制不确定性测试的。
- en: Disable [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by). This
    is equivalent to using [`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)
    with [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by) enabled,
    as described in the previous item.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)。这相当于在启用[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)的情况下使用[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)，如前一项所述。
- en: '[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value) is also useful
    if functional dependence exists between columns but MySQL cannot determine it.
    The following query is valid because `age` is functionally dependent on the grouping
    column `age-1`, but MySQL cannot tell that and rejects the query with [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)
    enabled:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果列之间存在函数依赖关系，但 MySQL 无法确定，那么[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)也是有用的。以下查询是有效的，因为`age`在分组列`age-1`上是函数上依赖的，但
    MySQL 无法判断，并在启用[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)时拒绝查询：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To cause MySQL to accept the query, use [`ANY_VALUE()`](miscellaneous-functions.html#function_any-value):'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使 MySQL 接受查询，请使用[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value) can be used
    for queries that refer to aggregate functions in the absence of a `GROUP BY` clause:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在没有`GROUP BY`子句的情况下，可以使用[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)来引用聚合函数：
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Without `GROUP BY`, there is a single group and it is nondeterministic which
    `name` value to choose for the group. [`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)
    tells MySQL to accept the query:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有`GROUP BY`，只有一个组，选择哪个`name`值对于该组是不确定的。[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)告诉
    MySQL 接受查询：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It may be that, due to some property of a given data set, you know that a selected
    nonaggregated column is effectively functionally dependent on a `GROUP BY` column.
    For example, an application may enforce uniqueness of one column with respect
    to another. In this case, using [`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)
    for the effectively functionally dependent column may make sense.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也许，由于给定数据集的某些属性，您知道所选的非聚合列实际上是函数上依赖于`GROUP BY`列的。例如，一个应用程序可能强制一个列相对于另一个列的唯一性。在这种情况下，对于实际上是函数上依赖的列使用[`ANY_VALUE()`](miscellaneous-functions.html#function_any-value)可能是有意义的。
- en: For additional discussion, see [Section 14.19.3, “MySQL Handling of GROUP BY”](group-by-handling.html
    "14.19.3 MySQL Handling of GROUP BY").
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多讨论，请参阅 [第14.19.3节，“MySQL对GROUP BY的处理”](group-by-handling.html "14.19.3 MySQL对GROUP
    BY的处理")。
- en: '[`BIN_TO_UUID(*`binary_uuid`*)`](miscellaneous-functions.html#function_bin-to-uuid),
    [`BIN_TO_UUID(*`binary_uuid`*, *`swap_flag`*)`](miscellaneous-functions.html#function_bin-to-uuid)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BIN_TO_UUID(*`binary_uuid`*)`](miscellaneous-functions.html#function_bin-to-uuid),
    [`BIN_TO_UUID(*`binary_uuid`*, *`swap_flag`*)`](miscellaneous-functions.html#function_bin-to-uuid)'
- en: '[`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid) is the
    inverse of [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin).
    It converts a binary UUID to a string UUID and returns the result. The binary
    value should be a UUID as a [`VARBINARY(16)`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types") value. The return value is a string of five hexadecimal
    numbers separated by dashes. (For details about this format, see the [`UUID()`](miscellaneous-functions.html#function_uuid)
    function description.) If the UUID argument is `NULL`, the return value is `NULL`.
    If any argument is invalid, an error occurs.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid) 是 [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)
    的逆操作。它将二进制UUID转换为字符串UUID并返回结果。二进制值应为 [`VARBINARY(16)`](binary-varbinary.html "13.3.3 二进制和VARBINARY类型")
    值的UUID。返回值是由短横线分隔的五个十六进制数字组成的字符串。（有关此格式的详细信息，请参阅 [`UUID()`](miscellaneous-functions.html#function_uuid)
    函数描述。）如果UUID参数为 `NULL`，则返回值为 `NULL`。如果任何参数无效，则会出现错误。'
- en: '[`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid) takes
    one or two arguments:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid) 接受一个或两个参数：'
- en: The one-argument form takes a binary UUID value. The UUID value is assumed not
    to have its time-low and time-high parts swapped. The string result is in the
    same order as the binary argument.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一参数形式接受一个二进制UUID值。假定UUID值未交换其时间低位和时间高位部分。字符串结果与二进制参数的顺序相同。
- en: 'The two-argument form takes a binary UUID value and a swap-flag value:'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两参数形式接受一个二进制UUID值和一个交换标志值：
- en: If *`swap_flag`* is 0, the two-argument form is equivalent to the one-argument
    form. The string result is in the same order as the binary argument.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *`swap_flag`* 为0，则两参数形式等同于一参数形式。字符串结果与二进制参数的顺序相同。
- en: If *`swap_flag`* is 1, the UUID value is assumed to have its time-low and time-high
    parts swapped. These parts are swapped back to their original position in the
    result value.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *`swap_flag`* 为1，则假定UUID值已交换其时间低位和时间高位部分。这些部分在结果值中被交换回其原始位置。
- en: For usage examples and information about time-part swapping, see the [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)
    function description.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关用法示例和有关时间部分交换的信息，请参阅 [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)
    函数描述。
- en: '[`DEFAULT(*`col_name`*)`](miscellaneous-functions.html#function_default)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DEFAULT(*`col_name`*)`](miscellaneous-functions.html#function_default)'
- en: Returns the default value for a table column. An error results if the column
    has no default value.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回表列的默认值。如果列没有默认值，则会出现错误。
- en: The use of [`DEFAULT(*`col_name`*)`](miscellaneous-functions.html#function_default)
    to specify the default value for a named column is permitted only for columns
    that have a literal default value, not for columns that have an expression default
    value.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 [`DEFAULT(*`col_name`*)`](miscellaneous-functions.html#function_default)
    来指定命名列的默认值仅适用于具有文字默认值而不是表达式默认值的列。
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[`FORMAT(*`X`*,*`D`*)`](string-functions.html#function_format)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FORMAT(*`X`*,*`D`*)`](string-functions.html#function_format)'
- en: Formats the number *`X`* to a format like `'#,###,###.##'`, rounded to *`D`*
    decimal places, and returns the result as a string. For details, see [Section 14.8,
    “String Functions and Operators”](string-functions.html "14.8 String Functions
    and Operators").
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将数字 *`X`* 格式化为类似 `'#,###,###.##'` 的格式，四舍五入到 *`D`* 小数位，并将结果作为字符串返回。有关详细信息，请参阅
    [第14.8节，“字符串函数和运算符”](string-functions.html "14.8 字符串函数和运算符")。
- en: '[`GROUPING(*`expr`* [, *`expr`*] ...)`](miscellaneous-functions.html#function_grouping)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`GROUPING(*`expr`* [, *`expr`*] ...)`](miscellaneous-functions.html#function_grouping)'
- en: For `GROUP BY` queries that include a `WITH ROLLUP` modifier, the `ROLLUP` operation
    produces super-aggregate output rows where `NULL` represents the set of all values.
    The [`GROUPING()`](miscellaneous-functions.html#function_grouping) function enables
    you to distinguish `NULL` values for super-aggregate rows from `NULL` values in
    regular grouped rows.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于包含`WITH ROLLUP`修饰符的`GROUP BY`查询，`ROLLUP`操作会生成超级聚合输出行，其中`NULL`表示所有值的集合。[`GROUPING()`](miscellaneous-functions.html#function_grouping)函数使您能够区分超级聚合行中的`NULL`值和常规分组行中的`NULL`值。
- en: '[`GROUPING()`](miscellaneous-functions.html#function_grouping) is permitted
    in the select list, `HAVING` clause, and (as of MySQL 8.0.12) `ORDER BY` clause.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GROUPING()`](miscellaneous-functions.html#function_grouping)允许在选择列表、`HAVING`子句和（自MySQL
    8.0.12起）`ORDER BY`子句中使用。'
- en: Each argument to [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    must be an expression that exactly matches an expression in the `GROUP BY` clause.
    The expression cannot be a positional specifier. For each expression, [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    produces 1 if the expression value in the current row is a `NULL` representing
    a super-aggregate value. Otherwise, [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    produces 0, indicating that the expression value is a `NULL` for a regular result
    row or is not `NULL`.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个[`GROUPING()`](miscellaneous-functions.html#function_grouping)的参数必须是与`GROUP
    BY`子句中的表达式完全匹配的表达式。表达式不能是位置指示符。对于每个表达式，如果当前行中表达式的值是代表超级聚合值的`NULL`，则[`GROUPING()`](miscellaneous-functions.html#function_grouping)会产生1。否则，[`GROUPING()`](miscellaneous-functions.html#function_grouping)会产生0，表示表达式值是常规结果行的`NULL`或不是`NULL`。
- en: 'Suppose that table `t1` contains these rows, where `NULL` indicates something
    like “other” or “unknown”:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设表`t1`包含以下行，其中`NULL`表示类似于“其他”或“未知”的内容：
- en: '[PRE7]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A summary of the table without `WITH ROLLUP` looks like this:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有`WITH ROLLUP`的表格摘要如下所示：
- en: '[PRE8]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The result contains `NULL` values, but those do not represent super-aggregate
    rows because the query does not include `WITH ROLLUP`.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果包含`NULL`值，但这些值不代表超级聚合行，因为查询中没有包含`WITH ROLLUP`。
- en: 'Adding `WITH ROLLUP` produces super-aggregate summary rows containing additional
    `NULL` values. However, without comparing this result to the previous one, it
    is not easy to see which `NULL` values occur in super-aggregate rows and which
    occur in regular grouped rows:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加`WITH ROLLUP`会生成包含额外`NULL`值的超级聚合摘要行。然而，如果不将此结果与先前的结果进行比较，就不容易看出哪些`NULL`值出现在超级聚合行中，哪些出现在常规分组行中：
- en: '[PRE9]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To distinguish `NULL` values in super-aggregate rows from those in regular
    grouped rows, use [`GROUPING()`](miscellaneous-functions.html#function_grouping),
    which returns 1 only for super-aggregate `NULL` values:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要区分超级聚合行中的`NULL`值和常规分组行中的`NULL`值，使用[`GROUPING()`](miscellaneous-functions.html#function_grouping)，它仅对超级聚合的`NULL`值返回1：
- en: '[PRE10]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Common uses for [`GROUPING()`](miscellaneous-functions.html#function_grouping):'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GROUPING()`](miscellaneous-functions.html#function_grouping)的常见用途：'
- en: 'Substitute a label for super-aggregate `NULL` values:'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为超级聚合的`NULL`值替换标签：
- en: '[PRE11]'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Return only super-aggregate lines by filtering out the regular grouped lines:'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过过滤掉常规分组行，只返回超级聚合行：
- en: '[PRE12]'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[`GROUPING()`](miscellaneous-functions.html#function_grouping) permits multiple
    expression arguments. In this case, the [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    return value represents a bitmask combined from the results for each expression,
    where the lowest-order bit corresponds to the result for the rightmost expression.
    For example, with three expression arguments, [`GROUPING(*`expr1`*, *`expr2`*,
    *`expr3`*)`](miscellaneous-functions.html#function_grouping) is evaluated like
    this:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GROUPING()`](miscellaneous-functions.html#function_grouping)允许多个表达式参数。在这种情况下，[`GROUPING()`](miscellaneous-functions.html#function_grouping)的返回值代表从每个表达式的结果组合而成的位掩码，其中最低位对应最右边表达式的结果。例如，对于三个表达式参数，[`GROUPING(*`expr1`*,
    *`expr2`*, *`expr3`*)`](miscellaneous-functions.html#function_grouping)的计算如下：'
- en: '[PRE13]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following query shows how [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    results for single arguments combine for a multiple-argument call to produce a
    bitmask value:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下查询展示了单个参数的[`GROUPING()`](miscellaneous-functions.html#function_grouping)结果如何组合为多参数调用以生成位掩码值：
- en: '[PRE14]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With multiple expression arguments, the [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    return value is nonzero if any expression represents a super-aggregate value.
    Multiple-argument [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    syntax thus provides a simpler way to write the earlier query that returned only
    super-aggregate rows, by using a single multiple-argument [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    call rather than multiple single-argument calls:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于多个表达式参数，如果任何表达式代表超级聚合值，则[`GROUPING()`](miscellaneous-functions.html#function_grouping)的返回值为非零。因此，多参数[`GROUPING()`](miscellaneous-functions.html#function_grouping)语法提供了一种更简单的方法来编写仅返回超级聚合行的早期查询，通过使用单个多参数[`GROUPING()`](miscellaneous-functions.html#function_grouping)调用而不是多个单参数调用：
- en: '[PRE15]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use of [`GROUPING()`](miscellaneous-functions.html#function_grouping) is subject
    to these limitations:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`GROUPING()`](miscellaneous-functions.html#function_grouping)受到以下限制：
- en: 'Do not use subquery `GROUP BY` expressions as [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    arguments because matching might fail. For example, matching fails for this query:'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要将子查询`GROUP BY`表达式用作[`GROUPING()`](miscellaneous-functions.html#function_grouping)参数，因为匹配可能失败。例如，对于此查询，匹配失败：
- en: '[PRE16]'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`GROUP BY` literal expressions should not be used within a `HAVING` clause
    as [`GROUPING()`](miscellaneous-functions.html#function_grouping) arguments. Due
    to differences between when the optimizer evaluates `GROUP BY` and `HAVING`, matching
    may succeed but [`GROUPING()`](miscellaneous-functions.html#function_grouping)
    evaluation does not produce the expected result. Consider this query:'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不应在`HAVING`子句中使用`GROUP BY`文字表达式作为[`GROUPING()`](miscellaneous-functions.html#function_grouping)参数。由于优化器评估`GROUP
    BY`和`HAVING`的时间差异，匹配可能成功，但[`GROUPING()`](miscellaneous-functions.html#function_grouping)的评估并不产生预期的结果。考虑以下查询：
- en: '[PRE17]'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[`GROUPING()`](miscellaneous-functions.html#function_grouping) is evaluated
    earlier for the literal constant expression than for the `HAVING` clause as a
    whole and returns 0. To check whether a query such as this is affected, use [`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement") and look for `Impossible having` in the `Extra` column.'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`GROUPING()`](miscellaneous-functions.html#function_grouping)在整个`HAVING`子句之前对文字常量表达式进行评估，并返回0。要检查是否受到影响，可以使用[`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement")并查找`Extra`列中的`Impossible having`。'
- en: For more information about `WITH ROLLUP` and [`GROUPING()`](miscellaneous-functions.html#function_grouping),
    see [Section 14.19.2, “GROUP BY Modifiers”](group-by-modifiers.html "14.19.2 GROUP
    BY Modifiers").
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关`WITH ROLLUP`和[`GROUPING()`](miscellaneous-functions.html#function_grouping)的更多信息，请参见[第14.19.2节，“GROUP
    BY修饰符”](group-by-modifiers.html "14.19.2 GROUP BY Modifiers")。
- en: '[`INET_ATON(*`expr`*)`](miscellaneous-functions.html#function_inet-aton)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INET_ATON(*`expr`*)`](miscellaneous-functions.html#function_inet-aton)'
- en: Given the dotted-quad representation of an IPv4 network address as a string,
    returns an integer that represents the numeric value of the address in network
    byte order (big endian). [`INET_ATON()`](miscellaneous-functions.html#function_inet-aton)
    returns `NULL` if it does not understand its argument, or if *`expr`* is `NULL`.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定一个作为字符串的IPv4网络地址的点分十进制表示，返回一个代表地址在网络字节顺序（大端）中的数值的整数。如果[`INET_ATON()`](miscellaneous-functions.html#function_inet-aton)不理解其参数，或者*`expr`*为`NULL`，则返回`NULL`。
- en: '[PRE18]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: For this example, the return value is calculated as 10×256³ + 0×256² + 5×256
    + 9.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于此示例，返回值计算为10×256³ + 0×256² + 5×256 + 9。
- en: '[`INET_ATON()`](miscellaneous-functions.html#function_inet-aton) may or may
    not return a non-`NULL` result for short-form IP addresses (such as `''127.1''`
    as a representation of `''127.0.0.1''`). Because of this, [`INET_ATON()`](miscellaneous-functions.html#function_inet-aton)a
    should not be used for such addresses.'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于简短形式的IP地址（例如`'127.1'`表示`'127.0.0.1'`），[`INET_ATON()`](miscellaneous-functions.html#function_inet-aton)可能会或可能不会返回非`NULL`结果。因此，不应该对这样的地址使用[`INET_ATON()`](miscellaneous-functions.html#function_inet-aton)。
- en: Note
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: To store values generated by [`INET_ATON()`](miscellaneous-functions.html#function_inet-aton),
    use an `INT UNSIGNED` column rather than [`INT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), which
    is signed. If you use a signed column, values corresponding to IP addresses for
    which the first octet is greater than 127 cannot be stored correctly. See [Section 13.1.7,
    “Out-of-Range and Overflow Handling”](out-of-range-and-overflow.html "13.1.7 Out-of-Range
    and Overflow Handling").
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了存储[`INET_ATON()`](miscellaneous-functions.html#function_inet-aton)生成的值，请使用`INT
    UNSIGNED`列，而不是带有符号的[`INT`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT,
    SMALLINT, TINYINT, MEDIUMINT, BIGINT")。如果使用带符号的列，无法正确存储首个八位组大于127的 IP 地址对应的值。参见[第
    13.1.7 节，“超出范围和溢出处理”](out-of-range-and-overflow.html "13.1.7 超出范围和溢出处理")。
- en: '[`INET_NTOA(*`expr`*)`](miscellaneous-functions.html#function_inet-ntoa)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INET_NTOA(*`expr`*)`](miscellaneous-functions.html#function_inet-ntoa)'
- en: Given a numeric IPv4 network address in network byte order, returns the dotted-quad
    string representation of the address as a string in the connection character set.
    [`INET_NTOA()`](miscellaneous-functions.html#function_inet-ntoa) returns `NULL`
    if it does not understand its argument.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定以网络字节顺序表示的数字 IPv4 网络地址，返回地址的点分十进制字符串表示形式作为连接字符集中的字符串。如果不理解其参数，[`INET_NTOA()`](miscellaneous-functions.html#function_inet-ntoa)返回`NULL`。
- en: '[PRE19]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[`INET6_ATON(*`expr`*)`](miscellaneous-functions.html#function_inet6-aton)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INET6_ATON(*`expr`*)`](miscellaneous-functions.html#function_inet6-aton)'
- en: 'Given an IPv6 or IPv4 network address as a string, returns a binary string
    that represents the numeric value of the address in network byte order (big endian).
    Because numeric-format IPv6 addresses require more bytes than the largest integer
    type, the representation returned by this function has the [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") data type: [`VARBINARY(16)`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") for IPv6 addresses and [`VARBINARY(4)`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") for IPv4 addresses. If the argument is
    not a valid address, or if it is `NULL`, [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)
    returns `NULL`.'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定一个作为字符串的 IPv6 或 IPv4 网络地址，返回表示地址的数字值的二进制字符串，以网络字节顺序（大端）表示。因为数值格式的 IPv6 地址所需的字节数比最大整数类型还要多，所以此函数返回的表示具有[`VARBINARY`](binary-varbinary.html
    "13.3.3 BINARY 和 VARBINARY 类型")数据类型的表示：IPv6 地址为[`VARBINARY(16)`](binary-varbinary.html
    "13.3.3 BINARY 和 VARBINARY 类型")，IPv4 地址为[`VARBINARY(4)`](binary-varbinary.html
    "13.3.3 BINARY 和 VARBINARY 类型")。如果参数不是有效地址，或者为`NULL`，[`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)返回`NULL`。
- en: 'The following examples use [`HEX()`](string-functions.html#function_hex) to
    display the [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)
    result in printable form:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下示例使用[`HEX()`](string-functions.html#function_hex)以可打印形式显示[`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)的结果：
- en: '[PRE20]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`INET6_ATON()` observes several constraints on valid arguments. These are given
    in the following list along with examples.'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`INET6_ATON()`对有效参数施加了几个约束。以下列出这些约束以及示例。'
- en: A trailing zone ID is not permitted, as in `fe80::3%1` or `fe80::3%eth0`.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许使用尾随区域 ID，如`fe80::3%1`或`fe80::3%eth0`。
- en: A trailing network mask is not permitted, as in `2001:45f:3:ba::/64` or `198.51.100.0/24`.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许使用尾随网络掩码，如`2001:45f:3:ba::/64`或`198.51.100.0/24`。
- en: 'For values representing IPv4 addresses, only classless addresses are supported.
    Classful addresses such as `198.51.1` are rejected. A trailing port number is
    not permitted, as in `198.51.100.2:8080`. Hexadecimal numbers in address components
    are not permitted, as in `198.0xa0.1.2`. Octal numbers are not supported: `198.51.010.1`
    is treated as `198.51.10.1`, not `198.51.8.1`. These IPv4 constraints also apply
    to IPv6 addresses that have IPv4 address parts, such as IPv4-compatible or IPv4-mapped
    addresses.'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于表示 IPv4 地址的值，仅支持无类地址。类地址（如`198.51.1`）将被拒绝。不允许使用尾随端口号，如`198.51.100.2:8080`。地址组件中不允许使用十六进制数字，如`198.0xa0.1.2`。不支持八进制数字：`198.51.010.1`被视为`198.51.10.1`，而不是`198.51.8.1`。这些
    IPv4 约束也适用于具有 IPv4 地址部分的 IPv6 地址，如 IPv4 兼容或 IPv4 映射地址。
- en: 'To convert an IPv4 address *`expr`* represented in numeric form as an [`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") value to an IPv6 address represented in numeric form as a [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") value, use this expression:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将以[`INT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")值表示的IPv4地址*`expr`*转换为以[`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types")值表示的IPv6地址，使用以下表达式：
- en: '[PRE21]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For example:'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE22]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton) is invoked
    from within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端中调用[`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)，二进制字符串将使用十六进制表示，具体取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参见[第6.5.1节，“mysql
    — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`INET6_NTOA(*`expr`*)`](miscellaneous-functions.html#function_inet6-ntoa)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INET6_NTOA(*`expr`*)`](miscellaneous-functions.html#function_inet6-ntoa)'
- en: Given an IPv6 or IPv4 network address represented in numeric form as a binary
    string, returns the string representation of the address as a string in the connection
    character set. If the argument is not a valid address, or if it is `NULL`, [`INET6_NTOA()`](miscellaneous-functions.html#function_inet6-ntoa)
    returns `NULL`.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定以二进制字符串形式表示的IPv6或IPv4网络地址，将返回连接字符集中的地址字符串表示。如果参数不是有效地址，或者为`NULL`，[`INET6_NTOA()`](miscellaneous-functions.html#function_inet6-ntoa)将返回`NULL`。
- en: '[`INET6_NTOA()`](miscellaneous-functions.html#function_inet6-ntoa) has these
    properties:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`INET6_NTOA()`](miscellaneous-functions.html#function_inet6-ntoa)具有以下属性：'
- en: It does not use operating system functions to perform conversions, thus the
    output string is platform independent.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不使用操作系统函数执行转换，因此输出字符串是与平台无关的。
- en: 'The return string has a maximum length of 39 (4 x 8 + 7). Given this statement:'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回字符串的最大长度为39（4 x 8 + 7）。给出这个语句：
- en: '[PRE23]'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The resulting table would have this definition:'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果表将具有以下定义：
- en: '[PRE24]'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The return string uses lowercase letters for IPv6 addresses.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回字符串使用小写字母表示IPv6地址。
- en: '[PRE25]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If [`INET6_NTOA()`](miscellaneous-functions.html#function_inet6-ntoa) is invoked
    from within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端中调用[`INET6_NTOA()`](miscellaneous-functions.html#function_inet6-ntoa)，二进制字符串将使用十六进制表示，具体取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参见[第6.5.1节，“mysql
    — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`IS_IPV4(*`expr`*)`](miscellaneous-functions.html#function_is-ipv4)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IS_IPV4(*`expr`*)`](miscellaneous-functions.html#function_is-ipv4)'
- en: Returns 1 if the argument is a valid IPv4 address specified as a string, 0 otherwise.
    Returns `NULL` if *`expr`* is `NULL`.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果参数作为字符串指定的IPv4地址有效，则返回1，否则返回0。如果*`expr`*为`NULL`，则返回`NULL`。
- en: '[PRE26]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'For a given argument, if [`IS_IPV4()`](miscellaneous-functions.html#function_is-ipv4)
    returns 1, [`INET_ATON()`](miscellaneous-functions.html#function_inet-aton) (and
    [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)) returns non-`NULL`.
    The converse statement is not true: In some cases, [`INET_ATON()`](miscellaneous-functions.html#function_inet-aton)
    returns non-`NULL` when [`IS_IPV4()`](miscellaneous-functions.html#function_is-ipv4)
    returns 0.'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于给定的参数，如果[`IS_IPV4()`](miscellaneous-functions.html#function_is-ipv4)返回1，则[`INET_ATON()`](miscellaneous-functions.html#function_inet-aton)（以及[`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)）返回非`NULL`。反之则不成立：在某些情况下，当[`IS_IPV4()`](miscellaneous-functions.html#function_is-ipv4)返回0时，[`INET_ATON()`](miscellaneous-functions.html#function_inet-aton)返回非`NULL`。
- en: As implied by the preceding remarks, [`IS_IPV4()`](miscellaneous-functions.html#function_is-ipv4)
    is more strict than [`INET_ATON()`](miscellaneous-functions.html#function_inet-aton)
    about what constitutes a valid IPv4 address, so it may be useful for applications
    that need to perform strong checks against invalid values. Alternatively, use
    [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton) to convert
    IPv4 addresses to internal form and check for a `NULL` result (which indicates
    an invalid address). [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)
    is equally strong as [`IS_IPV4()`](miscellaneous-functions.html#function_is-ipv4)
    about checking IPv4 addresses.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前述所示，[`IS_IPV4()`](miscellaneous-functions.html#function_is-ipv4)对于何为有效的IPv4地址更为严格，因此对于需要对无效值进行强检查的应用程序可能很有用。或者，使用[`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)将IPv4地址转换为内部形式并检查`NULL`结果（表示无效地址）。[`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)在检查IPv4地址方面与[`IS_IPV4()`](miscellaneous-functions.html#function_is-ipv4)一样强大。
- en: '[`IS_IPV4_COMPAT(*`expr`*)`](miscellaneous-functions.html#function_is-ipv4-compat)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IS_IPV4_COMPAT(*`expr`*)`](miscellaneous-functions.html#function_is-ipv4-compat)'
- en: This function takes an IPv6 address represented in numeric form as a binary
    string, as returned by [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton).
    It returns 1 if the argument is a valid IPv4-compatible IPv6 address, 0 otherwise
    (unless *`expr`* is `NULL`, in which case the function returns `NULL`). IPv4-compatible
    addresses have the form `::*`ipv4_address`*`.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数接受以二进制字符串形式表示的数字形式的IPv6地址，如[`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)返回的。如果参数是有效的IPv4兼容IPv6地址，则返回1，否则返回0（除非*`expr`*为`NULL`，在这种情况下函数返回`NULL`）。IPv4兼容地址的形式为`::*`ipv4_address`*`。
- en: '[PRE27]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The IPv4 part of an IPv4-compatible address can also be represented using hexadecimal
    notation. For example, `198.51.100.1` has this raw hexadecimal value:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IPv4兼容地址的IPv4部分也可以使用十六进制表示。例如，`198.51.100.1`具有以下原始十六进制值：
- en: '[PRE28]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Expressed in IPv4-compatible form, `::198.51.100.1` is equivalent to `::c0a8:0001`
    or (without leading zeros) `::c0a8:1`
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以IPv4兼容形式表示，`::198.51.100.1`等同于`::c0a8:0001`或（去掉前导零）`::c0a8:1`
- en: '[PRE29]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[`IS_IPV4_MAPPED(*`expr`*)`](miscellaneous-functions.html#function_is-ipv4-mapped)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IS_IPV4_MAPPED(*`expr`*)`](miscellaneous-functions.html#function_is-ipv4-mapped)'
- en: This function takes an IPv6 address represented in numeric form as a binary
    string, as returned by [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton).
    It returns 1 if the argument is a valid IPv4-mapped IPv6 address, 0 otherwise,
    unless *`expr`* is `NULL`, in which case the function returns `NULL`. IPv4-mapped
    addresses have the form `::ffff:*`ipv4_address`*`.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数接受以二进制字符串形式表示的数字形式的IPv6地址，如[`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)返回的。如果参数是有效的IPv4映射IPv6地址，则返回1，否则返回0，除非*`expr`*为`NULL`，在这种情况下函数返回`NULL`。IPv4映射地址的形式为`::ffff:*`ipv4_address`*`。
- en: '[PRE30]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As with `IS_IPV4_COMPAT()` the IPv4 part of an IPv4-mapped address can also
    be represented using hexadecimal notation:'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与`IS_IPV4_COMPAT()`一样，IPv4映射地址的IPv4部分也可以使用十六进制表示：
- en: '[PRE31]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[`IS_IPV6(*`expr`*)`](miscellaneous-functions.html#function_is-ipv6)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IS_IPV6(*`expr`*)`](miscellaneous-functions.html#function_is-ipv6)'
- en: Returns 1 if the argument is a valid IPv6 address specified as a string, 0 otherwise,
    unless *`expr`* is `NULL`, in which case the function returns `NULL`. This function
    does not consider IPv4 addresses to be valid IPv6 addresses.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果参数是以字符串形式指定的有效IPv6地址，则返回1，否则返回0，除非*`expr`*为`NULL`，在这种情况下函数返回`NULL`。此函数不认为IPv4地址是有效的IPv6地址。
- en: '[PRE32]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: For a given argument, if [`IS_IPV6()`](miscellaneous-functions.html#function_is-ipv6)
    returns 1, [`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)
    returns non-`NULL`.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于给定的参数，如果[`IS_IPV6()`](miscellaneous-functions.html#function_is-ipv6)返回1，则[`INET6_ATON()`](miscellaneous-functions.html#function_inet6-aton)返回非`NULL`。
- en: '[`IS_UUID(*`string_uuid`*)`](miscellaneous-functions.html#function_is-uuid)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IS_UUID(*`string_uuid`*)`](miscellaneous-functions.html#function_is-uuid)'
- en: Returns 1 if the argument is a valid string-format UUID, 0 if the argument is
    not a valid UUID, and `NULL` if the argument is `NULL`.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果参数是有效的字符串格式UUID，则返回1，如果参数不是有效的UUID，则返回0，如果参数为`NULL`，则返回`NULL`。
- en: '“Valid” means that the value is in a format that can be parsed. That is, it
    has the correct length and contains only the permitted characters (hexadecimal
    digits in any lettercase and, optionally, dashes and curly braces). This format
    is most common:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “有效”意味着该值以可解析的格式存在。也就是说，它具有正确的长度并且仅包含允许的字符（十六进制数字以任何大小写字母形式，可选地包括短横线和大括号）。这种格式最常见：
- en: '[PRE33]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'These other formats are also permitted:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还允许这些其他格式：
- en: '[PRE34]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: For the meanings of fields within the value, see the [`UUID()`](miscellaneous-functions.html#function_uuid)
    function description.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关值内字段的含义，请参阅[`UUID()`](miscellaneous-functions.html#function_uuid)函数描述。
- en: '[PRE35]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[`NAME_CONST(*`name`*,*`value`*)`](miscellaneous-functions.html#function_name-const)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NAME_CONST(*`name`*,*`value`*)`](miscellaneous-functions.html#function_name-const)'
- en: Returns the given value. When used to produce a result set column, [`NAME_CONST()`](miscellaneous-functions.html#function_name-const)
    causes the column to have the given name. The arguments should be constants.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回给定的值。当用于生成结果集列时，[`NAME_CONST()`](miscellaneous-functions.html#function_name-const)使列具有给定的名称。参数应为常量。
- en: '[PRE36]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This function is for internal use only. The server uses it when writing statements
    from stored programs that contain references to local program variables, as described
    in [Section 27.7, “Stored Program Binary Logging”](stored-programs-logging.html
    "27.7 Stored Program Binary Logging"). You might see this function in the output
    from [**mysqlbinlog**](mysqlbinlog.html "6.6.9 mysqlbinlog — Utility for Processing
    Binary Log Files").
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数仅供内部使用。服务器在编写包含对本地程序变量的引用的存储程序语句时使用它，如[第27.7节“存储程序二进制日志记录”](stored-programs-logging.html
    "27.7 Stored Program Binary Logging")中所述。您可能会在[`mysqlbinlog**](mysqlbinlog.html
    "6.6.9 mysqlbinlog — Utility for Processing Binary Log Files")的输出中看到此函数。
- en: 'For your applications, you can obtain exactly the same result as in the example
    just shown by using simple aliasing, like this:'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于您的应用程序，您可以通过简单的别名来获得与刚刚显示的示例完全相同的结果，如下所示：
- en: '[PRE37]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: See [Section 15.2.13, “SELECT Statement”](select.html "15.2.13 SELECT Statement"),
    for more information about column aliases.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关列别名的更多信息，请参阅[第15.2.13节“SELECT语句”](select.html "15.2.13 SELECT Statement")。
- en: '[`SLEEP(*`duration`*)`](miscellaneous-functions.html#function_sleep)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SLEEP(*`duration`*)`](miscellaneous-functions.html#function_sleep)'
- en: Sleeps (pauses) for the number of seconds given by the *`duration`* argument,
    then returns 0. The duration may have a fractional part. If the argument is `NULL`
    or negative, [`SLEEP()`](miscellaneous-functions.html#function_sleep) produces
    a warning, or an error in strict SQL mode.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 休眠（暂停）由*`duration`*参数给定的秒数，然后返回0。持续时间可能有小数部分。如果参数为`NULL`或负数，[`SLEEP()`](miscellaneous-functions.html#function_sleep)会产生警告，在严格的SQL模式下会产生错误。
- en: 'When sleep returns normally (without interruption), it returns 0:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当休眠正常返回（没有中断）时，它返回0：
- en: '[PRE38]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'When [`SLEEP()`](miscellaneous-functions.html#function_sleep) is the only thing
    invoked by a query that is interrupted, it returns 1 and the query itself returns
    no error. This is true whether the query is killed or times out:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`SLEEP()`](miscellaneous-functions.html#function_sleep)是唯一被查询中断的事物时，它返回1，查询本身不返回错误。无论查询是被终止还是超时，这都是正确的：
- en: 'This statement is interrupted using [`KILL QUERY`](kill.html "15.7.8.4 KILL
    Statement") from another session:'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个语句是通过另一个会话中的[`KILL QUERY`](kill.html "15.7.8.4 KILL Statement")中断的：
- en: '[PRE39]'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This statement is interrupted by timing out:'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个语句由超时中断：
- en: '[PRE40]'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'When [`SLEEP()`](miscellaneous-functions.html#function_sleep) is only part
    of a query that is interrupted, the query returns an error:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`SLEEP()`](miscellaneous-functions.html#function_sleep)只是被中断查询的一部分时，查询会返回错误：
- en: 'This statement is interrupted using [`KILL QUERY`](kill.html "15.7.8.4 KILL
    Statement") from another session:'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个语句是通过另一个会话中的[`KILL QUERY`](kill.html "15.7.8.4 KILL Statement")中断的：
- en: '[PRE41]'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This statement is interrupted by timing out:'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个语句是通过超时中断的：
- en: '[PRE42]'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This function is unsafe for statement-based replication. A warning is logged
    if you use this function when [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    is set to `STATEMENT`.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数对基于语句的复制不安全。如果在[`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)设置为`STATEMENT`时使用此函数，将记录警告。
- en: '[`UUID()`](miscellaneous-functions.html#function_uuid)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UUID()`](miscellaneous-functions.html#function_uuid)'
- en: Returns a Universal Unique Identifier (UUID) generated according to RFC 4122,
    “A Universally Unique IDentifier (UUID) URN Namespace” ([http://www.ietf.org/rfc/rfc4122.txt](http://www.ietf.org/rfc/rfc4122.txt)).
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回根据RFC 4122“通用唯一标识符（UUID）URN命名空间”（[http://www.ietf.org/rfc/rfc4122.txt](http://www.ietf.org/rfc/rfc4122.txt)）生成的通用唯一标识符（UUID）。
- en: A UUID is designed as a number that is globally unique in space and time. Two
    calls to [`UUID()`](miscellaneous-functions.html#function_uuid) are expected to
    generate two different values, even if these calls are performed on two separate
    devices not connected to each other.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: UUID被设计为在空间和时间上全局唯一的数字。两次调用[`UUID()`](miscellaneous-functions.html#function_uuid)预期会生成两个不同的值，即使这些调用是在两个不相互连接的设备上执行的。
- en: Warning
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: Although [`UUID()`](miscellaneous-functions.html#function_uuid) values are intended
    to be unique, they are not necessarily unguessable or unpredictable. If unpredictability
    is required, UUID values should be generated some other way.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然[`UUID()`](miscellaneous-functions.html#function_uuid)值旨在是唯一的，但它们不一定是无法猜测或不可预测的。如果需要不可预测性，应以其他方式生成UUID值。
- en: '[`UUID()`](miscellaneous-functions.html#function_uuid) returns a value that
    conforms to UUID version 1 as described in RFC 4122\. The value is a 128-bit number
    represented as a `utf8mb3` string of five hexadecimal numbers in `aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee`
    format:'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`UUID()`](miscellaneous-functions.html#function_uuid)返回一个符合RFC 4122中描述的UUID版本1的值。该值是一个128位数字，表示为`utf8mb3`格式的五个十六进制数字，如`aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee`：'
- en: The first three numbers are generated from the low, middle, and high parts of
    a timestamp. The high part also includes the UUID version number.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前三个数字是从时间戳的低、中和高部分生成的。高部分还包括UUID版本号。
- en: The fourth number preserves temporal uniqueness in case the timestamp value
    loses monotonicity (for example, due to daylight saving time).
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四个数字在时间戳值失去单调性时保留时间上的唯一性（例如，由于夏令时）。
- en: The fifth number is an IEEE 802 node number that provides spatial uniqueness.
    A random number is substituted if the latter is not available (for example, because
    the host device has no Ethernet card, or it is unknown how to find the hardware
    address of an interface on the host operating system). In this case, spatial uniqueness
    cannot be guaranteed. Nevertheless, a collision should have *very* low probability.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第五个数字是提供空间唯一性的IEEE 802节点号。如果后者不可用（例如，因为主机设备没有以太网卡，或者不知道如何在主机操作系统上找到接口的硬件地址），则替换为随机数。在这种情况下，空间唯一性无法保证。尽管如此，碰撞应该具有*非常*低的概率。
- en: The MAC address of an interface is taken into account only on FreeBSD, Linux,
    and Windows. On other operating systems, MySQL uses a randomly generated 48-bit
    number.
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅在FreeBSD、Linux和Windows上考虑接口的MAC地址。在其他操作系统上，MySQL使用随机生成的48位数字。
- en: '[PRE43]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: To convert between string and binary UUID values, use the [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)
    and [`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid) functions.
    To check whether a string is a valid UUID value, use the [`IS_UUID()`](miscellaneous-functions.html#function_is-uuid)
    function.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在字符串和二进制UUID值之间转换，请使用[`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)和[`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid)函数。要检查字符串是否为有效的UUID值，请使用[`IS_UUID()`](miscellaneous-functions.html#function_is-uuid)函数。
- en: This function is unsafe for statement-based replication. A warning is logged
    if you use this function when [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    is set to `STATEMENT`.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数对基于语句的复制不安全。如果在[`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)设置为`STATEMENT`时使用此函数，将记录警告。
- en: '[`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short)'
- en: 'Returns a “short” universal identifier as a 64-bit unsigned integer. Values
    returned by [`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short)
    differ from the string-format 128-bit identifiers returned by the [`UUID()`](miscellaneous-functions.html#function_uuid)
    function and have different uniqueness properties. The value of [`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short)
    is guaranteed to be unique if the following conditions hold:'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回一个作为64位无符号整数的“短”通用标识符。[`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short)返回的值与[`UUID()`](miscellaneous-functions.html#function_uuid)函数返回的字符串格式的128位标识符不同，并具有不同的唯一性属性。如果满足以下条件，[`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short)的值将保证是唯一的：
- en: The [`server_id`](replication-options.html#sysvar_server_id) value of the current
    server is between 0 and 255 and is unique among your set of source and replica
    servers
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前服务器的[`server_id`](replication-options.html#sysvar_server_id)值介于0和255之间，并且在您的源服务器和副本服务器集合中是唯一的。
- en: You do not set back the system time for your server host between [**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server") restarts
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")重新启动之间，不要将系统时间设置回去
- en: You invoke [`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short)
    on average fewer than 16 million times per second between [**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server") restarts
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")重新启动之间，平均每秒调用[`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short)少于1600万次
- en: 'The [`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short) return
    value is constructed this way:'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short) 返回值构造如下：'
- en: '[PRE44]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '[`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short) does not
    work with statement-based replication.'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`UUID_SHORT()`](miscellaneous-functions.html#function_uuid-short) 不能与基于语句的复制一起使用。'
- en: '[`UUID_TO_BIN(*`string_uuid`*)`](miscellaneous-functions.html#function_uuid-to-bin),
    [`UUID_TO_BIN(*`string_uuid`*, *`swap_flag`*)`](miscellaneous-functions.html#function_uuid-to-bin)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UUID_TO_BIN(*`string_uuid`*)`](miscellaneous-functions.html#function_uuid-to-bin),
    [`UUID_TO_BIN(*`string_uuid`*, *`swap_flag`*)`](miscellaneous-functions.html#function_uuid-to-bin)'
- en: Converts a string UUID to a binary UUID and returns the result. (The [`IS_UUID()`](miscellaneous-functions.html#function_is-uuid)
    function description lists the permitted string UUID formats.) The return binary
    UUID is a [`VARBINARY(16)`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY
    Types") value. If the UUID argument is `NULL`, the return value is `NULL`. If
    any argument is invalid, an error occurs.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串 UUID 转换为二进制 UUID 并返回结果。（[`IS_UUID()`](miscellaneous-functions.html#function_is-uuid)函数描述列出了允许的字符串
    UUID 格式。）返回的二进制 UUID 是[`VARBINARY(16)`](binary-varbinary.html "13.3.3 The BINARY
    and VARBINARY Types")值。如果 UUID 参数为 `NULL`，则返回值为 `NULL`。如果任何参数无效，则会发生错误。
- en: '[`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin) takes
    one or two arguments:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin) 接受一个或两个参数：'
- en: The one-argument form takes a string UUID value. The binary result is in the
    same order as the string argument.
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单参数形式接受一个字符串 UUID 值。二进制结果与字符串参数的顺序相同。
- en: 'The two-argument form takes a string UUID value and a flag value:'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两参数形式接受一个字符串 UUID 值和一个标志值：
- en: If *`swap_flag`* is 0, the two-argument form is equivalent to the one-argument
    form. The binary result is in the same order as the string argument.
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *`swap_flag`* 为 0，则两参数形式等同于单参数形式。二进制结果与字符串参数的顺序相同。
- en: 'If *`swap_flag`* is 1, the format of the return value differs: The time-low
    and time-high parts (the first and third groups of hexadecimal digits, respectively)
    are swapped. This moves the more rapidly varying part to the right and can improve
    indexing efficiency if the result is stored in an indexed column.'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *`swap_flag`* 为 1，则返回值的格式不同：时间低位和时间高位部分（分别为第一组和第三组十六进制数字）被交换。这将更快变化的部分移到右侧，并且如果结果存储在索引列中，可以提高索引效率。
- en: Time-part swapping assumes the use of UUID version 1 values, such as are generated
    by the [`UUID()`](miscellaneous-functions.html#function_uuid) function. For UUID
    values produced by other means that do not follow version 1 format, time-part
    swapping provides no benefit. For details about version 1 format, see the [`UUID()`](miscellaneous-functions.html#function_uuid)
    function description.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 时间部分交换假定使用 UUID 版本 1 值，例如由[`UUID()`](miscellaneous-functions.html#function_uuid)函数生成的值。对于不遵循版本
    1 格式的其他方式生成的 UUID 值，时间部分交换不提供任何好处。有关版本 1 格式的详细信息，请参阅[`UUID()`](miscellaneous-functions.html#function_uuid)函数描述。
- en: 'Suppose that you have the following string UUID value:'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设您有以下字符串 UUID 值：
- en: '[PRE46]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To convert the string UUID to binary with or without time-part swapping, use
    [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin):'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将字符串 UUID 转换为带有或不带有时间部分交换的二进制，请使用[`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)：
- en: '[PRE47]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'To convert a binary UUID returned by [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)
    to a string UUID, use [`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid).
    If you produce a binary UUID by calling [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)
    with a second argument of 1 to swap time parts, you should also pass a second
    argument of 1 to [`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid)
    to unswap the time parts when converting the binary UUID back to a string UUID:'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要将[`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)返回的二进制
    UUID 转换为字符串 UUID，请使用[`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid)。如果通过将第二个参数设置为
    1 调用[`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)生成二进制
    UUID，则在将二进制 UUID 转换回字符串 UUID 时，还应将第二个参数设置为 1 传递给[`BIN_TO_UUID()`](miscellaneous-functions.html#function_bin-to-uuid)以取消时间部分的交换：
- en: '[PRE48]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If the use of time-part swapping is not the same for the conversion in both
    directions, the original UUID is not recovered properly:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在两个方向的转换中使用时间部分交换不同，则无法正确恢复原始 UUID：
- en: '[PRE49]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: If [`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin) is invoked
    from within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端中调用[`UUID_TO_BIN()`](miscellaneous-functions.html#function_uuid-to-bin)，二进制字符串将根据[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值以十六进制表示。有关该选项的更多信息，请参阅[Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`VALUES(*`col_name`*)`](miscellaneous-functions.html#function_values)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`VALUES(*`col_name`*)`](miscellaneous-functions.html#function_values)'
- en: In an [`INSERT ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT
    ... ON DUPLICATE KEY UPDATE Statement") statement, you can use the `VALUES(*`col_name`*)`
    function in the [`UPDATE`](update.html "15.2.17 UPDATE Statement") clause to refer
    to column values from the [`INSERT`](insert.html "15.2.7 INSERT Statement") portion
    of the statement. In other words, `VALUES(*`col_name`*)` in the [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") clause refers to the value of *`col_name`* that would
    be inserted, had no duplicate-key conflict occurred. This function is especially
    useful in multiple-row inserts. The [`VALUES()`](miscellaneous-functions.html#function_values)
    function is meaningful only in the `ON DUPLICATE KEY UPDATE` clause of [`INSERT`](insert.html
    "15.2.7 INSERT Statement") statements and returns `NULL` otherwise. See [Section 15.2.7.2,
    “INSERT ... ON DUPLICATE KEY UPDATE Statement”](insert-on-duplicate.html "15.2.7.2 INSERT
    ... ON DUPLICATE KEY UPDATE Statement").
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`INSERT ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT
    ... ON DUPLICATE KEY UPDATE Statement")语句中，您可以在[`UPDATE`](update.html "15.2.17 UPDATE
    Statement")子句中使用`VALUES(*`col_name`*)`函数来引用语句的[`INSERT`](insert.html "15.2.7 INSERT
    Statement")部分的列值。换句话说，在[`UPDATE`](update.html "15.2.17 UPDATE Statement")子句中的`VALUES(*`col_name`*)`指的是如果没有发生重复键冲突，将要插入的*`col_name`*的值。这个函数在多行插入中特别有用。[`VALUES()`](miscellaneous-functions.html#function_values)函数只在[`INSERT`](insert.html
    "15.2.7 INSERT Statement")语句的`ON DUPLICATE KEY UPDATE`子句中有意义，否则返回`NULL`。详见[Section 15.2.7.2,
    “INSERT ... ON DUPLICATE KEY UPDATE Statement”](insert-on-duplicate.html "15.2.7.2 INSERT
    ... ON DUPLICATE KEY UPDATE Statement")。
- en: '[PRE50]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Important
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: This usage is deprecated in MySQL 8.0.20, and is subject to removal in a future
    release of MySQL. Use a row alias, or row and column aliases, instead. See [Section 15.2.7.2,
    “INSERT ... ON DUPLICATE KEY UPDATE Statement”](insert-on-duplicate.html "15.2.7.2 INSERT
    ... ON DUPLICATE KEY UPDATE Statement"), for more information and examples.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.20中，此用法已被弃用，并可能在将来的MySQL版本中被移除。请改用行别名或行和列别名。有关更多信息和示例，请参见[Section 15.2.7.2,
    “INSERT ... ON DUPLICATE KEY UPDATE Statement”](insert-on-duplicate.html "15.2.7.2 INSERT
    ... ON DUPLICATE KEY UPDATE Statement")。
