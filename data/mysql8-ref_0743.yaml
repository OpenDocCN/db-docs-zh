- en: 13.2.2 The DATE, DATETIME, and TIMESTAMP Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.2.2 日期、日期时间和时间戳类型
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/datetime.html](https://dev.mysql.com/doc/refman/8.0/en/datetime.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/datetime.html](https://dev.mysql.com/doc/refman/8.0/en/datetime.html)
- en: The `DATE`, `DATETIME`, and `TIMESTAMP` types are related. This section describes
    their characteristics, how they are similar, and how they differ. MySQL recognizes
    `DATE`, `DATETIME`, and `TIMESTAMP` values in several formats, described in [Section 11.1.3,
    “Date and Time Literals”](date-and-time-literals.html "11.1.3 Date and Time Literals").
    For the `DATE` and `DATETIME` range descriptions, “supported” means that although
    earlier values might work, there is no guarantee.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`DATE`、`DATETIME`和`TIMESTAMP`类型是相关的。本节描述它们的特征，它们的相似之处以及它们的区别。MySQL以几种格式识别`DATE`、`DATETIME`和`TIMESTAMP`值，描述在[第11.1.3节，“日期和时间文字”](date-and-time-literals.html
    "11.1.3 日期和时间文字")中。对于`DATE`和`DATETIME`范围描述，“支持”表示尽管较早的值可能有效，但不能保证。'
- en: The `DATE` type is used for values with a date part but no time part. MySQL
    retrieves and displays `DATE` values in `'*`YYYY-MM-DD`*'` format. The supported
    range is `'1000-01-01'` to `'9999-12-31'`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`DATE`类型用于具有日期部分但没有时间部分的值。MySQL以`''*`YYYY-MM-DD`*''`格式检索和显示`DATE`值。支持的范围是`''1000-01-01''`到`''9999-12-31''`。'
- en: The `DATETIME` type is used for values that contain both date and time parts.
    MySQL retrieves and displays `DATETIME` values in `'*`YYYY-MM-DD hh:mm:ss`*'`
    format. The supported range is `'1000-01-01 00:00:00'` to `'9999-12-31 23:59:59'`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`DATETIME`类型用于包含日期和时间部分的值。MySQL以`''*`YYYY-MM-DD hh:mm:ss`*''`格式检索和显示`DATETIME`值。支持的范围是`''1000-01-01
    00:00:00''`到`''9999-12-31 23:59:59''`。'
- en: The `TIMESTAMP` data type is used for values that contain both date and time
    parts. `TIMESTAMP` has a range of `'1970-01-01 00:00:01'` UTC to `'2038-01-19
    03:14:07'` UTC.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`TIMESTAMP`数据类型用于包含日期和时间部分的值。`TIMESTAMP`的范围是`''1970-01-01 00:00:01''` UTC到`''2038-01-19
    03:14:07''` UTC。'
- en: A `DATETIME` or `TIMESTAMP` value can include a trailing fractional seconds
    part in up to microseconds (6 digits) precision. In particular, any fractional
    part in a value inserted into a `DATETIME` or `TIMESTAMP` column is stored rather
    than discarded. With the fractional part included, the format for these values
    is `'*`YYYY-MM-DD hh:mm:ss`*[.*`fraction`*]'`, the range for `DATETIME` values
    is `'1000-01-01 00:00:00.000000'` to `'9999-12-31 23:59:59.499999'`, and the range
    for `TIMESTAMP` values is `'1970-01-01 00:00:01.000000'` to `'2038-01-19 03:14:07.499999'`.
    The fractional part should always be separated from the rest of the time by a
    decimal point; no other fractional seconds delimiter is recognized. For information
    about fractional seconds support in MySQL, see [Section 13.2.6, “Fractional Seconds
    in Time Values”](fractional-seconds.html "13.2.6 Fractional Seconds in Time Values").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`DATETIME`或`TIMESTAMP`值可以包含高达微秒（6位数字）精度的尾随小数秒部分。特别是，插入到`DATETIME`或`TIMESTAMP`列中的值中的任何小数部分都会被存储而不是丢弃。包含小数部分时，这些值的格式为`''*`YYYY-MM-DD
    hh:mm:ss`*[.*`fraction`*]''`，`DATETIME`值的范围是`''1000-01-01 00:00:00.000000''`到`''9999-12-31
    23:59:59.499999''`，`TIMESTAMP`值的范围是`''1970-01-01 00:00:01.000000''`到`''2038-01-19
    03:14:07.499999''`。小数部分应始终用小数点与时间的其余部分分隔；不识别其他小数秒分隔符。有关MySQL中对小数秒的支持的信息，请参见[第13.2.6节，“时间值中的小数秒”](fractional-seconds.html
    "13.2.6 时间值中的小数秒")。'
- en: The `TIMESTAMP` and `DATETIME` data types offer automatic initialization and
    updating to the current date and time. For more information, see [Section 13.2.5,
    “Automatic Initialization and Updating for TIMESTAMP and DATETIME”](timestamp-initialization.html
    "13.2.5 Automatic Initialization and Updating for TIMESTAMP and DATETIME").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`TIMESTAMP`和`DATETIME`数据类型提供自动初始化和更新到当前日期和时间。有关更多信息，请参见[第13.2.5节，“时间戳和日期时间的自动初始化和更新”](timestamp-initialization.html
    "13.2.5 时间戳和日期时间的自动初始化和更新")。'
- en: MySQL converts `TIMESTAMP` values from the current time zone to UTC for storage,
    and back from UTC to the current time zone for retrieval. (This does not occur
    for other types such as `DATETIME`.) By default, the current time zone for each
    connection is the server's time. The time zone can be set on a per-connection
    basis. As long as the time zone setting remains constant, you get back the same
    value you store. If you store a `TIMESTAMP` value, and then change the time zone
    and retrieve the value, the retrieved value is different from the value you stored.
    This occurs because the same time zone was not used for conversion in both directions.
    The current time zone is available as the value of the [`time_zone`](server-system-variables.html#sysvar_time_zone)
    system variable. For more information, see [Section 7.1.15, “MySQL Server Time
    Zone Support”](time-zone-support.html "7.1.15 MySQL Server Time Zone Support").
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL将`TIMESTAMP`值从当前时区转换为UTC进行存储，然后从UTC转换回当前时区进行检索。（对于`DATETIME`等其他类型，不会发生这种情况。）默认情况下，每个连接的当前时区是服务器的时区。时区可以根据每个连接设置。只要时区设置保持不变，您将获得与存储的相同值。如果存储了`TIMESTAMP`值，然后更改时区并检索该值，则检索到的值与存储的值不同。这是因为在两个方向的转换中没有使用相同的时区。当前时区可作为[`time_zone`](server-system-variables.html#sysvar_time_zone)系统变量的值获得。有关更多信息，请参阅[第 7.1.15
    节，“MySQL 服务器时区支持”](time-zone-support.html "7.1.15 MySQL 服务器时区支持")。
- en: In MySQL 8.0.19 and later, you can specify a time zone offset when inserting
    a `TIMESTAMP` or `DATETIME` value into a table. See [Section 11.1.3, “Date and
    Time Literals”](date-and-time-literals.html "11.1.3 Date and Time Literals"),
    for more information and examples.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.19 及更高版本中，您可以在将`TIMESTAMP`或`DATETIME`值插入表时指定时区偏移量。有关更多信息和示例，请参阅[第 11.1.3
    节，“日期和时间文字”](date-and-time-literals.html "11.1.3 日期和时间文字")。
- en: Invalid `DATE`, `DATETIME`, or `TIMESTAMP` values are converted to the “zero”
    value of the appropriate type (`'0000-00-00'` or `'0000-00-00 00:00:00'`), if
    the SQL mode permits this conversion. The precise behavior depends on which if
    any of strict SQL mode and the [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)
    SQL mode are enabled; see [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server
    SQL Modes").
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 SQL 模式允许此转换，则无效的`DATE`、`DATETIME`或`TIMESTAMP`值将被转换为相应类型的“零”值(`'0000-00-00'`或`'0000-00-00
    00:00:00'`)。具体行为取决于是否启用了严格 SQL 模式和[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)
    SQL 模式中的哪一个；请参阅[第 7.1.11 节，“服务器 SQL 模式”](sql-mode.html "7.1.11 服务器 SQL 模式")。
- en: 'In MySQL 8.0.22 and later, you can convert `TIMESTAMP` values to UTC `DATETIME`
    values when retrieving them using [`CAST()`](cast-functions.html#function_cast)
    with the `AT TIME ZONE` operator, as shown here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.22 及更高版本中，您可以使用带有`AT TIME ZONE`运算符的[`CAST()`](cast-functions.html#function_cast)将`TIMESTAMP`值转换为UTC`DATETIME`值，如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For complete information regarding syntax and additional examples, see the description
    of the [`CAST()`](cast-functions.html#function_cast) function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关语法和其他示例的完整信息，请参阅[`CAST()`](cast-functions.html#function_cast)函数的描述。
- en: 'Be aware of certain properties of date value interpretation in MySQL:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要注意 MySQL 中日期值解释的某些属性：
- en: MySQL permits a “relaxed” format for values specified as strings, in which any
    punctuation character may be used as the delimiter between date parts or time
    parts. In some cases, this syntax can be deceiving. For example, a value such
    as `'10:11:12'` might look like a time value because of the `:`, but is interpreted
    as the year `'2010-11-12'` if used in date context. The value `'10:45:15'` is
    converted to `'0000-00-00'` because `'45'` is not a valid month.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL允许以字符串形式指定的值采用“宽松”格式，在这种格式中，任何标点符号都可以用作日期部分或时间部分之间的分隔符。在某些情况下，这种语法可能会产生误导。例如，像`'10:11:12'`这样的值可能看起来像一个时间值，因为有`:`，但如果在日期上下文中使用，则会被解释为年份`'2010-11-12'`。值`'10:45:15'`会被转换为`'0000-00-00'`，因为`'45'`不是一个有效的月份。
- en: The only delimiter recognized between a date and time part and a fractional
    seconds part is the decimal point.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在日期和时间部分与小数秒部分之间唯一识别的分隔符是小数点。
- en: The server requires that month and day values be valid, and not merely in the
    range 1 to 12 and 1 to 31, respectively. With strict mode disabled, invalid dates
    such as `'2004-04-31'` are converted to `'0000-00-00'` and a warning is generated.
    With strict mode enabled, invalid dates generate an error. To permit such dates,
    enable [`ALLOW_INVALID_DATES`](sql-mode.html#sqlmode_allow_invalid_dates). See
    [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server SQL Modes"),
    for more information.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器要求月份和日期值有效，而不仅仅是在1到12和1到31的范围内。在禁用严格模式的情况下，无效日期如`'2004-04-31'`会被转换为`'0000-00-00'`并生成警告。启用严格模式时，无效日期会生成错误。要允许这样的日期，启用[`ALLOW_INVALID_DATES`](sql-mode.html#sqlmode_allow_invalid_dates)。更多信息请参见[Section 7.1.11,
    “Server SQL Modes”](sql-mode.html "7.1.11 Server SQL Modes")。
- en: MySQL does not accept `TIMESTAMP` values that include a zero in the day or month
    column or values that are not a valid date. The sole exception to this rule is
    the special “zero” value `'0000-00-00 00:00:00'`, if the SQL mode permits this
    value. The precise behavior depends on which if any of strict SQL mode and the
    [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date) SQL mode are enabled; see
    [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server SQL Modes").
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL不接受在日期或月份列中包含零或不是有效日期的`TIMESTAMP`值。唯一的例外是特殊的“零”值`'0000-00-00 00:00:00'`，如果SQL模式允许这个值。具体行为取决于是否启用了严格SQL模式和[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)
    SQL模式中的哪一个；参见[Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server
    SQL Modes")。
- en: 'Dates containing 2-digit year values are ambiguous because the century is unknown.
    MySQL interprets 2-digit year values using these rules:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含2位数年份值的日期是模棱两可的，因为世纪未知。MySQL使用以下规则解释2位数年份值：
- en: Year values in the range `00-69` become `2000-2069`.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围在`00-69`的年份值变为`2000-2069`。
- en: Year values in the range `70-99` become `1970-1999`.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围在`70-99`的年份值变为`1970-1999`。
- en: See also [Section 13.2.9, “2-Digit Years in Dates”](two-digit-years.html "13.2.9 2-Digit
    Years in Dates").
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见[Section 13.2.9, “2-Digit Years in Dates”](two-digit-years.html "13.2.9 2-Digit
    Years in Dates")。
