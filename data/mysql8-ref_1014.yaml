- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/local-variable-scope.html](https://dev.mysql.com/doc/refman/8.0/en/local-variable-scope.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/local-variable-scope.html](https://dev.mysql.com/doc/refman/8.0/en/local-variable-scope.html)
- en: 15.6.4.2 Local Variable Scope and Resolution
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.6.4.2 本地变量作用域和解析
- en: The scope of a local variable is the [`BEGIN ... END`](begin-end.html "15.6.1 BEGIN
    ... END Compound Statement") block within which it is declared. The variable can
    be referred to in blocks nested within the declaring block, except those blocks
    that declare a variable with the same name.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本地变量的作用域是其声明的 [`BEGIN ... END`](begin-end.html "15.6.1 BEGIN ... END Compound
    Statement") 块。该变量可以在声明块内嵌套的块中引用，除了那些声明具有相同名称变量的块。
- en: Because local variables are in scope only during stored program execution, references
    to them are not permitted in prepared statements created within a stored program.
    Prepared statement scope is the current session, not the stored program, so the
    statement could be executed after the program ends, at which point the variables
    would no longer be in scope. For example, `SELECT ... INTO *`local_var`*` cannot
    be used as a prepared statement. This restriction also applies to stored procedure
    and function parameters. See [Section 15.5.1, “PREPARE Statement”](prepare.html
    "15.5.1 PREPARE Statement").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因为本地变量仅在存储过程执行期间处于作用域内，所以不允许在存储过程内创建的准备语句中引用它们。准备语句的作用域是当前会话，而不是存储过程，因此该语句可能在程序结束后执行，此时变量将不再处于作用域内。例如，`SELECT
    ... INTO *`local_var`*` 不能作为准备语句使用。此限制也适用于存储过程和函数参数。参见 [Section 15.5.1, “PREPARE
    Statement”](prepare.html "15.5.1 PREPARE Statement")。
- en: 'A local variable should not have the same name as a table column. If an SQL
    statement, such as a [`SELECT ... INTO`](select.html "15.2.13 SELECT Statement")
    statement, contains a reference to a column and a declared local variable with
    the same name, MySQL currently interprets the reference as the name of a variable.
    Consider the following procedure definition:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本地变量不应与表列具有相同的名称。如果 SQL 语句（例如 [`SELECT ... INTO`](select.html "15.2.13 SELECT
    Statement") 语句）包含对具有相同名称的列和声明的本地变量的引用，MySQL 目前将该引用解释为变量的名称。考虑以下过程定义：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: MySQL interprets `xname` in the [`SELECT`](select.html "15.2.13 SELECT Statement")
    statement as a reference to the `xname` *variable* rather than the `xname` *column*.
    Consequently, when the procedure `sp1()`is called, the `newname` variable returns
    the value `'bob'` regardless of the value of the `table1.xname` column.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 在 [`SELECT`](select.html "15.2.13 SELECT Statement") 语句中将 `xname` 解释为
    `xname` *变量*的引用，而不是 `xname` *列*的引用。因此，当调用过程 `sp1()` 时，`newname` 变量返回值 `'bob'`，而不管
    `table1.xname` 列的值如何。
- en: Similarly, the cursor definition in the following procedure contains a [`SELECT`](select.html
    "15.2.13 SELECT Statement") statement that refers to `xname`. MySQL interprets
    this as a reference to the variable of that name rather than a column reference.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，以下过程中的游标定义包含一个引用 `xname` 的 [`SELECT`](select.html "15.2.13 SELECT Statement")
    语句。MySQL 将其解释为对该名称变量的引用，而不是列的引用。
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: See also [Section 27.8, “Restrictions on Stored Programs”](stored-program-restrictions.html
    "27.8 Restrictions on Stored Programs").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见 [Section 27.8, “Restrictions on Stored Programs”](stored-program-restrictions.html
    "27.8 Restrictions on Stored Programs")。
