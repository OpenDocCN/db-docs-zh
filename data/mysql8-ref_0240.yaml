- en: 7.1.11 Server SQL Modes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.1.11 服务器SQL模式
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html)
- en: The MySQL server can operate in different SQL modes, and can apply these modes
    differently for different clients, depending on the value of the [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    system variable. DBAs can set the global SQL mode to match site server operating
    requirements, and each application can set its session SQL mode to its own requirements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器可以在不同的SQL模式下运行，并且可以根据[`sql_mode`](server-system-variables.html#sysvar_sql_mode)系统变量的值为不同的客户端应用这些模式。数据库管理员可以设置全局SQL模式以匹配站点服务器的操作需求，每个应用程序可以将其会话SQL模式设置为自己的需求。
- en: Modes affect the SQL syntax MySQL supports and the data validation checks it
    performs. This makes it easier to use MySQL in different environments and to use
    MySQL together with other database servers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模式影响MySQL支持的SQL语法和执行的数据验证检查。这使得在不同环境中使用MySQL以及与其他数据库服务器一起使用MySQL变得更加容易。
- en: '[Setting the SQL Mode](sql-mode.html#sql-mode-setting "Setting the SQL Mode")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[设置SQL模式](sql-mode.html#sql-mode-setting "设置SQL模式")'
- en: '[The Most Important SQL Modes](sql-mode.html#sql-mode-important "The Most Important
    SQL Modes")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[最重要的SQL模式](sql-mode.html#sql-mode-important "最重要的SQL模式")'
- en: '[Full List of SQL Modes](sql-mode.html#sql-mode-full "Full List of SQL Modes")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL模式的完整列表](sql-mode.html#sql-mode-full "SQL模式的完整列表")'
- en: '[Combination SQL Modes](sql-mode.html#sql-mode-combo "Combination SQL Modes")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[组合SQL模式](sql-mode.html#sql-mode-combo "组合SQL模式")'
- en: '[Strict SQL Mode](sql-mode.html#sql-mode-strict "Strict SQL Mode")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[严格SQL模式](sql-mode.html#sql-mode-strict "严格SQL模式")'
- en: '[Comparison of the IGNORE Keyword and Strict SQL Mode](sql-mode.html#ignore-strict-comparison
    "Comparison of the IGNORE Keyword and Strict SQL Mode")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[IGNORE关键字和严格SQL模式的比较](sql-mode.html#ignore-strict-comparison "IGNORE关键字和严格SQL模式的比较")'
- en: 'For answers to questions often asked about server SQL modes in MySQL, see [Section A.3,
    “MySQL 8.0 FAQ: Server SQL Mode”](faqs-sql-modes.html "A.3 MySQL 8.0 FAQ: Server
    SQL Mode").'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '有关MySQL中服务器SQL模式经常被问到的问题的答案，请参阅[Section A.3, “MySQL 8.0 FAQ: Server SQL Mode”](faqs-sql-modes.html
    "A.3 MySQL 8.0 FAQ: Server SQL Mode")。'
- en: When working with `InnoDB` tables, consider also the [`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)
    system variable. It enables additional error checks for `InnoDB` tables.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`InnoDB`表时，还要考虑[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)系统变量。它为`InnoDB`表启用额外的错误检查。
- en: Setting the SQL Mode
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置SQL模式
- en: 'The default SQL mode in MySQL 8.0 includes these modes: [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by),
    [`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables), [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date),
    [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date), [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero),
    and [`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 8.0中的默认SQL模式包括这些模式：[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by),
    [`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables), [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date),
    [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date), [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero),
    和 [`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)。
- en: To set the SQL mode at server startup, use the [`--sql-mode="*`modes`*"`](server-options.html#option_mysqld_sql-mode)
    option on the command line, or [`sql-mode="*`modes`*"`](server-options.html#option_mysqld_sql-mode)
    in an option file such as `my.cnf` (Unix operating systems) or `my.ini` (Windows).
    *`modes`* is a list of different modes separated by commas. To clear the SQL mode
    explicitly, set it to an empty string using [`--sql-mode=""`](server-options.html#option_mysqld_sql-mode)
    on the command line, or [`sql-mode=""`](server-options.html#option_mysqld_sql-mode)
    in an option file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要在服务器启动时设置SQL模式，请在命令行上使用[`--sql-mode="*`modes`*"`](server-options.html#option_mysqld_sql-mode)选项，或在选项文件（如`my.cnf`（Unix操作系统）或`my.ini`（Windows））中使用[`sql-mode="*`modes`*"`](server-options.html#option_mysqld_sql-mode)。*`modes`*是由逗号分隔的不同模式列表。要明确清除SQL模式，请使用[`--sql-mode=""`](server-options.html#option_mysqld_sql-mode)在命令行上设置为空字符串，或在选项文件中使用[`sql-mode=""`](server-options.html#option_mysqld_sql-mode)。
- en: Note
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: MySQL installation programs may configure the SQL mode during the installation
    process.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL安装程序可能在安装过程中配置SQL模式。
- en: If the SQL mode differs from the default or from what you expect, check for
    a setting in an option file that the server reads at startup.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果SQL模式与默认值或您期望的值不同，请检查服务器在启动时读取的选项文件中的设置。
- en: 'To change the SQL mode at runtime, set the global or session [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    system variable using a [`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable
    Assignment") statement:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要在运行时更改SQL模式，请使用[`SET`](set-variable.html "15.7.6.1 变量赋值的SET语法")语句设置全局或会话[`sql_mode`](server-system-variables.html#sysvar_sql_mode)系统变量：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Setting the `GLOBAL` variable requires the [`SYSTEM_VARIABLES_ADMIN`](privileges-provided.html#priv_system-variables-admin)
    privilege (or the deprecated [`SUPER`](privileges-provided.html#priv_super) privilege)
    and affects the operation of all clients that connect from that time on. Setting
    the `SESSION` variable affects only the current client. Each client can change
    its session [`sql_mode`](server-system-variables.html#sysvar_sql_mode) value at
    any time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`GLOBAL`变量需要[`SYSTEM_VARIABLES_ADMIN`](privileges-provided.html#priv_system-variables-admin)权限（或已弃用的[`SUPER`](privileges-provided.html#priv_super)权限），并影响从那时起连接的所有客户端的操作。设置`SESSION`变量仅影响当前客户端。每个客户端可以随时更改其会话[`sql_mode`](server-system-variables.html#sysvar_sql_mode)值。
- en: 'To determine the current global or session [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    setting, select its value:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定当前的全局或会话[`sql_mode`](server-system-variables.html#sysvar_sql_mode)设置，请选择其值：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Important
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: '**SQL mode and user-defined partitioning. ** Changing the server SQL mode after
    creating and inserting data into partitioned tables can cause major changes in
    the behavior of such tables, and could lead to loss or corruption of data. It
    is strongly recommended that you never change the SQL mode once you have created
    tables employing user-defined partitioning.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL模式和用户定义的分区。** 在创建并向分区表中插入数据后更改服务器SQL模式可能会导致这些表行为发生重大变化，并可能导致数据丢失或损坏。强烈建议您在创建使用用户定义分区的表后永远不要更改SQL模式。'
- en: When replicating partitioned tables, differing SQL modes on the source and replica
    can also lead to problems. For best results, you should always use the same server
    SQL mode on the source and replica.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制分区表时，源和副本上的不同SQL模式也可能导致问题。为获得最佳结果，您应始终在源和副本上使用相同的服务器SQL模式。
- en: For more information, see [Section 26.6, “Restrictions and Limitations on Partitioning”](partitioning-limitations.html
    "26.6 Restrictions and Limitations on Partitioning").
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[第26.6节，“分区的限制和限制”](partitioning-limitations.html "26.6 分区的限制和限制")。
- en: The Most Important SQL Modes
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 最重要的SQL模式
- en: 'The most important [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    values are probably these:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的[`sql_mode`](server-system-variables.html#sysvar_sql_mode)值可能是这些：
- en: '[`ANSI`](sql-mode.html#sqlmode_ansi)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ANSI`](sql-mode.html#sqlmode_ansi)'
- en: This mode changes syntax and behavior to conform more closely to standard SQL.
    It is one of the special [combination modes](sql-mode.html#sql-mode-combo "Combination
    SQL Modes") listed at the end of this section.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此模式改变了语法和行为，使其更符合标准SQL。这是本节末尾列出的特殊[组合模式](sql-mode.html#sql-mode-combo "组合SQL模式")之一。
- en: '[`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables)'
- en: If a value could not be inserted as given into a transactional table, abort
    the statement. For a nontransactional table, abort the statement if the value
    occurs in a single-row statement or the first row of a multiple-row statement.
    More details are given later in this section.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果无法将给定值插入事务表中，则中止该语句。对于非事务表，在单行语句中发生该值或多行语句的第一行中发生该值时，中止该语句。本节后面将详细介绍更多细节。
- en: '[`TRADITIONAL`](sql-mode.html#sqlmode_traditional)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TRADITIONAL`](sql-mode.html#sqlmode_traditional)'
- en: Make MySQL behave like a “traditional” SQL database system. A simple description
    of this mode is “give an error instead of a warning” when inserting an incorrect
    value into a column. It is one of the special [combination modes](sql-mode.html#sql-mode-combo
    "Combination SQL Modes") listed at the end of this section.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使MySQL表现得像一个“传统”的SQL数据库系统。简单描述这种模式是在向列插入不正确的值时“给出错误而不是警告”。这是本节末尾列出的特殊[组合模式](sql-mode.html#sql-mode-combo
    "组合SQL模式")之一。
- en: Note
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: With [`TRADITIONAL`](sql-mode.html#sqlmode_traditional) mode enabled, an [`INSERT`](insert.html
    "15.2.7 INSERT Statement") or [`UPDATE`](update.html "15.2.17 UPDATE Statement")
    aborts as soon as an error occurs. If you are using a nontransactional storage
    engine, this may not be what you want because data changes made prior to the error
    may not be rolled back, resulting in a “partially done” update.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用[`TRADITIONAL`](sql-mode.html#sqlmode_traditional)模式后，[`INSERT`](insert.html
    "15.2.7 插入语句")或[`UPDATE`](update.html "15.2.17 更新语句")在出现错误时会立即中止。如果使用非事务性存储引擎，则可能不是您想要的，因为错误之前所做的数据更改可能不会被回滚，导致“部分完成”更新。
- en: When this manual refers to “strict mode,” it means a mode with either or both
    [`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables) or [`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables)
    enabled.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当本手册提到“严格模式”时，指的是启用了[`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables)或[`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables)中的一个或两个模式。
- en: Full List of SQL Modes
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SQL模式的完整列表
- en: 'The following list describes all supported SQL modes:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了所有支持的SQL模式：
- en: '[`ALLOW_INVALID_DATES`](sql-mode.html#sqlmode_allow_invalid_dates)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ALLOW_INVALID_DATES`](sql-mode.html#sqlmode_allow_invalid_dates)'
- en: Do not perform full checking of dates. Check only that the month is in the range
    from 1 to 12 and the day is in the range from 1 to 31\. This may be useful for
    Web applications that obtain year, month, and day in three different fields and
    store exactly what the user inserted, without date validation. This mode applies
    to [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") and
    [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") columns.
    It does not apply to [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and
    TIMESTAMP Types") columns, which always require a valid date.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要对日期进行完整检查。只需检查月份在1到12的范围内，日期在1到31的范围内即可。这对于在Web应用程序中获取年、月和日分别存储用户插入的数据而不进行日期验证的情况可能很有用。此模式适用于[`DATE`](datetime.html
    "13.2.2 日期、时间和时间戳类型")和[`DATETIME`](datetime.html "13.2.2 日期、时间和时间戳类型")列。不适用于总是需要有效日期的[`TIMESTAMP`](datetime.html
    "13.2.2 日期、时间和时间戳类型")列。
- en: With [`ALLOW_INVALID_DATES`](sql-mode.html#sqlmode_allow_invalid_dates) disabled,
    the server requires that month and day values be legal, and not merely in the
    range 1 to 12 and 1 to 31, respectively. With strict mode disabled, invalid dates
    such as `'2004-04-31'` are converted to `'0000-00-00'` and a warning is generated.
    With strict mode enabled, invalid dates generate an error. To permit such dates,
    enable [`ALLOW_INVALID_DATES`](sql-mode.html#sqlmode_allow_invalid_dates).
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 禁用[`ALLOW_INVALID_DATES`](sql-mode.html#sqlmode_allow_invalid_dates)后，服务器要求月份和日期值合法，而不仅仅在1到12和1到31的范围内。在禁用严格模式的情况下，无效日期如`'2004-04-31'`会被转换为`'0000-00-00'`并生成警告。启用严格模式后，无效日期会生成错误。要允许这样的日期，请启用[`ALLOW_INVALID_DATES`](sql-mode.html#sqlmode_allow_invalid_dates)。
- en: '[`ANSI_QUOTES`](sql-mode.html#sqlmode_ansi_quotes)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ANSI_QUOTES`](sql-mode.html#sqlmode_ansi_quotes)'
- en: Treat `"` as an identifier quote character (like the [PRE2] to quote identifiers
    with this mode enabled. With [`ANSI_QUOTES`](sql-mode.html#sqlmode_ansi_quotes)
    enabled, you cannot use double quotation marks to quote literal strings because
    they are interpreted as identifiers.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`"`视为标识符引用字符（类似于启用此模式以使用[PRE2]引用标识符）。启用[`ANSI_QUOTES`](sql-mode.html#sqlmode_ansi_quotes)后，您不能使用双引号引用文本字符串，因为它们会被解释为标识符。
- en: '[`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)'
- en: The [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    mode affects handling of division by zero, which includes [`MOD(*`N`*,0)`](mathematical-functions.html#function_mod).
    For data-change operations ([`INSERT`](insert.html "15.2.7 INSERT Statement"),
    [`UPDATE`](update.html "15.2.17 UPDATE Statement")), its effect also depends on
    whether strict SQL mode is enabled.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)模式影响除零操作的处理，包括[`MOD(*`N`*,0)`](mathematical-functions.html#function_mod)。对于数据更改操作（[`INSERT`](insert.html
    "15.2.7 插入语句"), [`UPDATE`](update.html "15.2.17 更新语句"))，其效果还取决于是否启用了严格SQL模式。'
- en: If this mode is not enabled, division by zero inserts `NULL` and produces no
    warning.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用此模式，除零操作会插入`NULL`且不会生成警告。
- en: If this mode is enabled, division by zero inserts `NULL` and produces a warning.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了此模式，除零操作会插入`NULL`并生成警告。
- en: If this mode and strict mode are enabled, division by zero produces an error,
    unless `IGNORE` is given as well. For `INSERT IGNORE` and `UPDATE IGNORE`, division
    by zero inserts `NULL` and produces a warning.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了此模式和严格模式，除非也给出 `IGNORE`，否则除以零会产生错误。对于 `INSERT IGNORE` 和 `UPDATE IGNORE`，除以零会插入
    `NULL` 并产生警告。
- en: For [`SELECT`](select.html "15.2.13 SELECT Statement"), division by zero returns
    `NULL`. Enabling [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    causes a warning to be produced as well, regardless of whether strict mode is
    enabled.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 [`SELECT`](select.html "15.2.13 SELECT 语句")，除以零返回 `NULL`。启用 [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    会导致产生警告，无论是否启用了严格模式。
- en: '[`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    is deprecated. [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    is not part of strict mode, but should be used in conjunction with strict mode
    and is enabled by default. A warning occurs if [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    is enabled without also enabling strict mode or vice versa.'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    已被弃用。[`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    不是严格模式的一部分，但应与严格模式一起使用，并且默认启用。如果启用了 [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    而没有同时启用严格模式，或反之，则会产生警告。'
- en: Because [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    is deprecated, you should expect it to be removed in a future MySQL release as
    a separate mode name and its effect included in the effects of strict SQL mode.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为 [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)
    已被弃用，您应该期望在未来的 MySQL 发行版中将其作为单独的模式名称移除，并将其效果包含在严格 SQL 模式的效果中。
- en: '[`HIGH_NOT_PRECEDENCE`](sql-mode.html#sqlmode_high_not_precedence)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`HIGH_NOT_PRECEDENCE`](sql-mode.html#sqlmode_high_not_precedence)'
- en: The precedence of the [`NOT`](logical-operators.html#operator_not) operator
    is such that expressions such as `NOT a BETWEEN b AND c` are parsed as `NOT (a
    BETWEEN b AND c)`. In some older versions of MySQL, the expression was parsed
    as `(NOT a) BETWEEN b AND c`. The old higher-precedence behavior can be obtained
    by enabling the [`HIGH_NOT_PRECEDENCE`](sql-mode.html#sqlmode_high_not_precedence)
    SQL mode.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`NOT`](logical-operators.html#operator_not) 运算符的优先级使得诸如 `NOT a BETWEEN b AND
    c` 的表达式被解析为 `NOT (a BETWEEN b AND c)`。在一些较旧版本的 MySQL 中，该表达式被解析为 `(NOT a) BETWEEN
    b AND c`。通过启用 [`HIGH_NOT_PRECEDENCE`](sql-mode.html#sqlmode_high_not_precedence)
    SQL 模式可以获得旧的更高优先级行为。'
- en: '[PRE3]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space)'
- en: 'Permit spaces between a function name and the `(` character. This causes built-in
    function names to be treated as reserved words. As a result, identifiers that
    are the same as function names must be quoted as described in [Section 11.2, “Schema
    Object Names”](identifiers.html "11.2 Schema Object Names"). For example, because
    there is a [`COUNT()`](aggregate-functions.html#function_count) function, the
    use of `count` as a table name in the following statement causes an error:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许在函数名称和 `(` 字符之间有空格。这会导致内置函数名称被视为保留字。因此，与函数名称相同的标识符必须按照 [第 11.2 节，“模式对象名称”](identifiers.html
    "11.2 模式对象名称") 中描述的方式加引号。例如，因为有一个 [`COUNT()`](aggregate-functions.html#function_count)
    函数，在以下语句中将 `count` 用作表名会导致错误：
- en: '[PRE4]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The table name should be quoted:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表名应该加引号：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The [`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space) SQL mode applies to
    built-in functions, not to loadable functions or stored functions. It is always
    permissible to have spaces after a loadable function or stored function name,
    regardless of whether [`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space) is
    enabled.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space) SQL 模式适用于内置函数，而不适用于可加载函数或存储函数。无论是否启用
    [`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space)，在可加载函数或存储函数名称后面都可以有空格。'
- en: For further discussion of [`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space),
    see [Section 11.2.5, “Function Name Parsing and Resolution”](function-resolution.html
    "11.2.5 Function Name Parsing and Resolution").
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关 [`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space) 的进一步讨论，请参见 [第 11.2.5
    节，“函数名称解析和解析”](function-resolution.html "11.2.5 函数名称解析和解析")。
- en: '[`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero)'
- en: '[`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero) affects
    handling of `AUTO_INCREMENT` columns. Normally, you generate the next sequence
    number for the column by inserting either `NULL` or `0` into it. [`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero)
    suppresses this behavior for `0` so that only `NULL` generates the next sequence
    number.'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero)影响`AUTO_INCREMENT`列的处理。通常，通过插入`NULL`或`0`来生成列的下一个序列号。[`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero)抑制了对`0`的这种行为，因此只有`NULL`会生成下一个序列号。'
- en: This mode can be useful if `0` has been stored in a table's `AUTO_INCREMENT`
    column. (Storing `0` is not a recommended practice, by the way.) For example,
    if you dump the table with [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A
    Database Backup Program") and then reload it, MySQL normally generates new sequence
    numbers when it encounters the `0` values, resulting in a table with contents
    different from the one that was dumped. Enabling [`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero)
    before reloading the dump file solves this problem. For this reason, [**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program") automatically includes in its output
    a statement that enables [`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero).
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在表的`AUTO_INCREMENT`列中存储了`0`，这种模式可能会有用（顺便说一句，存储`0`并不是一种推荐的做法）。例如，如果你使用[**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program")导出表然后重新加载，当遇到`0`值时，MySQL通常会生成新的序列号，导致表的内容与导出时不同。在重新加载导出文件之前启用[`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero)可以解决这个问题。因此，[**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program")在输出中自动包含一个启用[`NO_AUTO_VALUE_ON_ZERO`](sql-mode.html#sqlmode_no_auto_value_on_zero)的语句。
- en: '[`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)'
- en: Enabling this mode disables the use of the backslash character (`\`) as an escape
    character within strings and identifiers. With this mode enabled, backslash becomes
    an ordinary character like any other, and the default escape sequence for [`LIKE`](string-comparison-functions.html#operator_like)
    expressions is changed so that no escape character is used.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用此模式会禁用反斜杠字符（`\`）作为字符串和标识符中的转义字符。启用此模式后，反斜杠变成像其他字符一样的普通字符，并且[`LIKE`](string-comparison-functions.html#operator_like)表达式的默认转义序列被更改，不再使用转义字符。
- en: '[`NO_DIR_IN_CREATE`](sql-mode.html#sqlmode_no_dir_in_create)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NO_DIR_IN_CREATE`](sql-mode.html#sqlmode_no_dir_in_create)'
- en: When creating a table, ignore all `INDEX DIRECTORY` and `DATA DIRECTORY` directives.
    This option is useful on replica servers.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建表时，忽略所有`INDEX DIRECTORY`和`DATA DIRECTORY`指令。这个选项在复制服务器上很有用。
- en: '[`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)'
- en: Control automatic substitution of the default storage engine when a statement
    such as [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") or
    [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") specifies a storage
    engine that is disabled or not compiled in.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当语句（如[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")或[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")）指定一个被禁用或未编译的存储引擎时，控制默认存储引擎的自动替换。
- en: By default, [`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)
    is enabled.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，[`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)是启用的。
- en: 'Because storage engines can be pluggable at runtime, unavailable engines are
    treated the same way:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为存储引擎可以在运行时插拔，不可用的引擎会被同样对待：
- en: With [`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)
    disabled, for [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")
    the default engine is used and a warning occurs if the desired engine is unavailable.
    For [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement"), a warning
    occurs and the table is not altered.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)被禁用时，对于[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")，将使用默认引擎，如果所需引擎不可用，则会发出警告。对于[`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")，会发出警告并且表不会被修改。
- en: With [`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)
    enabled, an error occurs and the table is not created or altered if the desired
    engine is unavailable.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)被启用时，如果所需引擎不可用，将会发生错误并且表不会被创建或修改。
- en: '[`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)'
- en: 'Subtraction between integer values, where one is of type `UNSIGNED`, produces
    an unsigned result by default. If the result would otherwise have been negative,
    an error results:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 整数值之间的减法，其中一个是`UNSIGNED`类型，默认会产生无符号结果。如果结果本应为负数，则会产生错误：
- en: '[PRE6]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If the [`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    SQL mode is enabled, the result is negative:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果启用了[`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    SQL 模式，则结果为负数：
- en: '[PRE7]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the result of such an operation is used to update an `UNSIGNED` integer column,
    the result is clipped to the maximum value for the column type, or clipped to
    0 if [`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    is enabled. With strict SQL mode enabled, an error occurs and the column remains
    unchanged.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果此类操作的结果用于更新`UNSIGNED`整数列，则结果将被截断为列类型的最大值，或者如果启用了[`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)，则截断为0。启用严格
    SQL 模式时，会发生错误，列保持不变��
- en: 'When [`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    is enabled, the subtraction result is signed, *even if any operand is unsigned*.
    For example, compare the type of column `c2` in table `t1` with that of column
    `c2` in table `t2`:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当启用[`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)时，减法结果为有符号的，*即使任何操作数都是无符号的*。例如，比较表`t1`中列`c2`的类型与表`t2`中列`c2`的类型：
- en: '[PRE8]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This means that `BIGINT UNSIGNED` is not 100% usable in all contexts. See [Section 14.10,
    “Cast Functions and Operators”](cast-functions.html "14.10 Cast Functions and
    Operators").
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着`BIGINT UNSIGNED`在所有情况下并非百分之百可用。请参阅[第 14.10 节，“转换函数和运算符”](cast-functions.html
    "14.10 转换函数和运算符")。
- en: '[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)'
- en: The [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date) mode affects whether
    the server permits `'0000-00-00'` as a valid date. Its effect also depends on
    whether strict SQL mode is enabled.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)模式影响服务器是否允许`''0000-00-00''`作为有效日期。其效果还取决于是否启用了严格
    SQL 模式。'
- en: If this mode is not enabled, `'0000-00-00'` is permitted and inserts produce
    no warning.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用此模式，允许`'0000-00-00'`，并且插入不会产生警告。
- en: If this mode is enabled, `'0000-00-00'` is permitted and inserts produce a warning.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了此模式，允许`'0000-00-00'`，并且插入会产生警告。
- en: If this mode and strict mode are enabled, `'0000-00-00'` is not permitted and
    inserts produce an error, unless `IGNORE` is given as well. For `INSERT IGNORE`
    and `UPDATE IGNORE`, `'0000-00-00'` is permitted and inserts produce a warning.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了此模式和严格模式，`'0000-00-00'`是不允许的，插入会产生错误，除非同时使用`IGNORE`。对于`INSERT IGNORE`和`UPDATE
    IGNORE`，允许`'0000-00-00'`，并且插入会产生警告。
- en: '[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date) is deprecated. [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)
    is not part of strict mode, but should be used in conjunction with strict mode
    and is enabled by default. A warning occurs if [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)
    is enabled without also enabling strict mode or vice versa.'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)已被弃用。[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)不是严格模式的一部分，但应与严格模式一起使用，并且默认情况下已启用。如果启用[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)而没有同时启用严格模式，或反之，则会发出警告。'
- en: Because [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date) is deprecated,
    you should expect it to be removed in a future MySQL release as a separate mode
    name and its effect included in the effects of strict SQL mode.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)已被弃用，您应该期望它在未来的 MySQL
    发布中作为单独的模式名称被移除，并且其效果包含在严格 SQL 模式的效果中。
- en: '[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)'
- en: The [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date) mode affects
    whether the server permits dates in which the year part is nonzero but the month
    or day part is 0\. (This mode affects dates such as `'2010-00-01'` or `'2010-01-00'`,
    but not `'0000-00-00'`. To control whether the server permits `'0000-00-00'`,
    use the [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date) mode.) The effect
    of [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date) also depends on
    whether strict SQL mode is enabled.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)模式影响服务器是否允许日期中年份部分为非零但月份或日期部分为0的情况。（此模式影响诸如`''2010-00-01''`或`''2010-01-00''`之类的日期，但不影响`''0000-00-00''`。要控制服务器是否允许`''0000-00-00''`，请使用[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)模式。）[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)的效果还取决于是否启用了严格
    SQL 模式。'
- en: If this mode is not enabled, dates with zero parts are permitted and inserts
    produce no warning.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用此模式，则允许具有零部分的日期，并且插入不会产生警告。
- en: If this mode is enabled, dates with zero parts are inserted as `'0000-00-00'`
    and produce a warning.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了此模式，具有零部分的日期将被插入为`'0000-00-00'`并产生警告。
- en: If this mode and strict mode are enabled, dates with zero parts are not permitted
    and inserts produce an error, unless `IGNORE` is given as well. For `INSERT IGNORE`
    and `UPDATE IGNORE`, dates with zero parts are inserted as `'0000-00-00'` and
    produce a warning.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了此模式和严格模式，将不允许具有零部分的日期，并且插入将产生错误，除非同时使用`IGNORE`。对于`INSERT IGNORE`和`UPDATE
    IGNORE`，具有零部分的日期将被插入为`'0000-00-00'`并产生警告。
- en: '[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date) is deprecated. [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)
    is not part of strict mode, but should be used in conjunction with strict mode
    and is enabled by default. A warning occurs if [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)
    is enabled without also enabling strict mode or vice versa.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)已被弃用。[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)不是严格模式的一部分，但应与严格模式一起使用，并且默认情况下已启用。如果启用了[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)而没有同时启用严格模式，或反之，则会发出警告。'
- en: Because [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date) is deprecated,
    you should expect it to be removed in a future MySQL release as a separate mode
    name and its effect included in the effects of strict SQL mode.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)已被弃用，您应该预期在未来的MySQL版本中将其作为单独的模式名称移除，并将其效果包含在严格SQL模式的效果中。
- en: '[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)'
- en: Reject queries for which the select list, `HAVING` condition, or `ORDER BY`
    list refer to nonaggregated columns that are neither named in the `GROUP BY` clause
    nor are functionally dependent on (uniquely determined by) `GROUP BY` columns.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 拒绝查询，其中选择列表、`HAVING`条件或`ORDER BY`列表引用非聚合列，这些列既不在`GROUP BY`子句中命名，也不是功能上依赖于（由`GROUP
    BY`���唯一确定的）`GROUP BY`列。
- en: A MySQL extension to standard SQL permits references in the `HAVING` clause
    to aliased expressions in the select list. The `HAVING` clause can refer to aliases
    regardless of whether [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)
    is enabled.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL对标准SQL的扩展允许`HAVING`子句中引用选择列表中的别名表达式。`HAVING`子句可以引用别名，无论是否启用了[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)。
- en: For additional discussion and examples, see [Section 14.19.3, “MySQL Handling
    of GROUP BY”](group-by-handling.html "14.19.3 MySQL Handling of GROUP BY").
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多讨论和示例，请参见[Section 14.19.3, “MySQL Handling of GROUP BY”](group-by-handling.html
    "14.19.3 MySQL Handling of GROUP BY")。
- en: '[`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)'
- en: By default, trailing spaces are trimmed from [`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") column values on retrieval. If [`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)
    is enabled, trimming does not occur and retrieved [`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") values are padded to their full length. This mode does
    not apply to [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") columns,
    for which trailing spaces are retained on retrieval.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，从[`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types")列值中检索时会删除尾随空格。如果启用了[`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)，则不会发生修剪，并且检索的[`CHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")值将填充到其完整长度。此模式不适用于[`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types")列，对于这些列，在检索时会保留尾随空格。
- en: Note
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: As of MySQL 8.0.13, [`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)
    is deprecated. Expect it to be removed in a future version of MySQL.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.13开始，[`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)已被弃用。预计在未来的MySQL版本中将其移除。
- en: '[PRE9]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[`PIPES_AS_CONCAT`](sql-mode.html#sqlmode_pipes_as_concat)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PIPES_AS_CONCAT`](sql-mode.html#sqlmode_pipes_as_concat)'
- en: Treat [`||`](logical-operators.html#operator_or) as a string concatenation operator
    (same as [`CONCAT()`](string-functions.html#function_concat)) rather than as a
    synonym for [`OR`](logical-operators.html#operator_or).
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`||`](logical-operators.html#operator_or)视为字符串连接运算符（与[`CONCAT()`](string-functions.html#function_concat)相同），而不是[`OR`](logical-operators.html#operator_or)的同义词。
- en: '[`REAL_AS_FLOAT`](sql-mode.html#sqlmode_real_as_float)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REAL_AS_FLOAT`](sql-mode.html#sqlmode_real_as_float)'
- en: Treat [`REAL`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE") as a synonym for [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"). By default,
    MySQL treats [`REAL`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE") as a synonym for [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE").
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`REAL`](floating-point-types.html "13.1.4 浮点类型（近似值）- FLOAT, DOUBLE")视为[`FLOAT`](floating-point-types.html
    "13.1.4 浮点类型（近似值）- FLOAT, DOUBLE")的同义词。默认情况下，MySQL将[`REAL`](floating-point-types.html
    "13.1.4 浮点类型（近似值）- FLOAT, DOUBLE")视为[`DOUBLE`](floating-point-types.html "13.1.4
    浮点类型（近似值）- FLOAT, DOUBLE")的同义词。
- en: '[`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables)'
- en: Enable strict SQL mode for all storage engines. Invalid data values are rejected.
    For details, see [Strict SQL Mode](sql-mode.html#sql-mode-strict "Strict SQL Mode").
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用所有存储引擎的严格SQL模式。无效数据值将被拒绝。详情请参见[严格SQL模式](sql-mode.html#sql-mode-strict "严格SQL模式")。
- en: '[`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables)'
- en: Enable strict SQL mode for transactional storage engines, and when possible
    for nontransactional storage engines. For details, see [Strict SQL Mode](sql-mode.html#sql-mode-strict
    "Strict SQL Mode").
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为事务性存储引擎启用严格SQL模式，并在可能的情况下为非事务性存储引擎启用。详情请参见[严格SQL模式](sql-mode.html#sql-mode-strict
    "严格SQL模式")。
- en: '[`TIME_TRUNCATE_FRACTIONAL`](sql-mode.html#sqlmode_time_truncate_fractional)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TIME_TRUNCATE_FRACTIONAL`](sql-mode.html#sqlmode_time_truncate_fractional)'
- en: 'Control whether rounding or truncation occurs when inserting a [`TIME`](time.html
    "13.2.3 The TIME Type"), [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and
    TIMESTAMP Types"), or [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types") value with a fractional seconds part into a column having
    the same type but fewer fractional digits. The default behavior is to use rounding.
    If this mode is enabled, truncation occurs instead. The following sequence of
    statements illustrates the difference:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 控制在将带有小数秒部分的[`TIME`](time.html "13.2.3 TIME类型"), [`DATE`](datetime.html "13.2.2
    DATE、DATETIME和TIMESTAMP类型")或[`TIMESTAMP`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")值插入到具有相同类型但小数位数较少的列时发生四舍五入或截断。默认行为是使用四舍五入。如果启用了此模式，则将发生截断。以下语句序列说明了差异：
- en: '[PRE10]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The resulting table contents look like this, where the first value has been
    subject to rounding and the second to truncation:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果表内容如下，第一个值经过四舍五入，第二个值经过截断：
- en: '[PRE11]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also [Section 13.2.6, “Fractional Seconds in Time Values”](fractional-seconds.html
    "13.2.6 Fractional Seconds in Time Values").
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见[第13.2.6节，“时间值中的小数秒”](fractional-seconds.html "13.2.6 时间值中的小数秒")。
- en: Combination SQL Modes
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 组合SQL模式
- en: The following special modes are provided as shorthand for combinations of mode
    values from the preceding list.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下特殊模式提供了前述列表中模式值的组合的简写。
- en: '[`ANSI`](sql-mode.html#sqlmode_ansi)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ANSI`](sql-mode.html#sqlmode_ansi)'
- en: Equivalent to [`REAL_AS_FLOAT`](sql-mode.html#sqlmode_real_as_float), [`PIPES_AS_CONCAT`](sql-mode.html#sqlmode_pipes_as_concat),
    [`ANSI_QUOTES`](sql-mode.html#sqlmode_ansi_quotes), [`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space),
    and [`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by).
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 等同于[`REAL_AS_FLOAT`](sql-mode.html#sqlmode_real_as_float), [`PIPES_AS_CONCAT`](sql-mode.html#sqlmode_pipes_as_concat),
    [`ANSI_QUOTES`](sql-mode.html#sqlmode_ansi_quotes), [`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space)和[`ONLY_FULL_GROUP_BY`](sql-mode.html#sqlmode_only_full_group_by)。
- en: '[`ANSI`](sql-mode.html#sqlmode_ansi) mode also causes the server to return
    an error for queries where a set function *`S`* with an outer reference `*`S`*(*`outer_ref`*)`
    cannot be aggregated in the outer query against which the outer reference has
    been resolved. This is such a query:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ANSI`](sql-mode.html#sqlmode_ansi)模式还会导致服务器对查询返回错误，其中一个带有外部引用`*`S`*(*`outer_ref`*)`的集合函数*`S`*无法在已解析外部引用的外部查询中进行聚合。这是这样一个查询：'
- en: '[PRE12]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, [`MAX(t1.b)`](aggregate-functions.html#function_max) cannot aggregated
    in the outer query because it appears in the `WHERE` clause of that query. Standard
    SQL requires an error in this situation. If [`ANSI`](sql-mode.html#sqlmode_ansi)
    mode is not enabled, the server treats `*`S`*(*`outer_ref`*)` in such queries
    the same way that it would interpret `*`S`*(*`const`*)`.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，[`MAX(t1.b)`](aggregate-functions.html#function_max)不能在外部查询中聚合，因为它出现在该查询的`WHERE`子句中。标准SQL要求在这种情况下出错。如果未启用[`ANSI`](sql-mode.html#sqlmode_ansi)模式，服务器将在这些查询中以与解释`*`S`*(*`const`*)`相同的方式解释`*`S`*(*`outer_ref`*)`。
- en: See [Section 1.6, “MySQL Standards Compliance”](compatibility.html "1.6 MySQL
    Standards Compliance").
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见[第1.6节，“MySQL标准兼容性”](compatibility.html "1.6 MySQL Standards Compliance")。
- en: '[`TRADITIONAL`](sql-mode.html#sqlmode_traditional)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`TRADITIONAL`](sql-mode.html#sqlmode_traditional)'
- en: '[`TRADITIONAL`](sql-mode.html#sqlmode_traditional) is equivalent to [`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables),
    [`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables), [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date),
    [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date), [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero),
    and [`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution).'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TRADITIONAL`](sql-mode.html#sqlmode_traditional)等同于[`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables)、[`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables)、[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)、[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)、[`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)和[`NO_ENGINE_SUBSTITUTION`](sql-mode.html#sqlmode_no_engine_substitution)。'
- en: Strict SQL Mode
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 严格SQL模式
- en: Strict mode controls how MySQL handles invalid or missing values in data-change
    statements such as [`INSERT`](insert.html "15.2.7 INSERT Statement") or [`UPDATE`](update.html
    "15.2.17 UPDATE Statement"). A value can be invalid for several reasons. For example,
    it might have the wrong data type for the column, or it might be out of range.
    A value is missing when a new row to be inserted does not contain a value for
    a non-`NULL` column that has no explicit `DEFAULT` clause in its definition. (For
    a `NULL` column, `NULL` is inserted if the value is missing.) Strict mode also
    affects DDL statements such as [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement").
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式控制MySQL如何处理数据更改语句中的无效或缺失值，例如[`INSERT`](insert.html "15.2.7 INSERT Statement")或[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")。值可能无效的原因有多种。例如，它可能对于列的数据类型错误，或者超出范围。当要插入的新行不包含非`NULL`列的值且该列在定义中没有显式的`DEFAULT`子句时，值就会缺失。（对于`NULL`列，如果值缺失，则插入`NULL`。）严格模式还影响DDL语句，例如[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")。
- en: If strict mode is not in effect, MySQL inserts adjusted values for invalid or
    missing values and produces warnings (see [Section 15.7.7.42, “SHOW WARNINGS Statement”](show-warnings.html
    "15.7.7.42 SHOW WARNINGS Statement")). In strict mode, you can produce this behavior
    by using [`INSERT IGNORE`](insert.html "15.2.7 INSERT Statement") or [`UPDATE
    IGNORE`](update.html "15.2.17 UPDATE Statement").
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果严格模式未生效，MySQL会为无效或缺失的值插入调整后的值，并生成警告（参见[第15.7.7.42节，“SHOW WARNINGS语句”](show-warnings.html
    "15.7.7.42 SHOW WARNINGS Statement")）。在严格模式下，您可以通过使用[`INSERT IGNORE`](insert.html
    "15.2.7 INSERT Statement")或[`UPDATE IGNORE`](update.html "15.2.17 UPDATE Statement")来产生这种行为。
- en: For statements such as [`SELECT`](select.html "15.2.13 SELECT Statement") that
    do not change data, invalid values generate a warning in strict mode, not an error.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于诸如[`SELECT`](select.html "15.2.13 SELECT Statement")这样不改变数据的语句，在严格模式下，无效值会生成警告，而不是错误。
- en: Strict mode produces an error for attempts to create a key that exceeds the
    maximum key length. When strict mode is not enabled, this results in a warning
    and truncation of the key to the maximum key length.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式会在尝试创建超过最大键长度的键时产生错误。当未启用严格模式时，这会导致警告并将键截断为最大键长度。
- en: Strict mode does not affect whether foreign key constraints are checked. [`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)
    can be used for that. (See [Section 7.1.8, “Server System Variables”](server-system-variables.html
    "7.1.8 Server System Variables").)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式不影响外键约束的检查。可以使用[`foreign_key_checks`](server-system-variables.html#sysvar_foreign_key_checks)进行检查。（参见[第7.1.8节，“服务器系统变量”](server-system-variables.html
    "7.1.8 Server System Variables")。）
- en: 'Strict SQL mode is in effect if either [`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables)
    or [`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables) is enabled,
    although the effects of these modes differ somewhat:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了[`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables)或[`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables)，则严格SQL模式生效，尽管这些模式的影响略有不同：
- en: For transactional tables, an error occurs for invalid or missing values in a
    data-change statement when either [`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables)
    or [`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables) is enabled.
    The statement is aborted and rolled back.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于事务表，在数据更改语句中出现无效或缺失值时，当[`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables)或[`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables)启用时会发生错误。该语句将被中止并回滚。
- en: 'For nontransactional tables, the behavior is the same for either mode if the
    bad value occurs in the first row to be inserted or updated: The statement is
    aborted and the table remains unchanged. If the statement inserts or modifies
    multiple rows and the bad value occurs in the second or later row, the result
    depends on which strict mode is enabled:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于非事务表，如果坏值出现在要插入或更新的第一行中，无论哪种模式，行为都是相同的：语句会被中止，表保持不变。如果语句插入或修改多行，且坏值出现在第二行或之后的行中，结果取决于启用了哪种严格模式：
- en: For [`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables), MySQL returns
    an error and ignores the rest of the rows. However, because the earlier rows have
    been inserted or updated, the result is a partial update. To avoid this, use single-row
    statements, which can be aborted without changing the table.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`STRICT_ALL_TABLES`](sql-mode.html#sqlmode_strict_all_tables)，MySQL会返回错误并忽略其余行。然而，由于较早的行已被插入或更新，结果是部分更新。为避免这种情况，请使用单行语句，可以在不更改表的情况下中止。
- en: For [`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables), MySQL
    converts an invalid value to the closest valid value for the column and inserts
    the adjusted value. If a value is missing, MySQL inserts the implicit default
    value for the column data type. In either case, MySQL generates a warning rather
    than an error and continues processing the statement. Implicit defaults are described
    in [Section 13.6, “Data Type Default Values”](data-type-defaults.html "13.6 Data
    Type Default Values").
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`STRICT_TRANS_TABLES`](sql-mode.html#sqlmode_strict_trans_tables)，MySQL会将无效值转换为列的最接近有效值并插入调整后的值。如果值缺失，MySQL会插入列数据类型的隐式默认值。在任一情况下，MySQL会生成警告而不是错误，并继续处理语句。隐式默认值在[第
    13.6 节，“数据类型默认值”](data-type-defaults.html "13.6 Data Type Default Values")中描述。
- en: 'Strict mode affects handling of division by zero, zero dates, and zeros in
    dates as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式影响对零除法、零日期和日期中的零的处理如下：
- en: 'Strict mode affects handling of division by zero, which includes [`MOD(*`N`*,0)`](mathematical-functions.html#function_mod):'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严格模式影响对零除法的处理，包括[`MOD(*`N`*,0)`](mathematical-functions.html#function_mod)：
- en: 'For data-change operations ([`INSERT`](insert.html "15.2.7 INSERT Statement"),
    [`UPDATE`](update.html "15.2.17 UPDATE Statement")):'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于数据更改操作（[`INSERT`](insert.html "15.2.7 INSERT Statement")，[`UPDATE`](update.html
    "15.2.17 UPDATE Statement"))：
- en: If strict mode is not enabled, division by zero inserts `NULL` and produces
    no warning.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用严格模式，零除法会插入`NULL`并不会产生警告。
- en: If strict mode is enabled, division by zero produces an error, unless `IGNORE`
    is given as well. For `INSERT IGNORE` and `UPDATE IGNORE`, division by zero inserts
    `NULL` and produces a warning.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了严格模式，零除法会产生错误，除非也给出了`IGNORE`。对于`INSERT IGNORE`和`UPDATE IGNORE`，零除法会插入`NULL`并生成警告。
- en: For [`SELECT`](select.html "15.2.13 SELECT Statement"), division by zero returns
    `NULL`. Enabling strict mode causes a warning to be produced as well.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`SELECT`](select.html "15.2.13 SELECT Statement")，零除法返回`NULL`。启用严格模式会产生警告。
- en: 'Strict mode affects whether the server permits `''0000-00-00''` as a valid
    date:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严格模式影响服务器是否允许`'0000-00-00'`作为有效日期：
- en: If strict mode is not enabled, `'0000-00-00'` is permitted and inserts produce
    no warning.
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用严格模式，允许`'0000-00-00'`并且插入不会产生警告。
- en: If strict mode is enabled, `'0000-00-00'` is not permitted and inserts produce
    an error, unless `IGNORE` is given as well. For `INSERT IGNORE` and `UPDATE IGNORE`,
    `'0000-00-00'` is permitted and inserts produce a warning.
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了严格模式，不允许`'0000-00-00'`，并且插入会产生错误，除非也给出了`IGNORE`。对于`INSERT IGNORE`和`UPDATE
    IGNORE`，`'0000-00-00'`是允许的，并且插入会生成警告。
- en: 'Strict mode affects whether the server permits dates in which the year part
    is nonzero but the month or day part is 0 (dates such as `''2010-00-01''` or `''2010-01-00''`):'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严格模式影响服务器是否允许年份部分为非零但月份或日期部分为 0 的日期（例如 `'2010-00-01'` 或 `'2010-01-00'`）：
- en: If strict mode is not enabled, dates with zero parts are permitted and inserts
    produce no warning.
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用严格模式，允许具有零部分的日期，并且插入不会产生警告。
- en: If strict mode is enabled, dates with zero parts are not permitted and inserts
    produce an error, unless `IGNORE` is given as well. For `INSERT IGNORE` and `UPDATE
    IGNORE`, dates with zero parts are inserted as `'0000-00-00'` (which is considered
    valid with `IGNORE`) and produce a warning.
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了严格模式，不允许具有零部分的日期，并且插入会产生错误，除非也给出了`IGNORE`。对于`INSERT IGNORE`和`UPDATE IGNORE`，具有零部分的日期会插入为`'0000-00-00'`（在`IGNORE`情况下被视为有效）并生成警告。
- en: For more information about strict mode with respect to `IGNORE`, see [Comparison
    of the IGNORE Keyword and Strict SQL Mode](sql-mode.html#ignore-strict-comparison
    "Comparison of the IGNORE Keyword and Strict SQL Mode").
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`IGNORE`与严格模式的更多信息，请参阅[IGNORE关键字和严格SQL模式的比较](sql-mode.html#ignore-strict-comparison
    "IGNORE关键字和严格SQL模式的比较")。
- en: Strict mode affects handling of division by zero, zero dates, and zeros in dates
    in conjunction with the [`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero),
    [`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date), and [`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)
    modes.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式影响对零除法、零日期和日期中的零的处理，与[`ERROR_FOR_DIVISION_BY_ZERO`](sql-mode.html#sqlmode_error_for_division_by_zero)、[`NO_ZERO_DATE`](sql-mode.html#sqlmode_no_zero_date)和[`NO_ZERO_IN_DATE`](sql-mode.html#sqlmode_no_zero_in_date)模式一起。
- en: Comparison of the IGNORE Keyword and Strict SQL Mode
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`IGNORE`关键字和严格SQL模式的比较'
- en: This section compares the effect on statement execution of the `IGNORE` keyword
    (which downgrades errors to warnings) and strict SQL mode (which upgrades warnings
    to errors). It describes which statements they affect, and which errors they apply
    to.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 本节比较了`IGNORE`关键字（将错误降级为警告）和严格SQL模式（将警告升级为错误）对语句执行的影响。它描述了它们影响的语句以及它们适用的错误。
- en: The following table presents a summary comparison of statement behavior when
    the default is to produce an error versus a warning. An example of when the default
    is to produce an error is inserting a `NULL` into a `NOT NULL` column. An example
    of when the default is to produce a warning is inserting a value of the wrong
    data type into a column (such as inserting the string `'abc'` into an integer
    column).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了当默认为产生错误与警告时语句行为的比较。当默认为产生错误时的示例是将`NULL`插入`NOT NULL`列。当默认为产生警告时的示例是将错误数据类型的值插入列（例如将字符串`'abc'`插入整数列）。
- en: '| Operational Mode | When Statement Default is Error | When Statement Default
    is Warning |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 操作模式 | 当语句默认为错误时 | 当语句默认为警告时 |'
- en: '| Without `IGNORE` or strict SQL mode | Error | Warning |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 没有`IGNORE`或严格SQL模式 | 错误 | 警告 |'
- en: '| With `IGNORE` | Warning | Warning (same as without `IGNORE` or strict SQL
    mode) |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 使用`IGNORE` | 警告 | 警告（与没有`IGNORE`或严格SQL模式相同） |'
- en: '| With strict SQL mode | Error (same as without `IGNORE` or strict SQL mode)
    | Error |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 使用严格的SQL模式 | 错误（与没有`IGNORE`或严格的SQL模式相同） | 错误 |'
- en: '| With `IGNORE` and strict SQL mode | Warning | Warning |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 使用`IGNORE`和严格SQL模式 | 警告 | 警告 |'
- en: One conclusion to draw from the table is that when the `IGNORE` keyword and
    strict SQL mode are both in effect, `IGNORE` takes precedence. This means that,
    although `IGNORE` and strict SQL mode can be considered to have opposite effects
    on error handling, they do not cancel when used together.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 从表中可以得出一个结论，即当`IGNORE`关键字和严格的SQL模式同时生效时，`IGNORE`优先。这意味着，尽管`IGNORE`和严格的SQL模式在错误处理方面可以被认为具有相反的效果，但在一起使用时并不会被取消。
- en: '[The Effect of IGNORE on Statement Execution](sql-mode.html#ignore-effect-on-execution
    "The Effect of IGNORE on Statement Execution")'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[IGNORE对语句执行的影响](sql-mode.html#ignore-effect-on-execution "IGNORE对语句执行的影响")'
- en: '[The Effect of Strict SQL Mode on Statement Execution](sql-mode.html#strict-sql-mode-effect-on-execution
    "The Effect of Strict SQL Mode on Statement Execution")'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[严格SQL模式对语句执行的影响](sql-mode.html#strict-sql-mode-effect-on-execution "严格SQL模式对语句执行的影响")'
- en: The Effect of IGNORE on Statement Execution
  id: totrans-168
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: IGNORE对语句执行的影响
- en: Several statements in MySQL support an optional `IGNORE` keyword. This keyword
    causes the server to downgrade certain types of errors and generate warnings instead.
    For a multiple-row statement, downgrading an error to a warning may enable a row
    to be processed. Otherwise, `IGNORE` causes the statement to skip to the next
    row instead of aborting. (For nonignorable errors, an error occurs regardless
    of the `IGNORE` keyword.)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL中的几个语句支持可选的`IGNORE`关键字。此关键字导致服务器将某些类型的错误降级并生成警告。对于多行语句，将错误降级为警告可能会使一行得以处理。否则，`IGNORE`会导致语句跳到下一行而不是中止。（对于不可忽略的错误，无论有无`IGNORE`关键字，都会发生错误。）
- en: 'Example: If the table `t` has a primary key column `i` containing unique values,
    attempting to insert the same value of `i` into multiple rows normally produces
    a duplicate-key error:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：如果表`t`具有包含唯一值的主键列`i`，尝试将相同值的`i`插入多行通常会产生重复键错误：
- en: '[PRE13]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With `IGNORE`, the row containing the duplicate key still is not inserted,
    but a warning occurs instead of an error:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`IGNORE`，包含重复键的行仍然不会被插入，但会产生警告而不是错误：
- en: '[PRE14]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Example: If the table `t2` has a `NOT NULL` column `id`, attempting to insert
    `NULL` produces an error in strict SQL mode:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：如果表`t2`有一个`NOT NULL`列`id`，尝试插入`NULL`在严格SQL模式下会产生错误：
- en: '[PRE15]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If the SQL mode is not strict, `IGNORE` causes the `NULL` to be inserted as
    the column implicit default (0 in this case), which enables the row to be handled
    without skipping it:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果SQL模式不是严格的，`IGNORE`会将`NULL`插入为列的隐式默认值（在本例中为0），从而使行能够在不跳过的情况下处理：
- en: '[PRE16]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'These statements support the `IGNORE` keyword:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句支持`IGNORE`关键字：
- en: '[`CREATE TABLE ... SELECT`](create-table.html "15.1.20 CREATE TABLE Statement"):
    `IGNORE` does not apply to the [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") or [`SELECT`](select.html "15.2.13 SELECT Statement") parts
    of the statement but to inserts into the table of rows produced by the [`SELECT`](select.html
    "15.2.13 SELECT Statement"). Rows that duplicate an existing row on a unique key
    value are discarded.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CREATE TABLE ... SELECT`](create-table.html "15.1.20 CREATE TABLE Statement"):
    `IGNORE`不适用于语句的[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")或[`SELECT`](select.html
    "15.2.13 SELECT Statement")部分，而适用于由[`SELECT`](select.html "15.2.13 SELECT Statement")生成的行插入到表中。重复现有唯一键值的行将被丢弃。'
- en: '[`DELETE`](delete.html "15.2.2 DELETE Statement"): `IGNORE` causes MySQL to
    ignore errors during the process of deleting rows.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DELETE`](delete.html "15.2.2 DELETE Statement"): `IGNORE`使MySQL在删除行的过程中忽略错误。'
- en: '[`INSERT`](insert.html "15.2.7 INSERT Statement"): With `IGNORE`, rows that
    duplicate an existing row on a unique key value are discarded. Rows set to values
    that would cause data conversion errors are set to the closest valid values instead.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INSERT`](insert.html "15.2.7 INSERT Statement"): 使用`IGNORE`，重复现有唯一键值的行将被丢弃。将导致数据转换错误的行设置为最接近的有效值。'
- en: For partitioned tables where no partition matching a given value is found, `IGNORE`
    causes the insert operation to fail silently for rows containing the unmatched
    value.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于分区表中找不到与给定值匹配的分区的情况，`IGNORE`会导致包含不匹配值的行的插入操作静默失败。
- en: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement"), [`LOAD XML`](load-xml.html
    "15.2.10 LOAD XML Statement"): With `IGNORE`, rows that duplicate an existing
    row on a unique key value are discarded.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement"), [`LOAD XML`](load-xml.html
    "15.2.10 LOAD XML Statement"): 使用`IGNORE`，重复现有唯一键值的行将被丢弃。'
- en: '[`UPDATE`](update.html "15.2.17 UPDATE Statement"): With `IGNORE`, rows for
    which duplicate-key conflicts occur on a unique key value are not updated. Rows
    updated to values that would cause data conversion errors are updated to the closest
    valid values instead.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UPDATE`](update.html "15.2.17 UPDATE Statement"): 使用`IGNORE`时，对于唯一键值发生重复键冲突的行不会被更新。将导致数据转换错误的行更新为最接近的有效值。'
- en: 'The `IGNORE` keyword applies to the following ignorable errors:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`IGNORE`关键字适用于以下可忽略的错误：'
- en: '[PRE17]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The Effect of Strict SQL Mode on Statement Execution
  id: totrans-187
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 严格SQL模式对语句执行的影响
- en: The MySQL server can operate in different SQL modes, and can apply these modes
    differently for different clients, depending on the value of the [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    system variable. In “strict” SQL mode, the server upgrades certain warnings to
    errors.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL服务器可以在不同的SQL模式下运行，并且可以根据[`sql_mode`](server-system-variables.html#sysvar_sql_mode)系统变量的值为不同的客户端应用这些模式。在“严格”SQL模式下，服务器将某些警告升级为错误。
- en: 'For example, in non-strict SQL mode, inserting the string `''abc''` into an
    integer column results in conversion of the value to 0 and a warning:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在非严格SQL模式下，将字符串`'abc'`插入整数列会将该值转换为0并产生警告：
- en: '[PRE18]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In strict SQL mode, the invalid value is rejected with an error:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在严格SQL模式下，无效值将被拒绝并产生错误：
- en: '[PRE19]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For more information about possible settings of the [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    system variable, see [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server
    SQL Modes").
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[`sql_mode`](server-system-variables.html#sysvar_sql_mode)系统变量可能设置的更多信息，请参见[第7.1.11节，“服务器SQL模式”](sql-mode.html
    "7.1.11 Server SQL Modes")。
- en: 'Strict SQL mode applies to the following statements under conditions for which
    some value might be out of range or an invalid row is inserted into or deleted
    from a table:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 严格的SQL模式适用于以下语句，在某些值可能超出范围或将无效行插入或删除表时：
- en: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")'
- en: '[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")'
- en: '[`CREATE TABLE ... SELECT`](create-table.html "15.1.20 CREATE TABLE Statement")'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CREATE TABLE ... SELECT`](create-table.html "15.1.20 CREATE TABLE Statement")'
- en: '[`DELETE`](delete.html "15.2.2 DELETE Statement") (both single table and multiple
    table)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DELETE`](delete.html "15.2.2 DELETE Statement")（单表和多表）'
- en: '[`INSERT`](insert.html "15.2.7 INSERT Statement")'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INSERT`](insert.html "15.2.7 INSERT Statement")'
- en: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")'
- en: '[`LOAD XML`](load-xml.html "15.2.10 LOAD XML Statement")'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LOAD XML`](load-xml.html "15.2.10 LOAD XML Statement")'
- en: '[`SELECT SLEEP()`](select.html "15.2.13 SELECT Statement")'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SELECT SLEEP()`](select.html "15.2.13 SELECT Statement")'
- en: '[`UPDATE`](update.html "15.2.17 UPDATE Statement") (both single table and multiple
    table)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UPDATE`](update.html "15.2.17 UPDATE Statement")（单表和多表）'
- en: Within stored programs, individual statements of the types just listed execute
    in strict SQL mode if the program was defined while strict mode was in effect.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储程序中，如果在严格模式下定义程序，则刚才列出的类型的单个语句将以严格的 SQL 模式执行。
- en: Strict SQL mode applies to the following errors, which represent a class of
    errors in which an input value is either invalid or missing. A value is invalid
    if it has the wrong data type for the column or might be out of range. A value
    is missing if a new row to be inserted does not contain a value for a `NOT NULL`
    column that has no explicit `DEFAULT` clause in its definition.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 严格的 SQL 模式适用于以下错误，这些错误代表一类错误，其中输入值无效或缺失。 如果值的数据类型对于列来说是错误的或可能超出范围，则该值无效。 如果要插入的新行不包含在其定义中没有显式`DEFAULT`子句的`NOT
    NULL`列的值，则该值缺失。
- en: '[PRE20]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Because continued MySQL development defines new errors, there may be errors
    not in the preceding list to which strict SQL mode applies.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 由于持续的 MySQL 开发定义了新的错误，可能存在不在前述列表中的错误，严格的 SQL 模式适用于这些错误。
