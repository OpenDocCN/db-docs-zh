- en: 17.1.2 Best Practices for InnoDB Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.1.2 InnoDB表的最佳实践
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-best-practices.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-best-practices.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-best-practices.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-best-practices.html)
- en: This section describes best practices when using `InnoDB` tables.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了使用`InnoDB`表时的最佳实践。
- en: Specify a primary key for every table using the most frequently queried column
    or columns, or an auto-increment value if there is no obvious primary key.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个表指定一个主键，使用最常查询的列或列，或者如果没有明显的主键，则使用自增值。
- en: Use joins wherever data is pulled from multiple tables based on identical ID
    values from those tables. For fast join performance, define foreign keys on the
    join columns, and declare those columns with the same data type in each table.
    Adding foreign keys ensures that referenced columns are indexed, which can improve
    performance. Foreign keys also propagate deletes and updates to all affected tables,
    and prevent insertion of data in a child table if the corresponding IDs are not
    present in the parent table.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用连接（joins）在从多个表中提取数据时，基于这些表中相同ID值进行连接。为了获得快速的连接性能，在连接列上定义外键，并在每个表中声明具有相同数据类型的列。添加外键可以确保引用列被索引，从而提高性能。外键还会将删除和更新传播到所有受影响的表，并防止在子表中插入数据，如果相应的ID在父表中不存在。
- en: Turn off autocommit. Committing hundreds of times a second puts a cap on performance
    (limited by the write speed of your storage device).
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭自动提交。每秒提交数百次会限制性能（受存储设备的写入速度限制）。
- en: Group sets of related DML operations into transactions by bracketing them with
    `START TRANSACTION` and `COMMIT` statements. While you don't want to commit too
    often, you also don't want to issue huge batches of [`INSERT`](insert.html "15.2.7 INSERT
    Statement"), [`UPDATE`](update.html "15.2.17 UPDATE Statement"), or [`DELETE`](delete.html
    "15.2.2 DELETE Statement") statements that run for hours without committing.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将相关的DML操作组合成事务，通过使用`START TRANSACTION`和`COMMIT`语句将它们括起来。虽然您不希望经常提交，但也不希望发出运行数小时而不提交的大批量[`INSERT`](insert.html
    "15.2.7 INSERT Statement")、[`UPDATE`](update.html "15.2.17 UPDATE Statement")或[`DELETE`](delete.html
    "15.2.2 DELETE Statement")语句。
- en: Do not use [`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES
    Statements") statements. `InnoDB` can handle multiple sessions all reading and
    writing to the same table at once without sacrificing reliability or high performance.
    To get exclusive write access to a set of rows, use the [`SELECT ... FOR UPDATE`](innodb-locking-reads.html
    "17.7.2.4 Locking Reads") syntax to lock just the rows you intend to update.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用[`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")语句。`InnoDB`可以处理多个会话同时读写同一张表，而不会牺牲可靠性或高性能。要获得对一组行的独占写访问权限，请使用[`SELECT
    ... FOR UPDATE`](innodb-locking-reads.html "17.7.2.4 Locking Reads")语法，仅锁定您打算更新的行。
- en: Enable the [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    variable or use general tablespaces to put the data and indexes for tables into
    separate files instead of the system tablespace. The [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    variable is enabled by default.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)变量或使用通用表空间将表的数据和索引放入单独的文件中，而不是系统表空间。[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)变量默认启用。
- en: Evaluate whether your data and access patterns benefit from the `InnoDB` table
    or page compression features. You can compress `InnoDB` tables without sacrificing
    read/write capability.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估您的数据和访问模式是否受益于`InnoDB`表或页面压缩功能。您可以压缩`InnoDB`表而不会牺牲读/写能力。
- en: Run the server with the [`--sql_mode=NO_ENGINE_SUBSTITUTION`](server-system-variables.html#sysvar_sql_mode)
    option to prevent tables from being created with storage engines that you do not
    want to use.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`--sql_mode=NO_ENGINE_SUBSTITUTION`](server-system-variables.html#sysvar_sql_mode)选项运行服务器，以防止使用您不想使用的存储引擎创建表。
