- en: 17.1.1 Benefits of Using InnoDB Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.1.1 使用InnoDB表的好处
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-benefits.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-benefits.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-benefits.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-benefits.html)
- en: '`InnoDB` tables have the following benefits:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`表具有以下好处：'
- en: If the server unexpectedly exits because of a hardware or software issue, regardless
    of what was happening in the database at the time, you don't need to do anything
    special after restarting the database. `InnoDB` crash recovery automatically finalizes
    changes that were committed before the time of the crash, and undoes changes that
    were in process but not committed, permitting you to restart and continue from
    where you left off. See [Section 17.18.2, “InnoDB Recovery”](innodb-recovery.html
    "17.18.2 InnoDB Recovery").
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果服务器因硬件或软件问题意外退出，无论在数据库中发生了什么，重新启动数据库后无需执行任何特殊操作。`InnoDB`崩溃恢复会自动完成在崩溃发生前提交的更改，并撤消正在进行但尚未提交的更改，使您可以从上次中断的地方重新启动并继续。参见[第17.18.2节，“InnoDB恢复”](innodb-recovery.html
    "17.18.2 InnoDB恢复")。
- en: The `InnoDB` storage engine maintains its own buffer pool that caches table
    and index data in main memory as data is accessed. Frequently used data is processed
    directly from memory. This cache applies to many types of information and speeds
    up processing. On dedicated database servers, up to 80% of physical memory is
    often assigned to the buffer pool. See [Section 17.5.1, “Buffer Pool”](innodb-buffer-pool.html
    "17.5.1 Buffer Pool").
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`存储引擎维护自己的缓冲池，将表和索引数据缓存在主内存中，随着数据的访问而访问。经常使用的数据直接从内存中处理。该缓存适用于许多类型的信息并加快处理速度。在专用数据库服务器上，通常将高达80%的物理内存分配给缓冲池。参见[第17.5.1节，“缓冲池”](innodb-buffer-pool.html
    "17.5.1 缓冲池")。'
- en: If you split up related data into different tables, you can set up foreign keys
    that enforce referential integrity. See [Section 15.1.20.5, “FOREIGN KEY Constraints”](create-table-foreign-keys.html
    "15.1.20.5 FOREIGN KEY Constraints").
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果将相关数据拆分到不同的表中，您可以设置强制执行引用完整性的外键。参见[第15.1.20.5节，“外键约束”](create-table-foreign-keys.html
    "15.1.20.5 外键约束")。
- en: If data becomes corrupted on disk or in memory, a checksum mechanism alerts
    you to the bogus data before you use it. The [`innodb_checksum_algorithm`](innodb-parameters.html#sysvar_innodb_checksum_algorithm)
    variable defines the checksum algorithm used by `InnoDB`.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据在磁盘或内存中损坏，校验和机制会在您使用之前警告您有误的数据。[`innodb_checksum_algorithm`](innodb-parameters.html#sysvar_innodb_checksum_algorithm)变量定义了`InnoDB`使用的校验和算法。
- en: When you design a database with appropriate primary key columns for each table,
    operations involving those columns are automatically optimized. It is very fast
    to reference the primary key columns in [`WHERE`](select.html "15.2.13 SELECT
    Statement") clauses, [`ORDER BY`](select.html "15.2.13 SELECT Statement") clauses,
    [`GROUP BY`](select.html "15.2.13 SELECT Statement") clauses, and join operations.
    See [Section 17.6.2.1, “Clustered and Secondary Indexes”](innodb-index-types.html
    "17.6.2.1 Clustered and Secondary Indexes").
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当为每个表设计具有适当主键列的数据库时，涉及这些列的操作会自动优化。在[`WHERE`](select.html "15.2.13 SELECT语句")子句、[`ORDER
    BY`](select.html "15.2.13 SELECT语句")子句、[`GROUP BY`](select.html "15.2.13 SELECT语句")子句和连接操作中引用主键列非常快速。参见[第17.6.2.1节，“聚簇索引和二级索引”](innodb-index-types.html
    "17.6.2.1 聚簇索引和二级索引")。
- en: Inserts, updates, and deletes are optimized by an automatic mechanism called
    change buffering. `InnoDB` not only allows concurrent read and write access to
    the same table, it caches changed data to streamline disk I/O. See [Section 17.5.2,
    “Change Buffer”](innodb-change-buffer.html "17.5.2 Change Buffer").
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入、更新和删除通过称为更改缓冲的自动机制进行优化。`InnoDB`不仅允许对同一表进行并发读写访问，还会缓存已更改的数据以简化磁盘I/O。参见[第17.5.2节，“更改缓冲”](innodb-change-buffer.html
    "17.5.2 更改缓冲")。
- en: Performance benefits are not limited to large tables with long-running queries.
    When the same rows are accessed over and over from a table, the Adaptive Hash
    Index takes over to make these lookups even faster, as if they came out of a hash
    table. See [Section 17.5.3, “Adaptive Hash Index”](innodb-adaptive-hash.html "17.5.3 Adaptive
    Hash Index").
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能优势不仅限于具有长时间运行查询的大型表。当从表中反复访问相同的行时，自适应哈希索引会接管，使这些查找变得更快，就像它们来自哈希表一样。参见[第17.5.3节，“自适应哈希索引”](innodb-adaptive-hash.html
    "17.5.3 自适应哈希索引")。
- en: You can compress tables and associated indexes. See [Section 17.9, “InnoDB Table
    and Page Compression”](innodb-compression.html "17.9 InnoDB Table and Page Compression").
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以压缩表和相关索引。参见[第17.9节，“InnoDB表和页面压缩”](innodb-compression.html "17.9 InnoDB Table
    and Page Compression")。
- en: You can encrypt your data. See [Section 17.13, “InnoDB Data-at-Rest Encryption”](innodb-data-encryption.html
    "17.13 InnoDB Data-at-Rest Encryption").
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以加密您的数据。参见[第17.13节，“InnoDB数据静态加密”](innodb-data-encryption.html "17.13 InnoDB
    Data-at-Rest Encryption")。
- en: You can create and drop indexes and perform other DDL operations with much less
    impact on performance and availability. See [Section 17.12.1, “Online DDL Operations”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations").
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以创建和删除索引，并执行其他DDL操作，对性能和可用性的影响要小得多。参见[第17.12.1节，“在线DDL操作”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations")。
- en: Truncating a file-per-table tablespace is very fast and can free up disk space
    for the operating system to reuse rather than only `InnoDB`. See [Section 17.6.3.2,
    “File-Per-Table Tablespaces”](innodb-file-per-table-tablespaces.html "17.6.3.2 File-Per-Table
    Tablespaces").
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截断文件表空间（file-per-table tablespace）非常快速，可以释放磁盘空间供操作系统重复使用，而不仅仅是`InnoDB`。参见[第17.6.3.2节，“File-Per-Table
    Tablespaces”](innodb-file-per-table-tablespaces.html "17.6.3.2 File-Per-Table
    Tablespaces")。
- en: The storage layout for table data is more efficient for [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") and long text fields, with the `DYNAMIC` row format. See
    [Section 17.10, “InnoDB Row Formats”](innodb-row-format.html "17.10 InnoDB Row
    Formats").
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表数据的存储布局对于[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")和长文本字段，使用`DYNAMIC`行格式更有效。参见[第17.10节，“InnoDB行格式”](innodb-row-format.html
    "17.10 InnoDB Row Formats")。
- en: You can monitor the internal workings of the storage engine by querying `INFORMATION_SCHEMA`
    tables. See [Section 17.15, “InnoDB INFORMATION_SCHEMA Tables”](innodb-information-schema.html
    "17.15 InnoDB INFORMATION_SCHEMA Tables").
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过查询`INFORMATION_SCHEMA`表，您可以监控存储引擎的内部工作方式。参见[第17.15节，“InnoDB INFORMATION_SCHEMA表”](innodb-information-schema.html
    "17.15 InnoDB INFORMATION_SCHEMA Tables")。
- en: You can monitor the performance details of the storage engine by querying Performance
    Schema tables. See [Section 17.16, “InnoDB Integration with MySQL Performance
    Schema”](innodb-performance-schema.html "17.16 InnoDB Integration with MySQL Performance
    Schema").
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过查询Performance Schema表，您可以监控存储引擎的性能详细信息。参见[第17.16节，“InnoDB与MySQL Performance
    Schema集成”](innodb-performance-schema.html "17.16 InnoDB Integration with MySQL
    Performance Schema")。
- en: You can mix `InnoDB` tables with tables from other MySQL storage engines, even
    within the same statement. For example, you can use a join operation to combine
    data from `InnoDB` and [`MEMORY`](memory-storage-engine.html "18.3 The MEMORY
    Storage Engine") tables in a single query.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在同一语句中混合使用`InnoDB`表和其他MySQL存储引擎的表。例如，您可以使用连接操作将`InnoDB`和[`MEMORY`](memory-storage-engine.html
    "18.3 The MEMORY Storage Engine")表的数据合并在单个查询中。
- en: '`InnoDB` has been designed for CPU efficiency and maximum performance when
    processing large data volumes.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`已经为CPU效率和处理大数据量时的最大性能而设计。'
- en: '`InnoDB` tables can handle large quantities of data, even on operating systems
    where file size is limited to 2GB.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`表可以处理大量数据，即使在文件大小限制为2GB的操作系统上也可以。'
- en: For `InnoDB`-specific tuning techniques you can apply to your MySQL server and
    application code, see [Section 10.5, “Optimizing for InnoDB Tables”](optimizing-innodb.html
    "10.5 Optimizing for InnoDB Tables").
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您可以应用于MySQL服务器和应用程序代码的`InnoDB`特定调优技术，请参见[第10.5节，“针对InnoDB表进行优化”](optimizing-innodb.html
    "10.5 Optimizing for InnoDB Tables")。
