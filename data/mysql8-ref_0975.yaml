- en: 15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.3.1 `START TRANSACTION`、`COMMIT`和`ROLLBACK`语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/commit.html](https://dev.mysql.com/doc/refman/8.0/en/commit.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/commit.html](https://dev.mysql.com/doc/refman/8.0/en/commit.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These statements provide control over use of [transactions](glossary.html#glos_transaction
    "transaction"):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句提供了对[事务](glossary.html#glos_transaction "transaction")的控制：
- en: '`START TRANSACTION` or `BEGIN` start a new transaction.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`START TRANSACTION` 或 `BEGIN` 开始一个新事务。'
- en: '`COMMIT` commits the current transaction, making its changes permanent.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COMMIT` 提交当前事务，使其更改永久生效。'
- en: '`ROLLBACK` rolls back the current transaction, canceling its changes.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ROLLBACK` 回滚当前事务，取消其更改。'
- en: '`SET autocommit` disables or enables the default autocommit mode for the current
    session.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SET autocommit` 禁用或启用当前会话的默认自动提交模式。'
- en: By default, MySQL runs with [autocommit](glossary.html#glos_autocommit "autocommit")
    mode enabled. This means that, when not otherwise inside a transaction, each statement
    is atomic, as if it were surrounded by `START TRANSACTION` and `COMMIT`. You cannot
    use `ROLLBACK` to undo the effect; however, if an error occurs during statement
    execution, the statement is rolled back.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，MySQL 运行时启用[自动提交](glossary.html#glos_autocommit "autocommit")模式。这意味着，当不在事务内时，每个语句都是原子的，就好像被
    `START TRANSACTION` 和 `COMMIT` 包围。您无法使用 `ROLLBACK` 撤消效果；但是，如果在执行语句时发生错误，则会回滚该语句。
- en: 'To disable autocommit mode implicitly for a single series of statements, use
    the `START TRANSACTION` statement:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要隐式禁用单个语句序列的自动提交模式，请使用 `START TRANSACTION` 语句：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With `START TRANSACTION`, autocommit remains disabled until you end the transaction
    with `COMMIT` or `ROLLBACK`. The autocommit mode then reverts to its previous
    state.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `START TRANSACTION`，自动提交保持禁用，直到您使用 `COMMIT` 或 `ROLLBACK` 结束事务。然后自动提交模式恢复到先前的状态。
- en: '`START TRANSACTION` permits several modifiers that control transaction characteristics.
    To specify multiple modifiers, separate them by commas.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`START TRANSACTION` 允许多个修饰符控制事务特性。要指定多个修饰符，请用逗号分隔它们。'
- en: The `WITH CONSISTENT SNAPSHOT` modifier starts a [consistent read](glossary.html#glos_consistent_read
    "consistent read") for storage engines that are capable of it. This applies only
    to `InnoDB`. The effect is the same as issuing a `START TRANSACTION` followed
    by a [`SELECT`](select.html "15.2.13 SELECT Statement") from any `InnoDB` table.
    See [Section 17.7.2.3, “Consistent Nonlocking Reads”](innodb-consistent-read.html
    "17.7.2.3 Consistent Nonlocking Reads"). The `WITH CONSISTENT SNAPSHOT` modifier
    does not change the current transaction [isolation level](glossary.html#glos_isolation_level
    "isolation level"), so it provides a consistent snapshot only if the current isolation
    level is one that permits a consistent read. The only isolation level that permits
    a consistent read is [`REPEATABLE READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read).
    For all other isolation levels, the `WITH CONSISTENT SNAPSHOT` clause is ignored.
    A warning is generated when the `WITH CONSISTENT SNAPSHOT` clause is ignored.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WITH CONSISTENT SNAPSHOT` 修饰符为能够执行此操作的存储引擎启动[一致性读取](glossary.html#glos_consistent_read
    "consistent read")。这仅适用于 `InnoDB`。其效果与发出 `START TRANSACTION` 然后从任何 `InnoDB` 表中进行
    [`SELECT`](select.html "15.2.13 SELECT Statement") 相同。请参阅[Section 17.7.2.3, “Consistent
    Nonlocking Reads”](innodb-consistent-read.html "17.7.2.3 Consistent Nonlocking
    Reads")。`WITH CONSISTENT SNAPSHOT` 修饰符不会更改当前事务的[隔离级别](glossary.html#glos_isolation_level
    "isolation level")，因此仅在当前隔离级别允许一致性读取时才提供一致的快照。唯一允许一致性读取的隔离级别是 [`REPEATABLE READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read)。对于所有其他隔离级别，`WITH
    CONSISTENT SNAPSHOT` 子句将被忽略。当忽略 `WITH CONSISTENT SNAPSHOT` 子句时会生成警告。'
- en: The `READ WRITE` and `READ ONLY` modifiers set the transaction access mode.
    They permit or prohibit changes to tables used in the transaction. The `READ ONLY`
    restriction prevents the transaction from modifying or locking both transactional
    and nontransactional tables that are visible to other transactions; the transaction
    can still modify or lock temporary tables.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ WRITE` 和 `READ ONLY` 修饰符设置事务访问模式。它们允许或禁止对事务中使用的表进行更改。`READ ONLY` 限制阻止事务修改或锁定对其他事务可见的事务和非事务表；事务仍然可以修改或锁定临时表。'
- en: MySQL enables extra optimizations for queries on `InnoDB` tables when the transaction
    is known to be read-only. Specifying `READ ONLY` ensures these optimizations are
    applied in cases where the read-only status cannot be determined automatically.
    See [Section 10.5.3, “Optimizing InnoDB Read-Only Transactions”](innodb-performance-ro-txn.html
    "10.5.3 Optimizing InnoDB Read-Only Transactions") for more information.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当事务已知为只读时，MySQL在`InnoDB`表上的查询会启用额外的优化。指定`READ ONLY`可确保在无法自动确定只读状态的情况下应用这些优化。有关更多信息，请参阅[第10.5.3节，“优化InnoDB只读事务”](innodb-performance-ro-txn.html
    "10.5.3 优化InnoDB只读事务")。
- en: If no access mode is specified, the default mode applies. Unless the default
    has been changed, it is read/write. It is not permitted to specify both `READ
    WRITE` and `READ ONLY` in the same statement.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未指定访问模式，则应用默认模式。除非默认值已更改，否则为读/写。在同一语句中不允许同时指定`READ WRITE`和`READ ONLY`。
- en: In read-only mode, it remains possible to change tables created with the `TEMPORARY`
    keyword using DML statements. Changes made with DDL statements are not permitted,
    just as with permanent tables.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在只读模式下，仍然可以使用DML语句更改使用`TEMPORARY`关键字创建的表。使用DDL语句进行的更改是不允许的，就像永久表一样。
- en: For additional information about transaction access mode, including ways to
    change the default mode, see [Section 15.3.7, “SET TRANSACTION Statement”](set-transaction.html
    "15.3.7 SET TRANSACTION Statement").
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关事务访问模式的其他信息，包括更改默认模式的方法，请参阅[第15.3.7节，“SET TRANSACTION语句”](set-transaction.html
    "15.3.7 SET TRANSACTION语句")。
- en: If the [`read_only`](server-system-variables.html#sysvar_read_only) system variable
    is enabled, explicitly starting a transaction with `START TRANSACTION READ WRITE`
    requires the [`CONNECTION_ADMIN`](privileges-provided.html#priv_connection-admin)
    privilege (or the deprecated [`SUPER`](privileges-provided.html#priv_super) privilege).
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果启用了[`read_only`](server-system-variables.html#sysvar_read_only)系统变量，则使用`START
    TRANSACTION READ WRITE`显式启动事务需要[`CONNECTION_ADMIN`](privileges-provided.html#priv_connection-admin)权限（或已弃用的[`SUPER`](privileges-provided.html#priv_super)权限）。
- en: Important
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Many APIs used for writing MySQL client applications (such as JDBC) provide
    their own methods for starting transactions that can (and sometimes should) be
    used instead of sending a `START TRANSACTION` statement from the client. See [Chapter 31,
    *Connectors and APIs*](connectors-apis.html "Chapter 31 Connectors and APIs"),
    or the documentation for your API, for more information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 许多用于编写MySQL客户端应用程序的API（如JDBC）提供了自己的启动事务方法，可以（有时应该）代替从客户端发送`START TRANSACTION`语句。有关更多信息，请参阅[第31章，“连接器和API”](connectors-apis.html
    "第31章 连接器和API")，或您的API文档。
- en: 'To disable autocommit mode explicitly, use the following statement:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要显式禁用自动提交模式，请使用以下语句：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After disabling autocommit mode by setting the [`autocommit`](server-system-variables.html#sysvar_autocommit)
    variable to zero, changes to transaction-safe tables (such as those for [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") or [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0")) are not made permanent immediately. You must use [`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements") to store your changes
    to disk or `ROLLBACK` to ignore the changes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`autocommit`](server-system-variables.html#sysvar_autocommit)变量设置为零以禁用自动提交模式后，对事务安全表（例如[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")或[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")）的更改不会立即生效。您必须使用[`COMMIT`](commit.html
    "15.3.1 开始事务，提交和回滚语句")将更改存储到磁盘，或使用`ROLLBACK`忽略更改。
- en: '[`autocommit`](server-system-variables.html#sysvar_autocommit) is a session
    variable and must be set for each session. To disable autocommit mode for each
    new connection, see the description of the [`autocommit`](server-system-variables.html#sysvar_autocommit)
    system variable at [Section 7.1.8, “Server System Variables”](server-system-variables.html
    "7.1.8 Server System Variables").'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`autocommit`](server-system-variables.html#sysvar_autocommit) 是一个会话变量，必须为每个会话设置。要为每个新连接禁用自动提交模式，请参阅[`autocommit`](server-system-variables.html#sysvar_autocommit)系统变量在[第7.1.8节，“服务器系统变量”](server-system-variables.html
    "7.1.8 服务器系统变量")的描述。'
- en: '`BEGIN` and `BEGIN WORK` are supported as aliases of `START TRANSACTION` for
    initiating a transaction. `START TRANSACTION` is standard SQL syntax, is the recommended
    way to start an ad-hoc transaction, and permits modifiers that `BEGIN` does not.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`BEGIN`和`BEGIN WORK`可作为`START TRANSACTION`的别名来启动事务。`START TRANSACTION`是标准SQL语法，是启动临时事务的推荐方式，并允许`BEGIN`不支持的修饰符。'
- en: The `BEGIN` statement differs from the use of the `BEGIN` keyword that starts
    a [`BEGIN ... END`](begin-end.html "15.6.1 BEGIN ... END Compound Statement")
    compound statement. The latter does not begin a transaction. See [Section 15.6.1,
    “BEGIN ... END Compound Statement”](begin-end.html "15.6.1 BEGIN ... END Compound
    Statement").
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`BEGIN`语句与使用`BEGIN`关键字开始[`BEGIN ... END`](begin-end.html "15.6.1 BEGIN ...
    END Compound Statement")复合语句的方式不同。后者不会开始事务。请参见[第15.6.1节，“BEGIN ... END复合语句”](begin-end.html
    "15.6.1 BEGIN ... END Compound Statement")。'
- en: Note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Within all stored programs (stored procedures and functions, triggers, and events),
    the parser treats `BEGIN [WORK]` as the beginning of a [`BEGIN ... END`](begin-end.html
    "15.6.1 BEGIN ... END Compound Statement") block. Begin a transaction in this
    context with [`START TRANSACTION`](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements") instead.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有存储程序（存储过程和函数、触发器和事件）中，解析器将`BEGIN [WORK]`视为[`BEGIN ... END`](begin-end.html
    "15.6.1 BEGIN ... END Compound Statement")块的开始。在这种情况下使用[`START TRANSACTION`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")开始一个事务。
- en: The optional `WORK` keyword is supported for `COMMIT` and `ROLLBACK`, as are
    the `CHAIN` and `RELEASE` clauses. `CHAIN` and `RELEASE` can be used for additional
    control over transaction completion. The value of the [`completion_type`](server-system-variables.html#sysvar_completion_type)
    system variable determines the default completion behavior. See [Section 7.1.8,
    “Server System Variables”](server-system-variables.html "7.1.8 Server System Variables").
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的`WORK`关键字支持`COMMIT`和`ROLLBACK`，以及`CHAIN`和`RELEASE`子句。`CHAIN`和`RELEASE`可用于对事务完成进行额外控制。[`completion_type`](server-system-variables.html#sysvar_completion_type)系统变量的值确定默认完成行为。请参见[第7.1.8节，“服务器系统变量”](server-system-variables.html
    "7.1.8 服务器系统变量")。
- en: The `AND CHAIN` clause causes a new transaction to begin as soon as the current
    one ends, and the new transaction has the same isolation level as the just-terminated
    transaction. The new transaction also uses the same access mode (`READ WRITE`
    or `READ ONLY`) as the just-terminated transaction. The `RELEASE` clause causes
    the server to disconnect the current client session after terminating the current
    transaction. Including the `NO` keyword suppresses `CHAIN` or `RELEASE` completion,
    which can be useful if the [`completion_type`](server-system-variables.html#sysvar_completion_type)
    system variable is set to cause chaining or release completion by default.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`AND CHAIN`子句导致新事务在当前事务结束后立即开始，并且新事务具有与刚终止事务相同的隔离级别。新事务还使用与刚终止事务相同的访问模式（`READ
    WRITE`或`READ ONLY`）。`RELEASE`子句导致服务器在终止当前事务后断开当前客户端会话。包括`NO`关键字可以抑制`CHAIN`或`RELEASE`完成，如果[`completion_type`](server-system-variables.html#sysvar_completion_type)系统变量设置为默认导致链接或释放完成时，这可能很有用。'
- en: Beginning a transaction causes any pending transaction to be committed. See
    [Section 15.3.3, “Statements That Cause an Implicit Commit”](implicit-commit.html
    "15.3.3 Statements That Cause an Implicit Commit"), for more information.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 开始事务会导致任何待处理的事务被提交。更多信息请参见[第15.3.3节，“导致隐式提交的语句”](implicit-commit.html "15.3.3 导致隐式提交的语句")。
- en: Beginning a transaction also causes table locks acquired with [`LOCK TABLES`](lock-tables.html
    "15.3.6 LOCK TABLES and UNLOCK TABLES Statements") to be released, as though you
    had executed [`UNLOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK
    TABLES Statements"). Beginning a transaction does not release a global read lock
    acquired with [`FLUSH TABLES WITH READ LOCK`](flush.html#flush-tables-with-read-lock).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 开始事务还会导致使用[`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES
    Statements")获取的表锁被释放，就好像执行了[`UNLOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES
    and UNLOCK TABLES Statements")一样。开始事务不会释放使用[`FLUSH TABLES WITH READ LOCK`](flush.html#flush-tables-with-read-lock)获取的全局读锁。
- en: 'For best results, transactions should be performed using only tables managed
    by a single transaction-safe storage engine. Otherwise, the following problems
    can occur:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得最佳结果，事务应仅使用单个事务安全存储引擎管理的表执行。否则，可能会出现以下问题：
- en: If you use tables from more than one transaction-safe storage engine (such as
    `InnoDB`), and the transaction isolation level is not [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable),
    it is possible that when one transaction commits, another ongoing transaction
    that uses the same tables sees only some of the changes made by the first transaction.
    That is, the atomicity of transactions is not guaranteed with mixed engines and
    inconsistencies can result. (If mixed-engine transactions are infrequent, you
    can use [`SET TRANSACTION ISOLATION LEVEL`](set-transaction.html "15.3.7 SET TRANSACTION
    Statement") to set the isolation level to [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)
    on a per-transaction basis as necessary.)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用来自多个事务安全存储引擎（如`InnoDB`）的表，并且事务隔离级别不是[`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)，那么当一个事务提交时，使用相同表的另一个正在进行的事务可能只看到第一个事务所做的一部分更改。也就是说，混合引擎的事务的原子性不能得到保证，可能会导致不一致性。（如果混合引擎事务不频繁，您可以使用[`SET
    TRANSACTION ISOLATION LEVEL`](set-transaction.html "15.3.7 SET TRANSACTION Statement")根据需要在每个事务基础上将隔离级别设置为[`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)。）
- en: If you use tables that are not transaction-safe within a transaction, changes
    to those tables are stored at once, regardless of the status of autocommit mode.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在事务中使用非事务安全的表，那么对这些表的更改将立即存储，而不考虑自动提交模式的状态。
- en: If you issue a [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION, COMMIT, and
    ROLLBACK Statements") statement after updating a nontransactional table within
    a transaction, an [`ER_WARNING_NOT_COMPLETE_ROLLBACK`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_warning_not_complete_rollback)
    warning occurs. Changes to transaction-safe tables are rolled back, but not changes
    to nontransaction-safe tables.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在事务中更新非事务表后发出[`ROLLBACK`](commit.html "15.3.1 START TRANSACTION, COMMIT, and
    ROLLBACK Statements")语句，将会出现[`ER_WARNING_NOT_COMPLETE_ROLLBACK`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_warning_not_complete_rollback)警告。事务安全表的更改将被回滚，但非事务安全表的更改不会被回滚。
- en: 'Each transaction is stored in the binary log in one chunk, upon [`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements"). Transactions that
    are rolled back are not logged. (**Exception**: Modifications to nontransactional
    tables cannot be rolled back. If a transaction that is rolled back includes modifications
    to nontransactional tables, the entire transaction is logged with a [`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements") statement at the
    end to ensure that modifications to the nontransactional tables are replicated.)
    See [Section 7.4.4, “The Binary Log”](binary-log.html "7.4.4 The Binary Log").'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个事务在[`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK
    Statements")时以一个块的形式存储在二进制日志中。被回滚的事务不会被记录。（**例外**：对非事务表的修改无法回滚。如果被回滚的事务包括对非事务表的修改，则整个事务将在结尾处使用[`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")语句记录，以确保对非事务表的修改被复制。）请参阅[Section 7.4.4,
    “The Binary Log”](binary-log.html "7.4.4 The Binary Log")。
- en: You can change the isolation level or access mode for transactions with the
    [`SET TRANSACTION`](set-transaction.html "15.3.7 SET TRANSACTION Statement") statement.
    See [Section 15.3.7, “SET TRANSACTION Statement”](set-transaction.html "15.3.7 SET
    TRANSACTION Statement").
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[`SET TRANSACTION`](set-transaction.html "15.3.7 SET TRANSACTION Statement")语句更改事务的隔离级别或访问模式。请参阅[Section 15.3.7,
    “SET TRANSACTION Statement”](set-transaction.html "15.3.7 SET TRANSACTION Statement")。
- en: Rolling back can be a slow operation that may occur implicitly without the user
    having explicitly asked for it (for example, when an error occurs). Because of
    this, [`SHOW PROCESSLIST`](show-processlist.html "15.7.7.29 SHOW PROCESSLIST Statement")
    displays `Rolling back` in the `State` column for the session, not only for explicit
    rollbacks performed with the [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements") statement but also for implicit rollbacks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚可能是一个缓慢的操作，可能会在用户没有明确要求的情况下隐式发生（例如，当发生错误时）。因此，[`SHOW PROCESSLIST`](show-processlist.html
    "15.7.7.29 SHOW PROCESSLIST Statement")在会话的`State`列中显示`Rolling back`，不仅适用于使用[`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")语句执行的显式回滚，还适用于隐式回滚。
- en: Note
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In MySQL 8.0, `BEGIN`, `COMMIT`, and `ROLLBACK` are not affected by [`--replicate-do-db`](replication-options-replica.html#option_mysqld_replicate-do-db)
    or [`--replicate-ignore-db`](replication-options-replica.html#option_mysqld_replicate-ignore-db)
    rules.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，`BEGIN`、`COMMIT`和`ROLLBACK`不受[`--replicate-do-db`](replication-options-replica.html#option_mysqld_replicate-do-db)或[`--replicate-ignore-db`](replication-options-replica.html#option_mysqld_replicate-ignore-db)规则的影响。
- en: When `InnoDB` performs a complete rollback of a transaction, all locks set by
    the transaction are released. If a single SQL statement within a transaction rolls
    back as a result of an error, such as a duplicate key error, locks set by the
    statement are preserved while the transaction remains active. This happens because
    `InnoDB` stores row locks in a format such that it cannot know afterward which
    lock was set by which statement.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当`InnoDB`执行事务的完全回滚时，事务设置的所有锁都会被释放。如果事务中的一个SQL语句由于错误（如重复键错误）而回滚，那么该语句设置的锁将在事务保持活动状态时保留。这是因为`InnoDB`以一种格式存储行锁，以至于事后无法知道哪个锁是由哪个语句设置的。
- en: If a [`SELECT`](select.html "15.2.13 SELECT Statement") statement within a transaction
    calls a stored function, and a statement within the stored function fails, that
    statement rolls back. If [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements") is executed for the transaction subsequently, the entire
    transaction rolls back.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务中的一个[`SELECT`](select.html "15.2.13 SELECT Statement")语句调用了一个存储函数，并且存储函数中的一个语句失败，那么该语句将会回滚。如果随后为该事务执行[`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")，整个事务将会回滚。
