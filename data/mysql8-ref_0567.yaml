- en: 10.4.1 Optimizing Data Size
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.4.1 优化数据大小
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/data-size.html](https://dev.mysql.com/doc/refman/8.0/en/data-size.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/data-size.html](https://dev.mysql.com/doc/refman/8.0/en/data-size.html)
- en: Design your tables to minimize their space on the disk. This can result in huge
    improvements by reducing the amount of data written to and read from disk. Smaller
    tables normally require less main memory while their contents are being actively
    processed during query execution. Any space reduction for table data also results
    in smaller indexes that can be processed faster.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 设计表格以最小化它们在磁盘上的空间占用。通过减少写入和从磁盘读取的数据量，可以实现巨大的改进。较小的表通常在查询执行期间主动处理其内容时需要较少的主内存。对表数据的任何空间减少也会导致更小的索引，可以更快地处理。
- en: MySQL supports many different storage engines (table types) and row formats.
    For each table, you can decide which storage and indexing method to use. Choosing
    the proper table format for your application can give you a big performance gain.
    See [Chapter 17, *The InnoDB Storage Engine*](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine"), and [Chapter 18, *Alternative Storage Engines*](storage-engines.html
    "Chapter 18 Alternative Storage Engines").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL支持许多不同的存储引擎（表类型）和行格式。对于每个表，您可以决定使用哪种存储和索引方法。为您的应用程序选择适当的表格格式可以带来很大的性能提升。请参阅[第17章，*InnoDB存储引擎*](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")和[第18章，*替代存储引擎*](storage-engines.html "第18章 替代存储引擎")。
- en: 'You can get better performance for a table and minimize storage space by using
    the techniques listed here:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用以下列出的技术获得表的更好性能并最小化存储空间：
- en: '[Table Columns](data-size.html#data-size-table-columns "Table Columns")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[表列](data-size.html#data-size-table-columns "表列")'
- en: '[Row Format](data-size.html#data-size-row-format "Row Format")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[行格式](data-size.html#data-size-row-format "行格式")'
- en: '[Indexes](data-size.html#data-size-indexes "Indexes")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[索引](data-size.html#data-size-indexes "索引")'
- en: '[Joins](data-size.html#data-size-joins "Joins")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[连接](data-size.html#data-size-joins "连接")'
- en: '[Normalization](data-size.html#data-size-normalization "Normalization")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[规范化](data-size.html#data-size-normalization "规范化")'
- en: Table Columns
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 表列
- en: Use the most efficient (smallest) data types possible. MySQL has many specialized
    types that save disk space and memory. For example, use the smaller integer types
    if possible to get smaller tables. [`MEDIUMINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") is
    often a better choice than [`INT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") because a [`MEDIUMINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT") column uses 25% less space.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可能的最有效（最小）数据类型。MySQL有许多专门的类型可以节省磁盘空间和内存。例如，尽可能使用较小的整数类型以获得更小的表。[`MEDIUMINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")通常比[`INT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")更好，因为[`MEDIUMINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")列使用的空间少25%。
- en: Declare columns to be `NOT NULL` if possible. It makes SQL operations faster,
    by enabling better use of indexes and eliminating overhead for testing whether
    each value is `NULL`. You also save some storage space, one bit per column. If
    you really need `NULL` values in your tables, use them. Just avoid the default
    setting that allows `NULL` values in every column.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能，声明列为`NOT NULL`。这样可以通过更好地使用索引和消除测试每个值是否为`NULL`的开销来加快SQL操作。您还可以节省一些存储空间，每列一个比特。如果您确实需要在表中使用`NULL`值，请使用它们。只需避免允许每列都有`NULL`值的默认设置。
- en: Row Format
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 行格式
- en: '`InnoDB` tables are created using the `DYNAMIC` row format by default. To use
    a row format other than `DYNAMIC`, configure [`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format),
    or specify the `ROW_FORMAT` option explicitly in a [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") or [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") statement.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`表默认使用`DYNAMIC`行格式创建。要使用除`DYNAMIC`之外的行格式，请配置[`innodb_default_row_format`](innodb-parameters.html#sysvar_innodb_default_row_format)，或在[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")或[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")语句中明确指定`ROW_FORMAT`选项。'
- en: The compact family of row formats, which includes `COMPACT`, `DYNAMIC`, and
    `COMPRESSED`, decreases row storage space at the cost of increasing CPU use for
    some operations. If your workload is a typical one that is limited by cache hit
    rates and disk speed it is likely to be faster. If it is a rare case that is limited
    by CPU speed, it might be slower.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 紧凑系列行格式，包括`COMPACT`、`DYNAMIC`和`COMPRESSED`，减少了行存储空间，但增加了某些操作的CPU使用。如果您的工作负载受到缓存命中率和磁盘速度的限制，那么它可能会更快。如果是受CPU速度限制的罕见情况，那么它可能会更慢。
- en: The compact family of row formats also optimizes [`CHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") column storage when using a variable-length character
    set such as `utf8mb3` or `utf8mb4`. With `ROW_FORMAT=REDUNDANT`, `CHAR(*`N`*)`
    occupies *`N`* × the maximum byte length of the character set. Many languages
    can be written primarily using single-byte `utf8mb3`or `utf8mb4` characters, so
    a fixed storage length often wastes space. With the compact family of rows formats,
    `InnoDB` allocates a variable amount of storage in the range of *`N`* to *`N`*
    × the maximum byte length of the character set for these columns by stripping
    trailing spaces. The minimum storage length is *`N`* bytes to facilitate in-place
    updates in typical cases. For more information, see [Section 17.10, “InnoDB Row
    Formats”](innodb-row-format.html "17.10 InnoDB Row Formats").
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用变长字符集（如`utf8mb3`或`utf8mb4`）时，紧凑系列行格式还优化了[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")列的存储。使用`ROW_FORMAT=REDUNDANT`时，`CHAR(*N*)`占用*`N`*
    × 字符集的最大字节长度。许多语言主要使用单字节的`utf8mb3`或`utf8mb4`字符，因此固定存储长度通常会浪费空间。使用紧凑系列行格式，`InnoDB`为这些列分配一个变量存储量，范围从*`N`*到*`N`*
    × 字符集的最大字节长度，通过去除尾随空格。最小存储长度为*`N`*字节，以便在典型情况下进行原地更新。有关更多信息，请参阅[第17.10节，“InnoDB行格式”](innodb-row-format.html
    "17.10 InnoDB行格式")。
- en: To minimize space even further by storing table data in compressed form, specify
    `ROW_FORMAT=COMPRESSED` when creating `InnoDB` tables, or run the [**myisampack**](myisampack.html
    "6.6.6 myisampack — Generate Compressed, Read-Only MyISAM Tables") command on
    an existing `MyISAM` table. (`InnoDB` compressed tables are readable and writable,
    while `MyISAM` compressed tables are read-only.)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了通过以压缩形式存储表数据来进一步减少空间，创建`InnoDB`表时指定`ROW_FORMAT=COMPRESSED`，或在现有的`MyISAM`表上运行[**myisampack**](myisampack.html
    "6.6.6 myisampack — 生成压缩的只读MyISAM表")命令。(`InnoDB`压缩表是可读写的，而`MyISAM`压缩表是只读的。)
- en: For `MyISAM` tables, if you do not have any variable-length columns ([`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), [`TEXT`](blob.html "13.3.4 The BLOB and
    TEXT Types"), or [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") columns),
    a fixed-size row format is used. This is faster but may waste some space. See
    [Section 18.2.3, “MyISAM Table Storage Formats”](myisam-table-formats.html "18.2.3 MyISAM
    Table Storage Formats"). You can hint that you want to have fixed length rows
    even if you have [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") columns
    with the [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")
    option `ROW_FORMAT=FIXED`.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`MyISAM`表，如果没有任何变长列（[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型"), [`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型"), 或 [`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")列），则使用固定大小的行格式。这样做速度更快，但可能会浪费一些空间。请参阅[第18.2.3节，“MyISAM表存储格式”](myisam-table-formats.html
    "18.2.3 MyISAM表存储格式")。您可以通过使用`CREATE TABLE`选项`ROW_FORMAT=FIXED`来提示希望拥有固定长度行，即使您有[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")列。
- en: Indexes
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 索引
- en: The primary index of a table should be as short as possible. This makes identification
    of each row easy and efficient. For `InnoDB` tables, the primary key columns are
    duplicated in each secondary index entry, so a short primary key saves considerable
    space if you have many secondary indexes.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表的主索引应尽可能短。这样可以轻松高效地识别每一行。对于`InnoDB`表，主键列在每个次要索引条目中都会重复，因此如果有许多次要索引，则较短的主键可以节省大量空间。
- en: Create only the indexes that you need to improve query performance. Indexes
    are good for retrieval, but slow down insert and update operations. If you access
    a table mostly by searching on a combination of columns, create a single composite
    index on them rather than a separate index for each column. The first part of
    the index should be the column most used. If you *always* use many columns when
    selecting from the table, the first column in the index should be the one with
    the most duplicates, to obtain better compression of the index.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只创建需要改善查询性能的索引。索引对检索很有用，但会减慢插入和更新操作。如果你主要通过在多个列上搜索来访问表，那么为它们创建一个单一的复合索引，而不是为每个列单独创建索引。索引的第一部分应该是最常用的列。如果你在从表中选择时总是使用许多列，那么索引中的第一列应该是具有最多重复项的列，以获得更好的索引压缩。
- en: If it is very likely that a long string column has a unique prefix on the first
    number of characters, it is better to index only this prefix, using MySQL's support
    for creating an index on the leftmost part of the column (see [Section 15.1.15,
    “CREATE INDEX Statement”](create-index.html "15.1.15 CREATE INDEX Statement")).
    Shorter indexes are faster, not only because they require less disk space, but
    because they also give you more hits in the index cache, and thus fewer disk seeks.
    See [Section 7.1.1, “Configuring the Server”](server-configuration.html "7.1.1 Configuring
    the Server").
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个长字符串列很可能在前几个字符上有唯一的前缀，最好只对这个前缀建立索引，使用MySQL支持在列的最左边部分创建索引（参见[Section 15.1.15,
    “CREATE INDEX Statement”](create-index.html "15.1.15 CREATE INDEX Statement")）。较短的索引更快，不仅因为它们需要更少的磁盘空间，而且因为它们在索引缓存中提供更多的命中，从而减少磁盘查找。参见[Section 7.1.1,
    “Configuring the Server”](server-configuration.html "7.1.1 Configuring the Server")。
- en: Joins
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接
- en: In some circumstances, it can be beneficial to split into two a table that is
    scanned very often. This is especially true if it is a dynamic-format table and
    it is possible to use a smaller static format table that can be used to find the
    relevant rows when scanning the table.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些情况下，将经常扫描的表拆分为两个部分可能是有益的。特别是如果它是一个动态格式的表，并且可以使用一个较小的静态格式表来在扫描表时找到相关行。
- en: Declare columns with identical information in different tables with identical
    data types, to speed up joins based on the corresponding columns.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明在不同表中具有相同信息的列具有相同的数据类型，以加快基于相应列的连接速度。
- en: Keep column names simple, so that you can use the same name across different
    tables and simplify join queries. For example, in a table named `customer`, use
    a column name of `name` instead of `customer_name`. To make your names portable
    to other SQL servers, consider keeping them shorter than 18 characters.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持列名简单，这样你可以在不同表中使用相同的名称并简化连接查询。例如，在名为`customer`的表中，使用`name`作为列名，而不是`customer_name`。为了使你的名称在其他SQL服务器上可移植，考虑将它们保持在18个字符以下。
- en: Normalization
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 规范化
- en: Normally, try to keep all data nonredundant (observing what is referred to in
    database theory as third normal form). Instead of repeating lengthy values such
    as names and addresses, assign them unique IDs, repeat these IDs as needed across
    multiple smaller tables, and join the tables in queries by referencing the IDs
    in the join clause.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常情况下，尽量保持所有数据非冗余（遵循数据库理论中所谓的第三范式）。不要重复冗长的数值，如姓名和地址，给它们分配唯一的ID，根据需要在多个较小的表中重复这些ID，并通过在连接子句中引用ID来在查询中连接这些表。
- en: If speed is more important than disk space and the maintenance costs of keeping
    multiple copies of data, for example in a business intelligence scenario where
    you analyze all the data from large tables, you can relax the normalization rules,
    duplicating information or creating summary tables to gain more speed.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果速度比磁盘空间和保持多个数据副本的维护成本更重要，例如在商业智能场景中，你分析来自大表的所有数据，你可以放松规范化规则，复制信息或创建摘要表以获得更快的速度。
