- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/key-cache-restructuring.html](https://dev.mysql.com/doc/refman/8.0/en/key-cache-restructuring.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/key-cache-restructuring.html](https://dev.mysql.com/doc/refman/8.0/en/key-cache-restructuring.html)
- en: 10.10.2.6 Restructuring a Key Cache
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.10.2.6 重构关键缓存
- en: 'A key cache can be restructured at any time by updating its parameter values.
    For example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过更新其参数值随时重构关键缓存。例如：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you assign to either the [`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)
    or [`key_cache_block_size`](server-system-variables.html#sysvar_key_cache_block_size)
    key cache component a value that differs from the component's current value, the
    server destroys the cache's old structure and creates a new one based on the new
    values. If the cache contains any dirty blocks, the server saves them to disk
    before destroying and re-creating the cache. Restructuring does not occur if you
    change other key cache parameters.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)或[`key_cache_block_size`](server-system-variables.html#sysvar_key_cache_block_size)关键缓存组件分配一个与组件当前值不同的值，则服务器会销毁缓存的旧结构，并根据新值创建一个新结构。如果缓存包含任何脏块，服务器会在销毁和重新创建缓存之前将它们保存到磁盘。如果更改其他关键缓存参数，则不会发生重构。
- en: When restructuring a key cache, the server first flushes the contents of any
    dirty buffers to disk. After that, the cache contents become unavailable. However,
    restructuring does not block queries that need to use indexes assigned to the
    cache. Instead, the server directly accesses the table indexes using native file
    system caching. File system caching is not as efficient as using a key cache,
    so although queries execute, a slowdown can be anticipated. After the cache has
    been restructured, it becomes available again for caching indexes assigned to
    it, and the use of file system caching for the indexes ceases.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 重构关键缓存时，服务器首先将任何脏缓冲区的内容刷新到磁盘。之后，缓存内容变得不可用。然而，重构不会阻塞需要使用分配给缓存的索引的查询。相反，服务器直接使用本地文件系统缓存访问表索引。文件系统缓存不如使用关键缓存高效，因此虽然查询会执行，但可以预期会有减速。在缓存重构后，它再次可用于缓存分配给它的索引，并且索引的文件系统缓存使用停止。
