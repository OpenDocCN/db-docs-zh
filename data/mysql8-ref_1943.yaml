- en: 28.3.48 The INFORMATION_SCHEMA VIEWS Table
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 28.3.48 The INFORMATION_SCHEMA VIEWS Table
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/information-schema-views-table.html](https://dev.mysql.com/doc/refman/8.0/en/information-schema-views-table.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/information-schema-views-table.html](https://dev.mysql.com/doc/refman/8.0/en/information-schema-views-table.html)
- en: The [`VIEWS`](information-schema-views-table.html "28.3.48 The INFORMATION_SCHEMA
    VIEWS Table") table provides information about views in databases. You must have
    the [`SHOW VIEW`](privileges-provided.html#priv_show-view) privilege to access
    this table.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`VIEWS`](information-schema-views-table.html "28.3.48 The INFORMATION_SCHEMA
    VIEWS Table") 表提供有关数据库中视图的信息。您必须具有 [`SHOW VIEW`](privileges-provided.html#priv_show-view)
    权限才能访问此表。'
- en: 'The [`VIEWS`](information-schema-views-table.html "28.3.48 The INFORMATION_SCHEMA
    VIEWS Table") table has these columns:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`VIEWS`](information-schema-views-table.html "28.3.48 The INFORMATION_SCHEMA
    VIEWS Table") 表包含以下列：'
- en: '`TABLE_CATALOG`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE_CATALOG`'
- en: The name of the catalog to which the view belongs. This value is always `def`.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 视图所属目录的名称。该值始终为 `def`。
- en: '`TABLE_SCHEMA`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE_SCHEMA`'
- en: The name of the schema (database) to which the view belongs.
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 视图所属模式（数据库）的名称。
- en: '`TABLE_NAME`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE_NAME`'
- en: The name of the view.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 视图的名称。
- en: '`VIEW_DEFINITION`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VIEW_DEFINITION`'
- en: 'The [`SELECT`](select.html "15.2.13 SELECT Statement") statement that provides
    the definition of the view. This column has most of what you see in the `Create
    Table` column that [`SHOW CREATE VIEW`](show-create-view.html "15.7.7.13 SHOW
    CREATE VIEW Statement") produces. Skip the words before [`SELECT`](select.html
    "15.2.13 SELECT Statement") and skip the words `WITH CHECK OPTION`. Suppose that
    the original statement was:'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供视图定义的 [`SELECT`](select.html "15.2.13 SELECT Statement") 语句。该列包含 [`SHOW CREATE
    VIEW`](show-create-view.html "15.7.7.13 SHOW CREATE VIEW Statement") 生成的 `Create
    Table` 列中的大部分内容。跳过 [`SELECT`](select.html "15.2.13 SELECT Statement") 前的单词和跳过
    `WITH CHECK OPTION` 前的单词。假设原始语句为：
- en: '[PRE0]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then the view definition looks like this:'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后视图定义如下：
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`CHECK_OPTION`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHECK_OPTION`'
- en: The value of the `CHECK_OPTION` attribute. The value is one of `NONE`, `CASCADE`,
    or `LOCAL`.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CHECK_OPTION` 属性的值。该值为 `NONE`、`CASCADE` 或 `LOCAL` 中的一个。'
- en: '`IS_UPDATABLE`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IS_UPDATABLE`'
- en: MySQL sets a flag, called the view updatability flag, at [`CREATE VIEW`](create-view.html
    "15.1.23 CREATE VIEW Statement") time. The flag is set to `YES` (true) if [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") and [`DELETE`](delete.html "15.2.2 DELETE Statement")
    (and similar operations) are legal for the view. Otherwise, the flag is set to
    `NO` (false). The `IS_UPDATABLE` column in the [`VIEWS`](information-schema-views-table.html
    "28.3.48 The INFORMATION_SCHEMA VIEWS Table") table displays the status of this
    flag. It means that the server always knows whether a view is updatable.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 在 [`CREATE VIEW`](create-view.html "15.1.23 CREATE VIEW Statement") 时设置一个标志，称为视图可更新性标志。如果视图可以进行
    [`UPDATE`](update.html "15.2.17 UPDATE Statement") 和 [`DELETE`](delete.html "15.2.2 DELETE
    Statement")（以及类似操作），则该标志设置为 `YES`（true）。否则，该标志设置为 `NO`（false）。[`VIEWS`](information-schema-views-table.html
    "28.3.48 The INFORMATION_SCHEMA VIEWS Table") 表中的 `IS_UPDATABLE` 列显示了该标志的状态。这意味着服务器始终知道视图是否可更新。
- en: If a view is not updatable, statements such [`UPDATE`](update.html "15.2.17 UPDATE
    Statement"), [`DELETE`](delete.html "15.2.2 DELETE Statement"), and [`INSERT`](insert.html
    "15.2.7 INSERT Statement") are illegal and are rejected. (Even if a view is updatable,
    it might not be possible to insert into it; for details, refer to [Section 27.5.3,
    “Updatable and Insertable Views”](view-updatability.html "27.5.3 Updatable and
    Insertable Views").)
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果视图不可更新，则诸如 [`UPDATE`](update.html "15.2.17 UPDATE Statement")、[`DELETE`](delete.html
    "15.2.2 DELETE Statement") 和 [`INSERT`](insert.html "15.2.7 INSERT Statement")
    等语句是非法的并将被拒绝。（即使视图是可更新的，也可能无法向其插入数据；有关详细信息，请参阅 [Section 27.5.3, “Updatable and
    Insertable Views”](view-updatability.html "27.5.3 Updatable and Insertable Views")。）
- en: '`DEFINER`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEFINER`'
- en: The account of the user who created the view, in `'*`user_name`*'@'*`host_name`*'`
    format.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建视图的用户帐户，格式为 `'*`user_name`*'@'*`host_name`*'`。
- en: '`SECURITY_TYPE`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECURITY_TYPE`'
- en: The view `SQL SECURITY` characteristic. The value is one of `DEFINER` or `INVOKER`.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 视图的 `SQL SECURITY` 特性。该值为 `DEFINER` 或 `INVOKER` 中的一个。
- en: '`CHARACTER_SET_CLIENT`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHARACTER_SET_CLIENT`'
- en: The session value of the [`character_set_client`](server-system-variables.html#sysvar_character_set_client)
    system variable when the view was created.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 视图创建时 [`character_set_client`](server-system-variables.html#sysvar_character_set_client)
    系统变量的会话值。
- en: '`COLLATION_CONNECTION`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COLLATION_CONNECTION`'
- en: The session value of the [`collation_connection`](server-system-variables.html#sysvar_collation_connection)
    system variable when the view was created.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 视图创建时 [`collation_connection`](server-system-variables.html#sysvar_collation_connection)
    系统变量的会话值。
- en: Notes
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'MySQL permits different [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    settings to tell the server the type of SQL syntax to support. For example, you
    might use the [`ANSI`](sql-mode.html#sqlmode_ansi) SQL mode to ensure MySQL correctly
    interprets the standard SQL concatenation operator, the double bar (`||`), in
    your queries. If you then create a view that concatenates items, you might worry
    that changing the [`sql_mode`](server-system-variables.html#sysvar_sql_mode) setting
    to a value different from [`ANSI`](sql-mode.html#sqlmode_ansi) could cause the
    view to become invalid. But this is not the case. No matter how you write out
    a view definition, MySQL always stores it the same way, in a canonical form. Here
    is an example that shows how the server changes a double bar concatenation operator
    to a [`CONCAT()`](string-functions.html#function_concat) function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL允许不同的[`sql_mode`](server-system-variables.html#sysvar_sql_mode)设置告诉服务器支持的SQL语法类型。例如，您可以使用[`ANSI`](sql-mode.html#sqlmode_ansi)
    SQL模式来确保MySQL正确解释标准SQL连接运算符，双竖线(`||`)，在您的查询中。如果您创建一个连接项目的视图，您可能担心将[`sql_mode`](server-system-variables.html#sysvar_sql_mode)设置更改为与[`ANSI`](sql-mode.html#sqlmode_ansi)不同的值会导致视图无效。但事实并非如此。无论您如何编写视图定义，MySQL始终以相同的方式存储它，即规范形式。以下是一个示例，显示服务器如何将双竖线连接运算符更改为[`CONCAT()`](string-functions.html#function_concat)函数：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The advantage of storing a view definition in canonical form is that changes
    made later to the value of [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    do not affect the results from the view. However, an additional consequence is
    that comments prior to [`SELECT`](select.html "15.2.13 SELECT Statement") are
    stripped from the definition by the server.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将视图定义存储为规范形式的优势在于，稍后对[`sql_mode`](server-system-variables.html#sysvar_sql_mode)值的更改不会影响视图的结果。然而，另一个结果是，服务器会剥离[`SELECT`](select.html
    "15.2.13 SELECT Statement")之前的注释。
