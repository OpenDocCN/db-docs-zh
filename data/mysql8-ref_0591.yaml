- en: 10.6.1 Optimizing MyISAM Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.6.1 优化MyISAM查询
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-queries-myisam.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-queries-myisam.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-queries-myisam.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-queries-myisam.html)
- en: 'Some general tips for speeding up queries on `MyISAM` tables:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一些加快`MyISAM`表查询速度的一般提示：
- en: To help MySQL better optimize queries, use [`ANALYZE TABLE`](analyze-table.html
    "15.7.3.1 ANALYZE TABLE Statement") or run [**myisamchk --analyze**](myisamchk.html
    "6.6.4 myisamchk — MyISAM Table-Maintenance Utility") on a table after it has
    been loaded with data. This updates a value for each index part that indicates
    the average number of rows that have the same value. (For unique indexes, this
    is always 1.) MySQL uses this to decide which index to choose when you join two
    tables based on a nonconstant expression. You can check the result from the table
    analysis by using `SHOW INDEX FROM *`tbl_name`*` and examining the `Cardinality`
    value. [**myisamchk --description --verbose**](myisamchk.html "6.6.4 myisamchk
    — MyISAM Table-Maintenance Utility") shows index distribution information.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了帮助MySQL更好地优化查询，请使用[`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE
    Statement")或在加载数据后对表运行[**myisamchk --analyze**](myisamchk.html "6.6.4 myisamchk
    — MyISAM Table-Maintenance Utility")。 这将更新每个索引部分的一个值，该值表示具有相同值的平均行数。 （对于唯一索引，这始终是1。）
    MySQL在基于非常量表达式连接两个表时使用此值来决定选择哪个索引。 您可以通过使用`SHOW INDEX FROM *`tbl_name`*`并检查`Cardinality`值来检查表分析的结果。
    [**myisamchk --description --verbose**](myisamchk.html "6.6.4 myisamchk — MyISAM
    Table-Maintenance Utility")显示索引分布信息。
- en: To sort an index and data according to an index, use [**myisamchk --sort-index
    --sort-records=1**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility") (assuming that you want to sort on index 1). This is a good way to make
    queries faster if you have a unique index from which you want to read all rows
    in order according to the index. The first time you sort a large table this way,
    it may take a long time.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要根据索引对索引和数据进行排序，请使用[**myisamchk --sort-index --sort-records=1**](myisamchk.html
    "6.6.4 myisamchk — MyISAM Table-Maintenance Utility")（假设您要按索引1排序）。 如果您有一个想要按照索引顺序读取所有行的唯一索引，这是使查询更快的好方法。
    第一次以这种方式对大表进行排序可能需要很长时间。
- en: Try to avoid complex [`SELECT`](select.html "15.2.13 SELECT Statement") queries
    on `MyISAM` tables that are updated frequently, to avoid problems with table locking
    that occur due to contention between readers and writers.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量避免在频繁更新的`MyISAM`表上执行复杂的[`SELECT`](select.html "15.2.13 SELECT Statement")查询，以避免由于读者和写者之间的争用而导致的表锁定问题。
- en: '`MyISAM` supports concurrent inserts: If a table has no free blocks in the
    middle of the data file, you can [`INSERT`](insert.html "15.2.7 INSERT Statement")
    new rows into it at the same time that other threads are reading from the table.
    If it is important to be able to do this, consider using the table in ways that
    avoid deleting rows. Another possibility is to run [`OPTIMIZE TABLE`](optimize-table.html
    "15.7.3.4 OPTIMIZE TABLE Statement") to defragment the table after you have deleted
    a lot of rows from it. This behavior is altered by setting the [`concurrent_insert`](server-system-variables.html#sysvar_concurrent_insert)
    variable. You can force new rows to be appended (and therefore permit concurrent
    inserts), even in tables that have deleted rows. See [Section 10.11.3, “Concurrent
    Inserts”](concurrent-inserts.html "10.11.3 Concurrent Inserts").'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyISAM`支持并发插入：如果表在数据文件中间没有空闲块，则可以在其他线程从表中读取时向其中插入新行。 如果能够这样做很重要，请考虑以避免删除行的方式使用表。
    另一种可能性是在从表中删除大量行后运行[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE
    Statement")来碎片整理表。 通过设置[`concurrent_insert`](server-system-variables.html#sysvar_concurrent_insert)变量来改变此行为。
    您可以强制追加新行（从而允许并发插入），即使在已删除行的表中也是如此。 请参阅[第10.11.3节，“并发插入”](concurrent-inserts.html
    "10.11.3 Concurrent Inserts")。'
- en: For `MyISAM` tables that change frequently, try to avoid all variable-length
    columns ([`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR Types"), [`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types"), and [`TEXT`](blob.html "13.3.4 The BLOB and
    TEXT Types")). The table uses dynamic row format if it includes even a single
    variable-length column. See [Chapter 18, *Alternative Storage Engines*](storage-engines.html
    "Chapter 18 Alternative Storage Engines").
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于频繁更改的`MyISAM`表，请尽量避免所有可变长度列（[`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types")、[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")和[`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")）。如果表包含任何一个可变长度列，表将使用动态行格式。参见[Chapter 18, *Alternative
    Storage Engines*](storage-engines.html "Chapter 18 Alternative Storage Engines")。
- en: It is normally not useful to split a table into different tables just because
    the rows become large. In accessing a row, the biggest performance hit is the
    disk seek needed to find the first byte of the row. After finding the data, most
    modern disks can read the entire row fast enough for most applications. The only
    cases where splitting up a table makes an appreciable difference is if it is a
    `MyISAM` table using dynamic row format that you can change to a fixed row size,
    or if you very often need to scan the table but do not need most of the columns.
    See [Chapter 18, *Alternative Storage Engines*](storage-engines.html "Chapter 18 Alternative
    Storage Engines").
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常不值得将表拆分为不同的表，只是因为行变得很大。在访问行时，最大的性能损失是需要查找行的第一个字节的磁盘寻道。找到数据后，大多数现代磁盘可以以足够快的速度读取整个行，适用于大多数应用程序。唯一需要拆分表的情况是，如果是使用动态行格式的`MyISAM`表，您可以将其更改为固定行大小，或者如果您经常需要扫描表但不需要大多数列。参见[Chapter 18,
    *Alternative Storage Engines*](storage-engines.html "Chapter 18 Alternative Storage
    Engines")。
- en: Use `ALTER TABLE ... ORDER BY *`expr1`*, *`expr2`*, ...` if you usually retrieve
    rows in `*`expr1`*, *`expr2`*, ...` order. By using this option after extensive
    changes to the table, you may be able to get higher performance.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您通常按`*`expr1`*, *`expr2`*, ...`顺序检索行，则使用`ALTER TABLE ... ORDER BY *`expr1`*,
    *`expr2`*, ...`。在对表进行广泛更改后使用此选项，您可能能够获得更高的性能。
- en: 'If you often need to calculate results such as counts based on information
    from a lot of rows, it may be preferable to introduce a new table and update the
    counter in real time. An update of the following form is very fast:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您经常需要根据大量行的信息计算结果，可能最好引入一个新表并实时更新计数器。以下形式的更新非常快：
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is very important when you use MySQL storage engines such as `MyISAM` that
    has only table-level locking (multiple readers with single writers). This also
    gives better performance with most database systems, because the row locking manager
    in this case has less to do.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您使用只有表级锁定（多个读者与单个写者）的MySQL存储引擎，如`MyISAM`时，这一点非常重要。这也可以提高大多数数据库系统的性能，因为在这种情况下，行锁定管理器的工作量较少。
- en: Use [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")
    periodically to avoid fragmentation with dynamic-format `MyISAM` tables. See [Section 18.2.3,
    “MyISAM Table Storage Formats”](myisam-table-formats.html "18.2.3 MyISAM Table
    Storage Formats").
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期使用[`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")以避免动态格式`MyISAM`表的碎片化。参见[Section 18.2.3,
    “MyISAM Table Storage Formats”](myisam-table-formats.html "18.2.3 MyISAM Table
    Storage Formats")。
- en: Declaring a `MyISAM` table with the `DELAY_KEY_WRITE=1` table option makes index
    updates faster because they are not flushed to disk until the table is closed.
    The downside is that if something kills the server while such a table is open,
    you must ensure that the table is okay by running the server with the [`myisam_recover_options`](server-system-variables.html#sysvar_myisam_recover_options)
    system variable set, or by running [**myisamchk**](myisamchk.html "6.6.4 myisamchk
    — MyISAM Table-Maintenance Utility") before restarting the server. (However, even
    in this case, you should not lose anything by using `DELAY_KEY_WRITE`, because
    the key information can always be generated from the data rows.)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`DELAY_KEY_WRITE=1`表选项声明`MyISAM`表可以使索引更新更快，因为它们在表关闭之前不会刷新到磁盘。缺点是，如果在打开这样的表时有什么东西终止了服务器，您必须通过设置[`myisam_recover_options`](server-system-variables.html#sysvar_myisam_recover_options)系统变量来确保表的正常，或者在重新启动服务器之前运行[**myisamchk**](myisamchk.html
    "6.6.4 myisamchk — MyISAM Table-Maintenance Utility")。 （然而，即使在这种情况下，使用`DELAY_KEY_WRITE`也不会丢失任何内容，因为关键信息始终可以从数据行生成。）
- en: Strings are automatically prefix- and end-space compressed in `MyISAM` indexes.
    See [Section 15.1.15, “CREATE INDEX Statement”](create-index.html "15.1.15 CREATE
    INDEX Statement").
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`MyISAM`索引中，字符串会自动进行前缀和末尾空格压缩。参见[第15.1.15节，“CREATE INDEX语句”](create-index.html
    "15.1.15 CREATE INDEX Statement")。
- en: You can increase performance by caching queries or answers in your application
    and then executing many inserts or updates together. Locking the table during
    this operation ensures that the index cache is only flushed once after all updates.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在应用程序中缓存查询或答案，然后一次性执行多个插入或更新操作，可以提高性能。在此操作期间锁定表确保索引缓存仅在所有更新完成后刷新一次。
