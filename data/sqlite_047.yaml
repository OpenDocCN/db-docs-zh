- en: Online Backup API.
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线备份API。
- en: 原文：[https://sqlite.com/c3ref/backup_finish.html](https://sqlite.com/c3ref/backup_finish.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/c3ref/backup_finish.html](https://sqlite.com/c3ref/backup_finish.html)
- en: '[PRE0]'
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The backup API copies the content of one database into another. It is useful
    either for creating backups of databases or for copying in-memory databases to
    or from persistent files.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 备份API将一个数据库的内容复制到另一个数据库。它既用于创建数据库备份，也用于将内存数据库复制到或从持久文件中。
- en: 'See Also: [Using the SQLite Online Backup API](../backup.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 参见：[使用SQLite在线备份API](../backup.html)
- en: SQLite holds a write transaction open on the destination database file for the
    duration of the backup operation. The source database is read-locked only while
    it is being read; it is not locked continuously for the entire backup operation.
    Thus, the backup may be performed on a live source database without preventing
    other database connections from reading or writing to the source database while
    the backup is underway.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite在整个备份操作期间保持对目标数据库文件的写事务打开。源数据库仅在读取时被读锁定；它并非在整个备份操作期间连续锁定。因此，在备份进行期间，可以在活动源数据库上执行备份，而不会阻止其他数据库连接在备份进行时读取或写入源数据库。
- en: 'To perform a backup operation:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行备份操作：
- en: '**sqlite3_backup_init()** is called once to initialize the backup,'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**sqlite3_backup_init()**被调用一次以初始化备份，'
- en: '**sqlite3_backup_step()** is called one or more times to transfer the data
    between the two databases, and finally'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**sqlite3_backup_step()**被调用一次或多次来在两个数据库之间传输数据，最终'
- en: '**sqlite3_backup_finish()** is called to release all resources associated with
    the backup operation.'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**sqlite3_backup_finish()**被调用以释放与备份操作相关的所有资源。'
- en: There should be exactly one call to sqlite3_backup_finish() for each successful
    call to sqlite3_backup_init().
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每次成功调用sqlite3_backup_init()都应该有一次调用sqlite3_backup_finish()。
- en: '**sqlite3_backup_init()**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite3_backup_init()**'
- en: The D and N arguments to sqlite3_backup_init(D,N,S,M) are the [database connection](../c3ref/sqlite3.html)
    associated with the destination database and the database name, respectively.
    The database name is "main" for the main database, "temp" for the temporary database,
    or the name specified after the AS keyword in an [ATTACH](../lang_attach.html)
    statement for an attached database. The S and M arguments passed to sqlite3_backup_init(D,N,S,M)
    identify the [database connection](../c3ref/sqlite3.html) and database name of
    the source database, respectively. The source and destination [database connections](../c3ref/sqlite3.html)
    (parameters S and D) must be different or else sqlite3_backup_init(D,N,S,M) will
    fail with an error.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3_backup_init(D,N,S,M)中的D和N参数是与目标数据库关联的[数据库连接](../c3ref/sqlite3.html)和数据库名称。数据库名称分别是主数据库的"main"，临时数据库的"temp"，或者在[ATTACH](../lang_attach.html)语句中AS关键字后指定的附加数据库的名称。传递给sqlite3_backup_init(D,N,S,M)的S和M参数标识源数据库的[数据库连接](../c3ref/sqlite3.html)和数据库名称。源和目标[数据库连接](../c3ref/sqlite3.html)（参数S和D）必须不同，否则sqlite3_backup_init(D,N,S,M)将因错误而失败。
- en: A call to sqlite3_backup_init() will fail, returning NULL, if there is already
    a read or read-write transaction open on the destination database.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 调用sqlite3_backup_init()将失败，返回NULL，如果目标数据库上已经有一个读或读写事务打开。
- en: If an error occurs within sqlite3_backup_init(D,N,S,M), then NULL is returned
    and an error code and error message are stored in the destination [database connection](../c3ref/sqlite3.html)
    D. The error code and message for the failed call to sqlite3_backup_init() can
    be retrieved using the [sqlite3_errcode()](../c3ref/errcode.html), [sqlite3_errmsg()](../c3ref/errcode.html),
    and/or [sqlite3_errmsg16()](../c3ref/errcode.html) functions. A successful call
    to sqlite3_backup_init() returns a pointer to an [sqlite3_backup](../c3ref/backup.html)
    object. The [sqlite3_backup](../c3ref/backup.html) object may be used with the
    sqlite3_backup_step() and sqlite3_backup_finish() functions to perform the specified
    backup operation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在sqlite3_backup_init(D,N,S,M)内发生错误，则返回NULL，并且错误代码和错误消息被存储在目标[数据库连接](../c3ref/sqlite3.html)
    D中。可以使用[sqlite3_errcode()](../c3ref/errcode.html)，[sqlite3_errmsg()](../c3ref/errcode.html)和/或[sqlite3_errmsg16()](../c3ref/errcode.html)函数检索到调用sqlite3_backup_init()失败时的错误代码和消息。成功调用sqlite3_backup_init()将返回指向一个[sqlite3_backup](../c3ref/backup.html)对象的指针。[sqlite3_backup](../c3ref/backup.html)对象可与sqlite3_backup_step()和sqlite3_backup_finish()函数一起用于执行指定的备份操作。
- en: '**sqlite3_backup_step()**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite3_backup_step()**'
- en: Function sqlite3_backup_step(B,N) will copy up to N pages between the source
    and destination databases specified by [sqlite3_backup](../c3ref/backup.html)
    object B. If N is negative, all remaining source pages are copied. If sqlite3_backup_step(B,N)
    successfully copies N pages and there are still more pages to be copied, then
    the function returns [SQLITE_OK](../rescode.html#ok). If sqlite3_backup_step(B,N)
    successfully finishes copying all pages from source to destination, then it returns
    [SQLITE_DONE](../rescode.html#done). If an error occurs while running sqlite3_backup_step(B,N),
    then an [error code](../rescode.html) is returned. As well as [SQLITE_OK](../rescode.html#ok)
    and [SQLITE_DONE](../rescode.html#done), a call to sqlite3_backup_step() may return
    [SQLITE_READONLY](../rescode.html#readonly), [SQLITE_NOMEM](../rescode.html#nomem),
    [SQLITE_BUSY](../rescode.html#busy), [SQLITE_LOCKED](../rescode.html#locked),
    or an [SQLITE_IOERR_XXX](../rescode.html#ioerr_access) extended error code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 函数sqlite3_backup_step(B,N)将在由[sqlite3_backup](../c3ref/backup.html)对象B指定的源和目标数据库之间复制最多N页。如果N为负数，则复制所有剩余的源页面。如果sqlite3_backup_step(B,N)成功地复制了N页，并且还有更多页面要复制，则函数返回[SQLITE_OK](../rescode.html#ok)。如果sqlite3_backup_step(B,N)成功完成了从源到目标的所有页面的复制，则返回[SQLITE_DONE](../rescode.html#done)。如果在运行sqlite3_backup_step(B,N)时发生错误，则返回一个[错误代码](../rescode.html)。除了[SQLITE_OK](../rescode.html#ok)和[SQLITE_DONE](../rescode.html#done)之外，调用sqlite3_backup_step()可能会返回[SQLITE_READONLY](../rescode.html#readonly)、[SQLITE_NOMEM](../rescode.html#nomem)、[SQLITE_BUSY](../rescode.html#busy)、[SQLITE_LOCKED](../rescode.html#locked)或者[SQLITE_IOERR_XXX](../rescode.html#ioerr_access)扩展错误代码。
- en: The sqlite3_backup_step() might return [SQLITE_READONLY](../rescode.html#readonly)
    if
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果sqlite3_backup_step()返回[SQLITE_READONLY](../rescode.html#readonly)，
- en: the destination database was opened read-only, or
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标数据库以只读方式打开，或者
- en: the destination database is using write-ahead-log journaling and the destination
    and source page sizes differ, or
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标数据库正在使用预写式日志记录，并且目标和源页面大小不同，或者
- en: the destination database is an in-memory database and the destination and source
    page sizes differ.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标数据库是一个内存数据库，并且目标和源页面大小不同。
- en: If sqlite3_backup_step() cannot obtain a required file-system lock, then the
    [busy-handler function](../c3ref/busy_handler.html) is invoked (if one is specified).
    If the busy-handler returns non-zero before the lock is available, then [SQLITE_BUSY](../rescode.html#busy)
    is returned to the caller. In this case the call to sqlite3_backup_step() can
    be retried later. If the source [database connection](../c3ref/sqlite3.html) is
    being used to write to the source database when sqlite3_backup_step() is called,
    then [SQLITE_LOCKED](../rescode.html#locked) is returned immediately. Again, in
    this case the call to sqlite3_backup_step() can be retried later on. If [SQLITE_IOERR_XXX](../rescode.html#ioerr_access),
    [SQLITE_NOMEM](../rescode.html#nomem), or [SQLITE_READONLY](../rescode.html#readonly)
    is returned, then there is no point in retrying the call to sqlite3_backup_step().
    These errors are considered fatal. The application must accept that the backup
    operation has failed and pass the backup operation handle to the sqlite3_backup_finish()
    to release associated resources.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果sqlite3_backup_step()无法获取所需的文件系统锁，则会调用[繁忙处理器函数](../c3ref/busy_handler.html)(如果已指定)。如果繁忙处理器在锁可用之前返回非零，则将[SQLITE_BUSY](../rescode.html#busy)返回给调用者。在这种情况下，稍后可以重试调用sqlite3_backup_step()。如果在调用sqlite3_backup_step()时使用源[数据库连接](../c3ref/sqlite3.html)向源数据库写入数据，则会立即返回[SQLITE_LOCKED](../rescode.html#locked)。同样，在这种情况下，稍后可以重试调用sqlite3_backup_step()。如果返回[SQLITE_IOERR_XXX](../rescode.html#ioerr_access)、[SQLITE_NOMEM](../rescode.html#nomem)或[SQLITE_READONLY](../rescode.html#readonly)，则没有重试调用sqlite3_backup_step()的必要。这些错误被认为是致命的。应用程序必须接受备份操作失败，并将备份操作句柄传递给sqlite3_backup_finish()以释放相关资源。
- en: The first call to sqlite3_backup_step() obtains an exclusive lock on the destination
    file. The exclusive lock is not released until either sqlite3_backup_finish()
    is called or the backup operation is complete and sqlite3_backup_step() returns
    [SQLITE_DONE](../rescode.html#done). Every call to sqlite3_backup_step() obtains
    a [shared lock](../lockingv3.html#shared_lock) on the source database that lasts
    for the duration of the sqlite3_backup_step() call. Because the source database
    is not locked between calls to sqlite3_backup_step(), the source database may
    be modified mid-way through the backup process. If the source database is modified
    by an external process or via a database connection other than the one being used
    by the backup operation, then the backup will be automatically restarted by the
    next call to sqlite3_backup_step(). If the source database is modified by the
    using the same database connection as is used by the backup operation, then the
    backup database is automatically updated at the same time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用 sqlite3_backup_step() 会获得目标文件的独占锁。直到调用 sqlite3_backup_finish() 或备份操作完成并且
    sqlite3_backup_step() 返回 [SQLITE_DONE](../rescode.html#done) 之前，独占锁才会释放。每次调用 sqlite3_backup_step()
    都会在源数据库上获取一个在 sqlite3_backup_step() 调用期间持续的 [共享锁](../lockingv3.html#shared_lock)。因为在调用
    sqlite3_backup_step() 之间源数据库没有被锁定，所以在备份过程中可能会修改源数据库。如果源数据库被外部进程或者使用备份操作所使用的其他数据库连接修改，则下一次调用
    sqlite3_backup_step() 将自动重新启动备份。如果源数据库由使用与备份操作相同的数据库连接修改，则备份数据库将同时自动更新。
- en: '**sqlite3_backup_finish()**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite3_backup_finish()**'
- en: When sqlite3_backup_step() has returned [SQLITE_DONE](../rescode.html#done),
    or when the application wishes to abandon the backup operation, the application
    should destroy the [sqlite3_backup](../c3ref/backup.html) by passing it to sqlite3_backup_finish().
    The sqlite3_backup_finish() interfaces releases all resources associated with
    the [sqlite3_backup](../c3ref/backup.html) object. If sqlite3_backup_step() has
    not yet returned [SQLITE_DONE](../rescode.html#done), then any active write-transaction
    on the destination database is rolled back. The [sqlite3_backup](../c3ref/backup.html)
    object is invalid and may not be used following a call to sqlite3_backup_finish().
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当 sqlite3_backup_step() 返回 [SQLITE_DONE](../rescode.html#done) 或者应用程序希望放弃备份操作时，应用程序应该通过将其传递给
    sqlite3_backup_finish() 来销毁 [sqlite3_backup](../c3ref/backup.html)。sqlite3_backup_finish()
    接口释放与 [sqlite3_backup](../c3ref/backup.html) 对象关联的所有资源。如果 sqlite3_backup_step()
    尚未返回 [SQLITE_DONE](../rescode.html#done)，则目标数据库上的任何活动写事务都将被回滚。 [sqlite3_backup](../c3ref/backup.html)
    对象将无效，并且在调用 sqlite3_backup_finish() 后不能再使用。
- en: The value returned by sqlite3_backup_finish is [SQLITE_OK](../rescode.html#ok)
    if no sqlite3_backup_step() errors occurred, regardless or whether or not sqlite3_backup_step()
    completed. If an out-of-memory condition or IO error occurred during any prior
    sqlite3_backup_step() call on the same [sqlite3_backup](../c3ref/backup.html)
    object, then sqlite3_backup_finish() returns the corresponding [error code](../rescode.html).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在同一个 [sqlite3_backup](../c3ref/backup.html) 对象的任何先前 sqlite3_backup_step()
    调用期间发生内存不足条件或 IO 错误，则 sqlite3_backup_finish() 返回相应的 [错误代码](../rescode.html#ok)，如果没有发生
    sqlite3_backup_step() 错误，则返回 [SQLITE_OK](../rescode.html#ok)。
- en: A return of [SQLITE_BUSY](../rescode.html#busy) or [SQLITE_LOCKED](../rescode.html#locked)
    from sqlite3_backup_step() is not a permanent error and does not affect the return
    value of sqlite3_backup_finish().
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3_backup_step() 返回 [SQLITE_BUSY](../rescode.html#busy) 或者 [SQLITE_LOCKED](../rescode.html#locked)
    不是永久错误，不影响 sqlite3_backup_finish() 的返回值。
- en: '**sqlite3_backup_remaining() and sqlite3_backup_pagecount()**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite3_backup_remaining() 和 sqlite3_backup_pagecount()**'
- en: The sqlite3_backup_remaining() routine returns the number of pages still to
    be backed up at the conclusion of the most recent sqlite3_backup_step(). The sqlite3_backup_pagecount()
    routine returns the total number of pages in the source database at the conclusion
    of the most recent sqlite3_backup_step(). The values returned by these functions
    are only updated by sqlite3_backup_step(). If the source database is modified
    in a way that changes the size of the source database or the number of pages remaining,
    those changes are not reflected in the output of sqlite3_backup_pagecount() and
    sqlite3_backup_remaining() until after the next sqlite3_backup_step().
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3_backup_remaining() 函数返回在最近一次 sqlite3_backup_step() 完成时仍需备份的页面数。sqlite3_backup_pagecount()
    函数返回在最近一次 sqlite3_backup_step() 完成时源数据库中的总页面数。这些函数返回的值仅由 sqlite3_backup_step()
    更新。如果源数据库以改变源数据库的大小或剩余页面数的方式被修改，sqlite3_backup_pagecount() 和 sqlite3_backup_remaining()
    的输出在下一次 sqlite3_backup_step() 之后才会反映这些更改。
- en: '**Concurrent Usage of Database Handles**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据库句柄的并发使用**'
- en: The source [database connection](../c3ref/sqlite3.html) may be used by the application
    for other purposes while a backup operation is underway or being initialized.
    If SQLite is compiled and configured to support threadsafe database connections,
    then the source database connection may be used concurrently from within other
    threads.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在备份操作进行或正在初始化时，应用程序可以使用源[数据库连接](../c3ref/sqlite3.html)进行其他用途。如果 SQLite 编译和配置以支持线程安全的数据库连接，则源数据库连接可以在其他线程中并发使用。
- en: However, the application must guarantee that the destination [database connection](../c3ref/sqlite3.html)
    is not passed to any other API (by any thread) after sqlite3_backup_init() is
    called and before the corresponding call to sqlite3_backup_finish(). SQLite does
    not currently check to see if the application incorrectly accesses the destination
    [database connection](../c3ref/sqlite3.html) and so no error code is reported,
    but the operations may malfunction nevertheless. Use of the destination database
    connection while a backup is in progress might also cause a mutex deadlock.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，应用程序必须保证在调用 sqlite3_backup_init() 之后且在对应的 sqlite3_backup_finish() 调用之前，目标[数据库连接](../c3ref/sqlite3.html)不能传递给任何其他
    API（由任何线程）。SQLite 目前不会检查应用程序是否错误地访问目标[数据库连接](../c3ref/sqlite3.html)，因此不会报告错误代码，但操作可能仍会出现故障。在备份正在进行时使用目标数据库连接也可能导致互斥体死锁。
- en: If running in [shared cache mode](../sharedcache.html), the application must
    guarantee that the shared cache used by the destination database is not accessed
    while the backup is running. In practice this means that the application must
    guarantee that the disk file being backed up to is not accessed by any connection
    within the process, not just the specific connection that was passed to sqlite3_backup_init().
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在[共享缓存模式](../sharedcache.html)下运行，则应用程序必须保证在备份运行时不访问目标数据库使用的共享缓存。实际上，这意味着应用程序必须保证备份到的磁盘文件不被进程内的任何连接访问，而不仅仅是传递给
    sqlite3_backup_init() 的特定连接。
- en: The [sqlite3_backup](../c3ref/backup.html) object itself is partially threadsafe.
    Multiple threads may safely make multiple concurrent calls to sqlite3_backup_step().
    However, the sqlite3_backup_remaining() and sqlite3_backup_pagecount() APIs are
    not strictly speaking threadsafe. If they are invoked at the same time as another
    thread is invoking sqlite3_backup_step() it is possible that they return invalid
    values.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[sqlite3_backup](../c3ref/backup.html) 对象本身是部分线程安全的。多个线程可以安全地同时调用多个并发的 sqlite3_backup_step()。然而，sqlite3_backup_remaining()
    和 sqlite3_backup_pagecount() API 在严格意义上并不是线程安全的。如果它们在另一个线程正在调用 sqlite3_backup_step()
    的同时被调用，可能会返回无效值。'
- en: See also lists of [Objects](../c3ref/objlist.html), [Constants](../c3ref/constlist.html),
    and [Functions](../c3ref/funclist.html).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[对象](../c3ref/objlist.html)、[常量](../c3ref/constlist.html)和[函数](../c3ref/funclist.html)列表。
