- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-linear-hash.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-linear-hash.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-linear-hash.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-linear-hash.html)
- en: 26.2.4.1 LINEAR HASH Partitioning
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 26.2.4.1 线性哈希分区
- en: MySQL also supports linear hashing, which differs from regular hashing in that
    linear hashing utilizes a linear powers-of-two algorithm whereas regular hashing
    employs the modulus of the hashing function's value.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL还支持线性哈希，与常规哈希不同之处在于线性哈希利用线性二次幂算法，而常规哈希使用哈希函数值的模。
- en: 'Syntactically, the only difference between linear-hash partitioning and regular
    hashing is the addition of the `LINEAR` keyword in the `PARTITION BY` clause,
    as shown here:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在语法上，线性哈希分区和常规哈希之间唯一的区别是在`PARTITION BY`子句中添加`LINEAR`关键字，如下所示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Given an expression *`expr`*, the partition in which the record is stored when
    linear hashing is used is partition number *`N`* from among *`num`* partitions,
    where *`N`* is derived according to the following algorithm:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表达式*`expr`*，当使用线性哈希时存储记录的分区是从*`num`*个分区中的第*`N`*个分区，其中*`N`*根据以下算法派生：
- en: 'Find the next power of 2 greater than *`num`*. We call this value *`V`*; it
    can be calculated as:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到大于*`num`*的下一个2的幂。我们称这个值为*`V`*；可以计算如下：
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (Suppose that *`num`* is 13\. Then [`LOG(2,13)`](mathematical-functions.html#function_log)
    is 3.7004397181411. [`CEILING(3.7004397181411)`](mathematical-functions.html#function_ceiling)
    is 4, and *`V`* = [`POWER(2,4)`](mathematical-functions.html#function_power),
    which is 16.)
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (假设*`num`*为13。那么[`LOG(2,13)`](mathematical-functions.html#function_log)为3.7004397181411。[`CEILING(3.7004397181411)`](mathematical-functions.html#function_ceiling)为4，*`V`*
    = [`POWER(2,4)`](mathematical-functions.html#function_power)，即16。)
- en: Set *`N`* = *`F`*(*`column_list`*) & (*`V`* - 1).
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置*`N`* = *`F`*(*`column_list`*) & (*`V`* - 1)。
- en: 'While *`N`* >= *`num`*:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当*`N`* >= *`num`*时：
- en: Set *`V`* = *`V`* / 2
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置*`V`* = *`V`* / 2。
- en: Set *`N`* = *`N`* & (*`V`* - 1)
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置*`N`* = *`N`* & (*`V`* - 1)。
- en: 'Suppose that the table `t1`, using linear hash partitioning and having 6 partitions,
    is created using this statement:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 假设使用线性哈希分区并具有6个分区的表`t1`是使用以下语句创建的：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now assume that you want to insert two records into `t1` having the `col3`
    column values `''2003-04-14''` and `''1998-10-19''`. The partition number for
    the first of these is determined as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你想要将两条记录插入到具有`col3`列值`'2003-04-14'`和`'1998-10-19'`的`t1`中。第一条记录的分区号计算如下：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The number of the partition where the second record is stored is calculated
    as shown here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第二条记录存储在的分区号计算如下：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The advantage in partitioning by linear hash is that the adding, dropping, merging,
    and splitting of partitions is made much faster, which can be beneficial when
    dealing with tables containing extremely large amounts (terabytes) of data. The
    disadvantage is that data is less likely to be evenly distributed between partitions
    as compared with the distribution obtained using regular hash partitioning.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过线性哈希分区的优势在于添加、删除、合并和分割分区变得更快，这在处理包含极大量（TB级）数据的表时可能会有益。缺点是与使用常规哈希分区获得的分布相比，数据在分区之间的均匀分布性较低。
