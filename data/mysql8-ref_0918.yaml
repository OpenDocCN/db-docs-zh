- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/create-table-ndb-comment-options.html](https://dev.mysql.com/doc/refman/8.0/en/create-table-ndb-comment-options.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/create-table-ndb-comment-options.html](https://dev.mysql.com/doc/refman/8.0/en/create-table-ndb-comment-options.html)
- en: 15.1.20.12 Setting NDB Comment Options
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.1.20.12 设置 NDB 注释选项
- en: '[NDB_COLUMN Options](create-table-ndb-comment-options.html#create-table-ndb-comment-column-options
    "NDB_COLUMN Options")'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NDB_COLUMN 选项](create-table-ndb-comment-options.html#create-table-ndb-comment-column-options
    "NDB_COLUMN Options")'
- en: '[NDB_TABLE Options](create-table-ndb-comment-options.html#create-table-ndb-comment-table-options
    "NDB_TABLE Options")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NDB_TABLE 选项](create-table-ndb-comment-options.html#create-table-ndb-comment-table-options
    "NDB_TABLE Options")'
- en: It is possible to set a number of options specific to NDB Cluster in the table
    comment or column comments of an [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") table. Table-level options for controlling read from any replica
    and partition balance can be embedded in a table comment using `NDB_TABLE`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") 表的表注释或列注释中设置许多特定于
    NDB Cluster 的选项。 通过使用 `NDB_TABLE` 在表注释中嵌入用于控制从任何副本读取和分区平衡的表级选项。
- en: '`NDB_COLUMN` can be used in a column comment to set the size of the blob parts
    table column used for storing parts of blob values by `NDB` to its maximum. This
    works for [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), `MEDIUMBLOB`,
    `LONGBLOB`, [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types"), `MEDIUMTEXT`,
    `LONGTEXT`, and [`JSON`](json.html "13.5 The JSON Data Type") columns. Beginning
    with NDB 8.0.30, a column comment can also be used to control the inline size
    of a blob column. `NDB_COLUMN` comments do not support `TINYBLOB` or `TINYTEXT`
    columns, since these have an inline part (only) of fixed size, and no separate
    parts to store elsewhere.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDB_COLUMN` 可以用于列注释，将 `NDB` 用于存储 blob 值的 blob 部分表列的大小设置为最大值。 这适用于 [`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types")、`MEDIUMBLOB`、`LONGBLOB`、[`TEXT`](blob.html "13.3.4 The
    BLOB and TEXT Types")、`MEDIUMTEXT`、`LONGTEXT` 和 [`JSON`](json.html "13.5 The JSON
    Data Type") 列。 从 NDB 8.0.30 开始，列注释还可以用于控制 blob 列的内联大小。 `NDB_COLUMN` 注释不支持 `TINYBLOB`
    或 `TINYTEXT` 列，因为这些列具有固定大小的内联部分（仅）和无法存储在其他位置的单独部分。'
- en: '`NDB_TABLE` can be used in a table comment to set options relating to partition
    balance and whether the table is fully replicated, among others.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDB_TABLE` 可以用于表注释，用于设置与分区平衡和表是否完全复制等相关的选项。'
- en: The remainder of this section describes these options and their use.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分描述了这些选项及其用法。
- en: NDB_COLUMN Options
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: NDB_COLUMN 选项
- en: 'In NDB Cluster, a column comment in a `CREATE TABLE` or [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") statement can also be used to specify an `NDB_COLUMN`
    option. Beginning with version 8.0.30, `NDB` supports two column comment options
    `BLOB_INLINE_SIZE` and `MAX_BLOB_PART_SIZE`. (Prior to NDB 8.0.30, only `MAX_BLOB_PART_SIZE`
    is supported.) Syntax for this option is shown here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NDB Cluster 中，`CREATE TABLE` 或 [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") 语句中的列注释也可以用于指定 `NDB_COLUMN` 选项。从版本 8.0.30 开始，`NDB` 支持两个列注释选项
    `BLOB_INLINE_SIZE` 和 `MAX_BLOB_PART_SIZE`。 （在 NDB 8.0.30 之前，仅支持 `MAX_BLOB_PART_SIZE`。）此选项的语法如下所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`BLOB_INLINE_SIZE` specifies the number of bytes to be stored inline by the
    column; its expected value is an integer in the range 1 - 29980, inclusive. Setting
    a value greater than 29980 raises an error; setting a value less than 1 is allowed,
    but causes the default inline size for the column type to be used.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLOB_INLINE_SIZE` 指定要由该列内联存储的字节数；其预期值为 1 - 29980 范围内的整数。 设置大于 29980 的值会引发错误；
    允许设置小于 1 的值，但会导致使用列类型的默认内联大小。'
- en: You should be aware that the maximum value for this option is actually the maximum
    number of bytes that can be stored in one row of an `NDB` table; every column
    in the row contributes to this total.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该知道，此选项的最大值实际上是可以存储在一个 `NDB` 表的一行中的最大字节数； 行中的每列都会对此总数做出贡献。
- en: You should also keep in mind, especially when working with `TEXT` columns, that
    the value set by `MAX_BLOB_PART_SIZE` or `BLOB_INLINE_SIZE` represents column
    size in bytes. It does not indicate the number of characters, which varies according
    to the character set and collation used by the column.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该记住，特别是在处理 `TEXT` 列时，由 `MAX_BLOB_PART_SIZE` 或 `BLOB_INLINE_SIZE` 设置的值表示列大小（以字节为单位）。
    它不表示字符数，字符数根据列使用的字符集和排序规则而变化。
- en: 'To see the effects of this option, first create a table with two `BLOB` columns,
    one (`b1`) with no extra options, and another (`b2`) with a setting for `BLOB_INLINE_SIZE`,
    as shown here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此选项的效果，请首先创建一个具有两个`BLOB`列的表，一个（`b1`）没有额外选项，另一个（`b2`）设置了`BLOB_INLINE_SIZE`，如下所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can see the `BLOB_INLINE_SIZE` settings for the `BLOB` columns by querying
    the [`ndbinfo.blobs`](mysql-cluster-ndbinfo-blobs.html "25.6.16.4 The ndbinfo
    blobs Table") table, like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查询[`ndbinfo.blobs`](mysql-cluster-ndbinfo-blobs.html "25.6.16.4 The ndbinfo
    blobs Table")表来查看`BLOB`列的`BLOB_INLINE_SIZE`设置，如下所示：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also check the output from the [**ndb_desc**](mysql-cluster-programs-ndb-desc.html
    "25.5.9 ndb_desc — Describe NDB Tables") utility, as shown here, with the relevant
    lines displayed using emphasized text:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以检查[**ndb_desc**](mysql-cluster-programs-ndb-desc.html "25.5.9 ndb_desc —
    Describe NDB Tables")实用程序的输出，如下所示，相关行以强调文本显示：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For `MAX_BLOB_PART_SIZE`, the `=` sign and the value following it are optional.
    Using any value other than 0 or 1 results in a syntax error.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`MAX_BLOB_PART_SIZE`，`=`号和其后的值是可选的。使用除0或1之外的任何值会导致语法错误。
- en: The effect of using `MAX_BLOB_PART_SIZE` in a column comment is to set the blob
    part size of a [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") or [`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types") column to the maximum number of bytes supported
    for this by `NDB` (13948). This option can be applied to any blob column type
    supported by MySQL except `TINYBLOB` or `TINYTEXT` (`BLOB`, `MEDIUMBLOB`, `LONGBLOB`,
    `TEXT`, `MEDIUMTEXT`, `LONGTEXT`). Unlike `BLOB_INLINE_SIZE`, `MAX_BLOB_PART_SIZE`
    has no effect on `JSON` columns.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在列注释中使用`MAX_BLOB_PART_SIZE`的效果是将[`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types")或[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")列的blob部分大小设置为`NDB`支持的最大字节数（13948）。此选项可应用于MySQL支持的除`TINYBLOB`或`TINYTEXT`之外的任何blob列类型（`BLOB`、`MEDIUMBLOB`、`LONGBLOB`、`TEXT`、`MEDIUMTEXT`、`LONGTEXT`）。与`BLOB_INLINE_SIZE`不同，`MAX_BLOB_PART_SIZE`对`JSON`列没有影响。
- en: 'To see the effects of this option, we first run the following SQL statement
    in the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") client
    to create a table with two `BLOB` columns, one (`c1`) with no extra options, and
    another (`c2`) with `MAX_BLOB_PART_SIZE`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此选项的效果，我们首先在[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")客户端中运行以下SQL语句，创建一个具有两个`BLOB`列的表，一个（`c1`）没有额外选项，另一个（`c2`）具有`MAX_BLOB_PART_SIZE`：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'From the system shell, run the [**ndb_desc**](mysql-cluster-programs-ndb-desc.html
    "25.5.9 ndb_desc — Describe NDB Tables") utility to obtain information about the
    table just created, as shown in this example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从系统shell中运行[**ndb_desc**](mysql-cluster-programs-ndb-desc.html "25.5.9 ndb_desc
    — Describe NDB Tables")实用程序，以获取有关刚刚创建的表的信息，如此示例所示：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Column information in the output is listed under `Attributes`; for columns `c1`
    and `c2` it is displayed here in emphasized text. For `c1`, the blob part size
    is 2000, the default value; for `c2`, it is 13948, as set by `MAX_BLOB_PART_SIZE`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中的列信息在`Attributes`下列出；对于`c1`和`c2`列，它在这里以强调文本显示。对于`c1`，blob部分大小为2000，即默认值；对于`c2`，它为13948，由`MAX_BLOB_PART_SIZE`设置。
- en: 'You can also query the `ndbinfo.blobs` table to see this, as shown here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以查询`ndbinfo.blobs`表来查看此内容，如下所示：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can change the blob part size for a given blob column of an `NDB` table
    using an `ALTER TABLE` statement such as this one, and verifying the changes afterwards
    using [`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW CREATE TABLE
    Statement"):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用类似于这样的`ALTER TABLE`语句更改`NDB`表的给定blob列的blob部分大小，并使用[`SHOW CREATE TABLE`](show-create-table.html
    "15.7.7.10 SHOW CREATE TABLE Statement")在之后验证更改：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of [**ndb_desc**](mysql-cluster-programs-ndb-desc.html "25.5.9 ndb_desc
    — Describe NDB Tables") shows that the blob part sizes of the columns have been
    changed as expected:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[**ndb_desc**](mysql-cluster-programs-ndb-desc.html "25.5.9 ndb_desc — Describe
    NDB Tables")的输出显示列的blob部分大小已按预期更改：'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also see the change by running the query against [`ndbinfo.blobs`](mysql-cluster-ndbinfo-blobs.html
    "25.6.16.4 The ndbinfo blobs Table") again:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过再次运行针对[`ndbinfo.blobs`](mysql-cluster-ndbinfo-blobs.html "25.6.16.4 The
    ndbinfo blobs Table")的查询来查看更改：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It is possible to set both `BLOB_INLINE_SIZE` and `MAX_BLOB_PART_SIZE` for
    a blob column, as shown in this `CREATE TABLE` statement:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为blob列同时设置`BLOB_INLINE_SIZE`和`MAX_BLOB_PART_SIZE`，如此`CREATE TABLE`语句所示：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Querying the [`blobs`](mysql-cluster-ndbinfo-blobs.html "25.6.16.4 The ndbinfo
    blobs Table") table shows us that the statement worked as expected:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 查询[`blobs`](mysql-cluster-ndbinfo-blobs.html "25.6.16.4 The ndbinfo blobs Table")表显示该语句按预期工作：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can also verify that the statement worked by checking the output of [**ndb_desc**](mysql-cluster-programs-ndb-desc.html
    "25.5.9 ndb_desc — Describe NDB Tables").
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过检查 [**ndb_desc**](mysql-cluster-programs-ndb-desc.html "25.5.9 ndb_desc
    — Describe NDB Tables") 的输出来验证该语句是否有效。
- en: Changing a column's blob part size must be done using a copying `ALTER TABLE`;
    this operation cannot be performed online (see [Section 25.6.12, “Online Operations
    with ALTER TABLE in NDB Cluster”](mysql-cluster-online-operations.html "25.6.12 Online
    Operations with ALTER TABLE in NDB Cluster")).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 更改列的 blob 部分大小必须使用复制的 `ALTER TABLE` 来完成；此操作无法在线执行（参见 [第 25.6.12 节，“NDB 集群中的
    ALTER TABLE 在线操作”](mysql-cluster-online-operations.html "25.6.12 Online Operations
    with ALTER TABLE in NDB Cluster")）。
- en: For more information about how [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") stores columns of blob types, see [String Type Storage Requirements](storage-requirements.html#data-types-storage-reqs-strings
    "String Type Storage Requirements").
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") 如何存储 blob
    类型列的更多信息，请参阅 [字符串类型存储要求](storage-requirements.html#data-types-storage-reqs-strings
    "String Type Storage Requirements")。
- en: NDB_TABLE Options
  id: totrans-42
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: NDB_TABLE 选项
- en: 'For an NDB Cluster table, the table comment in a `CREATE TABLE` or [`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") statement can also be
    used to specify an `NDB_TABLE` option, which consists of one or more name-value
    pairs, separated by commas if need be, following the string `NDB_TABLE=`. Complete
    syntax for names and values syntax is shown here:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 NDB 集群表，在 `CREATE TABLE` 或 [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") 语句中的表注释也可以用于指定一个 `NDB_TABLE` 选项，该选项由一个或多个名称-值对组成，如果需要，用逗号分隔，跟在字符串
    `NDB_TABLE=` 后面。名称和值的完整语法如下所示：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Spaces are not permitted within the quoted string. The string is case-insensitive.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 引号字符串内不允许有空格。字符串不区分大小写。
- en: The four `NDB` table options that can be set as part of a comment in this way
    are described in more detail in the next few paragraphs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过表注释中的四个 `NDB` 表选项来设置这种方式。这几个选项将在接下来的几段中详细描述。
- en: '`NOLOGGING`: By default, `NDB` tables are logged, and checkpointed. This makes
    them durable to whole cluster failures. Using `NOLOGGING` when creating or altering
    a table means that this table is not redo logged or included in local checkpoints.
    In this case, the table is still replicated across the data nodes for high availability,
    and updated using transactions, but changes made to it are not recorded in the
    data node''s redo logs, and its content is not checkpointed to disk; when recovering
    from a cluster failure, the cluster retains the table definition, but none of
    its rows—that is, the table is empty.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`NOLOGGING`：默认情况下，`NDB` 表是记录并进行检查点的。这使得它们在整个集群失败时是持久的。在创建或更改表时使用 `NOLOGGING`
    意味着该表不会被重做日志记录或包含在本地检查点中。在这种情况下，该表仍然在数据节点之间复制以实现高可用性，并使用事务进行更新，但对其所做的更改不会记录在数据节点的重做日志中，并且其内容不会被检查点到磁盘上；在从集群故障中恢复时，集群会保留表定义，但不保留任何行，也就是说，该表是空的。'
- en: Using such nonlogging tables reduces the data node's demands on disk I/O and
    storage, as well as CPU for checkpointing CPU. This may be suitable for short-lived
    data which is frequently updated, and where the loss of all data in the unlikely
    event of a total cluster failure is acceptable.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种非记录表减少了数据节点对磁盘 I/O 和存储的需求，以及用于检查点的 CPU。这可能适用于频繁更新的短期数据，并且在极少数情况下发生总集群故障时可以接受所有数据的丢失。
- en: It is also possible to use the [`ndb_table_no_logging`](mysql-cluster-options-variables.html#sysvar_ndb_table_no_logging)
    system variable to cause any NDB tables created or altered while this variable
    is in effect to behave as though it had been created with the `NOLOGGING` comment.
    Unlike when using the comment directly, there is nothing in this case in the output
    of [`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW CREATE TABLE Statement")
    to indicate that it is a nonlogging table. Using the table comment approach is
    recommended since it offers per-table control of the feature, and this aspect
    of the table schema is embedded in the table creation statement where it can be
    found easily by SQL-based tools.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用 [`ndb_table_no_logging`](mysql-cluster-options-variables.html#sysvar_ndb_table_no_logging)
    系统变量，使得在此变量生效时创建或更改的任何 NDB 表都表现得好像已经使用 `NOLOGGING` 注释创建。与直接使用注释时不同，在 [`SHOW CREATE
    TABLE`](show-create-table.html "15.7.7.10 SHOW CREATE TABLE Statement") 的输出中没有任何内容表明它是一个非记录表。推荐使用表注释方法，因为它提供了对该功能的每个表的控制，并且表模式的这一方面嵌入在表创建语句中，可以很容易地被
    SQL 工具找到。
- en: '`READ_BACKUP`: Setting this option to 1 has the same effect as though [`ndb_read_backup`](mysql-cluster-options-variables.html#sysvar_ndb_read_backup)
    were enabled; enables reading from any replica. Doing so greatly improves the
    performance of reads from the table at a relatively small cost to write performance.
    Beginning with NDB 8.0.19, 1 is the default for `READ_BACKUP`, and the default
    for [`ndb_read_backup`](mysql-cluster-options-variables.html#sysvar_ndb_read_backup)
    is `ON` (previously, read from any replica was disabled by default).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`READ_BACKUP`: 将此选项设置为1的效果与启用[`ndb_read_backup`](mysql-cluster-options-variables.html#sysvar_ndb_read_backup)相同；允许从任何副本读取。这样做极大地提高了从表中读取的性能，对写入性能的影响相对较小。从NDB
    8.0.19开始，`READ_BACKUP`的默认值为1，[`ndb_read_backup`](mysql-cluster-options-variables.html#sysvar_ndb_read_backup)的默认值为`ON`（以前，默认情况下，从任何副本读取是禁用的）。'
- en: 'You can set `READ_BACKUP` for an existing table online, using an `ALTER TABLE`
    statement similar to one of those shown here:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在线为现有表设置`READ_BACKUP`，使用类似于以下示例的`ALTER TABLE`语句：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For more information about the `ALGORITHM` option for `ALTER TABLE`, see [Section 25.6.12,
    “Online Operations with ALTER TABLE in NDB Cluster”](mysql-cluster-online-operations.html
    "25.6.12 Online Operations with ALTER TABLE in NDB Cluster").
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`ALTER TABLE`的`ALGORITHM`选项的更多信息，请参阅[第25.6.12节，“NDB Cluster中的ALTER TABLE在线操作”](mysql-cluster-online-operations.html
    "25.6.12 NDB Cluster中的ALTER TABLE在线操作")。
- en: '`PARTITION_BALANCE`: Provides additional control over assignment and placement
    of partitions. The following four schemes are supported:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`PARTITION_BALANCE`: 提供对分区分配和放置的额外控制。支持以下四种方案：'
- en: '`FOR_RP_BY_NODE`: One partition per node.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FOR_RP_BY_NODE`: 每个节点一个分区。'
- en: Only one LDM on each node stores a primary partition. Each partition is stored
    in the same LDM (same ID) on all nodes.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个节点上只有一个LDM存储主分区。每个分区在所有节点上的相同LDM（相同ID）中存储。
- en: '`FOR_RA_BY_NODE`: One partition per node group.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FOR_RA_BY_NODE`: 每个节点组一个分区。'
- en: Each node stores a single partition, which can be either a primary replica or
    a backup replica. Each partition is stored in the same LDM on all nodes.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个节点存储一个分区，可以是主复制品或备份复制品。每个分区在所有节点上都存储在相同的LDM中。
- en: '`FOR_RP_BY_LDM`: One partition for each LDM on each node; the default.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FOR_RP_BY_LDM`: 每个节点上每个LDM一个分区；默认设置。'
- en: This is the setting used if `READ_BACKUP` is set to 1.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将`READ_BACKUP`设置为1，则使用此设置。
- en: '`FOR_RA_BY_LDM`: One partition per LDM in each node group.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FOR_RA_BY_LDM`: 每个节点组中每个LDM一个分区。'
- en: These partitions can be primary or backup partitions.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些分区可以是主分区或备份分区。
- en: '`FOR_RA_BY_LDM_X_2`: Two partitions per LDM in each node group.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FOR_RA_BY_LDM_X_2`: 每个节点组中每个LDM有两个分区。'
- en: These partitions can be primary or backup partitions.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些分区可以是主分区或备份分区。
- en: '`FOR_RA_BY_LDM_X_3`: Three partitions per LDM in each node group.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FOR_RA_BY_LDM_X_3`: 每个节点组中每个LDM有三个分区。'
- en: These partitions can be primary or backup partitions.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些分区可以是主分区或备份分区。
- en: '`FOR_RA_BY_LDM_X_4`: Four partitions per LDM in each node group.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FOR_RA_BY_LDM_X_4`: 每个节点组中每个LDM有四个分区。'
- en: These partitions can be primary or backup partitions.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些分区可以是主分区或备份分区。
- en: '`PARTITION_BALANCE` is the preferred interface for setting the number of partitions
    per table. Using `MAX_ROWS` to force the number of partitions is deprecated but
    continues to be supported for backward compatibility; it is subject to removal
    in a future release of MySQL NDB Cluster. (Bug #81759, Bug #23544301)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`PARTITION_BALANCE`是设置每个表分区数的首选接口。使用`MAX_ROWS`强制分区数已被弃用，但仍继续支持以确保向后兼容性；它可能在将来的MySQL
    NDB Cluster版本中被移除（Bug #81759，Bug #23544301）。'
- en: '`FULLY_REPLICATED` controls whether the table is fully replicated, that is,
    whether each data node has a complete copy of the table. To enable full replication
    of the table, use `FULLY_REPLICATED=1`.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`FULLY_REPLICATED`控制表是否完全复制，即每个数据节点是否有表的完整副本。要启用表的完全复制，使用`FULLY_REPLICATED=1`。'
- en: This setting can also be controlled using the `ndb_fully_replicated` system
    variable. Setting it to `ON` enables the option by default for all new `NDB` tables;
    the default is `OFF`. The [`ndb_data_node_neighbour`](mysql-cluster-options-variables.html#sysvar_ndb_data_node_neighbour)
    system variable is also used for fully replicated tables, to ensure that when
    a fully replicated table is accessed, we access the data node which is local to
    this MySQL Server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设置也可以使用`ndb_fully_replicated`系统变量来控制。将其设置为`ON`会默认为所有新的`NDB`表启用该选项；默认值为`OFF`。[`ndb_data_node_neighbour`](mysql-cluster-options-variables.html#sysvar_ndb_data_node_neighbour)系统变量也用于完全复制的表，以确保访问完全复制的表时，我们访问与此MySQL服务器本地的数据节点。
- en: 'An example of a `CREATE TABLE` statement using such a comment when creating
    an `NDB` table is shown here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了创建`NDB`表时使用此类注释的`CREATE TABLE`语句示例：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The comment is displayed as part of the output of [`SHOW CREATE TABLE`](show-create-table.html
    "15.7.7.10 SHOW CREATE TABLE Statement"). The text of the comment is also available
    from querying the MySQL Information Schema [`TABLES`](information-schema-tables-table.html
    "28.3.38 The INFORMATION_SCHEMA TABLES Table") table, as in this example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 该注释显示为[`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW CREATE TABLE
    Statement")的输出的一部分。注释的文本也可以通过查询MySQL信息模式[`TABLES`](information-schema-tables-table.html
    "28.3.38 The INFORMATION_SCHEMA TABLES Table")表来获取，例如：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This comment syntax is also supported with [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") statements for `NDB` tables, as shown here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此注释语法也适用于`NDB`表的[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句，如下所示：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Beginning with NDB 8.0.21, the `TABLE_COMMENT` column displays the comment
    that is required to re-create the table as it is following the `ALTER TABLE` statement,
    like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从NDB 8.0.21开始，`TABLE_COMMENT`列显示了在`ALTER TABLE`语句后重新创建表所需的注释，如下所示：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Keep in mind that a table comment used with `ALTER TABLE` replaces any existing
    comment which the table might have.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，与`ALTER TABLE`一起使用的表注释会替换表可能已有的任何现有注释。
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Prior to NDB 8.0.21, the table comment used with `ALTER TABLE` replaced any
    existing comment which the table might have had. This meant that (for example)
    the `READ_BACKUP` value was not carried over to the new comment set by the `ALTER
    TABLE` statement, and that any unspecified values reverted to their defaults.
    (BUG#30428829) There was thus no longer any way using SQL to retrieve the value
    previously set for the comment. To keep comment values from reverting to their
    defaults, it was necessary to preserve any such values from the existing comment
    string and include them in the comment passed to `ALTER TABLE`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在NDB 8.0.21之前，与`ALTER TABLE`一起使用的表注释会替换表可能已有的任何现有注释。这意味着（例如）`READ_BACKUP`值不会传递到由`ALTER
    TABLE`语句设置的新注释中，并且任何未指定的值都会恢复为默认值。（BUG#30428829）因此，使用SQL不再有任何方法来检索先前为注释设置的值。为了防止注释值恢复为默认值，需要保留现有注释字符串中的任何此类值，并将它们包含在传递给`ALTER
    TABLE`的注释中。
- en: You can also see the value of the `PARTITION_BALANCE` option in the output of
    [**ndb_desc**](mysql-cluster-programs-ndb-desc.html "25.5.9 ndb_desc — Describe
    NDB Tables"). [**ndb_desc**](mysql-cluster-programs-ndb-desc.html "25.5.9 ndb_desc
    — Describe NDB Tables") also shows whether the `READ_BACKUP` and `FULLY_REPLICATED`
    options are set for the table. See the description of this program for more information.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在[**ndb_desc**](mysql-cluster-programs-ndb-desc.html "25.5.9 ndb_desc — Describe
    NDB Tables")的输出中，您还可以看到`PARTITION_BALANCE`选项的价值。[**ndb_desc**](mysql-cluster-programs-ndb-desc.html
    "25.5.9 ndb_desc — Describe NDB Tables")还显示了表中是否设置了`READ_BACKUP`和`FULLY_REPLICATED`选项。有关此程序的更多信息，请参阅其描述。
