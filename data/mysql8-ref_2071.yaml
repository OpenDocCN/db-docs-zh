- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/performance-schema-data-locks-table.html](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-data-locks-table.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/performance-schema-data-locks-table.html](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-data-locks-table.html)
- en: 29.12.13.1 The data_locks Table
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 29.12.13.1 数据锁表
- en: The [`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The
    data_locks Table") table shows data locks held and requested. For information
    about which lock requests are blocked by which held locks, see [Section 29.12.13.2,
    “The data_lock_waits Table”](performance-schema-data-lock-waits-table.html "29.12.13.2 The
    data_lock_waits Table").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The data_locks
    Table")表显示已持有和请求的数据锁。有关哪些锁请求被哪些持有的锁阻塞的信息，请参见[Section 29.12.13.2, “The data_lock_waits
    Table”](performance-schema-data-lock-waits-table.html "29.12.13.2 The data_lock_waits
    Table")。'
- en: 'Example data lock information:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 示例数据锁信息：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Unlike most Performance Schema data collection, there are no instruments for
    controlling whether data lock information is collected or system variables for
    controlling data lock table sizes. The Performance Schema collects information
    that is already available in the server, so there is no memory or CPU overhead
    to generate this information or need for parameters that control its collection.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数性能模式数据收集不同，没有用于控制是否收集数据锁信息或用于控制数据锁表大小的仪器。性能模式收集服务器中已经可用的信息，因此生成此信息不会产生内存或
    CPU 开销，也不需要控制其收集的参数。
- en: Use the [`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The
    data_locks Table") table to help diagnose performance problems that occur during
    times of heavy concurrent load. For `InnoDB`, see the discussion of this topic
    at [Section 17.15.2, “InnoDB INFORMATION_SCHEMA Transaction and Locking Information”](innodb-information-schema-transactions.html
    "17.15.2 InnoDB INFORMATION_SCHEMA Transaction and Locking Information").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The data_locks
    Table")表来帮助诊断在高并发负载时发生的性能问题。对于`InnoDB`，请参阅[Section 17.15.2, “InnoDB INFORMATION_SCHEMA
    Transaction and Locking Information”](innodb-information-schema-transactions.html
    "17.15.2 InnoDB INFORMATION_SCHEMA Transaction and Locking Information")中关于此主题的讨论。
- en: 'The [`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The
    data_locks Table") table has these columns:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The data_locks
    Table")表具有以下列：'
- en: '`ENGINE`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENGINE`'
- en: The storage engine that holds or requested the lock.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 持有或请求锁的存储引擎。
- en: '`ENGINE_LOCK_ID`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENGINE_LOCK_ID`'
- en: The ID of the lock held or requested by the storage engine. Tuples of (`ENGINE_LOCK_ID`,
    `ENGINE`) values are unique.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 存储引擎持有或请求的锁的 ID。(`ENGINE_LOCK_ID`, `ENGINE`)值的元组是唯一的。
- en: Lock ID formats are internal and subject to change at any time. Applications
    should not rely on lock IDs having a particular format.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 锁 ID 格式是内部的，并随时可能更改。应用程序不应依赖于锁 ID 具有特定格式。
- en: '`ENGINE_TRANSACTION_ID`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENGINE_TRANSACTION_ID`'
- en: The storage engine internal ID of the transaction that requested the lock. This
    can be considered the owner of the lock, although the lock might still be pending,
    not actually granted yet (`LOCK_STATUS='WAITING'`).
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请求锁的事务的存储引擎内部 ID。这可以被视为锁的所有者，尽管锁可能仍处于挂起状态，实际上尚未被授予（`LOCK_STATUS='WAITING'`）。
- en: If the transaction has not yet performed any write operation (is still considered
    read only), the column contains internal data that users should not try to interpret.
    Otherwise, the column is the transaction ID.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事务尚未执行任何写操作（仍被视为只读），则该列包含用户不应尝试解释的内部数据。否则，该列是事务 ID。
- en: For `InnoDB`, to obtain details about the transaction, join this column with
    the `TRX_ID` column of the `INFORMATION_SCHEMA` [`INNODB_TRX`](information-schema-innodb-trx-table.html
    "28.4.28 The INFORMATION_SCHEMA INNODB_TRX Table") table.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`InnoDB`，要获取有关事务的详细信息，请将此列与`INFORMATION_SCHEMA` [`INNODB_TRX`](information-schema-innodb-trx-table.html
    "28.4.28 The INFORMATION_SCHEMA INNODB_TRX Table")表的`TRX_ID`列连接。
- en: '`THREAD_ID`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREAD_ID`'
- en: The thread ID of the session that created the lock. To obtain details about
    the thread, join this column with the `THREAD_ID` column of the Performance Schema
    [`threads`](performance-schema-threads-table.html "29.12.21.8 The threads Table")
    table.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建锁的会话的线程 ID。要获取有关线程的详细信息，请将此列与性能模式[`threads`](performance-schema-threads-table.html
    "29.12.21.8 The threads Table")表的`THREAD_ID`列连接。
- en: '`THREAD_ID` can be used together with `EVENT_ID` to determine the event during
    which the lock data structure was created in memory. (This event might have occurred
    before this particular lock request occurred, if the data structure is used to
    store multiple locks.)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`THREAD_ID`可以与`EVENT_ID`一起使用，以确定在内存中创建锁数据结构的事件。 （如果数据结构用于存储多个锁，则此事件可能发生在此特定锁请求发生之前。）'
- en: '`EVENT_ID`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EVENT_ID`'
- en: 'The Performance Schema event that caused the lock. Tuples of (`THREAD_ID`,
    `EVENT_ID`) values implicitly identify a parent event in other Performance Schema
    tables:'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导致锁定的性能模式事件。(`THREAD_ID`, `EVENT_ID`)值的元组在其他性能模式表中隐式标识父事件：
- en: The parent wait event in the `events_waits_*`xxx`*` tables
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`events_waits_*`xxx`*`表中的父等待事件'
- en: The parent stage event in the `events_stages_*`xxx`*` tables
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`events_stages_*`xxx`*`表中的父阶段事件'
- en: The parent statement event in the `events_statements_*`xxx`*` tables
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`events_statements_*`xxx`*`表中的父语句事件'
- en: The parent transaction event in the [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table") table
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table")表中的父事务事件'
- en: To obtain details about the parent event, join the `THREAD_ID` and `EVENT_ID`
    columns with the columns of like name in the appropriate parent event table. See
    [Section 29.19.2, “Obtaining Parent Event Information”](performance-schema-obtaining-parent-events.html
    "29.19.2 Obtaining Parent Event Information").
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要获取有关父事件的详细信息，请将`THREAD_ID`和`EVENT_ID`列与适当的父事件表中同名的列进行连接。参见[Section 29.19.2,
    “Obtaining Parent Event Information”](performance-schema-obtaining-parent-events.html
    "29.19.2 Obtaining Parent Event Information")。
- en: '`OBJECT_SCHEMA`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_SCHEMA`'
- en: The schema that contains the locked table.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含被锁定表的模式。
- en: '`OBJECT_NAME`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_NAME`'
- en: The name of the locked table.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 被锁定表的名称。
- en: '`PARTITION_NAME`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PARTITION_NAME`'
- en: The name of the locked partition, if any; `NULL` otherwise.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 被锁定的分区的名称，如果有的话；否则为`NULL`。
- en: '`SUBPARTITION_NAME`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SUBPARTITION_NAME`'
- en: The name of the locked subpartition, if any; `NULL` otherwise.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 被锁定的子分区的名称，如果有的话；否则为`NULL`。
- en: '`INDEX_NAME`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INDEX_NAME`'
- en: The name of the locked index, if any; `NULL` otherwise.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 被锁定的索引的名称，如果有的话；否则为`NULL`。
- en: In practice, `InnoDB` always creates an index (`GEN_CLUST_INDEX`), so `INDEX_NAME`
    is non-`NULL` for `InnoDB` tables.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实践中，`InnoDB`总是创建一个索引（`GEN_CLUST_INDEX`），因此对于`InnoDB`表，`INDEX_NAME`不是`NULL`。
- en: '`OBJECT_INSTANCE_BEGIN`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_INSTANCE_BEGIN`'
- en: The address in memory of the lock.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 锁的内存地址。
- en: '`LOCK_TYPE`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCK_TYPE`'
- en: The type of lock.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 锁的类型。
- en: The value is storage engine dependent. For `InnoDB`, permitted values are `RECORD`
    for a row-level lock, `TABLE` for a table-level lock.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该值取决于存储引擎。对于`InnoDB`，允许的值是`RECORD`（行级锁）和`TABLE`（表级锁）。
- en: '`LOCK_MODE`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCK_MODE`'
- en: How the lock is requested.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 锁是如何请求的。
- en: The value is storage engine dependent. For `InnoDB`, permitted values are `S[,GAP]`,
    `X[,GAP]`, `IS[,GAP]`, `IX[,GAP]`, `AUTO_INC`, and `UNKNOWN`. Lock modes other
    than `AUTO_INC` and `UNKNOWN` indicate gap locks, if present. For information
    about `S`, `X`, `IS`, `IX`, and gap locks, refer to [Section 17.7.1, “InnoDB Locking”](innodb-locking.html
    "17.7.1 InnoDB Locking").
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该值取决于存储引擎。对于`InnoDB`，允许的值是`S[,GAP]`，`X[,GAP]`，`IS[,GAP]`，`IX[,GAP]`，`AUTO_INC`和`UNKNOWN`。
    除了`AUTO_INC`和`UNKNOWN`之外的锁模式表示存在间隙锁。 有关`S`，`X`，`IS`，`IX`和间隙锁的信息，请参阅[Section 17.7.1,
    “InnoDB Locking”](innodb-locking.html "17.7.1 InnoDB Locking")。
- en: '`LOCK_STATUS`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCK_STATUS`'
- en: The status of the lock request.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 锁请求的状态。
- en: The value is storage engine dependent. For `InnoDB`, permitted values are `GRANTED`
    (lock is held) and `WAITING` (lock is being waited for).
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该值取决于存储引擎。对于`InnoDB`，允许的值是`GRANTED`（持有锁）和`WAITING`（正在等待锁）。
- en: '`LOCK_DATA`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCK_DATA`'
- en: The data associated with the lock, if any. The value is storage engine dependent.
    For `InnoDB`, a value is shown if the `LOCK_TYPE` is `RECORD`, otherwise the value
    is `NULL`. Primary key values of the locked record are shown for a lock placed
    on the primary key index. Secondary index values of the locked record are shown
    with primary key values appended for a lock placed on a secondary index. If there
    is no primary key, `LOCK_DATA` shows either the key values of a selected unique
    index or the unique `InnoDB` internal row ID number, according to the rules governing
    `InnoDB` clustered index use (see [Section 17.6.2.1, “Clustered and Secondary
    Indexes”](innodb-index-types.html "17.6.2.1 Clustered and Secondary Indexes")).
    `LOCK_DATA` reports “supremum pseudo-record” for a lock taken on a supremum pseudo-record.
    If the page containing the locked record is not in the buffer pool because it
    was written to disk while the lock was held, `InnoDB` does not fetch the page
    from disk. Instead, `LOCK_DATA` reports `NULL`.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果有锁相关的数据，则显示该数据。该值取决于存储引擎。对于`InnoDB`，如果`LOCK_TYPE`是`RECORD`，则显示一个值，否则该值为`NULL`。对于放置在主键索引上的锁，显示被锁定记录的主键值。对于放置在辅助索引上的锁，显示附加的主键值。如果没有主键，`LOCK_DATA`显示所选唯一索引的键值或唯一的`InnoDB`内部行ID号，根据`InnoDB`聚簇索引使用规则（参见[Section 17.6.2.1,
    “Clustered and Secondary Indexes”](innodb-index-types.html "17.6.2.1 Clustered
    and Secondary Indexes")）。对于在伪记录上放置的锁，`LOCK_DATA`报告“supremum伪记录”。如果包含被锁定记录的页面不在缓冲池中，因为在持有锁时将其写入磁盘，`InnoDB`不会从磁盘获取页面。相反，`LOCK_DATA`报告`NULL`。
- en: 'The [`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The
    data_locks Table") table has these indexes:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The data_locks
    Table")表具有以下索引：'
- en: Primary key on (`ENGINE_LOCK_ID`, `ENGINE`)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主键在(`ENGINE_LOCK_ID`, `ENGINE`)
- en: Index on (`ENGINE_TRANSACTION_ID`, `ENGINE`)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引在(`ENGINE_TRANSACTION_ID`, `ENGINE`)
- en: Index on (`THREAD_ID`, `EVENT_ID`)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引在(`THREAD_ID`, `EVENT_ID`)
- en: Index on (`OBJECT_SCHEMA`, `OBJECT_NAME`, `PARTITION_NAME`, `SUBPARTITION_NAME`)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引在(`OBJECT_SCHEMA`, `OBJECT_NAME`, `PARTITION_NAME`, `SUBPARTITION_NAME`)
- en: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    is not permitted for the [`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table") table.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")不允许用于[`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table")表。'
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Prior to MySQL 8.0.1, information similar to that in the Performance Schema
    [`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The data_locks
    Table") table is available in the `INFORMATION_SCHEMA.INNODB_LOCKS` table, which
    provides information about each lock that an `InnoDB` transaction has requested
    but not yet acquired, and each lock held by a transaction that is blocking another
    transaction. `INFORMATION_SCHEMA.INNODB_LOCKS` is deprecated and is removed as
    of MySQL 8.0.1. [`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The
    data_locks Table") should be used instead.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.1之前，类似于性能模式[`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table")表中的信息可在`INFORMATION_SCHEMA.INNODB_LOCKS`表中找到，该表提供有关每个`InnoDB`事务请求但尚未获取的锁以及每个由阻止另一个事务的事务持有的锁的信息。`INFORMATION_SCHEMA.INNODB_LOCKS`已被弃用，并在MySQL
    8.0.1中移除。应改用[`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The
    data_locks Table")。
- en: 'Differences between `INNODB_LOCKS` and [`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table"):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`INNODB_LOCKS`和[`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The
    data_locks Table")之间的区别：'
- en: If a transaction holds a lock, `INNODB_LOCKS` displays the lock only if another
    transaction is waiting for it. [`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table") displays the lock regardless of whether any
    transaction is waiting for it.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个事务持有锁，`INNODB_LOCKS`仅在另一个事务正在等待时显示该锁。[`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table")无论是否有事务在等待，都会显示该锁。
- en: The [`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The
    data_locks Table") table has no columns corresponding to `LOCK_SPACE`, `LOCK_PAGE`,
    or `LOCK_REC`.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The data_locks
    Table")表没有与`LOCK_SPACE`、`LOCK_PAGE`或`LOCK_REC`对应的列。'
- en: The `INNODB_LOCKS` table requires the global [`PROCESS`](privileges-provided.html#priv_process)
    privilege. The [`data_locks`](performance-schema-data-locks-table.html "29.12.13.1 The
    data_locks Table") table requires the usual Performance Schema privilege of [`SELECT`](privileges-provided.html#priv_select)
    on the table to be selected from.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INNODB_LOCKS` 表需要全局 [`PROCESS`](privileges-provided.html#priv_process) 权限。[`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table") 表需要通常的 Performance Schema 权限，在表上具有 [`SELECT`](privileges-provided.html#priv_select)
    权限才能被选择。'
- en: The following table shows the mapping from `INNODB_LOCKS` columns to [`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table") columns. Use this information to migrate applications
    from one table to the other.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了从 `INNODB_LOCKS` 列到 [`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table") 列的映射。使用这些信息将应用程序从一个表迁移到另一个表。
- en: '**Table 29.4 Mapping from INNODB_LOCKS to data_locks Columns**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 29.4 从 INNODB_LOCKS 到 data_locks 列的映射**'
- en: '| INNODB_LOCKS Column | data_locks Column |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| INNODB_LOCKS 列 | data_locks 列 |'
- en: '| `LOCK_ID` | `ENGINE_LOCK_ID` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_ID` | `ENGINE_LOCK_ID` |'
- en: '| `LOCK_TRX_ID` | `ENGINE_TRANSACTION_ID` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_TRX_ID` | `ENGINE_TRANSACTION_ID` |'
- en: '| `LOCK_MODE` | `LOCK_MODE` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_MODE` | `LOCK_MODE` |'
- en: '| `LOCK_TYPE` | `LOCK_TYPE` |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_TYPE` | `LOCK_TYPE` |'
- en: '| `LOCK_TABLE` (combined schema/table names) | `OBJECT_SCHEMA` (schema name),
    `OBJECT_NAME` (table name) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_TABLE`（合并的模式/表名） | `OBJECT_SCHEMA`（模式名），`OBJECT_NAME`（表名） |'
- en: '| `LOCK_INDEX` | `INDEX_NAME` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_INDEX` | `INDEX_NAME` |'
- en: '| `LOCK_SPACE` | None |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_SPACE` | 无 |'
- en: '| `LOCK_PAGE` | None |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_PAGE` | 无 |'
- en: '| `LOCK_REC` | None |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_REC` | 无 |'
- en: '| `LOCK_DATA` | `LOCK_DATA` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `LOCK_DATA` | `LOCK_DATA` |'
- en: '| INNODB_LOCKS Column | data_locks Column |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| INNODB_LOCKS 列 | data_locks 列 |'
