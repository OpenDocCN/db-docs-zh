- en: 14.11 XML Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.11 XML 函数
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html](https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html](https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html)
- en: '**Table 14.16 XML Functions**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.16 XML 函数**'
- en: '| Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`ExtractValue()`](xml-functions.html#function_extractvalue) | Extract a
    value from an XML string using XPath notation |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`ExtractValue()`](xml-functions.html#function_extractvalue) | 使用 XPath 表示法从
    XML 字符串中提取值 |'
- en: '| [`UpdateXML()`](xml-functions.html#function_updatexml) | Return replaced
    XML fragment |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`UpdateXML()`](xml-functions.html#function_updatexml) | 返回替换的 XML 片段 |'
- en: This section discusses XML and related functionality in MySQL.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了 MySQL 中的 XML 及相关功能。
- en: Note
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to obtain XML-formatted output from MySQL in the [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") and [**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program") clients by invoking them with the
    [`--xml`](mysql-command-options.html#option_mysql_xml) option. See [Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client"), and [Section 6.5.4, “mysqldump — A Database Backup Program”](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program").
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在 [`--xml`](mysql-command-options.html#option_mysql_xml) 选项下调用 [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") 和 [**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program") 客户端来从 MySQL 中获取 XML 格式化输出。请参阅 [Section 6.5.1,
    “mysql — The MySQL Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")，以及 [Section 6.5.4, “mysqldump — A Database Backup Program”](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program")。
- en: Two functions providing basic XPath 1.0 (XML Path Language, version 1.0) capabilities
    are available. Some basic information about XPath syntax and usage is provided
    later in this section; however, an in-depth discussion of these topics is beyond
    the scope of this manual, and you should refer to the [XML Path Language (XPath)
    1.0 standard](http://www.w3.org/TR/xpath) for definitive information. A useful
    resource for those new to XPath or who desire a refresher in the basics is the
    [Zvon.org XPath Tutorial](http://www.zvon.org/xxl/XPathTutorial/), which is available
    in several languages.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 提供基本 XPath 1.0（XML Path Language，版本 1.0）功能的两个函数可用。关于 XPath 语法和用法的一些基本信息稍后在本节中提供；但是，关于这些主题的深入讨论超出了本手册的范围，您应参考
    [XML Path Language (XPath) 1.0 标准](http://www.w3.org/TR/xpath) 获取确切信息。对于对 XPath
    新手或希望复习基础知识的人来说，[Zvon.org XPath 教程](http://www.zvon.org/xxl/XPathTutorial/) 是一个有用的资源，提供多种语言版本。
- en: Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: These functions remain under development. We continue to improve these and other
    aspects of XML and XPath functionality in MySQL 8.0 and onwards. You may discuss
    these, ask questions about them, and obtain help from other users with them in
    the [MySQL XML User Forum](https://forums.mysql.com/list.php?44).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数仍在开发中。我们将继续改进 MySQL 8.0 及以后版本中的 XML 和 XPath 功能的其他方面。您可以在 [MySQL XML 用户论坛](https://forums.mysql.com/list.php?44)
    中讨论这些问题，提出问题，并从其他用户那里获得帮助。
- en: 'XPath expressions used with these functions support user variables and local
    stored program variables. User variables are weakly checked; variables local to
    stored programs are strongly checked (see also Bug #26518):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '与这些函数一起使用的 XPath 表达式支持用户变量和存储程序局部变量。用户变量进行弱类型检查；存储程序局部变量进行强类型检查（另请参见 Bug #26518）：'
- en: '**User variables (weak checking). ** Variables using the syntax `$@*`variable_name`*`
    (that is, user variables) are not checked. No warnings or errors are issued by
    the server if a variable has the wrong type or has previously not been assigned
    a value. This also means the user is fully responsible for any typographical errors,
    since no warnings are given if (for example) `$@myvairable` is used where `$@myvariable`
    was intended.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户变量（弱类型检查）。** 使用 `$@*`variable_name`*`（即用户变量）语法的变量不受检查。如果变量类型错误或之前未分配值，服务器不会发出警告或错误。这也意味着用户完全负责任何打字错误，因为如果（例如）使用
    `$@myvairable` 而意图使用 `$@myvariable`，服务器不会发出警告。 '
- en: 'Example:'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Variables in stored programs (strong checking). ** Variables using the syntax
    `$*`variable_name`*` can be declared and used with these functions when they are
    called inside stored programs. Such variables are local to the stored program
    in which they are defined, and are strongly checked for type and value.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储程序中的变量（强类型检查）。** 使用 `$*`variable_name`*` 语法声明和使用这些函数时，当它们在存储程序内部调用时，这些变量是局部于定义它们的存储程序，并且对类型和值进行了强类型检查。'
- en: 'Example:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Parameters. ** Variables used in XPath expressions inside stored routines
    that are passed in as parameters are also subject to strong checking.'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**参数。** 在存储过程内部XPath表达式中使用的变量作为参数传递时也要进行严格检查。'
- en: Expressions containing user variables or variables local to stored programs
    must otherwise (except for notation) conform to the rules for XPath expressions
    containing variables as given in the XPath 1.0 specification.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 包含用户变量或存储程序本地变量的表达式必须（除了符号）符合XPath 1.0规范中包含变量的XPath表达式的规则。
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'A user variable used to store an XPath expression is treated as an empty string.
    Because of this, it is not possible to store an XPath expression as a user variable.
    (Bug #32911)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '用于存储XPath表达式的用户变量被视为空字符串。因此，不可能将XPath表达式存储为用户变量。（Bug #32911）'
- en: '[`ExtractValue(*`xml_frag`*, *`xpath_expr`*)`](xml-functions.html#function_extractvalue)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ExtractValue(*`xml_frag`*, *`xpath_expr`*)`](xml-functions.html#function_extractvalue)'
- en: '[`ExtractValue()`](xml-functions.html#function_extractvalue) takes two string
    arguments, a fragment of XML markup *`xml_frag`* and an XPath expression *`xpath_expr`*
    (also known as a locator); it returns the text (`CDATA`) of the first text node
    which is a child of the element or elements matched by the XPath expression.'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ExtractValue()`](xml-functions.html#function_extractvalue)接受两个字符串参数，一个是XML标记片段*`xml_frag`*，另一个是XPath表达式*`xpath_expr`*（也称为定位器）；它返回与XPath表达式匹配的元素的第一个文本节点的文本（`CDATA`）。'
- en: Using this function is the equivalent of performing a match using the *`xpath_expr`*
    after appending `/text()`. In other words, [`ExtractValue('<a><b>Sakila</b></a>',
    '/a/b')`](xml-functions.html#function_extractvalue) and [`ExtractValue('<a><b>Sakila</b></a>',
    '/a/b/text()')`](xml-functions.html#function_extractvalue) produce the same result.
    If *`xml_frag`* or *`xpath_expr`* is `NULL`, the function returns `NULL`.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此函数等同于在追加`/text()`后使用*`xpath_expr`*进行匹配。换句话说，[`ExtractValue('<a><b>Sakila</b></a>',
    '/a/b')`](xml-functions.html#function_extractvalue)和[`ExtractValue('<a><b>Sakila</b></a>',
    '/a/b/text()')`](xml-functions.html#function_extractvalue)产生相同的结果。如果*`xml_frag`*或*`xpath_expr`*为`NULL`，函数将返回`NULL`。
- en: If multiple matches are found, the content of the first child text node of each
    matching element is returned (in the order matched) as a single, space-delimited
    string.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果找到多个匹配项，则返回每个匹配元素的第一个子文本节点的内容（按匹配顺序）作为一个单独的、以空格分隔的字符串。
- en: If no matching text node is found for the expression (including the implicit
    `/text()`)—for whatever reason, as long as *`xpath_expr`* is valid, and *`xml_frag`*
    consists of elements which are properly nested and closed—an empty string is returned.
    No distinction is made between a match on an empty element and no match at all.
    This is by design.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果找不到与表达式匹配的文本节点（包括隐式的`/text()`）——无论出于何种原因，只要*`xpath_expr`*有效，*`xml_frag`*由正确嵌套和关闭的元素组成——则返回空字符串。不区分匹配空元素和根本没有匹配。这是设计上的考虑。
- en: 'If you need to determine whether no matching element was found in *`xml_frag`*
    or such an element was found but contained no child text nodes, you should test
    the result of an expression that uses the XPath `count()` function. For example,
    both of these statements return an empty string, as shown here:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您需要确定*`xml_frag`*中是否找不到匹配元素或找到这样的元素但不包含子文本节点，您应该测试使用XPath `count()`函数的表达式的结果。例如，这两个语句都返回空字符串，如下所示：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, you can determine whether there was actually a matching element using
    the following:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，您可以通过以下方式确定是否实际上存在匹配的元素：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: '[`ExtractValue()`](xml-functions.html#function_extractvalue) returns only `CDATA`,
    and does not return any tags that might be contained within a matching tag, nor
    any of their content (see the result returned as `val1` in the following example).'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ExtractValue()`](xml-functions.html#function_extractvalue)仅返回`CDATA`，不返回匹配标记内可能包含的任何标记，也不返回它们的内容（请参见以下示例中作为`val1`返回的结果）。'
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This function uses the current SQL collation for making comparisons with `contains()`,
    performing the same collation aggregation as other string functions (such as [`CONCAT()`](string-functions.html#function_concat)),
    in taking into account the collation coercibility of their arguments; see [Section 12.8.4,
    “Collation Coercibility in Expressions”](charset-collation-coercibility.html "12.8.4 Collation
    Coercibility in Expressions"), for an explanation of the rules governing this
    behavior.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数使用当前的 SQL 校对规则来与`contains()`进行比较，执行与其他字符串函数（如[`CONCAT()`](string-functions.html#function_concat)）相同的校对聚合，考虑到它们的参数的校对可强制性；请参阅[第
    12.8.4 节，“表达式中的校对可强制性”](charset-collation-coercibility.html "12.8.4 表达式中的校对可强制性")，了解规定此行为的规则的解释。
- en: (Previously, binary—that is, case-sensitive—comparison was always used.)
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （以前，总是使用二进制—即，区分大小写—比较。）
- en: '`NULL` is returned if *`xml_frag`* contains elements which are not properly
    nested or closed, and a warning is generated, as shown in this example:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果*`xml_frag`*包含未正确嵌套或关闭的元素，则返回`NULL`，并生成警告，如下例所示：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[`UpdateXML(*`xml_target`*, *`xpath_expr`*, *`new_xml`*)`](xml-functions.html#function_updatexml)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UpdateXML(*`xml_target`*, *`xpath_expr`*, *`new_xml`*)`](xml-functions.html#function_updatexml)'
- en: This function replaces a single portion of a given fragment of XML markup *`xml_target`*
    with a new XML fragment *`new_xml`*, and then returns the changed XML. The portion
    of *`xml_target`* that is replaced matches an XPath expression *`xpath_expr`*
    supplied by the user.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数用新的 XML 片段*`new_xml`*替换给定 XML 标记片段*`xml_target`*的单个部分，然后返回更改后的 XML。被替换的*`xml_target`*部分与用户提供的
    XPath 表达式*`xpath_expr`*匹配。
- en: If no expression matching *`xpath_expr`* is found, or if multiple matches are
    found, the function returns the original *`xml_target`* XML fragment. All three
    arguments should be strings. If any of the arguments to `UpdateXML()` are `NULL`,
    the function returns `NULL`.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果找不到与*`xpath_expr`*匹配的表达式，或者找到多个匹配项，则该函数返回原始的*`xml_target`* XML 片段。所有三个参数都应为字符串。如果`UpdateXML()`的任何参数为`NULL`，则函数返回`NULL`。
- en: '[PRE6]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A discussion in depth of XPath syntax and usage are beyond the scope of this
    manual. Please see the [XML Path Language (XPath) 1.0 specification](http://www.w3.org/TR/xpath)
    for definitive information. A useful resource for those new to XPath or who are
    wishing a refresher in the basics is the [Zvon.org XPath Tutorial](http://www.zvon.org/xxl/XPathTutorial/),
    which is available in several languages.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对 XPath 语法和用法的深入讨论超出了本手册的范围。请参阅[XML Path Language (XPath) 1.0 规范](http://www.w3.org/TR/xpath)以获取确切信息。对于那些对
    XPath 新手或希望在基础知识方面进行复习的人来说，[Zvon.org XPath 教程](http://www.zvon.org/xxl/XPathTutorial/)是一个有用的资源，提供多种语言版本。
- en: 'Descriptions and examples of some basic XPath expressions follow:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些基本 XPath 表达式的描述和示例：
- en: '`/*`tag`*`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/*`tag`*`'
- en: Matches `<*`tag`*/>` if and only if `<*`tag`*/>` is the root element.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅当`<*`tag`*/>`是根元素时，才匹配`<*`tag`*/>`。
- en: 'Example: `/a` has a match in `<a><b/></a>` because it matches the outermost
    (root) tag. It does not match the inner *`a`* element in `<b><a/></b>` because
    in this instance it is the child of another element.'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：`/a`在`<a><b/></a>`中有匹配项，因为它匹配最外层（根）标记。它不匹配`<b><a/></b>`中的内部*`a`*元素，因为在这种情况下，它是另一个元素的子元素。
- en: '`/*`tag1`*/*`tag2`*`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/*`tag1`*/*`tag2`*`'
- en: Matches `<*`tag2`*/>` if and only if it is a child of `<*`tag1`*/>`, and `<*`tag1`*/>`
    is the root element.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅当`<*`tag2`*/>`是`<*`tag1`*/>`的子元素，并且`<*`tag1`*/>`是根元素时，才匹配`<*`tag2`*/>`。
- en: 'Example: `/a/b` matches the *`b`* element in the XML fragment `<a><b/></a>`
    because it is a child of the root element *`a`*. It does not have a match in `<b><a/></b>`
    because in this case, *`b`* is the root element (and hence the child of no other
    element). Nor does the XPath expression have a match in `<a><c><b/></c></a>`;
    here, *`b`* is a descendant of *`a`*, but not actually a child of *`a`*.'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：`/a/b`匹配 XML 片段`<a><b/></a>`中的*`b`*元素，因为它是根元素*`a`*的子元素。它在`<b><a/></b>`中没有匹配项，因为在这种情况下，*`b`*是根元素（因此不是其他元素的子元素）。XPath
    表达式在`<a><c><b/></c></a>`中也没有匹配项；这里，*`b`*是*`a`*的后代，但实际上不是*`a`*的子元素。
- en: This construct is extendable to three or more elements. For example, the XPath
    expression `/a/b/c` matches the *`c`* element in the fragment `<a><b><c/></b></a>`.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此结构可扩展到三个或更多元素。例如，XPath 表达式`/a/b/c`匹配片段`<a><b><c/></b></a>`中的*`c`*元素。
- en: '`//*`tag`*`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`//*`tag`*`'
- en: Matches any instance of `<*`tag`*>`.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配任何`<*`tag`*>`的实例。
- en: 'Example: `//a` matches the *`a`* element in any of the following: `<a><b><c/></b></a>`;
    `<c><a><b/></a></b>`; `<c><b><a/></b></c>`.'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：`//a` 匹配以下任意一个元素中的*`a`*元素：`<a><b><c/></b></a>`；`<c><a><b/></a></b>`；`<c><b><a/></b></c>`。
- en: '`//` can be combined with `/`. For example, `//a/b` matches the *`b`* element
    in either of the fragments `<a><b/></a>` or `<c><a><b/></a></c>`.'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`//`可以与`/`结合使用。例如，`//a/b`匹配片段`<a><b/></a>`或`<c><a><b/></a></c>`中的`b`元素。'
- en: Note
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: '`//*`tag`*` is the equivalent of `/descendant-or-self::*/*`tag`*`. A common
    error is to confuse this with `/descendant-or-self::*`tag`*`, although the latter
    expression can actually lead to very different results, as can be seen here:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`//*`tag`*`等同于`/descendant-or-self::*/*`tag`*`。一个常见错误是将其与`/descendant-or-self::*`tag`*`混淆，尽管后者的表达实际上可能导致非常不同的结果，如下所示：'
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `*` operator acts as a “wildcard” that matches any element. For example,
    the expression `/*/b` matches the *`b`* element in either of the XML fragments
    `<a><b/></a>` or `<c><b/></c>`. However, the expression does not produce a match
    in the fragment `<b><a/></b>` because *`b`* must be a child of some other element.
    The wildcard may be used in any position: The expression `/*/b/*` matches any
    child of a *`b`* element that is itself not the root element.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`运算符充当“通配符”，匹配任何元素。例如，表达式`/*/b`匹配 XML 片段`<a><b/></a>`或`<c><b/></c>`中的`b`元素。然而，在片段`<b><a/></b>`中，该表达式不会产生匹配，因为`b`必须是其他元素的子元素。通配符可以在任何位置使用：表达式`/*/b/*`匹配`b`元素的任何子元素，该子元素本身不是根元素。'
- en: You can match any of several locators using the `|` ([`UNION`](union.html "15.2.18 UNION
    Clause")) operator. For example, the expression `//b|//c` matches all *`b`* and
    *`c`* elements in the XML target.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用`|`（[`UNION`](union.html "15.2.18 UNION Clause")）运算符匹配多个定位器中的任何一个。例如，表达式`//b|//c`匹配
    XML 目标中的所有`b`和`c`元素。
- en: It is also possible to match an element based on the value of one or more of
    its attributes. This done using the syntax `*`tag`*[@*`attribute`*="*`value`*"]`.
    For example, the expression `//b[@id="idB"]` matches the second *`b`* element
    in the fragment `<a><b id="idA"/><c/><b id="idB"/></a>`. To match against *any*
    element having `*`attribute`*="*`value`*"`, use the XPath expression `//*[*`attribute`*="*`value`*"]`.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还可以根据一个或多个属性的值匹配元素。使用语法`*`tag`*[@*`attribute`*="*`value`*"]`。例如，表达式`//b[@id="idB"]`匹配片段`<a><b
    id="idA"/><c/><b id="idB"/></a>`中的第二个`b`元素。要匹配具有`*`attribute`*="*`value`*"`的*任何*元素，请使用
    XPath 表达式`//*[*`attribute`*="*`value`*"]`。
- en: To filter multiple attribute values, simply use multiple attribute-comparison
    clauses in succession. For example, the expression `//b[@c="x"][@d="y"]` matches
    the element `<b c="x" d="y"/>` occurring anywhere in a given XML fragment.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要过滤多个属性值，只需连续使用多个属性比较子句。例如，表达式`//b[@c="x"][@d="y"]`匹配出现在给定 XML 片段中的任何位置的元素`<b
    c="x" d="y"/>`。
- en: 'To find elements for which the same attribute matches any of several values,
    you can use multiple locators joined by the `|` operator. For example, to match
    all *`b`* elements whose *`c`* attributes have either of the values 23 or 17,
    use the expression `//b[@c="23"]|//b[@c="17"]`. You can also use the logical `or`
    operator for this purpose: `//b[@c="23" or @c="17"]`.'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要查找具有多个值中的任何一个匹配的元素，可以使用由`|`运算符连接的多个定位器。例如，要匹配所有`b`元素，其`c`属性具有值 23 或 17 中的任何一个，请使用表达式`//b[@c="23"]|//b[@c="17"]`。您也可以使用逻辑`or`运算符来实现此目的：`//b[@c="23"
    or @c="17"]`。
- en: Note
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The difference between `or` and `|` is that `or` joins conditions, while `|`
    joins result sets.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`or`和`|`之间的区别在于`or`连接条件，而`|`连接结果集。'
- en: '**XPath Limitations. ** The XPath syntax supported by these functions is currently
    subject to the following limitations:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**XPath 限制。** 这些函数支持的 XPath 语法目前受到以下限制：'
- en: Nodeset-to-nodeset comparison (such as `'/a/b[@c=@d]'`) is not supported.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持节点集到节点集的比较（例如`'/a/b[@c=@d]'`）。
- en: 'All of the standard XPath comparison operators are supported. (Bug #22823)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '所有标准的 XPath 比较运算符都受支持。（Bug #22823）'
- en: 'Relative locator expressions are resolved in the context of the root node.
    For example, consider the following query and result:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对定位器表达式在根节点的上下文中解析。例如，考虑以下查询和结果：
- en: '[PRE8]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, the locator `a/b` resolves to `/a/b`.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，定位器`a/b`解析为`/a/b`。
- en: 'Relative locators are also supported within predicates. In the following example,
    `d[../@c="1"]` is resolved as `/a/b[@c="1"]/d`:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在谓词内也支持相对定位器。在以下示例中，`d[../@c="1"]`解析为`/a/b[@c="1"]/d`：
- en: '[PRE9]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Locators prefixed with expressions that evaluate as scalar values—including
    variable references, literals, numbers, and scalar function calls—are not permitted,
    and their use results in an error.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许使用作为标量值评估的表达式前缀定位器，包括变量引用、文字、数字和标量函数调用，其使用会导致错误。
- en: 'The `::` operator is not supported in combination with node types such as the
    following:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`::` 运算符与以下节点类型的组合不受支持：'
- en: '`*`axis`*::comment()`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`axis`*::comment()`'
- en: '`*`axis`*::text()`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`axis`*::text()`'
- en: '`*`axis`*::processing-instructions()`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`axis`*::processing-instructions()`'
- en: '`*`axis`*::node()`'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`axis`*::node()`'
- en: 'However, name tests (such as `*`axis`*::*`name`*` and `*`axis`*::*`) are supported,
    as shown in these examples:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，名称测试（如`*`axis`*::*`name`*`和`*`axis`*::*`）是受支持的，如下例所示：
- en: '[PRE10]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '“Up-and-down” navigation is not supported in cases where the path would lead
    “above” the root element. That is, you cannot use expressions which match on descendants
    of ancestors of a given element, where one or more of the ancestors of the current
    element is also an ancestor of the root element (see Bug #16321).'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在路径会导致“超出”根元素的情况下，不支持“上下”导航。也就是说，您不能使用在给定元素的祖先的后代上匹配的表达式，其中当前元素的一个或多个祖先也是根元素的祖先（请参见
    Bug #16321）。'
- en: 'The following XPath functions are not supported, or have known issues as indicated:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持以下 XPath 函数，或者存在已知问题，如下所示：
- en: '`id()`'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id()`'
- en: '`lang()`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lang()`'
- en: '`local-name()`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local-name()`'
- en: '`name()`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name()`'
- en: '`namespace-uri()`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`namespace-uri()`'
- en: '`normalize-space()`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normalize-space()`'
- en: '`starts-with()`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`starts-with()`'
- en: '`string()`'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string()`'
- en: '`substring-after()`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`substring-after()`'
- en: '`substring-before()`'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`substring-before()`'
- en: '`translate()`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`translate()`'
- en: 'The following axes are not supported:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持以下轴：
- en: '`following-sibling`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`following-sibling`'
- en: '`following`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`following`'
- en: '`preceding-sibling`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preceding-sibling`'
- en: '`preceding`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preceding`'
- en: 'XPath expressions passed as arguments to [`ExtractValue()`](xml-functions.html#function_extractvalue)
    and [`UpdateXML()`](xml-functions.html#function_updatexml) may contain the colon
    character (`:`) in element selectors, which enables their use with markup employing
    XML namespaces notation. For example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参数传递给 [`ExtractValue()`](xml-functions.html#function_extractvalue) 和 [`UpdateXML()`](xml-functions.html#function_updatexml)
    的 XPath 表达式可能包含元素选择器中的冒号字符（`:`），这使它们可以与使用 XML 命名空间表示法的标记一起使用。例如：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is similar in some respects to what is permitted by [Apache Xalan](http://xalan.apache.org/)
    and some other parsers, and is much simpler than requiring namespace declarations
    or the use of the `namespace-uri()` and `local-name()` functions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这在某些方面类似于 [Apache Xalan](http://xalan.apache.org/) 和其他一些解析器允许的内容，比起要求命名空间声明或使用
    `namespace-uri()` 和 `local-name()` 函数要简单得多。
- en: '**Error handling. ** For both [`ExtractValue()`](xml-functions.html#function_extractvalue)
    and [`UpdateXML()`](xml-functions.html#function_updatexml), the XPath locator
    used must be valid and the XML to be searched must consist of elements which are
    properly nested and closed. If the locator is invalid, an error is generated:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误处理。** 对于 [`ExtractValue()`](xml-functions.html#function_extractvalue) 和
    [`UpdateXML()`](xml-functions.html#function_updatexml)，使用的 XPath 定位器必须有效，并且要搜索的
    XML 必须由正确嵌套和关闭的元素组成。如果定位器无效，则会生成错误：'
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If *`xml_frag`* does not consist of elements which are properly nested and
    closed, `NULL` is returned and a warning is generated, as shown in this example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *`xml_frag`* 不包含正确嵌套和关闭的元素，则返回 `NULL` 并生成警告，如下例所示：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Important
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The replacement XML used as the third argument to [`UpdateXML()`](xml-functions.html#function_updatexml)
    is *not* checked to determine whether it consists solely of elements which are
    properly nested and closed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为传递给 [`UpdateXML()`](xml-functions.html#function_updatexml) 的第三个参数的替换 XML *不会*
    被检查，以确定它是否仅由正确嵌套和关闭的元素组成。
- en: '**XPath Injection. ** code injection occurs when malicious code is introduced
    into the system to gain unauthorized access to privileges and data. It is based
    on exploiting assumptions made by developers about the type and content of data
    input from users. XPath is no exception in this regard.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**XPath 注入。** 代码注入发生在恶意代码被引入系统以获取未经授权的权限和数据时。它基于开发人员对用户输入数据类型和内容所做的假设。XPath
    也不例外。'
- en: 'A common scenario in which this can happen is the case of application which
    handles authorization by matching the combination of a login name and password
    with those found in an XML file, using an XPath expression like this one:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的情况是应用程序处理授权的情况，通过将登录名和密码的组合与 XML 文件中找到的内容进行匹配，使用类似于以下的 XPath 表达式：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is the XPath equivalent of an SQL statement like this one:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是类似于 SQL 语句的 XPath 等效语句：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A PHP application employing XPath might handle the login process like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 XPath 的 PHP 应用程序可能会处理登录过程如下：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'No checks are performed on the input. This means that a malevolent user can
    “short-circuit” the test by entering `'' or 1=1` for both the login name and password,
    resulting in `$xpath` being evaluated as shown here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 输入上没有进行检查。这意味着恶意用户可以通过在登录名和密码中输入`' or 1=1`来“绕过”测试，导致`$xpath`被评估如下所示：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Since the expression inside the square brackets always evaluates as `true`,
    it is effectively the same as this one, which matches the `id` attribute of every
    `user` element in the XML document:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于方括号内的表达式始终评估为`true`，它实际上与这个表达式相同，该表达式匹配 XML 文档中每个`user`元素的`id`属性：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'One way in which this particular attack can be circumvented is simply by quoting
    the variable names to be interpolated in the definition of `$xpath`, forcing the
    values passed from a Web form to be converted to strings:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 可以简单地通过在`$xpath`的定义中引用要插入的变量名来规避这种特定攻击，强制从 Web 表单传递的值转换为字符串：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is the same strategy that is often recommended for preventing SQL injection
    attacks. In general, the practices you should follow for preventing XPath injection
    attacks are the same as for preventing SQL injection:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这与通常用于防止 SQL 注入攻击的策略相同。一般来说，用于防止 XPath 注入攻击的实践应该与防止 SQL 注入攻击的实践相同：
- en: Never accepted untested data from users in your application.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要在应用程序中接受未经测试的用户数据。
- en: Check all user-submitted data for type; reject or convert data that is of the
    wrong type
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查所有用户提交的数据的类型；拒绝或转换错误类型的数据。
- en: Test numeric data for out of range values; truncate, round, or reject values
    that are out of range. Test strings for illegal characters and either strip them
    out or reject input containing them.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试数值数据是否超出范围；截断、四舍五入或拒绝超出范围的值。测试字符串是否包含非法字符，要么将其剥离，要么拒绝包含这些字符的输入。
- en: Do not output explicit error messages that might provide an unauthorized user
    with clues that could be used to compromise the system; log these to a file or
    database table instead.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要输出可能向未经授权的用户提供线索以危害系统的明确错误消息；而是将这些记录到文件或数据库表中。
- en: Just as SQL injection attacks can be used to obtain information about database
    schemas, so can XPath injection be used to traverse XML files to uncover their
    structure, as discussed in Amit Klein's paper [Blind XPath Injection](http://www.packetstormsecurity.org/papers/bypass/Blind_XPath_Injection_20040518.pdf)
    (PDF file, 46KB).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 SQL 注入攻击可以用于获取有关数据库模式的信息一样，XPath 注入也可以用于遍历 XML 文件以揭示其结构，如 Amit Klein 的论文[Blind
    XPath Injection](http://www.packetstormsecurity.org/papers/bypass/Blind_XPath_Injection_20040518.pdf)（PDF
    文件，46KB）中所讨论的。
- en: 'It is also important to check the output being sent back to the client. Consider
    what can happen when we use the MySQL [`ExtractValue()`](xml-functions.html#function_extractvalue)
    function:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是检查发送回客户端的输出。考虑当我们使用 MySQL [`ExtractValue()`](xml-functions.html#function_extractvalue)
    函数时可能发生的情况：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Because [`ExtractValue()`](xml-functions.html#function_extractvalue) returns
    multiple matches as a single space-delimited string, this injection attack provides
    every valid ID contained within `users.xml` to the user as a single row of output.
    As an extra safeguard, you should also test output before returning it to the
    user. Here is a simple example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 [`ExtractValue()`](xml-functions.html#function_extractvalue) 将多个匹配项作为一个以空格分隔的字符串返回，这种注入攻击将
    `users.xml` 中的每个有效 ID 作为单行输出提供给用户。作为额外的保障，你还应该在返回给用户之前测试输出。这里是一个简单的例子：
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In general, the guidelines for returning data to users securely are the same
    as for accepting user input. These can be summed up as:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，将数据安全返回给用户的指导原则与接受用户输入的原则相同。这可以总结为：
- en: Always test outgoing data for type and permissible values.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终测试传出数据的类型和允许的值。
- en: Never permit unauthorized users to view error messages that might provide information
    about the application that could be used to exploit it.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要允许未经授权的用户查看可能提供有关应用程序信息的错误消息，这些信息可能被用于利用它。
