- en: Datatypes In SQLite Version 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite版本2中的数据类型
- en: 原文：[https://sqlite.com/datatypes.html](https://sqlite.com/datatypes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/datatypes.html](https://sqlite.com/datatypes.html)
- en: 1.0   Typelessness
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.0   无类型
- en: SQLite is "typeless". This means that you can store any kind of data you want
    in any column of any table, regardless of the declared datatype of that column.
    (See the one exception to this rule in section 2.0 below.) This behavior is a
    feature, not a bug. A database is supposed to store and retrieve data and it should
    not matter to the database what format that data is in. The strong typing system
    found in most other SQL engines and codified in the SQL language spec is a misfeature
    - it is an example of the implementation showing through into the interface. SQLite
    seeks to overcome this misfeature by allowing you to store any kind of data into
    any kind of column and by allowing flexibility in the specification of datatypes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是"无类型"的。这意味着你可以将任何类型的数据存储在任何表的任何列中，而不管该列声明的数据类型是什么（请参阅下面2.0节中的一个例外）。这种行为是一种特性，而不是错误。数据库应该能够存储和检索数据，而数据库不应关心数据的格式。大多数其他SQL引擎中的强类型系统以及SQL语言规范中的这种系统都是一个反面教材
    - 它显示了实现细节。SQLite通过允许将任何类型的数据存储到任何类型的列中，并允许在数据类型规范中灵活使用来克服这种反面教材。
- en: 'A datatype to SQLite is any sequence of zero or more names optionally followed
    by a parenthesized lists of one or two signed integers. Notice in particular that
    a datatype may be *zero* or more names. That means that an empty string is a valid
    datatype as far as SQLite is concerned. So you can declare tables where the datatype
    of each column is left unspecified, like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQLite来说，数据类型是任何零个或多个名字序列，后面可以跟随一个或两个带括号的有符号整数的列表。特别要注意的是，数据类型可能是*零*个或多个名字。这意味着空字符串在SQLite看来是一个有效的数据类型。因此，你可以声明表，其中每个列的数据类型都未指定，就像这样：
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Even though SQLite allows the datatype to be omitted, it is still a good idea
    to include it in your CREATE TABLE statements, since the data type often serves
    as a good hint to other programmers about what you intend to put in the column.
    And if you ever port your code to another database engine, that other engine will
    probably require a datatype of some kind. SQLite accepts all the usual datatypes.
    For example:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 即使SQLite允许省略数据类型，但在你的CREATE TABLE语句中包含数据类型仍然是一个好主意，因为数据类型通常可以为其他程序员提供关于你打算放置在列中的内容的良好提示。如果将代码移植到另一个数据库引擎时，该引擎可能会要求某种数据类型。SQLite接受所有常见的数据类型。例如：
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And so forth. Basically any sequence of names optionally followed by one or
    two signed integers in parentheses will do.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 依此类推。基本上，任何一个名字序列，后面可以跟随一个或两个带括号的有符号整数，都是可以的。
- en: 2.0   The INTEGER PRIMARY KEY
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.0   INTEGER主键
- en: One exception to the typelessness of SQLite is a column whose type is INTEGER
    PRIMARY KEY. (And you must use "INTEGER" not "INT". A column of type INT PRIMARY
    KEY is typeless just like any other.) INTEGER PRIMARY KEY columns must contain
    a 32-bit signed integer. Any attempt to insert non-integer data will result in
    an error.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例外是 SQLite 的无类型特性，即列类型为 INTEGER PRIMARY KEY。（并且必须使用 "INTEGER" 而不是 "INT"。类型为
    INT PRIMARY KEY 的列与其他列一样是无类型的。）INTEGER PRIMARY KEY 列必须包含一个32位有符号整数。任何尝试插入非整数数据都会导致错误。
- en: INTEGER PRIMARY KEY columns can be used to implement the equivalent of AUTOINCREMENT.
    If you try to insert a NULL into an INTEGER PRIMARY KEY column, the column will
    actually be filled with an integer that is one greater than the largest key already
    in the table. Or if the largest key is 2147483647, then the column will be filled
    with a random integer. Either way, the INTEGER PRIMARY KEY column will be assigned
    a unique integer. You can retrieve this integer using the **sqlite_last_insert_rowid()**
    API function or using the **last_insert_rowid()** SQL function in a subsequent
    SELECT statement.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: INTEGER PRIMARY KEY 列可用于实现类似 AUTOINCREMENT 的功能。如果尝试向 INTEGER PRIMARY KEY 列插入
    NULL，则该列实际上会填入一个比表中已有的最大键大一的整数。或者如果最大键为 2147483647，则该列将填入一个随机整数。无论哪种方式，INTEGER
    PRIMARY KEY 列都将被分配一个唯一的整数。您可以使用 **sqlite_last_insert_rowid()** API 函数或在后续的 SELECT
    语句中使用 **last_insert_rowid()** SQL 函数来检索此整数。
- en: 3.0   Comparison and Sort Order
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3.0   比较和排序顺序
- en: 'SQLite is typeless for the purpose of deciding what data is allowed to be stored
    in a column. But some notion of type comes into play when sorting and comparing
    data. For these purposes, a column or an expression can be one of two types: **numeric**
    and **text**. The sort or comparison may give different results depending on which
    type of data is being sorted or compared.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 在决定允许存储在列中的数据时是无类型的。但在排序和比较数据时会考虑某种类型的概念。为了这些目的，列或表达式可以是两种类型之一：**数值**和**文本**。根据排序或比较的数据类型不同，排序或比较可能会产生不同的结果。
- en: If data is of type **text** then the comparison is determined by the standard
    C data comparison functions **memcmp()** or **strcmp()**. The comparison looks
    at bytes from two inputs one by one and returns the first non-zero difference.
    Strings are '\000' terminated so shorter strings sort before longer strings, as
    you would expect.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据是 **文本** 类型，则比较由标准 C 数据比较函数 **memcmp()** 或 **strcmp()** 决定。比较逐个比较两个输入的字节，并返回第一个非零差异。字符串以
    '\000' 结尾，因此较短的字符串会排在较长的字符串之前，如您所预期的那样。
- en: For numeric data, this situation is more complex. If both inputs look like well-formed
    numbers, then they are converted into floating point values using **atof()** and
    compared numerically. If one input is not a well-formed number but the other is,
    then the number is considered to be less than the non-number. If neither inputs
    is a well-formed number, then **strcmp()** is used to do the comparison.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数值数据，情况更为复杂。如果两个输入看起来都像格式良好的数字，则它们将使用**atof()**转换为浮点值，并进行数字比较。如果一个输入不是格式良好的数字但另一个是，则该数字被视为小于非数字。如果两个输入都不是格式良好的数字，则使用**strcmp()**进行比较。
- en: Do not be confused by the fact that a column might have a "numeric" datatype.
    This does not mean that the column can contain only numbers. It merely means that
    if the column does contain a number, that number will sort in numerical order.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不要被列可能具有"numeric"数据类型所困扰。这并不意味着该列只能包含数字。它仅仅意味着如果该列包含一个数字，则该数字将按照数值顺序排序。
- en: For both text and numeric values, NULL sorts before any other value. A comparison
    of any value against NULL using operators like "<" or ">=" is always false.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文本和数值，NULL在任何其他值之前排序。使用诸如"<"或">="的运算符比较任何值与NULL始终为false。
- en: 4.0   How SQLite Determines Datatypes
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.0   SQLite 如何确定数据类型
- en: For SQLite version 2.6.3 and earlier, all values used the numeric datatype.
    The text datatype appears in version 2.7.0 and later. In the sequel it is assumed
    that you are using version 2.7.0 or later of SQLite.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQLite 版本 2.6.3 及更早版本，所有值都使用数值数据类型。文本数据类型出现在版本 2.7.0 及更高版本中。在后续中假定您使用的是 SQLite
    版本 2.7.0 或更高版本。
- en: 'For an expression, the datatype of the result is often determined by the outermost
    operator. For example, arithmetic operators ("+", "*", "%") always return a numeric
    results. The string concatenation operator ("||") returns a text result. And so
    forth. If you are ever in doubt about the datatype of an expression you can use
    the special **typeof()** SQL function to determine what the datatype is. For example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于表达式，结果的数据类型通常由最外层运算符决定。例如，算术运算符（"+"、"*"、"%"）始终返回数值结果。字符串连接运算符（"||"）返回文本结果，依此类推。如果对表达式的数据类型存有疑问，可以使用特殊的**typeof()**
    SQL函数来确定数据类型。例如：
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For table columns, the datatype is determined by the type declaration of the
    CREATE TABLE statement. The datatype is text if and only if the type declaration
    contains one or more of the following strings:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于表列，数据类型由 CREATE TABLE 语句的类型声明确定。仅当类型声明包含以下一个或多个字符串时，数据类型为文本：
- en: BLOB
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: BLOB
- en: CHAR
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CHAR
- en: CLOB
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CLOB
- en: TEXT
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: TEXT
- en: The search for these strings in the type declaration is case insensitive, of
    course. If any of the above strings occur anywhere in the type declaration, then
    the datatype of the column is text. Notice that the type "VARCHAR" contains "CHAR"
    as a substring so it is considered text.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在类型声明中查找这些字符串是不区分大小写的。如果类型声明中出现上述任何字符串，则列的数据类型为文本。请注意，类型"VARCHAR"包含"CHAR"作为子字符串，因此被视为文本。
- en: If none of the strings above occur anywhere in the type declaration, then the
    datatype is numeric. Note in particular that the datatype for columns with an
    empty type declaration is numeric.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上述字符串在类型声明中没有出现，则数据类型为数字。特别注意，对于类型声明为空的列，数据类型为数字。
- en: 5.0   Examples
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.0   示例
- en: 'Consider the following two command sequences:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下两个命令序列：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the sequence on the left, the second insert will fail. In this case, the
    strings '0' and '0.0' are treated as numbers since they are being inserted into
    a numeric column but 0==0.0 which violates the uniqueness constraint. However,
    the second insert in the right-hand sequence works. In this case, the constants
    0 and 0.0 are treated a strings which means that they are distinct.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧的序列中，第二次插入将会失败。在这种情况下，字符串 '0' 和 '0.0' 被视为数字，因为它们被插入到一个数字列中，但是 0==0.0 违反了唯一性约束。然而，右侧序列中的第二次插入有效。在这种情况下，常量
    0 和 0.0 被视为字符串，这意味着它们是不同的。
- en: 'SQLite always converts numbers into double-precision (64-bit) floats for comparison
    purposes. This means that a long sequence of digits that differ only in insignificant
    digits will compare equal if they are in a numeric column but will compare unequal
    if they are in a text column. We have:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 总是将数字转换为双精度（64 位）浮点数进行比较。这意味着，如果它们在数字列中，则仅在无关紧要的数字上有所不同的长数字序列将会相等，但如果它们在文本列中则会不相等。我们有：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As before, the second insert on the left will fail because the comparison will
    convert both strings into floating-point number first and the only difference
    in the strings is in the 20-th digit which exceeds the resolution of a 64-bit
    float. In contrast, the second insert on the right will work because in that case,
    the numbers being inserted are strings and are compared using memcmp().
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前一样，左侧的第二次插入将会失败，因为比较将首先将这两个字符串转换为浮点数，并且字符串唯一的差异是在第 20 位数字，这超出了 64 位浮点数的分辨率。相比之下，右侧的第二次插入将会成功，因为在这种情况下，被插入的是字符串，并使用
    memcmp() 进行比较。
- en: 'Numeric and text types make a difference for the DISTINCT keyword too:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 DISTINCT 关键字，数字和文本类型也会有所不同：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The SELECT statement on the left returns a single row since '0' and '0.0' are
    treated as numbers and are therefore indistinct. But the SELECT statement on the
    right returns two rows since 0 and 0.0 are treated a strings which are different.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的 SELECT 语句将返回一行，因为 '0' 和 '0.0' 被视为数字，因此是不相同的。但右侧的 SELECT 语句将返回两行，因为 0 和 0.0
    被视为不同的字符串。
