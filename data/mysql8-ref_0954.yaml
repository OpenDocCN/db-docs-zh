- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/join.html](https://dev.mysql.com/doc/refman/8.0/en/join.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/join.html](https://dev.mysql.com/doc/refman/8.0/en/join.html)
- en: 15.2.13.2 JOIN Clause
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.2.13.2 连接子句
- en: 'MySQL supports the following `JOIN` syntax for the *`table_references`* part
    of [`SELECT`](select.html "15.2.13 SELECT Statement") statements and multiple-table
    [`DELETE`](delete.html "15.2.2 DELETE Statement") and [`UPDATE`](update.html "15.2.17 UPDATE
    Statement") statements:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL支持以下`JOIN`语法用于[`SELECT`](select.html "15.2.13 SELECT语句")语句的*`table_references`*部分以及多表[`DELETE`](delete.html
    "15.2.2 DELETE语句")和[`UPDATE`](update.html "15.2.17 UPDATE语句")语句：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A table reference is also known as a join expression.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 表引用也被称为连接表达式。
- en: A table reference (when it refers to a partitioned table) may contain a `PARTITION`
    clause, including a list of comma-separated partitions, subpartitions, or both.
    This option follows the name of the table and precedes any alias declaration.
    The effect of this option is that rows are selected only from the listed partitions
    or subpartitions. Any partitions or subpartitions not named in the list are ignored.
    For more information and examples, see [Section 26.5, “Partition Selection”](partitioning-selection.html
    "26.5 Partition Selection").
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 表引用（当它引用分区表时）可以包含一个`PARTITION`子句，包括一个逗号分隔的分区、子分区列表，或两者。此选项跟随表名之后，并在任何别名声明之前。此选项的效果是仅从列出的分区或子分区中选择行。未在列表中命名的任何分区或子分区将被忽略。有关更多信息和示例，请参见[第26.5节，“分区选择”](partitioning-selection.html
    "26.5 分区选择")。
- en: The syntax of *`table_factor`* is extended in MySQL in comparison with standard
    SQL. The standard accepts only *`table_reference`*, not a list of them inside
    a pair of parentheses.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准SQL相比，MySQL中*`table_factor`*的语法得到了扩展。标准只接受*`table_reference`*，而不是在括号中包含它们的列表。
- en: 'This is a conservative extension if each comma in a list of *`table_reference`*
    items is considered as equivalent to an inner join. For example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将*`table_reference`*项目列表中的每个逗号视为等同于内连接，则这是一种保守的扩展。例如：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'is equivalent to:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In MySQL, `JOIN`, `CROSS JOIN`, and `INNER JOIN` are syntactic equivalents (they
    can replace each other). In standard SQL, they are not equivalent. `INNER JOIN`
    is used with an `ON` clause, `CROSS JOIN` is used otherwise.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中，`JOIN`、`CROSS JOIN`和`INNER JOIN`是语法上的等效（它们可以互相替换）。在标准SQL中，它们不是等效的。`INNER
    JOIN`与`ON`子句一起使用，否则使用`CROSS JOIN`。
- en: In general, parentheses can be ignored in join expressions containing only inner
    join operations. MySQL also supports nested joins. See [Section 10.2.1.8, “Nested
    Join Optimization”](nested-join-optimization.html "10.2.1.8 Nested Join Optimization").
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，在仅包含内连接操作的连接表达式中，括号可以忽略。MySQL还支持嵌套连接。参见[第10.2.1.8节，“嵌套连接优化”](nested-join-optimization.html
    "10.2.1.8 嵌套连接优化")。
- en: Index hints can be specified to affect how the MySQL optimizer makes use of
    indexes. For more information, see [Section 10.9.4, “Index Hints”](index-hints.html
    "10.9.4 Index Hints"). Optimizer hints and the `optimizer_switch` system variable
    are other ways to influence optimizer use of indexes. See [Section 10.9.3, “Optimizer
    Hints”](optimizer-hints.html "10.9.3 Optimizer Hints"), and [Section 10.9.2, “Switchable
    Optimizations”](switchable-optimizations.html "10.9.2 Switchable Optimizations").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定索引提示以影响MySQL优化器如何使用索引。有关更多信息，请参见[第10.9.4节，“索引提示”](index-hints.html "10.9.4 索引提示")。优化器提示和`optimizer_switch`系统变量是影响优化器使用索引的其他方法。请参见[第10.9.3节，“优化器提示”](optimizer-hints.html
    "10.9.3 优化器提示")和[第10.9.2节，“可切换优化”](switchable-optimizations.html "10.9.2 可切换优化")。
- en: 'The following list describes general factors to take into account when writing
    joins:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的列表描述了编写连接时需要考虑的一般因素：
- en: 'A table reference can be aliased using `*`tbl_name`* AS *`alias_name`*` or
    *`tbl_name alias_name`*:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用`*`tbl_name`* AS *`alias_name`*`或*`tbl_name alias_name`*为表引用取别名：
- en: '[PRE3]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A *`table_subquery`* is also known as a derived table or subquery in the `FROM`
    clause. See [Section 15.2.15.8, “Derived Tables”](derived-tables.html "15.2.15.8 Derived
    Tables"). Such subqueries *must* include an alias to give the subquery result
    a table name, and may optionally include a list of table column names in parentheses.
    A trivial example follows:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`table_subquery`*也被称为`FROM`子句中的派生表或子查询。参见[第15.2.15.8节，“派生表”](derived-tables.html
    "15.2.15.8 派生表")。这样的子查询*必须*包含一个别名，以给子查询结果一个表名，并且可以选择在括号中包含一个表列名列表。以下是一个简单的示例：'
- en: '[PRE4]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The maximum number of tables that can be referenced in a single join is 61\.
    This includes a join handled by merging derived tables and views in the `FROM`
    clause into the outer query block (see [Section 10.2.2.4, “Optimizing Derived
    Tables, View References, and Common Table Expressions with Merging or Materialization”](derived-table-optimization.html
    "10.2.2.4 Optimizing Derived Tables, View References, and Common Table Expressions
    with Merging or Materialization")).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单个连接中引用的最大表数为 61。这包括通过将 `FROM` 子句中的派生表和视图合并到外部查询块中处理的连接（参见 [Section 10.2.2.4,
    “Optimizing Derived Tables, View References, and Common Table Expressions with
    Merging or Materialization”](derived-table-optimization.html "10.2.2.4 Optimizing
    Derived Tables, View References, and Common Table Expressions with Merging or
    Materialization")）。
- en: '`INNER JOIN` and `,` (comma) are semantically equivalent in the absence of
    a join condition: both produce a Cartesian product between the specified tables
    (that is, each and every row in the first table is joined to each and every row
    in the second table).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在没有连接条件的情况下，`INNER JOIN` 和 `,`（逗号）在语义上是等效的：两者都会在指定的表之间产生笛卡尔积（即，第一个表中的每一行都与第二个表中的每一行连接）。
- en: However, the precedence of the comma operator is less than that of `INNER JOIN`,
    `CROSS JOIN`, `LEFT JOIN`, and so on. If you mix comma joins with the other join
    types when there is a join condition, an error of the form `Unknown column '*`col_name`*'
    in 'on clause'` may occur. Information about dealing with this problem is given
    later in this section.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，逗号运算符的优先级低于 `INNER JOIN`、`CROSS JOIN`、`LEFT JOIN` 等。如果在存在连接条件时混合使用逗号连接和其他连接类型，则可能会出现类似
    `Unknown column '*`col_name`*' in 'on clause'` 的错误。有关处理此问题的信息稍后在本节中给出。
- en: The *`search_condition`* used with `ON` is any conditional expression of the
    form that can be used in a `WHERE` clause. Generally, the `ON` clause serves for
    conditions that specify how to join tables, and the `WHERE` clause restricts which
    rows to include in the result set.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 `ON` 一起使用的 *`search_condition`* 是可以在 `WHERE` 子句中使用的任何条件表达式的形式。通常，`ON` 子句用于指定如何连接表，而
    `WHERE` 子句用于限制结果集中包含哪些行。
- en: 'If there is no matching row for the right table in the `ON` or `USING` part
    in a `LEFT JOIN`, a row with all columns set to `NULL` is used for the right table.
    You can use this fact to find rows in a table that have no counterpart in another
    table:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在 `LEFT JOIN` 中右表的 `ON` 或 `USING` 部分中没有匹配的行，则会使用所有列均设置为 `NULL` 的行作为右表。您可以利用这一点找到一个表中没有对应的另一个表中的行：
- en: '[PRE5]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This example finds all rows in `left_tbl` with an `id` value that is not present
    in `right_tbl` (that is, all rows in `left_tbl` with no corresponding row in `right_tbl`).
    See [Section 10.2.1.9, “Outer Join Optimization”](outer-join-optimization.html
    "10.2.1.9 Outer Join Optimization").
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此示例查找 `left_tbl` 中所有具有不在 `right_tbl` 中存在的 `id` 值的行（即，所有在 `right_tbl` 中没有对应行的
    `left_tbl` 中的所有行）。参见 [Section 10.2.1.9, “Outer Join Optimization”](outer-join-optimization.html
    "10.2.1.9 Outer Join Optimization")。
- en: 'The `USING(*`join_column_list`*)` clause names a list of columns that must
    exist in both tables. If tables `a` and `b` both contain columns `c1`, `c2`, and
    `c3`, the following join compares corresponding columns from the two tables:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USING(*`join_column_list`*)` 子句命名了两个表中必须存在的列的列表。如果表 `a` 和 `b` 都包含列 `c1`、`c2`
    和 `c3`，则以下连接将比较来自两个表的对应列：'
- en: '[PRE6]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `NATURAL [LEFT] JOIN` of two tables is defined to be semantically equivalent
    to an `INNER JOIN` or a `LEFT JOIN` with a `USING` clause that names all columns
    that exist in both tables.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个表的 `NATURAL [LEFT] JOIN` 被定义为与使用命名了两个表中所有列的 `USING` 子句的 `INNER JOIN` 或 `LEFT
    JOIN` 在���义上等效。
- en: '`RIGHT JOIN` works analogously to `LEFT JOIN`. To keep code portable across
    databases, it is recommended that you use `LEFT JOIN` instead of `RIGHT JOIN`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RIGHT JOIN` 的工作方式类似于 `LEFT JOIN`。为了保持代码在各种数据库中的可移植性，建议您使用 `LEFT JOIN` 而不是
    `RIGHT JOIN`。'
- en: The `{ OJ ... }` syntax shown in the join syntax description exists only for
    compatibility with ODBC. The curly braces in the syntax should be written literally;
    they are not metasyntax as used elsewhere in syntax descriptions.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在连接语法描述中显示的 `{ OJ ... }` 语法仅用于与 ODBC 的兼容性。语法中的大括号应该按照字面意义写入；它们不是在其他语法描述中使用的元语法。
- en: '[PRE7]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can use other types of joins within `{ OJ ... }`, such as `INNER JOIN` or
    `RIGHT OUTER JOIN`. This helps with compatibility with some third-party applications,
    but is not official ODBC syntax.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在 `{ OJ ... }` 中使用其他类型的连接，例如 `INNER JOIN` 或 `RIGHT OUTER JOIN`。这有助于与一些第三方应用程序的兼容性，但不是官方的
    ODBC 语法。
- en: '`STRAIGHT_JOIN` is similar to `JOIN`, except that the left table is always
    read before the right table. This can be used for those (few) cases for which
    the join optimizer processes the tables in a suboptimal order.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STRAIGHT_JOIN`类似于`JOIN`，不同之处在于左表始终在右表之前读取。这可以用于那些（少数）情况下，连接优化器以次优顺序处理表的情况。'
- en: 'Some join examples:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一些连接示例：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Natural joins and joins with `USING`, including outer join variants, are processed
    according to the SQL:2003 standard:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 根据SQL:2003标准处理`NATURAL`连接和带有`USING`的连接，包括外连接变体：
- en: 'Redundant columns of a `NATURAL` join do not appear. Consider this set of statements:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NATURAL`连接的冗余列不会出现。考虑以下一组语句：'
- en: '[PRE9]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the first [`SELECT`](select.html "15.2.13 SELECT Statement") statement, column
    `j` appears in both tables and thus becomes a join column, so, according to standard
    SQL, it should appear only once in the output, not twice. Similarly, in the second
    SELECT statement, column `j` is named in the `USING` clause and should appear
    only once in the output, not twice.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第一个[`SELECT`](select.html "15.2.13 SELECT Statement")语句中，列`j`出现在两个表中，因此成为连接列，因此，根据标准SQL，它应该在输出中只出现一次，而不是两次。类似地，在第二个SELECT语句中，列`j`在`USING`子句中命名，应该在输出中只出现一次，而不是两次。
- en: 'Thus, the statements produce this output:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，这些语句产生这个输出：
- en: '[PRE10]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Redundant column elimination and column ordering occurs according to standard
    SQL, producing this display order:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据标准SQL进行冗余列消除和列排序，产生这个显示顺序：
- en: First, coalesced common columns of the two joined tables, in the order in which
    they occur in the first table
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，按照它们在第一个表中出现的顺序，合并两个连接表的共同列
- en: Second, columns unique to the first table, in order in which they occur in that
    table
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二，第一个表中独有的列，按照它们在该表中出现的顺序
- en: Third, columns unique to the second table, in order in which they occur in that
    table
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三，第二个表中独有的列，按照它们在该表中出现的顺序
- en: 'The single result column that replaces two common columns is defined using
    the coalesce operation. That is, for two `t1.a` and `t2.a` the resulting single
    join column `a` is defined as `a = COALESCE(t1.a, t2.a)`, where:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 替换两个共同列的单个结果列是使用合并操作定义的。也就是说，对于两个`t1.a`和`t2.a`，生成的单个连接列`a`被定义为`a = COALESCE(t1.a,
    t2.a)`，其中：
- en: '[PRE11]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the join operation is any other join, the result columns of the join consist
    of the concatenation of all columns of the joined tables.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果连接操作是任何其他连接，则连接的结果列由连接表的所有列的串联组成。
- en: 'A consequence of the definition of coalesced columns is that, for outer joins,
    the coalesced column contains the value of the non-`NULL` column if one of the
    two columns is always `NULL`. If neither or both columns are `NULL`, both common
    columns have the same value, so it doesn''t matter which one is chosen as the
    value of the coalesced column. A simple way to interpret this is to consider that
    a coalesced column of an outer join is represented by the common column of the
    inner table of a `JOIN`. Suppose that the tables `t1(a, b)` and `t2(a, c)` have
    the following contents:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 合并列的定义的一个结果是，对于外连接，如果两个列中的一个始终为`NULL`，则合并列包含非`NULL`列的值。如果两个列都不是`NULL`或都是`NULL`，那么两个共同列具有相同的值，因此选择哪个作为合并列的值并不重要。解释这个的一个简单方法是将外连接的合并列表示为`JOIN`的内表的共同列。假设表`t1(a,
    b)`和表`t2(a, c)`具有以下内容：
- en: '[PRE12]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, for this join, column `a` contains the values of `t1.a`:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，对于这个连接，列`a`包含`t1.a`的值：
- en: '[PRE13]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By contrast, for this join, column `a` contains the values of `t2.a`.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相比之下，对于这个连接，列`a`包含`t2.a`的值。
- en: '[PRE14]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Compare those results to the otherwise equivalent queries with `JOIN ... ON`:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将这些结果与使用`JOIN ... ON`的等效查询进行比较：
- en: '[PRE15]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'A `USING` clause can be rewritten as an `ON` clause that compares corresponding
    columns. However, although `USING` and `ON` are similar, they are not quite the
    same. Consider the following two queries:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USING`子句可以重写为比较相应列的`ON`子句。然而，尽管`USING`和`ON`类似，但它们并不完全相同。考虑以下两个查询：'
- en: '[PRE17]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With respect to determining which rows satisfy the join condition, both joins
    are semantically identical.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就确定哪些行满足连接条件而言，这两个连接在语义上是相同的。
- en: 'With respect to determining which columns to display for `SELECT *` expansion,
    the two joins are not semantically identical. The `USING` join selects the coalesced
    value of corresponding columns, whereas the `ON` join selects all columns from
    all tables. For the `USING` join, `SELECT *` selects these values:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于确定要显示哪些列进行`SELECT *`扩展，这两个连接在语义上并不相同。`USING`连接选择对应列的合并值，而`ON`连接选择所有表中的所有列。对于`USING`连接，`SELECT
    *`选择这些值：
- en: '[PRE18]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For the `ON` join, `SELECT *` selects these values:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`ON`连接，`SELECT *`选择这些值：
- en: '[PRE19]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With an inner join, [`COALESCE(a.c1, b.c1)`](comparison-operators.html#function_coalesce)
    is the same as either `a.c1` or `b.c1` because both columns have the same value.
    With an outer join (such as `LEFT JOIN`), one of the two columns can be `NULL`.
    That column is omitted from the result.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在内连接中，[`COALESCE(a.c1, b.c1)`](comparison-operators.html#function_coalesce)与`a.c1`或`b.c1`相同，因为两列的值相同。在外连接（如`LEFT
    JOIN`）中，两列中的一个可以是`NULL`。该列将从结果中省略。
- en: An `ON` clause can refer only to its operands.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ON`子句只能引用其操作数。'
- en: 'Example:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE20]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The statement fails with an `Unknown column ''i3'' in ''on clause''` error
    because `i3` is a column in `t3`, which is not an operand of the `ON` clause.
    To enable the join to be processed, rewrite the statement as follows:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该语句因为`i3`是`t3`中的列，而不是`ON`子句的操作数而失败，会出现`Unknown column 'i3' in 'on clause'`错误。要使连接能够被处理，请将语句重写如下：
- en: '[PRE21]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`JOIN` has higher precedence than the comma operator (`,`), so the join expression
    `t1, t2 JOIN t3` is interpreted as `(t1, (t2 JOIN t3))`, not as `((t1, t2) JOIN
    t3)`. This affects statements that use an `ON` clause because that clause can
    refer only to columns in the operands of the join, and the precedence affects
    interpretation of what those operands are.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JOIN`比逗号运算符（`,`）具有更高的优先级，因此连接表达式`t1, t2 JOIN t3`被解释为`(t1, (t2 JOIN t3))`，而不是`((t1,
    t2) JOIN t3)`。这会影响使用`ON`子句的语句，因为该子句只能引用连接操作数中的列，而优先级会影响这些操作数的解释。'
- en: 'Example:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE22]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `JOIN` takes precedence over the comma operator, so the operands for the
    `ON` clause are `t2` and `t3`. Because `t1.i1` is not a column in either of the
    operands, the result is an `Unknown column 't1.i1' in 'on clause'` error.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`JOIN`优先于逗号运算符，因此`ON`子句的操作数为`t2`和`t3`。因为`t1.i1`不是任何操作数中的列，结果是一个`Unknown column
    ''t1.i1'' in ''on clause''`错误。'
- en: 'To enable the join to be processed, use either of these strategies:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使连接能够被处理，可以使用以下策略之一：
- en: 'Group the first two tables explicitly with parentheses so that the operands
    for the `ON` clause are `(t1, t2)` and `t3`:'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用括号明确地将前两个表分组，以便`ON`子句的操作数为`(t1, t2)`和`t3`：
- en: '[PRE23]'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Avoid the use of the comma operator and use `JOIN` instead:'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用逗号运算符，改用`JOIN`代替：
- en: '[PRE24]'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The same precedence interpretation also applies to statements that mix the comma
    operator with `INNER JOIN`, `CROSS JOIN`, `LEFT JOIN`, and `RIGHT JOIN`, all of
    which have higher precedence than the comma operator.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相同的优先级解释也适用于混合逗号运算符与`INNER JOIN`、`CROSS JOIN`、`LEFT JOIN`和`RIGHT JOIN`的语句，所有这些连接比逗号运算符具有更高的优先级。
- en: A MySQL extension compared to the SQL:2003 standard is that MySQL permits you
    to qualify the common (coalesced) columns of `NATURAL` or `USING` joins, whereas
    the standard disallows that.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 SQL:2003 标准相比，MySQL 的一个扩展是允许您对`NATURAL`或`USING`连接的共同（合并的）列进行限定，而标准则不允许。
