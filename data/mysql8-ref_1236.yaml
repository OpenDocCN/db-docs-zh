- en: 17.11.5 Reclaiming Disk Space with TRUNCATE TABLE
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.11.5 使用TRUNCATE TABLE回收磁盘空间
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-truncate-table-reclaim-space.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-truncate-table-reclaim-space.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-truncate-table-reclaim-space.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-truncate-table-reclaim-space.html)
- en: To reclaim operating system disk space when [truncating](glossary.html#glos_truncate
    "truncate") an `InnoDB` table, the table must be stored in its own [.ibd](glossary.html#glos_ibd_file
    ".ibd file") file. For a table to be stored in its own [.ibd](glossary.html#glos_ibd_file
    ".ibd file") file, [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    must enabled when the table is created. Additionally, there cannot be a [foreign
    key](glossary.html#glos_foreign_key "foreign key") constraint between the table
    being truncated and other tables, otherwise the `TRUNCATE TABLE` operation fails.
    A foreign key constraint between two columns in the same table, however, is permitted.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要在截断`InnoDB`表时回收操作系统磁盘空间，表必须存储在自己的[.ibd](glossary.html#glos_ibd_file ".ibd file")文件中。为了让表存储在自己的[.ibd](glossary.html#glos_ibd_file
    ".ibd file")文件中，在创建表时必须启用[`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)。此外，被截断的表与其他表之间不能有[外键](glossary.html#glos_foreign_key
    "foreign key")约束，否则`TRUNCATE TABLE`操作会失败。然而，同一表中两列之间的外键约束是允许的。
- en: When a table is truncated, it is dropped and re-created in a new `.ibd` file,
    and the freed space is returned to the operating system. This is in contrast to
    truncating `InnoDB` tables that are stored within the `InnoDB` [system tablespace](glossary.html#glos_system_tablespace
    "system tablespace") (tables created when `innodb_file_per_table=OFF`) and tables
    stored in shared [general tablespaces](glossary.html#glos_general_tablespace "general
    tablespace"), where only `InnoDB` can use the freed space after the table is truncated.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当表被截断时，它会被删除并在一个新的`.ibd`文件中重新创建，释放的空间会返回给操作系统。这与截断存储在`InnoDB`[系统表空间](glossary.html#glos_system_tablespace
    "system tablespace")（当`innodb_file_per_table=OFF`时创建的表）和存储在共享[通用表空间](glossary.html#glos_general_tablespace
    "general tablespace")中的`InnoDB`表形成对比，在这种情况下，只有`InnoDB`在表被截断后才能使用释放的空间。
- en: The ability to truncate tables and return disk space to the operating system
    also means that [physical backups](glossary.html#glos_physical_backup "physical
    backup") can be smaller. Truncating tables that are stored in the system tablespace
    (tables created when `innodb_file_per_table=OFF`) or in a general tablespace leaves
    blocks of unused space in the tablespace.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 截断表并将磁盘空间返回给操作系统的能力也意味着[物理备份](glossary.html#glos_physical_backup "physical backup")可以更小。截断存储在系统表空间（当`innodb_file_per_table=OFF`时创建的表）或通用表空间中的表会在表空间中留下未使用的空间块。
