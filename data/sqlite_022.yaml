- en: 1\. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 引言
- en: 原文：[https://sqlite.com/gencol.html](https://sqlite.com/gencol.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/gencol.html](https://sqlite.com/gencol.html)
- en: Generated columns (also sometimes called "computed columns") are columns of
    a table whose values are a function of other columns in the same row. Generated
    columns can be read, but their values can not be directly written. The only way
    to change the value of a generated column is to modify the values of the other
    columns used to calculate the generated column.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 生成列（有时也称为"计算列"）是表中值是同一行中其他列函数的列。生成列可以读取，但它们的值不能直接写入。更改生成列值的唯一方法是修改用于计算生成列的其他列的值。
- en: 2\. Syntax
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 语法
- en: 'Syntactically, generated columns are designated using a "GENERATED ALWAYS"
    [column-constraint](syntax/column-constraint.html). For example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从语法上讲，使用"GENERATED ALWAYS" [column-constraint](syntax/column-constraint.html)来指定生成列。例如：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The statement above has three ordinary columns, "a" (the PRIMARY KEY), "b",
    and "c", and two generated columns "d" and "e".
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句有三个普通列，"a"（主键），"b"和"c"，以及两个生成列"d"和"e"。
- en: 'The "GENERATED ALWAYS" keywords at the beginning of the constraint and the
    "VIRTUAL" or "STORED" keyword at the end are all optional. Only the "AS" keyword
    and the parenthesized expression are required. If the trailing "VIRTUAL" or "STORED"
    keyword is omitted, then VIRTUAL is the default. Hence, the example statement
    above could be simplified to just:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 约束开始处的"GENERATED ALWAYS"关键字和末尾的"VIRTUAL"或"STORED"关键字都是可选的。只有"AS"关键字和括号内的表达式是必需的。如果省略末尾的"VIRTUAL"或"STORED"关键字，则VIRTUAL是默认的。因此，上述示例语句可以简化为：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 2.1\. VIRTUAL versus STORED columns
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1\. VIRTUAL与STORED列
- en: Generated columns can be either VIRTUAL or STORED. The value of a VIRTUAL column
    is computed when read, whereas the value of a STORED column is computed when the
    row is written. STORED columns take up space in the database file, whereas VIRTUAL
    columns use more CPU cycles when being read.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 生成列可以是VIRTUAL或STORED。读取VIRTUAL列时计算其值，而写入行时计算STORED列的值。STORED列在数据库文件中占用空间，而VIRTUAL列在读取时使用更多CPU周期。
- en: From the point of view of SQL, STORED and VIRTUAL columns are almost exactly
    the same. Queries against either class of generated column produce the same results.
    The only functional difference is that one cannot add new STORED columns using
    the [ALTER TABLE ADD COLUMN](lang_altertable.html#altertabaddcol) command. Only
    VIRTUAL columns can be added using ALTER TABLE.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQL的角度来看，STORED和VIRTUAL列几乎完全相同。针对任一类生成列的查询产生相同的结果。唯一的功能区别是不能使用[ALTER TABLE
    ADD COLUMN](lang_altertable.html#altertabaddcol)命令添加新的STORED列。只能使用ALTER TABLE添加VIRTUAL列。
- en: 2.2\. Capabilities
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2\. 能力
- en: Generated columns can have a datatype. SQLite attempts to transform the result
    of the generating expression into that datatype using the same [affinity](datatype3.html#affinity)
    rules as for ordinary columns.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列可以具有数据类型。SQLite尝试使用与普通列相同的[亲和性](datatype3.html#affinity)规则将生成表达式的结果转换为该数据类型。
- en: Generated columns may have NOT NULL, CHECK, and UNIQUE constraints, and foreign
    key constraints, just like ordinary columns.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列可能具有NOT NULL、CHECK和UNIQUE约束，以及外键约束，就像普通列一样。
- en: Generated columns can participate in indexes, just like ordinary columns.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列可以参与索引，就像普通列一样。
- en: The expression of a generated column can refer to any of the other declared
    columns in the table, including other generated columns, as long as the expression
    does not directly or indirectly refer back to itself.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列的表达式可以引用表中声明的任何其他列，包括其他生成列，只要该表达式不直接或间接地引用自身。
- en: Generated columns can occur anywhere in the table definition. Generated columns
    can be interspersed among ordinary columns. It is not necessary to put generated
    columns at the end of the list of columns in the table definition, as is shown
    in the examples above.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列可以出现在表定义的任何位置。生成列可以与普通列交错。不需要将生成列放在表定义列列表的末尾，就像上面的示例所示。
- en: 2.3\. Limitations
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3\. 限制
- en: Generated columns may not have a [default value](lang_createtable.html#dfltval)
    (they may not use the "DEFAULT" clause). The value of a generated column is always
    the value specified by the expression that follows the "AS" keyword.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列可能没有[默认值](lang_createtable.html#dfltval)（它们不能使用"DEFAULT"子句）。生成列的值始终是跟在"AS"关键字后面的表达式指定的值。
- en: Generated columns may not be used as part of the [PRIMARY KEY](lang_createtable.html#primkeyconst).
    (Future versions of SQLite might relax this constraint for STORED columns.)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列不能作为[PRIMARY KEY](lang_createtable.html#primkeyconst)的一部分使用。（SQLite 的未来版本可能会放宽对
    STORED 列的此约束。）
- en: The expression of a generated column may only reference constant literals and
    columns within the same row, and may only use scalar [deterministic functions](deterministic.html).
    The expression may not use subqueries, aggregate functions, window functions,
    or table-valued functions.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列的表达式只能引用常量文字和同一行内的列，并且只能使用标量[deterministic functions](deterministic.html)。该表达式不能使用子查询、聚合函数、窗口函数或表值函数。
- en: The expression of a generated column may refer to other generated columns in
    the same row, but no generated column can depend upon itself, either directly
    or indirectly.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列的表达式可以引用同一行中的其他生成列，但任何生成列都不能直接或间接依赖于自身。
- en: The expression of a generated column may not directly reference the [ROWID](lang_createtable.html#rowid),
    though it can reference the [INTEGER PRIMARY KEY](lang_createtable.html#rowid)
    column, which is often the same thing.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列的表达式不能直接引用[ROWID](lang_createtable.html#rowid)，尽管可以引用[INTEGER PRIMARY KEY](lang_createtable.html#rowid)列，这两者通常是相同的。
- en: Every table must have at least one non-generated column.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个表必须至少有一个非生成列。
- en: It is not possible to [ALTER TABLE ADD COLUMN](lang_altertable.html#altertabaddcol)
    a STORED column. One can add a VIRTUAL column, however.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不可能使用[ALTER TABLE ADD COLUMN](lang_altertable.html#altertabaddcol)添加一个存储列。但可以添加一个虚拟列。
- en: The datatype and [collating sequence](datatype3.html#collation) of the generated
    column are determined only by the datatype and [COLLATE clause](lang_createtable.html#collateclause)
    on the column definition. The datatype and collating sequence of the GENERATED
    ALWAYS AS expression have no affect on the datatype and collating sequence of
    the column itself.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列的数据类型和[排序顺序](datatype3.html#collation)仅由列定义上的数据类型和[COLLATE 子句](lang_createtable.html#collateclause)决定。GENERATED
    ALWAYS AS 表达式的数据类型和排序顺序对列本身的数据类型和排序顺序没有影响。
- en: Generated columns are not included in the list of columns provided by the [PRAGMA
    table_info](pragma.html#pragma_table_info) statement. But they are included in
    the output of the newer [PRAGMA table_xinfo](pragma.html#pragma_table_xinfo) statement.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成列不包括在[PRAGMA table_info](pragma.html#pragma_table_info)语句提供的列列表中。但它们包括在较新的[PRAGMA
    table_xinfo](pragma.html#pragma_table_xinfo)语句的输出中。
- en: 3\. Compatibility
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 兼容性
- en: Generated column support was added with SQLite version 3.31.0 (2020-01-22).
    If an earlier version of SQLite attempts to read a database file that contains
    a generated column in its schema, then that earlier version will perceive the
    generated column syntax as an error and will report that the database schema is
    corrupt.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 生成列支持从 SQLite 版本 3.31.0（2020-01-22）开始添加。如果早期版本的 SQLite 尝试读取包含生成列的数据库文件，那么该早期版本将认为生成列语法是错误的，并报告数据库模式损坏。
- en: 'To clarify: SQLite version 3.31.0 can read and write any database created by
    any prior version of SQLite going back to SQLite 3.0.0 (2004-06-18). And, earlier
    versions of SQLite, prior to 3.31.0, can read and write databases created by SQLite
    version 3.31.0 and later as long as the database schema does not contain features,
    such as generated columns, that are not understood by the earlier version. Problems
    only arise if you create a new database that contains generated columns, using
    SQLite version 3.31.0 or later, and then try to read or write that database file
    using an earlier version of SQLite that does not understand generated columns.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清：SQLite 版本 3.31.0 能够读取和写入任何由任何早期版本的 SQLite 创建的数据库，从 SQLite 3.0.0（2004-06-18）开始。而早期版本的
    SQLite，在 3.31.0 之前，能够读取和写入由 SQLite 版本 3.31.0 或更新版本创建的数据库，只要数据库模式不包含早期版本不理解的生成列等功能。只有当您使用
    SQLite 版本 3.31.0 或更新版本创建一个包含生成列的新数据库，并尝试使用早期版本的 SQLite 读取或写入该数据库文件时，才会出现问题。
