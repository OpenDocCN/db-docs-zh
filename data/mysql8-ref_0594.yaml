- en: 10.7 Optimizing for MEMORY Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.7 为MEMORY表进行优化
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-memory-tables.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-memory-tables.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-memory-tables.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-memory-tables.html)
- en: Consider using `MEMORY` tables for noncritical data that is accessed often,
    and is read-only or rarely updated. Benchmark your application against equivalent
    `InnoDB` or `MyISAM` tables under a realistic workload, to confirm that any additional
    performance is worth the risk of losing data, or the overhead of copying data
    from a disk-based table at application start.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用`MEMORY`表存储经常访问的非关键数据，这些数据是只读的或很少更新的。通过在真实工作负载下将应用程序与等效的`InnoDB`或`MyISAM`表进行基准测试，以确认任何额外性能是否值得冒失去数据的风险，或者在应用程序启动时从基于磁盘的表复制数据的开销。
- en: For best performance with `MEMORY` tables, examine the kinds of queries against
    each table, and specify the type to use for each associated index, either a B-tree
    index or a hash index. On the [`CREATE INDEX`](create-index.html "15.1.15 CREATE
    INDEX Statement") statement, use the clause `USING BTREE` or `USING HASH`. B-tree
    indexes are fast for queries that do greater-than or less-than comparisons through
    operators such as `>` or `BETWEEN`. Hash indexes are only fast for queries that
    look up single values through the `=` operator, or a restricted set of values
    through the `IN` operator. For why `USING BTREE` is often a better choice than
    the default `USING HASH`, see [Section 10.2.1.23, “Avoiding Full Table Scans”](table-scan-avoidance.html
    "10.2.1.23 Avoiding Full Table Scans"). For implementation details of the different
    types of `MEMORY` indexes, see [Section 10.3.9, “Comparison of B-Tree and Hash
    Indexes”](index-btree-hash.html "10.3.9 Comparison of B-Tree and Hash Indexes").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得`MEMORY`表的最佳性能，请检查针对每个表的查询类型，并为每个关联索引指定要使用的类型，可以是B-tree索引或哈希索引。在[`CREATE
    INDEX`](create-index.html "15.1.15 CREATE INDEX Statement")语句中，使用`USING BTREE`或`USING
    HASH`子句。B-tree索引对于通过诸如`>`或`BETWEEN`等运算符进行大于或小于比较的查询非常快速。哈希索引仅对通过`=`运算符查找单个值或通过`IN`运算符查找一组受限制的值的查询非常快速。关于为什么`USING
    BTREE`通常比默认的`USING HASH`更好的选择，请参见[Section 10.2.1.23, “Avoiding Full Table Scans”](table-scan-avoidance.html
    "10.2.1.23 Avoiding Full Table Scans")。有关不同类型`MEMORY`索引的实现细节，请参见[Section 10.3.9,
    “Comparison of B-Tree and Hash Indexes”](index-btree-hash.html "10.3.9 Comparison
    of B-Tree and Hash Indexes")。
