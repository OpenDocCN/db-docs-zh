- en: 14.8.1 String Comparison Functions and Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.8.1 字符串比较函数和运算符
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html](https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html](https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html)
- en: '**Table 14.13 String Comparison Functions and Operators**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.13 字符串比较函数和运算符**'
- en: '| Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`LIKE`](string-comparison-functions.html#operator_like) | Simple pattern
    matching |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`LIKE`](string-comparison-functions.html#operator_like) | 简单模式匹配 |'
- en: '| [`NOT LIKE`](string-comparison-functions.html#operator_not-like) | Negation
    of simple pattern matching |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`NOT LIKE`](string-comparison-functions.html#operator_not-like) | 简单模式匹配的否定
    |'
- en: '| [`STRCMP()`](string-comparison-functions.html#function_strcmp) | Compare
    two strings |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`STRCMP()`](string-comparison-functions.html#function_strcmp) | 比较两个字符串
    |'
- en: If a string function is given a binary string as an argument, the resulting
    string is also a binary string. A number converted to a string is treated as a
    binary string. This affects only comparisons.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将二进制字符串作为参数传递给字符串函数，则结果字符串也是二进制字符串。将数字转换为字符串时被视为二进制字符串。这仅影响比较。
- en: Normally, if any expression in a string comparison is case-sensitive, the comparison
    is performed in case-sensitive fashion.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果字符串比较中的任何表达式是区分大小写的，则比较将以区分大小写的方式执行。
- en: If a string function is invoked from within the [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") client, binary strings display using hexadecimal
    notation, depending on the value of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") 客户端中调用字符串函数，则二进制字符串将以十六进制表示形式显示，具体取决于
    [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex) 的值。有关该选项的更多信息，请参见
    [第 6.5.1 节，“mysql — MySQL 命令行客户端”](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client")。
- en: '[`*`expr`* LIKE *`pat`* [ESCAPE ''*`escape_char`*'']`](string-comparison-functions.html#operator_like)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`expr`* LIKE *`pat`* [ESCAPE ''*`escape_char`*'']`](string-comparison-functions.html#operator_like)'
- en: Pattern matching using an SQL pattern. Returns `1` (`TRUE`) or `0` (`FALSE`).
    If either *`expr`* or *`pat`* is `NULL`, the result is `NULL`.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 SQL 模式进行模式匹配。返回 `1`（`TRUE`）或 `0`（`FALSE`）。如果 *`expr`* 或 *`pat`* 中的任一者是 `NULL`，结果为
    `NULL`。
- en: The pattern need not be a literal string. For example, it can be specified as
    a string expression or table column. In the latter case, the column must be defined
    as one of the MySQL string types (see [Section 13.3, “String Data Types”](string-types.html
    "13.3 String Data Types")).
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模式不一定是一个字面字符串。例如，它可以被指定为一个字符串表达式或表列。在后一种情况下，该列必须被定义为 MySQL 字符串类型之一（参见 [第 13.3 节，“字符串数据类型”](string-types.html
    "13.3 字符串数据类型")）。
- en: 'Per the SQL standard, [`LIKE`](string-comparison-functions.html#operator_like)
    performs matching on a per-character basis, thus it can produce results different
    from the [`=`](comparison-operators.html#operator_equal) comparison operator:'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据 SQL 标准，[`LIKE`](string-comparison-functions.html#operator_like) 按字符进行匹配，因此它可能产生与
    [`=`](comparison-operators.html#operator_equal) 比较运算符不同的结果：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In particular, trailing spaces are always significant. This differs from comparisons
    performed with the [`=`](comparison-operators.html#operator_equal) operator, for
    which the significance of trailing spaces in nonbinary strings (`CHAR`, `VARCHAR`,
    and `TEXT` values) depends on the pad attribute of the collation used for the
    comparison. For more information, see [Trailing Space Handling in Comparisons](charset-binary-collations.html#charset-binary-collations-trailing-space-comparisons
    "Trailing Space Handling in Comparisons").
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特别是，尾随空格始终是有意义的。这与使用 [`=`](comparison-operators.html#operator_equal) 运算符执行的比较不同，对于非二进制字符串（`CHAR`、`VARCHAR`
    和 `TEXT` 值）的尾随空格的重要性取决于用于比较的排序规则的填充属性。有关更多信息，请参见 [比较中的尾随空格处理](charset-binary-collations.html#charset-binary-collations-trailing-space-comparisons
    "比较中的尾随空格处理")。
- en: 'With [`LIKE`](string-comparison-functions.html#operator_like) you can use the
    following two wildcard characters in the pattern:'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 [`LIKE`](string-comparison-functions.html#operator_like) 可以在模式中使用以下两个通配符：
- en: '`%` matches any number of characters, even zero characters.'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%` 匹配任意数量的字符，甚至零个字符。'
- en: '`_` matches exactly one character.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_` 匹配正好一个字符。'
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To test for literal instances of a wildcard character, precede it by the escape
    character. If you do not specify the `ESCAPE` character, `\` is assumed, unless
    the [`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes) SQL mode
    is enabled. In that case, no escape character is used.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要测试通配符字符的文字实例，需在其前面加上转义字符。如果不指定`ESCAPE`字符，则假定为`\`，除非启用了[`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL 模式。在这种情况下，不使用转义字符。
- en: '`\%` matches one `%` character.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\%`匹配一个`%`字符。'
- en: '`\_` matches one `_` character.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\_`匹配一个`_`字符。'
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To specify a different escape character, use the `ESCAPE` clause:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要指定不同的转义字符，请使用`ESCAPE`子句：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The escape sequence should be one character long to specify the escape character,
    or empty to specify that no escape character is used. The expression must evaluate
    as a constant at execution time. If the [`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL mode is enabled, the sequence cannot be empty.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 转义序列应为一个字符长，用于指定转义字符，或为空以指定不使用转义字符。表达式必须在执行时评估为常量。如果启用了[`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL 模式，则序列不能是空的。
- en: 'The following statements illustrate that string comparisons are not case-sensitive
    unless one of the operands is case-sensitive (uses a case-sensitive collation
    or is a binary string):'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下语句说明字符串比较不区分大小写，除非操作数之一是区分大小写的（使用区分大小写的排序规则或是二进制字符串）：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As an extension to standard SQL, MySQL permits [`LIKE`](string-comparison-functions.html#operator_like)
    on numeric expressions.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为对标准 SQL 的扩展，MySQL允许在数值表达式上使用[`LIKE`](string-comparison-functions.html#operator_like)。
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: MySQL attempts in such cases to perform implicit conversion of the expression
    to a string. See [Section 14.3, “Type Conversion in Expression Evaluation”](type-conversion.html
    "14.3 Type Conversion in Expression Evaluation").
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，MySQL尝试对表达式进行隐式转换为字符串。参见[第14.3节，“表达式评估中的类型转换”](type-conversion.html "14.3 表达式评估中的类型转换")。
- en: Note
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: MySQL uses C escape syntax in strings (for example, `\n` to represent the newline
    character). If you want a [`LIKE`](string-comparison-functions.html#operator_like)
    string to contain a literal `\`, you must double it. (Unless the [`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL mode is enabled, in which case no escape character is used.) For example,
    to search for `\n`, specify it as `\\n`. To search for `\`, specify it as `\\\\`;
    this is because the backslashes are stripped once by the parser and again when
    the pattern match is made, leaving a single backslash to be matched against.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL在字符串中使用C转义语法（例如，`\n`表示换行符）。如果要让[`LIKE`](string-comparison-functions.html#operator_like)字符串包含文字`\`，必须将其双写。（除非启用了[`NO_BACKSLASH_ESCAPES`](sql-mode.html#sqlmode_no_backslash_escapes)
    SQL 模式，在这种情况下不使用转义字符。）例如，要搜索`\n`，请指定为`\\n`。要搜索`\`，请指定为`\\\\`；这是因为解析器会将反斜杠剥离一次，然后在进行模式匹配时再次剥离，留下一个单独的反斜杠进行匹配。
- en: 'Exception: At the end of the pattern string, backslash can be specified as
    `\\`. At the end of the string, backslash stands for itself because there is nothing
    following to escape. Suppose that a table contains the following values:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例外情况：在模式字符串的末尾，可以指定反斜杠为`\\`。在字符串的末尾，反斜杠代表自身，因为后面没有需要转义的内容。假设一个表包含以下值：
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To test for values that end with backslash, you can match the values using
    either of the following patterns:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要测试以反斜杠结尾的值，可以使用以下任一模式匹配这些值：
- en: '[PRE7]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[`*`expr`* NOT LIKE *`pat`* [ESCAPE ''*`escape_char`*'']`](string-comparison-functions.html#operator_not-like)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`expr`* NOT LIKE *`pat`* [ESCAPE ''*`escape_char`*'']`](string-comparison-functions.html#operator_not-like)'
- en: This is the same as `NOT (*`expr`* LIKE *`pat`* [ESCAPE '*`escape_char`*'])`.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这与`NOT (*`expr`* LIKE *`pat`* [ESCAPE '*`escape_char`*'])`相同。
- en: Note
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'Aggregate queries involving [`NOT LIKE`](string-comparison-functions.html#operator_not-like)
    comparisons with columns containing `NULL` may yield unexpected results. For example,
    consider the following table and data:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含`NULL`的列进行[`NOT LIKE`](string-comparison-functions.html#operator_not-like)比较的聚合查询可能产生意外结果。例如，考虑以下表和数据：
- en: '[PRE8]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The query `SELECT COUNT(*) FROM foo WHERE bar LIKE ''%baz%'';` returns `0`.
    You might assume that `SELECT COUNT(*) FROM foo WHERE bar NOT LIKE ''%baz%'';`
    would return `2`. However, this is not the case: The second query returns `0`.
    This is because `NULL NOT LIKE *`expr`*` always returns `NULL`, regardless of
    the value of *`expr`*. The same is true for aggregate queries involving `NULL`
    and comparisons using [`NOT RLIKE`](regexp.html#operator_not-regexp) or [`NOT
    REGEXP`](regexp.html#operator_not-regexp). In such cases, you must test explicitly
    for `NOT NULL` using [`OR`](logical-operators.html#operator_or) (and not [`AND`](logical-operators.html#operator_and)),
    as shown here:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询 `SELECT COUNT(*) FROM foo WHERE bar LIKE '%baz%';` 返回 `0`。你可能会认为 `SELECT
    COUNT(*) FROM foo WHERE bar NOT LIKE '%baz%';` 会返回 `2`。然而，事实并非如此：第二个查询返回 `0`。这是因为
    `NULL NOT LIKE *`expr`*` 总是返回 `NULL`，无论 *`expr`* 的值如何。对于涉及 `NULL` 和使用 [`NOT RLIKE`](regexp.html#operator_not-regexp)
    或 [`NOT REGEXP`](regexp.html#operator_not-regexp) 进行比较的聚合查询，必须显式测试 `NOT NULL`，使用
    [`OR`](logical-operators.html#operator_or)（而不是 [`AND`](logical-operators.html#operator_and)），如下所示：
- en: '[PRE9]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[`STRCMP(*`expr1`*,*`expr2`*)`](string-comparison-functions.html#function_strcmp)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`STRCMP(*`expr1`*,*`expr2`*)`](string-comparison-functions.html#function_strcmp)'
- en: '[`STRCMP()`](string-comparison-functions.html#function_strcmp) returns `0`
    if the strings are the same, `-1` if the first argument is smaller than the second
    according to the current sort order, and `NULL` if either argument is `NULL`.
    It returns `1` otherwise.'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`STRCMP()`](string-comparison-functions.html#function_strcmp) 如果字符串相同则返回 `0`，如果第一个参数根据当前排序顺序小于第二个参数则返回
    `-1`，如果任一参数为 `NULL` 则返回 `NULL`，否则返回 `1`。'
- en: '[PRE10]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[`STRCMP()`](string-comparison-functions.html#function_strcmp) performs the
    comparison using the collation of the arguments.'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`STRCMP()`](string-comparison-functions.html#function_strcmp) 使用参数的排序规则执行比较。'
- en: '[PRE11]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the collations are incompatible, one of the arguments must be converted to
    be compatible with the other. See [Section 12.8.4, “Collation Coercibility in
    Expressions”](charset-collation-coercibility.html "12.8.4 Collation Coercibility
    in Expressions").
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果排序规则不兼容，则其中一个参数必须转换为与另一个兼容。参见 [Section 12.8.4, “Collation Coercibility in
    Expressions”](charset-collation-coercibility.html "12.8.4 Collation Coercibility
    in Expressions")。
- en: '[PRE12]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
