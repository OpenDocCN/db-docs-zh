- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-transactions-current-table.html](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-transactions-current-table.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-transactions-current-table.html](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-transactions-current-table.html)
- en: 29.12.7.1 The events_transactions_current Table
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 29.12.7.1 事件事务当前表
- en: 'The [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table") table contains current transaction
    events. The table stores one row per thread showing the current status of the
    thread''s most recent monitored transaction event, so there is no system variable
    for configuring the table size. For example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`events_transactions_current`](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-transactions-current-table.html)
    表包含当前事务事件。该表存储每个线程的一行，显示线程最近监视的事务事件的当前状态，因此没有用于配置表大小的系统变量。例如：'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Of the tables that contain transaction event rows, [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table") is the most fundamental. Other
    tables that contain transaction event rows are logically derived from the current
    events. For example, the [`events_transactions_history`](performance-schema-events-transactions-history-table.html
    "29.12.7.2 The events_transactions_history Table") and [`events_transactions_history_long`](performance-schema-events-transactions-history-long-table.html
    "29.12.7.3 The events_transactions_history_long Table") tables are collections
    of the most recent transaction events that have ended, up to a maximum number
    of rows per thread and globally across all threads, respectively.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 包含事务事件行的表中，[`events_transactions_current`](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-transactions-current-table.html)
    是最基础的。其他包含事务事件行的表从当前事件逻辑派生而来。例如，[`events_transactions_history`](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-transactions-history-table.html)
    和 [`events_transactions_history_long`](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-transactions-history-long-table.html)
    表分别是最近已结束的事务事件的集合，每个线程最多一定数量的行和全局跨所有线程。
- en: For more information about the relationship between the three transaction event
    tables, see [Section 29.9, “Performance Schema Tables for Current and Historical
    Events”](performance-schema-event-tables.html "29.9 Performance Schema Tables
    for Current and Historical Events").
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有关三个事务事件表之间关系的更多信息，请参阅 [第29.9节“当前和历史事件的性能模式表”](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-event-tables.html)。
- en: For information about configuring whether to collect transaction events, see
    [Section 29.12.7, “Performance Schema Transaction Tables”](performance-schema-transaction-tables.html
    "29.12.7 Performance Schema Transaction Tables").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置是否收集事务事件的信息，请参阅 [第29.12.7节“性能模式事务表”](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-transaction-tables.html)。
- en: 'The [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table") table has these columns:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[`events_transactions_current`](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-events-transactions-current-table.html)
    表具有以下列：'
- en: '`THREAD_ID`, `EVENT_ID`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREAD_ID`，`EVENT_ID`'
- en: The thread associated with the event and the thread current event number when
    the event starts. The `THREAD_ID` and `EVENT_ID` values taken together uniquely
    identify the row. No two rows have the same pair of values.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与事件关联的线程和事件开始时的线程当前事件编号。`THREAD_ID` 和 `EVENT_ID` 值一起唯一标识行。没有两行具有相同的值对。
- en: '`END_EVENT_ID`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`END_EVENT_ID`'
- en: This column is set to `NULL` when the event starts and updated to the thread
    current event number when the event ends.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当事件开始时，此列设置为 `NULL`，当事件结束时更新为线程当前事件编号。
- en: '`EVENT_NAME`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EVENT_NAME`'
- en: The name of the instrument from which the event was collected. This is a `NAME`
    value from the [`setup_instruments`](performance-schema-setup-instruments-table.html
    "29.12.2.3 The setup_instruments Table") table. Instrument names may have multiple
    parts and form a hierarchy, as discussed in [Section 29.6, “Performance Schema
    Instrument Naming Conventions”](performance-schema-instrument-naming.html "29.6 Performance
    Schema Instrument Naming Conventions").
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事件收集的仪器名称。这是来自 [`setup_instruments`](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-setup-instruments-table.html)
    表的 `NAME` 值。仪器名称可能有多个部分并形成层次结构，如 [第29.6节“性能模式仪器命名约定”](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-instrument-naming.html)
    中讨论的那样。
- en: '`STATE`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STATE`'
- en: The current transaction state. The value is `ACTIVE` (after [`START TRANSACTION`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements") or [`BEGIN`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")), `COMMITTED` (after
    [`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")),
    or `ROLLED BACK` (after [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements")).
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当前事务状态。其值为`ACTIVE`（在[`START TRANSACTION`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements")或[`BEGIN`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements")之后）、`COMMITTED`（在[`COMMIT`](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements")之后）或`ROLLED BACK`（在[`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")之后）。
- en: '`TRX_ID`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRX_ID`'
- en: Unused.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 未使用。
- en: '`GTID`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GTID`'
- en: The GTID column contains the value of [`gtid_next`](replication-options-gtids.html#sysvar_gtid_next),
    which can be one of `ANONYMOUS`, `AUTOMATIC`, or a GTID using the format `UUID:NUMBER`.
    For transactions that use [`gtid_next=AUTOMATIC`](replication-options-gtids.html#sysvar_gtid_next),
    which is all normal client transactions, the GTID column changes when the transaction
    commits and the actual GTID is assigned. If [`gtid_mode`](replication-options-gtids.html#sysvar_gtid_mode)
    is either `ON` or `ON_PERMISSIVE`, the GTID column changes to the transaction's
    GTID. If `gtid_mode` is either `OFF` or `OFF_PERMISSIVE`, the GTID column changes
    to `ANONYMOUS`.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: GTID 列包含[`gtid_next`](replication-options-gtids.html#sysvar_gtid_next)的值，可以是`ANONYMOUS`、`AUTOMATIC`或使用格式`UUID:NUMBER`的
    GTID。对于使用[`gtid_next=AUTOMATIC`](replication-options-gtids.html#sysvar_gtid_next)的事务，即所有正常客户端事务，当事务提交并分配实际
    GTID 时，GTID 列会发生变化。如果[`gtid_mode`](replication-options-gtids.html#sysvar_gtid_mode)为`ON`或`ON_PERMISSIVE`，GTID
    列会变为事务的 GTID。如果`gtid_mode`为`OFF`或`OFF_PERMISSIVE`，GTID 列会变为`ANONYMOUS`。
- en: '`XID_FORMAT_ID`, `XID_GTRID`, and `XID_BQUAL`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XID_FORMAT_ID`、`XID_GTRID` 和 `XID_BQUAL`'
- en: The elements of the XA transaction identifier. They have the format described
    in [Section 15.3.8.1, “XA Transaction SQL Statements”](xa-statements.html "15.3.8.1 XA
    Transaction SQL Statements").
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: XA 事务标识符的元素。其格式如[第 15.3.8.1 节，“XA Transaction SQL Statements”](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements")中所述。
- en: '`XA_STATE`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XA_STATE`'
- en: The state of the XA transaction. The value is `ACTIVE` (after [`XA START`](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements")), `IDLE` (after [`XA END`](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements")), `PREPARED` (after [`XA PREPARE`](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements")), `ROLLED BACK` (after [`XA ROLLBACK`](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements")), or `COMMITTED` (after [`XA COMMIT`](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements")).
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: XA 事务的状态。其值为`ACTIVE`（在[`XA START`](xa-statements.html "15.3.8.1 XA Transaction
    SQL Statements")之后）、`IDLE`（在[`XA END`](xa-statements.html "15.3.8.1 XA Transaction
    SQL Statements")之后）、`PREPARED`（在[`XA PREPARE`](xa-statements.html "15.3.8.1 XA
    Transaction SQL Statements")之后）、`ROLLED BACK`（在[`XA ROLLBACK`](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements")之后）或`COMMITTED`（在[`XA COMMIT`](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements")之后）。
- en: On a replica, the same XA transaction can appear in the [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table") table with different states
    on different threads. This is because immediately after the XA transaction is
    prepared, it is detached from the replica's applier thread, and can be committed
    or rolled back by any thread on the replica. The [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table") table displays the current
    status of the most recent monitored transaction event on the thread, and does
    not update this status when the thread is idle. So the XA transaction can still
    be displayed in the `PREPARED` state for the original applier thread, after it
    has been processed by another thread. To positively identify XA transactions that
    are still in the `PREPARED` state and need to be recovered, use the [`XA RECOVER`](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements") statement rather than the Performance
    Schema transaction tables.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在副本上，同一XA事务可以在不同线程上以不同状态出现在[`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table")表中。这是因为在XA事务准备完成后，它会从副本的应用程序线程中分离出来，并且可以由副本上的任何线程提交或回滚。[`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table")表显示了线程上最近监视的事务事件的当前状态，并且在线程空闲时不会更新此状态。因此，即使在被另一个线程处理后，XA事务仍然可以在原始应用程序线程中以`PREPARED`状态显示。要明确识别仍处于`PREPARED`状态且需要恢复的XA事务，请使用[`XA
    RECOVER`](xa-statements.html "15.3.8.1 XA Transaction SQL Statements")语句，而不是性能模式事务表。
- en: '`SOURCE`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SOURCE`'
- en: The name of the source file containing the instrumented code that produced the
    event and the line number in the file at which the instrumentation occurs. This
    enables you to check the source to determine exactly what code is involved.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含产生事件的被检测代码的源文件名称和代码插入的文件中的行号。这使您可以检查源代码以确定涉及的确切代码。
- en: '`TIMER_START`, `TIMER_END`, `TIMER_WAIT`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMER_START`，`TIMER_END`，`TIMER_WAIT`'
- en: Timing information for the event. The unit for these values is picoseconds (trillionths
    of a second). The `TIMER_START` and `TIMER_END` values indicate when event timing
    started and ended. `TIMER_WAIT` is the event elapsed time (duration).
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事件的时间信息。这些值的单位为皮秒（万亿分之一秒）。`TIMER_START`和`TIMER_END`值表示事件计时开始和结束的时间。`TIMER_WAIT`是事件经过的时间（持续时间）。
- en: If an event has not finished, `TIMER_END` is the current timer value and `TIMER_WAIT`
    is the time elapsed so far (`TIMER_END` − `TIMER_START`).
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事件尚未完成，`TIMER_END`是当前计时器值，`TIMER_WAIT`是到目前为止经过的时间（`TIMER_END` − `TIMER_START`）。
- en: If an event is produced from an instrument that has `TIMED = NO`, timing information
    is not collected, and `TIMER_START`, `TIMER_END`, and `TIMER_WAIT` are all `NULL`.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果事件是由`TIMED = NO`的工具产生的，则不会收集时间信息，`TIMER_START`，`TIMER_END`和`TIMER_WAIT`都为`NULL`。
- en: For discussion of picoseconds as the unit for event times and factors that affect
    time values, see [Section 29.4.1, “Performance Schema Event Timing”](performance-schema-timing.html
    "29.4.1 Performance Schema Event Timing").
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关皮秒作为事件时间单位以及影响时间值的因素的讨论，请参阅[第29.4.1节，“性能模式事件计时”](performance-schema-timing.html
    "29.4.1 Performance Schema Event Timing")。
- en: '`ACCESS_MODE`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACCESS_MODE`'
- en: The transaction access mode. The value is `READ WRITE` or `READ ONLY`.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事务访问模式。其取值为`READ WRITE`或`READ ONLY`。
- en: '`ISOLATION_LEVEL`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ISOLATION_LEVEL`'
- en: The transaction isolation level. The value is [`REPEATABLE READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read),
    [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed),
    [`READ UNCOMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-uncommitted),
    or [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable).
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事务隔离级别。其取值为[`REPEATABLE READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read)，[`READ
    COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)，[`READ
    UNCOMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-uncommitted)，或[`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)。
- en: '`AUTOCOMMIT`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOCOMMIT`'
- en: Whether autocommit mode was enabled when the transaction started.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事务启动时是否启用了自动提交模式。
- en: '`NUMBER_OF_SAVEPOINTS`, `NUMBER_OF_ROLLBACK_TO_SAVEPOINT`, `NUMBER_OF_RELEASE_SAVEPOINT`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NUMBER_OF_SAVEPOINTS`，`NUMBER_OF_ROLLBACK_TO_SAVEPOINT`，`NUMBER_OF_RELEASE_SAVEPOINT`'
- en: The number of [`SAVEPOINT`](savepoint.html "15.3.4 SAVEPOINT, ROLLBACK TO SAVEPOINT,
    and RELEASE SAVEPOINT Statements"), [`ROLLBACK TO SAVEPOINT`](savepoint.html "15.3.4 SAVEPOINT,
    ROLLBACK TO SAVEPOINT, and RELEASE SAVEPOINT Statements"), and [`RELEASE SAVEPOINT`](savepoint.html
    "15.3.4 SAVEPOINT, ROLLBACK TO SAVEPOINT, and RELEASE SAVEPOINT Statements") statements
    issued during the transaction.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在事务期间发出的 [`SAVEPOINT`](savepoint.html "15.3.4 SAVEPOINT, ROLLBACK TO SAVEPOINT,
    and RELEASE SAVEPOINT Statements")、[`ROLLBACK TO SAVEPOINT`](savepoint.html "15.3.4 SAVEPOINT,
    ROLLBACK TO SAVEPOINT, and RELEASE SAVEPOINT Statements") 和 [`RELEASE SAVEPOINT`](savepoint.html
    "15.3.4 SAVEPOINT, ROLLBACK TO SAVEPOINT, and RELEASE SAVEPOINT Statements") 语句的数量。
- en: '`OBJECT_INSTANCE_BEGIN`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT_INSTANCE_BEGIN`'
- en: Unused.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 未使用。
- en: '`NESTING_EVENT_ID`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NESTING_EVENT_ID`'
- en: The `EVENT_ID` value of the event within which this event is nested.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该事件所嵌套在其中的事件的 `EVENT_ID` 值。
- en: '`NESTING_EVENT_TYPE`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NESTING_EVENT_TYPE`'
- en: The nesting event type. The value is `TRANSACTION`, `STATEMENT`, `STAGE`, or
    `WAIT`. (`TRANSACTION` does not appear because transactions cannot be nested.)
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 嵌套事件类型。值可以是 `TRANSACTION`、`STATEMENT`、`STAGE` 或 `WAIT`。（`TRANSACTION` 不会出现，因为事务不能嵌套。）
- en: 'The [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table") table has these indexes:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 events_transactions_current 表") 表具有以下索引：'
- en: Primary key on (`THREAD_ID`, `EVENT_ID`)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主键为 (`THREAD_ID`, `EVENT_ID`)
- en: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    is permitted for the [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table") table. It removes the rows.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE 语句") 允许用于 [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 events_transactions_current 表") 表。它会删除行。'
