- en: SQLite Version 3 Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite 版本 3 概述
- en: 原文：[https://sqlite.com/version3.html](https://sqlite.com/version3.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/version3.html](https://sqlite.com/version3.html)
- en: '| **Editorial Note:** This document was written in 2004 as a guide to programmers
    who were transitioning from SQLite2 to SQLite3. It is retained as part of the
    historical record of SQLite. Modern programmers should refer to more up-to-date
    documentation on SQLite available elsewhere on this website. |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '| **编辑注释：** 本文档于 2004 年撰写，是为了指导那些从 SQLite2 迁移到 SQLite3 的程序员。它作为 SQLite 历史记录的一部分保留。现代程序员应参考本网站其他地方提供的更为实时的
    SQLite 文档。 |'
- en: 'SQLite version 3.0 introduces important changes to the library, including:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 版本 3.0 对库引入了重要的更改，包括：
- en: A more compact format for database files.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更为紧凑的数据库文件格式。
- en: Manifest typing and BLOB support.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显式类型转换和 BLOB 支持。
- en: Support for both UTF-8 and UTF-16 text.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 UTF-8 和 UTF-16 文本。
- en: User-defined text collating sequences.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义的文本排序序列。
- en: 64-bit ROWIDs.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 64 位 ROWID。
- en: Improved Concurrency.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的并发性。
- en: This document is a quick introduction to the changes for SQLite 3.0 for users
    who are already familiar with SQLite version 2.8.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档是针对已熟悉 SQLite 2.8 版本的用户的 SQLite 3.0 更改的快速介绍。
- en: Naming Changes
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更名变更
- en: SQLite version 2.8 will continue to be supported with bug fixes for the foreseeable
    future. In order to allow SQLite version 2.8 and SQLite version 3.0 to peacefully
    coexist, the names of key files and APIs in SQLite version 3.0 have been changed
    to include the character "3". For example, the include file used by C programs
    has been changed from "sqlite.h" to "sqlite3.h". And the name of the shell program
    used to interact with databases has been changed from "sqlite.exe" to "sqlite3.exe".
    With these changes, it is possible to have both SQLite 2.8 and SQLite 3.0 installed
    on the same system at the same time. And it is possible for the same C program
    to link against both SQLite 2.8 and SQLite 3.0 at the same time and to use both
    libraries at the same time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 版本 2.8 将继续通过 bug 修复进行支持，可以预见的将来。为了允许 SQLite 版本 2.8 和 SQLite 版本 3.0 和平共处，SQLite
    版本 3.0 中关键文件和 API 的名称已更改以包含字符 "3"。例如，用于 C 程序的包含文件已从 "sqlite.h" 更改为 "sqlite3.h"。用于与数据库交互的
    shell 程序的名称也从 "sqlite.exe" 更改为 "sqlite3.exe"。通过这些更改，可以在同一系统上同时安装 SQLite 2.8 和
    SQLite 3.0，并且可以使同一 C 程序同时链接并同时使用 SQLite 2.8 和 SQLite 3.0 库。
- en: New File Format
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新文件格式
- en: The format used by SQLite database files has been completely revised. The old
    version 2.1 format and the new 3.0 format are incompatible with one another. Version
    2.8 of SQLite will not read a version 3.0 database files and version 3.0 of SQLite
    will not read a version 2.8 database file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 数据库文件使用的格式已完全修订。旧版 2.1 格式和新版 3.0 格式不兼容。SQLite 2.8 版本将无法读取 3.0 版本的数据库文件，而
    SQLite 3.0 版本也无法读取 2.8 版本的数据库文件。
- en: 'To convert an SQLite 2.8 database into an SQLite 3.0 database, have ready the
    command-line shells for both version 2.8 and 3.0\. Then enter a command like the
    following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 SQLite 2.8 数据库转换为 SQLite 3.0 数据库，请准备好两个版本（2.8 和 3.0）的命令行 shell。然后输入类似以下的命令：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The new database file format uses B+trees for tables. In a B+tree, all data
    is stored in the leaves of the tree instead of in both the leaves and the intermediate
    branch nodes. The use of B+trees for tables allows for better scalability and
    the storage of larger data fields without the use of overflow pages. Traditional
    B-trees are still used for indices.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 新的数据库文件格式使用 B+ 树来存储表格数据。在 B+ 树中，所有数据都存储在叶子节点中，而不是同时存储在叶子节点和中间分支节点中。使用 B+ 树来存储表格数据可以更好地实现可扩展性，并且在不使用溢出页面的情况下存储更大的数据字段。传统的
    B 树仍然用于索引。
- en: The new file format also supports variable pages sizes between 512 and 65536
    bytes. The size of a page is stored in the file header so the same library can
    read databases with different pages sizes, in theory, though this feature has
    not yet been implemented in practice.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件格式还支持512到65536字节之间的可变页面大小。页面大小存储在文件头中，因此同一个库理论上可以读取具有不同页面大小的数据库，尽管这一特性尚未在实践中实现。
- en: The new file format omits unused fields from its disk images. For example, indices
    use only the key part of a B-tree record and not the data. So for indices, the
    field that records the length of the data is omitted. Integer values such as the
    length of key and data are stored using a variable-length encoding so that only
    one or two bytes are required to store the most common cases but up to 64-bits
    of information can be encoded if needed. Integer and floating point data is stored
    on the disk in binary rather than being converted into ASCII as in SQLite version
    2.8. These changes taken together result in database files that are typically
    25% to 35% smaller than the equivalent files in SQLite version 2.8.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件格式从其磁盘映像中省略了未使用的字段。例如，索引仅使用 B 树记录的关键部分而不使用数据。因此，对于索引，记录数据长度的字段被省略。整数值（如关键字和数据的长度）使用可变长度编码存储，因此通常只需要一到两个字节来存储最常见的情况，但如果需要，可以编码高达64位的信息。整数和浮点数据以二进制形式存储在磁盘上，而不是像
    SQLite 版本 2.8 中那样转换为 ASCII。这些变化综合起来导致数据库文件通常比 SQLite 版本 2.8 中相应的文件小25%到35%。
- en: Details of the low-level B-tree format used in SQLite version 3.0 can be found
    in header comments to the [btreeInt.h](https://www.sqlite.org/src/finfo?name=src/btreeInt.h)
    source file and in the [file format](fileformat2.html) documentation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 版本 3.0 中使用的低级 B 树格式的详细信息可以在 [btreeInt.h](https://www.sqlite.org/src/finfo?name=src/btreeInt.h)
    源文件的头部注释以及 [文件格式](fileformat2.html) 文档中找到。
- en: Manifest Typing and BLOB Support
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显式类型和 BLOB 支持
- en: SQLite version 2.8 will deal with data in various formats internally, but when
    writing to the disk or interacting through its API, SQLite 2.8 always converts
    data into ASCII text. SQLite 3.0, in contrast, exposes its internal data representations
    to the user and stores binary representations to disk when appropriate. The exposing
    of non-ASCII representations was added in order to support BLOBs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 2.8 在内部处理各种格式的数据，但在写入磁盘或通过其 API 进行交互时，总是将数据转换为 ASCII 文本。相反，SQLite 3.0
    向用户公开其内部数据表示，并在适当时将二进制表示存储到磁盘。公开非 ASCII 表示是为了支持 BLOBs。
- en: SQLite version 2.8 had the feature that any type of data could be stored in
    any table column regardless of the declared type of that column. This feature
    is retained in version 3.0, though in a slightly modified form. Each table column
    will store any type of data, though columns have an affinity for the format of
    data defined by their declared datatype. When data is inserted into a column,
    that column will make an attempt to convert the data format into the column's
    declared type. All SQL database engines do this. The difference is that SQLite
    3.0 will still store the data even if a format conversion is not possible.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 2.8 版本具有一个特性，即无论声明的列类型如何，任何类型的数据都可以存储在任何表列中。这一特性在 3.0 版本中得到保留，尽管形式稍有改变。每个表列都将存储任何类型的数据，尽管列对其声明的数据类型定义的格式具有偏好性。当数据插入到列中时，该列将尝试将数据格式转换为列声明的类型。所有
    SQL 数据库引擎都会这样做。不同之处在于，SQLite 3.0 即使无法进行格式转换，仍会存储数据。
- en: For example, if you have a table column declared to be of type "INTEGER" and
    you try to insert a string, the column will look at the text string and see if
    it looks like a number. If the string does look like a number it is converted
    into a number and into an integer if the number does not have a fractional part,
    and stored that way. But if the string is not a well-formed number it is still
    stored as a string. A column with a type of "TEXT" tries to convert numbers into
    an ASCII-Text representation before storing them. But BLOBs are stored in TEXT
    columns as BLOBs because you cannot in general convert a BLOB into text.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有一个声明为 "INTEGER" 类型的表列，并尝试插入一个字符串，该列将查看文本字符串并检查其是否类似于一个数字。如果字符串看起来像一个数字，则转换为数字，并且如果数字没有小数部分，则转换为整数，并以这种方式存储。但是，如果字符串不是格式良好的数字，则仍将其存储为字符串。类型为
    "TEXT" 的列在存储之前会尝试将数字转换为 ASCII 文本表示。但是，BLOBs 作为 BLOBs 存储在 TEXT 列中，因为通常无法将 BLOB
    转换为文本。
- en: In most other SQL database engines the datatype is associated with the table
    column that holds the data - with the data container. In SQLite 3.0, the datatype
    is associated with the data itself, not with its container. [Paul Graham](http://www.paulgraham.com/)
    in his book *[ANSI Common Lisp](http://www.paulgraham.com/acl.html)* calls this
    property "Manifest Typing". Other writers have other definitions for the term
    "manifest typing", so beware of confusion. But by whatever name, that is the datatype
    model supported by SQLite 3.0.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数其他SQL数据库引擎中，数据类型与持有数据的表列相关联 - 与数据容器相关联。在SQLite 3.0中，数据类型与数据本身相关联，而不是与其容器相关联。[保罗·格雷厄姆](http://www.paulgraham.com/)在他的书
    *[ANSI Common Lisp](http://www.paulgraham.com/acl.html)* 中称这种特性为 "显式类型"。其他作家对术语
    "显式类型" 有其他定义，因此要注意混淆。但无论如何称呼，这就是SQLite 3.0支持的数据类型模型。
- en: Additional information about datatypes in SQLite version 3.0 is available [separately](datatype3.html).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有关SQLite 3.0版本中数据类型的其他信息可在 [单独页面](datatype3.html) 中找到。
- en: Support for UTF-8 and UTF-16
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持UTF-8和UTF-16
- en: The new API for SQLite 3.0 contains routines that accept text as both UTF-8
    and UTF-16 in the native byte order of the host machine. Each database file manages
    text as either UTF-8, UTF-16BE (big-endian), or UTF-16LE (little-endian). Internally
    and in the disk file, the same text representation is used everywhere. If the
    text representation specified by the database file (in the file header) does not
    match the text representation required by the interface routines, then text is
    converted on-the-fly. Constantly converting text from one representation to another
    can be computationally expensive, so it is suggested that programmers choose a
    single representation and stick with it throughout their application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 3.0的新API包含接受文本作为本地主机机器的UTF-8和UTF-16的例程。每个数据库文件将文本管理为UTF-8、UTF-16BE（大端）或UTF-16LE（小端）。在内部和磁盘文件中，所有地方都使用相同的文本表示。如果数据库文件指定的文本表示（在文件头中）与接口例程所需的文本表示不匹配，则文本将在运行时进行转换。不断将文本从一种表示转换为另一种表示可能会消耗大量计算资源，因此建议程序员选择一种表示并在其应用程序中坚持使用。
- en: In the current implementation of SQLite, the SQL parser only works with UTF-8
    text. So if you supply UTF-16 text it will be converted. This is just an implementation
    issue and there is nothing to prevent future versions of SQLite from parsing UTF-16
    encoded SQL natively.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的SQLite实现中，SQL解析器仅适用于UTF-8文本。因此，如果您提供UTF-16文本，它将被转换。这只是一个实现问题，并且没有什么可以阻止SQLite的未来版本本地解析UTF-16编码的SQL。
- en: When creating new user-defined SQL functions and collating sequences, each function
    or collating sequence can specify if it works with UTF-8, UTF-16be, or UTF-16le.
    Separate implementations can be registered for each encoding. If an SQL function
    or collating sequence is required but a version for the current text encoding
    is not available, then the text is automatically converted. As before, this conversion
    takes computation time, so programmers are advised to pick a single encoding and
    stick with it in order to minimize the amount of unnecessary format juggling.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建新的用户定义的SQL函数和排序序列时，每个函数或排序序列可以指定它是否与UTF-8、UTF-16be或UTF-16le一起工作。可以为每种编码注册单独的实现。如果需要SQL函数或排序序列，但当前文本编码的版本不可用，则文本会自动转换。与以前一样，这种转换需要计算时间，因此建议程序员选择一种编码并坚持使用，以最小化不必要的格式转换量。
- en: SQLite is not particular about the text it receives and is more than happy to
    process text strings that are not normalized or even well-formed UTF-8 or UTF-16\.
    Thus, programmers who want to store ISO8859 data can do so using the UTF-8 interfaces.
    As long as no attempts are made to use a UTF-16 collating sequence or SQL function,
    the byte sequence of the text will not be modified in any way.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 不关心它接收的文本，并且非常乐意处理未标准化或甚至不规范的UTF-8或UTF-16文本字符串。因此，想要存储ISO8859数据的程序员可以使用UTF-8接口。只要不尝试使用UTF-16排序序列或SQL函数，文本的字节序列就不会以任何方式被修改。
- en: User-defined Collating Sequences
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户定义的排序序列
- en: A collating sequence is just a defined order for text. When SQLite 3.0 sorts
    (or uses a comparison operator like "<" or ">=") the sort order is first determined
    by the data type.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 排序序列只是文本的定义顺序。当 SQLite 3.0 进行排序（或使用像"<"或">="的比较运算符）时，排序顺序首先由数据类型决定。
- en: NULLs sort first
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NULL值首先排序
- en: Numeric values sort next in numerical order
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值按数值顺序排序。
- en: Text values come after numerics
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本值位于数字之后
- en: BLOBs sort last
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BLOBs最后排序
- en: Collating sequences are used for comparing two text strings. The collating sequence
    does not change the ordering of NULLs, numbers, or BLOBs, only text.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 排序序列用于比较两个文本字符串。排序序列不会改变NULL、数字或BLOB的排序，只改变文本。
- en: A collating sequence is implemented as a function that takes the two strings
    being compared as inputs and returns negative, zero, or positive if the first
    string is less than, equal to, or greater than the second. SQLite 3.0 comes with
    a single built-in collating sequence named "BINARY" which is implemented using
    the memcmp() routine from the standard C library. The BINARY collating sequence
    works well for English text. For other languages or locales, alternative collating
    sequences may be preferred.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 排序序列被实现为一个函数，该函数以比较的两个字符串作为输入，并根据第一个字符串小于、等于或大于第二个字符串返回负数、零或正数。SQLite 3.0 自带一个名为"BINARY"的内置排序序列，它使用标准C库中的memcmp()例程实现。BINARY排序序列适用于英文文本。对于其他语言或区域设置，可能更喜欢替代的排序序列。
- en: The decision of which collating sequence to use is controlled by the COLLATE
    clause in SQL. A COLLATE clause can occur on a table definition, to define a default
    collating sequence to a table column, or on field of an index, or in the ORDER
    BY clause of a SELECT statement. Planned enhancements to SQLite are to include
    standard CAST() syntax to allow the collating sequence of an expression to be
    defined.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中由 COLLATE 子句控制使用的排序序列的决定。COLLATE 子句可以出现在表定义中，用于为表列定义默认的排序序列，或者出现在索引字段或
    SELECT 语句的 ORDER BY 子句中。SQLite 的计划增强功能包括标准 CAST() 语法，允许定义表达式的排序序列。
- en: 64-bit ROWIDs
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 64 位的 ROWID
- en: Every row of a table has a unique rowid. If the table defines a column with
    the type "INTEGER PRIMARY KEY" then that column becomes an alias for the rowid.
    But with or without an INTEGER PRIMARY KEY column, every row still has a rowid.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 表的每一行都有一个唯一的 rowid。如果表定义了一个类型为 "INTEGER PRIMARY KEY" 的列，则该列成为 rowid 的别名。但无论是否有
    INTEGER PRIMARY KEY 列，每一行都仍然有一个 rowid。
- en: In SQLite version 3.0, the rowid is a 64-bit signed integer. This is an expansion
    of SQLite version 2.8 which only permitted rowids of 32-bits.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLite 版本 3.0 中，rowid 是一个 64 位有符号整数。这是对 SQLite 版本 2.8 的扩展，后者仅允许 32 位的 rowid。
- en: To minimize storage space, the 64-bit rowid is stored as a variable length integer.
    Rowids between 0 and 127 use only a single byte. Rowids between 0 and 16383 use
    just 2 bytes. Up to 2097152 uses three bytes. And so forth. Negative rowids are
    allowed but they always use nine bytes of storage and so their use is discouraged.
    When rowids are generated automatically by SQLite, they will always be non-negative.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最小化存储空间，64 位的 rowid 被存储为可变长度整数。0 到 127 的 rowid 仅使用一个字节。0 到 16383 的 rowid 仅使用
    2 个字节。最多 2097152 使用三个字节，依此类推。负数 rowid 虽然被允许，但它们始终使用九个字节的存储空间，因此不建议使用。当 SQLite
    自动生成 rowid 时，它们总是非负数。
- en: Improved Concurrency
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进的并发性
- en: SQLite version 2.8 allowed multiple simultaneous readers or a single writer
    but not both. SQLite version 3.0 allows one process to begin writing the database
    while other processes continue to read. The writer must still obtain an exclusive
    lock on the database for a brief interval in order to commit its changes, but
    the exclusive lock is no longer required for the entire write operation. A [more
    detailed report](lockingv3.html) on the locking behavior of SQLite version 3.0
    is available separately.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 版本 2.8 允许多个同时读取者或单个写入者，但不能同时存在。SQLite 版本 3.0 允许一个进程在其他进程继续读取时开始写入数据库。写入者仍然必须在提交更改时对数据库获取独占锁，但不再需要整个写入操作期间保持独占锁。有关
    SQLite 版本 3.0 锁定行为的[更详细报告](lockingv3.html)可以单独查阅。
- en: A limited form of table-level locking is now also available in SQLite. If each
    table is stored in a separate database file, those separate files can be attached
    to the main database (using the ATTACH command) and the combined databases will
    function as one. But locks will only be acquired on individual files as needed.
    So if you redefine "database" to mean two or more database files, then it is entirely
    possible for two processes to be writing to the same database at the same time.
    To further support this capability, commits of transactions involving two or more
    ATTACHed database are now atomic.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite现在也支持一种有限的表级锁定。如果每个表存储在单独的数据库文件中，这些单独的文件可以附加到主数据库（使用ATTACH命令），并且合并的数据库将作为一个整体运行。但锁定只会在需要时在各个文件上获取。因此，如果重新定义“数据库”以表示两个或更多个数据库文件，那么完全可以同时有两个进程在写入同一个数据库。为了进一步支持这种能力，涉及两个或更多ATTACHed数据库的事务提交现在是原子的。
- en: Credits
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Credits
- en: SQLite version 3.0 is made possible in part by AOL developers supporting and
    embracing great Open-Source Software.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 3.0版本的实现在一定程度上得益于支持和采用优秀开源软件的AOL开发人员。
