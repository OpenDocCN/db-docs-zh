- en: 10.5.9 Optimizing InnoDB Configuration Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.5.9 优化InnoDB配置变量
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-configuration-variables.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-configuration-variables.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-configuration-variables.html](https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-configuration-variables.html)
- en: Different settings work best for servers with light, predictable loads, versus
    servers that are running near full capacity all the time, or that experience spikes
    of high activity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的设置对于负载轻、可预测的服务器和一直运行在满负荷或经历高活动峰值的服务器效果最佳。
- en: Because the `InnoDB` storage engine performs many of its optimizations automatically,
    many performance-tuning tasks involve monitoring to ensure that the database is
    performing well, and changing configuration options when performance drops. See
    [Section 17.16, “InnoDB Integration with MySQL Performance Schema”](innodb-performance-schema.html
    "17.16 InnoDB Integration with MySQL Performance Schema") for information about
    detailed `InnoDB` performance monitoring.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`InnoDB`存储引擎自动执行许多优化，许多性能调整任务涉及监视以确保数据库性能良好，并在性能下降时更改配置选项。有关详细的`InnoDB`性能监控信息，请参见[第17.16节，“InnoDB与MySQL性能模式的集成”](innodb-performance-schema.html
    "17.16 InnoDB与MySQL性能模式的集成")。
- en: 'The main configuration steps you can perform include:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以执行的主要配置步骤包括：
- en: Controlling the types of data change operations for which `InnoDB` buffers the
    changed data, to avoid frequent small disk writes. See [Configuring Change Buffering](innodb-change-buffer.html#innodb-change-buffer-configuration
    "Configuring Change Buffering"). Because the default is to buffer all types of
    data change operations, only change this setting if you need to reduce the amount
    of buffering.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制`InnoDB`缓冲更改数据的数据更改操作类型，以避免频繁的小磁盘写入。请参见[配置更改缓冲](innodb-change-buffer.html#innodb-change-buffer-configuration
    "配置更改缓冲")。因为默认情况下是缓冲所有类型的数据更改操作，只有在需要减少缓冲量时才更改此设置。
- en: Turning the adaptive hash indexing feature on and off using the [`innodb_adaptive_hash_index`](innodb-parameters.html#sysvar_innodb_adaptive_hash_index)
    option. See [Section 17.5.3, “Adaptive Hash Index”](innodb-adaptive-hash.html
    "17.5.3 Adaptive Hash Index") for more information. You might change this setting
    during periods of unusual activity, then restore it to its original setting.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`innodb_adaptive_hash_index`](innodb-parameters.html#sysvar_innodb_adaptive_hash_index)选项打开或关闭自适应哈希索引功能。有关更多信息，请参见[第17.5.3节，“自适应哈希索引”](innodb-adaptive-hash.html
    "17.5.3 自适应哈希索引")。您可能会在异常活动期间更改此设置，然后将其恢复为原始设置。
- en: Setting a limit on the number of concurrent threads that `InnoDB` processes,
    if context switching is a bottleneck. See [Section 17.8.4, “Configuring Thread
    Concurrency for InnoDB”](innodb-performance-thread_concurrency.html "17.8.4 Configuring
    Thread Concurrency for InnoDB").
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果上下文切换是瓶颈，设置`InnoDB`处理的并发线程数量上限。请参见[第17.8.4节，“配置InnoDB的线程并发性”](innodb-performance-thread_concurrency.html
    "17.8.4 配置InnoDB的线程并发性")。
- en: Controlling the amount of prefetching that `InnoDB` does with its read-ahead
    operations. When the system has unused I/O capacity, more read-ahead can improve
    the performance of queries. Too much read-ahead can cause periodic drops in performance
    on a heavily loaded system. See [Section 17.8.3.4, “Configuring InnoDB Buffer
    Pool Prefetching (Read-Ahead)”](innodb-performance-read_ahead.html "17.8.3.4 Configuring
    InnoDB Buffer Pool Prefetching (Read-Ahead)").
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制`InnoDB`在读取操作中进行预取的数量。当系统有未使用的I/O容量时，增加预取可以提高查询性能。过多的预取可能会导致在负载较重的系统上定期性能下降。参见[第17.8.3.4节，“配置InnoDB缓冲池预取（预读）”](innodb-performance-read_ahead.html
    "17.8.3.4 配置InnoDB缓冲池预取（预读）")。
- en: Increasing the number of background threads for read or write operations, if
    you have a high-end I/O subsystem that is not fully utilized by the default values.
    See [Section 17.8.5, “Configuring the Number of Background InnoDB I/O Threads”](innodb-performance-multiple_io_threads.html
    "17.8.5 Configuring the Number of Background InnoDB I/O Threads").
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您有一个高端I/O子系统，默认值未完全利用，则增加后台线程的数量以进行读取或写入操作。参见[第17.8.5节，“配置后台InnoDB I/O线程的数量”](innodb-performance-multiple_io_threads.html
    "17.8.5 配置后台InnoDB I/O线程的数量")。
- en: Controlling how much I/O `InnoDB` performs in the background. See [Section 17.8.7,
    “Configuring InnoDB I/O Capacity”](innodb-configuring-io-capacity.html "17.8.7 Configuring
    InnoDB I/O Capacity"). You might scale back this setting if you observe periodic
    drops in performance.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制`InnoDB`在后台执行的I/O量。参见[Section 17.8.7, “配置InnoDB I/O容量”](innodb-configuring-io-capacity.html
    "17.8.7 Configuring InnoDB I/O Capacity")。如果观察到性能周期性下降，您可能需要缩减此设置。
- en: Controlling the algorithm that determines when `InnoDB` performs certain types
    of background writes. See [Section 17.8.3.5, “Configuring Buffer Pool Flushing”](innodb-buffer-pool-flushing.html
    "17.8.3.5 Configuring Buffer Pool Flushing"). The algorithm works for some types
    of workloads but not others, so you might disable this feature if you observe
    periodic drops in performance.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制确定`InnoDB`何时执行某些类型后台写入的算法。参见[Section 17.8.3.5, “配置缓冲池刷新”](innodb-buffer-pool-flushing.html
    "17.8.3.5 Configuring Buffer Pool Flushing")。该算法适用于某些工作负载，但不适用于其他工作负载，因此如果观察到性能周期性下降，您可能需要禁用此功能。
- en: Taking advantage of multicore processors and their cache memory configuration,
    to minimize delays in context switching. See [Section 17.8.8, “Configuring Spin
    Lock Polling”](innodb-performance-spin_lock_polling.html "17.8.8 Configuring Spin
    Lock Polling").
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充分利用多核处理器及其缓存内存配置，以最小化上下文切换的延迟。参见[Section 17.8.8, “配置自旋锁轮询”](innodb-performance-spin_lock_polling.html
    "17.8.8 Configuring Spin Lock Polling")。
- en: Preventing one-time operations such as table scans from interfering with the
    frequently accessed data stored in the `InnoDB` buffer cache. See [Section 17.8.3.3,
    “Making the Buffer Pool Scan Resistant”](innodb-performance-midpoint_insertion.html
    "17.8.3.3 Making the Buffer Pool Scan Resistant").
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止一次性操作（如表扫描）干扰存储在`InnoDB`缓冲池中的频繁访问数据。参见[Section 17.8.3.3, “使缓冲池扫描抗干扰”](innodb-performance-midpoint_insertion.html
    "17.8.3.3 Making the Buffer Pool Scan Resistant")。
- en: Adjusting log files to a size that makes sense for reliability and crash recovery.
    `InnoDB` log files have often been kept small to avoid long startup times after
    a crash. Optimizations introduced in MySQL 5.5 speed up certain steps of the crash
    [recovery](glossary.html#glos_crash_recovery "crash recovery") process. In particular,
    scanning the [redo log](glossary.html#glos_redo_log "redo log") and applying the
    redo log are faster due to improved algorithms for memory management. If you have
    kept your log files artificially small to avoid long startup times, you can now
    consider increasing log file size to reduce the I/O that occurs due recycling
    of redo log records.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整日志文件的大小，以确保可靠性和崩溃恢复。`InnoDB`日志文件通常保持较小，以避免崩溃后长时间的启动时间。MySQL 5.5中引入的优化加快了崩溃[恢复](glossary.html#glos_crash_recovery
    "crash recovery")过程的某些步骤。特别是，由于改进的内存管理算法，扫描[重做日志](glossary.html#glos_redo_log
    "redo log")和应用重做日志的速度更快。如果您人为地保持日志文件较小以避免长时间的启动时间，现在可以考虑增加日志文件大小，以减少由重做日志记录回收引起的I/O。
- en: Configuring the size and number of instances for the `InnoDB` buffer pool, especially
    important for systems with multi-gigabyte buffer pools. See [Section 17.8.3.2,
    “Configuring Multiple Buffer Pool Instances”](innodb-multiple-buffer-pools.html
    "17.8.3.2 Configuring Multiple Buffer Pool Instances").
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置`InnoDB`缓冲池的大小和实例数量，对于具有多个千兆字节缓冲池的系统尤为重要。参见[Section 17.8.3.2, “配置多个缓冲池实例”](innodb-multiple-buffer-pools.html
    "17.8.3.2 Configuring Multiple Buffer Pool Instances")。
- en: Increasing the maximum number of concurrent transactions, which dramatically
    improves scalability for the busiest databases. See [Section 17.6.6, “Undo Logs”](innodb-undo-logs.html
    "17.6.6 Undo Logs").
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加最大并发事务数，极大地提高了最繁忙数据库的可伸缩性。参见[Section 17.6.6, “撤销日志”](innodb-undo-logs.html
    "17.6.6 Undo Logs")。
- en: Moving purge operations (a type of garbage collection) into a background thread.
    See [Section 17.8.9, “Purge Configuration”](innodb-purge-configuration.html "17.8.9 Purge
    Configuration"). To effectively measure the results of this setting, tune the
    other I/O-related and thread-related configuration settings first.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将清除操作（一种垃圾收集类型）移入后台线程。参见[Section 17.8.9, “清除配置”](innodb-purge-configuration.html
    "17.8.9 Purge Configuration")。为了有效地衡量此设置的结果，首先调整其他与I/O和线程相关的配置设置。
- en: Reducing the amount of switching that `InnoDB` does between concurrent threads,
    so that SQL operations on a busy server do not queue up and form a “traffic jam”.
    Set a value for the [`innodb_thread_concurrency`](innodb-parameters.html#sysvar_innodb_thread_concurrency)
    option, up to approximately 32 for a high-powered modern system. Increase the
    value for the [`innodb_concurrency_tickets`](innodb-parameters.html#sysvar_innodb_concurrency_tickets)
    option, typically to 5000 or so. This combination of options sets a cap on the
    number of threads that `InnoDB` processes at any one time, and allows each thread
    to do substantial work before being swapped out, so that the number of waiting
    threads stays low and operations can complete without excessive context switching.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少`InnoDB`在并发线程之间的切换次数，以使繁忙服务器上的SQL操作不会排队形成“交通堵塞”。为[`innodb_thread_concurrency`](innodb-parameters.html#sysvar_innodb_thread_concurrency)选项设置一个值，对于高性能现代系统，可以设置为大约32。增加[`innodb_concurrency_tickets`](innodb-parameters.html#sysvar_innodb_concurrency_tickets)选项的值，通常设置为5000左右。这些选项的组合设置了`InnoDB`在任一时间处理的线程数上限，并允许每个线程在被交换出之前完成大量工作，从而保持等待线程数较低，使操作可以在没有过多上下文切换的情况下完成。
