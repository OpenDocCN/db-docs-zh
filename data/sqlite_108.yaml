- en: C/C++ Interface For SQLite Version 3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite版本3的C/C++接口
- en: 原文：[https://sqlite.com/capi3.html](https://sqlite.com/capi3.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/capi3.html](https://sqlite.com/capi3.html)
- en: '**Note:** This document was written in 2004 as a guide to helping programmers
    move from using SQLite version 2 to SQLite version 3\. The information in this
    document is still essentially correct, however there have been many changes and
    enhancements over the years. We recommend that the following documents be used
    instead:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 本文档于2004年编写，作为帮助程序员从SQLite版本2迁移到SQLite版本3的指南。本文档中的信息基本上仍然正确，但多年来已经有许多变化和增强。我们建议使用以下文档代替：'
- en: '[An Introduction To The SQLite C/C++ Interface](cintro.html)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLite C/C++接口简介](cintro.html)'
- en: '[SQLite C/C++ Reference Guide](c3ref/intro.html)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLite C/C++参考指南](c3ref/intro.html)'
- en: 1.0 Overview
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.0 概述
- en: 'SQLite version 3.0 is a new version of SQLite, derived from the SQLite 2.8.13
    code base, but with an incompatible file format and API. SQLite version 3.0 was
    created to answer demand for the following features:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite版本3.0是SQLite的新版本，源自SQLite 2.8.13代码库，但具有不兼容的文件格式和API。SQLite版本3.0是为了满足以下功能需求而创建的：
- en: Support for UTF-16.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持UTF-16。
- en: User-definable text collating sequences.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可定义的文本排序序列。
- en: The ability to store BLOBs in indexed columns.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够在索引列中存储BLOBs。
- en: It was necessary to move to version 3.0 to implement these features because
    each requires incompatible changes to the database file format. Other incompatible
    changes, such as a cleanup of the API, were introduced at the same time under
    the theory that it is best to get your incompatible changes out of the way all
    at once.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个功能需要对数据库文件格式进行不兼容的更改，因此必须转移到版本3.0。其他不兼容的更改，如API的清理工作，也同时引入，因为最好一次性解决所有不兼容的更改。
- en: The API for version 3.0 is similar to the version 2.X API, but with some important
    changes. Most noticeably, the "`sqlite_`" prefix that occurs on the beginning
    of all API functions and data structures are changed to "`sqlite3_`". This avoids
    confusion between the two APIs and allows linking against both SQLite 2.X and
    SQLite 3.0 at the same time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 版本3.0的API与2.X版本的API类似，但有一些重要的更改。最显著的是，所有API函数和数据结构开头的"`sqlite_`"前缀都改为"`sqlite3_`"。这样可以避免混淆两个API，并允许同时链接SQLite
    2.X和SQLite 3.0。
- en: There is no agreement on what the C datatype for a UTF-16 string should be.
    Therefore, SQLite uses a generic type of void* to refer to UTF-16 strings. Client
    software can cast the void* to whatever datatype is appropriate for their system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于UTF-16字符串，没有统一的C数据类型。因此，SQLite使用void*作为引用UTF-16字符串的通用类型。客户端软件可以将void*转换为适合其系统的任何数据类型。
- en: 2.0 C/C++ Interface
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.0 C/C++接口
- en: 'The API for SQLite 3.0 includes 83 separate functions in addition to several
    data structures and #defines. (A complete [API reference](c3ref/intro.html) is
    provided as a separate document.) Fortunately, the interface is not nearly as
    complex as its size implies. Simple programs can still make do with only 3 functions:
    [sqlite3_open()](c3ref/open.html), [sqlite3_exec()](c3ref/exec.html), and [sqlite3_close()](c3ref/close.html).
    More control over the execution of the database engine is provided using [sqlite3_prepare_v2()](c3ref/prepare.html)
    to compile an SQLite statement into byte code and [sqlite3_step()](c3ref/step.html)
    to execute that bytecode. A family of routines with names beginning with [sqlite3_column_](c3ref/column_blob.html)
    is used to extract information about the result set of a query. Many interface
    functions come in pairs, with both a UTF-8 and UTF-16 version. And there is a
    collection of routines used to implement user-defined SQL functions and user-defined
    text collating sequences.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 3.0的API包含83个单独的函数，还有几个数据结构和#define。 (一个完整的[API参考](c3ref/intro.html)作为单独的文档提供。)
    幸运的是，界面并不像其大小所暗示的那样复杂。 简单的程序仍然只需要3个函数：[sqlite3_open()](c3ref/open.html)，[sqlite3_exec()](c3ref/exec.html)，和[sqlite3_close()](c3ref/close.html)。
    更多对数据库引擎执行的控制是通过[sqlite3_prepare_v2()](c3ref/prepare.html)编译SQLite语句为字节码，以及[sqlite3_step()](c3ref/step.html)执行该字节码来提供的。
    一组名字以[sqlite3_column_](c3ref/column_blob.html)开头的例程用于提取查询结果集的信息。 许多接口函数是成对出现的，有UTF-8和UTF-16版本。
    还有一组例程用于实现用户定义的SQL函数和用户定义的文本排序序列。
- en: 2.1 Opening and closing a database
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.1 打开和关闭数据库
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The sqlite3_open() routine returns an integer error code rather than a pointer
    to the sqlite3 structure as the version 2 interface did. The difference between
    sqlite3_open() and sqlite3_open16() is that sqlite3_open16() takes UTF-16 (in
    host native byte order) for the name of the database file. If a new database file
    needs to be created, then sqlite3_open16() sets the internal text representation
    to UTF-16 whereas sqlite3_open() sets the text representation to UTF-8.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3_open()例程返回一个整数错误代码，而不是版本2接口所做的指向sqlite3结构的指针。 sqlite3_open()和sqlite3_open16()的区别在于，sqlite3_open16()接受UTF-16（主机本地字节顺序）作为数据库文件名的表示。
    如果需要创建一个新的数据库文件，那么sqlite3_open16()将内部文本表示设置为UTF-16，而sqlite3_open()将文本表示设置为UTF-8。
- en: The opening and/or creating of the database file is deferred until the file
    is actually needed. This allows options and parameters, such as the native text
    representation and default page size, to be set using PRAGMA statements.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 打开和/或创建数据库文件被推迟直到文件真正需要。 这允许使用PRAGMA语句设置选项和参数，如本机文本表示和默认页面大小。
- en: The sqlite3_errcode() routine returns a result code for the most recent major
    API call. sqlite3_errmsg() returns an English-language text error message for
    the most recent error. The error message is represented in UTF-8 and will be ephemeral
    - it could disappear on the next call to any SQLite API function. sqlite3_errmsg16()
    works like sqlite3_errmsg() except that it returns the error message represented
    as UTF-16 in host native byte order.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3_errcode() 例程返回最近一次重要 API 调用的结果代码。sqlite3_errmsg() 返回最近错误的英语文本错误消息。错误消息用
    UTF-8 表示，并且是短暂的 - 在下一次调用任何 SQLite API 函数时可能会消失。sqlite3_errmsg16() 的工作方式类似于 sqlite3_errmsg()，只是它返回主机本地字节顺序中表示的
    UTF-16 的错误消息。
- en: 'The error codes for SQLite version 3 are unchanged from version 2. They are
    as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 版本 3 的错误代码与版本 2 中保持不变。它们如下：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 2.2 Executing SQL statements
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.2 执行 SQL 语句
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The [sqlite3_exec()](c3ref/exec.html) function works much as it did in SQLite
    version 2. Zero or more SQL statements specified in the second parameter are compiled
    and executed. Query results are returned to a callback routine.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[sqlite3_exec()](c3ref/exec.html) 函数的工作方式与 SQLite 版本 2 中的类似。在第二个参数中指定的零个或多个
    SQL 语句被编译并执行。查询结果返回到回调函数。'
- en: In SQLite version 3, the sqlite3_exec routine is just a wrapper around calls
    to the prepared statement interface.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLite 版本 3 中，sqlite3_exec 例程只是对预编译语句接口的封装。
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The sqlite3_prepare interface compiles a single SQL statement into byte code
    for later execution. This interface is now the preferred way of accessing the
    database.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3_prepare 接口将单个 SQL 语句编译成字节码以供稍后执行。这个接口现在是访问数据库的首选方式。
- en: The SQL statement is a UTF-8 string for sqlite3_prepare(). The sqlite3_prepare16()
    works the same way except that it expects a UTF-16 string as SQL input. Only the
    first SQL statement in the input string is compiled. The fifth parameter is filled
    in with a pointer to the next (uncompiled) SQLite statement in the input string,
    if any. The sqlite3_finalize() routine deallocates a prepared SQL statement. All
    prepared statements must be finalized before the database can be closed. The sqlite3_reset()
    routine resets a prepared SQL statement so that it can be executed again.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 语句是 sqlite3_prepare() 的 UTF-8 字符串。sqlite3_prepare16() 的工作方式相同，只是它期望 SQL
    输入为 UTF-16 字符串。输入字符串中的第一个 SQL 语句被编译。如果有的话，第五个参数填入指向输入字符串中下一个（未编译）SQLite 语句的指针。sqlite3_finalize()
    例程释放预编译的 SQL 语句。所有预编译语句在关闭数据库之前必须被最终化。sqlite3_reset() 例程重置预编译的 SQL 语句，使其可以再次执行。
- en: The SQL statement may contain tokens of the form "?" or "?nnn" or ":aaa" where
    "nnn" is an integer and "aaa" is an identifier. Such tokens represent unspecified
    literal values (or "wildcards") to be filled in later by the [sqlite3_bind](c3ref/bind_blob.html)
    interface. Each wildcard has an associated number which is its sequence in the
    statement or the "nnn" in the case of a "?nnn" form. It is allowed for the same
    wildcard to occur more than once in the same SQL statement, in which case all
    instance of that wildcard will be filled in with the same value. Unbound wildcards
    have a value of NULL.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 语句可以包含形如 "?" 或 "?nnn" 或 ":aaa" 的标记，其中 "nnn" 是整数，"aaa" 是标识符。这些标记表示稍后将由 [sqlite3_bind](c3ref/bind_blob.html)
    接口填充的未指定的文字值（或"通配符"）。每个通配符都有一个相关联的数字，即语句中的顺序或 "?nnn" 形式中的 "nnn"。允许同一通配符在同一 SQL
    语句中出现多次，此时所有该通配符的实例将填充相同的值。未绑定的通配符值为 NULL。
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There is an assortment of sqlite3_bind routines used to assign values to wildcards
    in a prepared SQL statement. Unbound wildcards are interpreted as NULLs. Bindings
    are not reset by sqlite3_reset(). But wildcards can be rebound to new values after
    an sqlite3_reset().
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 sqlite3_bind 系列例程中，用于将数值分配给准备好的 SQL 语句中的通配符。未绑定的通配符会被解释为 NULL。绑定不会被 sqlite3_reset()
    重置。但是，在 sqlite3_reset() 后，通配符可以重新绑定到新的数值。
- en: 'After an SQL statement has been prepared (and optionally bound), it is executed
    using:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 语句准备好（可选地绑定）后，使用以下方式执行：
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The sqlite3_step() routine return SQLITE_ROW if it is returning a single row
    of the result set, or SQLITE_DONE if execution has completed, either normally
    or due to an error. It might also return SQLITE_BUSY if it is unable to open the
    database file. If the return value is SQLITE_ROW, then the following routines
    can be used to extract information about that row of the result set:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 sqlite3_step() 返回 SQLITE_ROW，则表示返回了结果集中的单行数据；如果返回 SQLITE_DONE，则表示执行完成，可能是正常完成或因错误而完成。如果无法打开数据库文件，则可能返回
    SQLITE_BUSY。如果返回值是 SQLITE_ROW，则可以使用以下例程提取该行结果集的信息：
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The [sqlite3_column_count()](c3ref/column_count.html) function returns the number
    of columns in the results set. sqlite3_column_count() can be called at any time
    after [sqlite3_prepare_v2()](c3ref/prepare.html). [sqlite3_data_count()](c3ref/data_count.html)
    works similarly to [sqlite3_column_count()](c3ref/column_count.html) except that
    it only works following [sqlite3_step()](c3ref/step.html). If the previous call
    to [sqlite3_step()](c3ref/step.html) returned SQLITE_DONE or an error code, then
    [sqlite3_data_count()](c3ref/data_count.html) will return 0 whereas [sqlite3_column_count()](c3ref/column_count.html)
    will continue to return the number of columns in the result set.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[sqlite3_column_count()](c3ref/column_count.html) 函数返回结果集中的列数。sqlite3_column_count()
    可以在 [sqlite3_prepare_v2()](c3ref/prepare.html) 之后的任何时候调用。[sqlite3_data_count()](c3ref/data_count.html)
    与 [sqlite3_column_count()](c3ref/column_count.html) 类似，但只能在 [sqlite3_step()](c3ref/step.html)
    之后调用。如果前一次对 [sqlite3_step()](c3ref/step.html) 的调用返回 SQLITE_DONE 或错误代码，则 [sqlite3_data_count()](c3ref/data_count.html)
    返回 0，而 [sqlite3_column_count()](c3ref/column_count.html) 将继续返回结果集中的列数。'
- en: Returned data is examined using the other [sqlite3_column_***()](c3ref/column_blob.html)
    functions, all of which take a column number as their second parameter. Columns
    are zero-indexed from left to right. Note that this is different to parameters,
    which are indexed starting at one.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的数据使用其他 [sqlite3_column_***()](c3ref/column_blob.html) 函数进行检查，所有这些函数的第二个参数都是列号。列从左到右以零为索引。注意，这与参数的索引不同，参数从
    1 开始索引。
- en: 'The [sqlite3_column_type()](c3ref/column_blob.html) function returns the datatype
    for the value in the Nth column. The return value is one of these:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[sqlite3_column_type()](c3ref/column_blob.html) 函数返回第 N 列的值的数据类型。返回值是以下之一：'
- en: '[PRE7]'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The sqlite3_column_decltype() routine returns text which is the declared type
    of the column in the CREATE TABLE statement. For an expression, the return type
    is an empty string. sqlite3_column_name() returns the name of the Nth column.
    sqlite3_column_bytes() returns the number of bytes in a column that has type BLOB
    or the number of bytes in a TEXT string with UTF-8 encoding. sqlite3_column_bytes16()
    returns the same value for BLOBs but for TEXT strings returns the number of bytes
    in a UTF-16 encoding. sqlite3_column_blob() return BLOB data. sqlite3_column_text()
    return TEXT data as UTF-8. sqlite3_column_text16() return TEXT data as UTF-16.
    sqlite3_column_int() return INTEGER data in the host machines native integer format.
    sqlite3_column_int64() returns 64-bit INTEGER data. Finally, sqlite3_column_double()
    return floating point data.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3_column_decltype() 返回在 CREATE TABLE 语句中声明的列的类型。对于表达式，返回类型为空字符串。sqlite3_column_name()
    返回第 N 列的名称。sqlite3_column_bytes() 返回具有 BLOB 类型的列中的字节数，或具有 UTF-8 编码的 TEXT 字符串中的字节数。sqlite3_column_bytes16()
    对于 BLOB，返回相同的字节数，但对于 UTF-16 编码的 TEXT 字符串返回字节数。sqlite3_column_blob() 返回 BLOB 数据。sqlite3_column_text()
    返回 UTF-8 编码的 TEXT 数据。sqlite3_column_text16() 返回 UTF-16 编码的 TEXT 数据。sqlite3_column_int()
    返回主机机器的本机整数格式的 INTEGER 数据。sqlite3_column_int64() 返回 64 位 INTEGER 数据。最后，sqlite3_column_double()
    返回浮点数数据。
- en: It is not necessary to retrieve data in the format specify by sqlite3_column_type().
    If a different format is requested, the data is converted automatically.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要以 sqlite3_column_type() 指定的格式检索数据。如果请求了不同的格式，数据会自动转换。
- en: 'Data format conversions can invalidate the pointer returned by prior calls
    to sqlite3_column_blob(), sqlite3_column_text(), and/or sqlite3_column_text16().
    Pointers might be invalided in the following cases:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 数据格式转换可能会使先前调用 sqlite3_column_blob()、sqlite3_column_text() 和/或 sqlite3_column_text16()
    返回的指针无效。以下情况可能会使指针无效：
- en: The initial content is a BLOB and sqlite3_column_text() or sqlite3_column_text16()
    is called. A zero-terminator might need to be added to the string.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始内容是 BLOB，且调用 sqlite3_column_text() 或 sqlite3_column_text16()。字符串可能需要添加零终结符。
- en: The initial content is UTF-8 text and sqlite3_column_bytes16() or sqlite3_column_text16()
    is called. The content must be converted to UTF-16.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始内容是 UTF-8 文本，并调用 sqlite3_column_bytes16() 或 sqlite3_column_text16()。内容必须转换为
    UTF-16。
- en: The initial content is UTF-16 text and sqlite3_column_bytes() or sqlite3_column_text()
    is called. The content must be converted to UTF-8.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始内容是 UTF-16 文本，并调用 sqlite3_column_bytes() 或 sqlite3_column_text()。内容必须转换为 UTF-8。
- en: Note that conversions between UTF-16be and UTF-16le are always done in place
    and do not invalidate a prior pointer, though of course the content of the buffer
    that the prior pointer points to will have been modified. Other kinds of conversion
    are done in place when it is possible, but sometime it is not possible and in
    those cases prior pointers are invalidated.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，UTF-16be 和 UTF-16le 之间的转换始终在原地完成，并不会使先前的指针无效，但当然，先前指针指向的缓冲区内容将被修改。在可能的情况下，其他类型的转换也在原地完成，但有时不可能，在这些情况下，先前的指针会无效。
- en: 'The safest and easiest to remember policy is this: assume that any result from'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最安全和最容易记住的策略是：假设任何来自
- en: sqlite3_column_blob(),
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqlite3_column_blob()，
- en: sqlite3_column_text(), or
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqlite3_column_text()，或
- en: sqlite3_column_text16()
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqlite3_column_text16()
- en: is invalided by subsequent calls to
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由后续调用无效。
- en: sqlite3_column_bytes(),
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqlite3_column_bytes()，
- en: sqlite3_column_bytes16(),
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqlite3_column_bytes16()，
- en: sqlite3_column_text(), or
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqlite3_column_text()，或
- en: sqlite3_column_text16().
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sqlite3_column_text16()。
- en: This means that you should always call sqlite3_column_bytes() or sqlite3_column_bytes16()
    before calling sqlite3_column_blob(), sqlite3_column_text(), or sqlite3_column_text16().
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在调用 sqlite3_column_blob()、sqlite3_column_text() 或 sqlite3_column_text16()
    之前，应始终调用 sqlite3_column_bytes() 或 sqlite3_column_bytes16()。
- en: 2.3 User-defined functions
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.3 用户自定义函数
- en: 'User defined functions can be created using the following routine:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下例程创建用户定义的函数：
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The nArg parameter specifies the number of arguments to the function. A value
    of 0 indicates that any number of arguments is allowed. The eTextRep parameter
    specifies what representation text values are expected to be in for arguments
    to this function. The value of this parameter should be one of the parameters
    defined above. SQLite version 3 allows multiple implementations of the same function
    using different text representations. The database engine chooses the function
    that minimization the number of text conversions required.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 nArg 指定函数的参数数量。值为 0 表示允许任意数量的参数。参数 eTextRep 指定此函数的参数所期望的文本值表示形式。此参数的值应为上述定义的参数之一。SQLite
    版本 3 允许使用不同的文本表示实现同一函数的多个实现。数据库引擎选择最小化所需文本转换次数的函数。
- en: Normal functions specify only xFunc and leave xStep and xFinal set to NULL.
    Aggregate functions specify xStep and xFinal and leave xFunc set to NULL. There
    is no separate sqlite3_create_aggregate() API.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 普通函数只指定 xFunc，将 xStep 和 xFinal 设置为 NULL。聚合函数指定 xStep 和 xFinal，并将 xFunc 设置为 NULL。没有单独的
    sqlite3_create_aggregate() API。
- en: The function name is specified in UTF-8\. A separate sqlite3_create_function16()
    API works the same as sqlite_create_function() except that the function name is
    specified in UTF-16 host byte order.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名以 UTF-8 指定。单独的 sqlite3_create_function16() API 的工作方式与 sqlite_create_function()
    相同，只是函数名以 UTF-16 主机字节顺序指定。
- en: 'Notice that the parameters to functions are now pointers to sqlite3_value structures
    instead of pointers to strings as in SQLite version 2.X. The following routines
    are used to extract useful information from these "values":'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，函数的参数现在是指向 sqlite3_value 结构的指针，而不是指向字符串的指针，如 SQLite 版本 2.X 中所示。以下例程用于从这些“值”中提取有用信息：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Function implementations use the following APIs to acquire context and to report
    results:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 函数实现使用以下 API 获取上下文并报告结果：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 2.4 User-defined collating sequences
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.4 用户定义排序序列
- en: 'The following routines are used to implement user-defined collating sequences:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下例程用于实现用户定义的排序序列：
- en: '[PRE11]'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The sqlite3_create_collation() function specifies a collating sequence name
    and a comparison function to implement that collating sequence. The comparison
    function is only used for comparing text values. The eTextRep parameter is one
    of SQLITE_UTF8, SQLITE_UTF16LE, SQLITE_UTF16BE, or SQLITE_ANY to specify which
    text representation the comparison function works with. Separate comparison functions
    can exist for the same collating sequence for each of the UTF-8, UTF-16LE and
    UTF-16BE text representations. The sqlite3_create_collation16() works like sqlite3_create_collation()
    except that the collation name is specified in UTF-16 host byte order instead
    of in UTF-8.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `sqlite3_create_collation()` 指定一个排序序列的名称和一个比较函数来实现该排序序列。比较函数仅用于比较文本值。参数 eTextRep
    是 SQLITE_UTF8、SQLITE_UTF16LE、SQLITE_UTF16BE 或 SQLITE_ANY 中的一个，用于指定比较函数所使用的文本表示形式。对于
    UTF-8、UTF-16LE 和 UTF-16BE 文本表示形式，可以为同一个排序序列存在不同的比较函数。函数 `sqlite3_create_collation16()`
    类似于 `sqlite3_create_collation()`，不同之处在于排序名称使用 UTF-16 主机字节顺序而不是 UTF-8。
- en: The sqlite3_collation_needed() routine registers a callback which the database
    engine will invoke if it encounters an unknown collating sequence. The callback
    can lookup an appropriate comparison function and invoke sqlite_3_create_collation()
    as needed. The fourth parameter to the callback is the name of the collating sequence
    in UTF-8\. For sqlite3_collation_need16() the callback sends the collating sequence
    name in UTF-16 host byte order.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlite3_collation_needed()` 例程注册一个回调函数，如果遇到未知的排序序列，数据库引擎将调用该回调。回调函数可以查找适当的比较函数，并根据需要调用
    `sqlite3_create_collation()`。回调的第四个参数是排序序列的名称，以 UTF-8 编码。对于 `sqlite3_collation_need16()`，回调以
    UTF-16 主机字节顺序发送排序序列名称。'
