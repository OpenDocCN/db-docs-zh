- en: 14.17.7 JSON Schema Validation Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.17.7 JSON 模式验证函数
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html](https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html](https://dev.mysql.com/doc/refman/8.0/en/json-validation-functions.html)
- en: Beginning with MySQL 8.0.17, MySQL supports validation of JSON documents against
    JSON schemas conforming to [Draft 4 of the JSON Schema specification](https://json-schema.org/specification-links.html#draft-4).
    This can be done using either of the functions detailed in this section, both
    of which take two arguments, a JSON schema, and a JSON document which is validated
    against the schema. [`JSON_SCHEMA_VALID()`](json-validation-functions.html#function_json-schema-valid)
    returns true if the document validates against the schema, and false if it does
    not; [`JSON_SCHEMA_VALIDATION_REPORT()`](json-validation-functions.html#function_json-schema-validation-report)
    provides a report in JSON format on the validation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.17 开始，MySQL 支持根据[JSON Schema 规范的 Draft 4](https://json-schema.org/specification-links.html#draft-4)对
    JSON 文档进行验证。可以使用本节详细介绍的两个函数之一来实现，这两个函数都接受两个参数，一个是 JSON 模式，另一个是根据模式进行验证的 JSON 文档。[`JSON_SCHEMA_VALID()`](json-validation-functions.html#function_json-schema-valid)
    如果文档符合模式，则返回 true，否则返回 false；[`JSON_SCHEMA_VALIDATION_REPORT()`](json-validation-functions.html#function_json-schema-validation-report)
    以 JSON 格式提供验证报告。
- en: 'Both functions handle null or invalid input as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 两个函数处理空值或无效输入如下：
- en: If at least one of the arguments is `NULL`, the function returns `NULL`.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果至少一个参数为 `NULL`，则函数返回 `NULL`。
- en: If at least one of the arguments is not valid JSON, the function raises an error
    ([`ER_INVALID_TYPE_FOR_JSON`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_type_for_json))
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果至少一个参数不是有效的 JSON，则函数会引发错误（[`ER_INVALID_TYPE_FOR_JSON`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_type_for_json)）
- en: In addition, if the schema is not a valid JSON object, the function returns
    [`ER_INVALID_JSON_TYPE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_json_type).
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果模式不是有效的 JSON 对象，则该函数返回[`ER_INVALID_JSON_TYPE`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_invalid_json_type)。
- en: MySQL supports the `required` attribute in JSON schemas to enforce the inclusion
    of required properties (see the examples in the function descriptions).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 支持 JSON 模式中的 `required` 属性，以强制包含必需属性（请参阅函数描述中的示例）。
- en: MySQL supports the `id`, `$schema`, `description`, and `type` attributes in
    JSON schemas but does not require any of these.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 支持 JSON 模式中的 `id`、`$schema`、`description` 和 `type` 属性，但不要求其中任何一个。
- en: MySQL does not support external resources in JSON schemas; using the `$ref`
    keyword causes `JSON_SCHEMA_VALID()` to fail with [`ER_NOT_SUPPORTED_YET`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_not_supported_yet).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 不支持 JSON 模式中的外部资源；使用 `$ref` 关键字会导致 `JSON_SCHEMA_VALID()` 失败，并显示[`ER_NOT_SUPPORTED_YET`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_not_supported_yet)。
- en: Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: MySQL supports regular expression patterns in JSON schema, which supports but
    silently ignores invalid patterns (see the description of `JSON_SCHEMA_VALID()`
    for an example).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 支持 JSON 模式中的正则表达式模式，支持但会静默忽略无效模式（请参阅 `JSON_SCHEMA_VALID()` 的描述以获取示例）。
- en: 'These functions are described in detail in the following list:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数在以下列表中有详细描述：
- en: '[`JSON_SCHEMA_VALID(*`schema`*,*`document`*)`](json-validation-functions.html#function_json-schema-valid)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_SCHEMA_VALID(*`schema`*,*`document`*)`](json-validation-functions.html#function_json-schema-valid)'
- en: 'Validates a JSON *`document`* against a JSON *`schema`*. Both *`schema`* and
    *`document`* are required. The schema must be a valid JSON object; the document
    must be a valid JSON document. Provided that these conditions are met: If the
    document validates against the schema, the function returns true (1); otherwise,
    it returns false (0).'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证 JSON *`文档`* 是否符合 JSON *`模式`*。两者都是必需的。模式必须是有效的 JSON 对象；文档必须是有效的 JSON 文档。只要满足这些条件：如果文档符合模式，则函数返回
    true（1）；否则返回 false（0）。
- en: 'In this example, we set a user variable `@schema` to the value of a JSON schema
    for geographical coordinates, and another one `@document` to the value of a JSON
    document containing one such coordinate. We then verify that `@document` validates
    according to `@schema` by using them as the arguments to `JSON_SCHEMA_VALID()`:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，我们将用户变量 `@schema` 设置为地理坐标的 JSON 模式的值，另一个变量 `@document` 设置为包含一个这样的坐标的 JSON
    文档的值。然后，我们通过将它们用作 `JSON_SCHEMA_VALID()` 的参数来验证 `@document` 是否符合 `@schema`：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since `@schema` contains the `required` attribute, we can set `@document` to
    a value that is otherwise valid but does not contain the required properties,
    then test it against `@schema`, like this:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于`@schema`包含`required`属性，我们可以将`@document`设置为一个在其他方面有效但不包含所需属性的值，然后对其进行与`@schema`的测试，如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we now set the value of `@schema` to the same JSON schema but without the
    `required` attribute, `@document` validates because it is a valid JSON object,
    even though it contains no properties, as shown here:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果现在将`@schema`的值设置为相同的 JSON 模式，但不包含`required`属性，`@document`会验证通过，因为它是有效的 JSON
    对象，即使不包含任何属性，如下所示：
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**JSON_SCHEMA_VALID() and CHECK constraints. ** `JSON_SCHEMA_VALID()` can also
    be used to enforce `CHECK` constraints.'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**JSON_SCHEMA_VALID() 和 CHECK 约束。** `JSON_SCHEMA_VALID()` 也可用于强制执行`CHECK`约束。'
- en: 'Consider the table `geo` created as shown here, with a JSON column `coordinate`
    representing a point of latitude and longitude on a map, governed by the JSON
    schema used as an argument in a `JSON_SCHEMA_VALID()` call which is passed as
    the expression for a `CHECK` constraint on this table:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑在此处创建的表`geo`，其中包含表示地图上纬度和经度点的 JSON 列`coordinate`，由作为`JSON_SCHEMA_VALID()`调用参数使用的
    JSON 模式控制，该模式作为此表上的`CHECK`约束的表达式传递：
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Because a MySQL `CHECK` constraint cannot contain references to variables, you
    must pass the JSON schema to `JSON_SCHEMA_VALID()` inline when using it to specify
    such a constraint for a table.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为 MySQL 的`CHECK`约束不能包含对变量的引用，所以在为表指定此类约束时，必须在使用`JSON_SCHEMA_VALID()`时内联传递 JSON
    模式。
- en: 'We assign JSON values representing coordinates to three variables, as shown
    here:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将表示坐标的 JSON 值分配给三个变量，如下所示：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first of these values is valid, as can be seen in the following [`INSERT`](insert.html
    "15.2.7 INSERT Statement") statement:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些值中的第一个是有效的，如下面的[`INSERT`](insert.html "15.2.7 INSERT Statement")语句中所示：
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The second JSON value is invalid and so fails the constraint, as shown here:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二个 JSON 值是无效的，因此未通过约束，如下所示：
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In MySQL 8.0.19 and later, you can obtain precise information about the nature
    of the failure—in this case, that the `latitude` value exceeds the maximum defined
    in the schema—by issuing a [`SHOW WARNINGS`](show-warnings.html "15.7.7.42 SHOW
    WARNINGS Statement") statement:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.19 及更高版本中，您可以通过发出[`SHOW WARNINGS`](show-warnings.html "15.7.7.42 SHOW
    WARNINGS Statement")语句来获取有关失败性质的精确信息，例如，`latitude`值超过模式中定义的最大值：
- en: '[PRE7]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The third coordinate value defined above is also invalid, since it is missing
    the required `latitude` property. As before, you can see this by attempting to
    insert the value into the `geo` table, then issuing `SHOW WARNINGS` afterwards:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述定义的第三个坐标值也是无效的，因为缺少必需的`latitude`属性。与之前一样，您可以通过尝试将该值插入`geo`表中，然后在之后发出`SHOW
    WARNINGS`来看到这一点：
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See [Section 15.1.20.6, “CHECK Constraints”](create-table-check-constraints.html
    "15.1.20.6 CHECK Constraints"), for more information.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[Section 15.1.20.6, “CHECK Constraints”](create-table-check-constraints.html
    "15.1.20.6 CHECK Constraints")。
- en: 'JSON Schema has support for specifying regular expression patterns for strings,
    but the implementation used by MySQL silently ignores invalid patterns. This means
    that `JSON_SCHEMA_VALID()` can return true even when a regular expression pattern
    is invalid, as shown here:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: JSON Schema 支持为字符串指定正则表达式模式，但 MySQL 使用的实现会默默忽略无效模式。这意味着即使正则表达式模式无效，`JSON_SCHEMA_VALID()`也可能返回
    true，如下所示：
- en: '[PRE9]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[`JSON_SCHEMA_VALIDATION_REPORT(*`schema`*,*`document`*)`](json-validation-functions.html#function_json-schema-validation-report)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_SCHEMA_VALIDATION_REPORT(*`schema`*,*`document`*)`](json-validation-functions.html#function_json-schema-validation-report)'
- en: 'Validates a JSON *`document`* against a JSON *`schema`*. Both *`schema`* and
    *`document`* are required. As with JSON_VALID_SCHEMA(), the schema must be a valid
    JSON object, and the document must be a valid JSON document. Provided that these
    conditions are met, the function returns a report, as a JSON document, on the
    outcome of the validation. If the JSON document is considered valid according
    to the JSON Schema, the function returns a JSON object with one property `valid`
    having the value "true". If the JSON document fails validation, the function returns
    a JSON object which includes the properties listed here:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对 JSON *`document`* 对 JSON *`schema`* 进行验证。两者都是必需的。与 JSON_VALID_SCHEMA() 一样，模式必须是有效的
    JSON 对象，文档必须是有效的 JSON 文档。只要满足这些条件，函数就会返回一个报告，作为 JSON 文档，关于验证结果的情况。如果根据 JSON Schema
    认为 JSON 文档有效，函数将返回一个具有一个属性`valid`且值为"true"的 JSON 对象。如果 JSON 文档未通过验证，函数将返回一个包含以下属性的
    JSON 对象：
- en: '`valid`: Always "false" for a failed schema validation'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`valid`：对于失败的模式验证始终为"false"'
- en: '`reason`: A human-readable string containing the reason for the failure'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reason`：包含失败原因的人类可读字符串'
- en: '`schema-location`: A JSON pointer URI fragment identifier indicating where
    in the JSON schema the validation failed (see Note following this list)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema-location`：指示验证失败的JSON模式中的位置的JSON指针URI片段标识符（请参见此列表后面的注释）'
- en: '`document-location`: A JSON pointer URI fragment identifier indicating where
    in the JSON document the validation failed (see Note following this list)'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document-location`：指示验证失败的JSON文档中的位置的JSON指针URI片段标识符（请参见此列表后面的注释）'
- en: '`schema-failed-keyword`: A string containing the name of the keyword or property
    in the JSON schema that was violated'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema-failed-keyword`：包含在违反JSON模式的关键字或属性的字符串'
- en: Note
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注
- en: JSON pointer URI fragment identifiers are defined in [RFC 6901 - JavaScript
    Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901#page-5). (These
    are *not* the same as the JSON path notation used by [`JSON_EXTRACT()`](json-search-functions.html#function_json-extract)
    and other MySQL JSON functions.) In this notation, `#` represents the entire document,
    and `#/myprop` represents the portion of the document included in the top-level
    property named `myprop`. See the specification just cited and the examples shown
    later in this section for more information.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: JSON指针URI片段标识符在[RFC 6901 - JavaScript Object Notation (JSON) Pointer](https://tools.ietf.org/html/rfc6901#page-5)中定义。（这些与[`JSON_EXTRACT()`](json-search-functions.html#function_json-extract)和其他MySQL
    JSON函数使用的JSON路径表示法不同。）在这种表示法中，`#`代表整个文档，`#/myprop`代表包含在名为`myprop`的顶级属性中的文档部分。有关更多信息，请参阅刚才引用的规范以及本节后面显示的示例。
- en: 'In this example, we set a user variable `@schema` to the value of a JSON schema
    for geographical coordinates, and another one `@document` to the value of a JSON
    document containing one such coordinate. We then verify that `@document` validates
    according to `@schema` by using them as the arguments to `JSON_SCHEMA_VALIDATION_REORT()`:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，我们将一个用户变量`@schema`设置为地理坐标的JSON模式的值，另一个变量`@document`设置为包含一个这样的坐标的JSON文档的值。然后，通过将它们用作`JSON_SCHEMA_VALIDATION_REORT()`的参数来验证`@document`是否符合`@schema`：
- en: '[PRE10]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we set `@document` such that it specifies an illegal value for one of its
    properties, like this:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们设置`@document`，使其指定其中一个属性的非法值，如下所示：
- en: '[PRE11]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Validation of `@document` now fails when tested with `JSON_SCHEMA_VALIDATION_REPORT()`.
    The output from the function call contains detailed information about the failure
    (with the function wrapped by [`JSON_PRETTY()`](json-utility-functions.html#function_json-pretty)
    to provide better formatting), as shown here:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当使用`JSON_SCHEMA_VALIDATION_REPORT()`测试`@document`时，验证失败。函数调用的输出包含有关失败的详细信息（使用[`JSON_PRETTY()`](json-utility-functions.html#function_json-pretty)包装函数以提供更好的格式化），如下所示：
- en: '[PRE12]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since `@schema` contains the `required` attribute, we can set `@document` to
    a value that is otherwise valid but does not contain the required properties,
    then test it against `@schema`. The output of `JSON_SCHEMA_VALIDATION_REPORT()`
    shows that validation fails due to lack of a required element, like this:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于`@schema`包含`required`属性，我们可以将`@document`设置为否则有效但不包含所需属性的值，然后对其进行与`@schema`的测试。`JSON_SCHEMA_VALIDATION_REPORT()`的输出显示验证失败，因为缺少必需元素，如下所示：
- en: '[PRE13]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we now set the value of `@schema` to the same JSON schema but without the
    `required` attribute, `@document` validates because it is a valid JSON object,
    even though it contains no properties, as shown here:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们现在将`@schema`的值设置为相同的JSON模式，但没有`required`属性，`@document`会通过验证，因为它是一个有效的JSON对象，即使它不包含任何属性，如下所示：
- en: '[PRE14]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
