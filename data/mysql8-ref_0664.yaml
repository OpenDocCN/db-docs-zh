- en: 11.4 User-Defined Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.4 用户定义变量
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/user-variables.html](https://dev.mysql.com/doc/refman/8.0/en/user-variables.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/user-variables.html](https://dev.mysql.com/doc/refman/8.0/en/user-variables.html)
- en: You can store a value in a user-defined variable in one statement and refer
    to it later in another statement. This enables you to pass values from one statement
    to another.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在一个语句中将值存储在用户定义变量中，并在另一个语句中引用它。这使您可以从一个语句传递值到另一个语句。
- en: User variables are written as `@*`var_name`*`, where the variable name *`var_name`*
    consists of alphanumeric characters, `.`, `_`, and `$`. A user variable name can
    contain other characters if you quote it as a string or identifier (for example,
    `@'my-var'`, `@"my-var"`, or `@`my-var``).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用户变量写作`@*`var_name`*`，其中变量名*`var_name`*由字母数字字符、`.`、`_`和`$`组成。如果要包含其他字符，可以将其引用为字符串或标识符（例如，`@'my-var'`、`@"my-var"`或`@`my-var``）。
- en: 'User-defined variables are session specific. A user variable defined by one
    client cannot be seen or used by other clients. (Exception: A user with access
    to the Performance Schema [`user_variables_by_thread`](performance-schema-user-variable-tables.html
    "29.12.10 Performance Schema User-Defined Variable Tables") table can see all
    user variables for all sessions.) All variables for a given client session are
    automatically freed when that client exits.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义变量是会话特定的。一个客户端定义的用户变量对其他客户端不可见或不可用。（例外：具有对性能模式[`user_variables_by_thread`](performance-schema-user-variable-tables.html
    "29.12.10 性能模式用户定义变量表")表的访问权限的用户可以看到所有会话的所有用户变量。）给定客户端会话的所有变量在该客户端退出时会自动释放。
- en: User variable names are not case-sensitive. Names have a maximum length of 64
    characters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 用户变量名称不区分大小写。名称最大长度为64个字符。
- en: 'One way to set a user-defined variable is by issuing a [`SET`](set-variable.html
    "15.7.6.1 SET Syntax for Variable Assignment") statement:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用户定义变量的一种方法是发出[`SET`](set-variable.html "15.7.6.1 变量赋值的SET语法")语句：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For [`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment"),
    either [`=`](assignment-operators.html#operator_assign-equal) or [`:=`](assignment-operators.html#operator_assign-value)
    can be used as the assignment operator.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`SET`](set-variable.html "15.7.6.1 变量赋值的SET语法")，赋值操作符可以使用[`=`](assignment-operators.html#operator_assign-equal)或[`:=`](assignment-operators.html#operator_assign-value)。
- en: 'User variables can be assigned a value from a limited set of data types: integer,
    decimal, floating-point, binary or nonbinary string, or `NULL` value. Assignment
    of decimal and real values does not preserve the precision or scale of the value.
    A value of a type other than one of the permissible types is converted to a permissible
    type. For example, a value having a temporal or spatial data type is converted
    to a binary string. A value having the [`JSON`](json.html "13.5 The JSON Data
    Type") data type is converted to a string with a character set of `utf8mb4` and
    a collation of `utf8mb4_bin`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 用户变量可以被赋予整数、小数、浮点、二进制或非二进制字符串、或`NULL`值等有限数据类型的值。赋予小数和实数值不会保留值的精度或标度。除了允许的类型之外的类型的值会被转换为允许的类型。例如，具有时间或空间数据类型的值会被转换为二进制字符串。具有[`JSON`](json.html
    "13.5 JSON数据类型")数据类型的值会被转换为具有`utf8mb4`字符集和`utf8mb4_bin`校对的字符串。
- en: If a user variable is assigned a nonbinary (character) string value, it has
    the same character set and collation as the string. The coercibility of user variables
    is implicit. (This is the same coercibility as for table column values.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户变量被赋予非二进制（字符）字符串值，则具有与字符串相同的字符集和校对。用户变量的可强制性是隐式的。（这与表列值的可强制性相同。）
- en: 'Hexadecimal or bit values assigned to user variables are treated as binary
    strings. To assign a hexadecimal or bit value as a number to a user variable,
    use it in numeric context. For example, add 0 or use [`CAST(... AS UNSIGNED)`](cast-functions.html#function_cast):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 赋予用户变量的十六进制或位值被视为二进制字符串。要将十六进制或位值作为数字赋予用户变量，需在数值上下文中使用。例如，添加0或使用[`CAST(... AS
    UNSIGNED)`](cast-functions.html#function_cast)：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the value of a user variable is selected in a result set, it is returned
    to the client as a string.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户变量的值在结果集中被选中，则作为字符串返回给客户端。
- en: If you refer to a variable that has not been initialized, it has a value of
    `NULL` and a type of string.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果引用未初始化的变量，则其值为`NULL`，类型为字符串。
- en: Beginning with MySQL 8.0.22, a reference to a user variable in a prepared statement
    has its type determined when the statement is first prepared, and retains this
    type each time the statement is executed thereafter. Similarly, the type of a
    user variable employed in a statement within a stored procedure is determined
    the first time the stored procedure is invoked, and retains this type with each
    subsequent invocation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.22 开始，在准备语句中引用用户变量时，其类型在首次准备语句时确定，并在此后每次执行语句时保留此类型。类似地，在存储过程中的语句中使用的用户变量的类型在首次调用存储过程时确定，并在每次后续调用时保留此类型。
- en: User variables may be used in most contexts where expressions are permitted.
    This does not currently include contexts that explicitly require a literal value,
    such as in the `LIMIT` clause of a [`SELECT`](select.html "15.2.13 SELECT Statement")
    statement, or the `IGNORE *`N`* LINES` clause of a [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") statement.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用户变量可以在大多数允许表达式的上下文中使用。目前不包括明确要求字面值的上下文，例如[`SELECT`](select.html "15.2.13 SELECT
    Statement")语句的`LIMIT`子句，或[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")语句的`IGNORE
    *`N`* LINES`子句。
- en: Previous releases of MySQL made it possible to assign a value to a user variable
    in statements other than [`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable
    Assignment"). This functionality is supported in MySQL 8.0 for backward compatibility
    but is subject to removal in a future release of MySQL.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 的先前版本允许在[`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment")之外的语句中为用户变量赋值。这种功能在
    MySQL 8.0 中得到支持以保持向后兼容性，但可能在将来的 MySQL 版本中被移除。
- en: When making an assignment in this way, you must use [`:=`](assignment-operators.html#operator_assign-value)
    as the assignment operator; `=` is treated as the comparison operator in statements
    other than [`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable Assignment").
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方式进行赋值时，必须使用[`:=`](assignment-operators.html#operator_assign-value)作为赋值运算符；`=`在[`SET`](set-variable.html
    "15.7.6.1 SET Syntax for Variable Assignment")之外的语句中被视为比较运算符。
- en: The order of evaluation for expressions involving user variables is undefined.
    For example, there is no guarantee that `SELECT @a, @a:=@a+1` evaluates `@a` first
    and then performs the assignment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式中涉及用户变量的评估顺序是未定义的。例如，不能保证`SELECT @a, @a:=@a+1`首先评估`@a`然后执行赋值。
- en: In addition, the default result type of a variable is based on its type at the
    beginning of the statement. This may have unintended effects if a variable holds
    a value of one type at the beginning of a statement in which it is also assigned
    a new value of a different type.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，变量的默认结果类型基于语句开始时的类型。如果变量在语句开始时保存一个类型的值，并在其中分配一个不同类型的新值，则可能会产生意外效果。
- en: To avoid problems with this behavior, either do not assign a value to and read
    the value of the same variable within a single statement, or else set the variable
    to `0`, `0.0`, or `''` to define its type before you use it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为避免此行为问题，在单个语句中不要为同一变量分配值并读取该值，或者在使用之前将变量设置为`0`、`0.0`或`''`以定义其类型。
- en: '`HAVING`, `GROUP BY`, and `ORDER BY`, when referring to a variable that is
    assigned a value in the select expression list do not work as expected because
    the expression is evaluated on the client and thus can use stale column values
    from a previous row.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当在`HAVING`、`GROUP BY`和`ORDER BY`中引用在选择表达式列表中分配值的变量时，不会按预期工作，因为表达式在客户端上评估，因此可能使用来自先前行的过时列值。
- en: 'User variables are intended to provide data values. They cannot be used directly
    in an SQL statement as an identifier or as part of an identifier, such as in contexts
    where a table or database name is expected, or as a reserved word such as [`SELECT`](select.html
    "15.2.13 SELECT Statement"). This is true even if the variable is quoted, as shown
    in the following example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用户变量旨在提供数据值。它们不能直接用作 SQL 语句中的标识符或标识符的一部分，例如在期望表或数据库名称的上下文中，或作为保留字，比如[`SELECT`](select.html
    "15.2.13 SELECT Statement")。即使变量被引用，也是如此，如下例所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'An exception to this principle that user variables cannot be used to provide
    identifiers, is when you are constructing a string for use as a prepared statement
    to execute later. In this case, user variables can be used to provide any part
    of the statement. The following example illustrates how this can be done:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不能使用用户变量提供标识符的原则有一个例外，那就是当您构建一个字符串以供稍后执行的准备语句时。在这种情况下，用户变量可以用来提供语句的任何部分。以下示例说明了如何实现这一点：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See [Section 15.5, “Prepared Statements”](sql-prepared-statements.html "15.5 Prepared
    Statements"), for more information.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见[第15.5节，“准备语句”](sql-prepared-statements.html "15.5 Prepared Statements")。
- en: 'A similar technique can be used in application programs to construct SQL statements
    using program variables, as shown here using PHP 5:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的技术可以在应用程序中使用，以使用程序变量构建SQL语句，如下所示使用PHP 5：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Assembling an SQL statement in this fashion is sometimes known as “Dynamic SQL”.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式组装SQL语句有时被称为“动态SQL”。
