- en: 27.5.4 The View WITH CHECK OPTION Clause
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 27.5.4 视图WITH CHECK OPTION子句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/view-check-option.html](https://dev.mysql.com/doc/refman/8.0/en/view-check-option.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/view-check-option.html](https://dev.mysql.com/doc/refman/8.0/en/view-check-option.html)
- en: The `WITH CHECK OPTION` clause can be given for an updatable view to prevent
    inserts to rows for which the `WHERE` clause in the *`select_statement`* is not
    true. It also prevents updates to rows for which the `WHERE` clause is true but
    the update would cause it to be not true (in other words, it prevents visible
    rows from being updated to nonvisible rows).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为可更新视图提供`WITH CHECK OPTION`子句，以防止插入到`select_statement`中`WHERE`子句不为真的行。它还防止更新使`WHERE`子句为真但更新会导致其不为真的行（换句话说，它防止可见行被更新为不可见行）。
- en: In a `WITH CHECK OPTION` clause for an updatable view, the `LOCAL` and `CASCADED`
    keywords determine the scope of check testing when the view is defined in terms
    of another view. When neither keyword is given, the default is `CASCADED`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在可更新视图的`WITH CHECK OPTION`子句中，`LOCAL`和`CASCADED`关键字确定了在视图以另一个视图的形式定义时进行检查测试的范围。当没有给出关键字时，默认为`CASCADED`。
- en: '`WITH CHECK OPTION` testing is standard-compliant:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`WITH CHECK OPTION`测试符合标准：'
- en: With `LOCAL`, the view `WHERE` clause is checked, then checking recurses to
    underlying views and applies the same rules.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`LOCAL`，视图`WHERE`子句会被检查，然后检查递归到底层视图并应用相同的规则。
- en: With `CASCADED`, the view `WHERE` clause is checked, then checking recurses
    to underlying views, adds `WITH CASCADED CHECK OPTION` to them (for purposes of
    the check; their definitions remain unchanged), and applies the same rules.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`CASCADED`，视图`WHERE`子句会被检查，然后检查递归到底层视图，为它们添加`WITH CASCADED CHECK OPTION`（用于检查目的；它们的定义保持不变），并应用相同的规则。
- en: With no check option, the view `WHERE` clause is not checked, then checking
    recurses to underlying views, and applies the same rules.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有检查选项时，视图`WHERE`子句不会被检查，然后检查会递归到底层视图，并应用相同的规则。
- en: 'Consider the definitions for the following table and set of views:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下表和一组视图的定义：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here the `v2` and `v3` views are defined in terms of another view, `v1`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`v2`和`v3`视图是以另一个视图`v1`的形式定义的。
- en: 'Inserts for `v2` are checked against its `LOCAL` check option, then the check
    recurses to `v1` and the rules are applied again. The rules for `v1` cause a check
    failure. The check for `v3` also fails:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`v2`的插入会根据其`LOCAL`检查选项进行检查，然后检查递归到`v1`并再次应用规则。`v1`的规则导致检查失败。`v3`的检查也失败：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
