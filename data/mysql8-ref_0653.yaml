- en: 11.1.4 Hexadecimal Literals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11.1.4 十六进制文字
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/hexadecimal-literals.html](https://dev.mysql.com/doc/refman/8.0/en/hexadecimal-literals.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://dev.mysql.com/doc/refman/8.0/en/hexadecimal-literals.html](https://dev.mysql.com/doc/refman/8.0/en/hexadecimal-literals.html)
- en: Hexadecimal literal values are written using `X'*`val`*'` or `0x*`val`*` notation,
    where *`val`* contains hexadecimal digits (`0..9`, `A..F`). Lettercase of the
    digits and of any leading `X` does not matter. A leading `0x` is case-sensitive
    and cannot be written as `0X`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 十六进制文字值使用 `X'*`val`*'` 或 `0x*`val`*` 表示法编写，其中 *`val`* 包含十六进制数字（`0..9`，`A..F`）。数字的大小写和任何前导
    `X` 的大小写不重要。前导 `0x` 区分大小写，不能写为 `0X`。
- en: 'Legal hexadecimal literals:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 合法的十六进制文字：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Illegal hexadecimal literals:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 非法的十六进制文字：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Values written using `X''*`val`*''` notation must contain an even number of
    digits or a syntax error occurs. To correct the problem, pad the value with a
    leading zero:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `X'*`val`*'` 表示法编写的值必须包含偶数个数字，否则会出现语法错误。要纠正问题，请在值前面填充一个前导零：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Values written using `0x*`val`*` notation that contain an odd number of digits
    are treated as having an extra leading `0`. For example, `0xaaa` is interpreted
    as `0x0aaa`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包含奇数个数字的 `0x*`val`*` 表示法编写的值被视为具有额外的前导 `0`。例如，`0xaaa` 被解释为 `0x0aaa`。
- en: 'By default, a hexadecimal literal is a binary string, where each pair of hexadecimal
    digits represents a character:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，十六进制文字是一个二进制字符串，其中每对十六进制数字表示一个字符：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A hexadecimal literal may have an optional character set introducer and `COLLATE`
    clause, to designate it as a string that uses a particular character set and collation:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 十六进制文字可能具有可选的字符集引导符和 `COLLATE` 子句，以指定其为使用特定字符集和排序规则的字符串：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Examples:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The examples use `X'*`val`*'` notation, but `0x*`val`*` notation permits introducers
    as well. For information about introducers, see [Section 12.3.8, “Character Set
    Introducers”](charset-introducer.html "12.3.8 Character Set Introducers").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例使用 `X'*`val`*'` 表示法，但 `0x*`val`*` 表示法也允许引导符。有关引导符的信息，请参阅 [Section 12.3.8,
    “Character Set Introducers”](charset-introducer.html "12.3.8 Character Set Introducers")。
- en: 'In numeric contexts, MySQL treats a hexadecimal literal like a `BIGINT UNSIGNED`
    (64-bit unsigned integer). To ensure numeric treatment of a hexadecimal literal,
    use it in numeric context. Ways to do this include adding 0 or using [`CAST(...
    AS UNSIGNED)`](cast-functions.html#function_cast). For example, a hexadecimal
    literal assigned to a user-defined variable is a binary string by default. To
    assign the value as a number, use it in numeric context:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在数值上下文中，MySQL将十六进制文字视为 `BIGINT UNSIGNED`（64位无符号整数）。为确保十六进制文字的数值处理，请在数值上下文中使用它。实现这一目的的方法包括添加
    0 或使用 [`CAST(... AS UNSIGNED)`](cast-functions.html#function_cast)。例如，将十六进制文字分配给用户定义的变量时，默认情况下是二进制字符串。要将值分配为数字，请在数值上下文中使用它：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'An empty hexadecimal value (`X''''`) evaluates to a zero-length binary string.
    Converted to a number, it produces 0:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 空的十六进制值（`X''`）评估为零长度的二进制字符串。转换为数字后，它产生 0：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `X'*`val`*'` notation is based on standard SQL. The `0x` notation is based
    on ODBC, for which hexadecimal strings are often used to supply values for [`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types") columns.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`X''*`val`*''` 表示法基于标准 SQL。`0x` 表示法基于 ODBC，其中十六进制字符串通常用于为 [`BLOB`](blob.html
    "13.3.4 BLOB 和 TEXT 类型") 列提供值。'
- en: 'To convert a string or a number to a string in hexadecimal format, use the
    [`HEX()`](string-functions.html#function_hex) function:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要将字符串或数字转换为十六进制格式的字符串，请使用 [`HEX()`](string-functions.html#function_hex) 函数：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For hexadecimal literals, bit operations are considered numeric context, but
    bit operations permit numeric or binary string arguments in MySQL 8.0 and higher.
    To explicitly specify binary string context for hexadecimal literals, use a `_binary`
    introducer for at least one of the arguments:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于十六进制文字，位操作被视为数值上下文，但在 MySQL 8.0 及更高版本中，位操作允许数值或二进制字符串参数。要明确指定十六进制文字的二进制字符串上下文，请至少在一个参数中使用
    `_binary` 引导符：
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The displayed result appears similar for both bit operations, but the result
    without `_binary` is a `BIGINT` value, whereas the result with `_binary` is a
    binary string. Due to the difference in result types, the displayed values differ:
    High-order 0 digits are not displayed for the numeric result.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的结果对于位操作都是相似的，但没有 `_binary` 的结果是一个 `BIGINT` 值，而带有 `_binary` 的结果是一个二进制字符串。由于结果类型的差异，显示的值也不同：数值结果不显示高阶
    0 数字。
