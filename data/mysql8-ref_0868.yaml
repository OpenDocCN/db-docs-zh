- en: 14.20.1 Window Function Descriptions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.20.1 窗口函数描述
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html](https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html](https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html)
- en: This section describes nonaggregate window functions that, for each row from
    a query, perform a calculation using rows related to that row. Most aggregate
    functions also can be used as window functions; see [Section 14.19.1, “Aggregate
    Function Descriptions”](aggregate-functions.html "14.19.1 Aggregate Function Descriptions").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了非聚合窗口函数，对于查询中的每一行，使用与该行相关的行执行计算。大多数聚合函数也可以用作窗口函数；请参见[第14.19.1节，“聚合函数描述”](aggregate-functions.html
    "14.19.1 聚合函数描述")。
- en: For window function usage information and examples, and definitions of terms
    such as the `OVER` clause, window, partition, frame, and peer, see [Section 14.20.2,
    “Window Function Concepts and Syntax”](window-functions-usage.html "14.20.2 Window
    Function Concepts and Syntax").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有关窗口函数的使用信息和示例，以及术语的定义，如`OVER`子句、窗口、分区、帧和对等行，请参见[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")。
- en: '**Table 14.30 Window Functions**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.30 窗口函数**'
- en: '| Name | Description |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`CUME_DIST()`](window-function-descriptions.html#function_cume-dist) | Cumulative
    distribution value |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`CUME_DIST()`](window-function-descriptions.html#function_cume-dist) | 累积分布值
    |'
- en: '| [`DENSE_RANK()`](window-function-descriptions.html#function_dense-rank) |
    Rank of current row within its partition, without gaps |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`DENSE_RANK()`](window-function-descriptions.html#function_dense-rank) |
    分区内当前行的排名，无间隔 |'
- en: '| [`FIRST_VALUE()`](window-function-descriptions.html#function_first-value)
    | Value of argument from first row of window frame |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`FIRST_VALUE()`](window-function-descriptions.html#function_first-value)
    | 窗口帧的第一行的参数值 |'
- en: '| [`LAG()`](window-function-descriptions.html#function_lag) | Value of argument
    from row lagging current row within partition |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`LAG()`](window-function-descriptions.html#function_lag) | 分区内滞后于当前行的行的参数值
    |'
- en: '| [`LAST_VALUE()`](window-function-descriptions.html#function_last-value) |
    Value of argument from last row of window frame |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`LAST_VALUE()`](window-function-descriptions.html#function_last-value) |
    窗口帧的最后一行的参数值 |'
- en: '| [`LEAD()`](window-function-descriptions.html#function_lead) | Value of argument
    from row leading current row within partition |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`LEAD()`](window-function-descriptions.html#function_lead) | 分区内领先于当前行的行的参数值
    |'
- en: '| [`NTH_VALUE()`](window-function-descriptions.html#function_nth-value) | Value
    of argument from N-th row of window frame |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`NTH_VALUE()`](window-function-descriptions.html#function_nth-value) | 窗口帧的第N行的参数值
    |'
- en: '| [`NTILE()`](window-function-descriptions.html#function_ntile) | Bucket number
    of current row within its partition. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`NTILE()`](window-function-descriptions.html#function_ntile) | 当前行在其分区内的桶编号
    |'
- en: '| [`PERCENT_RANK()`](window-function-descriptions.html#function_percent-rank)
    | Percentage rank value |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`PERCENT_RANK()`](window-function-descriptions.html#function_percent-rank)
    | 百分比排名值 |'
- en: '| [`RANK()`](window-function-descriptions.html#function_rank) | Rank of current
    row within its partition, with gaps |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`RANK()`](window-function-descriptions.html#function_rank) | 分区内当前行的排名，有间隔
    |'
- en: '| [`ROW_NUMBER()`](window-function-descriptions.html#function_row-number) |
    Number of current row within its partition |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`ROW_NUMBER()`](window-function-descriptions.html#function_row-number) |
    当前行在其分区内的编号 |'
- en: '| Name | Description |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: In the following function descriptions, *`over_clause`* represents the `OVER`
    clause, described in [Section 14.20.2, “Window Function Concepts and Syntax”](window-functions-usage.html
    "14.20.2 Window Function Concepts and Syntax"). Some window functions permit a
    *`null_treatment`* clause that specifies how to handle `NULL` values when calculating
    results. This clause is optional. It is part of the SQL standard, but the MySQL
    implementation permits only `RESPECT NULLS` (which is also the default). This
    means that `NULL` values are considered when calculating results. `IGNORE NULLS`
    is parsed, but produces an error.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下函数描述中，*`over_clause`*代表`OVER`子句，详见[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html
    "14.20.2 窗口函数概念和语法")。一些窗口函数允许使用*`null_treatment`*子句，指定在计算结果时如何处理`NULL`值。此子句是可选的。它是SQL标准的一部分，但MySQL实现仅允许`RESPECT
    NULLS`（这也是默认值）。这意味着在计算结果时会考虑`NULL`值。`IGNORE NULLS`被解析，但会产生错误。
- en: '[`CUME_DIST()`](window-function-descriptions.html#function_cume-dist) *`over_clause`*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CUME_DIST()`](window-function-descriptions.html#function_cume-dist) *`over_clause`*'
- en: Returns the cumulative distribution of a value within a group of values; that
    is, the percentage of partition values less than or equal to the value in the
    current row. This represents the number of rows preceding or peer with the current
    row in the window ordering of the window partition divided by the total number
    of rows in the window partition. Return values range from 0 to 1.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回值在组内值的累积分布；即，在当前行中窗口排序的窗口分区中小于或等于当前行中值的分区值的百分比。这表示在窗口分区中在当前行之前或与当前行并列的行数除以窗口分区中的总行数。返回值范围从
    0 到 1。
- en: This function should be used with `ORDER BY` to sort partition rows into the
    desired order. Without `ORDER BY`, all rows are peers and have value *`N`*/*`N`*
    = 1, where *`N`* is the partition size.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数应与 `ORDER BY` 一起使用，以将分区行按所需顺序排序。没有 `ORDER BY`，所有行都是对等的，并且具有值 *`N`*/*`N`*
    = 1，其中 *`N`* 是分区大小。
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax").'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`* 如 [第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")
    中所述。'
- en: 'The following query shows, for the set of values in the `val` column, the `CUME_DIST()`
    value for each row, as well as the percentage rank value returned by the similar
    `PERCENT_RANK()` function. For reference, the query also displays row numbers
    using [`ROW_NUMBER()`](window-function-descriptions.html#function_row-number):'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下查询显示了 `val` 列中值集合的每行的 `CUME_DIST()` 值，以及类似的 `PERCENT_RANK()` 函数返回的百分比排名值。供参考，查询还使用
    [`ROW_NUMBER()`](window-function-descriptions.html#function_row-number) 显示行号：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`DENSE_RANK()`](window-function-descriptions.html#function_dense-rank) *`over_clause`*'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DENSE_RANK()`](window-function-descriptions.html#function_dense-rank) *`over_clause`*'
- en: Returns the rank of the current row within its partition, without gaps. Peers
    are considered ties and receive the same rank. This function assigns consecutive
    ranks to peer groups; the result is that groups of size greater than one do not
    produce noncontiguous rank numbers. For an example, see the [`RANK()`](window-function-descriptions.html#function_rank)
    function description.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回当前行在其分区内的排名，没有间隔。对等行被视为并列，并获得相同的排名。此函数为对等组分配连续的排名；结果是大小大于一的组不会产生不连续的排名数字。有关示例，请参阅
    [`RANK()`](window-function-descriptions.html#function_rank) 函数描述。
- en: This function should be used with `ORDER BY` to sort partition rows into the
    desired order. Without `ORDER BY`, all rows are peers.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数应与 `ORDER BY` 一起使用，以将分区行按所需顺序排序。没有 `ORDER BY`，所有行都是对等的。
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax").'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`* 如 [第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")
    中所述。'
- en: '[`FIRST_VALUE(*`expr`*)`](window-function-descriptions.html#function_first-value)
    [*`null_treatment`*] *`over_clause`*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FIRST_VALUE(*`expr`*)`](window-function-descriptions.html#function_first-value)
    [*`null_treatment`*] *`over_clause`*'
- en: Returns the value of *`expr`* from the first row of the window frame.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回窗口帧的第一行中 *`expr`* 的值。
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax"). *`null_treatment`* is as described in the section introduction.'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`* 如 [第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")
    中所述。*`null_treatment`* 如章节介绍中所述。'
- en: 'The following query demonstrates [`FIRST_VALUE()`](window-function-descriptions.html#function_first-value),
    [`LAST_VALUE()`](window-function-descriptions.html#function_last-value), and two
    instances of [`NTH_VALUE()`](window-function-descriptions.html#function_nth-value):'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下查询演示了 [`FIRST_VALUE()`](window-function-descriptions.html#function_first-value)、[`LAST_VALUE()`](window-function-descriptions.html#function_last-value)
    和两个 [`NTH_VALUE()`](window-function-descriptions.html#function_nth-value) 的实例：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Each function uses the rows in the current frame, which, per the window definition
    shown, extends from the first partition row to the current row. For the [`NTH_VALUE()`](window-function-descriptions.html#function_nth-value)
    calls, the current frame does not always include the requested row; in such cases,
    the return value is `NULL`.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个函数使用当前帧中的行，根据所示的窗口定义，该帧从第一个分区行延伸到当前行。对于 [`NTH_VALUE()`](window-function-descriptions.html#function_nth-value)
    调用，当前帧并不总是包括请求的行；在这种情况下，返回值为 `NULL`。
- en: '[`LAG(*`expr`* [, *`N`*[, *`default`*]])`](window-function-descriptions.html#function_lag)
    [*`null_treatment`*] *`over_clause`*'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LAG(*`expr`* [, *`N`*[, *`default`*]])`](window-function-descriptions.html#function_lag)
    [*`null_treatment`*] *`over_clause`*'
- en: Returns the value of *`expr`* from the row that lags (precedes) the current
    row by *`N`* rows within its partition. If there is no such row, the return value
    is *`default`*. For example, if *`N`* is 3, the return value is *`default`* for
    the first three rows. If *`N`* or *`default`* are missing, the defaults are 1
    and `NULL`, respectively.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回在其分区内当前行之前*`N`*行的行的*`expr`*的值。如果没有这样的行，则返回值为*`default`*。例如，如果*`N`*为3，则前三行的返回值为*`default`*。如果*`N`*或*`default`*缺失，则默认值分别为1和`NULL`。
- en: '*`N`* must be a literal nonnegative integer. If *`N`* is 0, *`expr`* is evaluated
    for the current row.'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`N`*必须是一个字面非负整数。如果*`N`*为0，则为当前行评估*`expr`*。'
- en: 'Beginning with MySQL 8.0.22, *`N`* cannot be `NULL`. In addition, it must now
    be an integer in the range `0` to `2^(63)`, inclusive, in any of the following
    forms:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.22开始，*`N`* 不能为`NULL`。此外，它现在必须是范围在`0`到`2^(63)`之间的整数，包括以下任一形式：
- en: an unsigned integer constant literal
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无符号整数常量字面值
- en: a positional parameter marker (`?`)
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个位置参数标记（`?`）
- en: a user-defined variable
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用户定义的变量
- en: a local variable in a stored routine
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储过程中的局部变量
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax"). *`null_treatment`* is as described in the section introduction.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`* 如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")所述。*`null_treatment`*
    如章节介绍所述。'
- en: '[`LAG()`](window-function-descriptions.html#function_lag) (and the similar
    [`LEAD()`](window-function-descriptions.html#function_lead) function) are often
    used to compute differences between rows. The following query shows a set of time-ordered
    observations and, for each one, the [`LAG()`](window-function-descriptions.html#function_lag)
    and [`LEAD()`](window-function-descriptions.html#function_lead) values from the
    adjoining rows, as well as the differences between the current and adjoining rows:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`LAG()`](window-function-descriptions.html#function_lag)（以及类似的[`LEAD()`](window-function-descriptions.html#function_lead)函数）经常用于计算行之间的差异。以下查询显示了一组按时间排序的观测值，以及每个观测值的[`LAG()`](window-function-descriptions.html#function_lag)和[`LEAD()`](window-function-descriptions.html#function_lead)值，以及当前行与相邻行之间的差异：'
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the example, the [`LAG()`](window-function-descriptions.html#function_lag)
    and [`LEAD()`](window-function-descriptions.html#function_lead) calls use the
    default *`N`* and *`default`* values of 1 and `NULL`, respectively.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在示例中，[`LAG()`](window-function-descriptions.html#function_lag)和[`LEAD()`](window-function-descriptions.html#function_lead)调用使用默认的*`N`*和*`default`*值分别为1和`NULL`。
- en: 'The first row shows what happens when there is no previous row for [`LAG()`](window-function-descriptions.html#function_lag):
    The function returns the *`default`* value (in this case, `NULL`). The last row
    shows the same thing when there is no next row for [`LEAD()`](window-function-descriptions.html#function_lead).'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一行显示了当[`LAG()`](window-function-descriptions.html#function_lag)没有前一行时会发生什么：函数返回*`default`*值（在本例中为`NULL`）。最后一行显示了当[`LEAD()`](window-function-descriptions.html#function_lead)没有下一行时会发生的情况。
- en: '[`LAG()`](window-function-descriptions.html#function_lag) and [`LEAD()`](window-function-descriptions.html#function_lead)
    also serve to compute sums rather than differences. Consider this data set, which
    contains the first few numbers of the Fibonacci series:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`LAG()`](window-function-descriptions.html#function_lag)和[`LEAD()`](window-function-descriptions.html#function_lead)还用于计算和而不是差。考虑这个数据集，其中包含斐波那契数列的前几个数字：'
- en: '[PRE3]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following query shows the [`LAG()`](window-function-descriptions.html#function_lag)
    and [`LEAD()`](window-function-descriptions.html#function_lead) values for the
    rows adjacent to the current row. It also uses those functions to add to the current
    row value the values from the preceding and following rows. The effect is to generate
    the next number in the Fibonacci series, and the next number after that:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下查询显示了与当前行相邻的行的[`LAG()`](window-function-descriptions.html#function_lag)和[`LEAD()`](window-function-descriptions.html#function_lead)值。它还使用这些函数将前一行和后一行的值添加到当前行值中。效果是生成斐波那契数列中的下一个数字，以及其后一个数字：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: One way to generate the initial set of Fibonacci numbers is to use a recursive
    common table expression. For an example, see [Fibonacci Series Generation](with.html#common-table-expressions-recursive-fibonacci-series
    "Fibonacci Series Generation").
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成斐波那契数列的初始集合的一种方法是使用递归公共表达式。有关示例，请参见[Fibonacci Series Generation](with.html#common-table-expressions-recursive-fibonacci-series
    "Fibonacci Series Generation")。
- en: Beginning with MySQL 8.0.22, you cannot use a negative value for the rows argument
    of this function.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.22开始，您不能在此函数的行参数中使用负值。
- en: '[`LAST_VALUE(*`expr`*)`](window-function-descriptions.html#function_last-value)
    [*`null_treatment`*] *`over_clause`*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LAST_VALUE(*`expr`*)`](window-function-descriptions.html#function_last-value)
    [*`null_treatment`*] *`over_clause`*'
- en: Returns the value of *`expr`* from the last row of the window frame.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回窗口帧的最后一行的*`expr`*的值。
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax"). *`null_treatment`* is as described in the section introduction.'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")中所述。*`null_treatment`*如本节介绍中所述。'
- en: For an example, see the [`FIRST_VALUE()`](window-function-descriptions.html#function_first-value)
    function description.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关示例，请参见[`FIRST_VALUE()`](window-function-descriptions.html#function_first-value)函数描述。
- en: '[`LEAD(*`expr`* [, *`N`*[, *`default`*]])`](window-function-descriptions.html#function_lead)
    [*`null_treatment`*] *`over_clause`*'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LEAD(*`expr`* [, *`N`*[, *`default`*]])`](window-function-descriptions.html#function_lead)
    [*`null_treatment`*] *`over_clause`*'
- en: Returns the value of *`expr`* from the row that leads (follows) the current
    row by *`N`* rows within its partition. If there is no such row, the return value
    is *`default`*. For example, if *`N`* is 3, the return value is *`default`* for
    the last three rows. If *`N`* or *`default`* are missing, the defaults are 1 and
    `NULL`, respectively.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回在其分区内跟随当前行的第*N*行的*`expr`*的值。如果没有这样的行，则返回值为*`default`*。例如，如果*N*为3，则最后三行的返回值为*`default`*。如果*N*或*`default`*缺失，则默认值分别为1和`NULL`。
- en: '*`N`* must be a literal nonnegative integer. If *`N`* is 0, *`expr`* is evaluated
    for the current row.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`N`*必须是一个字面非负整数。如果*N*为0，则为当前行评估*`expr`*。'
- en: 'Beginning with MySQL 8.0.22, *`N`* cannot be `NULL`. In addition, it must now
    be an integer in the range `0` to `2^(63)`, inclusive, in any of the following
    forms:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.22开始，*`N`*不能为`NULL`。此外，现在它必须是范围为`0`到`2^(63)`（包括）的整数，可以采用以下任何形式：
- en: an unsigned integer constant literal
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无符号整数常量字面值
- en: a positional parameter marker (`?`)
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个位置参数标记（`?`）
- en: a user-defined variable
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义变量
- en: a local variable in a stored routine
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储过程中的局部变量
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax"). *`null_treatment`* is as described in the section introduction.'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")中所述。*`null_treatment`*如本节介绍中所述。'
- en: For an example, see the [`LAG()`](window-function-descriptions.html#function_lag)
    function description.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关示例，请参见[`LAG()`](window-function-descriptions.html#function_lag)函数描述。
- en: In MySQL 8.0.22 and later, use of a negative value for the rows argument of
    this function is not permitted.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.22及更高版本中，不允许在此函数的行参数中使用负值。
- en: '[`NTH_VALUE(*`expr`*, *`N`*)`](window-function-descriptions.html#function_nth-value)
    [*`from_first_last`*] [*`null_treatment`*] *`over_clause`*'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NTH_VALUE(*`expr`*, *`N`*)`](window-function-descriptions.html#function_nth-value)
    [*`from_first_last`*] [*`null_treatment`*] *`over_clause`*'
- en: Returns the value of *`expr`* from the *`N`*-th row of the window frame. If
    there is no such row, the return value is `NULL`.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回窗口帧的第*N*行的*`expr`*的值。如果没有这样的行，则返回值为`NULL`。
- en: '*`N`* must be a literal positive integer.'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`N`*必须是一个字面正整数。'
- en: '*`from_first_last`* is part of the SQL standard, but the MySQL implementation
    permits only `FROM FIRST` (which is also the default). This means that calculations
    begin at the first row of the window. `FROM LAST` is parsed, but produces an error.
    To obtain the same effect as `FROM LAST` (begin calculations at the last row of
    the window), use `ORDER BY` to sort in reverse order.'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`from_first_last`*是SQL标准的一部分，但MySQL实现仅允许`FROM FIRST`（这也是默认值）。这意味着计算从窗口的第一行开始。`FROM
    LAST`被解析，但会产生错误。要获得与`FROM LAST`相同的效果（从窗口的最后一行开始计算），请使用`ORDER BY`以相反顺序排序。'
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax"). *`null_treatment`* is as described in the section introduction.'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")中描述的那样。*`null_treatment`*如章节介绍中描述的那样。'
- en: For an example, see the [`FIRST_VALUE()`](window-function-descriptions.html#function_first-value)
    function description.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关示例，请参阅[`FIRST_VALUE()`](window-function-descriptions.html#function_first-value)函数描述。
- en: In MySQL 8.0.22 and later, you cannot use `NULL` for the row argument of this
    function.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.22及更高版本中，您不能将`NULL`用作此函数的行参数。
- en: '[`NTILE(*`N`*)`](window-function-descriptions.html#function_ntile) *`over_clause`*'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NTILE(*`N`*)`](window-function-descriptions.html#function_ntile) *`over_clause`*'
- en: Divides a partition into *`N`* groups (buckets), assigns each row in the partition
    its bucket number, and returns the bucket number of the current row within its
    partition. For example, if *`N`* is 4, `NTILE()` divides rows into four buckets.
    If *`N`* is 100, `NTILE()` divides rows into 100 buckets.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将分区分成*`N`*组（桶），为分区中的每行分配其桶号，并返回当前行在其分区中的桶号。例如，如果*`N`*为4，`NTILE()`将行分成四个桶。如果*`N`*为100，`NTILE()`将行分成100个桶。
- en: '*`N`* must be a literal positive integer. Bucket number return values range
    from 1 to *`N`*.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`N`*必须是一个字面正整数。桶号返回值范围从1到*`N`*。'
- en: 'Beginning with MySQL 8.0.22, *`N`* cannot be `NULL`, and must be an integer
    in the range `0` to `2^(63)`, inclusive, in any of the following forms:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.22开始，*`N`*不能为`NULL`，必须是范围在`0`到`2^(63)`之间的整数，可以采用以下任何形式：
- en: an unsigned integer constant literal
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无符号整数常量字面值
- en: a positional parameter marker (`?`)
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个位置参数标记（`?`）
- en: a user-defined variable
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用户定义的变量
- en: a local variable in a stored routine
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储过程中的局部变量
- en: This function should be used with `ORDER BY` to sort partition rows into the
    desired order.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数应与`ORDER BY`一起使用，以将分区行按所需顺序排序。
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax").'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")中描述的那样。'
- en: 'The following query shows, for the set of values in the `val` column, the percentile
    values resulting from dividing the rows into two or four groups. For reference,
    the query also displays row numbers using [`ROW_NUMBER()`](window-function-descriptions.html#function_row-number):'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下查询显示了`val`列中值集合的百分位值，将行分成两组或四组。为了参考，查询还使用[`ROW_NUMBER()`](window-function-descriptions.html#function_row-number)显示行号：
- en: '[PRE5]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Beginning with MySQL 8.0.22, the construct `NTILE(NULL)` is no longer permitted.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.22开始，不再允许使用构造`NTILE(NULL)`。
- en: '[`PERCENT_RANK()`](window-function-descriptions.html#function_percent-rank)
    *`over_clause`*'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PERCENT_RANK()`](window-function-descriptions.html#function_percent-rank)
    *`over_clause`*'
- en: 'Returns the percentage of partition values less than the value in the current
    row, excluding the highest value. Return values range from 0 to 1 and represent
    the row relative rank, calculated as the result of this formula, where *`rank`*
    is the row rank and *`rows`* is the number of partition rows:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回小于当前行值的分区值的百分比，不包括最高值。返回值范围从0到1，表示行相对排名，计算公式的结果如下，其中*`rank`*是行排名，*`rows`*是分区行数：
- en: '[PRE6]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This function should be used with `ORDER BY` to sort partition rows into the
    desired order. Without `ORDER BY`, all rows are peers.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数应与`ORDER BY`一起使用，以将分区行按所需顺序排序。没有`ORDER BY`，所有行都是同级。
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax").'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`*如[第14.20.2节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")中描述的那样。'
- en: For an example, see the [`CUME_DIST()`](window-function-descriptions.html#function_cume-dist)
    function description.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关示例，请参阅[`CUME_DIST()`](window-function-descriptions.html#function_cume-dist)函数描述。
- en: '[`RANK()`](window-function-descriptions.html#function_rank) *`over_clause`*'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RANK()`](window-function-descriptions.html#function_rank) *`over_clause`*'
- en: Returns the rank of the current row within its partition, with gaps. Peers are
    considered ties and receive the same rank. This function does not assign consecutive
    ranks to peer groups if groups of size greater than one exist; the result is noncontiguous
    rank numbers.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回当前行在其分区中的排名，带有间隙。同级被视为并列并获得相同的排名。如果存在大于一的同级组，则此函数不会为同级组分配连续的排名；结果是不连续的排名数字。
- en: This function should be used with `ORDER BY` to sort partition rows into the
    desired order. Without `ORDER BY`, all rows are peers.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数应与 `ORDER BY` 一起使用，以将分区行按所需顺序排序。没有 `ORDER BY`，所有行都是对等值。
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax").'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`* 如 [第 14.20.2 节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")
    中所述。'
- en: 'The following query shows the difference between [`RANK()`](window-function-descriptions.html#function_rank),
    which produces ranks with gaps, and [`DENSE_RANK()`](window-function-descriptions.html#function_dense-rank),
    which produces ranks without gaps. The query shows rank values for each member
    of a set of values in the `val` column, which contains some duplicates. [`RANK()`](window-function-descriptions.html#function_rank)
    assigns peers (the duplicates) the same rank value, and the next greater value
    has a rank higher by the number of peers minus one. [`DENSE_RANK()`](window-function-descriptions.html#function_dense-rank)
    also assigns peers the same rank value, but the next higher value has a rank one
    greater. For reference, the query also displays row numbers using [`ROW_NUMBER()`](window-function-descriptions.html#function_row-number):'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的查询展示了 [`RANK()`](window-function-descriptions.html#function_rank) 和 [`DENSE_RANK()`](window-function-descriptions.html#function_dense-rank)
    之间的差异。前者生成带有间隔的排名，后者生成没有间隔的排名。该查询显示了 `val` 列中一组值的排名，其中包含一些重复值。[`RANK()`](window-function-descriptions.html#function_rank)
    为对等值（重复值）分配相同的排名，下一个更大的值的排名比对等值的数量减一高。[`DENSE_RANK()`](window-function-descriptions.html#function_dense-rank)
    也为对等值分配相同的排名，但下一个更大的值的排名比前一个高一。为了参考，该查询还使用 [`ROW_NUMBER()`](window-function-descriptions.html#function_row-number)
    显示行号：
- en: '[PRE7]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[`ROW_NUMBER()`](window-function-descriptions.html#function_row-number) *`over_clause`*'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ROW_NUMBER()`](window-function-descriptions.html#function_row-number) *`over_clause`*'
- en: Returns the number of the current row within its partition. Rows numbers range
    from 1 to the number of partition rows.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回当前行在其分区内的编号。行号从 1 开始，到分区行数结束。
- en: '`ORDER BY` affects the order in which rows are numbered. Without `ORDER BY`,
    row numbering is nondeterministic.'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ORDER BY` 影响编号行的顺序。没有 `ORDER BY`，行编号是不确定的。'
- en: '[`ROW_NUMBER()`](window-function-descriptions.html#function_row-number) assigns
    peers different row numbers. To assign peers the same value, use [`RANK()`](window-function-descriptions.html#function_rank)
    or [`DENSE_RANK()`](window-function-descriptions.html#function_dense-rank). For
    an example, see the [`RANK()`](window-function-descriptions.html#function_rank)
    function description.'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ROW_NUMBER()`](window-function-descriptions.html#function_row-number) 为对等值分配不同的行号。要为对等值分配相同的值，请使用
    [`RANK()`](window-function-descriptions.html#function_rank) 或 [`DENSE_RANK()`](window-function-descriptions.html#function_dense-rank)。有关示例，请参阅
    [`RANK()`](window-function-descriptions.html#function_rank) 函数描述。'
- en: '*`over_clause`* is as described in [Section 14.20.2, “Window Function Concepts
    and Syntax”](window-functions-usage.html "14.20.2 Window Function Concepts and
    Syntax").'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`over_clause`* 如 [第 14.20.2 节，“窗口函数概念和语法”](window-functions-usage.html "14.20.2 窗口函数概念和语法")
    中所述。'
