- en: 'A.11 MySQL 8.0 FAQ: MySQL Chinese, Japanese, and Korean Character Sets'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A.11 MySQL 8.0 FAQ：MySQL 中文、日文和韩文字符集
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/faqs-cjk.html](https://dev.mysql.com/doc/refman/8.0/en/faqs-cjk.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/faqs-cjk.html](https://dev.mysql.com/doc/refman/8.0/en/faqs-cjk.html)
- en: This set of Frequently Asked Questions derives from the experience of MySQL's
    Support and Development groups in handling many inquiries about CJK (Chinese-Japanese-Korean)
    issues.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这组常见问题来源于 MySQL 支持和开发团队处理许多关于 CJK（中文-日文-韩文）问题的经验。
- en: A.11.1\. [What CJK character sets are available in MySQL?](faqs-cjk.html#faq-cjk-what-cjk-avail)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.1\. [MySQL 中有哪些 CJK 字符集可用？](faqs-cjk.html#faq-cjk-what-cjk-avail)
- en: A.11.2\. [I have inserted CJK characters into my table. Why does SELECT display
    them as “?” characters?](faqs-cjk.html#faq-cjk-why-cjk-question-marks)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.2\. [我已经将 CJK 字符插入到我的表中。为什么 SELECT 显示它们为“?”字符？](faqs-cjk.html#faq-cjk-why-cjk-question-marks)
- en: A.11.3\. [What problems should I be aware of when working with the Big5 Chinese
    character set?](faqs-cjk.html#faq-cjk-what-problems-big5)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.3\. [在使用 Big5 中文字符集时应注意哪些问题？](faqs-cjk.html#faq-cjk-what-problems-big5)
- en: A.11.4\. [Why do Japanese character set conversions fail?](faqs-cjk.html#faq-cjk-what-japanese-chars-fail)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.4\. [为什么日文字符集转换失败？](faqs-cjk.html#faq-cjk-what-japanese-chars-fail)
- en: A.11.5\. [What should I do if I want to convert SJIS 81CA to cp932?](faqs-cjk.html#faq-cjk-how-convert-81ca-cp932)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.5\. [如果我想将 SJIS 81CA 转换为 cp932，我该怎么办？](faqs-cjk.html#faq-cjk-how-convert-81ca-cp932)
- en: A.11.6\. [How does MySQL represent the Yen (¥) sign?](faqs-cjk.html#faq-cjk-how-represent-yen)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.6\. [MySQL 如何表示日元（¥）符号？](faqs-cjk.html#faq-cjk-how-represent-yen)
- en: A.11.7\. [Of what issues should I be aware when working with Korean character
    sets in MySQL?](faqs-cjk.html#faq-cjk-what-problems-korean)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.7\. [在 MySQL 中使用韩文字符集时应注意哪些问题？](faqs-cjk.html#faq-cjk-what-problems-korean)
- en: A.11.8\. [Why do I get Incorrect string value error messages?](faqs-cjk.html#faq-cjk-why-incorrect-string-value)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.8\. [为什么会出现“Incorrect string value”错误消息？](faqs-cjk.html#faq-cjk-why-incorrect-string-value)
- en: A.11.9\. [Why does my GUI front end or browser display CJK characters incorrectly
    in my application using Access, PHP, or another API?](faqs-cjk.html#faq-cjk-why-gui-not-display-cjk)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.9\. [为什么我的 GUI 前端或浏览器在使用 Access、PHP 或其他 API 的应用程序中不正确显示 CJK 字符？](faqs-cjk.html#faq-cjk-why-gui-not-display-cjk)
- en: A.11.10\. [I've upgraded to MySQL 8.0\. How can I revert to behavior like that
    in MySQL 4.0 with regard to character sets?](faqs-cjk.html#faq-cjk-how-use-4-0-charset)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.10\. [我已升级到 MySQL 8.0。如何恢复到 MySQL 4.0 中关于字符集的行为？](faqs-cjk.html#faq-cjk-how-use-4-0-charset)
- en: A.11.11\. [Why do some LIKE and FULLTEXT searches with CJK characters fail?](faqs-cjk.html#faq-cjk-why-cjk-fail-searches)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.11\. [为什么一些带有 CJK 字符的 LIKE 和 FULLTEXT 搜索失败？](faqs-cjk.html#faq-cjk-why-cjk-fail-searches)
- en: A.11.12\. [How do I know whether character X is available in all character sets?](faqs-cjk.html#faq-cjk-how-know-avail-characters)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.12\. [如何知道字符 X 是否在所有字符集中都可用？](faqs-cjk.html#faq-cjk-how-know-avail-characters)
- en: A.11.13\. [Why do CJK strings sort incorrectly in Unicode? (I)](faqs-cjk.html#faq-cjk-how-cjk-sort-unicode-1)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.13\. [为什么在 Unicode 中 CJK 字符串排序不正确？（I）](faqs-cjk.html#faq-cjk-how-cjk-sort-unicode-1)
- en: A.11.14\. [Why do CJK strings sort incorrectly in Unicode? (II)](faqs-cjk.html#faq-cjk-how-cjk-sort-unicode-2)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.14\. [为什么在 Unicode 中 CJK 字符串排序不正确？（II）](faqs-cjk.html#faq-cjk-how-cjk-sort-unicode-2)
- en: A.11.15\. [Why are my supplementary characters rejected by MySQL?](faqs-cjk.html#faq-cjk-why-supplement-char-rejected)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.15\. [为什么我的补充字符被 MySQL 拒绝？](faqs-cjk.html#faq-cjk-why-supplement-char-rejected)
- en: A.11.16\. [Should “CJK” be “CJKV”?](faqs-cjk.html#faq-cjk-why-cjk-not-cjkv)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.16\. [“CJK” 应该是“CJKV”吗？](faqs-cjk.html#faq-cjk-why-cjk-not-cjkv)
- en: A.11.17\. [Does MySQL permit CJK characters to be used in database and table
    names?](faqs-cjk.html#faq-cjk-how-cjk-db-table-names)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.17\. [MySQL 允许在数据库和表名中使用 CJK 字符吗？](faqs-cjk.html#faq-cjk-how-cjk-db-table-names)
- en: A.11.18\. [Where can I find translations of the MySQL Manual into Chinese, Japanese,
    and Korean?](faqs-cjk.html#faq-cjk-where-doc-translations)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.18\. [在哪里可以找到 MySQL 手册的中文、日文和韩文翻译？](faqs-cjk.html#faq-cjk-where-doc-translations)
- en: A.11.19\. [Where can I get help with CJK and related issues in MySQL?](faqs-cjk.html#faq-cjk-help-with-cjk)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: A.11.19\. [在 MySQL 中如何获取有关 CJK 和相关问题的帮助？](faqs-cjk.html#faq-cjk-help-with-cjk)
- en: '| **A.11.1.** | What CJK character sets are available in MySQL? |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.1.** | MySQL 中有哪些 CJK 字符集可用？ |'
- en: '|  | The list of CJK character sets may vary depending on your MySQL version.
    For example, the `gb18030` character set is not supported prior to MySQL 5.7.4\.
    However, since the name of the applicable language appears in the `DESCRIPTION`
    column for every entry in the [`INFORMATION_SCHEMA.CHARACTER_SETS`](information-schema-character-sets-table.html
    "28.3.4 The INFORMATION_SCHEMA CHARACTER_SETS Table") table, you can obtain a
    current list of all the non-Unicode CJK character sets using this query:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | CJK字符集的列表可能会根据您的MySQL版本而有所不同。例如，`gb18030`字符集在MySQL 5.7.4之前不受支持。然而，由于适用语言的名称出现在[`INFORMATION_SCHEMA.CHARACTER_SETS`](information-schema-character-sets-table.html
    "28.3.4 INFORMATION_SCHEMA CHARACTER_SETS表")表中的`DESCRIPTION`列中，您可以使用此查询获取所有非Unicode
    CJK字符集的当前列表：'
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '(For more information, see [Section 28.3.4, “The INFORMATION_SCHEMA CHARACTER_SETS
    Table”](information-schema-character-sets-table.html "28.3.4 The INFORMATION_SCHEMA
    CHARACTER_SETS Table").)MySQL supports three variants of the GB (*Guojia Biaozhun*,
    or *National Standard*, or *Simplified Chinese*) character sets which are official
    in the People''s Republic of China: `gb2312`, `gbk`, and (as of MySQL 5.7.4) `gb18030`.Sometimes
    people try to insert `gbk` characters into `gb2312`, and it works most of the
    time because `gbk` is a superset of `gb2312`. But eventually they try to insert
    a rarer Chinese character and it does not work. (For an example, see Bug #16072).Here,
    we try to clarify exactly what characters are legitimate in `gb2312` or `gbk`,
    with reference to the official documents. Please check these references before
    reporting `gb2312` or `gbk` bugs:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '（更多信息，请参阅[第28.3.4节，“INFORMATION_SCHEMA CHARACTER_SETS表”](information-schema-character-sets-table.html
    "28.3.4 INFORMATION_SCHEMA CHARACTER_SETS表")。）MySQL支持三种GB（*国家标准*或*简体中文*）字符集的变体，这在中华人民共和国是官方的：`gb2312`、`gbk`和（自MySQL
    5.7.4起）`gb18030`。有时人们尝试将`gbk`字符插入`gb2312`，大多数情况下都可以成功，因为`gbk`是`gb2312`的超集。但最终他们尝试插入一个更罕见的中文字符，却无法成功。（例如，请参阅Bug
    #16072）。在这里，我们试图明确`gb2312`或`gbk`中哪些字符是合法的，参考官方文件。请在报告`gb2312`或`gbk`错误之前检查这些参考文献：'
- en: The MySQL `gbk` character set is in reality “Microsoft code page 936”. This
    differs from the official `gbk` for characters `A1A4` (middle dot), `A1AA` (em
    dash), `A6E0-A6F5`, and `A8BB-A8C0`.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL的`gbk`字符集实际上是“Microsoft代码页936”。这与官方的`gbk`有所不同，对于字符`A1A4`（中点）、`A1AA`（破折号）、`A6E0-A6F5`和`A8BB-A8C0`。
- en: For a listing of `gbk`/Unicode mappings, see [http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP936.TXT](http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP936.TXT).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看`gbk`/Unicode映射列表，请参阅[http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP936.TXT](http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP936.TXT)。
- en: 'It is also possible to store CJK characters in Unicode character sets, although
    the available collations may not sort characters quite as you expect:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以在Unicode字符集中存储CJK字符，尽管可用的排序规则可能不会按您的预期对字符进行排序：
- en: The `utf8` and `ucs2` character sets support the characters from Unicode Basic
    Multilingual Plane (BMP). These characters have code point values between `U+0000`
    and `U+FFFF`.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8`和`ucs2`字符集支持Unicode基本多语言平面（BMP）中的字符。这些字符的代码点值介于`U+0000`和`U+FFFF`之间。'
- en: The `utf8mb4`, `utf16`, `utf16le`, and `utf32` character sets support BMP characters,
    as well as supplementary characters that lie outside the BMP. Supplementary characters
    have code point values between `U+10000` and `U+10FFFF`.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8mb4`、`utf16`、`utf16le`和`utf32`字符集支持BMP字符，以及位于BMP之外的补充字符。补充字符的代码点值介于`U+10000`和`U+10FFFF`之间。'
- en: 'The collation used for a Unicode character set determines the ability to sort
    (that is, distinguish) characters in the set:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 用于Unicode字符集的排序规则决定了对集合中的字符进行排序（即区分）的能力：
- en: Collations based on Unicode Collation Algorithm (UCA) 4.0.0 distinguish only
    BMP characters.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Unicode Collation Algorithm（UCA）4.0.0的排序规则只区分BMP字符。
- en: Collations based on UCA 5.2.0 or 9.0.0 distinguish BMP and supplementary characters.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于UCA 5.2.0或9.0.0的排序规则区分BMP和补充字符。
- en: Non-UCA collations may not distinguish all Unicode characters. For example,
    the `utf8mb4` default collation is `utf8mb4_general_ci`, which distinguishes only
    BMP characters.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非UCA排序规则可能无法区分所有Unicode字符。例如，MySQL的`utf8mb4`默认排序规则是`utf8mb4_general_ci`，只区分BMP字符。
- en: Moreover, distinguishing characters is not the same as ordering them per the
    conventions of a given CJK language. Currently, MySQL has only one CJK-specific
    UCA collation, `gb18030_unicode_520_ci` (which requires use of the non-Unicode
    `gb18030` character set).For information about Unicode collations and their differentiating
    properties, including collation properties for supplementary characters, see [Section 12.10.1,
    “Unicode Character Sets”](charset-unicode-sets.html "12.10.1 Unicode Character
    Sets"). |
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，区分字符并不等同于按照给定CJK语言的约定对其进行排序。目前，MySQL只有一个CJK特定的UCA排序规则，即`gb18030_unicode_520_ci`（需要使用非Unicode
    `gb18030`字符集）。有关Unicode排序规则及其区分属性的信息，包括辅助字符的排序属性，请参见[第12.10.1节，“Unicode字符集”](charset-unicode-sets.html
    "12.10.1 Unicode Character Sets")。
- en: '| **A.11.2.** | I have inserted CJK characters into my table. Why does [`SELECT`](select.html
    "15.2.13 SELECT Statement") display them as “?” characters? |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.2.** | 我已经将CJK字符插入到我的表中。为什么[`SELECT`](select.html "15.2.13 SELECT
    Statement")显示它们为“?”字符？ |'
- en: '|  | This problem is usually due to a setting in MySQL that does not match
    the settings for the application program or the operating system. Here are some
    common steps for correcting these types of issues:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | 这个问题通常是由于MySQL中的设置与应用程序或操作系统的设置不匹配。以下是纠正这些问题的一些常见步骤：'
- en: '*Be certain of what MySQL version you are using*.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确保您正在使用的MySQL版本*。'
- en: Use the statement `SELECT VERSION();` to determine this.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用语句`SELECT VERSION();`来确定这一点。
- en: '*Make sure that the database is actually using the desired character set*.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确保数据库实际上正在使用所需的字符集*。'
- en: 'People often think that the client character set is always the same as either
    the server character set or the character set used for display purposes. However,
    both of these are false assumptions. You can make sure by checking the result
    of `SHOW CREATE TABLE *`tablename`*` or, better yet, by using this statement:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 人们经常认为客户端字符集总是与服务器字符集或用于显示目的的字符集相同。然而，这两者都是错误的假设。您可以通过检查`SHOW CREATE TABLE *`tablename`*`的结果或更好地使用以下语句来确保：
- en: '[PRE1]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Determine the hexadecimal value of the character or characters that are not
    being displayed correctly*.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确定未正确显示的字符或字符的十六进制值*。'
- en: 'You can obtain this information for a column *`column_name`* in the table *`table_name`*
    using the following query:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用以下查询在表*`table_name`*中获取列*`column_name`*的此信息：
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`3F` is the encoding for the `?` character; this means that `?` is the character
    actually stored in the column. This most often happens because of a problem converting
    a particular character from your client character set to the target character
    set.'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`3F`是`?`字符的编码；这意味着`?`实际上是存储在列中的字符。这通常是由于将特定字符从客户端字符集转换为目标字符集时出现问题而导致的。'
- en: '*Make sure that a round trip is possible. When you select *`literal`* (or *`_introducer
    hexadecimal-value`*), do you obtain *`literal`* as a result*?'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确保往返旅程是可能的。当您选择*`literal`*（或*`_introducer hexadecimal-value`*）时，您是否获得*`literal`*作为结果*？'
- en: 'For example, the Japanese Katakana character *Pe* (`ペ''`) exists in all CJK
    character sets, and has the code point value (hexadecimal coding) `0x30da`. To
    test a round trip for this character, use this query:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，日文片假名字符*Pe*（`ペ'`）存在于所有CJK字符集中，并且具有十六进制编码的代码点值`0x30da`。要测试此字符的往返旅程，请使用以下查询：
- en: '[PRE3]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the result is not also `ペ`, the round trip failed.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果结果不是`ペ`，则往返旅程失败。
- en: For bug reports regarding such failures, we might ask you to follow up with
    `SELECT HEX('ペ');`. Then we can determine whether the client encoding is correct.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于关于此类失败的错误报告，我们可能会要求您跟进`SELECT HEX('ペ');`。然后我们可以确定客户端编码是否正确。
- en: '*Make sure that the problem is not with the browser or other application, rather
    than with MySQL*.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确保问题不是由浏览器或其他应用程序引起的，而不是由MySQL引起的*。'
- en: Use the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client program to accomplish this task. If [**mysql**](mysql.html "6.5.1 mysql
    — The MySQL Command-Line Client") displays characters correctly but your application
    does not, your problem is probably due to system settings.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端程序来完成此任务。如果[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")正确显示字符，但您的应用程序没有显示正确，那么您的问题可能是由于系统设置引起的。
- en: 'To determine your settings, use the [`SHOW VARIABLES`](show-variables.html
    "15.7.7.41 SHOW VARIABLES Statement") statement, whose output should resemble
    what is shown here:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要确定您的设置，请使用[`SHOW VARIABLES`](show-variables.html "15.7.7.41 SHOW VARIABLES
    Statement")语句，其输出应类似于所示内容：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These are typical character-set settings for an international-oriented client
    (notice the use of `utf8` Unicode) connected to a server in the West (`latin1`
    is a West Europe character set).
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些是面向国际客户的典型字符集设置（请注意使用`utf8` Unicode）连接到西方服务器（`latin1`是西欧字符集）。
- en: Although Unicode (usually the `utf8` variant on Unix, and the `ucs2` variant
    on Windows) is preferable to Latin, it is often not what your operating system
    utilities support best. Many Windows users find that a Microsoft character set,
    such as `cp932` for Japanese Windows, is suitable.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管Unicode（通常在Unix上是`utf8`变体，在Windows上是`ucs2`变体）优于Latin，但通常不是您的操作系统实用程序最好支持的。许多Windows用户发现，例如对于日本Windows，使用Microsoft字符集，如`cp932`，是合适的。
- en: 'If you cannot control the server settings, and you have no idea what setting
    your underlying computer uses, try changing to a common character set for the
    country that you''re in (`euckr` = Korea; `gb18030`, `gb2312` or `gbk` = People''s
    Republic of China; `big5` = Taiwan; `sjis`, `ujis`, `cp932`, or `eucjpms` = Japan;
    `ucs2` or `utf8` = anywhere). Usually it is necessary to change only the client
    and connection and results settings. The [`SET NAMES`](set-names.html "15.7.6.3 SET
    NAMES Statement"). statement changes all three at once. For example:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您无法控制服务器设置，并且不知道底层计算机使用的设置，请尝试切换到您所在国家的常见字符集（`euckr` = 韩国；`gb18030`、`gb2312`或`gbk`
    = 中华人民共和国；`big5` = 台湾；`sjis`、`ujis`、`cp932`或`eucjpms` = 日本；`ucs2`或`utf8` = 任何地方）。通常只需要更改客户端、连接和结果设置。[`SET
    NAMES`](set-names.html "15.7.6.3 SET NAMES Statement")语句可以同时更改这三个设置。例如：
- en: '[PRE5]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the setting is correct, you can make it permanent by editing `my.cnf`
    or `my.ini`. For example you might add lines looking like these:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦设置正确，您可以通过编辑`my.cnf`或`my.ini`使其永久化。例如，您可以添加类似以下内容的行：
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It is also possible that there are issues with the API configuration setting
    being used in your application; see *Why does my GUI front end or browser not
    display CJK characters correctly...?* for more information.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可能还存在与应用程序中使用的API配置设置有关的问题；有关更多信息，请参阅*为什么我的GUI前端或浏览器无法正确显示CJK字符...？*。
- en: '|'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **A.11.3.** | What problems should I be aware of when working with the Big5
    Chinese character set? |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.3.** | 在使用Big5中文字符集时应该注意哪些问题？ |'
- en: '|  | MySQL supports the Big5 character set which is common in Hong Kong and
    Taiwan (Republic of China). The MySQL `big5` character set is in reality Microsoft
    code page 950, which is very similar to the original `big5` character set.A feature
    request for adding `HKSCS` extensions has been filed. People who need this extension
    may find the suggested patch for Bug #13577 to be of interest. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '|  | MySQL支持在香港和台湾（中华民国）常见的Big5字符集。MySQL的`big5`字符集实际上是Microsoft的代码页950，与原始的`big5`字符集非常相似。已经提出了添加`HKSCS`扩展的功能请求。需要此扩展的人可能会对Bug＃13577的建议补丁感兴趣。
    |'
- en: '| **A.11.4.** | Why do Japanese character set conversions fail? |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.4.** | 为什么日文字符集转换会失败？ |'
- en: '|  | MySQL supports the `sjis`, `ujis`, `cp932`, and `eucjpms` character sets,
    as well as Unicode. A common need is to convert between character sets. For example,
    there might be a Unix server (typically with `sjis` or `ujis`) and a Windows client
    (typically with `cp932`).In the following conversion table, the `ucs2` column
    represents the source, and the `sjis`, `cp932`, `ujis`, and `eucjpms` columns
    represent the destinations; that is, the last 4 columns provide the hexadecimal
    result when we use [`CONVERT(ucs2)`](cast-functions.html#function_convert) or
    we assign a `ucs2` column containing the value to an `sjis`, `cp932`, `ujis`,
    or `eucjpms` column.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | MySQL支持`sjis`、`ujis`、`cp932`和`eucjpms`字符集，以及Unicode。常见的需求是在字符集之间进行转换。例如，可能有一个Unix服务器（通常使用`sjis`或`ujis`）和一个Windows客户端（通常使用`cp932`）。在下表中，`ucs2`列代表源，而`sjis`、`cp932`、`ujis`和`eucjpms`列代表目的地；也就是说，最后4列提供了当我们使用[`CONVERT(ucs2)`](cast-functions.html#function_convert)或将包含该值的`ucs2`列分配给`sjis`、`cp932`、`ujis`或`eucjpms`列时的十六进制结果。'
- en: '&#124; Character Name &#124; ucs2 &#124; sjis &#124; cp932 &#124; ujis &#124;
    eucjpms &#124;'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 字符名称 &#124; ucs2 &#124; sjis &#124; cp932 &#124; ujis &#124; eucjpms
    &#124;'
- en: '&#124; BROKEN BAR &#124; 00A6 &#124; 3F &#124; 3F &#124; 8FA2C3 &#124; 3F &#124;'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 破折号 &#124; 00A6 &#124; 3F &#124; 3F &#124; 8FA2C3 &#124; 3F &#124;'
- en: '&#124; FULLWIDTH BROKEN BAR &#124; FFE4 &#124; 3F &#124; FA55 &#124; 3F &#124;
    8FA2 &#124;'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 全角破折号 &#124; FFE4 &#124; 3F &#124; FA55 &#124; 3F &#124; 8FA2 &#124;'
- en: '&#124; YEN SIGN &#124; 00A5 &#124; 3F &#124; 3F &#124; 20 &#124; 3F &#124;'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 日元符号 &#124; 00A5 &#124; 3F &#124; 3F &#124; 20 &#124; 3F &#124;'
- en: '&#124; FULLWIDTH YEN SIGN &#124; FFE5 &#124; 818F &#124; 818F &#124; A1EF &#124;
    3F &#124;'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 全角日元符号 &#124; FFE5 &#124; 818F &#124; 818F &#124; A1EF &#124; 3F &#124;'
- en: '&#124; TILDE &#124; 007E &#124; 7E &#124; 7E &#124; 7E &#124; 7E &#124;'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 波浪线 &#124; 007E &#124; 7E &#124; 7E &#124; 7E &#124; 7E &#124;'
- en: '&#124; OVERLINE &#124; 203E &#124; 3F &#124; 3F &#124; 20 &#124; 3F &#124;'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 上划线 &#124; 203E &#124; 3F &#124; 3F &#124; 20 &#124; 3F &#124;'
- en: '&#124; HORIZONTAL BAR &#124; 2015 &#124; 815C &#124; 815C &#124; A1BD &#124;
    A1BD &#124;'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 横线 &#124; 2015 &#124; 815C &#124; 815C &#124; A1BD &#124; A1BD &#124;'
- en: '&#124; EM DASH &#124; 2014 &#124; 3F &#124; 3F &#124; 3F &#124; 3F &#124;'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 破折号 &#124; 2014 &#124; 3F &#124; 3F &#124; 3F &#124; 3F &#124;'
- en: '&#124; REVERSE SOLIDUS &#124; 005C &#124; 815F &#124; 5C &#124; 5C &#124; 5C
    &#124;'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 反斜线 &#124; 005C &#124; 815F &#124; 5C &#124; 5C &#124; 5C &#124;'
- en: '&#124; FULLWIDTH REVERSE SOLIDUS &#124; FF3C &#124; 3F &#124; 815F &#124; 3F
    &#124; A1C0 &#124;'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 全角反斜线 &#124; FF3C &#124; 3F &#124; 815F &#124; 3F &#124; A1C0 &#124;'
- en: '&#124; WAVE DASH &#124; 301C &#124; 8160 &#124; 3F &#124; A1C1 &#124; 3F &#124;'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 波浪破折号 &#124; 301C &#124; 8160 &#124; 3F &#124; A1C1 &#124; 3F &#124;'
- en: '&#124; FULLWIDTH TILDE &#124; FF5E &#124; 3F &#124; 8160 &#124; 3F &#124; A1C1
    &#124;'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 全角波浪线 &#124; FF5E &#124; 3F &#124; 8160 &#124; 3F &#124; A1C1 &#124;'
- en: '&#124; DOUBLE VERTICAL LINE &#124; 2016 &#124; 8161 &#124; 3F &#124; A1C2 &#124;
    3F &#124;'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 双竖线 &#124; 2016 &#124; 8161 &#124; 3F &#124; A1C2 &#124; 3F &#124;'
- en: '&#124; PARALLEL TO &#124; 2225 &#124; 3F &#124; 8161 &#124; 3F &#124; A1C2
    &#124;'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 平行于 &#124; 2225 &#124; 3F &#124; 8161 &#124; 3F &#124; A1C2 &#124;'
- en: '&#124; MINUS SIGN &#124; 2212 &#124; 817C &#124; 3F &#124; A1DD &#124; 3F &#124;'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 减号符号 &#124; 2212 &#124; 817C &#124; 3F &#124; A1DD &#124; 3F &#124;'
- en: '&#124; FULLWIDTH HYPHEN-MINUS &#124; FF0D &#124; 3F &#124; 817C &#124; 3F &#124;
    A1DD &#124;'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 全角连字符 &#124; FF0D &#124; 3F &#124; 817C &#124; 3F &#124; A1DD &#124;'
- en: '&#124; CENT SIGN &#124; 00A2 &#124; 8191 &#124; 3F &#124; A1F1 &#124; 3F &#124;'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 分币符号 &#124; 00A2 &#124; 8191 &#124; 3F &#124; A1F1 &#124; 3F &#124;'
- en: '&#124; FULLWIDTH CENT SIGN &#124; FFE0 &#124; 3F &#124; 8191 &#124; 3F &#124;
    A1F1 &#124;'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 全角分币符号 &#124; FFE0 &#124; 3F &#124; 8191 &#124; 3F &#124; A1F1 &#124;'
- en: '&#124; POUND SIGN &#124; 00A3 &#124; 8192 &#124; 3F &#124; A1F2 &#124; 3F &#124;'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 英镑符号 &#124; 00A3 &#124; 8192 &#124; 3F &#124; A1F2 &#124; 3F &#124;'
- en: '&#124; FULLWIDTH POUND SIGN &#124; FFE1 &#124; 3F &#124; 8192 &#124; 3F &#124;
    A1F2 &#124;'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 全角英镑符号 &#124; FFE1 &#124; 3F &#124; 8192 &#124; 3F &#124; A1F2 &#124;'
- en: '&#124; NOT SIGN &#124; 00AC &#124; 81CA &#124; 3F &#124; A2CC &#124; 3F &#124;'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 非逻辑非符 &#124; 00AC &#124; 81CA &#124; 3F &#124; A2CC &#124; 3F &#124;'
- en: '&#124; FULLWIDTH NOT SIGN &#124; FFE2 &#124; 3F &#124; 81CA &#124; 3F &#124;
    A2CC &#124;'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 全角非逻辑非符 &#124; FFE2 &#124; 3F &#124; 81CA &#124; 3F &#124; A2CC &#124;'
- en: '&#124; Character Name &#124; ucs2 &#124; sjis &#124; cp932 &#124; ujis &#124;
    eucjpms &#124;'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 字符名称 &#124; ucs2 &#124; sjis &#124; cp932 &#124; ujis &#124; eucjpms
    &#124;'
- en: Now consider the following portion of the table.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑表格的以下部分。
- en: '&#124;  &#124; ucs2 &#124; sjis &#124; cp932 &#124;'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124;  &#124; ucs2 &#124; sjis &#124; cp932 &#124;'
- en: '&#124; NOT SIGN &#124; 00AC &#124; 81CA &#124; 3F &#124;'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 非逻辑非符 &#124; 00AC &#124; 81CA &#124; 3F &#124;'
- en: '&#124; FULLWIDTH NOT SIGN &#124; FFE2 &#124; 3F &#124; 81CA &#124;'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; 全角非逻辑非符 &#124; FFE2 &#124; 3F &#124; 81CA &#124;'
- en: This means that MySQL converts the `NOT SIGN` (Unicode `U+00AC`) to `sjis` code
    point `0x81CA` and to `cp932` code point `3F`. (`3F` is the question mark (“?”.
    This is what is always used when the conversion cannot be performed.) |
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着MySQL将`非逻辑非符`（Unicode `U+00AC`）转换为`sjis`代码点`0x81CA`，转换为`cp932`代码点`3F`。（`3F`是问号（“?”）。这是在无法执行转换时始终使用的。）
    |
- en: '| **A.11.5.** | What should I do if I want to convert SJIS `81CA` to `cp932`?
    |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.5.** | 如果我想将SJIS `81CA` 转换为 `cp932`，我应该怎么做？ |'
- en: '|  | Our answer is: “?”. There are disadvantages to this, and many people would
    prefer a “loose” conversion, so that `81CA (NOT SIGN)` in `sjis` becomes `81CA
    (FULLWIDTH NOT SIGN)` in `cp932`. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '|  | 我们的答案是：“?”。这样做有缺点，许多人更喜欢“宽松”转换，这样`sjis`中的`81CA（非逻辑非符）`就会变成`cp932`中的`81CA（全角非逻辑非符）`。
    |'
- en: '| **A.11.6.** | How does MySQL represent the Yen (`¥`) sign? |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.6.** | MySQL如何表示日元（¥）符号？ |'
- en: '|  | A problem arises because some versions of Japanese character sets (both
    `sjis` and `euc`) treat `5C` as a reverse solidus (`\`, also known as a backslash),
    whereas others treat it as a yen sign (`¥`).MySQL follows only one version of
    the JIS (Japanese Industrial Standards) standard description. In MySQL, *`5C`
    is always the reverse solidus (`\`)*. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '|  | 一个问题出现在于一些版本的日文字符集（`sjis`和`euc`）将`5C`视为反斜杠（`\`，也称为反斜线），而其他版本将其视为日元符号（¥）。MySQL遵循JIS（日本工业标准）标准描述的一个版本。在MySQL中，*`5C`始终是反斜杠（\）*。
    |'
- en: '| **A.11.7.** | Of what issues should I be aware when working with Korean character
    sets in MySQL? |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.7.** | 在MySQL中使用韩文字符集时应注意哪些问题？ |'
- en: '|  | In theory, while there have been several versions of the `euckr` (Extended
    Unix Code Korea) character set, only one problem has been noted. We use the “ASCII”
    variant of EUC-KR, in which the code point `0x5c` is REVERSE SOLIDUS, that is
    `\`, instead of the “KS-Roman” variant of EUC-KR, in which the code point `0x5c`
    is `WON SIGN` (`₩`). This means that you cannot convert Unicode `U+20A9` to `euckr`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '| 理论上，虽然有几个版本的`euckr`（扩展Unix代码韩国）字符集，但只有一个问题被指出。我们使用“ASCII”变体的EUC-KR，其中代码点`0x5c`是反斜杠，即`\`，而不是“KS-Roman”变体的EUC-KR，其中代码点`0x5c`是`WON
    SIGN`（₩）。这意味着你无法将Unicode `U+20A9`转换为`euckr`：'
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **A.11.8.** | Why do I get Incorrect string value error messages? |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.8.** | 为什么我会收到不正确的字符串值错误消息？ |'
- en: '|  | To see the problem, create a table with one Unicode (`ucs2`) column and
    one Chinese (`gb2312`) column.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | 要查看问题，创建一个具有一个Unicode（`ucs2`）列和一个中文（`gb2312`）列的表。'
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In nonstrict SQL mode, try to place the rare character `汌` in both columns.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在非严格SQL模式下，尝试在两列中都放置罕见字符`汌`。
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The [`INSERT`](insert.html "15.2.7 INSERT Statement") produces a warning. Use
    the following statement to see what it is:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[`INSERT`](insert.html "15.2.7 INSERT Statement")产生一个警告。使用以下语句查看是什么：'
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So it is a warning about the `gb2312` column only.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这只是关于`gb2312`列的警告。
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Several things need explanation here:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几件事情需要解释：
- en: The `汌` character is not in the `gb2312` character set, as described earlier.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，`汌`字符不在`gb2312`字符集中。
- en: If you are using an old version of MySQL, you may see a different message.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你正在使用旧版本的MySQL，你可能会看到不同的消息。
- en: A warning occurs rather than an error because MySQL is not set to use strict
    SQL mode. In nonstrict mode, MySQL tries to do what it can, to get the best fit,
    rather than give up. With strict SQL mode, the Incorrect string value message
    occurs as an error rather than a warning, and the [`INSERT`](insert.html "15.2.7 INSERT
    Statement") fails.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出现警告而不是错误，是因为MySQL没有设置为使用严格的SQL模式。在非严格模式下，MySQL会尽力而为，以获得最佳匹配，而不是放弃。在严格的SQL模式下，不正确的字符串值消息会作为错误而不是警告出现，[`INSERT`](insert.html
    "15.2.7 INSERT Statement")将失败。
- en: '|'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **A.11.9.** | Why does my GUI front end or browser display CJK characters
    incorrectly in my application using Access, PHP, or another API? |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.9.** | 为什么我的GUI前端或浏览器在使用Access、PHP或其他API的应用程序中不正确显示CJK字符？ |'
- en: '|  | Obtain a direct connection to the server using the [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") client, and try the same query
    there. If [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    responds correctly, the trouble may be that your application interface requires
    initialization. Use [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") to tell you what character set or sets it uses with the statement `SHOW
    VARIABLES LIKE ''char%'';`. If you are using Access, you are most likely connecting
    with Connector/ODBC. In this case, you should check [Configuring Connector/ODBC](/doc/connector-odbc/en/connector-odbc-configuration.html).
    If, for example, you use `big5`, you would enter `SET NAMES ''big5''`. (In this
    case, no `;` character is required.) If you are using ASP, you might need to add
    [`SET NAMES`](set-names.html "15.7.6.3 SET NAMES Statement") in the code. Here
    is an example that has worked in the past:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | 使用[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端直接连接到服务器，并在那里尝试相同的查询。如果[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")正确响应，问题可能是你的应用程序接口需要初始化。使用[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")告诉你它使用的字符集或字符集的语句`SHOW VARIABLES
    LIKE ''char%'';`。如果你正在使用Access，你很可能是通过Connector/ODBC连接的。在这种情况下，你应该检查[配置Connector/ODBC](/doc/connector-odbc/en/connector-odbc-configuration.html)。例如，如果你使用`big5`，你会输入`SET
    NAMES ''big5''`。（在这种情况下，不需要`；`字符。）如果你正在使用ASP，你可能需要在代码中添加[`SET NAMES`](set-names.html
    "15.7.6.3 SET NAMES Statement")。以下是过去有效的示例：'
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In much the same way, if you are using any character set other than `latin1`
    with Connector/NET, you must specify the character set in the connection string.
    See [Connector/NET Connections](/doc/connector-net/en/connector-net-connections.html),
    for more information.If you are using PHP, try this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你在Connector/NET中使用除`latin1`之外的任何字符集，你必须在连接字符串中指定字符集。有关更多信息，请参阅[Connector/NET
    Connections](/doc/connector-net/en/connector-net-connections.html)。如果���正在使用PHP，尝试这样做：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this case, we used [`SET NAMES`](set-names.html "15.7.6.3 SET NAMES Statement")
    to change [`character_set_client`](server-system-variables.html#sysvar_character_set_client),
    [`character_set_connection`](server-system-variables.html#sysvar_character_set_connection),
    and [`character_set_results`](server-system-variables.html#sysvar_character_set_results).Another
    issue often encountered in PHP applications has to do with assumptions made by
    the browser. Sometimes adding or changing a `<meta>` tag suffices to correct the
    problem: for example, to insure that the user agent interprets page content as
    `UTF-8`, include `<meta http-equiv="Content-Type" content="text/html; charset=utf-8">`
    in the `<head>` section of the HTML page.If you are using Connector/J, see [Using
    Character Sets and Unicode](/doc/connector-j/8.0/en/connector-j-reference-charsets.html).
    |'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用 [`SET NAMES`](set-names.html "15.7.6.3 SET NAMES 语句") 来更改 [`character_set_client`](server-system-variables.html#sysvar_character_set_client)、[`character_set_connection`](server-system-variables.html#sysvar_character_set_connection)
    和 [`character_set_results`](server-system-variables.html#sysvar_character_set_results)。PHP
    应用程序经常遇到的另一个问题与浏览器的假设有关。有时添加或更改 `<meta>` 标签就足以解决问题：例如，为了确保用户代理将页面内容解释为 `UTF-8`，在
    HTML 页面的 `<head>` 部分包含 `<meta http-equiv="Content-Type" content="text/html; charset=utf-8">`。如果您正在使用
    Connector/J，请参阅 [使用字符集和 Unicode](/doc/connector-j/8.0/en/connector-j-reference-charsets.html)。
- en: '| **A.11.10.** | I''ve upgraded to MySQL 8.0\. How can I revert to behavior
    like that in MySQL 4.0 with regard to character sets? |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.10.** | 我已升级到 MySQL 8.0。如何恢复到 MySQL 4.0 中关于字符集的行为？ |'
- en: '|  | In MySQL Version 4.0, there was a single “global” character set for both
    server and client, and the decision as to which character to use was made by the
    server administrator. This changed starting with MySQL Version 4.1\. What happens
    now is a “handshake”, as described in [Section 12.4, “Connection Character Sets
    and Collations”](charset-connection.html "12.4 Connection Character Sets and Collations"):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | 在 MySQL 版本 4.0 中，服务器和客户端共用一个“全局”字符集，由服务器管理员决定使用哪种字符集。从 MySQL 版本 4.1 开始，情况发生了变化。现在是一个“握手”过程，如
    [第 12.4 节，“连接字符集和校对规则”](charset-connection.html "12.4 连接字符集和校对规则") 中所描述的：'
- en: When a client connects, it sends to the server the name of the character set
    that it wants to use. The server uses the name to set the [`character_set_client`](server-system-variables.html#sysvar_character_set_client),
    [`character_set_results`](server-system-variables.html#sysvar_character_set_results),
    and [`character_set_connection`](server-system-variables.html#sysvar_character_set_connection)
    system variables. In effect, the server performs a [`SET NAMES`](set-names.html
    "15.7.6.3 SET NAMES Statement") operation using the character set name.
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当客户端连接时，它会向服务器发送要使用的字符集的名称。服务器使用该名称设置 [`character_set_client`](server-system-variables.html#sysvar_character_set_client)、[`character_set_results`](server-system-variables.html#sysvar_character_set_results)
    和 [`character_set_connection`](server-system-variables.html#sysvar_character_set_connection)
    系统变量。实际上，服务器使用字符集名称执行 [`SET NAMES`](set-names.html "15.7.6.3 SET NAMES 语句") 操作。
- en: 'The effect of this is that you cannot control the client character set by starting
    [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server") with [`--character-set-server=utf8`](server-system-variables.html#sysvar_character_set_server).
    However, some Asian customers prefer the MySQL 4.0 behavior. To make it possible
    to retain this behavior, we added a [**mysqld**](mysqld.html "6.3.1 mysqld — The
    MySQL Server") switch, [`--character-set-client-handshake`](server-options.html#option_mysqld_character-set-client-handshake),
    which can be turned off with [`--skip-character-set-client-handshake`](server-options.html#option_mysqld_character-set-client-handshake).
    If you start [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server") with
    [`--skip-character-set-client-handshake`](server-options.html#option_mysqld_character-set-client-handshake),
    then, when a client connects, it sends to the server the name of the character
    set that it wants to use. However, *the server ignores this request from the client*.By
    way of example, suppose that your favorite server character set is `latin1`. Suppose
    further that the client uses `utf8` because this is what the client''s operating
    system supports. Start the server with `latin1` as its default character set:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的效果是，您无法通过使用[`--character-set-server=utf8`](server-system-variables.html#sysvar_character_set_server)启动[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")来控制客户端字符集。然而，一些亚洲客户更喜欢MySQL 4.0的行为。为了保留这种行为，我们添加了一个[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")开关，[`--character-set-client-handshake`](server-options.html#option_mysqld_character-set-client-handshake)，可以通过[`--skip-character-set-client-handshake`](server-options.html#option_mysqld_character-set-client-handshake)关闭。如果您使用[`--skip-character-set-client-handshake`](server-options.html#option_mysqld_character-set-client-handshake)启动[**mysqld**](mysqld.html
    "6.3.1 mysqld — The MySQL Server")，那么当客户端连接时，它会向服务器发送它想要使用的字符集的名称。然而，*服务器会忽略客户端的这个请求*。举例来说，假设您最喜欢的服务器字符集是`latin1`。进一步假设客户端使用`utf8`，因为这是客户端操作系统支持的。以`latin1`作为默认字符集启动服务器：
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And then start the client with the default character set `utf8`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用默认字符集`utf8`启动客户端：
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The resulting settings can be seen by viewing the output of [`SHOW VARIABLES`](show-variables.html
    "15.7.7.41 SHOW VARIABLES Statement"):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过查看[`SHOW VARIABLES`](show-variables.html "15.7.7.41 SHOW VARIABLES Statement")的输出来查看结果设置：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now stop the client, and stop the server using [**mysqladmin**](mysqladmin.html
    "6.5.2 mysqladmin — A MySQL Server Administration Program"). Then start the server
    again, but this time tell it to skip the handshake like so:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在停止客户端，并使用[**mysqladmin**](mysqladmin.html "6.5.2 mysqladmin — A MySQL Server
    Administration Program")停止服务器。然后再次启动服务器，但这次告诉它跳过握手过程，如下所示：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Start the client with `utf8` once again as the default character set, then
    display the resulting settings:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 再次将客户端以`utf8`作为默认字符集启动，然后显示结果设置：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see by comparing the differing results from [`SHOW VARIABLES`](show-variables.html
    "15.7.7.41 SHOW VARIABLES Statement"), the server ignores the client's initial
    settings if the [`--skip-character-set-client-handshake`](server-options.html#option_mysqld_character-set-client-handshake)
    option is used. |
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较[`SHOW VARIABLES`](show-variables.html "15.7.7.41 SHOW VARIABLES Statement")的不同结果，可以看到如果使用[`--skip-character-set-client-handshake`](server-options.html#option_mysqld_character-set-client-handshake)选项，服务器会忽略客户端的初始设置。|
- en: '| **A.11.11.** | Why do some [`LIKE`](string-comparison-functions.html#operator_like)
    and `FULLTEXT` searches with CJK characters fail? |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.11.** | 为什么一些带有CJK字符的[`LIKE`](string-comparison-functions.html#operator_like)和`FULLTEXT`搜索会失败？|'
- en: '|  | For [`LIKE`](string-comparison-functions.html#operator_like) searches,
    there is a very simple problem with binary string column types such as [`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") and [`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types"): we must know where characters end. With multibyte character
    sets, different characters might have different octet lengths. For example, in
    `utf8`, `A` requires one byte but `ペ` requires three bytes, as shown here:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | 对于[`LIKE`](string-comparison-functions.html#operator_like)搜索，像[`BINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types")和[`BLOB`](blob.html "13.3.4 The BLOB and
    TEXT Types")这样的二进制字符串列类型存在一个非常简单的问题：我们必须知道字符的结束位置。在多字节字符集中，不同的字符可能具有不同的八位字节长度。例如，在`utf8`中，`A`需要一个字节，但`ペ`需要三个字节，如下所示：'
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we do not know where the first character in a string ends, we do not know
    where the second character begins, in which case even very simple searches such
    as [`LIKE ''_A%''`](string-comparison-functions.html#operator_like) fail. The
    solution is to use a nonbinary string column type defined to have the proper CJK
    character set. For example: `mycol TEXT CHARACTER SET sjis`. Alternatively, convert
    to a CJK character set before comparing.This is one reason why MySQL cannot permit
    encodings of nonexistent characters. If it is not strict about rejecting bad input,
    it has no way of knowing where characters end.For `FULLTEXT` searches, we must
    know where words begin and end. With Western languages, this is rarely a problem
    because most (if not all) of these use an easy-to-identify word boundary: the
    space character. However, this is not usually the case with Asian writing. We
    could use arbitrary halfway measures, like assuming that all Han characters represent
    words, or (for Japanese) depending on changes from Katakana to Hiragana due to
    grammatical endings. However, the only sure solution requires a comprehensive
    word list, which means that we would have to include a dictionary in the server
    for each Asian language supported. This is simply not feasible. |'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不知道字符串中第一个字符的结束位置，那么我们也不知道第二个字符从哪里开始，这种情况下，即使是非常简单的搜索，比如[`LIKE '_A%'`](string-comparison-functions.html#operator_like)也会失败。解决方法是使用定义为具有适当CJK字符集的非二进制字符串列类型。例如：`mycol
    TEXT CHARACTER SET sjis`。或者，在比较之前转换为CJK字符集。这也是MySQL不能允许不存在字符的编码的原因之一。如果不严格拒绝错误输入，MySQL就无法知道字符的结束位置。对于`FULLTEXT`搜索，我们必须知道单词的起始和结束位置。对于西方语言，这很少是问题，因为大多数（如果不是全部）都使用易于识别的单词边界：空格字符。然而，对于亚洲文字通常不是这种情况。我们可以使用任意的中间措施，比如假设所有汉字代表单词，或者（对于日语）依赖于片假名到平假名的变化，因为语法结尾。然而，唯一确定的解决方案需要一个全面的单词列表，这意味着我们必须为每种支持的亚洲语言在服务器中包含一个字典。这根本不可行。
- en: '| **A.11.12.** | How do I know whether character *`X`* is available in all
    character sets? |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.12.** | 我如何知道字符*`X`*在所有字符集中是否可用？'
- en: '|  | The majority of simplified Chinese and basic nonhalfwidth Japanese Kana
    characters appear in all CJK character sets. The following stored procedure accepts
    a `UCS-2` Unicode character, converts it to other character sets, and displays
    the results in hexadecimal.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | 大多数简体中文和基本非半角宽日语假名字符出现在所有CJK字符集中。以下存储过程接受一个`UCS-2` Unicode字符，将其转换为其他字符集，并以十六进制显示结果。'
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The input can be any single `ucs2` character, or it can be the code value (hexadecimal
    representation) of that character. For example, from Unicode''s list of `ucs2`
    encodings and names ([http://www.unicode.org/Public/UNIDATA/UnicodeData.txt](http://www.unicode.org/Public/UNIDATA/UnicodeData.txt)),
    we know that the Katakana character *Pe* appears in all CJK character sets, and
    that its code value is `X''30DA''`. If we use this value as the argument to `p_convert()`,
    the result is as shown here:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 输入可以是任何单个`ucs2`字符，或者可以是该字符的代码值（十六进制表示）。例如，从Unicode的`ucs2`编码和名称列表（[http://www.unicode.org/Public/UNIDATA/UnicodeData.txt](http://www.unicode.org/Public/UNIDATA/UnicodeData.txt)）中，我们知道片假名字符*Pe*出现在所有CJK字符集中，并且其代码值为`X'30DA'`。如果我们将这个值作为`p_convert()`的参数，结果如下所示：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Since none of the column values is `3F` (that is, the question mark character,
    `?`), we know that every conversion worked. |
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于列值中没有`3F`（即问号字符，`?`），我们知道每次转换都成功了。
- en: '| **A.11.13.** | Why do CJK strings sort incorrectly in Unicode? (I) |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.13.** | 为什么CJK字符串在Unicode中排序不正确？（I）'
- en: '|  | CJK sorting problems that occurred in older MySQL versions can be solved
    as of MySQL 8.0 by using the `utf8mb4` character set and the `utf8mb4_ja_0900_as_cs`
    collation. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '|  | 在MySQL 8.0中，可以通过使用`utf8mb4`字符集和`utf8mb4_ja_0900_as_cs`校对规则来解决旧版本MySQL中出现的CJK排序问题。'
- en: '| **A.11.14.** | Why do CJK strings sort incorrectly in Unicode? (II) |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.14.** | 为什么CJK字符串在Unicode中排序不正确？（II）'
- en: '|  | CJK sorting problems that occurred in older MySQL versions can be solved
    as of MySQL 8.0 by using the `utf8mb4` character set and the `utf8mb4_ja_0900_as_cs`
    collation. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '|  | 在MySQL 8.0中，可以通过使用`utf8mb4`字符集和`utf8mb4_ja_0900_as_cs`校对规则来解决旧版本MySQL中出现的CJK排序问题。'
- en: '| **A.11.15.** | Why are my supplementary characters rejected by MySQL? |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.15.** | 为什么我的补充字符被MySQL拒绝？'
- en: '|  | Supplementary characters lie outside the Unicode *Basic Multilingual Plane
    / Plane 0*. BMP characters have code point values between `U+0000` and `U+FFFF`.
    Supplementary characters have code point values between `U+10000` and `U+10FFFF`.To
    store supplementary characters, you must use a character set that permits them:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | 补充字符位于Unicode *基本多语言平面/平面0*之外。BMP字符的代码点值介于`U+0000`和`U+FFFF`之间。补充字符的代码点值介于`U+10000`和`U+10FFFF`之间。要存储补充字符，必须使用允许它们的字符集：'
- en: The `utf8` and `ucs2` character sets support BMP characters only.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8`和`ucs2`字符集仅支持BMP字符。'
- en: 'The `utf8` character set permits only `UTF-8` characters that take up to three
    bytes. This has led to reports such as that found in Bug #12600, which we rejected
    as “not a bug”. With `utf8`, MySQL must truncate an input string when it encounters
    bytes that it does no understand. Otherwise, it is unknown how long the bad multibyte
    character is.'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`utf8`字符集仅允许占用最多三个字节的`UTF-8`字符。这导致了Bug #12600中的报告，我们将其拒绝为“不是一个bug”。使用`utf8`时，MySQL在遇到无法理解的字节时必须截断输入字符串。否则，无法确定坏的多字节字符有多长。'
- en: One possible workaround is to use `ucs2` instead of `utf8`, in which case the
    “bad” characters are changed to question marks. However, no truncation takes place.
    You can also change the data type to [`BLOB`](blob.html "13.3.4 The BLOB and TEXT
    Types") or [`BINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY Types"),
    which perform no validity checking.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可能的解决方法是使用`ucs2`代替`utf8`，在这种情况下，“坏”字符会被更改为问号。但是，不会发生截断。您还可以将数据类型更改为[`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types")或[`BINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types")，这些类型不执行有效性检查。
- en: The `utf8mb4`, `utf16`, `utf16le`, and `utf32` character sets support BMP characters,
    as well as supplementary characters outside the BMP.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8mb4`、`utf16`、`utf16le`和`utf32`字符集支持BMP字符，以及BMP之外的补充字符。'
- en: '|'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **A.11.16.** | Should “CJK” be “CJKV”? |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.16.** | “CJK”应该改为“CJKV”吗？ |'
- en: '|  | No. The term “CJKV” (Chinese Japanese Korean Vietnamese) refers to Vietnamese
    character sets which contain Han (originally Chinese) characters. MySQL supports
    the modern Vietnamese script with Western characters, but does not support the
    old Vietnamese script using Han characters.As of MySQL 5.6, there are Vietnamese
    collations for Unicode character sets, as described in [Section 12.10.1, “Unicode
    Character Sets”](charset-unicode-sets.html "12.10.1 Unicode Character Sets").
    |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '|  | 不。术语“CJKV”（中文、日文、韩文、越南文）指的是包含汉字（最初是中文）字符的越南字符集。MySQL支持带有西方字符的现代越南文脚本，但不支持使用汉字字符的旧越南文脚本。截至MySQL
    5.6，有适用于Unicode字符集的越南文排序规则，如[第12.10.1节“Unicode字符集”](charset-unicode-sets.html
    "12.10.1 Unicode Character Sets")所述。 |'
- en: '| **A.11.17.** | Does MySQL permit CJK characters to be used in database and
    table names? |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.17.** | MySQL允许在数据库和表名中使用CJK字符吗？ |'
- en: '|  | Yes. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '|  | 是的。 |'
- en: '| **A.11.18.** | Where can I find translations of the MySQL Manual into Chinese,
    Japanese, and Korean? |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.18.** | 我在哪里可以找到MySQL手册的中文、日文和韩文翻译？ |'
- en: '|  | The Japanese translation of the MySQL 5.6 manual can be downloaded from
    [https://dev.mysql.com/doc/](/doc/). |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '|  | MySQL 5.6手册的日文翻译可从[https://dev.mysql.com/doc/](/doc/)下载。 |'
- en: '| **A.11.19.** | Where can I get help with CJK and related issues in MySQL?
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| **A.11.19.** | 我在哪里可以获取有关MySQL中CJK和相关问题的帮助？ |'
- en: '|  | The following resources are available:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | 以下资源可供使用：'
- en: A listing of MySQL user groups can be found at [https://wikis.oracle.com/display/mysql/List+of+MySQL+User+Groups](https://wikis.oracle.com/display/mysql/List+of+MySQL+User+Groups).
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可在[https://wikis.oracle.com/display/mysql/List+of+MySQL+User+Groups](https://wikis.oracle.com/display/mysql/List+of+MySQL+User+Groups)找到MySQL用户组列表。
- en: View feature requests relating to character set issues at [http://tinyurl.com/y6xcuf](http://tinyurl.com/y6xcuf).
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看与字符集问题相关的功能请求，请访问[http://tinyurl.com/y6xcuf](http://tinyurl.com/y6xcuf)。
- en: Visit the MySQL [Character Sets, Collation, Unicode Forum](https://forums.mysql.com/list.php?103).
    [http://forums.mysql.com/](http://forums.mysql.com/) also provides foreign-language
    forums.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问MySQL [字符集、排序规则、Unicode论坛](https://forums.mysql.com/list.php?103)。[http://forums.mysql.com/](http://forums.mysql.com/)也提供外语论坛。
- en: '|'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
