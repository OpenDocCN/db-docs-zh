- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks-handling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks-handling.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks-handling.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-deadlocks-handling.html)
- en: 17.7.5.3 How to Minimize and Handle Deadlocks
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.7.5.3 如何最小化和处理死锁
- en: This section builds on the conceptual information about deadlocks in [Section 17.7.5.2,
    “Deadlock Detection”](innodb-deadlock-detection.html "17.7.5.2 Deadlock Detection").
    It explains how to organize database operations to minimize deadlocks and the
    subsequent error handling required in applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节建立在关于死锁的概念信息之上，详见[第17.7.5.2节，“死锁检测”](innodb-deadlock-detection.html "17.7.5.2 死锁检测")。它解释了如何组织数据库操作以最小化死锁，并说明了应用程序中所需的后续错误处理。
- en: '[Deadlocks](glossary.html#glos_deadlock "deadlock") are a classic problem in
    transactional databases, but they are not dangerous unless they are so frequent
    that you cannot run certain transactions at all. Normally, you must write your
    applications so that they are always prepared to re-issue a transaction if it
    gets rolled back because of a deadlock.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[死锁](glossary.html#glos_deadlock "死锁")是事务性数据库中的经典问题，但除非它们频繁到您根本无法运行某些事务，否则它们并不危险。通常，您必须编写应用程序，以便它们始终准备好在由于死锁而回滚事务时重新发出该事务。'
- en: '`InnoDB` uses automatic row-level locking. You can get deadlocks even in the
    case of transactions that just insert or delete a single row. That is because
    these operations are not really “atomic”; they automatically set locks on the
    (possibly several) index records of the row inserted or deleted.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`使用自动的行级锁定。即使是仅插入或删除单行的事务，也可能发生死锁。这是因为这些操作并不真正“原子化”；它们会自动在插入或删除的行的（可能是多个）索引记录上设置锁。'
- en: 'You can cope with deadlocks and reduce the likelihood of their occurrence with
    the following techniques:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下技术来应对死锁并减少其发生的可能性：
- en: At any time, issue [`SHOW ENGINE INNODB STATUS`](show-engine.html "15.7.7.15 SHOW
    ENGINE Statement") to determine the cause of the most recent deadlock. That can
    help you to tune your application to avoid deadlocks.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随时使用[`SHOW ENGINE INNODB STATUS`](show-engine.html "15.7.7.15 SHOW ENGINE语句")来确定最近死锁的原因。这可以帮助您调整应用程序以避免死锁。
- en: If frequent deadlock warnings cause concern, collect more extensive debugging
    information by enabling the [`innodb_print_all_deadlocks`](innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
    variable. Information about each deadlock, not just the latest one, is recorded
    in the MySQL [error log](glossary.html#glos_error_log "error log"). Disable this
    option when you are finished debugging.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果频繁的死锁警告引起关注，可以通过启用[`innodb_print_all_deadlocks`](innodb-parameters.html#sysvar_innodb_print_all_deadlocks)变量来收集更广泛的调试信息。每个死锁的信息，而不仅仅是最新的那个，都记录在MySQL的[错误日志](glossary.html#glos_error_log
    "错误日志")中。调试完成后请禁用此选项。
- en: Always be prepared to re-issue a transaction if it fails due to deadlock. Deadlocks
    are not dangerous. Just try again.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果由于死锁而事务失败，请随时准备重新发出该事务。死锁并不危险。只需再试一次。
- en: Keep transactions small and short in duration to make them less prone to collision.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持事务小且持续时间短，以减少碰撞的可能性。
- en: Commit transactions immediately after making a set of related changes to make
    them less prone to collision. In particular, do not leave an interactive [**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client") session open for a long time with
    an uncommitted transaction.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进行一组相关更改后立即提交事务，以减少碰撞的可能性。特别是，不要将一个交互式[**mysql**](mysql.html "6.5.1 mysql —
    MySQL命令行客户端")会话保持打开很长时间且有未提交的事务。
- en: If you use [locking reads](glossary.html#glos_locking_read "locking read") ([`SELECT
    ... FOR UPDATE`](select.html "15.2.13 SELECT Statement") or [`SELECT ... FOR SHARE`](select.html
    "15.2.13 SELECT Statement")), try using a lower isolation level such as [`READ
    COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用[锁定读取](glossary.html#glos_locking_read "锁定读取")（[`SELECT ... FOR UPDATE`](select.html
    "15.2.13 SELECT语句")或[`SELECT ... FOR SHARE`](select.html "15.2.13 SELECT语句")），请尝试使用较低的隔离级别，如[`READ
    COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)。
- en: When modifying multiple tables within a transaction, or different sets of rows
    in the same table, do those operations in a consistent order each time. Then transactions
    form well-defined queues and do not deadlock. For example, organize database operations
    into functions within your application, or call stored routines, rather than coding
    multiple similar sequences of `INSERT`, `UPDATE`, and `DELETE` statements in different
    places.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在事务中修改多个表或同一表中的不同行集时，每次都以一致的顺序执行这些操作。然后事务形成明确定义的队列，不会发生死锁。例如，将数据库操作组织成应用程序中的函数，或调用存储过程，而不是在不同位置编写多个类似的`INSERT`、`UPDATE`和`DELETE`语句序列。
- en: Add well-chosen indexes to your tables so that your queries scan fewer index
    records and set fewer locks. Use [`EXPLAIN SELECT`](explain.html "15.8.2 EXPLAIN
    Statement") to determine which indexes the MySQL server regards as the most appropriate
    for your queries.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为表添加精心选择的索引，以便查询扫描更少的索引记录并设置更少的锁。使用[`EXPLAIN SELECT`](explain.html "15.8.2 EXPLAIN
    Statement")来确定MySQL服务器认为哪些索引对您的查询最合适。
- en: Use less locking. If you can afford to permit a [`SELECT`](select.html "15.2.13 SELECT
    Statement") to return data from an old snapshot, do not add a `FOR UPDATE` or
    `FOR SHARE` clause to it. Using the [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)
    isolation level is good here, because each consistent read within the same transaction
    reads from its own fresh snapshot.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少锁定。如果您可以允许[`SELECT`](select.html "15.2.13 SELECT Statement")从旧快照返回数据，请不要为其添加`FOR
    UPDATE`或`FOR SHARE`子句。在这里使用[`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)隔离级别是很好的，因为同一事务内的每个一致读取都从自己的新快照中读取。
- en: 'If nothing else helps, serialize your transactions with table-level locks.
    The correct way to use [`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and
    UNLOCK TABLES Statements") with transactional tables, such as `InnoDB` tables,
    is to begin a transaction with `SET autocommit = 0` (not [`START TRANSACTION`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")) followed by [`LOCK
    TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements"),
    and to not call [`UNLOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK
    TABLES Statements") until you commit the transaction explicitly. For example,
    if you need to write to table `t1` and read from table `t2`, you can do this:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有其他办法，使用表级锁串行化您的事务。在使用事务表（如`InnoDB`表）时，正确使用[`LOCK TABLES`](lock-tables.html
    "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")的方法是以`SET autocommit = 0`（而不是[`START
    TRANSACTION`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")）开始事务，然后跟随[`LOCK
    TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")，直到显式提交事务前不调用[`UNLOCK
    TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")。例如，如果您需要写入表`t1`并从表`t2`读取，可以这样做：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Table-level locks prevent concurrent updates to the table, avoiding deadlocks
    at the expense of less responsiveness for a busy system.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表级锁可以防止对表的并发更新，在繁忙系统中避免死锁，但会降低系统的响应速度。
- en: Another way to serialize transactions is to create an auxiliary “semaphore”
    table that contains just a single row. Have each transaction update that row before
    accessing other tables. In that way, all transactions happen in a serial fashion.
    Note that the `InnoDB` instant deadlock detection algorithm also works in this
    case, because the serializing lock is a row-level lock. With MySQL table-level
    locks, the timeout method must be used to resolve deadlocks.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种串行化事务的方法是创建一个仅包含单行的辅助“信号量”表。让每个事务在访问其他表之前更新该行。这样，所有事务都以串行方式发生。请注意，`InnoDB`即时死锁检测算法在这种情况下也适用，因为串行化锁是行级锁。对于MySQL表级锁，必须使用超时方法来解决死锁。
