- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-features-transactions.html](https://dev.mysql.com/doc/refman/8.0/en/replication-features-transactions.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/replication-features-transactions.html](https://dev.mysql.com/doc/refman/8.0/en/replication-features-transactions.html)
- en: 19.5.1.35 Replication and Transactions
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 19.5.1.35 复制和事务
- en: '**Mixing transactional and nontransactional statements within the same transaction. **
    In general, you should avoid transactions that update both transactional and nontransactional
    tables in a replication environment. You should also avoid using any statement
    that accesses both transactional (or temporary) and nontransactional tables and
    writes to any of them.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**在同一事务中混合事务和非事务语句。** 一般来说，在复制环境中，应避免更新既有事务表又有非事务表的事务。还应避免使用任何访问既有事务（或临时）表又访问非事务表并写入其中的语句。'
- en: 'The server uses these rules for binary logging:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器使用以下规则进行二进制日志记录：
- en: If the initial statements in a transaction are nontransactional, they are written
    to the binary log immediately. The remaining statements in the transaction are
    cached and not written to the binary log until the transaction is committed. (If
    the transaction is rolled back, the cached statements are written to the binary
    log only if they make nontransactional changes that cannot be rolled back. Otherwise,
    they are discarded.)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果事务中的初始语句是非事务的，则立即写入二进制日志。事务中的其余语句被缓存，直到事务提交时才写入二进制日志。（如果事务回滚，则仅当它们进行不可回滚的非事务更改时，缓存的语句才会写入二进制日志。否则，它们将被丢弃。）
- en: For statement-based logging, logging of nontransactional statements is affected
    by the [`binlog_direct_non_transactional_updates`](replication-options-binary-log.html#sysvar_binlog_direct_non_transactional_updates)
    system variable. When this variable is `OFF` (the default), logging is as just
    described. When this variable is `ON`, logging occurs immediately for nontransactional
    statements occurring anywhere in the transaction (not just initial nontransactional
    statements). Other statements are kept in the transaction cache and logged when
    the transaction commits. [`binlog_direct_non_transactional_updates`](replication-options-binary-log.html#sysvar_binlog_direct_non_transactional_updates)
    has no effect for row-format or mixed-format binary logging.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于基于语句的日志记录，非事务语句的记录受[`binlog_direct_non_transactional_updates`](replication-options-binary-log.html#sysvar_binlog_direct_non_transactional_updates)系统变量的影响。当此变量为`OFF`（默认值）时，记录如上所述。当此变量为`ON`时，对于事务中发生的任何非事务语句，立即记录（不仅仅是初始的非事务语句）。其他语句被保留在事务缓存中，并在事务提交时记录。[`binlog_direct_non_transactional_updates`](replication-options-binary-log.html#sysvar_binlog_direct_non_transactional_updates)对于行格式或混合格式的二进制日志记录没有影响。
- en: '**Transactional, nontransactional, and mixed statements. ** To apply those
    rules, the server considers a statement nontransactional if it changes only nontransactional
    tables, and transactional if it changes only transactional tables. A statement
    that references both nontransactional and transactional tables and updates *any*
    of the tables involved is considered a “mixed” statement. Mixed statements, like
    transactional statements, are cached and logged when the transaction commits.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**事务、非事务和混合语句。** 为了应用这些规则，服务器认为一个语句是非事务的，如果它只改变非事务表，而认为是事务的，如果它只改变事务表。一个引用了非事务表和事务表并更新*任何*涉及的表的语句被视为“混合”语句。混合语句，像事务语句一样，在事务提交时被缓存和记录。'
- en: 'A mixed statement that updates a transactional table is considered unsafe if
    the statement also performs either of the following actions:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 更新事务表的混合语句，如果该语句还执行以下任一操作，则被视为不安全：
- en: Updates or reads a temporary table
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新或读取临时表
- en: Reads a nontransactional table and the transaction isolation level is less than
    REPEATABLE_READ
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取非事务表且事务隔离级别低于REPEATABLE_READ
- en: 'A mixed statement following the update of a transactional table within a transaction
    is considered unsafe if it performs either of the following actions:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在事务中更新事务表后的混合语句，如果执行以下任一操作，则被视为不安全：
- en: Updates any table and reads from any temporary table
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新任何表并从任何临时表读取
- en: Updates a nontransactional table and [`binlog_direct_non_transactional_updates`](replication-options-binary-log.html#sysvar_binlog_direct_non_transactional_updates)
    is OFF
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新非事务表且[`binlog_direct_non_transactional_updates`](replication-options-binary-log.html#sysvar_binlog_direct_non_transactional_updates)为关闭状态
- en: For more information, see [Section 19.2.1.3, “Determination of Safe and Unsafe
    Statements in Binary Logging”](replication-rbr-safe-unsafe.html "19.2.1.3 Determination
    of Safe and Unsafe Statements in Binary Logging").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参见[Section 19.2.1.3, “Determination of Safe and Unsafe Statements in Binary
    Logging”](replication-rbr-safe-unsafe.html "19.2.1.3 Determination of Safe and
    Unsafe Statements in Binary Logging").
- en: Note
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A mixed statement is unrelated to mixed binary logging format.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 混合语句与混合二进制日志格式无关。
- en: In situations where transactions mix updates to transactional and nontransactional
    tables, the order of statements in the binary log is correct, and all needed statements
    are written to the binary log even in case of a [`ROLLBACK`](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements"). However, when a second connection
    updates the nontransactional table before the first connection transaction is
    complete, statements can be logged out of order because the second connection
    update is written immediately after it is performed, regardless of the state of
    the transaction being performed by the first connection.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在事务混合更新事务和非事务表的情况下，二进制日志中语句的顺序是正确的，即使在[`ROLLBACK`](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements")的情况下，所有需要的语句也会被写入二进制日志。然而，当第二个连接在第一个连接事务完成之前更新非事务表时，语句可能会因为第二个连接的更新立即写入，而不考虑第一个连接正在执行的事务状态，导致日志顺序混乱。
- en: '**Using different storage engines on source and replica. ** It is possible
    to replicate transactional tables on the source using nontransactional tables
    on the replica. For example, you can replicate an `InnoDB` source table as a `MyISAM`
    replica table. However, if you do this, there are problems if the replica is stopped
    in the middle of a [`BEGIN`](commit.html "15.3.1 START TRANSACTION, COMMIT, and
    ROLLBACK Statements") ... [`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements") block because the replica restarts at the beginning
    of the [`BEGIN`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")
    block.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**在源和副本上使用不同的存储引擎。** 可以在源上使用非事务表复制事务表到副本上。例如，可以将`InnoDB`源表复制为`MyISAM`副本表。但是，如果这样做，在[`BEGIN`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements") ... [`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")块中停止副本会出现问题，因为副本会在[`BEGIN`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")块的开头重新启动。'
- en: It is also safe to replicate transactions from [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine") tables on the source to transactional tables,
    such as tables that use the [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine") storage engine, on the replica. In such cases, an [`AUTOCOMMIT=1`](server-system-variables.html#sysvar_autocommit)
    statement issued on the source is replicated, thus enforcing `AUTOCOMMIT` mode
    on the replica.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine")表上的事务复制到副本上的事务表，例如使用[`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine")存储引擎的表，也是安全的。在这种情况下，在源上发出的[`AUTOCOMMIT=1`](server-system-variables.html#sysvar_autocommit)语句会被复制，从而在副本上强制执行`AUTOCOMMIT`模式。
- en: When the storage engine type of the replica is nontransactional, transactions
    on the source that mix updates of transactional and nontransactional tables should
    be avoided because they can cause inconsistency of the data between the source
    transactional table and the replica nontransactional table. That is, such transactions
    can lead to source storage engine-specific behavior with the possible effect of
    replication going out of synchrony. MySQL does not issue a warning about this,
    so extra care should be taken when replicating transactional tables from the source
    to nontransactional tables on the replicas.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当副本的存储引擎类型为非事务时，应避免在源上混合更新事务和非事务表的事务，因为它们可能导致源事务表和副本非事务表之间的数据不一致。也就是说，这样的事务可能导致源存储引擎特定行为，可能导致复制失去同步。MySQL不会对此发出警告，因此在将源上的事务表复制到副本上的非事务表时，应格外小心。
- en: '**Changing the binary logging format within transactions. ** The [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)
    and [`binlog_checksum`](replication-options-binary-log.html#sysvar_binlog_checksum)
    system variables are read-only as long as a transaction is in progress.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**更改事务中的二进制日志格式。** 只要事务正在进行中，[`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)和[`binlog_checksum`](replication-options-binary-log.html#sysvar_binlog_checksum)系统变量是只读的。'
- en: Every transaction (including [`autocommit`](server-system-variables.html#sysvar_autocommit)
    transactions) is recorded in the binary log as though it starts with a [`BEGIN`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements") statement, and ends
    with either a [`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK
    Statements") or a [`ROLLBACK`](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements") statement. This is even true for statements affecting
    tables that use a nontransactional storage engine (such as [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine")).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个事务（包括[`autocommit`](server-system-variables.html#sysvar_autocommit)事务）都被记录在二进制日志中，就好像它以[`BEGIN`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")语句开始，以[`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")或[`ROLLBACK`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")语句结束。即使是影响使用非事务性存储引擎（如[`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine")）的表的语句也是如此。
- en: Note
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For restrictions that apply specifically to XA transactions, see [Section 15.3.8.3,
    “Restrictions on XA Transactions”](xa-restrictions.html "15.3.8.3 Restrictions
    on XA Transactions").
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仅适用于XA事务的限制，请参见[第15.3.8.3节，“XA事务的限制”](xa-restrictions.html "15.3.8.3 XA事务的限制")。
