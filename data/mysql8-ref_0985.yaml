- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/xa-restrictions.html](https://dev.mysql.com/doc/refman/8.0/en/xa-restrictions.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/xa-restrictions.html](https://dev.mysql.com/doc/refman/8.0/en/xa-restrictions.html)
- en: 15.3.8.3 Restrictions on XA Transactions
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.3.8.3 XA事务的限制
- en: XA transaction support is limited to the `InnoDB` storage engine.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: XA事务支持仅限于`InnoDB`存储引擎。
- en: For “external XA,” a MySQL server acts as a Resource Manager and client programs
    act as Transaction Managers. For “Internal XA”, storage engines within a MySQL
    server act as RMs, and the server itself acts as a TM. Internal XA support is
    limited by the capabilities of individual storage engines. Internal XA is required
    for handling XA transactions that involve more than one storage engine. The implementation
    of internal XA requires that a storage engine support two-phase commit at the
    table handler level, and currently this is true only for `InnoDB`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“外部XA”，一个MySQL服务器充当资源管理器，客户端程序充当事务管理器。对于“内部XA”，MySQL服务器内的存储引擎充当RMs，服务器本身充当TM。内部XA支持受到各个存储引擎能力的限制。处理涉及多个存储引擎的XA事务需要内部XA。实现内部XA要求存储引擎在表处理程序级别支持两阶段提交，目前只有`InnoDB`符合这一要求。
- en: For [`XA START`](xa-statements.html "15.3.8.1 XA Transaction SQL Statements"),
    the `JOIN` and `RESUME` clauses are recognized but have no effect.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`XA START`](xa-statements.html "15.3.8.1 XA Transaction SQL Statements")，识别`JOIN`和`RESUME`子句但不起作用。
- en: For [`XA END`](xa-statements.html "15.3.8.1 XA Transaction SQL Statements")
    the `SUSPEND [FOR MIGRATE]` clause is recognized but has no effect.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`XA END`](xa-statements.html "15.3.8.1 XA Transaction SQL Statements")，识别`SUSPEND
    [FOR MIGRATE]`子句但不起作用。
- en: The requirement that the *`bqual`* part of the *`xid`* value be different for
    each XA transaction within a global transaction is a limitation of the current
    MySQL XA implementation. It is not part of the XA specification.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要求`xid`值的*bqual*部分在全局事务中的每个XA事务中不同是当前MySQL XA实现的限制。这不是XA规范的一部分。
- en: An XA transaction is written to the binary log in two parts. When `XA PREPARE`
    is issued, the first part of the transaction up to `XA PREPARE` is written using
    an initial GTID. A `XA_prepare_log_event` is used to identify such transactions
    in the binary log. When `XA COMMIT` or `XA ROLLBACK` is issued, a second part
    of the transaction containing only the `XA COMMIT` or `XA ROLLBACK` statement
    is written using a second GTID. Note that the initial part of the transaction,
    identified by `XA_prepare_log_event`, is not necessarily followed by its `XA COMMIT`
    or `XA ROLLBACK`, which can cause interleaved binary logging of any two XA transactions.
    The two parts of the XA transaction can even appear in different binary log files.
    This means that an XA transaction in `PREPARED` state is now persistent until
    an explicit `XA COMMIT` or `XA ROLLBACK` statement is issued, ensuring that XA
    transactions are compatible with replication.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: XA事务分两部分写入二进制日志。当发出`XA PREPARE`时，事务的第一部分直到`XA PREPARE`使用初始GTID写入。`XA_prepare_log_event`用于在二进制日志中标识这类事务。当发出`XA
    COMMIT`或`XA ROLLBACK`时，包含仅`XA COMMIT`或`XA ROLLBACK`语句的事务的第二部分使用第二个GTID写入。请注意，由`XA_prepare_log_event`标识的事务的初始部分不一定会跟随其`XA
    COMMIT`或`XA ROLLBACK`，这可能导致任意两个XA事务的二进制日志交错记录。XA事务的两部分甚至可以出现在不同的二进制日志文件中。这意味着处于`PREPARED`状态的XA事务现在持久存在，直到发出显式的`XA
    COMMIT`或`XA ROLLBACK`语句，确保XA事务与复制兼容。
- en: On a replica, immediately after the XA transaction is prepared, it is detached
    from the replication applier thread, and can be committed or rolled back by any
    thread on the replica. This means that the same XA transaction can appear in the
    [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table") table with different states
    on different threads. The [`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table") table displays the current
    status of the most recent monitored transaction event on the thread, and does
    not update this status when the thread is idle. So the XA transaction can still
    be displayed in the `PREPARED` state for the original applier thread, after it
    has been processed by another thread. To positively identify XA transactions that
    are still in the `PREPARED` state and need to be recovered, use the [`XA RECOVER`](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements") statement rather than the Performance
    Schema transaction tables.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在副本上，在XA事务准备完成后，它会从复制应用程序线程中分离，并可以由副本上的任何线程提交或回滚。这意味着相同的XA事务可以在不同线程上以不同状态出现在[`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table")表中。[`events_transactions_current`](performance-schema-events-transactions-current-table.html
    "29.12.7.1 The events_transactions_current Table")表显示线程上最近监视的事务事件的当前状态，并在线程空闲时不更新此状态。因此，即使在被另一个线程处理后，XA事务仍可能以`PREPARED`状态显示在原始应用程序线程中。要明确识别仍处于`PREPARED`状态且需要恢复的XA事务，请使用[`XA
    RECOVER`](xa-statements.html "15.3.8.1 XA Transaction SQL Statements")语句，而不是性能模式事务表。
- en: 'The following restrictions exist for using XA transactions:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XA事务存在以下限制：
- en: Prior to MySQL 8.0.30, XA transactions are not fully resilient to an unexpected
    halt with respect to the binary log. If there is an unexpected halt while the
    server is in the middle of executing an `XA PREPARE`, `XA COMMIT`, `XA ROLLBACK`,
    or `XA COMMIT ... ONE PHASE` statement, the server might not be able to recover
    to a correct state, leaving the server and the binary log in an inconsistent state.
    In this situation, the binary log might either contain extra XA transactions that
    are not applied, or miss XA transactions that are applied. Also, if GTIDs are
    enabled, after recovery `@@GLOBAL.GTID_EXECUTED` might not correctly describe
    the transactions that have been applied. Note that if an unexpected halt occurs
    before `XA PREPARE`, between `XA PREPARE` and `XA COMMIT` (or `XA ROLLBACK`),
    or after `XA COMMIT` (or `XA ROLLBACK`), the server and binary log are correctly
    recovered and taken to a consistent state.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.30 之前，XA 事务在意外停机时对于二进制日志不是完全具有弹性。如果在服务器正在执行`XA PREPARE`、`XA COMMIT`、`XA
    ROLLBACK`或`XA COMMIT ... ONE PHASE`语句时发生意外停机，服务器可能无法恢复到正确状态，导致服务器和二进制日志处于不一致状态。在这种情况下，二进制日志可能包含未应用的额外XA事务，或者缺少已应用的XA事务。此外，如果启用了GTIDs，在恢复后，`@@GLOBAL.GTID_EXECUTED`可能无法正确描述已应用的事务。请注意，如果在`XA
    PREPARE`之前、在`XA PREPARE`和`XA COMMIT`（或`XA ROLLBACK`）之间，或在`XA COMMIT`（或`XA ROLLBACK`）之后发生意外停机，则服务器和二进制日志将正确恢复并处于一致状态。
- en: Beginning with MySQL 8.0.30, this is no longer an issue; the server implements
    `XA PREPARE` as a two-phase operation, which maintains the state of the prepare
    operation between the storage engine and the server, and imposes order of execution
    between the storage engine and the binary log, so that state is not broadcast
    before it is consistent and persistent on the server node.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.30 开始，这不再是一个问题；服务器将`XA PREPARE`实现为一个两阶段操作，它在存储引擎和服务器之间维护准备操作的状态，并在存储引擎和二进制日志之间强制执行执行顺序，以便在服务器节点上的状态在一致和持久之前不进行广播。
- en: You should be aware that, when the same transaction XID is used to execute XA
    transactions sequentially and a break occurs during the processing of [`XA COMMIT
    ... ONE PHASE`](xa-statements.html "15.3.8.1 XA Transaction SQL Statements"),
    it may no longer be possible to synchronize the state between the binary log and
    the storage engine. This can occur if the series of events just described takes
    place after this transaction has been prepared in the storage engine, while the
    `XA COMMIT` statement is still executing. This is a known issue.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，当使用相同的事务 XID 依次执行 XA 事务并且在处理 [`XA COMMIT ... ONE PHASE`](xa-statements.html
    "15.3.8.1 XA Transaction SQL Statements") 过程中发生中断时，可能无法再同步二进制日志和存储引擎之间的状态。如果在此事务在存储引擎中准备后发生了刚描述的一系列事件，而
    `XA COMMIT` 语句仍在执行，则可能会发生这种情况。这是一个已知问题。
- en: The use of replication filters or binary log filters in combination with XA
    transactions is not supported. Filtering of tables could cause an XA transaction
    to be empty on a replica, and empty XA transactions are not supported. Also, with
    the replica's connection metadata repository and applier metadata repository stored
    in [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    tables, which became the default in MySQL 8.0, the internal state of the data
    engine transaction is changed following a filtered XA transaction, and can become
    inconsistent with the replication transaction context state.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持在 XA 事务中使用复制过滤器或二进制日志过滤器。对表的过滤可能导致副本上的 XA 事务为空，并且不支持空的 XA 事务。此外，副本的连接元数据存储库和应用程序元数据存储库存储在
    [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    表中，这在 MySQL 8.0 中成为默认设置，过滤的 XA 事务会改变数据引擎事务的内部状态，并可能与复制事务上下文状态不一致。
- en: The error [`ER_XA_REPLICATION_FILTERS`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_xa_replication_filters)
    is logged whenever an XA transaction is impacted by a replication filter, whether
    or not the transaction was empty as a result. If the transaction is not empty,
    the replica is able to continue running, but you should take steps to discontinue
    the use of replication filters with XA transactions in order to avoid potential
    issues. If the transaction is empty, the replica stops. In that event, the replica
    might be in an undetermined state in which the consistency of the replication
    process might be compromised. In particular, the `gtid_executed` set on a replica
    of the replica might be inconsistent with that on the source. To resolve this
    situation, isolate the source and stop all replication, then check GTID consistency
    across the replication topology. Undo the XA transaction that generated the error
    message, then restart replication.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 XA 事务受到复制过滤器的影响时，无论事务是否为空，都会记录错误 [`ER_XA_REPLICATION_FILTERS`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_xa_replication_filters)。如果事务不为空，则副本可以继续运行，但您应该采取措施停止使用
    XA 事务的复制过滤器以避免潜在问题。如果事务为空，则副本将停止。在这种情况下，副本可能处于一个不确定的状态，其中复制过程的一致性可能会受到损害。特别是，副本的
    `gtid_executed` 集合可能与源端不一致。要解决这种情况，请隔离源端并停止所有复制，然后检查复制拓扑结构中的 GTID 一致性。撤消生成错误消息的
    XA 事务，然后重新启动复制。
- en: XA transactions are considered unsafe for statement-based replication. If two
    XA transactions committed in parallel on the source are being prepared on the
    replica in the inverse order, locking dependencies can occur that cannot be safely
    resolved, and it is possible for replication to fail with deadlock on the replica.
    This situation can occur for a single-threaded or multithreaded replica. When
    [`binlog_format=STATEMENT`](replication-options-binary-log.html#sysvar_binlog_format)
    is set, a warning is issued for DML statements inside XA transactions. When [`binlog_format=MIXED`](replication-options-binary-log.html#sysvar_binlog_format)
    or [`binlog_format=ROW`](replication-options-binary-log.html#sysvar_binlog_format)
    is set, DML statements inside XA transactions are logged using row-based replication,
    and the potential issue is not present.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XA 事务被认为对于基于语句的复制是不安全的。如果在源端并行提交了两个 XA 事务，并且在副本上以相反的顺序准备这些事务，可能会发生无法安全解决的锁定依赖关系，并且复制可能会因副本上的死锁而失败。这种情况可能发生在单线程或多线程副本上。当设置
    [`binlog_format=STATEMENT`](replication-options-binary-log.html#sysvar_binlog_format)
    时，对于 XA 事务中的 DML 语句会发出警告。当设置 [`binlog_format=MIXED`](replication-options-binary-log.html#sysvar_binlog_format)
    或 [`binlog_format=ROW`](replication-options-binary-log.html#sysvar_binlog_format)
    时，XA 事务中的 DML 语句将使用基于行的复制进行记录，潜在问题将不再存在。
