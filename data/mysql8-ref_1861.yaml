- en: 26.6 Restrictions and Limitations on Partitioning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 26.6 关于分区的限制和限制
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-limitations.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-limitations.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-limitations.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-limitations.html)
- en: '[26.6.1 Partitioning Keys, Primary Keys, and Unique Keys](partitioning-limitations-partitioning-keys-unique-keys.html)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.6.1 分区键、主键和唯一键](partitioning-limitations-partitioning-keys-unique-keys.html)'
- en: '[26.6.2 Partitioning Limitations Relating to Storage Engines](partitioning-limitations-storage-engines.html)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.6.2 与存储引擎相关的分区限制](partitioning-limitations-storage-engines.html)'
- en: '[26.6.3 Partitioning Limitations Relating to Functions](partitioning-limitations-functions.html)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[26.6.3 与函数相关的分区限制](partitioning-limitations-functions.html)'
- en: This section discusses current restrictions and limitations on MySQL partitioning
    support.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了 MySQL 分区支持的当前限制和限制。
- en: '**Prohibited constructs. ** The following constructs are not permitted in partitioning
    expressions:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**禁止的结构。** 不允许在分区表达式中使用以下结构：'
- en: Stored procedures, stored functions, loadable functions, or plugins.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储过程、存储函数、可加载函数或插件。
- en: Declared variables or user variables.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明变量或用户变量。
- en: For a list of SQL functions which are permitted in partitioning expressions,
    see [Section 26.6.3, “Partitioning Limitations Relating to Functions”](partitioning-limitations-functions.html
    "26.6.3 Partitioning Limitations Relating to Functions").
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有关允许在分区表达式中使用的 SQL 函数列表，请参见 [第 26.6.3 节，“与函数相关的分区限制”](partitioning-limitations-functions.html
    "26.6.3 与函数相关的分区限制")。
- en: '**Arithmetic and logical operators. ** Use of the arithmetic operators [`+`](arithmetic-functions.html#operator_plus),
    [`-`](arithmetic-functions.html#operator_minus), and [`*`](arithmetic-functions.html#operator_times)
    is permitted in partitioning expressions. However, the result must be an integer
    value or `NULL` (except in the case of `[LINEAR] KEY` partitioning, as discussed
    elsewhere in this chapter; see [Section 26.2, “Partitioning Types”](partitioning-types.html
    "26.2 Partitioning Types"), for more information).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**算术和逻辑运算符。** 在分区表达式中允许使用算术运算符 [`+`](arithmetic-functions.html#operator_plus),
    [`-`](arithmetic-functions.html#operator_minus), 和 [`*`](arithmetic-functions.html#operator_times)。然而，结果必须是整数值或
    `NULL`（除了 `[LINEAR] KEY` 分区，如本章其他地方讨论的那样；有关更多信息，请参见 [第 26.2 节，“分区类型”](partitioning-types.html
    "26.2 分区类型")）。'
- en: The [`DIV`](arithmetic-functions.html#operator_div) operator is also supported;
    the [`/`](arithmetic-functions.html#operator_divide) operator is not permitted.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DIV`](arithmetic-functions.html#operator_div) 运算符也受支持；不允许使用 [`/`](arithmetic-functions.html#operator_divide)
    运算符。'
- en: The bit operators [`|`](bit-functions.html#operator_bitwise-or), [`&`](bit-functions.html#operator_bitwise-and),
    [`^`](bit-functions.html#operator_bitwise-xor), [`<<`](bit-functions.html#operator_left-shift),
    [`>>`](bit-functions.html#operator_right-shift), and [`~`](bit-functions.html#operator_bitwise-invert)
    are not permitted in partitioning expressions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 位运算符 [`|`](bit-functions.html#operator_bitwise-or), [`&`](bit-functions.html#operator_bitwise-and),
    [`^`](bit-functions.html#operator_bitwise-xor), [`<<`](bit-functions.html#operator_left-shift),
    [`>>`](bit-functions.html#operator_right-shift), 和 [`~`](bit-functions.html#operator_bitwise-invert)
    不允许在分区表达式中使用。
- en: '**Server SQL mode. ** Tables employing user-defined partitioning do not preserve
    the SQL mode in effect at the time that they were created. As discussed elsewhere
    in this Manual (see [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server
    SQL Modes")), the results of many MySQL functions and operators may change according
    to the server SQL mode. Therefore, a change in the SQL mode at any time after
    the creation of partitioned tables may lead to major changes in the behavior of
    such tables, and could easily lead to corruption or loss of data. For these reasons,
    *it is strongly recommended that you never change the server SQL mode after creating
    partitioned tables*.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器 SQL 模式。** 使用自定义分区的表不会保留创建时有效的 SQL 模式。如本手册其他地方所述（请参见 [第 7.1.11 节，“服务器
    SQL 模式”](sql-mode.html "7.1.11 服务器 SQL 模式")），许多 MySQL 函数和运算符的结果可能根据服务器 SQL 模式而变化。因此，在创建分区表后任何时候更改
    SQL 模式可能导致这些表行为发生重大变化，并可能轻易导致数据损坏或丢失。因此，*强烈建议您在创建分区表后永远不要更改服务器 SQL 模式*。'
- en: 'For one such change in the server SQL mode making a partitioned tables unusable,
    consider the following [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE
    Statement") statement, which can be executed successfully only if the [`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    mode is in effect:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务器 SQL 模式中的一种更改使分区表无法使用的情况，请考虑以下 [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") 语句，只有在 [`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    模式生效时才能成功执行：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you remove the [`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    server SQL mode after creating `tu`, you may no longer be able to access this
    table:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在创建 `tu` 后移除 [`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    服务器 SQL 模式，则可能无法再访问此表：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: See also [Section 7.1.11, “Server SQL Modes”](sql-mode.html "7.1.11 Server SQL
    Modes").
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [第 7.1.11 节，“服务器 SQL 模式”](sql-mode.html "7.1.11 服务器 SQL 模式")。
- en: Server SQL modes also impact replication of partitioned tables. Disparate SQL
    modes on source and replica can lead to partitioning expressions being evaluated
    differently; this can cause the distribution of data among partitions to be different
    in the source's and replica's copies of a given table, and may even cause inserts
    into partitioned tables that succeed on the source to fail on the replica. For
    best results, you should always use the same server SQL mode on the source and
    on the replica.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器 SQL 模式也会影响分区表的复制。源和副本上不同的 SQL 模式可能导致分区表达式的评估不同；这可能导致数据在源和副本的给定表的副本之间分布不同，并且甚至可能导致在源上成功的分区表插入在副本上失败。为获得最佳结果，您应始终在源和副本上使用相同的服务器
    SQL 模式。
- en: '**Performance considerations. ** Some effects of partitioning operations on
    performance are given in the following list:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能考虑。** 分区操作对性能的一些影响如下：'
- en: '**File system operations. ** Partitioning and repartitioning operations (such
    as [`ALTER TABLE`](alter-table-partition-operations.html "15.1.9.1 ALTER TABLE
    Partition Operations") with `PARTITION BY ...`, `REORGANIZE PARTITION`, or `REMOVE
    PARTITIONING`) depend on file system operations for their implementation. This
    means that the speed of these operations is affected by such factors as file system
    type and characteristics, disk speed, swap space, file handling efficiency of
    the operating system, and MySQL server options and variables that relate to file
    handling. In particular, you should make sure that [`large_files_support`](server-system-variables.html#sysvar_large_files_support)
    is enabled and that [`open_files_limit`](server-system-variables.html#sysvar_open_files_limit)
    is set properly. Partitioning and repartitioning operations involving `InnoDB`
    tables may be made more efficient by enabling [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件系统操作。** 分区和重新分区操作（例如[`ALTER TABLE`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations") 使用 `PARTITION BY ...`, `REORGANIZE
    PARTITION`, 或 `REMOVE PARTITIONING`）的实现取决于文件系统操作。这意味着这些操作的速度受到诸如文件系统类型和特性、磁盘速度、交换空间、操作系统的文件处理效率以及与文件处理相关的
    MySQL 服务器选项和变量的影响。特别是，您应确保 [`large_files_support`](server-system-variables.html#sysvar_large_files_support)
    已启用，并且 [`open_files_limit`](server-system-variables.html#sysvar_open_files_limit)
    已正确设置。涉及 `InnoDB` 表的分区和重新分区操作可能通过启用 [`innodb_file_per_table`](innodb-parameters.html#sysvar_innodb_file_per_table)
    变得更加高效。'
- en: See also [Maximum number of partitions](partitioning-limitations.html#partitioning-limitations-max-partitions
    "Maximum number of partitions").
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅 [最大分区数](partitioning-limitations.html#partitioning-limitations-max-partitions
    "最大分区数")。
- en: '**Table locks. ** Generally, the process executing a partitioning operation
    on a table takes a write lock on the table. Reads from such tables are relatively
    unaffected; pending [`INSERT`](insert.html "15.2.7 INSERT Statement") and [`UPDATE`](update.html
    "15.2.17 UPDATE Statement") operations are performed as soon as the partitioning
    operation has completed. For `InnoDB`-specific exceptions to this limitation,
    see [Partitioning Operations](innodb-online-ddl-operations.html#online-ddl-partitioning
    "Partitioning Operations").'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表锁。** 通常，对表执行分区操作的进程会对表进行写锁定。对这些表的读取相对不受影响；挂起的 [`INSERT`](insert.html "15.2.7 INSERT
    Statement") 和 [`UPDATE`](update.html "15.2.17 UPDATE Statement") 操作将在分区操作完成后立即执行。有关
    `InnoDB` 特定的例外情况，请参阅 [分区操作](innodb-online-ddl-operations.html#online-ddl-partitioning
    "分区操作")。'
- en: '**Indexes; partition pruning. ** As with nonpartitioned tables, proper use
    of indexes can speed up queries on partitioned tables significantly. In addition,
    designing partitioned tables and queries on these tables to take advantage of
    partition pruning can improve performance dramatically. See [Section 26.4, “Partition
    Pruning”](partitioning-pruning.html "26.4 Partition Pruning"), for more information.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引；分区修剪。** 与非分区表一样，正确使用索引可以显着加快对分区表的查询速度。此外，设计分区表和对这些表的查询以利用分区修剪可以显著提高性能。有关更多信息，请参阅[第26.4节，“分区修剪”](partitioning-pruning.html
    "26.4 分区修剪")。'
- en: Index condition pushdown is supported for partitioned tables. See [Section 10.2.1.6,
    “Index Condition Pushdown Optimization”](index-condition-pushdown-optimization.html
    "10.2.1.6 Index Condition Pushdown Optimization").
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持对分区表进行索引条件下推。请参阅[第10.2.1.6节，“索引条件下推优化”](index-condition-pushdown-optimization.html
    "10.2.1.6 索引条件下推优化")。
- en: '**Performance with LOAD DATA. ** In MySQL 8.0, [`LOAD DATA`](load-data.html
    "15.2.9 LOAD DATA Statement") uses buffering to improve performance. You should
    be aware that the buffer uses 130 KB memory per partition to achieve this.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用LOAD DATA的性能。** 在MySQL 8.0中，[`LOAD DATA`](load-data.html "第15.2.9节 LOAD
    DATA语句")使用缓冲区来提高性能。您应该知道，为了实现这一点，每个分区的缓冲区使用130 KB内存。'
- en: '**Maximum number of partitions. ** The maximum possible number of partitions
    for a given table not using the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB
    Cluster 8.0") storage engine is 8192\. This number includes subpartitions.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**最大分区数。** 对于不使用[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")存储引擎的给定表，最大可能的分区数为8192。此数字包括子分区。'
- en: The maximum possible number of user-defined partitions for a table using the
    [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") storage engine
    is determined according to the version of the NDB Cluster software being used,
    the number of data nodes, and other factors. See [NDB and user-defined partitioning](mysql-cluster-nodes-groups.html#mysql-cluster-nodes-groups-user-partitioning
    "NDB and user-defined partitioning"), for more information.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")存储引擎的表的最大可能的用户定义分区数根据使用的NDB
    Cluster软件版本、数据节点数量和其他因素确定。有关更多信息，请参阅[NDB和用户定义分区](mysql-cluster-nodes-groups.html#mysql-cluster-nodes-groups-user-partitioning
    "NDB和用户定义分区")。
- en: 'If, when creating tables with a large number of partitions (but less than the
    maximum), you encounter an error message such as Got error ... from storage engine:
    Out of resources when opening file, you may be able to address the issue by increasing
    the value of the [`open_files_limit`](server-system-variables.html#sysvar_open_files_limit)
    system variable. However, this is dependent on the operating system, and may not
    be possible or advisable on all platforms; see [Section B.3.2.16, “File Not Found
    and Similar Errors”](not-enough-file-handles.html "B.3.2.16 File Not Found and
    Similar Errors"), for more information. In some cases, using large numbers (hundreds)
    of partitions may also not be advisable due to other concerns, so using more partitions
    does not automatically lead to better results.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在创建具有大量分区的表（但少于最大值）时遇到错误消息，例如从存储引擎获取错误...：打开文件时资源不足，您可以通过增加[`open_files_limit`](server-system-variables.html#sysvar_open_files_limit)系统变量的值来解决此问题。但是，这取决于操作系统，并且在所有平台上可能不可行或不可取；有关更多信息，请参阅[第B.3.2.16节，“文件未找到和类似错误”](not-enough-file-handles.html
    "B.3.2.16 文件未找到和类似错误")。在某些情况下，由于其他原因，使用大量（数百个）分区也可能不可取，因此使用更多分区并不会自动导致更好的结果。
- en: See also [File system operations](partitioning-limitations.html#partitioning-limitations-file-system-ops
    "File system operations").
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[文件系统操作](partitioning-limitations.html#partitioning-limitations-file-system-ops
    "文件系统操作")。
- en: '**Foreign keys not supported for partitioned InnoDB tables. ** Partitioned
    tables using the [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine") storage engine do not support foreign keys. More specifically,
    this means that the following two statements are true:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**不支持对分区InnoDB表使用外键。** 使用[`InnoDB`](innodb-storage-engine.html "第17章 InnoDB存储引擎")存储引擎的分区表不支持外键。更具体地说，这意味着以下两个语句是正确的：'
- en: No definition of an `InnoDB` table employing user-defined partitioning may contain
    foreign key references; no `InnoDB` table whose definition contains foreign key
    references may be partitioned.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不得包含外键引用的`InnoDB`表的定义使用用户定义的分区；包含外键引用的`InnoDB`表的定义不得分区。
- en: No `InnoDB` table definition may contain a foreign key reference to a user-partitioned
    table; no `InnoDB` table with user-defined partitioning may contain columns referenced
    by foreign keys.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何`InnoDB`表定义都不能包含对用户分区表的外键引用；任何具有用户定义分区的`InnoDB`表都不能包含被外键引用的列。
- en: The scope of the restrictions just listed includes all tables that use the `InnoDB`
    storage engine. [`CREATE TABLE`](create-table-foreign-keys.html "15.1.20.5 FOREIGN
    KEY Constraints") and [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    statements that would result in tables violating these restrictions are not allowed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚列出的限制范围包括所有使用`InnoDB`存储引擎的表。不允许创建[`CREATE TABLE`](create-table-foreign-keys.html
    "15.1.20.5 外键约束")和[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")语句导致违反这些限制的表。
- en: '**ALTER TABLE ... ORDER BY. ** An `ALTER TABLE ... ORDER BY *`column`*` statement
    run against a partitioned table causes ordering of rows only within each partition.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**ALTER TABLE ... ORDER BY。** 对分区表运行的`ALTER TABLE ... ORDER BY *`column`*`语句仅导致每个分区内的行排序。'
- en: '**ADD COLUMN ... ALGORITHM=INSTANT. ** Once you perform [`ALTER TABLE ... ADD
    COLUMN ... ALGORITHM=INSTANT`](alter-table.html "15.1.9 ALTER TABLE Statement")
    on a partitioned table, it is no longer possible to exchange partitions with this
    table.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**ADD COLUMN ... ALGORITHM=INSTANT。** 一旦在分区表上执行[`ALTER TABLE ... ADD COLUMN
    ... ALGORITHM=INSTANT`](alter-table.html "15.1.9 ALTER TABLE语句")，就不再可能与该表交换分区。'
- en: '**Effects on REPLACE statements by modification of primary keys. ** It can
    be desirable in some cases (see [Section 26.6.1, “Partitioning Keys, Primary Keys,
    and Unique Keys”](partitioning-limitations-partitioning-keys-unique-keys.html
    "26.6.1 Partitioning Keys, Primary Keys, and Unique Keys")) to modify a table''s
    primary key. Be aware that, if your application uses [`REPLACE`](replace.html
    "15.2.12 REPLACE Statement") statements and you do this, the results of these
    statements can be drastically altered. See [Section 15.2.12, “REPLACE Statement”](replace.html
    "15.2.12 REPLACE Statement"), for more information and an example.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过修改主键对REPLACE语句的影响。** 在某些情况下可能是可取的（参见[第26.6.1节，“分区键、主键和唯一键”](partitioning-limitations-partitioning-keys-unique-keys.html
    "26.6.1 分区键、主键和唯一键")），修改表的主键。请注意，如果您的应用程序使用[`REPLACE`](replace.html "15.2.12 REPLACE语句")语句并且您这样做，这些语句的结果可能会发生
    drastical 改变。有关更多信息和示例，请参见[第15.2.12节，“REPLACE语句”](replace.html "15.2.12 REPLACE语句")。'
- en: '**FULLTEXT indexes. ** Partitioned tables do not support `FULLTEXT` indexes
    or searches.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**全文索引。** 分区表不支持`FULLTEXT`索引或搜索。'
- en: '**Spatial columns. ** Columns with spatial data types such as `POINT` or `GEOMETRY`
    cannot be used in partitioned tables.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**空间列。** 具有空间数据类型（如`POINT`或`GEOMETRY`）的列不能在分区表中使用。'
- en: '**Temporary tables. ** Temporary tables cannot be partitioned.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**临时表。** 临时表不能被分区。'
- en: '**Log tables. ** It is not possible to partition the log tables; an [`ALTER
    TABLE ... PARTITION BY ...`](alter-table-partition-operations.html "15.1.9.1 ALTER
    TABLE Partition Operations") statement on such a table fails with an error.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志表。** 无法对日志表进行分区；对这样的表运行[`ALTER TABLE ... PARTITION BY ...`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE分区操作")语句会失败并显示错误。'
- en: '**Data type of partitioning key. ** A partitioning key must be either an integer
    column or an expression that resolves to an integer. Expressions employing [`ENUM`](enum.html
    "13.3.5 The ENUM Type") columns cannot be used. The column or expression value
    may also be `NULL`; see [Section 26.2.7, “How MySQL Partitioning Handles NULL”](partitioning-handling-nulls.html
    "26.2.7 How MySQL Partitioning Handles NULL").'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**分区键的数据类型。** 分区键必须是整数列或解析为整数的表达式。不能使用包含[`ENUM`](enum.html "13.3.5 ENUM类型")列的表达式。列或表达式的值也可以是`NULL`；请参见[第26.2.7节，“MySQL分区如何处理NULL”](partitioning-handling-nulls.html
    "26.2.7 MySQL分区如何处理NULL")。'
- en: 'There are two exceptions to this restriction:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个限制有两个例外：
- en: 'When partitioning by [`LINEAR`] `KEY`, it is possible to use columns of any
    valid MySQL data type other than [`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types") or [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") as partitioning
    keys, because the internal key-hashing functions produce the correct data type
    from these types. For example, the following two [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statements are valid:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当通过[`LINEAR`] `KEY`进行分区时，可以使用除[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")或[`BLOB`](blob.html
    "13.3.4 BLOB和TEXT类型")之外的任何有效的MySQL数据类型作为分区键，因为内部键哈希函数会从这些类型中生成正确的数据类型。例如，以下两个[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE语句")语句是有效的：
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When partitioning by `RANGE COLUMNS` or `LIST COLUMNS`, it is possible to use
    string, [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"),
    and [`DATETIME`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")
    columns. For example, each of the following [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statements is valid:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用`RANGE COLUMNS`或`LIST COLUMNS`进行分区时，可以使用字符串、[`DATE`](datetime.html "13.2.2 日期、日期时间和时间戳类型")和[`DATETIME`](datetime.html
    "13.2.2 日期、日期时间和时间戳类型")列。例如，以下每个[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE语句")语句都是有效的：
- en: '[PRE3]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Neither of the preceding exceptions applies to [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") or [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")
    column types.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前述两个例外情况均不适用于[`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")或[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")列类型。
- en: '**Subqueries. ** A partitioning key may not be a subquery, even if that subquery
    resolves to an integer value or `NULL`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**子查询。** 分区键不能是子查询，即使该子查询解析为整数值或`NULL`。'
- en: '**Column index prefixes not supported for key partitioning. ** When creating
    a table that is partitioned by key, any columns in the partitioning key which
    use column prefixes are not used in the table''s partitioning function. Consider
    the following [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")
    statement, which has three [`VARCHAR`](char.html "13.3.2 The CHAR and VARCHAR
    Types") columns, and whose primary key uses all three columns and specifies prefixes
    for two of them:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**不支持列索引前缀用于键分区。** 在创建按键分区的表时，分区键中使用列前缀的任何列都不会用于表的分区函数。考虑以下[`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE语句")语句，其中有三个[`VARCHAR`](char.html "13.3.2 CHAR和VARCHAR类型")列，主键使用了所有三列，并为其中两列指定了前缀：'
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This statement is accepted, but the resulting table is actually created as
    if you had issued the following statement, using only the primary key column which
    does not include a prefix (column `b`) for the partitioning key:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句被接受，但实际创建的表实际上是如同您发出了以下语句一样创建的，仅使用了不包含前缀的主键列（列`b`）作为分区键：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Prior to MySQL 8.0.21, no warning was issued or any other indication provided
    that this occurred, except in the event that all columns specified for the partitioning
    key used prefixes, in which case the statement failed, but with a misleading error
    message, as shown here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.21之前，没有发出警告或提供任何其他指示表明发生了这种情况，除非所有指定为分区键的列都使用了前缀，此时语句会失败，但会显示一个误导性的错误消息，如下所示：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This also occurred when performing [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") or when upgrading such tables.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")或升级此类表时也会发生这种情况。
- en: 'This permissive behavior is deprecated as of MySQL 8.0.21 (and is subject to
    removal in a future version of MySQL). Beginning with MySQL 8.0.21, using one
    or more columns having a prefix in the partitioning key results in a warning for
    each such column, as shown here:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.21开始，不再支持这种宽松行为（并且可能在将来的MySQL版本中删除）。从MySQL 8.0.21开始，使用一个或多个具有前缀的列作为分区键会对每个这样的列产生警告，如下所示：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This includes cases in which the columns used in the partitioning function are
    defined implicitly as those in the table's primary key by employing an empty `PARTITION
    BY KEY()` clause.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括分区函数中使用的列被隐式定义为通过使用空的`PARTITION BY KEY()`子句来定义表的主键中的列的情况。
- en: 'In MySQL 8.0.21 and later, if all columns specified for the partitioning key
    employ prefixes, the `CREATE TABLE` statement used fails with an error message
    that identifies the issue correctly:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.21及更高版本中，如果分区键指定的所有列都使用了前缀，则使用的`CREATE TABLE`语句将因错误消息而失败，该消息正确标识了问题：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For general information about partitioning tables by key, see [Section 26.2.5,
    “KEY Partitioning”](partitioning-key.html "26.2.5 KEY Partitioning").
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有关按键分区表的一般信息，请参见[第26.2.5节，“键分区”](partitioning-key.html "26.2.5 键分区")。
- en: '**Issues with subpartitions. ** Subpartitions must use `HASH` or `KEY` partitioning.
    Only `RANGE` and `LIST` partitions may be subpartitioned; `HASH` and `KEY` partitions
    cannot be subpartitioned.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**子分区存在问题。** 子分区必须使用`HASH`或`KEY`分区。只有`RANGE`和`LIST`分区可以进行子分区；`HASH`和`KEY`分区不能进行子分区。'
- en: '`SUBPARTITION BY KEY` requires that the subpartitioning column or columns be
    specified explicitly, unlike the case with `PARTITION BY KEY`, where it can be
    omitted (in which case the table''s primary key column is used by default). Consider
    the table created by this statement:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`SUBPARTITION BY KEY`要求明确指定子分区列或列，不同于`PARTITION BY KEY`的情况，后者可以省略（在这种情况下，默认使用表的主键列）。考虑通过此语句创建的表：'
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can create a table having the same columns, partitioned by `KEY`, using
    a statement such as this one:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过类似于以下语句创建一个具有相同列、按`KEY`分区的表：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The previous statement is treated as though it had been written like this,
    with the table''s primary key column used as the partitioning column:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语句被视为如下所示编写，其中表的主键列用作分区列：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'However, the following statement that attempts to create a subpartitioned table
    using the default column as the subpartitioning column fails, and the column must
    be specified for the statement to succeed, as shown here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尝试使用默认列作为子分区列创建子分区表的以下语句将失败，必须为语句指定列才能成功，如下所示：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is a known issue (see Bug #51470).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '这是一个已知问题（参见Bug #51470）。'
- en: '**DATA DIRECTORY and INDEX DIRECTORY options. ** Table-level `DATA DIRECTORY`
    and `INDEX DIRECTORY` options are ignored (see Bug #32091). You can employ these
    options for individual partitions or subpartitions of [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") tables. As of MySQL 8.0.21, the directory
    specified in a `DATA DIRECTORY` clause must be known to `InnoDB`. For more information,
    see [Using the DATA DIRECTORY Clause](innodb-create-table-external.html#innodb-create-table-external-data-directory
    "Using the DATA DIRECTORY Clause").'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据目录和索引目录选项。** 忽略表级`DATA DIRECTORY`和`INDEX DIRECTORY`选项（参见Bug #32091）。您可以为[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")表的各个分区或子分区使用这些选项。截至MySQL 8.0.21，`DATA DIRECTORY`子句中指定的目录必须为`InnoDB`所知。有关更多信息，请参见[使用DATA
    DIRECTORY子句](innodb-create-table-external.html#innodb-create-table-external-data-directory
    "使用DATA DIRECTORY子句")。'
- en: '**Repairing and rebuilding partitioned tables. ** The statements [`CHECK TABLE`](check-table.html
    "15.7.3.2 CHECK TABLE Statement"), [`OPTIMIZE TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE
    TABLE Statement"), [`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE
    Statement"), and [`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement")
    are supported for partitioned tables.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**修复和重建分区表。** [`CHECK TABLE`](check-table.html "15.7.3.2 CHECK TABLE Statement")、[`OPTIMIZE
    TABLE`](optimize-table.html "15.7.3.4 OPTIMIZE TABLE Statement")、[`ANALYZE TABLE`](analyze-table.html
    "15.7.3.1 ANALYZE TABLE Statement")和[`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR
    TABLE Statement")语句支持分区表。'
- en: In addition, you can use `ALTER TABLE ... REBUILD PARTITION` to rebuild one
    or more partitions of a partitioned table; `ALTER TABLE ... REORGANIZE PARTITION`
    also causes partitions to be rebuilt. See [Section 15.1.9, “ALTER TABLE Statement”](alter-table.html
    "15.1.9 ALTER TABLE Statement"), for more information about these two statements.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以使用`ALTER TABLE ... REBUILD PARTITION`来重建分区表的一个或多个分区；`ALTER TABLE ... REORGANIZE
    PARTITION`也会导致分区重建。有关这两个语句的更多信息，请参见[第15.1.9节，“ALTER TABLE Statement”](alter-table.html
    "15.1.9 ALTER TABLE Statement")。
- en: '`ANALYZE`, `CHECK`, `OPTIMIZE`, `REPAIR`, and `TRUNCATE` operations are supported
    with subpartitions. See [Section 15.1.9.1, “ALTER TABLE Partition Operations”](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations").'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`ANALYZE`、`CHECK`、`OPTIMIZE`、`REPAIR`和`TRUNCATE`操作支持子分区。请参见[第15.1.9.1节，“ALTER
    TABLE Partition Operations”](alter-table-partition-operations.html "15.1.9.1 ALTER
    TABLE Partition Operations")。'
- en: '**File name delimiters for partitions and subpartitions. ** Table partition
    and subpartition file names include generated delimiters such as `#P#` and `#SP#`.
    The lettercase of such delimiters can vary and should not be depended upon.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**用于分区和子分区的文件名分隔符。** 表分区和子分区文件名包括生成的分隔符，如`#P#`和`#SP#`。此类分隔符的大小写可能有所不同，不应依赖于此。'
