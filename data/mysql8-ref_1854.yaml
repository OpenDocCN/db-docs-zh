- en: 26.3.1 Management of RANGE and LIST Partitions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 26.3.1 范围和列表分区的管理
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-management-range-list.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-management-range-list.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/partitioning-management-range-list.html](https://dev.mysql.com/doc/refman/8.0/en/partitioning-management-range-list.html)
- en: Adding and dropping of range and list partitions are handled in a similar fashion,
    so we discuss the management of both sorts of partitioning in this section. For
    information about working with tables that are partitioned by hash or key, see
    [Section 26.3.2, “Management of HASH and KEY Partitions”](partitioning-management-hash-key.html
    "26.3.2 Management of HASH and KEY Partitions").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 添加和删除范围和列表分区的操作方式类似，因此我们在本节讨论了这两种分区管理方式。 有关处理按哈希或键分区的表的信息，请参阅 [第 26.3.2 节，“HASH
    和 KEY 分区的管理”](partitioning-management-hash-key.html "26.3.2 HASH 和 KEY 分区的管理")。
- en: 'Dropping a partition from a table that is partitioned by either `RANGE` or
    by `LIST` can be accomplished using the [`ALTER TABLE`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations") statement with the `DROP PARTITION`
    option. Suppose that you have created a table that is partitioned by range and
    then populated with 10 records using the following [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") and [`INSERT`](insert.html "15.2.7 INSERT Statement")
    statements:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用带有 `DROP PARTITION` 选项的 [`ALTER TABLE`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations") 语句，可以删除按 `RANGE` 或 `LIST` 分区的表中的分区。
    假设您已创建了一个按范围分区的表，然后使用以下 [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE
    Statement") 和 [`INSERT`](insert.html "15.2.7 INSERT Statement") 语句插入了 10 条记录：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see which items should have been inserted into partition `p2` as shown
    here:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看应该插入到分区 `p2` 中的项目，如下所示：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also get this information using partition selection, as shown here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用分区选择获取此信息，如下所示：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See [Section 26.5, “Partition Selection”](partitioning-selection.html "26.5 Partition
    Selection"), for more information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见 [第 26.5 节，“分区选择”](partitioning-selection.html "26.5 分区选择")。
- en: 'To drop the partition named `p2`, execute the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除名为 `p2` 的分区，请执行以下命令：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`NDBCLUSTER`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") storage
    engine does not support `ALTER TABLE ... DROP PARTITION`. It does, however, support
    the other partitioning-related extensions to [`ALTER TABLE`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations") that are described in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NDBCLUSTER`](mysql-cluster.html "第 25 章 MySQL NDB Cluster 8.0") 存储引擎不支持 `ALTER
    TABLE ... DROP PARTITION`。 但是，它支持本章中描述的与分区相关的其他 [`ALTER TABLE`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations") 扩展。'
- en: 'It is very important to remember that, *when you drop a partition, you also
    delete all the data that was stored in that partition*. You can see that this
    is the case by re-running the previous [`SELECT`](select.html "15.2.13 SELECT
    Statement") query:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的一点是，*当您删除一个分区时，也会删除存储在该分区中的所有数据*。 通过重新运行先前的 [`SELECT`](select.html "15.2.13 SELECT
    Statement") 查询，您可以看到这一点：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`DROP PARTITION` is supported by native partitioning in-place APIs and may
    be used with `ALGORITHM={COPY|INPLACE}`. `DROP PARTITION` with `ALGORITHM=INPLACE`
    deletes data stored in the partition and drops the partition. However, `DROP PARTITION`
    with `ALGORITHM=COPY` or [`old_alter_table=ON`](server-system-variables.html#sysvar_old_alter_table)
    rebuilds the partitioned table and attempts to move data from the dropped partition
    to another partition with a compatible `PARTITION ... VALUES` definition. Data
    that cannot be moved to another partition is deleted.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`DROP PARTITION` 受本地分区就地 API 支持，可与 `ALGORITHM={COPY|INPLACE}` 一起使用。 使用 `ALGORITHM=INPLACE`
    的 `DROP PARTITION` 删除存储在分区中的数据并删除该分区。 但是，使用 `ALGORITHM=COPY` 或 [`old_alter_table=ON`](server-system-variables.html#sysvar_old_alter_table)
    的 `DROP PARTITION` 会重建分区表，并尝试将无法移动到另一个具有兼容 `PARTITION ... VALUES` 定义的分区的数据移动到另一个分区。
    无法移动到另一个分区的数据将被删除。'
- en: Because of this, you must have the [`DROP`](privileges-provided.html#priv_drop)
    privilege for a table before you can execute `ALTER TABLE ... DROP PARTITION`
    on that table.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在执行 `ALTER TABLE ... DROP PARTITION` 之前，您必须具有表的 [`DROP`](privileges-provided.html#priv_drop)
    权限。
- en: If you wish to drop all data from all partitions while preserving the table
    definition and its partitioning scheme, use the [`TRUNCATE TABLE`](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement") statement. (See [Section 15.1.37, “TRUNCATE
    TABLE Statement”](truncate-table.html "15.1.37 TRUNCATE TABLE Statement").)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望删除所有分区中的所有数据，同时保留表定义及其分区方案，请使用[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement")语句。（请参阅[第15.1.37节，“TRUNCATE TABLE Statement”](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement")。）
- en: If you intend to change the partitioning of a table *without* losing data, use
    `ALTER TABLE ... REORGANIZE PARTITION` instead. See below or in [Section 15.1.9,
    “ALTER TABLE Statement”](alter-table.html "15.1.9 ALTER TABLE Statement"), for
    information about `REORGANIZE PARTITION`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算更改表的分区而*不*丢失数据，请使用`ALTER TABLE ... REORGANIZE PARTITION`。有关`REORGANIZE
    PARTITION`的信息，请参见下文或[第15.1.9节，“ALTER TABLE Statement”](alter-table.html "15.1.9 ALTER
    TABLE Statement")。
- en: 'If you now execute a [`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW
    CREATE TABLE Statement") statement, you can see how the partitioning makeup of
    the table has been changed:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在执行[`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW CREATE TABLE
    Statement")语句，您可以看到表的分区结构已经发生了变化：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you insert new rows into the changed table with `purchased` column values
    between `''1995-01-01''` and `''2004-12-31''` inclusive, those rows are stored
    in partition `p3`. You can verify this as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在更改后的表中插入具有`purchased`列值在`'1995-01-01'`和`'2004-12-31'`之间（包括这两个日期）的新行时，这些行将存储在分区`p3`中。您可以按照以下步骤验证这一点：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The number of rows dropped from the table as a result of `ALTER TABLE ... DROP
    PARTITION` is not reported by the server as it would be by the equivalent [`DELETE`](delete.html
    "15.2.2 DELETE Statement") query.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于服务器不会像等效的[`DELETE`](delete.html "15.2.2 DELETE Statement")查询那样报告由于`ALTER TABLE
    ... DROP PARTITION`而从表中删除的行数。
- en: 'Dropping `LIST` partitions uses exactly the same `ALTER TABLE ... DROP PARTITION`
    syntax as used for dropping `RANGE` partitions. However, there is one important
    difference in the effect this has on your use of the table afterward: You can
    no longer insert into the table any rows having any of the values that were included
    in the value list defining the deleted partition. (See [Section 26.2.2, “LIST
    Partitioning”](partitioning-list.html "26.2.2 LIST Partitioning"), for an example.)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 删除`LIST`分区与删除`RANGE`分区使用完全相同的`ALTER TABLE ... DROP PARTITION`语法。然而，这对之后对表的使用有一个重要的区别：您不能再向表中插入具有被删除分区定义的值列表中的任何值的行。（请参阅[第26.2.2节，“LIST分区”](partitioning-list.html
    "26.2.2 LIST Partitioning")，以获取示例。）
- en: 'To add a new range or list partition to a previously partitioned table, use
    the `ALTER TABLE ... ADD PARTITION` statement. For tables which are partitioned
    by `RANGE`, this can be used to add a new range to the end of the list of existing
    partitions. Suppose that you have a partitioned table containing membership data
    for your organization, which is defined as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要向先前分区的表添加新的范围或列表分区，请使用`ALTER TABLE ... ADD PARTITION`语句。对于按`RANGE`分区的表，这可以用于在现有分区列表的末尾添加新的范围。假设您有一个包含组织成员数据的分区表，其定义如下：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Suppose further that the minimum age for members is 16\. As the calendar approaches
    the end of 2015, you realize that you must soon be prepared to admit members who
    were born in 2000 (and later). You can modify the `members` table to accommodate
    new members born in the years 2000 to 2010 as shown here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步假设成员的最小年龄为16岁。随着日历接近2015年底，您意识到必须很快准备好接纳2000年（及以后）出生的成员。您可以修改`members`表以适应在2000年至2010年出生的新成员，如下所示：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With tables that are partitioned by range, you can use `ADD PARTITION` to add
    new partitions to the high end of the partitions list only. Trying to add a new
    partition in this manner between or before existing partitions results in an error
    as shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于按范围分区的表，您可以使用`ADD PARTITION`仅向分区列表的高端添加新分区。尝试以这种方式在现有分区之间或之前添加新分区会导致错误，如下所示：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can work around this problem by reorganizing the first partition into two
    new ones that split the range between them, like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将第一个分区重新组织为两个新分区，将它们之间的范围分割，来解决这个问题，就像这样：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Using [`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW CREATE TABLE
    Statement") you can see that the `ALTER TABLE` statement has had the desired effect:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW CREATE TABLE
    Statement")，您可以看到`ALTER TABLE`语句已经产生了预期的效果：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also [Section 15.1.9.1, “ALTER TABLE Partition Operations”](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations").
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[Section 15.1.9.1, “ALTER TABLE Partition Operations”](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations")。
- en: 'You can also use `ALTER TABLE ... ADD PARTITION` to add new partitions to a
    table that is partitioned by `LIST`. Suppose a table `tt` is defined using the
    following [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")
    statement:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`ALTER TABLE ... ADD PARTITION`来向由`LIST`分区的表中添加新分区。假设一个表`tt`是使用以下[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句定义的：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can add a new partition in which to store rows having the `data` column
    values `7`, `14`, and `21` as shown:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以添加一个新分区，用于存储具有`data`列值`7`、`14`和`21`的行，如下所示：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Keep in mind that you *cannot* add a new `LIST` partition encompassing any
    values that are already included in the value list of an existing partition. If
    you attempt to do so, an error results:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，*不能*添加一个新的`LIST`分区，其中包含已经包含在现有分区值列表中的任何值。如果尝试这样做，将导致错误：
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Because any rows with the `data` column value `12` have already been assigned
    to partition `p1`, you cannot create a new partition on table `tt` that includes
    `12` in its value list. To accomplish this, you could drop `p1`, and add `np`
    and then a new `p1` with a modified definition. However, as discussed earlier,
    this would result in the loss of all data stored in `p1`—and it is often the case
    that this is not what you really want to do. Another solution might appear to
    be to make a copy of the table with the new partitioning and to copy the data
    into it using [`CREATE TABLE ... SELECT ...`](create-table.html "15.1.20 CREATE
    TABLE Statement"), then drop the old table and rename the new one, but this could
    be very time-consuming when dealing with a large amounts of data. This also might
    not be feasible in situations where high availability is a requirement.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因为具有`data`列值`12`的任何行已经分配给了分区`p1`，所以无法在表`tt`上创建一个包含`12`在其值列表中的新分区。为了实现这一点，您可以删除`p1`，然后添加`np`，然后一个新的`p1`，并修改定义。然而，正如前面讨论的，这将导致所有存储在`p1`中的数据丢失，而且通常情况下这并不是您真正想要做的。另一个解决方案可能是制作一个具有新分区的表的副本，并使用[`CREATE
    TABLE ... SELECT ...`](create-table.html "15.1.20 CREATE TABLE Statement")将数据复制到其中，然后删除旧表并重命名新表，但是在处理大量数据时可能非常耗时。在需要高可用性的情况下，这也可能不可行。
- en: 'You can add multiple partitions in a single `ALTER TABLE ... ADD PARTITION`
    statement as shown here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在单个`ALTER TABLE ... ADD PARTITION`语句中添加多个分区，如下所示：
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Fortunately, MySQL''s partitioning implementation provides ways to redefine
    partitions without losing data. Let us look first at a couple of simple examples
    involving `RANGE` partitioning. Recall the `members` table which is now defined
    as shown here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，MySQL的分区实现提供了重新定义分区而不丢失数据的方法。让我们首先看一下涉及`RANGE`分区的几个简单示例。回想一下现在定义如下的`members`表：
- en: '[PRE16]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Suppose that you would like to move all rows representing members born before
    1960 into a separate partition. As we have already seen, this cannot be done using
    [`ALTER TABLE ... ADD PARTITION`](alter-table-partition-operations.html "15.1.9.1 ALTER
    TABLE Partition Operations"). However, you can use another partition-related extension
    to [`ALTER TABLE`](alter-table-partition-operations.html "15.1.9.1 ALTER TABLE
    Partition Operations") to accomplish this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想将所有出生在1960年之前的会员行移动到一个单独的分区中。正如我们已经看到的，这不能通过[`ALTER TABLE ... ADD PARTITION`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations")来实现。然而，您可以使用另一个与分区相关的扩展来[`ALTER TABLE`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations")来完成这个任务：
- en: '[PRE17]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In effect, this command splits partition `p0` into two new partitions `s0` and
    `s1`. It also moves the data that was stored in `p0` into the new partitions according
    to the rules embodied in the two `PARTITION ... VALUES ...` clauses, so that `s0`
    contains only those records for which [`YEAR(dob)`](date-and-time-functions.html#function_year)
    is less than 1960 and `s1` contains those rows in which [`YEAR(dob)`](date-and-time-functions.html#function_year)
    is greater than or equal to 1960 but less than 1970.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个命令将分区`p0`分割成两个新分区`s0`和`s1`。它还根据两个`PARTITION ... VALUES ...`子句中体现的规则，将存储在`p0`中的数据移动到新分区中，因此`s0`只包含那些[`YEAR(dob)`](date-and-time-functions.html#function_year)小于1960的记录，而`s1`包含那些[`YEAR(dob)`](date-and-time-functions.html#function_year)大于或等于1960但小于1970的行。
- en: 'A `REORGANIZE PARTITION` clause may also be used for merging adjacent partitions.
    You can reverse the effect of the previous statement on the `members` table as
    shown here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`REORGANIZE PARTITION`子句也可用于合并相邻分区。您可以撤销对`members`表的上一个语句的影响，如下所示：'
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: No data is lost in splitting or merging partitions using `REORGANIZE PARTITION`.
    In executing the above statement, MySQL moves all of the records that were stored
    in partitions `s0` and `s1` into partition `p0`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`REORGANIZE PARTITION`拆分或合并分区时不会丢失任何数据。在执行上述语句时，MySQL将所有存储在分区`s0`和`s1`中的记录移动到分区`p0`中。
- en: 'The general syntax for `REORGANIZE PARTITION` is shown here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`REORGANIZE PARTITION`的一般语法如下所示：'
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here, *`tbl_name`* is the name of the partitioned table, and *`partition_list`*
    is a comma-separated list of names of one or more existing partitions to be changed.
    *`partition_definitions`* is a comma-separated list of new partition definitions,
    which follow the same rules as for the *`partition_definitions`* list used in
    [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement"). You are
    not limited to merging several partitions into one, or to splitting one partition
    into many, when using `REORGANIZE PARTITION`. For example, you can reorganize
    all four partitions of the `members` table into two, like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*`tbl_name`*是分区表的名称，*`partition_list`*是要更改的一个或多个现有分区的名称的逗号分隔列表。*`partition_definitions`*是一个逗号分隔的新分区定义列表，遵循与[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")中使用的*`partition_definitions`*列表相同的规则。在使用`REORGANIZE
    PARTITION`时，您不限于将多个分区合并为一个，或将一个分区分割为多个。例如，您可以将`members`表的四个分区重新组织为两个，如下所示：
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can also use `REORGANIZE PARTITION` with tables that are partitioned by
    `LIST`. Let us return to the problem of adding a new partition to the list-partitioned
    `tt` table and failing because the new partition had a value that was already
    present in the value-list of one of the existing partitions. We can handle this
    by adding a partition that contains only nonconflicting values, and then reorganizing
    the new partition and the existing one so that the value which was stored in the
    existing one is now moved to the new one:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在按`LIST`进行分区的表上使用`REORGANIZE PARTITION`。让我们回到向列表分区的`tt`表添加新分区的问题，并因为新分区的值已经存在于现有分区的值列表中而失败。我们可以通过添加一个仅包含非冲突值的分区，然后重新组织新分区和现有分区，使存储在现有分区中的值现在移动到新分区来处理这个问题：
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here are some key points to keep in mind when using `ALTER TABLE ... REORGANIZE
    PARTITION` to repartition tables that are partitioned by `RANGE` or `LIST`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`ALTER TABLE ... REORGANIZE PARTITION`重新分区按`RANGE`或`LIST`进行分区的表时，请记住以下要点：
- en: The `PARTITION` options used to determine the new partitioning scheme are subject
    to the same rules as those used with a [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") statement.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于确定新分区方案的`PARTITION`选项受与[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement")语句相同的规则约束。
- en: A new `RANGE` partitioning scheme cannot have any overlapping ranges; a new
    `LIST` partitioning scheme cannot have any overlapping sets of values.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的`RANGE`分区方案不能有任何重叠的范围；新的`LIST`分区方案不能有任何重叠的值集。
- en: The combination of partitions in the *`partition_definitions`* list should account
    for the same range or set of values overall as the combined partitions named in
    the *`partition_list`*.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*`partition_definitions`*列表中的分区组合应该总体上与*`partition_list`*中命名的组合分区涵盖相同的范围或值集。'
- en: For example, partitions `p1` and `p2` together cover the years 1980 through
    1999 in the `members` table used as an example in this section. Any reorganization
    of these two partitions should cover the same range of years overall.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，在本节示例中使用的`members`表中，分区`p1`和`p2`一起涵盖1980年至1999年的年份。对这两个分区的任何重新组织应该总体上涵盖相同的年份范围。
- en: For tables partitioned by `RANGE`, you can reorganize only adjacent partitions;
    you cannot skip range partitions.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于按`RANGE`进行分区的表，您只能重新组织相邻分区；您不能跳过范围分区。
- en: For instance, you could not reorganize the example `members` table using a statement
    beginning with `ALTER TABLE members REORGANIZE PARTITION p0,p2 INTO ...` because
    `p0` covers the years prior to 1970 and `p2` the years from 1990 through 1999
    inclusive, so these are not adjacent partitions. (You cannot skip partition `p1`
    in this case.)
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，您不能使用以`ALTER TABLE members REORGANIZE PARTITION p0,p2 INTO ...`开头的语句重新组织示例`members`表，因为`p0`涵盖1970年之前的年份，而`p2`涵盖1990年至1999年的年份，因此这些不是相邻的分区。（在这种情况下，您不能跳过分区`p1`。）
- en: 'You cannot use `REORGANIZE PARTITION` to change the type of partitioning used
    by the table (for example, you cannot change `RANGE` partitions to `HASH` partitions
    or the reverse). You also cannot use this statement to change the partitioning
    expression or column. To accomplish either of these tasks without dropping and
    re-creating the table, you can use [`ALTER TABLE ... PARTITION BY ...`](alter-table-partition-operations.html
    "15.1.9.1 ALTER TABLE Partition Operations"), as shown here:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能使用`REORGANIZE PARTITION`来改变表使用的分区类型（例如，你不能将`RANGE`分区更改为`HASH`分区或反之）。你也不能使用这个语句来更改分区表达式或列。要完成这两项任务而不必删除和重新创建表，你可以使用[`ALTER
    TABLE ... PARTITION BY ...`](alter-table-partition-operations.html "15.1.9.1 ALTER
    TABLE Partition Operations")，如下所示：
- en: '[PRE22]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
