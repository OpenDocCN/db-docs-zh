- en: 17.7.3 Locks Set by Different SQL Statements in InnoDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.7.3 InnoDB 中不同 SQL 语句设置的锁
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-locks-set.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-locks-set.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-locks-set.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-locks-set.html)
- en: A [locking read](glossary.html#glos_locking_read "locking read"), an [`UPDATE`](update.html
    "15.2.17 UPDATE Statement"), or a [`DELETE`](delete.html "15.2.2 DELETE Statement")
    generally set record locks on every index record that is scanned in the processing
    of an SQL statement. It does not matter whether there are `WHERE` conditions in
    the statement that would exclude the row. `InnoDB` does not remember the exact
    `WHERE` condition, but only knows which index ranges were scanned. The locks are
    normally [next-key locks](glossary.html#glos_next_key_lock "next-key lock") that
    also block inserts into the “gap” immediately before the record. However, [gap
    locking](glossary.html#glos_gap_lock "gap lock") can be disabled explicitly, which
    causes next-key locking not to be used. For more information, see [Section 17.7.1,
    “InnoDB Locking”](innodb-locking.html "17.7.1 InnoDB Locking"). The transaction
    isolation level can also affect which locks are set; see [Section 17.7.2.1, “Transaction
    Isolation Levels”](innodb-transaction-isolation-levels.html "17.7.2.1 Transaction
    Isolation Levels").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[锁定读取](glossary.html#glos_locking_read "锁定读取")、[`UPDATE`](update.html "15.2.17 UPDATE
    语句") 或 [`DELETE`](delete.html "15.2.2 DELETE 语句") 通常会在处理 SQL 语句时扫描的每个索引记录上设置记录锁。语句中是否有
    `WHERE` 条件排除行并不重要。`InnoDB` 不记得确切的 `WHERE` 条件，只知道扫描了哪些索引范围。这些锁通常是[下一个键锁](glossary.html#glos_next_key_lock
    "下一个键锁")，还会阻止插入到记录之前的“间隙”。但是，可以显式禁用[间隙锁定](glossary.html#glos_gap_lock "间隙锁定")，这会导致不使用下一个键锁。有关更多信息，请参见[第
    17.7.1 节，“InnoDB 锁定”](innodb-locking.html "17.7.1 InnoDB 锁定")。事务隔离级别也会影响设置的锁；请参见[第
    17.7.2.1 节，“事务隔离级别”](innodb-transaction-isolation-levels.html "17.7.2.1 事务隔离级别")。'
- en: If a secondary index is used in a search and the index record locks to be set
    are exclusive, `InnoDB` also retrieves the corresponding clustered index records
    and sets locks on them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在搜索中使用了辅助索引，并且要设置的索引记录锁是排他的，则 `InnoDB` 还会检索相应的聚簇索引记录并对其设置锁。
- en: If you have no indexes suitable for your statement and MySQL must scan the entire
    table to process the statement, every row of the table becomes locked, which in
    turn blocks all inserts by other users to the table. It is important to create
    good indexes so that your queries do not scan more rows than necessary.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的语句没有适合的索引，MySQL 必须扫描整个表来处理语句，那么表的每一行都会被锁定，从而阻止其他用户向表中插入数据。重要的是要创建良好的索引，以便您的查询不会扫描比必要更多的行。
- en: '`InnoDB` sets specific types of locks as follows.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB` 设置特定类型的锁如下。'
- en: '[`SELECT ... FROM`](select.html "15.2.13 SELECT Statement") is a consistent
    read, reading a snapshot of the database and setting no locks unless the transaction
    isolation level is set to [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable).
    For [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)
    level, the search sets shared next-key locks on the index records it encounters.
    However, only an index record lock is required for statements that lock rows using
    a unique index to search for a unique row.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SELECT ... FROM`](select.html "15.2.13 SELECT 语句") 是一致的读取，读取数据库的快照并不设置锁，除非事务隔离级别设置为
    [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)。对于
    [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)
    级别，搜索会在遇到的索引记录上设置共享的下一个键锁。然而，只有使用唯一索引锁定行以搜索唯一行的语句需要索引记录锁。'
- en: '[`SELECT ... FOR UPDATE`](select.html "15.2.13 SELECT Statement") and [`SELECT
    ... FOR SHARE`](select.html "15.2.13 SELECT Statement") statements that use a
    unique index acquire locks for scanned rows, and release the locks for rows that
    do not qualify for inclusion in the result set (for example, if they do not meet
    the criteria given in the `WHERE` clause). However, in some cases, rows might
    not be unlocked immediately because the relationship between a result row and
    its original source is lost during query execution. For example, in a [`UNION`](union.html
    "15.2.18 UNION Clause"), scanned (and locked) rows from a table might be inserted
    into a temporary table before evaluating whether they qualify for the result set.
    In this circumstance, the relationship of the rows in the temporary table to the
    rows in the original table is lost and the latter rows are not unlocked until
    the end of query execution.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用唯一索引的[`SELECT ... FOR UPDATE`](select.html "15.2.13 SELECT Statement")和[`SELECT
    ... FOR SHARE`](select.html "15.2.13 SELECT Statement")语句会为扫描的行获取锁，并释放不符合结果集包含条件的行的锁（例如，如果它们不符合`WHERE`子句中给定的条件）。然而，在某些情况下，行可能不会立即解锁，因为在查询执行期间结果行与其原始来源之间的关系丢失。例如，在[`UNION`](union.html
    "15.2.18 UNION Clause")中，从表中扫描（并锁定）的行可能会在评估它们是否符合结果集之前插入临时表中。在这种情况下，临时表中的行与原始表中的行之间的关系丢失，直到查询执行结束，后者的行才会解锁。
- en: For [locking reads](glossary.html#glos_locking_read "locking read") ([`SELECT`](select.html
    "15.2.13 SELECT Statement") with `FOR UPDATE` or `FOR SHARE`), [`UPDATE`](update.html
    "15.2.17 UPDATE Statement"), and [`DELETE`](delete.html "15.2.2 DELETE Statement")
    statements, the locks that are taken depend on whether the statement uses a unique
    index with a unique search condition or a range-type search condition.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[锁定读取](glossary.html#glos_locking_read "locking read")（带有`FOR UPDATE`或`FOR
    SHARE`的[`SELECT`](select.html "15.2.13 SELECT Statement")，[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")和[`DELETE`](delete.html "15.2.2 DELETE Statement")语句，所采取的锁取决于语句是否使用具有唯一搜索条件或范围类型搜索条件的唯一索引。
- en: For a unique index with a unique search condition, `InnoDB` locks only the index
    record found, not the [gap](glossary.html#glos_gap "gap") before it.
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于具有唯一搜索条件的唯一索引，`InnoDB`仅锁定找到的索引记录，而不是其前面的[间隙](glossary.html#glos_gap "gap")。
- en: For other search conditions, and for non-unique indexes, `InnoDB` locks the
    index range scanned, using [gap locks](glossary.html#glos_gap_lock "gap lock")
    or [next-key locks](glossary.html#glos_next_key_lock "next-key lock") to block
    insertions by other sessions into the gaps covered by the range. For information
    about gap locks and next-key locks, see [Section 17.7.1, “InnoDB Locking”](innodb-locking.html
    "17.7.1 InnoDB Locking").
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于其他搜索条件和非唯一索引，`InnoDB`会锁定扫描的索引范围，使用[间隙锁](glossary.html#glos_gap_lock "gap lock")或[下一个键锁](glossary.html#glos_next_key_lock
    "next-key lock")来阻止其他会话在范围覆盖的间隙中插入。有关间隙锁和下一个键锁的信息，请参见[第17.7.1节，“InnoDB锁定”](innodb-locking.html
    "17.7.1 InnoDB Locking")。
- en: For index records the search encounters, [`SELECT ... FOR UPDATE`](select.html
    "15.2.13 SELECT Statement") blocks other sessions from doing [`SELECT ... FOR
    SHARE`](select.html "15.2.13 SELECT Statement") or from reading in certain transaction
    isolation levels. Consistent reads ignore any locks set on the records that exist
    in the read view.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于索引记录，搜索遇到的[`SELECT ... FOR UPDATE`](select.html "15.2.13 SELECT Statement")会阻止其他会话执行[`SELECT
    ... FOR SHARE`](select.html "15.2.13 SELECT Statement")或在某些事务隔离级别下读取。一致性读取会忽略读取视图中存在的记录上设置的任何锁。
- en: '[`UPDATE ... WHERE ...`](update.html "15.2.17 UPDATE Statement") sets an exclusive
    next-key lock on every record the search encounters. However, only an index record
    lock is required for statements that lock rows using a unique index to search
    for a unique row.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`UPDATE ... WHERE ...`](update.html "15.2.17 UPDATE Statement")在搜索遇到的每个记录上设置一个独占的下一个键锁。然而，仅对使用唯一索引锁定行以搜索唯一行的语句需要索引记录锁。'
- en: When [`UPDATE`](update.html "15.2.17 UPDATE Statement") modifies a clustered
    index record, implicit locks are taken on affected secondary index records. The
    [`UPDATE`](update.html "15.2.17 UPDATE Statement") operation also takes shared
    locks on affected secondary index records when performing duplicate check scans
    prior to inserting new secondary index records, and when inserting new secondary
    index records.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当[`UPDATE`](update.html "15.2.17 UPDATE Statement")修改聚集索引记录时，会对受影响的次要索引记录采取隐式锁。在插入新的次要索引记录之前执行重复检查扫描时，[`UPDATE`](update.html
    "15.2.17 UPDATE Statement")操作还会对受影响的次要索引记录采取共享锁，并在插入新的次要索引记录时也会采取共享锁。
- en: '[`DELETE FROM ... WHERE ...`](delete.html "15.2.2 DELETE Statement") sets an
    exclusive next-key lock on every record the search encounters. However, only an
    index record lock is required for statements that lock rows using a unique index
    to search for a unique row.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DELETE FROM ... WHERE ...`](delete.html "15.2.2 DELETE Statement")对搜索遇到的每条记录设置排他的next-key锁。然而，对于使用唯一索引锁定行以搜索唯一行的语句，只需要一个索引记录锁。'
- en: '[`INSERT`](insert.html "15.2.7 INSERT Statement") sets an exclusive lock on
    the inserted row. This lock is an index-record lock, not a next-key lock (that
    is, there is no gap lock) and does not prevent other sessions from inserting into
    the gap before the inserted row.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INSERT`](insert.html "15.2.7 INSERT Statement")对插入的行设置排他锁。这个锁是一个索引记录锁，而不是一个next-key锁（也就是说，没有间隙锁），不会阻止其他会话在插入行之前插入到间隙中。'
- en: Prior to inserting the row, a type of gap lock called an insert intention gap
    lock is set. This lock signals the intent to insert in such a way that multiple
    transactions inserting into the same index gap need not wait for each other if
    they are not inserting at the same position within the gap. Suppose that there
    are index records with values of 4 and 7\. Separate transactions that attempt
    to insert values of 5 and 6 each lock the gap between 4 and 7 with insert intention
    locks prior to obtaining the exclusive lock on the inserted row, but do not block
    each other because the rows are nonconflicting.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在插入行之前，会设置一种称为插入意向间隙锁的间隙锁类型。这个锁表示插入的意图，以便多个插入相同索引间隙的事务不必等待彼此，如果它们不在间隙内的相同位置插入。假设存在值为4和7的索引记录。尝试插入值为5和6的单独事务在获得插入行的排他锁之前，会在4和7之间的间隙上设置插入意向锁，但不会相互阻塞，因为这些行是不冲突的。
- en: 'If a duplicate-key error occurs, a shared lock on the duplicate index record
    is set. This use of a shared lock can result in deadlock should there be multiple
    sessions trying to insert the same row if another session already has an exclusive
    lock. This can occur if another session deletes the row. Suppose that an `InnoDB`
    table `t1` has the following structure:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果发生重复键错误，则会设置对重复索引记录的共享锁。这种共享锁的使用可能导致死锁，如果有多个会话尝试插入相同的行，而另一个会话已经具有排他锁。如果另一个会话删除了该行，则可能会发生这种情况。假设一个`InnoDB`表`t1`具有以下结构：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now suppose that three sessions perform the following operations in order:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在假设三个会话按顺序执行以下操作：
- en: 'Session 1:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第1节：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Session 2:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第2节：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Session 3:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第3节：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Session 1:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第1节：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first operation by session 1 acquires an exclusive lock for the row. The
    operations by sessions 2 and 3 both result in a duplicate-key error and they both
    request a shared lock for the row. When session 1 rolls back, it releases its
    exclusive lock on the row and the queued shared lock requests for sessions 2 and
    3 are granted. At this point, sessions 2 and 3 deadlock: Neither can acquire an
    exclusive lock for the row because of the shared lock held by the other.'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话1的第一个操作会为该行获取排他锁。会话2和3的操作都导致重复键错误，并且它们都请求该行的共享锁。当会话1回滚时，它释放了该行的排他锁，并且为会话2和3排队的共享锁请求被授予。此时，会话2和3发生死锁：由于彼此持有的共享锁，它们都无法获取该行的排他锁。
- en: 'A similar situation occurs if the table already contains a row with key value
    1 and three sessions perform the following operations in order:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果表中已经包含具有键值1的行，并且三个会话按顺序执行以下操作，则会发生类似的情况：
- en: 'Session 1:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第1节：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Session 2:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第2节：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Session 3:'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第3节：
- en: '[PRE7]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Session 1:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第1节：
- en: '[PRE8]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The first operation by session 1 acquires an exclusive lock for the row. The
    operations by sessions 2 and 3 both result in a duplicate-key error and they both
    request a shared lock for the row. When session 1 commits, it releases its exclusive
    lock on the row and the queued shared lock requests for sessions 2 and 3 are granted.
    At this point, sessions 2 and 3 deadlock: Neither can acquire an exclusive lock
    for the row because of the shared lock held by the other.'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话1的第一个操作会为该行获取排他锁。会话2和3的操作都导致重复键错误，并且它们都请求该行的共享锁。当会话1提交时，它释放了该行的排他锁，并且为会话2和3排队的共享锁请求被授予。此时，会话2和3发生死锁：由于彼此持有的共享锁，它们都无法获取该行的排他锁。
- en: '[`INSERT ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT
    ... ON DUPLICATE KEY UPDATE Statement") differs from a simple [`INSERT`](insert.html
    "15.2.7 INSERT Statement") in that an exclusive lock rather than a shared lock
    is placed on the row to be updated when a duplicate-key error occurs. An exclusive
    index-record lock is taken for a duplicate primary key value. An exclusive next-key
    lock is taken for a duplicate unique key value.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INSERT ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT
    ... ON DUPLICATE KEY UPDATE 语句") 与简单的 [`INSERT`](insert.html "15.2.7 INSERT 语句")
    不同，当发生重复键错误时，会在要更新的行上放置一个独占锁而不是共享锁。对于重复的主键值，会采取独占的索引记录锁。对于重复的唯一键值，会采取独占的 next-key
    锁。'
- en: '[`REPLACE`](replace.html "15.2.12 REPLACE Statement") is done like an [`INSERT`](insert.html
    "15.2.7 INSERT Statement") if there is no collision on a unique key. Otherwise,
    an exclusive next-key lock is placed on the row to be replaced.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`REPLACE`](replace.html "15.2.12 REPLACE 语句") 如果在唯一键上没有冲突，则类似于 [`INSERT`](insert.html
    "15.2.7 INSERT 语句")。否则，会在要替换的行上放置一个独占的 next-key 锁。'
- en: '`INSERT INTO T SELECT ... FROM S WHERE ...` sets an exclusive index record
    lock (without a gap lock) on each row inserted into `T`. If the transaction isolation
    level is [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed),
    `InnoDB` does the search on `S` as a consistent read (no locks). Otherwise, `InnoDB`
    sets shared next-key locks on rows from `S`. `InnoDB` has to set locks in the
    latter case: During roll-forward recovery using a statement-based binary log,
    every SQL statement must be executed in exactly the same way it was done originally.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSERT INTO T SELECT ... FROM S WHERE ...` 会在插入到 `T` 中的每一行上设置一个独占的索引记录锁（不包括间隙锁）。如果事务隔离级别是
    [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)，`InnoDB`
    会将 `S` 上的搜索作为一致性读取（无锁）进行。否则，`InnoDB` 会在来自 `S` 的行上设置共享的 next-key 锁。在后一种情况下，`InnoDB`
    必须设置锁：在使用基于语句的二进制日志进行前滚恢复时，必须以与最初执行时完全相同的方式执行每个 SQL 语句。'
- en: '[`CREATE TABLE ... SELECT ...`](create-table.html "15.1.20 CREATE TABLE Statement")
    performs the [`SELECT`](select.html "15.2.13 SELECT Statement") with shared next-key
    locks or as a consistent read, as for [`INSERT ... SELECT`](insert-select.html
    "15.2.7.1 INSERT ... SELECT Statement").'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CREATE TABLE ... SELECT ...`](create-table.html "15.1.20 CREATE TABLE 语句")
    使用共享的 next-key 锁或一致性读取执行 [`SELECT`](select.html "15.2.13 SELECT 语句")，就像 [`INSERT
    ... SELECT`](insert-select.html "15.2.7.1 INSERT ... SELECT 语句") 一样。'
- en: When a `SELECT` is used in the constructs `REPLACE INTO t SELECT ... FROM s
    WHERE ...` or `UPDATE t ... WHERE col IN (SELECT ... FROM s ...)`, `InnoDB` sets
    shared next-key locks on rows from table `s`.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在构造 `REPLACE INTO t SELECT ... FROM s WHERE ...` 或 `UPDATE t ... WHERE col
    IN (SELECT ... FROM s ...)` 中使用 `SELECT` 时，`InnoDB` 会在来自表 `s` 的行上设置共享的 next-key
    锁。
- en: '`InnoDB` sets an exclusive lock on the end of the index associated with the
    `AUTO_INCREMENT` column while initializing a previously specified `AUTO_INCREMENT`
    column on a table.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在初始化表上先前指定的 `AUTO_INCREMENT` 列时，`InnoDB` 会在与 `AUTO_INCREMENT` 列关联的索引末尾设置一个��占锁。
- en: With [`innodb_autoinc_lock_mode=0`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode),
    `InnoDB` uses a special `AUTO-INC` table lock mode where the lock is obtained
    and held to the end of the current SQL statement (not to the end of the entire
    transaction) while accessing the auto-increment counter. Other clients cannot
    insert into the table while the `AUTO-INC` table lock is held. The same behavior
    occurs for “bulk inserts” with [`innodb_autoinc_lock_mode=1`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode).
    Table-level `AUTO-INC` locks are not used with [`innodb_autoinc_lock_mode=2`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode).
    For more information, See [Section 17.6.1.6, “AUTO_INCREMENT Handling in InnoDB”](innodb-auto-increment-handling.html
    "17.6.1.6 AUTO_INCREMENT Handling in InnoDB").
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 [`innodb_autoinc_lock_mode=0`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)，`InnoDB`
    使用一种特殊的 `AUTO-INC` 表锁模式，在访问自增计数器时获得并保持锁直到当前 SQL 语句结束（而不是整个事务结束）。在持有 `AUTO-INC`
    表锁时，其他客户端无法向表中插入数据。对于具有 [`innodb_autoinc_lock_mode=1`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    的“批量插入”，也会发生相同的行为。不使用表级 `AUTO-INC` 锁与 [`innodb_autoinc_lock_mode=2`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)。更多信息，请参阅
    [第 17.6.1.6 节，“InnoDB 中的 AUTO_INCREMENT 处理”](innodb-auto-increment-handling.html
    "17.6.1.6 InnoDB 中的 AUTO_INCREMENT 处理")。
- en: '`InnoDB` fetches the value of a previously initialized `AUTO_INCREMENT` column
    without setting any locks.'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InnoDB` 在不设置任何锁的情况下获取先前初始化的 `AUTO_INCREMENT` 列的值。'
- en: If a `FOREIGN KEY` constraint is defined on a table, any insert, update, or
    delete that requires the constraint condition to be checked sets shared record-level
    locks on the records that it looks at to check the constraint. `InnoDB` also sets
    these locks in the case where the constraint fails.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在表上定义了`FOREIGN KEY`约束，任何需要检查约束条件的插入、更新或删除都会在查看以检查约束的记录上设置共享记录级锁。如果约束失败，`InnoDB`也会设置这些锁。
- en: '[`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")
    sets table locks, but it is the higher MySQL layer above the `InnoDB` layer that
    sets these locks. `InnoDB` is aware of table locks if `innodb_table_locks = 1`
    (the default) and [`autocommit = 0`](server-system-variables.html#sysvar_autocommit),
    and the MySQL layer above `InnoDB` knows about row-level locks.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")设置表锁，但是在`InnoDB`层上方的更高MySQL层设置这些锁。如果`innodb_table_locks
    = 1`（默认）且[`autocommit = 0`](server-system-variables.html#sysvar_autocommit)，那么`InnoDB`会意识到表锁，而在`InnoDB`上方的MySQL层知道行级锁。'
- en: Otherwise, `InnoDB`'s automatic deadlock detection cannot detect deadlocks where
    such table locks are involved. Also, because in this case the higher MySQL layer
    does not know about row-level locks, it is possible to get a table lock on a table
    where another session currently has row-level locks. However, this does not endanger
    transaction integrity, as discussed in [Section 17.7.5.2, “Deadlock Detection”](innodb-deadlock-detection.html
    "17.7.5.2 Deadlock Detection").
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则，`InnoDB`的自动死锁检测无法检测涉及此类表锁的死锁。此外，因为在这种情况下更高的MySQL层不知道行级锁，所以可能在另一个会话当前具有行级锁的表上获取表锁。然而，这并不会危及事务完整性，如[第17.7.5.2节“死锁检测”](innodb-deadlock-detection.html
    "17.7.5.2 Deadlock Detection")中所讨论的。
- en: '[`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")
    acquires two locks on each table if `innodb_table_locks=1` (the default). In addition
    to a table lock on the MySQL layer, it also acquires an `InnoDB` table lock. To
    avoid acquiring `InnoDB` table locks, set `innodb_table_locks=0`. If no `InnoDB`
    table lock is acquired, [`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and
    UNLOCK TABLES Statements") completes even if some records of the tables are being
    locked by other transactions.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`innodb_table_locks=1`（默认），[`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES
    and UNLOCK TABLES Statements")在每个表上获取两个锁。除了MySQL层上的表锁外，它还会获取一个`InnoDB`表锁。要避免获取`InnoDB`表锁，设置`innodb_table_locks=0`。如果没有获取`InnoDB`表锁，即使某些表的记录被其他事务锁定，[`LOCK
    TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")也会完成。
- en: In MySQL 8.0, [`innodb_table_locks=0`](innodb-parameters.html#sysvar_innodb_table_locks)
    has no effect for tables locked explicitly with [`LOCK TABLES ... WRITE`](lock-tables.html
    "15.3.6 LOCK TABLES and UNLOCK TABLES Statements"). It does have an effect for
    tables locked for read or write by [`LOCK TABLES ... WRITE`](lock-tables.html
    "15.3.6 LOCK TABLES and UNLOCK TABLES Statements") implicitly (for example, through
    triggers) or by [`LOCK TABLES ... READ`](lock-tables.html "15.3.6 LOCK TABLES
    and UNLOCK TABLES Statements").
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，[`innodb_table_locks=0`](innodb-parameters.html#sysvar_innodb_table_locks)对使用[`LOCK
    TABLES ... WRITE`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")显式锁定的表没有影响。对于通过触发器隐式（例如，通过触发器）或通过[`LOCK
    TABLES ... READ`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")读取或写入的表，它会产生影响。
- en: All `InnoDB` locks held by a transaction are released when the transaction is
    committed or aborted. Thus, it does not make much sense to invoke [`LOCK TABLES`](lock-tables.html
    "15.3.6 LOCK TABLES and UNLOCK TABLES Statements") on `InnoDB` tables in [`autocommit=1`](server-system-variables.html#sysvar_autocommit)
    mode because the acquired `InnoDB` table locks would be released immediately.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当事务提交或中止时，所有`InnoDB`锁都会被释放。因此，在[`autocommit=1`](server-system-variables.html#sysvar_autocommit)模式下对`InnoDB`表调用[`LOCK
    TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")并没有太多意义，因为获取的`InnoDB`表锁会立即释放。
- en: You cannot lock additional tables in the middle of a transaction because [`LOCK
    TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK TABLES Statements") performs
    an implicit [`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK
    Statements") and [`UNLOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK
    TABLES Statements").
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能在事务中间锁定额外的表，因为[`LOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES and UNLOCK
    TABLES Statements")会执行隐式的[`COMMIT`](commit.html "15.3.1 START TRANSACTION, COMMIT,
    and ROLLBACK Statements")和[`UNLOCK TABLES`](lock-tables.html "15.3.6 LOCK TABLES
    and UNLOCK TABLES Statements")。
