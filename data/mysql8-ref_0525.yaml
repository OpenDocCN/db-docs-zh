- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/bnl-bka-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/bnl-bka-optimization.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/bnl-bka-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/bnl-bka-optimization.html)
- en: 10.2.1.12 Block Nested-Loop and Batched Key Access Joins
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10.2.1.12 块嵌套循环和批量键访问连接
- en: In MySQL, a Batched Key Access (BKA) Join algorithm is available that uses both
    index access to the joined table and a join buffer. The BKA algorithm supports
    inner join, outer join, and semijoin operations, including nested outer joins.
    Benefits of BKA include improved join performance due to more efficient table
    scanning. Also, the Block Nested-Loop (BNL) Join algorithm previously used only
    for inner joins is extended and can be employed for outer join and semijoin operations,
    including nested outer joins.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 中，有一个批量键访问（BKA）连接算法，它同时使用对连接表的索引访问和连接缓冲。BKA 算法支持内连接、外连接和半连接操作，包括嵌套外连接。BKA
    的好处包括由于更有效的表扫描而改进的连接性能。此外，之前仅用于内连接的块嵌套循环（BNL）连接算法被扩展，可以用于外连接和半连接操作，包括嵌套外连接。
- en: The following sections discuss the join buffer management that underlies the
    extension of the original BNL algorithm, the extended BNL algorithm, and the BKA
    algorithm. For information about semijoin strategies, see [Section 10.2.2.1, “Optimizing
    IN and EXISTS Subquery Predicates with Semijoin Transformations”](semijoins.html
    "10.2.2.1 Optimizing IN and EXISTS Subquery Predicates with Semijoin Transformations")
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节讨论了原始 BNL 算法、扩展 BNL 算法和 BKA 算法的基础连接缓冲管理。有关半连接策略的信息，请参见[第 10.2.2.1 节，“使用半连接转换优化
    IN 和 EXISTS 子查询谓词”](semijoins.html "10.2.2.1 使用半连接转换优化 IN 和 EXISTS 子查询谓词")
- en: '[Join Buffer Management for Block Nested-Loop and Batched Key Access Algorithms](bnl-bka-optimization.html#join-buffer-management
    "Join Buffer Management for Block Nested-Loop and Batched Key Access Algorithms")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于块嵌套循环和批量键访问算法的连接缓冲管理](bnl-bka-optimization.html#join-buffer-management "用于块嵌套循环和批量键访问算法的连接缓冲管理")'
- en: '[Block Nested-Loop Algorithm for Outer Joins and Semijoins](bnl-bka-optimization.html#bnl-optimization
    "Block Nested-Loop Algorithm for Outer Joins and Semijoins")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于外连接和半连接的块嵌套循环算法](bnl-bka-optimization.html#bnl-optimization "用于外连接和半连接的块嵌套循环算法")'
- en: '[Batched Key Access Joins](bnl-bka-optimization.html#bka-optimization "Batched
    Key Access Joins")'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[批量键访问连接](bnl-bka-optimization.html#bka-optimization "批量键访问连接")'
- en: '[Optimizer Hints for Block Nested-Loop and Batched Key Access Algorithms](bnl-bka-optimization.html#bnl-bka-optimizer-hints
    "Optimizer Hints for Block Nested-Loop and Batched Key Access Algorithms")'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[块嵌套循环和批量键访问算法的优化提示](bnl-bka-optimization.html#bnl-bka-optimizer-hints "块嵌套循环和批量键访问算法的优化提示")'
- en: Join Buffer Management for Block Nested-Loop and Batched Key Access Algorithms
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 用于块嵌套循环和批量键访问算法的连接缓冲管理
- en: MySQL can employ join buffers to execute not only inner joins without index
    access to the inner table, but also outer joins and semijoins that appear after
    subquery flattening. Moreover, a join buffer can be effectively used when there
    is an index access to the inner table.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 可以利用 join 缓冲来执行不仅内连接而且没有对内部表进行索引访问的外连接和半连接，这些连接出现在子查询展开之后。此外，当对内部表进行索引访问时，可以有效地使用
    join 缓冲。
- en: 'The join buffer management code slightly more efficiently utilizes join buffer
    space when storing the values of the interesting row columns: No additional bytes
    are allocated in buffers for a row column if its value is `NULL`, and the minimum
    number of bytes is allocated for any value of the [`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") type.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: join 缓冲管理代码在存储感兴趣的行列的值时，稍微更有效地利用了 join 缓冲空间：如果一个行列的值是`NULL`，则不会为其分配额外的字节，对于[`VARCHAR`](char.html
    "13.3.2 CHAR 和 VARCHAR 类型")类型的任何值，都会分配最少数量的字节。
- en: 'The code supports two types of buffers, regular and incremental. Suppose that
    join buffer `B1` is employed to join tables `t1` and `t2` and the result of this
    operation is joined with table `t3` using join buffer `B2`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代码支持两种类型的缓冲区，常规和增量。假设使用 join 缓冲`B1`连接表`t1`和`t2`，并且将此操作的结果使用 join 缓冲`B2`连接到表`t3`：
- en: A regular join buffer contains columns from each join operand. If `B2` is a
    regular join buffer, each row *`r`* put into `B2` is composed of the columns of
    a row *`r1`* from `B1` and the interesting columns of a matching row *`r2`* from
    table `t3`.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个常规的 join 缓冲包含每个连接操作数的列。如果`B2`是一个常规的 join 缓冲，那么放入`B2`的每一行*r*由来自`B1`的行*r1*的列和来自表`t3`的匹配行*r2*的感兴趣列组成。
- en: An incremental join buffer contains only columns from rows of the table produced
    by the second join operand. That is, it is incremental to a row from the first
    operand buffer. If `B2` is an incremental join buffer, it contains the interesting
    columns of the row *`r2`* together with a link to the row *`r1`* from `B1`.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增量连接缓冲区仅包含由第二个连接操作数产生的表的行的列。也就是说，它是相对于第一个操作数缓冲区的增量。如果 `B2` 是一个增量连接缓冲区，它包含行 *`r2`*
    的有趣列以及与 `B1` 中的行 *`r1`* 的链接。
- en: Incremental join buffers are always incremental relative to a join buffer from
    an earlier join operation, so the buffer from the first join operation is always
    a regular buffer. In the example just given, the buffer `B1` used to join tables
    `t1` and `t2` must be a regular buffer.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 增量连接缓冲区始终相对于较早连接操作的连接缓冲区是增量的，因此第一个连接操作的缓冲区始终是常规缓冲区。在刚才给出的示例中，用于连接表 `t1` 和 `t2`
    的缓冲区 `B1` 必须是常规缓冲区。
- en: Each row of the incremental buffer used for a join operation contains only the
    interesting columns of a row from the table to be joined. These columns are augmented
    with a reference to the interesting columns of the matched row from the table
    produced by the first join operand. Several rows in the incremental buffer can
    refer to the same row *`r`* whose columns are stored in the previous join buffers
    insofar as all these rows match row *`r`*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 用于连接操作的增量缓冲区的每一行仅包含要连接的表的行的有趣列。这些列与来自第一个连接操作数产生的表的匹配行的有趣列的引用一起增加。增量缓冲区中的多行可以引用相同的行
    *`r`*，其列存储在先前的连接缓冲区中，只要所有这些行都匹配行 *`r`*。
- en: Incremental buffers enable less frequent copying of columns from buffers used
    for previous join operations. This provides a savings in buffer space because
    in the general case a row produced by the first join operand can be matched by
    several rows produced by the second join operand. It is unnecessary to make several
    copies of a row from the first operand. Incremental buffers also provide a savings
    in processing time due to the reduction in copying time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 增量缓冲区使得从先前连接操作中使用的缓冲区复制列的频率降低。这样可以节省缓冲区空间，因为在一般情况下，第一个连接操作数产生的行可以与第二个连接操作数产生的多行匹配。从第一个操作数复制一行的多个副本是不必要的。增量缓冲区还通过减少复制时间节省了处理时间。
- en: 'In MySQL 8.0, the [`block_nested_loop`](switchable-optimizations.html#optflag_block-nested-loop)
    flag of the [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    system variable works as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0 中，[`block_nested_loop`](switchable-optimizations.html#optflag_block-nested-loop)
    标志的 [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    系统变量的工作方式如下：
- en: Prior to MySQL 8.0.20, it controls how the optimizer uses the Block Nested Loop
    join algorithm.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.20 之前，它控制优化器如何使用块嵌套循环连接算法。
- en: In MySQL 8.0.18 and later, it also controls the use of hash joins (see [Section 10.2.1.4,
    “Hash Join Optimization”](hash-joins.html "10.2.1.4 Hash Join Optimization")).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.18 及更高版本中，它还控制哈希连接的使用（参见 [第10.2.1.4节，“哈希连接优化”](hash-joins.html "10.2.1.4 哈希连接优化")）。
- en: Beginning with MySQL 8.0.20, the flag controls hash joins only, and the block
    nested loop algorithm is no longer supported.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.20 开始，该标志仅控制哈希连接，不再支持块嵌套循环算法。
- en: The [`batched_key_access`](switchable-optimizations.html#optflag_batched-key-access)
    flag controls how the optimizer uses the Batched Key Access join algorithms.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`batched_key_access`](switchable-optimizations.html#optflag_batched-key-access)
    标志控制优化器如何使用批量键访问连接算法。'
- en: By default, [`block_nested_loop`](switchable-optimizations.html#optflag_block-nested-loop)
    is `on` and [`batched_key_access`](switchable-optimizations.html#optflag_batched-key-access)
    is `off`. See [Section 10.9.2, “Switchable Optimizations”](switchable-optimizations.html
    "10.9.2 Switchable Optimizations"). Optimizer hints may also be applied; see [Optimizer
    Hints for Block Nested-Loop and Batched Key Access Algorithms](bnl-bka-optimization.html#bnl-bka-optimizer-hints
    "Optimizer Hints for Block Nested-Loop and Batched Key Access Algorithms").
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`block_nested_loop`](switchable-optimizations.html#optflag_block-nested-loop)
    是 `on`，而 [`batched_key_access`](switchable-optimizations.html#optflag_batched-key-access)
    是 `off`。参见 [第10.9.2节，“可切换优化”](switchable-optimizations.html "10.9.2 可切换优化")。也可以应用优化提示；参见
    [块嵌套循环和批量键访问算法的优化提示](bnl-bka-optimization.html#bnl-bka-optimizer-hints "块嵌套循环和批量键访问算法的优化提示")。
- en: For information about semijoin strategies, see [Section 10.2.2.1, “Optimizing
    IN and EXISTS Subquery Predicates with Semijoin Transformations”](semijoins.html
    "10.2.2.1 Optimizing IN and EXISTS Subquery Predicates with Semijoin Transformations")
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有关半连接策略的信息，请参见[第10.2.2.1节，“使用半连接转换优化IN和EXISTS子查询谓词”](semijoins.html "10.2.2.1 使用半连接转换优化IN和EXISTS子查询谓词")
- en: Block Nested-Loop Algorithm for Outer Joins and Semijoins
  id: totrans-24
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 外连接和半连接的块嵌套循环算法
- en: The original implementation of the MySQL BNL algorithm was extended to support
    outer join and semijoin operations (and was later superseded by the hash join
    algorithm; see [Section 10.2.1.4, “Hash Join Optimization”](hash-joins.html "10.2.1.4 Hash
    Join Optimization")).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL BNL算法的原始实现已扩展以支持外连接和半连接操作（后来被哈希连接算法取代；请参见[第10.2.1.4节，“哈希连接优化”](hash-joins.html
    "10.2.1.4 哈希连接优化")）。
- en: When these operations are executed with a join buffer, each row put into the
    buffer is supplied with a match flag.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些操作与连接缓冲区一起执行时，放入缓冲区的每一行都附带一个匹配标志。
- en: If an outer join operation is executed using a join buffer, each row of the
    table produced by the second operand is checked for a match against each row in
    the join buffer. When a match is found, a new extended row is formed (the original
    row plus columns from the second operand) and sent for further extensions by the
    remaining join operations. In addition, the match flag of the matched row in the
    buffer is enabled. After all rows of the table to be joined have been examined,
    the join buffer is scanned. Each row from the buffer that does not have its match
    flag enabled is extended by `NULL` complements (`NULL` values for each column
    in the second operand) and sent for further extensions by the remaining join operations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用连接缓冲区执行外连接操作，则将第二个操作数生成的表的每一行与连接缓冲区中的每一行进行匹配检查。当找到匹配时，将形成一个新的扩展行（原始行加上第二个操作数的列），并发送给剩余的连接操作进行进一步扩展。此外，缓冲区中匹配的行的匹配标志将被启用。在检查完要连接的表的所有行之后，将扫描连接缓冲区。缓冲区中没有启用其匹配标志的每一行都将通过`NULL`补充（第二个操作数的每一列的`NULL`值）进行扩展，并发送给剩余的连接操作进行进一步扩展。
- en: 'In MySQL 8.0, the [`block_nested_loop`](switchable-optimizations.html#optflag_block-nested-loop)
    flag of the [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    system variable works as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0中，[`block_nested_loop`](switchable-optimizations.html#optflag_block-nested-loop)标志的[`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)系统变量的工作方式如下：
- en: Prior to MySQL 8.0.20, it controls how the optimizer uses the Block Nested Loop
    join algorithm.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.20之前，它控制优化器如何使用块嵌套循环连接算法。
- en: In MySQL 8.0.18 and later, it also controls the use of hash joins (see [Section 10.2.1.4,
    “Hash Join Optimization”](hash-joins.html "10.2.1.4 Hash Join Optimization")).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.18及更高版本中，它还控制哈希连接的使用（请参见[第10.2.1.4节，“哈希连接优化”](hash-joins.html "10.2.1.4 哈希连接优化")）。
- en: Beginning with MySQL 8.0.20, the flag controls hash joins only, and the block
    nested loop algorithm is no longer supported.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.20开始，该标志仅控制哈希连接，不再支持块嵌套循环算法。
- en: See [Section 10.9.2, “Switchable Optimizations”](switchable-optimizations.html
    "10.9.2 Switchable Optimizations"), for more information. Optimizer hints may
    also be applied; see [Optimizer Hints for Block Nested-Loop and Batched Key Access
    Algorithms](bnl-bka-optimization.html#bnl-bka-optimizer-hints "Optimizer Hints
    for Block Nested-Loop and Batched Key Access Algorithms").
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参见[第10.9.2节，“可切换的优化”](switchable-optimizations.html "10.9.2 可切换的优化")。也可以应用优化器提示；请参见[块嵌套循环和批量键访问算法的优化器提示](bnl-bka-optimization.html#bnl-bka-optimizer-hints
    "块嵌套循环和批量键访问算法的优化器提示")。
- en: In [`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement") output, use of BNL for
    a table is signified when the `Extra` value contains `Using join buffer (Block
    Nested Loop)` and the `type` value is [`ALL`](explain-output.html#jointype_all),
    [`index`](explain-output.html#jointype_index), or [`range`](explain-output.html#jointype_range).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`EXPLAIN`](explain.html "15.8.2 EXPLAIN语句")输出中，当`Extra`值包含`Using join buffer
    (Block Nested Loop)`且`type`值为[`ALL`](explain-output.html#jointype_all)、[`index`](explain-output.html#jointype_index)或[`range`](explain-output.html#jointype_range)时，表示对表使用BNL。
- en: For information about semijoin strategies, see [Section 10.2.2.1, “Optimizing
    IN and EXISTS Subquery Predicates with Semijoin Transformations”](semijoins.html
    "10.2.2.1 Optimizing IN and EXISTS Subquery Predicates with Semijoin Transformations")
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关半连接策略的信息，请参见[第10.2.2.1节，“使用半连接转换优化IN和EXISTS子查询谓词”](semijoins.html "10.2.2.1 使用半连接转换优化IN和EXISTS子查询谓词")
- en: Batched Key Access Joins
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 批量键访问连接
- en: MySQL implements a method of joining tables called the Batched Key Access (BKA)
    join algorithm. BKA can be applied when there is an index access to the table
    produced by the second join operand. Like the BNL join algorithm, the BKA join
    algorithm employs a join buffer to accumulate the interesting columns of the rows
    produced by the first operand of the join operation. Then the BKA algorithm builds
    keys to access the table to be joined for all rows in the buffer and submits these
    keys in a batch to the database engine for index lookups. The keys are submitted
    to the engine through the Multi-Range Read (MRR) interface (see [Section 10.2.1.11,
    “Multi-Range Read Optimization”](mrr-optimization.html "10.2.1.11 Multi-Range
    Read Optimization")). After submission of the keys, the MRR engine functions perform
    lookups in the index in an optimal way, fetching the rows of the joined table
    found by these keys, and starts feeding the BKA join algorithm with matching rows.
    Each matching row is coupled with a reference to a row in the join buffer.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 实现了一种称为批量键访问（BKA）连接算法的表连接方法。当第二个连接操作数产生的表具有索引访问时，可以应用 BKA。与 BNL 连接算法类似，BKA
    连接算法使用连接缓冲区累积连接操作的第一个操作数产生的行的有趣列。然后，BKA 算法构建用于访问要连接的表的键，以便为缓冲区中的所有行提交这些键批量给数据库引擎进行索引查找。这些键通过多范围读取（MRR）接口提交给引擎（参见[第
    10.2.1.11 节，“多范围读取优化”](mrr-optimization.html "10.2.1.11 多范围读取优化")）。提交键后，MRR 引擎函数以最佳方式在索引中执行查找，获取由这些键找到的连接表的行，并开始将匹配行提供给
    BKA 连接算法。每个匹配行都与连接缓冲区中的行的引用相对应。
- en: When BKA is used, the value of [`join_buffer_size`](server-system-variables.html#sysvar_join_buffer_size)
    defines how large the batch of keys is in each request to the storage engine.
    The larger the buffer, the more sequential access is made to the right hand table
    of a join operation, which can significantly improve performance.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 BKA 时，[`join_buffer_size`](server-system-variables.html#sysvar_join_buffer_size)
    的值定义了每次请求到存储引擎的键批量有多大。缓冲区越大，对连接操作的右表进行的顺序访问就越多，这可以显著提高性能。
- en: 'For BKA to be used, the [`batched_key_access`](switchable-optimizations.html#optflag_batched-key-access)
    flag of the [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    system variable must be set to `on`. BKA uses MRR, so the [`mrr`](switchable-optimizations.html#optflag_mrr)
    flag must also be `on`. Currently, the cost estimation for MRR is too pessimistic.
    Hence, it is also necessary for [`mrr_cost_based`](switchable-optimizations.html#optflag_mrr-cost-based)
    to be `off` for BKA to be used. The following setting enables BKA:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 BKA，必须将[`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    系统变量的 [`batched_key_access`](switchable-optimizations.html#optflag_batched-key-access)
    标志设置为 `on`。BKA 使用 MRR，因此 [`mrr`](switchable-optimizations.html#optflag_mrr) 标志也必须为
    `on`。目前，对于 MRR 的成本估算过于悲观。因此，还需要将 [`mrr_cost_based`](switchable-optimizations.html#optflag_mrr-cost-based)
    设置为 `off` 才能使用 BKA。以下设置启用了 BKA：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are two scenarios by which MRR functions execute:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: MRR 函数执行有两种情况：
- en: 'The first scenario is used for conventional disk-based storage engines such
    as [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    and [`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine"). For
    these engines, usually the keys for all rows from the join buffer are submitted
    to the MRR interface at once. Engine-specific MRR functions perform index lookups
    for the submitted keys, get row IDs (or primary keys) from them, and then fetch
    rows for all these selected row IDs one by one by request from BKA algorithm.
    Every row is returned with an association reference that enables access to the
    matched row in the join buffer. The rows are fetched by the MRR functions in an
    optimal way: They are fetched in the row ID (primary key) order. This improves
    performance because reads are in disk order rather than random order.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种情况适用于传统基于磁盘的存储引擎，如[`InnoDB`](innodb-storage-engine.html "第 17 章 InnoDB 存储引擎")和[`MyISAM`](myisam-storage-engine.html
    "18.2 MyISAM 存储引擎")。对于这些引擎，通常将连接缓冲区中所有行的键一次性提交给 MRR 接口。引擎特定的 MRR 函数为提交的键执行索引查找，从中获取行
    ID（或主键），然后通过 BKA 算法的请求逐个获取所有这些选定行 ID 的行。每行都返回一个关联引用，使得可以访问连接缓冲区中匹配的行。MRR 函数以最佳方式获取行：它们按行
    ID（主键）顺序获取。这提高了性能，因为读取是按磁盘顺序而不是随机顺序进行的。
- en: The second scenario is used for remote storage engines such as [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0"). A package of keys for a portion of rows from
    the join buffer, together with their associations, is sent by a MySQL Server (SQL
    node) to MySQL Cluster data nodes. In return, the SQL node receives a package
    (or several packages) of matching rows coupled with corresponding associations.
    The BKA join algorithm takes these rows and builds new joined rows. Then a new
    set of keys is sent to the data nodes and the rows from the returned packages
    are used to build new joined rows. The process continues until the last keys from
    the join buffer are sent to the data nodes, and the SQL node has received and
    joined all rows matching these keys. This improves performance because fewer key-bearing
    packages sent by the SQL node to the data nodes means fewer round trips between
    it and the data nodes to perform the join operation.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种情况适用于远程存储引擎，如[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")。 MySQL服务器（SQL节点）将一部分连接缓冲区中的行的键包以及它们的关联关系发送到MySQL集群数据节点。作为回报，SQL节点接收到一组（或多组）匹配行及其对应的关联关系。BKA连接算法获取这些行并构建新的连接行。然后一组新的键被发送到数据节点，返回的包中的行被用来构建新的连接行。这个过程持续进行，直到连接缓冲区中的最后一个键被发送到数据节点，并且SQL节点已经接收并连接了所有与这些键匹配的行。这提高了性能，因为SQL节点发送给数据节点的带键包数量较少，意味着在SQL节点和数据节点之间执行连接操作的往返次数较少。
- en: With the first scenario, a portion of the join buffer is reserved to store row
    IDs (primary keys) selected by index lookups and passed as a parameter to the
    MRR functions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，连接缓冲区的一部分被保留用于存储通过索引查找选择的行ID（主键），并作为参数传递给MRR函数。
- en: There is no special buffer to store keys built for rows from the join buffer.
    Instead, a function that builds the key for the next row in the buffer is passed
    as a parameter to the MRR functions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 没有专门的缓冲区用于存储从连接缓冲区构建的键。相反，构建下一个缓冲区中行的键的函数被作为参数传递给MRR函数。
- en: In [`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement") output, use of BKA for
    a table is signified when the `Extra` value contains `Using join buffer (Batched
    Key Access)` and the `type` value is [`ref`](explain-output.html#jointype_ref)
    or [`eq_ref`](explain-output.html#jointype_eq_ref).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`EXPLAIN`](explain.html "15.8.2 EXPLAIN语句")输出中，当`Extra`值包含`Using join buffer
    (Batched Key Access)`，并且`type`值为[`ref`](explain-output.html#jointype_ref)或[`eq_ref`](explain-output.html#jointype_eq_ref)时，表示对表使用了BKA。
- en: Optimizer Hints for Block Nested-Loop and Batched Key Access Algorithms
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 用于块嵌套循环和批量键访问算法的优化器提示
- en: In addition to using the [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    system variable to control optimizer use of the BNL and BKA algorithms session-wide,
    MySQL supports optimizer hints to influence the optimizer on a per-statement basis.
    See [Section 10.9.3, “Optimizer Hints”](optimizer-hints.html "10.9.3 Optimizer
    Hints").
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用[`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)系统变量来控制全局会话中优化器使用BNL和BKA算法外，MySQL还支持优化器提示来影响每个语句的优化器。请参阅[第10.9.3节，“优化器提示”](optimizer-hints.html
    "10.9.3 优化器提示")。
- en: To use a BNL or BKA hint to enable join buffering for any inner table of an
    outer join, join buffering must be enabled for all inner tables of the outer join.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用BNL或BKA提示为外连接的任何内部表启用连接缓冲，必须为外连接的所有内部表启用连接缓冲。
