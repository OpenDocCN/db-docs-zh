- en: 8.6.6 MySQL Enterprise Encryption Legacy Function Descriptions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.6.6 MySQL企业加密传统函数描述
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions-legacy.html](https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions-legacy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions-legacy.html](https://dev.mysql.com/doc/refman/8.0/en/enterprise-encryption-functions-legacy.html)
- en: In releases before MySQL 8.0.30, MySQL Enterprise Encryption's functions are
    based on the `openssl_udf` shared library. This reference describes those functions.
    The functions continue to be available in later releases if they have been installed,
    but they are deprecated.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.30之前的版本中，MySQL企业加密的函数基于`openssl_udf`共享库。本参考描述了这些函数。如果已安装这些函数，则它们在后续版本中仍然可用，但已被弃用。
- en: For information on upgrading to the new component functions provided by the
    MySQL component `component_enterprise_encryption`, and a list of the behavior
    differences between the legacy functions and the component functions, see [Upgrading
    MySQL Enterprise Encryption](enterprise-encryption-installation.html#enterprise-encryption-upgrading
    "Upgrading MySQL Enterprise Encryption").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有关升级到由MySQL组件`component_enterprise_encryption`提供的新组件函数的信息，以及传统函数与组件函数之间的行为差异列表，请参阅[升级MySQL企业加密](enterprise-encryption-installation.html#enterprise-encryption-upgrading
    "Upgrading MySQL Enterprise Encryption")。
- en: The reference for the component functions is [Section 8.6.5, “MySQL Enterprise
    Encryption Component Function Descriptions”](enterprise-encryption-functions.html
    "8.6.5 MySQL Enterprise Encryption Component Function Descriptions").
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 组件函数的参考资料是[第 8.6.5 节，“MySQL企业加密组件函数描述”](enterprise-encryption-functions.html
    "8.6.5 MySQL Enterprise Encryption Component Function Descriptions")。
- en: 'MySQL Enterprise Encryption functions have these general characteristics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL企业加密函数具有以下一般特征：
- en: For arguments of the wrong type or an incorrect number of arguments, each function
    returns an error.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于错误类型或不正确数量的参数，每个函数都会返回错误。
- en: If the arguments are not suitable to permit a function to perform the requested
    operation, it returns `NULL` or 0 as appropriate. This occurs, for example, if
    a function does not support a specified algorithm, a key length is too short or
    long, or a string expected to be a key string in PEM format is not a valid key.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数不适合允许函数执行请求的操作，则它会返回适当的`NULL`或0。例如，如果函数不支持指定的算法、密钥长度过短或过长，或者期望为PEM格式密钥字符串的字符串不是有效密钥。
- en: The underlying SSL library takes care of randomness initialization.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底层SSL库负责随机性初始化。
- en: Several of the legacy functions take an encryption algorithm argument. The following
    table summarizes the supported algorithms by function.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 几个传统函数接受加密算法参数。以下表总结了每个函数支持的算法。
- en: '**Table 8.49 Supported Algorithms by Function**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 8.49 函数支持的算法**'
- en: '| Function | Supported Algorithms |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 支持的算法 |'
- en: '| `asymmetric_decrypt()` | RSA |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `asymmetric_decrypt()` | RSA |'
- en: '| `asymmetric_derive()` | DH |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `asymmetric_derive()` | DH |'
- en: '| `asymmetric_encrypt()` | RSA |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `asymmetric_encrypt()` | RSA |'
- en: '| `asymmetric_sign()` | RSA, DSA |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `asymmetric_sign()` | RSA, DSA |'
- en: '| `asymmetric_verify()` | RSA, DSA |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `asymmetric_verify()` | RSA, DSA |'
- en: '| `create_asymmetric_priv_key()` | RSA, DSA, DH |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `create_asymmetric_priv_key()` | RSA, DSA, DH |'
- en: '| `create_asymmetric_pub_key()` | RSA, DSA, DH |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `create_asymmetric_pub_key()` | RSA, DSA, DH |'
- en: '| `create_dh_parameters()` | DH |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `create_dh_parameters()` | DH |'
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Although you can create keys using any of the RSA, DSA, or DH encryption algorithms,
    other legacy functions that take key arguments might accept only certain types
    of keys. For example, `asymmetric_encrypt()` and `asymmetric_decrypt()` accept
    only RSA keys.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可以使用RSA、DSA或DH加密算法之一创建密钥，但其他接受密钥参数的传统函数可能仅接受特定类型的密钥。例如，`asymmetric_encrypt()`和`asymmetric_decrypt()`仅接受RSA密钥。
- en: For additional examples and discussion, see [Section 8.6.3, “MySQL Enterprise
    Encryption Usage and Examples”](enterprise-encryption-usage.html "8.6.3 MySQL
    Enterprise Encryption Usage and Examples").
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 更多示例和讨论，请参阅[第 8.6.3 节，“MySQL企业加密用法和示例”](enterprise-encryption-usage.html "8.6.3 MySQL
    Enterprise Encryption Usage and Examples")。
- en: '`asymmetric_decrypt(*`algorithm`*, *`crypt_str`*, *`key_str`*)`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asymmetric_decrypt(*`algorithm`*, *`crypt_str`*, *`key_str`*)`'
- en: Decrypts an encrypted string using the given algorithm and key string, and returns
    the resulting plaintext as a binary string. If decryption fails, the result is
    `NULL`.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用给定算法和密钥字符串解密加密字符串，并将结果明文作为二进制字符串返回。如果解密失败，则结果为`NULL`。
- en: The `openssl_udf` shared library function cannot decrypt content produced by
    the `component_enterprise_encryption` functions that are available from MySQL
    8.0.30.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`openssl_udf` 共享库函数无法解密由 MySQL 8.0.30 中提供的 `component_enterprise_encryption`
    函数生成的内容。'
- en: '*`algorithm`* is the encryption algorithm used to create the key. The supported
    algorithm value is `''RSA''`.'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`algorithm`* 是用于创建密钥的加密算法。支持的算法值为`''RSA''`。'
- en: '*`crypt_str`* is the encrypted string to decrypt, which was encrypted with
    `asymmetric_encrypt()`.'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`crypt_str`* 是要解密的加密字符串，该字符串是使用`asymmetric_encrypt()`加密的。'
- en: '*`key_str`* is a valid PEM encoded RSA public or private key. For successful
    decryption, the key string must correspond to the public or private key string
    used with `asymmetric_encrypt()` to produce the encrypted string.'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`key_str`* 是有效的 PEM 编码 RSA 公钥或私钥。为了成功解密，密钥字符串必须对应于与`asymmetric_encrypt()`一起使用的公钥或私钥字符串，以生成加密字符串。'
- en: For a usage example, see the description of `asymmetric_encrypt()`.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关用法示例，请参阅`asymmetric_encrypt()`的描述。
- en: '[`asymmetric_derive(*`pub_key_str`*, *`priv_key_str`*)`](enterprise-encryption-functions-legacy.html#function_asymmetric-derive)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`asymmetric_derive(*`pub_key_str`*, *`priv_key_str`*)`](enterprise-encryption-functions-legacy.html#function_asymmetric-derive)'
- en: Derives a symmetric key using the private key of one party and the public key
    of another, and returns the resulting key as a binary string. If key derivation
    fails, the result is `NULL`.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用一方的私钥和另一方的公钥派生对称密钥，并将生成的密钥作为二进制字符串返回。如果密钥派生失败，则结果为`NULL`。
- en: '*`pub_key_str`* and *`priv_key_str`* are valid PEM encoded key strings that
    were created using the DH algorithm.'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`pub_key_str`* 和 *`priv_key_str`* 是使用 DH 算法创建的有效 PEM 编码密钥字符串。'
- en: 'Suppose that you have two pairs of public and private keys:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设您有两对公钥和私钥：
- en: '[PRE0]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Suppose further that you use the private key from one pair and the public key
    from the other pair to create a symmetric key string. Then this symmetric key
    identity relationship holds:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设进一步假设您使用一对密钥的私钥和另一对密钥的公钥来创建对称密钥字符串。那么这个对称密钥的身份关系成立：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example requires DH private/public keys as inputs, created using a shared
    symmetric secret. Create the secret by passing the key length to [`create_dh_parameters()`](enterprise-encryption-functions-legacy.html#function_create-dh-parameters),
    then pass the secret as the “key length” to `create_asymmetric_priv_key()`.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此示例需要 DH 私钥/公钥作为输入，使用共享的对称密钥创建。通过将密钥长度传递给[`create_dh_parameters()`](enterprise-encryption-functions-legacy.html#function_create-dh-parameters)来创建密钥，然后将密钥作为“密钥长度”传递给`create_asymmetric_priv_key()`。
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`asymmetric_encrypt(*`algorithm`*, *`str`*, *`key_str`*)`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asymmetric_encrypt(*`algorithm`*, *`str`*, *`key_str`*)`'
- en: Encrypts a string using the given algorithm and key string, and returns the
    resulting ciphertext as a binary string. If encryption fails, the result is `NULL`.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用给定的算法和密钥字符串加密字符串，并将生成的密文作为二进制字符串返回。如果加密失败，则结果为`NULL`。
- en: '*`algorithm`* is the encryption algorithm used to create the key. The supported
    algorithm value is `''RSA''`.'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`algorithm`* 是用于创建密钥的加密算法。支持的算法值为`''RSA''`。'
- en: '*`str`* is the string to encrypt. The length of this string cannot be greater
    than the key string length in bytes, minus 11 (to account for the padding).'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`str`* 是要加密的字符串。此字符串的长度不能大于密钥字符串长度（以字节为单位），减去 11（用于填充）。'
- en: '*`key_str`* is a valid PEM encoded RSA public or private key.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`key_str`* 是有效的 PEM 编码 RSA 公钥或私钥。'
- en: 'To recover the original unencrypted string, pass the encrypted string to [`asymmetric_decrypt()`](enterprise-encryption-functions.html#function_asymmetric-decrypt),
    along with the other part of the key pair used for encryption, as in the following
    example:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要恢复原始未加密的字符串，将加密字符串与用于加密的密钥对的另一部分一起传递给[`asymmetric_decrypt()`](enterprise-encryption-functions.html#function_asymmetric-decrypt)，如下例所示：
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Suppose that:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then these identity relationships hold:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 那么这些身份关系成立：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`asymmetric_sign(*`algorithm`*, *`digest_str`*, *`priv_key_str`*, *`digest_type`*)`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asymmetric_sign(*`algorithm`*, *`digest_str`*, *`priv_key_str`*, *`digest_type`*)`'
- en: Signs a digest string using a private key string, and returns the signature
    as a binary string. If signing fails, the result is `NULL`.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用私钥字符串对摘要字符串进行签名，并将签名作为二进制字符串返回。如果签名失败，则结果为`NULL`。
- en: '*`algorithm`* is the encryption algorithm used to create the key. The supported
    algorithm values are `''RSA''` and `''DSA''`.'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`algorithm`* 是用于创建密钥的加密算法。支持的算法值为`''RSA''`和`''DSA''`。'
- en: '*`digest_str`* is a digest string. A digest string can be generated by calling
    [`create_digest()`](enterprise-encryption-functions.html#function_create-digest).'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`digest_str`* 是摘要字符串。摘要字符串可以通过调用[`create_digest()`](enterprise-encryption-functions.html#function_create-digest)生成。'
- en: '*`priv_key_str`* is the private key string to use for signing the digest string.
    It can be a valid PEM encoded RSA private key or DSA private key.'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`priv_key_str`* 是用于签署摘要字符串的私钥字符串。它可以是有效的PEM编码的RSA私钥或DSA私钥。'
- en: '*`digest_type`* is the algorithm to be used to sign the data. The supported
    *`digest_type`* values are `''SHA224''`, `''SHA256''`, `''SHA384''`, and `''SHA512''`.'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`digest_type`* 是用于签署数据的算法。支持的*`digest_type`*值为`''SHA224''`、`''SHA256''`、`''SHA384''`和`''SHA512''`。'
- en: For a usage example, see the description of `asymmetric_verify()`.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关用法示例，请参阅`asymmetric_verify()`的描述。
- en: '`asymmetric_verify(*`algorithm`*, *`digest_str`*, *`sig_str`*, *`pub_key_str`*,
    *`digest_type`*)`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asymmetric_verify(*`algorithm`*, *`digest_str`*, *`sig_str`*, *`pub_key_str`*,
    *`digest_type`*)`'
- en: Verifies whether the signature string matches the digest string, and returns
    1 or 0 to indicate whether verification succeeded or failed. If verification fails,
    the result is `NULL`.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证签名字符串是否与摘要字符串匹配，并返回1或0以指示验证成功或失败。如果验证失败，则结果为`NULL`。
- en: The `openssl_udf` shared library function cannot verify content produced by
    the `component_enterprise_encryption` functions that are available from MySQL
    8.0.30.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`openssl_udf`共享库函数无法验证由MySQL 8.0.30提供的`component_enterprise_encryption`函数生成的内容。'
- en: '*`algorithm`* is the encryption algorithm used to create the key. The supported
    algorithm values are `''RSA''` and `''DSA''`.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`algorithm`* 是用于创建密钥的加密算法。支持的算法值为`''RSA''`和`''DSA''`。'
- en: '*`digest_str`* is the digest string. A digest string is required, and can be
    generated by calling [`create_digest()`](enterprise-encryption-functions.html#function_create-digest).'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`digest_str`* 是摘要字符串。需要一个摘要字符串，可以通过调用[`create_digest()`](enterprise-encryption-functions.html#function_create-digest)生成。'
- en: '*`sig_str`* is the signature string to be verified. A signature string can
    be generated by calling [`asymmetric_sign()`](enterprise-encryption-functions.html#function_asymmetric-sign).'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`sig_str`* 是要验证的签名字符串。可以通过调用[`asymmetric_sign()`](enterprise-encryption-functions.html#function_asymmetric-sign)生成签名字符串。'
- en: '*`pub_key_str`* is the public key string of the signer. It corresponds to the
    private key passed to [`asymmetric_sign()`](enterprise-encryption-functions.html#function_asymmetric-sign)
    to generate the signature string. It must be a valid PEM encoded RSA public key
    or DSA public key.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`pub_key_str`* 是签名者的公钥字符串。它对应于传递给[`asymmetric_sign()`](enterprise-encryption-functions.html#function_asymmetric-sign)以生成签名字符串的私钥。它必须是有效的PEM编码的RSA公钥或DSA公钥。'
- en: '*`digest_type`* is the algorithm that was used to sign the data. The supported
    *`digest_type`* values are `''SHA224''`, `''SHA256''`, `''SHA384''`, and `''SHA512''`.'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`digest_type`* 是用于签署数据的算法。支持的*`digest_type`*值为`''SHA224''`、`''SHA256''`、`''SHA384''`和`''SHA512''`。'
- en: '[PRE6]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`create_asymmetric_priv_key(*`algorithm`*, {*`key_len`*|*`dh_secret`*})`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_asymmetric_priv_key(*`algorithm`*, {*`key_len`*|*`dh_secret`*})`'
- en: 'Creates a private key using the given algorithm and key length or DH secret,
    and returns the key as a binary string in PEM format. The key is in PKCS #1 format.
    If key generation fails, the result is `NULL`.'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '使用给定的算法和密钥长度或DH密钥创建私钥，并以PEM格式的二进制字符串形式返回密钥。密钥采用PKCS #1格式。如果密钥生成失败，则结果为`NULL`。'
- en: '*`algorithm`* is the encryption algorithm used to create the key. The supported
    algorithm values are `''RSA''`, `''DSA''`, and `''DH''`.'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`algorithm`* 是用于创建密钥的加密算法。支持的算法值为`''RSA''`、`''DSA''`和`''DH''`。'
- en: '*`key_len`* is the key length in bits for RSA and DSA keys. If you exceed the
    maximum allowed key length or specify less than the minimum, key generation fails
    and the result is null output. The minimum allowed key length in bits is 1,024,
    and the maximum allowed key length is 16,384 for the RSA algorithm or 10,000 for
    the DSA algorithm. These key-length limits are constraints imposed by OpenSSL.
    Server administrators can impose additional limits on maximum key length by setting
    the `MYSQL_OPENSSL_UDF_RSA_BITS_THRESHOLD`, `MYSQL_OPENSSL_UDF_DSA_BITS_THRESHOLD`,
    and `MYSQL_OPENSSL_UDF_DH_BITS_THRESHOLD` environment variables. See [Section 8.6.2,
    “Configuring MySQL Enterprise Encryption”](enterprise-encryption-configuring.html
    "8.6.2 Configuring MySQL Enterprise Encryption").'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`key_len`* 是 RSA 和 DSA 密钥的位数。如果超过最大允许的密钥长度或指定小于最小值，密钥生成将失败，结果为 null 输出。RSA
    算法的最小允许密钥长度为 1,024 位，RSA 算法的最大允许密钥长度为 16,384 位，DSA 算法的最大允许密钥长度为 10,000 位。这些密钥长度限制是
    OpenSSL 强加的约束。服务器管理员可以通过设置 `MYSQL_OPENSSL_UDF_RSA_BITS_THRESHOLD`、`MYSQL_OPENSSL_UDF_DSA_BITS_THRESHOLD`
    和 `MYSQL_OPENSSL_UDF_DH_BITS_THRESHOLD` 环境变量来对最大密钥长度施加额外限制。参见 [Section 8.6.2,
    “配置 MySQL 企业加密”](enterprise-encryption-configuring.html "8.6.2 配置 MySQL 企业加密")。'
- en: Note
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Generating longer keys can consume significant CPU resources. Limiting the key
    length using the environment variables lets you provide adequate security for
    your requirements while balancing this with resource usage.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成更长的密钥可能会消耗大量 CPU 资源。通过使用环境变量限制密钥长度，您可以在满足安全需求的同时平衡资源使用。
- en: '*`dh_secret`* is a shared DH secret, which must be passed instead of a key
    length for DH keys. To create the secret, pass the key length to [`create_dh_parameters()`](enterprise-encryption-functions-legacy.html#function_create-dh-parameters).'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`dh_secret`* 是一个共享的 DH 密钥，必须传递给 DH 密钥而不是密钥长度。要创建这个密钥，请将密钥长度传递给 [`create_dh_parameters()`](enterprise-encryption-functions-legacy.html#function_create-dh-parameters)。'
- en: 'This example creates a 2,048-bit DSA private key, then derives a public key
    from the private key:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此示例创建了一个 2,048 位的 DSA 私钥，然后从私钥派生出一个公钥：
- en: '[PRE7]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For an example showing DH key generation, see the description of `asymmetric_derive()`.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关显示 DH 密钥生成的示例，请参阅 `asymmetric_derive()` 的描述。
- en: '`create_asymmetric_pub_key(*`algorithm`*, *`priv_key_str`*)`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_asymmetric_pub_key(*`algorithm`*, *`priv_key_str`*)`'
- en: 'Derives a public key from the given private key using the given algorithm,
    and returns the key as a binary string in PEM format. The key is in PKCS #1 format.
    If key derivation fails, the result is `NULL`.'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '使用给定算法从给定私钥派生公钥，并以 PEM 格式的二进制字符串返回密钥。密钥采用 PKCS #1 格式。如果密钥派生失败，则结果为 `NULL`。'
- en: '*`algorithm`* is the encryption algorithm used to create the key. The supported
    algorithm values are `''RSA''`, `''DSA''`, and `''DH''`.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`algorithm`* 是用于创建密钥的加密算法。支持的算法值为 `''RSA''`、`''DSA''` 和 `''DH''`。'
- en: '*`priv_key_str`* is a valid PEM encoded RSA, DSA, or DH private key.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`priv_key_str`* 是一个有效的 PEM 编码的 RSA、DSA 或 DH 私钥。'
- en: For a usage example, see the description of `create_asymmetric_priv_key()`.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关用法示例，请参阅 `create_asymmetric_priv_key()` 的描述。
- en: '[`create_dh_parameters(*`key_len`*)`](enterprise-encryption-functions-legacy.html#function_create-dh-parameters)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`create_dh_parameters(*`key_len`*)`](enterprise-encryption-functions-legacy.html#function_create-dh-parameters)'
- en: Creates a shared secret for generating a DH private/public key pair and returns
    a binary string that can be passed to `create_asymmetric_priv_key()`. If secret
    generation fails, the result is `NULL`.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个用于生成 DH 私钥/公钥对的共享密钥，并返回一个二进制字符串，可以传递给 `create_asymmetric_priv_key()`。如果密钥生成失败，则结果为
    `NULL`。
- en: '*`key_len`* is the key length. The minimum and maximum key lengths in bits
    are 1,024 and 10,000. These key-length limits are constraints imposed by OpenSSL.
    Server administrators can impose additional limits on maximum key length by setting
    the `MYSQL_OPENSSL_UDF_RSA_BITS_THRESHOLD`, `MYSQL_OPENSSL_UDF_DSA_BITS_THRESHOLD`,
    and `MYSQL_OPENSSL_UDF_DH_BITS_THRESHOLD` environment variables. See [Section 8.6.2,
    “Configuring MySQL Enterprise Encryption”](enterprise-encryption-configuring.html
    "8.6.2 Configuring MySQL Enterprise Encryption").'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`key_len`* 是密钥长度。位数最小和最大的密钥长度分别为 1,024 和 10,000。这些密钥长度限制是 OpenSSL 强加的约束。服务器管理员可以通过设置
    `MYSQL_OPENSSL_UDF_RSA_BITS_THRESHOLD`、`MYSQL_OPENSSL_UDF_DSA_BITS_THRESHOLD`
    和 `MYSQL_OPENSSL_UDF_DH_BITS_THRESHOLD` 环境变量来对最大密钥长度施加额外限制。参见 [Section 8.6.2,
    “配置 MySQL 企业加密”](enterprise-encryption-configuring.html "8.6.2 配置 MySQL 企业加密")。'
- en: For an example showing how to use the return value for generating symmetric
    keys, see the description of [`asymmetric_derive()`](enterprise-encryption-functions-legacy.html#function_asymmetric-derive).
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关如何使用返回值生成对称密钥的示例，请参阅[`asymmetric_derive()`](enterprise-encryption-functions-legacy.html#function_asymmetric-derive)的描述。
- en: '[PRE8]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`create_digest(*`digest_type`*, *`str`*)`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_digest(*`digest_type`*, *`str`*)`'
- en: Creates a digest from the given string using the given digest type, and returns
    the digest as a binary string. If digest generation fails, the result is `NULL`.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用给定的字符串和摘要类型创建摘要，并将摘要作为二进制字符串返回。如果摘要生成失败，则结果为`NULL`。
- en: The resulting digest string is suitable for use with `asymmetric_sign()` and
    `asymmetric_verify()`. A digest is required for these functions.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成的摘要字符串适用于与`asymmetric_sign()`和`asymmetric_verify()`一起使用。这些函数需要一个摘要。
- en: '*`digest_type`* is the digest algorithm to be used to generate the digest string.
    The supported *`digest_type`* values are `''SHA224''`, `''SHA256''`, `''SHA384''`,
    and `''SHA512''`.'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`digest_type`*是用于生成摘要字符串的摘要算法。支持的*`digest_type`*值为`''SHA224''`、`''SHA256''`、`''SHA384''`和`''SHA512''`。'
- en: '*`str`* is the non-null data string for which the digest is to be generated.'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*`str`*是要生成摘要的非空数据字符串。'
- en: '[PRE9]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
