- en: 10.6.3 Optimizing REPAIR TABLE Statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.6.3 优化修复表语句
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/repair-table-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/repair-table-optimization.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/repair-table-optimization.html](https://dev.mysql.com/doc/refman/8.0/en/repair-table-optimization.html)
- en: '[`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement") for `MyISAM`
    tables is similar to using [**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM
    Table-Maintenance Utility") for repair operations, and some of the same performance
    optimizations apply:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`修复表`](repair-table.html "15.7.3.5 修复表语句")对于`MyISAM`表类似于使用[**myisamchk**](myisamchk.html
    "6.6.4 myisamchk — MyISAM 表维护实用程序")进行修复操作，并且一些相同的性能优化也适用：'
- en: '[**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility") has variables that control memory allocation. You may be able to its
    improve performance by setting these variables, as described in [Section 6.6.4.6,
    “myisamchk Memory Usage”](myisamchk-memory.html "6.6.4.6 myisamchk Memory Usage").'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM 表维护实用程序")具有控制内存分配的变量。您可以通过设置这些变量来改善性能，如[第6.6.4.6节“myisamchk内存使用”](myisamchk-memory.html
    "6.6.4.6 myisamchk内存使用")中所述。'
- en: For [`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement"), the
    same principle applies, but because the repair is done by the server, you set
    server system variables instead of [**myisamchk**](myisamchk.html "6.6.4 myisamchk
    — MyISAM Table-Maintenance Utility") variables. Also, in addition to setting memory-allocation
    variables, increasing the [`myisam_max_sort_file_size`](server-system-variables.html#sysvar_myisam_max_sort_file_size)
    system variable increases the likelihood that the repair uses the faster filesort
    method and avoids the slower repair by key cache method. Set the variable to the
    maximum file size for your system, after checking to be sure that there is enough
    free space to hold a copy of the table files. The free space must be available
    in the file system containing the original table files.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`修复表`](repair-table.html "15.7.3.5 修复表语句")，同样的原则适用，但由于修复是由服务器完成的，您需要设置服务器系统变量，而不是[**myisamchk**](myisamchk.html
    "6.6.4 myisamchk — MyISAM 表维护实用程序")变量。此外，除了设置内存分配变量外，增加[`myisam_max_sort_file_size`](server-system-variables.html#sysvar_myisam_max_sort_file_size)系统变量的值会增加修复使用更快的文件排序方法并避免较慢的按键缓存方法的可能性。在检查确保有足够的空间来保存表文件的副本后，将变量设置为系统的最大文件大小。空间必须在包含原始表文件的文件系统中可用。
- en: 'Suppose that a [**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility") table-repair operation is done using the following options to set its
    memory-allocation variables:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设使用以下选项设置其内存分配变量进行[**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM
    表维护实用程序")表修复操作：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Some of those [**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility") variables correspond to server system variables:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一些[**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM 表维护实用程序")变量对应于服务器系统变量：
- en: '| [**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility") Variable | System Variable |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM 表维护实用程序")变量 | 系统变量
    |'
- en: '| `key_buffer_size` | [`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `key_buffer_size` | [`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)
    |'
- en: '| `myisam_sort_buffer_size` | [`myisam_sort_buffer_size`](server-system-variables.html#sysvar_myisam_sort_buffer_size)
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `myisam_sort_buffer_size` | [`myisam_sort_buffer_size`](server-system-variables.html#sysvar_myisam_sort_buffer_size)
    |'
- en: '| `read_buffer_size` | [`read_buffer_size`](server-system-variables.html#sysvar_read_buffer_size)
    |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `read_buffer_size` | [`read_buffer_size`](server-system-variables.html#sysvar_read_buffer_size)
    |'
- en: '| `write_buffer_size` | none |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `write_buffer_size` | 无 |'
- en: Each of the server system variables can be set at runtime, and some of them
    ([`myisam_sort_buffer_size`](server-system-variables.html#sysvar_myisam_sort_buffer_size),
    [`read_buffer_size`](server-system-variables.html#sysvar_read_buffer_size)) have
    a session value in addition to a global value. Setting a session value limits
    the effect of the change to your current session and does not affect other users.
    Changing a global-only variable ([`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size),
    [`myisam_max_sort_file_size`](server-system-variables.html#sysvar_myisam_max_sort_file_size))
    affects other users as well. For [`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size),
    you must take into account that the buffer is shared with those users. For example,
    if you set the [**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility") `key_buffer_size` variable to 128MB, you could set the corresponding
    [`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size) system
    variable larger than that (if it is not already set larger), to permit key buffer
    use by activity in other sessions. However, changing the global key buffer size
    invalidates the buffer, causing increased disk I/O and slowdown for other sessions.
    An alternative that avoids this problem is to use a separate key cache, assign
    to it the indexes from the table to be repaired, and deallocate it when the repair
    is complete. See [Section 10.10.2.2, “Multiple Key Caches”](multiple-key-caches.html
    "10.10.2.2 Multiple Key Caches").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务器系统变量都可以在运行时设置，其中一些变量（[`myisam_sort_buffer_size`](server-system-variables.html#sysvar_myisam_sort_buffer_size)，[`read_buffer_size`](server-system-variables.html#sysvar_read_buffer_size)）除了全局值外还有一个会话值。设置会话值会限制更改的影响范围仅限于当前会话，并不影响其他用户。更改全局变量（[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)，[`myisam_max_sort_file_size`](server-system-variables.html#sysvar_myisam_max_sort_file_size)）会影响其他用户。对于[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)，您必须考虑到该缓冲区与其他用户共享。例如，如果您将[**myisamchk**](myisamchk.html
    "6.6.4 myisamchk — MyISAM Table-Maintenance Utility")的`key_buffer_size`变量设置为128MB，您可以将相应的[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)系统变量设置得比这更大（如果尚未设置更大），以允许其他会话中的活动使用键缓冲区。然而，更改全局键缓冲区大小会使缓冲区无效，导致其他会话的磁盘I/O增加并减慢。避免这个问题的替代方法是使用一个单独的键缓存，将要修复的表的索引分配给它，并在修复完成后取消分配。参见[Section 10.10.2.2,
    “Multiple Key Caches”](multiple-key-caches.html "10.10.2.2 Multiple Key Caches")。
- en: Based on the preceding remarks, a [`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR
    TABLE Statement") operation can be done as follows to use settings similar to
    the [**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility") command. Here a separate 128MB key buffer is allocated and the file
    system is assumed to permit a file size of at least 100GB.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前述说明，可以按照以下方式执行[`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement")操作，以使用类似于[**myisamchk**](myisamchk.html
    "6.6.4 myisamchk — MyISAM Table-Maintenance Utility")命令的设置。在这里，分配了一个单独的128MB键缓冲区，并假定文件系统至少允许文件大小为100GB。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you intend to change a global variable but want to do so only for the duration
    of a [`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement") operation
    to minimally affect other users, save its value in a user variable and restore
    it afterward. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算更改一个全局变量，但只想在[`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE
    Statement")操作的持续时间内对其他用户的影响最小化，可以将其值保存在用户变量中，并在操作后恢复。例如：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The system variables that affect [`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR
    TABLE Statement") can be set globally at server startup if you want the values
    to be in effect by default. For example, add these lines to the server `my.cnf`
    file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 影响[`REPAIR TABLE`](repair-table.html "15.7.3.5 REPAIR TABLE Statement")的系统变量可以在服务器启动时全局设置，如果您希望这些值默认生效。例如，将以下行添加到服务器的`my.cnf`文件中：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These settings do not include [`read_buffer_size`](server-system-variables.html#sysvar_read_buffer_size).
    Setting [`read_buffer_size`](server-system-variables.html#sysvar_read_buffer_size)
    globally to a large value does so for all sessions and can cause performance to
    suffer due to excessive memory allocation for a server with many simultaneous
    sessions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置不包括[`read_buffer_size`](server-system-variables.html#sysvar_read_buffer_size)。将[`read_buffer_size`](server-system-variables.html#sysvar_read_buffer_size)全局设置为一个较大的值会影响所有会话，并且可能会因为为具有许多同时会话的服务器进行过多的内存分配而导致性能下降。
