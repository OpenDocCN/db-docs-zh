- en: 15.1.17 CREATE PROCEDURE and CREATE FUNCTION Statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15.1.17 CREATE PROCEDURE and CREATE FUNCTION Statements
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html](https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html](https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These statements are used to create a stored routine (a stored procedure or
    function). That is, the specified routine becomes known to the server. By default,
    a stored routine is associated with the default database. To associate the routine
    explicitly with a given database, specify the name as *`db_name.sp_name`* when
    you create it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句用于创建存储例程（存储过程或函数）。也就是说，指定的例程会被服务器识别。默认情况下，存储例程与默认数据库关联。要将例程明确关联到特定数据库，请在创建时指定名称为*`db_name.sp_name`*。
- en: The `CREATE FUNCTION` statement is also used in MySQL to support loadable functions.
    See [Section 15.7.4.1, “CREATE FUNCTION Statement for Loadable Functions”](create-function-loadable.html
    "15.7.4.1 CREATE FUNCTION Statement for Loadable Functions"). A loadable function
    can be regarded as an external stored function. Stored functions share their namespace
    with loadable functions. See [Section 11.2.5, “Function Name Parsing and Resolution”](function-resolution.html
    "11.2.5 Function Name Parsing and Resolution"), for the rules describing how the
    server interprets references to different kinds of functions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`CREATE FUNCTION`语句在MySQL中还用于支持可加载函数。请参阅[Section 15.7.4.1, “CREATE FUNCTION
    Statement for Loadable Functions”](create-function-loadable.html "15.7.4.1 CREATE
    FUNCTION Statement for Loadable Functions")。可加载函数可以被视为外部存储函数。存储函数与可加载函数共享命名空间。有关服务器解释对不同类型函数引用的规则，请参阅[Section 11.2.5,
    “Function Name Parsing and Resolution”](function-resolution.html "11.2.5 Function
    Name Parsing and Resolution")。'
- en: To invoke a stored procedure, use the [`CALL`](call.html "15.2.1 CALL Statement")
    statement (see [Section 15.2.1, “CALL Statement”](call.html "15.2.1 CALL Statement")).
    To invoke a stored function, refer to it in an expression. The function returns
    a value during expression evaluation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用存储过程，请使用[`CALL`](call.html "15.2.1 CALL Statement")语句（参见[Section 15.2.1,
    “CALL Statement”](call.html "15.2.1 CALL Statement")）。要调用存储函数，请在表达式中引用它。在表达式评估期间，函数会返回一个值。
- en: '[`CREATE PROCEDURE`](create-procedure.html "15.1.17 CREATE PROCEDURE and CREATE
    FUNCTION Statements") and [`CREATE FUNCTION`](create-function.html "15.1.14 CREATE
    FUNCTION Statement") require the [`CREATE ROUTINE`](privileges-provided.html#priv_create-routine)
    privilege. If the `DEFINER` clause is present, the privileges required depend
    on the *`user`* value, as discussed in [Section 27.6, “Stored Object Access Control”](stored-objects-security.html
    "27.6 Stored Object Access Control"). If binary logging is enabled, [`CREATE FUNCTION`](create-function.html
    "15.1.14 CREATE FUNCTION Statement") might require the [`SUPER`](privileges-provided.html#priv_super)
    privilege, as discussed in [Section 27.7, “Stored Program Binary Logging”](stored-programs-logging.html
    "27.7 Stored Program Binary Logging").'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CREATE PROCEDURE`](create-procedure.html "15.1.17 CREATE PROCEDURE and CREATE
    FUNCTION Statements")和[`CREATE FUNCTION`](create-function.html "15.1.14 CREATE
    FUNCTION Statement")需要[`CREATE ROUTINE`](privileges-provided.html#priv_create-routine)权限。如果存在`DEFINER`子句，则所需的权限取决于*`user`*值，如[Section 27.6,
    “Stored Object Access Control”](stored-objects-security.html "27.6 Stored Object
    Access Control")中所讨论的。如果启用了二进制日志记录，则[`CREATE FUNCTION`](create-function.html "15.1.14 CREATE
    FUNCTION Statement")可能需要[`SUPER`](privileges-provided.html#priv_super)权限，如[Section 27.7,
    “Stored Program Binary Logging”](stored-programs-logging.html "27.7 Stored Program
    Binary Logging")中所讨论的。'
- en: By default, MySQL automatically grants the [`ALTER ROUTINE`](privileges-provided.html#priv_alter-routine)
    and [`EXECUTE`](privileges-provided.html#priv_execute) privileges to the routine
    creator. This behavior can be changed by disabling the [`automatic_sp_privileges`](server-system-variables.html#sysvar_automatic_sp_privileges)
    system variable. See [Section 27.2.2, “Stored Routines and MySQL Privileges”](stored-routines-privileges.html
    "27.2.2 Stored Routines and MySQL Privileges").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，MySQL自动授予[`ALTER ROUTINE`](privileges-provided.html#priv_alter-routine)和[`EXECUTE`](privileges-provided.html#priv_execute)权限给例程创建者。这种行为可以通过禁用[`automatic_sp_privileges`](server-system-variables.html#sysvar_automatic_sp_privileges)系统变量来更改。请参阅[Section 27.2.2,
    “Stored Routines and MySQL Privileges”](stored-routines-privileges.html "27.2.2 Stored
    Routines and MySQL Privileges")。
- en: The `DEFINER` and `SQL SECURITY` clauses specify the security context to be
    used when checking access privileges at routine execution time, as described later
    in this section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEFINER`和`SQL SECURITY`子句指定在例程执行时检查访问权限时要使用的安全上下文，如本节后面所述。'
- en: If the routine name is the same as the name of a built-in SQL function, a syntax
    error occurs unless you use a space between the name and the following parenthesis
    when defining the routine or invoking it later. For this reason, avoid using the
    names of existing SQL functions for your own stored routines.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果例程名称与内置 SQL 函数的名称相同，在定义例程或稍后调用它时，如果名称和后面的括号之间没有空格，将会发生语法错误。因此，避免使用现有 SQL 函数的名称作为自己的存储过程名称。
- en: The [`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space) SQL mode applies to
    built-in functions, not to stored routines. It is always permissible to have spaces
    after a stored routine name, regardless of whether [`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space)
    is enabled.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space) SQL 模式适用于内置函数，而不适用于存储过程。无论
    [`IGNORE_SPACE`](sql-mode.html#sqlmode_ignore_space) 是否启用，存储过程名称后面都可以有空格。'
- en: '`IF NOT EXISTS` prevents an error from occurring if there already exists a
    routine with the same name. This option is supported with both `CREATE FUNCTION`
    and `CREATE PROCEDURE` beginning with MySQL 8.0.29.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`IF NOT EXISTS` 可以防止在已经存在同名例程时出现错误。从 MySQL 8.0.29 开始，`CREATE FUNCTION` 和 `CREATE
    PROCEDURE` 都支持这个选项。'
- en: If a built-in function with the same name already exists, attempting to create
    a stored function with `CREATE FUNCTION ... IF NOT EXISTS` succeeds with a warning
    indicating that it has the same name as a native function; this is no different
    than when performing the same `CREATE FUNCTION` statement without specifying `IF
    NOT EXISTS`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同名的内置函数已经存在，尝试使用 `CREATE FUNCTION ... IF NOT EXISTS` 创建存储函数会成功，并显示警告指示它与本地函数同名；这与执行相同的
    `CREATE FUNCTION` 语句但不指定 `IF NOT EXISTS` 时没有区别。
- en: If a loadable function with the same name already exists, attempting to create
    a stored function using `IF NOT EXISTS` succeeds with a warning. This is the same
    as without specifying `IF NOT EXISTS`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同名的可加载函数已经存在，使用 `IF NOT EXISTS` 尝试创建存储函数会成功并显示警告。这与不指定 `IF NOT EXISTS` 时的情况相同。
- en: See [Function Name Resolution](function-resolution.html#function-name-resolution
    "Function Name Resolution"), for more information.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅[函数名称解析](function-resolution.html#function-name-resolution "函数名称解析")。
- en: The parameter list enclosed within parentheses must always be present. If there
    are no parameters, an empty parameter list of `()` should be used. Parameter names
    are not case-sensitive.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 括在括号内的参数列表必须始终存在。如果没有参数，则应使用空参数列表 `()`。参数名称不区分大小写。
- en: Each parameter is an `IN` parameter by default. To specify otherwise for a parameter,
    use the keyword `OUT` or `INOUT` before the parameter name.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数默认为 `IN` 参数。要为参数指定其他方式，请在参数名称之前使用关键字 `OUT` 或 `INOUT`。
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Specifying a parameter as `IN`, `OUT`, or `INOUT` is valid only for a `PROCEDURE`.
    For a `FUNCTION`, parameters are always regarded as `IN` parameters.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 仅对 `PROCEDURE` 指定参数为 `IN`、`OUT` 或 `INOUT` 是有效的。对于 `FUNCTION`，参数始终被视为 `IN` 参数。
- en: An `IN` parameter passes a value into a procedure. The procedure might modify
    the value, but the modification is not visible to the caller when the procedure
    returns. An `OUT` parameter passes a value from the procedure back to the caller.
    Its initial value is `NULL` within the procedure, and its value is visible to
    the caller when the procedure returns. An `INOUT` parameter is initialized by
    the caller, can be modified by the procedure, and any change made by the procedure
    is visible to the caller when the procedure returns.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`IN` 参数将一个值传递给存储过程。存储过程可能会修改该值，但当存储过程返回时，对调用者不可见。`OUT` 参数将一个值从存储过程传递回调用者。在存储过程内部，其初始值为
    `NULL`，当存储过程返回时，其值对调用者可见。`INOUT` 参数由调用者初始化，可以被存储过程修改，存储过程所做的任何更改在存储过程返回时对调用者可见。'
- en: For each `OUT` or `INOUT` parameter, pass a user-defined variable in the [`CALL`](call.html
    "15.2.1 CALL Statement") statement that invokes the procedure so that you can
    obtain its value when the procedure returns. If you are calling the procedure
    from within another stored procedure or function, you can also pass a routine
    parameter or local routine variable as an `OUT` or `INOUT` parameter. If you are
    calling the procedure from within a trigger, you can also pass `NEW.*`col_name`*`
    as an `OUT` or `INOUT` parameter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个`OUT`或`INOUT`参数，在调用过程的[`CALL`](call.html "15.2.1 CALL Statement")语句中传递一个用户定义的变量，以便在过程返回时获取其值。如果您从另一个存储过程或函数内部调用该过程，还可以将例程参数或本地例程变量作为`OUT`或`INOUT`参数传递。如果您从触发器内部调用该过程，还可以将`NEW.*col_name*`作为`OUT`或`INOUT`参数传递。
- en: For information about the effect of unhandled conditions on procedure parameters,
    see [Section 15.6.7.8, “Condition Handling and OUT or INOUT Parameters”](conditions-and-parameters.html
    "15.6.7.8 Condition Handling and OUT or INOUT Parameters").
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有关未处理条件对过程参数的影响的信息，请参见[Section 15.6.7.8, “Condition Handling and OUT or INOUT
    Parameters”](conditions-and-parameters.html "15.6.7.8 Condition Handling and OUT
    or INOUT Parameters")。
- en: Routine parameters cannot be referenced in statements prepared within the routine;
    see [Section 27.8, “Restrictions on Stored Programs”](stored-program-restrictions.html
    "27.8 Restrictions on Stored Programs").
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例程参数不能在例程内准备的语句中引用；请参见[Section 27.8, “Restrictions on Stored Programs”](stored-program-restrictions.html
    "27.8 Restrictions on Stored Programs")。
- en: 'The following example shows a simple stored procedure that, given a country
    code, counts the number of cities for that country that appear in the `city` table
    of the `world` database. The country code is passed using an `IN` parameter, and
    the city count is returned using an `OUT` parameter:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了一个简单的存储过程，根据国家代码计算出现在`world`数据库的`city`表中的该国家的城市数量。国家代码使用`IN`参数传递，并使用`OUT`参数返回城市计数：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The example uses the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line
    Client") client `delimiter` command to change the statement delimiter from `;`
    to `//` while the procedure is being defined. This enables the `;` delimiter used
    in the procedure body to be passed through to the server rather than being interpreted
    by [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client") itself.
    See [Section 27.1, “Defining Stored Programs”](stored-programs-defining.html "27.1 Defining
    Stored Programs").
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例使用[**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")客户端`delimiter`命令在定义过程时将语句定界符从`；`更改为`//`。这样，在过程体中使用的`；`定界符将被传递到服务器而不是被[**mysql**](mysql.html
    "6.5.1 mysql — The MySQL Command-Line Client")本身解释。请参见[Section 27.1, “Defining
    Stored Programs”](stored-programs-defining.html "27.1 Defining Stored Programs")。
- en: The `RETURNS` clause may be specified only for a `FUNCTION`, for which it is
    mandatory. It indicates the return type of the function, and the function body
    must contain a `RETURN *`value`*` statement. If the [`RETURN`](return.html "15.6.5.7 RETURN
    Statement") statement returns a value of a different type, the value is coerced
    to the proper type. For example, if a function specifies an [`ENUM`](enum.html
    "13.3.5 The ENUM Type") or [`SET`](set.html "13.3.6 The SET Type") value in the
    `RETURNS` clause, but the [`RETURN`](return.html "15.6.5.7 RETURN Statement")
    statement returns an integer, the value returned from the function is the string
    for the corresponding [`ENUM`](enum.html "13.3.5 The ENUM Type") member of set
    of [`SET`](set.html "13.3.6 The SET Type") members.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`RETURNS`子句只能为`FUNCTION`指定，对于`FUNCTION`是强制的。它指示函数的返回类型，函数体必须包含一个`RETURN *value*`语句。如果[`RETURN`](return.html
    "15.6.5.7 RETURN Statement")语句返回不同类型的值，则将该值强制转换为正确的类型。例如，如果函数在`RETURNS`子句中指定了[`ENUM`](enum.html
    "13.3.5 The ENUM Type")或[`SET`](set.html "13.3.6 The SET Type")值，但[`RETURN`](return.html
    "15.6.5.7 RETURN Statement")语句返回一个整数，则从函数返回的值是相应[`ENUM`](enum.html "13.3.5 The
    ENUM Type")成员或[`SET`](set.html "13.3.6 The SET Type")成员的字符串。'
- en: 'The following example function takes a parameter, performs an operation using
    an SQL function, and returns the result. In this case, it is unnecessary to use
    `delimiter` because the function definition contains no internal `;` statement
    delimiters:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例函数接受一个参数，使用SQL函数执行操作，并返回结果。在这种情况下，不需要使用`delimiter`，因为函数定义不包含内部的`；`语句定界符：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameter types and function return types can be declared to use any valid data
    type. The `COLLATE` attribute can be used if preceded by a `CHARACTER SET` specification.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参数类型和函数返回类型可以声明为任何有效的数据类型。如果在`CHARACTER SET`规范之前使用`COLLATE`属性，则可以使用它。
- en: The *`routine_body`* consists of a valid SQL routine statement. This can be
    a simple statement such as [`SELECT`](select.html "15.2.13 SELECT Statement")
    or [`INSERT`](insert.html "15.2.7 INSERT Statement"), or a compound statement
    written using `BEGIN` and `END`. Compound statements can contain declarations,
    loops, and other control structure statements. The syntax for these statements
    is described in [Section 15.6, “Compound Statement Syntax”](sql-compound-statements.html
    "15.6 Compound Statement Syntax"). In practice, stored functions tend to use compound
    statements, unless the body consists of a single [`RETURN`](return.html "15.6.5.7 RETURN
    Statement") statement.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*`routine_body`* 包含一个有效的 SQL 例程语句。这可以是一个简单的语句，比如[`SELECT`](select.html "15.2.13 SELECT
    Statement")或[`INSERT`](insert.html "15.2.7 INSERT Statement")，或者使用`BEGIN`和`END`编写的复合语句。复合语句可以包含声明、循环和其他控制结构语句。这些语句的语法在[第
    15.6 节“复合语句语法”](sql-compound-statements.html "15.6 Compound Statement Syntax")中描述。在实践中，存储函数往往使用复合语句，除非主体由单个[`RETURN`](return.html
    "15.6.5.7 RETURN Statement")语句组成。'
- en: MySQL permits routines to contain DDL statements, such as `CREATE` and `DROP`.
    MySQL also permits stored procedures (but not stored functions) to contain SQL
    transaction statements such as [`COMMIT`](commit.html "15.3.1 START TRANSACTION,
    COMMIT, and ROLLBACK Statements"). Stored functions may not contain statements
    that perform explicit or implicit commit or rollback. Support for these statements
    is not required by the SQL standard, which states that each DBMS vendor may decide
    whether to permit them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL允许例程包含 DDL 语句，比如`CREATE`和`DROP`。MySQL也允许存储过程（但不允许存储函数）包含 SQL 事务语句，比如[`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")。存储函数不能包含执行显式或隐式提交或回滚的语句。SQL
    标准不要求支持这些语句，它规定每个 DBMS 供应商可以决定是否允许它们。
- en: Statements that return a result set can be used within a stored procedure but
    not within a stored function. This prohibition includes [`SELECT`](select.html
    "15.2.13 SELECT Statement") statements that do not have an `INTO *`var_list`*`
    clause and other statements such as [`SHOW`](show.html "15.7.7 SHOW Statements"),
    [`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement"), and [`CHECK TABLE`](check-table.html
    "15.7.3.2 CHECK TABLE Statement"). For statements that can be determined at function
    definition time to return a result set, a `Not allowed to return a result set
    from a function` error occurs ([`ER_SP_NO_RETSET`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_sp_no_retset)).
    For statements that can be determined only at runtime to return a result set,
    a `PROCEDURE %s can't return a result set in the given context` error occurs ([`ER_SP_BADSELECT`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_sp_badselect)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 返回结果集的语句可以在存储过程中使用，但不能在存储函数中使用。这个禁令包括没有`INTO *`var_list`*`子句的[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句以及其他语句，比如[`SHOW`](show.html "15.7.7 SHOW Statements")、[`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement")和[`CHECK TABLE`](check-table.html "15.7.3.2 CHECK TABLE
    Statement")。对于在函数定义时可以确定返回结果集的语句，会出现`Not allowed to return a result set from a
    function`错误（[`ER_SP_NO_RETSET`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_sp_no_retset)）。对于只能在运行时确定返回结果集的语句，会出现`PROCEDURE
    %s can't return a result set in the given context`错误（[`ER_SP_BADSELECT`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_sp_badselect)）。
- en: '[`USE`](use.html "15.8.4 USE Statement") statements within stored routines
    are not permitted. When a routine is invoked, an implicit `USE *`db_name`*` is
    performed (and undone when the routine terminates). The causes the routine to
    have the given default database while it executes. References to objects in databases
    other than the routine default database should be qualified with the appropriate
    database name.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 存储例程中不允许使用[`USE`](use.html "15.8.4 USE Statement")语句。当调用例程时，会执行一个隐式的`USE *`db_name`*`（在例程终止时撤消）。这会导致例程在执行时具有给定的默认数据库。对于例程默认数据库之外的数据库中的对象的引用应该使用适当的数据库名称进行限定。
- en: For additional information about statements that are not permitted in stored
    routines, see [Section 27.8, “Restrictions on Stored Programs”](stored-program-restrictions.html
    "27.8 Restrictions on Stored Programs").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关存储例程中不允许的语句的更多信息，请参见[第 27.8 节“存储程序的限制”](stored-program-restrictions.html "27.8 Restrictions
    on Stored Programs")。
- en: For information about invoking stored procedures from within programs written
    in a language that has a MySQL interface, see [Section 15.2.1, “CALL Statement”](call.html
    "15.2.1 CALL Statement").
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何从具有 MySQL 接口的语言编写的程序中调用存储过程的信息，请参见[第 15.2.1 节“CALL 语句”](call.html "15.2.1 CALL
    Statement")。
- en: MySQL stores the [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    system variable setting in effect when a routine is created or altered, and always
    executes the routine with this setting in force, *regardless of the current server
    SQL mode when the routine begins executing*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 在创建或更改例程时存储 [`sql_mode`](server-system-variables.html#sysvar_sql_mode)
    系统变量设置，并始终以此设置执行例程，*不管例程开始执行时当前服务器 SQL 模式如何*。
- en: The switch from the SQL mode of the invoker to that of the routine occurs after
    evaluation of arguments and assignment of the resulting values to routine parameters.
    If you define a routine in strict SQL mode but invoke it in nonstrict mode, assignment
    of arguments to routine parameters does not take place in strict mode. If you
    require that expressions passed to a routine be assigned in strict SQL mode, you
    should invoke the routine with strict mode in effect.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从调用者的 SQL 模式切换到例程的 SQL 模式发生在参数评估和将结果值分配给例程参数之后。如果在严格 SQL 模式下定义例程但在非严格模式下调用它，则参数分配给例程参数不会在严格模式下进行。如果要求传递给例程的表达式在严格
    SQL 模式下分配，应该在调用例程时启用严格模式。
- en: The `COMMENT` characteristic is a MySQL extension, and may be used to describe
    the stored routine. This information is displayed by the [`SHOW CREATE PROCEDURE`](show-create-procedure.html
    "15.7.7.9 SHOW CREATE PROCEDURE Statement") and [`SHOW CREATE FUNCTION`](show-create-function.html
    "15.7.7.8 SHOW CREATE FUNCTION Statement") statements.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`COMMENT` 特性是 MySQL 的扩展，可用于描述存储例程。这些信息会被 [`SHOW CREATE PROCEDURE`](show-create-procedure.html
    "15.7.7.9 SHOW CREATE PROCEDURE Statement") 和 [`SHOW CREATE FUNCTION`](show-create-function.html
    "15.7.7.8 SHOW CREATE FUNCTION Statement") 语句显示。'
- en: The `LANGUAGE` characteristic indicates the language in which the routine is
    written. The server ignores this characteristic; only SQL routines are supported.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`LANGUAGE` 特性表示例程所编写的语言。服务器会忽略此特性；仅支持 SQL 例程。'
- en: A routine is considered “deterministic” if it always produces the same result
    for the same input parameters, and “not deterministic” otherwise. If neither `DETERMINISTIC`
    nor `NOT DETERMINISTIC` is given in the routine definition, the default is `NOT
    DETERMINISTIC`. To declare that a function is deterministic, you must specify
    `DETERMINISTIC` explicitly.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个例程对于相同的输入参数总是产生相同的结果，则被认为是“确定性的”，否则是“非确定性的”。如果例程定义中既没有 `DETERMINISTIC` 也没有
    `NOT DETERMINISTIC`，则默认为 `NOT DETERMINISTIC`。要声明一个函数是确定性的，必须明确指定 `DETERMINISTIC`。
- en: 'Assessment of the nature of a routine is based on the “honesty” of the creator:
    MySQL does not check that a routine declared `DETERMINISTIC` is free of statements
    that produce nondeterministic results. However, misdeclaring a routine might affect
    results or affect performance. Declaring a nondeterministic routine as `DETERMINISTIC`
    might lead to unexpected results by causing the optimizer to make incorrect execution
    plan choices. Declaring a deterministic routine as `NONDETERMINISTIC` might diminish
    performance by causing available optimizations not to be used.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对例程性质的评估基于创建者的“诚实度”：MySQL 不会检查声明为 `DETERMINISTIC` 的例程是否不包含产生非确定性结果的语句。然而，错误声明例程可能会影响结果或性能。将一个非确定性例程声明为
    `DETERMINISTIC` 可能会导致意外结果，因为优化器会做出错误的执行计划选择。将一个确定性例程声明为 `NONDETERMINISTIC` 可能会降低性能，因为可用的优化不会被使用。
- en: If binary logging is enabled, the `DETERMINISTIC` characteristic affects which
    routine definitions MySQL accepts. See [Section 27.7, “Stored Program Binary Logging”](stored-programs-logging.html
    "27.7 Stored Program Binary Logging").
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了二进制日志记录，`DETERMINISTIC` 特性会影响 MySQL 接受哪些例程定义。参见 [第 27.7 节，“存储程序二进制日志记录”](stored-programs-logging.html
    "27.7 Stored Program Binary Logging")。
- en: A routine that contains the [`NOW()`](date-and-time-functions.html#function_now)
    function (or its synonyms) or [`RAND()`](mathematical-functions.html#function_rand)
    is nondeterministic, but it might still be replication-safe. For [`NOW()`](date-and-time-functions.html#function_now),
    the binary log includes the timestamp and replicates correctly. [`RAND()`](mathematical-functions.html#function_rand)
    also replicates correctly as long as it is called only a single time during the
    execution of a routine. (You can consider the routine execution timestamp and
    random number seed as implicit inputs that are identical on the source and replica.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 包含[`NOW()`](date-and-time-functions.html#function_now)函数（或其同义词）或[`RAND()`](mathematical-functions.html#function_rand)的例程是不确定性的，但可能仍然是复制安全的。对于[`NOW()`](date-and-time-functions.html#function_now)，二进制日志包括时间戳并正确复制。[`RAND()`](mathematical-functions.html#function_rand)只要在例程执行过程中仅调用一次，也会正确复制。（您可以将例程执行时间戳和随机数种子视为在源和副本上相同的隐式输入。）
- en: Several characteristics provide information about the nature of data use by
    the routine. In MySQL, these characteristics are advisory only. The server does
    not use them to constrain what kinds of statements a routine is permitted to execute.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 几个特性提供有关例程使用数据性质的信息。在MySQL中，这些特性仅供参考。服务器不使用它们来限制例程允许执行的语句类型。
- en: '`CONTAINS SQL` indicates that the routine does not contain statements that
    read or write data. This is the default if none of these characteristics is given
    explicitly. Examples of such statements are `SET @x = 1` or `DO RELEASE_LOCK(''abc'')`,
    which execute but neither read nor write data.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONTAINS SQL`表示例程不包含读取或写入数据的语句。如果没有明确给出这些特性中的任何一个，则这是默认值。此类语句的示例是`SET @x =
    1`或`DO RELEASE_LOCK(''abc'')`，它们执行但既不读取也不写入数据。'
- en: '`NO SQL` indicates that the routine contains no SQL statements.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO SQL`表示例程不包含SQL语句。'
- en: '`READS SQL DATA` indicates that the routine contains statements that read data
    (for example, [`SELECT`](select.html "15.2.13 SELECT Statement")), but not statements
    that write data.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READS SQL DATA`表示例程包含读取数据的语句（例如，[`SELECT`](select.html "15.2.13 SELECT Statement")），但不包含写入数据的语句。'
- en: '`MODIFIES SQL DATA` indicates that the routine contains statements that may
    write data (for example, [`INSERT`](insert.html "15.2.7 INSERT Statement") or
    [`DELETE`](delete.html "15.2.2 DELETE Statement")).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODIFIES SQL DATA`表示例程包含可能写入数据的语句（例如，[`INSERT`](insert.html "15.2.7 INSERT
    Statement")或[`DELETE`](delete.html "15.2.2 DELETE Statement")）。'
- en: The `SQL SECURITY` characteristic can be `DEFINER` or `INVOKER` to specify the
    security context; that is, whether the routine executes using the privileges of
    the account named in the routine `DEFINER` clause or the user who invokes it.
    This account must have permission to access the database with which the routine
    is associated. The default value is `DEFINER`. The user who invokes the routine
    must have the [`EXECUTE`](privileges-provided.html#priv_execute) privilege for
    it, as must the `DEFINER` account if the routine executes in definer security
    context.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`SQL SECURITY`特性可以是`DEFINER`或`INVOKER`，用于指定安全上下文；也就是说，例程是使用例程`DEFINER`子句中命名的帐户的权限执行，还是由调用者执行。此帐户必须具有访问与例程关联的数据库的权限。默认值为`DEFINER`。调用例程的用户必须具有执行权限，以及如果例程在定义者安全上下文中执行，则`DEFINER`帐户也必须具有执行权限。'
- en: The `DEFINER` clause specifies the MySQL account to be used when checking access
    privileges at routine execution time for routines that have the `SQL SECURITY
    DEFINER` characteristic.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEFINER`子句指定了在具有`SQL SECURITY DEFINER`特性的例程执行时检查访问权限时要使用的MySQL帐户。'
- en: If the `DEFINER` clause is present, the *`user`* value should be a MySQL account
    specified as `'*`user_name`*'@'*`host_name`*'`, [`CURRENT_USER`](information-functions.html#function_current-user),
    or [`CURRENT_USER()`](information-functions.html#function_current-user). The permitted
    *`user`* values depend on the privileges you hold, as discussed in [Section 27.6,
    “Stored Object Access Control”](stored-objects-security.html "27.6 Stored Object
    Access Control"). Also see that section for additional information about stored
    routine security.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在`DEFINER`子句，则*`user`*值应为指定为`'*`user_name`*'@'*`host_name`*`、[`CURRENT_USER`](information-functions.html#function_current-user)或[`CURRENT_USER()`](information-functions.html#function_current-user)的MySQL帐户。允许的*`user`*值取决于您拥有的权限，如[第27.6节“存储对象访问控制”](stored-objects-security.html
    "27.6 Stored Object Access Control")中所讨论的。此外，请参阅该部分以获取有关存储例程安全性的其他信息。
- en: If the `DEFINER` clause is omitted, the default definer is the user who executes
    the [`CREATE PROCEDURE`](create-procedure.html "15.1.17 CREATE PROCEDURE and CREATE
    FUNCTION Statements") or [`CREATE FUNCTION`](create-function.html "15.1.14 CREATE
    FUNCTION Statement") statement. This is the same as specifying `DEFINER = CURRENT_USER`
    explicitly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略`DEFINER`子句，则默认的定义者是执行[`CREATE PROCEDURE`](create-procedure.html "15.1.17 CREATE
    PROCEDURE and CREATE FUNCTION Statements")或[`CREATE FUNCTION`](create-function.html
    "15.1.14 CREATE FUNCTION Statement")语句的用户。这与明确指定`DEFINER = CURRENT_USER`相同。
- en: Within the body of a stored routine that is defined with the `SQL SECURITY DEFINER`
    characteristic, the [`CURRENT_USER`](information-functions.html#function_current-user)
    function returns the routine's `DEFINER` value. For information about user auditing
    within stored routines, see [Section 8.2.23, “SQL-Based Account Activity Auditing”](account-activity-auditing.html
    "8.2.23 SQL-Based Account Activity Auditing").
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有`SQL SECURITY DEFINER`特性定义的存储例程体内，[`CURRENT_USER`](information-functions.html#function_current-user)函数返回例程的`DEFINER`值。有关存储例程中用户审计的信息，请参见[第8.2.23节，“基于SQL的帐户活动审计”](account-activity-auditing.html
    "8.2.23 SQL-Based Account Activity Auditing")。
- en: 'Consider the following procedure, which displays a count of the number of MySQL
    accounts listed in the `mysql.user` system table:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下过程，该过程显示`mysql.user`系统表中列出的MySQL帐户数量的计数：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The procedure is assigned a `DEFINER` account of `'admin'@'localhost'` no matter
    which user defines it. It executes with the privileges of that account no matter
    which user invokes it (because the default security characteristic is `DEFINER`).
    The procedure succeeds or fails depending on whether invoker has the [`EXECUTE`](privileges-provided.html#priv_execute)
    privilege for it and `'admin'@'localhost'` has the [`SELECT`](privileges-provided.html#priv_select)
    privilege for the `mysql.user` table.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪个用户定义该过程，该过程都被分配了一个`'admin'@'localhost'`的`DEFINER`帐户。它以该帐户的权限执行，无论哪个用户调用它（因为默认的安全特性是`DEFINER`）。该过程的成功或失败取决于调用者是否具有[`EXECUTE`](privileges-provided.html#priv_execute)权限以及`'admin'@'localhost'`是否具有`mysql.user`表的[`SELECT`](privileges-provided.html#priv_select)权限。
- en: 'Now suppose that the procedure is defined with the `SQL SECURITY INVOKER` characteristic:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设该过程使用`SQL SECURITY INVOKER`特性定义：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The procedure still has a `DEFINER` of `'admin'@'localhost'`, but in this case,
    it executes with the privileges of the invoking user. Thus, the procedure succeeds
    or fails depending on whether the invoker has the [`EXECUTE`](privileges-provided.html#priv_execute)
    privilege for it and the [`SELECT`](privileges-provided.html#priv_select) privilege
    for the `mysql.user` table.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程仍然具有`'admin'@'localhost'`的`DEFINER`，但在这种情况下，它以调用用户的权限执行。因此，该过程的成功或失败取决于调用者是否具有[`EXECUTE`](privileges-provided.html#priv_execute)权限以及`mysql.user`表的`SELECT`权限。
- en: By default, when a routine with the `SQL SECURITY DEFINER` characteristic is
    executed, MySQL Server does not set any active roles for the MySQL account named
    in the `DEFINER` clause, only the default roles. The exception is if the [`activate_all_roles_on_login`](server-system-variables.html#sysvar_activate_all_roles_on_login)
    system variable is enabled, in which case MySQL Server sets all roles granted
    to the `DEFINER` user, including mandatory roles. Any privileges granted through
    roles are therefore not checked by default when the [`CREATE PROCEDURE`](create-procedure.html
    "15.1.17 CREATE PROCEDURE and CREATE FUNCTION Statements") or [`CREATE FUNCTION`](create-function.html
    "15.1.14 CREATE FUNCTION Statement") statement is issued. For stored programs,
    if execution should occur with roles different from the default, the program body
    can execute [`SET ROLE`](set-role.html "15.7.1.11 SET ROLE Statement") to activate
    the required roles. This must be done with caution since the privileges assigned
    to roles can be changed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当具有`SQL SECURITY DEFINER`特性的例程被执行时，MySQL服务器不会为`DEFINER`子句中命名的MySQL帐户设置任何活动角色，只有默认角色。例外情况是如果启用了[`activate_all_roles_on_login`](server-system-variables.html#sysvar_activate_all_roles_on_login)系统变量，此时MySQL服务器会设置授予`DEFINER`用户的所有角色，包括强制角色。因此，默认情况下，在发出[`CREATE
    PROCEDURE`](create-procedure.html "15.1.17 CREATE PROCEDURE and CREATE FUNCTION
    Statements")或[`CREATE FUNCTION`](create-function.html "15.1.14 CREATE FUNCTION
    Statement")语句时，不会检查通过角色授予的任何权限。对于存储程序，如果执行应该使用与默认不同的角色，则程序体可以执行[`SET ROLE`](set-role.html
    "15.7.1.11 SET ROLE Statement")来激活所需的角色。这必须谨慎进行，因为分配给角色的权限可能会更改。
- en: 'The server handles the data type of a routine parameter, local routine variable
    created with [`DECLARE`](declare.html "15.6.3 DECLARE Statement"), or function
    return value as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器处理例程参数、使用[`DECLARE`](declare.html "15.6.3 DECLARE Statement")创建的本地例程变量，或函数返回值的数据类型如下：
- en: Assignments are checked for data type mismatches and overflow. Conversion and
    overflow problems result in warnings, or errors in strict SQL mode.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配会检查数据类型不匹配和溢出。转换和溢出问题会导致警告，或在严格的SQL模式下出现错误。
- en: Only scalar values can be assigned. For example, a statement such as `SET x
    = (SELECT 1, 2)` is invalid.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只能分配标量值。例如，`SET x = (SELECT 1, 2)`这样的语句是无效的。
- en: For character data types, if `CHARACTER SET` is included in the declaration,
    the specified character set and its default collation is used. If the `COLLATE`
    attribute is also present, that collation is used rather than the default collation.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于字符数据类型，如果声明中包含`CHARACTER SET`，则使用指定的字符集及其默认排序规则。如果还存在`COLLATE`属性，则使用该排序规则而不是默认排序规则。
- en: If `CHARACTER SET` and `COLLATE` are not present, the database character set
    and collation in effect at routine creation time are used. To avoid having the
    server use the database character set and collation, provide an explicit `CHARACTER
    SET` and a `COLLATE` attribute for character data parameters.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有`CHARACTER SET`和`COLLATE`，则在例程创建时生效的数据库字符集和排序规则会被使用。为了避免服务器使用数据库字符集和排序规则，请为字符数据参数提供明确的`CHARACTER
    SET`和`COLLATE`属性。
- en: If you alter the database default character set or collation, stored routines
    that are to use the new database defaults must be dropped and recreated.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果更改数据库默认字符集或排序规则，则必须删除并重新创建要使用新数据库默认值的存储例程。
- en: The database character set and collation are given by the value of the [`character_set_database`](server-system-variables.html#sysvar_character_set_database)
    and [`collation_database`](server-system-variables.html#sysvar_collation_database)
    system variables. For more information, see [Section 12.3.3, “Database Character
    Set and Collation”](charset-database.html "12.3.3 Database Character Set and Collation").
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库字符集和排序规则由[`character_set_database`](server-system-variables.html#sysvar_character_set_database)和[`collation_database`](server-system-variables.html#sysvar_collation_database)系统变量的值给出。更多信息，请参见[Section 12.3.3,
    “Database Character Set and Collation”](charset-database.html "12.3.3 Database
    Character Set and Collation")。
