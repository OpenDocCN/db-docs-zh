- en: 13.3.2 The CHAR and VARCHAR Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.3.2 CHAR和VARCHAR类型
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/char.html](https://dev.mysql.com/doc/refman/8.0/en/char.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/char.html](https://dev.mysql.com/doc/refman/8.0/en/char.html)
- en: The `CHAR` and `VARCHAR` types are similar, but differ in the way they are stored
    and retrieved. They also differ in maximum length and in whether trailing spaces
    are retained.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHAR`和`VARCHAR`类型相似，但在存储和检索方式、最大长度以及是否保留尾随空格方面有所不同。'
- en: The `CHAR` and `VARCHAR` types are declared with a length that indicates the
    maximum number of characters you want to store. For example, `CHAR(30)` can hold
    up to 30 characters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHAR`和`VARCHAR`类型声明的长度指示您希望存储的最大字符数。例如，`CHAR(30)`可以容纳最多30个字符。'
- en: The length of a `CHAR` column is fixed to the length that you declare when you
    create the table. The length can be any value from 0 to 255\. When `CHAR` values
    are stored, they are right-padded with spaces to the specified length. When `CHAR`
    values are retrieved, trailing spaces are removed unless the [`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)
    SQL mode is enabled.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHAR`列的长度在创建表时声明为固定长度。长度可以是0到255之间的任何值。存储`CHAR`值时，它们会右填充空格以达到指定长度。检索`CHAR`值时，除非启用了[`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)
    SQL模式，否则会移除尾随空格。'
- en: Values in `VARCHAR` columns are variable-length strings. The length can be specified
    as a value from 0 to 65,535\. The effective maximum length of a `VARCHAR` is subject
    to the maximum row size (65,535 bytes, which is shared among all columns) and
    the character set used. See [Section 10.4.7, “Limits on Table Column Count and
    Row Size”](column-count-limit.html "10.4.7 Limits on Table Column Count and Row
    Size").
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`VARCHAR`列中的值是可变长度字符串。长度可以指定为0到65,535之间的值。`VARCHAR`的有效最大长度取决于最大行大小（65,535字节，这些字节在所有列之间共享）和所使用的字符集。参见[第10.4.7节，“表列计数和行大小限制”](column-count-limit.html
    "10.4.7 表列计数和行大小限制")。'
- en: In contrast to `CHAR`, `VARCHAR` values are stored as a 1-byte or 2-byte length
    prefix plus data. The length prefix indicates the number of bytes in the value.
    A column uses one length byte if values require no more than 255 bytes, two length
    bytes if values may require more than 255 bytes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与`CHAR`相反，`VARCHAR`值存储为1字节或2字节长度前缀加数据。长度前缀指示值中的字节数。如果值不超过255字节，则列使用一个长度字节，如果值可能需要超过255字节，则使用两个长度字节。
- en: If strict SQL mode is not enabled and you assign a value to a `CHAR` or `VARCHAR`
    column that exceeds the column's maximum length, the value is truncated to fit
    and a warning is generated. For truncation of nonspace characters, you can cause
    an error to occur (rather than a warning) and suppress insertion of the value
    by using strict SQL mode. See [Section 7.1.11, “Server SQL Modes”](sql-mode.html
    "7.1.11 Server SQL Modes").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未启用严格的SQL模式，并且将值分配给超出列最大长度的`CHAR`或`VARCHAR`列，则该值将被截断以适应，并生成警告。对于非空格字符的截断，您可以通过使用严格的SQL模式来导致错误发生（而不是警告），并抑制值的插入。参见[第7.1.11节，“服务器SQL模式”](sql-mode.html
    "7.1.11 服务器SQL模式")。
- en: For `VARCHAR` columns, trailing spaces in excess of the column length are truncated
    prior to insertion and a warning is generated, regardless of the SQL mode in use.
    For `CHAR` columns, truncation of excess trailing spaces from inserted values
    is performed silently regardless of the SQL mode.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`VARCHAR`列，在插入之前会截断超出列长度的尾随空格，并生成警告，无论使用的SQL模式如何。对于`CHAR`列，无论使用的SQL模式如何，插入值时都会静默执行超出尾随空格的截断。
- en: '`VARCHAR` values are not padded when they are stored. Trailing spaces are retained
    when values are stored and retrieved, in conformance with standard SQL.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 存储`VARCHAR`值时不会填充。在存储和检索值时，尾随空格会被保留，符合标准SQL。
- en: The following table illustrates the differences between `CHAR` and `VARCHAR`
    by showing the result of storing various string values into `CHAR(4)` and `VARCHAR(4)`
    columns (assuming that the column uses a single-byte character set such as `latin1`).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格通过展示将各种字符串值存储到`CHAR(4)`和`VARCHAR(4)`列中的结果（假设列使用单字节字符集如`latin1`）来说明`CHAR`和`VARCHAR`之间的差异。
- en: '| Value | `CHAR(4)` | Storage Required | `VARCHAR(4)` | Storage Required |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 值 | `CHAR(4)` | 存储空间 | `VARCHAR(4)` | 存储空间 |'
- en: '| `''''` | `''    ''` | 4 bytes | `''''` | 1 byte |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `''''` | `''    ''` | 4字节 | `''''` | 1字节 |'
- en: '| `''ab''` | `''ab  ''` | 4 bytes | `''ab''` | 3 bytes |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `''ab''` | `''ab  ''` | 4字节 | `''ab''` | 3字节 |'
- en: '| `''abcd''` | `''abcd''` | 4 bytes | `''abcd''` | 5 bytes |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `''abcd''` | `''abcd''` | 4字节 | `''abcd''` | 5字节 |'
- en: '| `''abcdefgh''` | `''abcd''` | 4 bytes | `''abcd''` | 5 bytes |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `''abcdefgh''` | `''abcd''` | 4字节 | `''abcd''` | 5字节 |'
- en: The values shown as stored in the last row of the table apply *only when not
    using strict SQL mode*; if strict mode is enabled, values that exceed the column
    length are *not stored*, and an error results.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在表的最后一行显示的值仅在*不使用严格SQL模式*时适用；如果启用了严格模式，超过列长度的值将*不会被存储*，并且会导致错误。
- en: '`InnoDB` encodes fixed-length fields greater than or equal to 768 bytes in
    length as variable-length fields, which can be stored off-page. For example, a
    `CHAR(255)` column can exceed 768 bytes if the maximum byte length of the character
    set is greater than 3, as it is with `utf8mb4`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`将长度大于或等于768字节的固定长度字段编码为可变长度字段，可以存储在页外。例如，如果字符集的最大字节长度大于3，如`utf8mb4`，则`CHAR(255)`列可以超过768字节。'
- en: 'If a given value is stored into the `CHAR(4)` and `VARCHAR(4)` columns, the
    values retrieved from the columns are not always the same because trailing spaces
    are removed from `CHAR` columns upon retrieval. The following example illustrates
    this difference:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定值存储到`CHAR(4)`和`VARCHAR(4)`列中，从列中检索的值并不总是相同，因为从`CHAR`列中检索时会删除尾随空格。以下示例说明了这种差异：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Values in `CHAR`, `VARCHAR`, and `TEXT` columns are sorted and compared according
    to the character set collation assigned to the column.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHAR`、`VARCHAR`和`TEXT`列中的值根据分配给列的字符集排序和比较。'
- en: MySQL collations have a pad attribute of `PAD SPACE`, other than Unicode collations
    based on UCA 9.0.0 and higher, which have a pad attribute of `NO PAD`. (see [Section 12.10.1,
    “Unicode Character Sets”](charset-unicode-sets.html "12.10.1 Unicode Character
    Sets")).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL排序具有`PAD SPACE`填充属性，除了基于UCA 9.0.0及更高版本的Unicode排序具有`NO PAD`填充属性。 (参见[第12.10.1节，“Unicode字符集”](charset-unicode-sets.html
    "12.10.1 Unicode字符集")).
- en: To determine the pad attribute for a collation, use the `INFORMATION_SCHEMA`
    [`COLLATIONS`](information-schema-collations-table.html "28.3.6 The INFORMATION_SCHEMA
    COLLATIONS Table") table, which has a `PAD_ATTRIBUTE` column.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定排序的填充属性，请使用`INFORMATION_SCHEMA` [`COLLATIONS`](information-schema-collations-table.html
    "28.3.6 The INFORMATION_SCHEMA COLLATIONS Table")表，该表具有一个`PAD_ATTRIBUTE`列。
- en: For nonbinary strings (`CHAR`, `VARCHAR`, and `TEXT` values), the string collation
    pad attribute determines treatment in comparisons of trailing spaces at the end
    of strings. `NO PAD` collations treat trailing spaces as significant in comparisons,
    like any other character. `PAD SPACE` collations treat trailing spaces as insignificant
    in comparisons; strings are compared without regard to trailing spaces. See [Trailing
    Space Handling in Comparisons](charset-binary-collations.html#charset-binary-collations-trailing-space-comparisons
    "Trailing Space Handling in Comparisons"). The server SQL mode has no effect on
    comparison behavior with respect to trailing spaces.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非二进制字符串（`CHAR`、`VARCHAR`和`TEXT`值），字符串排序填充属性决定了在字符串末尾的尾随空格比较中的处理方式。`NO PAD`排序将尾随空格视为比较中的重要部分，就像任何其他字符一样。`PAD
    SPACE`排序将尾随空格视为比较中不重要的部分；字符串将在不考虑尾随空格的情况下进行比较。参见[比较中的尾随空格处理](charset-binary-collations.html#charset-binary-collations-trailing-space-comparisons
    "比较中的尾随空格处理")。服务器SQL模式对于尾随空格的比较行为没有影响。
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about MySQL character sets and collations, see [Chapter 12,
    *Character Sets, Collations, Unicode*](charset.html "Chapter 12 Character Sets,
    Collations, Unicode"). For additional information about storage requirements,
    see [Section 13.7, “Data Type Storage Requirements”](storage-requirements.html
    "13.7 Data Type Storage Requirements").
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有关MySQL字符集和排序的更多信息，请参见[第12章，“字符集、排序、Unicode”](charset.html "第12章 字符集、排序、Unicode")。有关存储要求的其他信息，请参见[第13.7节，“数据类型存储要求”](storage-requirements.html
    "第13.7 数据类型存储要求")。
- en: For those cases where trailing pad characters are stripped or comparisons ignore
    them, if a column has an index that requires unique values, inserting into the
    column values that differ only in number of trailing pad characters results in
    a duplicate-key error. For example, if a table contains `'a'`, an attempt to store
    `'a '` causes a duplicate-key error.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些尾随填充字符被剥离或比较忽略它们的情况，如果一个列有一个需要唯一值的索引，插入到列中仅在尾随填充字符数量不同的值会导致重复键错误。例如，如果一个表包含`'a'`，尝试存储`'a '`会导致重复键错误。
