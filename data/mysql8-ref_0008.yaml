- en: 1.3 What Is New in MySQL 8.0
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3 MySQL 8.0中的新功能
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-nutshell.html)
- en: This section summarizes what has been added to, deprecated in, and removed from
    MySQL 8.0\. A companion section lists MySQL server options and variables that
    have been added, deprecated, or removed in MySQL 8.0; see [Section 1.4, “Server
    and Status Variables and Options Added, Deprecated, or Removed in MySQL 8.0”](added-deprecated-removed.html
    "1.4 Server and Status Variables and Options Added, Deprecated, or Removed in
    MySQL 8.0").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节总结了MySQL 8.0中新增、弃用和删除的内容。一个相关的部分列出了MySQL 8.0中新增、弃用或删除的MySQL服务器选项和变量；请参见[第1.4节，“MySQL
    8.0中新增、弃用或删除的服务器和状态变量和选项”](added-deprecated-removed.html "1.4 MySQL 8.0中新增、弃用或删除的服务器和状态变量和选项")。
- en: '[Features Added in MySQL 8.0](mysql-nutshell.html#mysql-nutshell-additions
    "Features Added in MySQL 8.0")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MySQL 8.0中新增的功能](mysql-nutshell.html#mysql-nutshell-additions "MySQL 8.0中新增的功能")'
- en: '[Features Deprecated in MySQL 8.0](mysql-nutshell.html#mysql-nutshell-deprecations
    "Features Deprecated in MySQL 8.0")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MySQL 8.0中弃用的功能](mysql-nutshell.html#mysql-nutshell-deprecations "MySQL 8.0中弃用的功能")'
- en: '[Features Removed in MySQL 8.0](mysql-nutshell.html#mysql-nutshell-removals
    "Features Removed in MySQL 8.0")'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MySQL 8.0中删除的功能](mysql-nutshell.html#mysql-nutshell-removals "MySQL 8.0中删除的功能")'
- en: Features Added in MySQL 8.0
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL 8.0中新增的功能
- en: 'The following features have been added to MySQL 8.0:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下功能已添加到MySQL 8.0中：
- en: '**Data dictionary. ** MySQL now incorporates a transactional data dictionary
    that stores information about database objects. In previous MySQL releases, dictionary
    data was stored in metadata files and nontransactional tables. For more information,
    see [Chapter 16, *MySQL Data Dictionary*](data-dictionary.html "Chapter 16 MySQL
    Data Dictionary").'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据字典。** MySQL现在包含一个事务性数据字典，用于存储有关数据库对象的信息。在以前的MySQL版本中，字典数据存储在元数据文件和非事务性表中。更多信息，请参见[第16章，“MySQL数据字典”](data-dictionary.html
    "第16章 MySQL数据字典")。'
- en: '**Atomic data definition statements (Atomic DDL). ** An atomic DDL statement
    combines the data dictionary updates, storage engine operations, and binary log
    writes associated with a DDL operation into a single, atomic transaction. For
    more information, see [Section 15.1.1, “Atomic Data Definition Statement Support”](atomic-ddl.html
    "15.1.1 Atomic Data Definition Statement Support").'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原子数据定义语句（原子DDL）。** 原子DDL语句将与DDL操作相关的数据字典更新、存储引擎操作和二进制日志写入合并为单个原子事务。更多信息，请参见[第15.1.1节，“原子数据定义语句支持”](atomic-ddl.html
    "15.1.1 原子数据定义语句支持")。'
- en: '**Upgrade procedure. ** Previously, after installation of a new version of
    MySQL, the MySQL server automatically upgrades the data dictionary tables at the
    next startup, after which the DBA is expected to invoke [**mysql_upgrade**](mysql-upgrade.html
    "6.4.5 mysql_upgrade — Check and Upgrade MySQL Tables") manually to upgrade the
    system tables in the `mysql` schema, as well as objects in other schemas such
    as the `sys` schema and user schemas.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**升级过程。** 以前，在安装新版本的MySQL后，MySQL服务器会在下次启动时自动升级数据字典表，之后DBA需要手动调用[**mysql_upgrade**](mysql-upgrade.html
    "6.4.5 mysql_upgrade — 检查和升级MySQL表")来升级`mysql`模式中的系统表，以及其他模式中的对象，如`sys`模式和用户模式。'
- en: As of MySQL 8.0.16, the server performs the tasks previously handled by [**mysql_upgrade**](mysql-upgrade.html
    "6.4.5 mysql_upgrade — Check and Upgrade MySQL Tables"). After installation of
    a new MySQL version, the server now automatically performs all necessary upgrade
    tasks at the next startup and is not dependent on the DBA invoking [**mysql_upgrade**](mysql-upgrade.html
    "6.4.5 mysql_upgrade — Check and Upgrade MySQL Tables"). In addition, the server
    updates the contents of the help tables (something [**mysql_upgrade**](mysql-upgrade.html
    "6.4.5 mysql_upgrade — Check and Upgrade MySQL Tables") did not do). A new [`--upgrade`](server-options.html#option_mysqld_upgrade)
    server option provides control over how the server performs automatic data dictionary
    and server upgrade operations. For more information, see [Section 3.4, “What the
    MySQL Upgrade Process Upgrades”](upgrading-what-is-upgraded.html "3.4 What the
    MySQL Upgrade Process Upgrades").
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.16 开始，服务器执行了之前由 [**mysql_upgrade**](mysql-upgrade.html "6.4.5 mysql_upgrade
    — Check and Upgrade MySQL Tables") 处理的任务。安装新的 MySQL 版本后，服务器现在会在下次启动时自动执行所有必要的升级任务，不再依赖于
    DBA 调用 [**mysql_upgrade**](mysql-upgrade.html "6.4.5 mysql_upgrade — Check and
    Upgrade MySQL Tables")。此外，服务器会更新帮助表的内容（之前 [**mysql_upgrade**](mysql-upgrade.html
    "6.4.5 mysql_upgrade — Check and Upgrade MySQL Tables") 没有做）。新的 [`--upgrade`](server-options.html#option_mysqld_upgrade)
    服务器选项可控制服务器如何执行自动数据字典和服务器升级操作。有关更多信息，请参见 [Section 3.4, “What the MySQL Upgrade
    Process Upgrades”](upgrading-what-is-upgraded.html "3.4 What the MySQL Upgrade
    Process Upgrades")。
- en: '**Session Reuse. ** MySQL Server now supports SSL session reuse by default
    with a timeout setting to control how long the server maintains a session cache
    that establishes the period during which a client is permitted to request session
    reuse for new connections. All MySQL client programs support session reuse. For
    server-side and client-side configuration information, see [Section 8.3.5, “Reusing
    SSL Sessions”](reusing-ssl-sessions.html "8.3.5 Reusing SSL Sessions").'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话重用。** MySQL Server 现在默认支持 SSL 会话重用，并设置超时时间以控制服务器维护会话缓存的时间段，该时间段内客户端被允许请求新连接的会话重用。所有
    MySQL 客户端程序都支持会话重用。有关服务器端和客户端配置信息，请参见 [Section 8.3.5, “Reusing SSL Sessions”](reusing-ssl-sessions.html
    "8.3.5 Reusing SSL Sessions")。'
- en: In addition, C applications now can use the C API capabilities to enable session
    reuse for encrypted connections (see [SSL Session Reuse](/doc/c-api/8.0/en/c-api-ssl-session-reuse.html)).
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，C 应用程序现在可以使用 C API 功能来启用加密连接的会话重用（参见 [SSL Session Reuse](/doc/c-api/8.0/en/c-api-ssl-session-reuse.html)）。
- en: '**Security and account management. ** These enhancements were added to improve
    security and enable greater DBA flexibility in account management:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性和账户管理。** 这些增强功能旨在提高安全性并增强 DBA 在账户管理方面的灵活性：'
- en: MySQL Enterprise Audit now supports using the [scheduler](scheduler-component.html
    "7.5.5 Scheduler Component") component to configure and execute a recurring task
    to flush the in-memory cache. For setup instructions, see [Enabling the Audit
    Log Flush Task](audit-log-logging-configuration.html#audit-log-flush-task "Enabling
    the Audit Log Flush Task").
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL Enterprise Audit 现在支持使用 [scheduler](scheduler-component.html "7.5.5 Scheduler
    Component") 组件来配置和执行定期任务以刷新内存缓存。有关设置说明，请参见 [Enabling the Audit Log Flush Task](audit-log-logging-configuration.html#audit-log-flush-task
    "Enabling the Audit Log Flush Task")。
- en: A new password-validation system variable permits the configuration and enforcement
    of a minimum number of characters that users must change when attempting to replace
    their own MySQL account passwords. This new verification setting is a percentage
    of the total characters in the current password. For example, if [`validate_password.changed_characters_percentage`](validate-password-options-variables.html#sysvar_validate_password.changed_characters_percentage)
    has a value of 50, at least half of the characters in the replacement account
    password must not be present in the current password, or the password is rejected.
    For more information, see [Section 8.4.3, “The Password Validation Component”](validate-password.html
    "8.4.3 The Password Validation Component").
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的密码验证系统变量允许配置和强制用户在尝试更换自己的 MySQL 账户密码时必须更改的最小字符数。此新验证设置是当前密码中字符总数的百分比。例如，如果
    [`validate_password.changed_characters_percentage`](validate-password-options-variables.html#sysvar_validate_password.changed_characters_percentage)
    的值为 50，则替换账户密码中至少一半的字符不能出现在当前密码中，否则密码将被拒绝。有关更多信息，请参见 [Section 8.4.3, “The Password
    Validation Component”](validate-password.html "8.4.3 The Password Validation Component")。
- en: MySQL Enterprise Edition now provides data masking and de-identification capabilities
    based on components, rather than being based on a plugin library that was introduced
    in MySQL 8.0.13\. MySQL Enterprise Data Masking and De-Identification components
    support for multibyte characters, masking dictionaries stored in a database table,
    and several new functions. For more information, see [Section 8.5.1, “Data-Masking
    Components Versus the Data-Masking Plugin”](data-masking-components-vs-plugin.html
    "8.5.1 Data-Masking Components Versus the Data-Masking Plugin").
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL Enterprise Edition 现在提供基于组件的数据脱敏和去标识化功能，而不是基于 MySQL 8.0.13 中引入的插件库。MySQL
    Enterprise Data Masking 和 De-Identification 组件支持多字节字符，将脱敏字典存储在数据库表中，并提供几个新功能。更多信息，请参见
    [第 8.5.1 节，“数据脱敏组件与数据脱敏插件”](data-masking-components-vs-plugin.html "8.5.1 数据脱敏组件与数据脱敏插件")。
- en: Prior to MySQL 8.0.33, the `mysql` system database was used for MySQL Enterprise
    Audit's persistent storage of filter and user account data. For enhanced flexibility,
    the new [`audit_log_database`](audit-log-reference.html#sysvar_audit_log_database)
    server system variable now permits specifying other databases in the global schema
    namespace at server startup. The `mysql` system database is the default setting
    for table storage.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.33 之前，`mysql` 系统数据库用于 MySQL Enterprise Audit 的持久存储过滤器和用户帐户数据。为了增强灵活性，新的
    [`audit_log_database`](audit-log-reference.html#sysvar_audit_log_database) 服务器系统变量现在允许在服务器启动时指定全局模式命名空间中的其他数据库。`mysql`
    系统数据库是表存储的默认设置。
- en: The grant tables in the `mysql` system database are now `InnoDB` (transactional)
    tables. Previously, these were `MyISAM` (nontransactional) tables. The change
    of grant table storage engine underlies an accompanying change to the behavior
    of account-management statements. Previously, an account-management statement
    (such as [`CREATE USER`](create-user.html "15.7.1.3 CREATE USER Statement") or
    [`DROP USER`](drop-user.html "15.7.1.5 DROP USER Statement")) that named multiple
    users could succeed for some users and fail for others. Now, each statement is
    transactional and either succeeds for all named users or rolls back and has no
    effect if any error occurs. The statement is written to the binary log if it succeeds,
    but not if it fails; in that case, rollback occurs and no changes are made. For
    more information, see [Section 15.1.1, “Atomic Data Definition Statement Support”](atomic-ddl.html
    "15.1.1 Atomic Data Definition Statement Support").
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql` 系统数据库中的授权表现在是 `InnoDB`（事务性）表。以前，这些是 `MyISAM`（非事务性）表。授权表存储引擎的更改导致了帐户管理语句行为的相应更改。以前，命名多个用户的帐户管理语句（如
    [`CREATE USER`](create-user.html "15.7.1.3 CREATE USER 语句") 或 [`DROP USER`](drop-user.html
    "15.7.1.5 DROP USER 语句")）可能对某些用户成功，对其他用户失败。现在，每个语句都是事务性的，要么对所有命名用户成功，要么回滚并且如果发生任何错误则不起作用。如果成功，该语句将写入二进制日志，但如果失败则不会；在这种情况下，回滚发生且不会进行任何更改。更多信息，请参见
    [第 15.1.1 节，“原子数据定义语句支持”](atomic-ddl.html "15.1.1 原子数据定义语句支持")。'
- en: A new `caching_sha2_password` authentication plugin is available. Like the `sha256_password`
    plugin, `caching_sha2_password` implements SHA-256 password hashing, but uses
    caching to address latency issues at connect time. It also supports more transport
    protocols and does not require linking against OpenSSL for RSA key pair-based
    password-exchange capabilities. See [Section 8.4.1.2, “Caching SHA-2 Pluggable
    Authentication”](caching-sha2-pluggable-authentication.html "8.4.1.2 Caching SHA-2
    Pluggable Authentication").
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的 `caching_sha2_password` 认证插件现已可用。与 `sha256_password` 插件类似，`caching_sha2_password`
    实现了 SHA-256 密码哈希，但使用缓存来解决连接时的延迟问题。它还支持更多传输协议，并且不需要针对 RSA 密钥对密码交换功能链接到 OpenSSL。请参见
    [第 8.4.1.2 节，“缓存 SHA-2 可插拔认证”](caching-sha2-pluggable-authentication.html "8.4.1.2 缓存
    SHA-2 可插拔认证")。
- en: The `caching_sha2_password` and `sha256_password` authentication plugins provide
    more secure password encryption than the `mysql_native_password` plugin (deprecated
    in 8.0.34), and `caching_sha2_password` provides better performance than `sha256_password`.
    Due to these superior security and performance characteristics of `caching_sha2_password`,
    it is now the preferred authentication plugin, and is also the default authentication
    plugin rather than `mysql_native_password`. For information about the implications
    of this change of default plugin for server operation and compatibility of the
    server with clients and connectors, see [caching_sha2_password as the Preferred
    Authentication Plugin](upgrading-from-previous-series.html#upgrade-caching-sha2-password
    "caching_sha2_password as the Preferred Authentication Plugin").
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`caching_sha2_password`和`sha256_password`认证插件提供比`mysql_native_password`插件更安全的密码加密，而`caching_sha2_password`比`sha256_password`提供更好的性能。由于`caching_sha2_password`具有更优越的安全性和性能特性，它现在是首选的认证插件，并且默认认证插件不再是`mysql_native_password`。有关此默认插件更改对服务器操作和服务器与客户端和连接器兼容性的影响的信息，请参见[将caching_sha2_password作为首选认证插件](upgrading-from-previous-series.html#upgrade-caching-sha2-password
    "将caching_sha2_password作为首选认证插件")。'
- en: The MySQL Enterprise Edition SASL LDAP authentication plugin now supports GSSAPI/Kerberos
    as an authentication method for MySQL clients and servers on Linux. This is useful
    in Linux environments where applications access LDAP using Microsoft Active Directory,
    which has Kerberos enabled by default. See [LDAP Authentication Methods](ldap-pluggable-authentication.html#ldap-pluggable-authentication-auth-methods
    "LDAP Authentication Methods").
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL企业版SASL LDAP认证插件现在支持GSSAPI/Kerberos作为Linux上MySQL客户端和服务器的认证方法。这在Linux环境中非常有用，其中应用程序使用具有默认启用Kerberos的Microsoft
    Active Directory访问LDAP。请参见[LDAP认证方法](ldap-pluggable-authentication.html#ldap-pluggable-authentication-auth-methods
    "LDAP认证方法")。
- en: MySQL Enterprise Edition now supports an authentication method that enables
    users to authenticate to MySQL Server using Kerberos, provided that appropriate
    Kerberos tickets are available or can be obtained. For details, see [Section 8.4.1.8,
    “Kerberos Pluggable Authentication”](kerberos-pluggable-authentication.html "8.4.1.8 Kerberos
    Pluggable Authentication").
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL企业版现在支持一种认证方法，允许用户使用Kerberos对MySQL服务器进行身份验证，前提是适当的Kerberos票证可用或可以获取。有关详细信息，请参见[Section 8.4.1.8,
    “Kerberos可插拔认证”](kerberos-pluggable-authentication.html "8.4.1.8 Kerberos可插拔认证")。
- en: MySQL now supports roles, which are named collections of privileges. Roles can
    be created and dropped. Roles can have privileges granted to and revoked from
    them. Roles can be granted to and revoked from user accounts. The active applicable
    roles for an account can be selected from among those granted to the account,
    and can be changed during sessions for that account. For more information, see
    [Section 8.2.10, “Using Roles”](roles.html "8.2.10 Using Roles").
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL现在支持角色，即命名的权限集合。角色可以创建和删除。可以向角色授予和撤销权限。可以向用户账户授予和撤销角色。账户的活动适用角色可以从授予该账户的角色中选择，并且可以在该账户的会话期间更改。有关更多信息，请参见[Section 8.2.10,
    “使用角色”](roles.html "8.2.10 使用角色")。
- en: MySQL now incorporates the concept of user account categories, with system and
    regular users distinguished according to whether they have the [`SYSTEM_USER`](privileges-provided.html#priv_system-user)
    privilege. See [Section 8.2.11, “Account Categories”](account-categories.html
    "8.2.11 Account Categories").
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL现在引入了用户账户类别的概念，根据是否具有[`SYSTEM_USER`](privileges-provided.html#priv_system-user)权限来区分系统用户和普通用户。参见[Section 8.2.11,
    “账户类别”](account-categories.html "8.2.11 账户类别")。
- en: Previously, it was not possible to grant privileges that apply globally except
    for certain schemas. This is now possible if the [`partial_revokes`](server-system-variables.html#sysvar_partial_revokes)
    system variable is enabled. See [Section 8.2.12, “Privilege Restriction Using
    Partial Revokes”](partial-revokes.html "8.2.12 Privilege Restriction Using Partial
    Revokes").
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，不可能授予全局适用的权限，除了某些模式。如果启用了[`partial_revokes`](server-system-variables.html#sysvar_partial_revokes)系统变量，则现在可以实现。请参见[Section 8.2.12,
    “使用部分撤销进行权限限制”](partial-revokes.html "8.2.12 使用部分撤销进行权限限制")。
- en: The [`GRANT`](grant.html "15.7.1.6 GRANT Statement") statement has an `AS *`user`*
    [WITH ROLE]` clause that specifies additional information about the privilege
    context to use for statement execution. This syntax is visible at the SQL level,
    although its primary purpose is to enable uniform replication across all nodes
    of grantor privilege restrictions imposed by partial revokes, by causing those
    restrictions to appear in the binary log. See [Section 15.7.1.6, “GRANT Statement”](grant.html
    "15.7.1.6 GRANT Statement").
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`GRANT`](grant.html "15.7.1.6 GRANT语句")语句有一个`AS *`user`* [WITH ROLE]`子句，用于指定关于用于语句执行的权限上下文的附加信息。尽管这种语法在SQL级别可见，但其主要目的是通过在二进制日志中显示这些由部分撤销施加的授权限制，以实现对所有授予权限的节点的统一复制。参见[第15.7.1.6节，“GRANT语句”](grant.html
    "15.7.1.6 GRANT语句")。'
- en: MySQL now maintains information about password history, enabling restrictions
    on reuse of previous passwords. DBAs can require that new passwords not be selected
    from previous passwords for some number of password changes or period of time.
    It is possible to establish password-reuse policy globally as well as on a per-account
    basis.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL现在维护有关密码历史的信息，从而可以限制重复使用先前密码。数据库管理员可以要求新密码在一定数量的密码更改或一段时间内不从先前密码中选择。可以在全局范围以及按账户基础上建立密码重用策略。
- en: It is now possible to require that attempts to change account passwords be verified
    by specifying the current password to be replaced. This enables DBAs to prevent
    users from changing password without proving that they know the current password.
    It is possible to establish password-verification policy globally as well as on
    a per-account basis.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以要求更改账户密码的尝试通过指定要替换的当前密码进行验证。这使得数据库管理员可以防止用户在未证明知道当前密码的情况下更改密码。可以在全局范围以及按账户基础上建立密码验证策略。
- en: Accounts are now permitted to have dual passwords, which enables phased password
    changes to be performed seamlessly in complex multiple-server systems, without
    downtime.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在允许账户拥有双密码，这使得在复杂的多服务器系统中无缝执行分阶段密码更改成为可能，而无需停机。
- en: MySQL now enables administrators to configure user accounts such that too many
    consecutive login failures due to incorrect passwords cause temporary account
    locking. The required number of failures and the lock time are configurable per
    account.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL现在允许管理员配置用户账户，以便由于密码错误导致的连续登录失败次数过多时，会导致临时锁定账户。每个账户的所需失败次数和锁定时间都是可配置的。
- en: These new capabilities provide DBAs more complete control over password management.
    For more information, see [Section 8.2.15, “Password Management”](password-management.html
    "8.2.15 Password Management").
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些新功能为数据库管理员提供了更完整的密码管理控制。更多信息，请参见[第8.2.15节，“密码管理”](password-management.html
    "8.2.15 密码管理")。
- en: MySQL now supports FIPS mode, if compiled using OpenSSL, and an OpenSSL library
    and FIPS Object Module are available at runtime. FIPS mode imposes conditions
    on cryptographic operations such as restrictions on acceptable encryption algorithms
    or requirements for longer key lengths. See [Section 8.8, “FIPS Support”](fips-mode.html
    "8.8 FIPS Support").
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL现在支持FIPS模式，如果使用OpenSSL编译，并且在运行时可用的OpenSSL库和FIPS对象模块。FIPS模式对加密操作施加条件，例如对可接受的加密算法的限制或对更长密钥长度的要求。参见[第8.8节，“FIPS支持”](fips-mode.html
    "8.8 FIPS支持")。
- en: The TLS context the server uses for new connections now is reconfigurable at
    runtime. This capability may be useful, for example, to avoid restarting a MySQL
    server that has been running so long that its SSL certificate has expired. See
    [Server-Side Runtime Configuration and Monitoring for Encrypted Connections](using-encrypted-connections.html#using-encrypted-connections-server-side-runtime-configuration
    "Server-Side Runtime Configuration and Monitoring for Encrypted Connections").
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器现在可以在运行时重新配置用于新连接的TLS上下文。例如，这种能力可能很有用，可以避免重新启动运行时间过长以至于SSL证书已过期的MySQL服务器。参见[服务器端运行时配置和加密连接监控](using-encrypted-connections.html#using-encrypted-connections-server-side-runtime-configuration
    "服务器端运行时配置和加密连接监控")。
- en: OpenSSL 1.1.1 supports the TLS v1.3 protocol for encrypted connections, and
    MySQL 8.0.16 and higher supports TLS v1.3 as well, if both the server and client
    are compiled using OpenSSL 1.1.1 or higher. See [Section 8.3.2, “Encrypted Connection
    TLS Protocols and Ciphers”](encrypted-connection-protocols-ciphers.html "8.3.2 Encrypted
    Connection TLS Protocols and Ciphers").
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSL 1.1.1 支持用于加密连接的 TLS v1.3 协议，MySQL 8.0.16 及更高版本也支持 TLS v1.3，如果服务器和客户端都使用
    OpenSSL 1.1.1 或更高版本进行编译。请参见[第 8.3.2 节，“加密连接 TLS 协议和密码”](encrypted-connection-protocols-ciphers.html
    "8.3.2 Encrypted Connection TLS Protocols and Ciphers")。
- en: MySQL now sets the access control granted to clients on the named pipe to the
    minimum necessary for successful communication on Windows. Newer MySQL client
    software can open named pipe connections without any additional configuration.
    If older client software cannot be upgraded immediately, the new [`named_pipe_full_access_group`](server-system-variables.html#sysvar_named_pipe_full_access_group)
    system variable can be used to give a Windows group the necessary permissions
    to open a named pipe connection. Membership in the full-access group should be
    restricted and temporary.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 现在将授予客户端在 Windows 上使用命名管道进行成功通信所需的最低访问控制权限。新版 MySQL 客户端软件可以在不需要任何额外配置的情况下打开命名管道连接。如果旧版客户端软件无法立即升级，可以使用新的[`named_pipe_full_access_group`](server-system-variables.html#sysvar_named_pipe_full_access_group)系统变量来授予
    Windows 组打开命名管道连接所需的权限。完全访问组的成员资格应受限制且临时。
- en: 'Previously, MySQL user accounts authenticated to the server using a single
    authentication method. As of MySQL 8.0.27, MySQL supports multifactor authentication
    (MFA), which makes it possible to create accounts that have up to three authentication
    methods. MFA support entails these changes:'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，MySQL 用户帐户使用单一认证方法对服务器进行身份验证。从 MySQL 8.0.27 开始，MySQL 支持多因素认证（MFA），这使得可以创建具有最多三种认证方法的帐户成为可能。MFA
    支持包括以下更改：
- en: '[`CREATE USER`](create-user.html "15.7.1.3 CREATE USER Statement") and [`ALTER
    USER`](alter-user.html "15.7.1.1 ALTER USER Statement") syntax has been extended
    to permit specification of multiple authentication methods.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CREATE USER`](create-user.html "15.7.1.3 CREATE USER Statement")和[`ALTER
    USER`](alter-user.html "15.7.1.1 ALTER USER Statement")语法已扩展，允许指定多个认证方法。'
- en: The [`authentication_policy`](server-system-variables.html#sysvar_authentication_policy)
    system variable enables MFA policy to be established by controlling how many factors
    can be used and the types of authentication permitted for each factor. This places
    constraints on how the authentication-related clauses of [`CREATE USER`](create-user.html
    "15.7.1.3 CREATE USER Statement") and [`ALTER USER`](alter-user.html "15.7.1.1 ALTER
    USER Statement") statements may be used.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`authentication_policy`](server-system-variables.html#sysvar_authentication_policy)
    系统变量通过控制可以使用多少因素以及每个因素允许的认证类型，来建立 MFA 策略。这会对[`CREATE USER`](create-user.html "15.7.1.3 CREATE
    USER Statement")和[`ALTER USER`](alter-user.html "15.7.1.1 ALTER USER Statement")语句中与认证相关的子句的使用方式施加限制。'
- en: Client programs have new [`--password1`](connection-options.html#option_general_password1),
    [`--password2`](connection-options.html#option_general_password2), and [`--password3`](connection-options.html#option_general_password3)
    command-line options for specifying multiple passwords. For applications that
    use the C API, the new `MYSQL_OPT_USER_PASSWORD` option for the [`mysql_options4()`](/doc/c-api/8.0/en/mysql-options4.html)
    C API function enables the same capability.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端程序现在具有新的[`--password1`](connection-options.html#option_general_password1)、[`--password2`](connection-options.html#option_general_password2)和[`--password3`](connection-options.html#option_general_password3)命令行选项，用于指定多个密码。对于使用
    C API 的应用程序，[`mysql_options4()`](/doc/c-api/8.0/en/mysql-options4.html) C API
    函数的新选项 `MYSQL_OPT_USER_PASSWORD` 可以实现相同的功能。
- en: In addition, MySQL Enterprise Edition now supports authentication to MySQL Server
    using devices such as smart cards, security keys, and biometric readers. This
    authentication method is based on the Fast Identity Online (FIDO) standard, and
    uses a pair of plugins, `authentication_fido` on the server side and `authentication_fido_client`
    on the client side. The server-side FIDO authentication plugin is included only
    in MySQL Enterprise Edition distributions. It is not included in MySQL community
    distributions. However, the client-side plugin is included in all distributions,
    including community distributions. This enables clients from any distribution
    to connect to a server that has the server-side plugin loaded.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，MySQL企业版现在支持使用智能卡、安全密钥和生物识别读卡器等设备对MySQL服务器进行身份验证。这种身份验证方法基于快速身份在线（FIDO）标准，并使用一对插件，服务器端的`authentication_fido`和客户端的`authentication_fido_client`。服务器端的FIDO身份验证插件仅包含在MySQL企业版发行版中。它不包含在MySQL社区发行版中。然而，客户端插件包含在所有发行版中，包括社区发行版。这使得来自任何发行版的客户端都可以连接到加载了服务器端插件的服务器。
- en: Multifactor authentication can use existing MySQL authentication methods, the
    new FIDO authentication method, or a combination of both. For more information,
    see [Section 8.2.18, “Multifactor Authentication”](multifactor-authentication.html
    "8.2.18 Multifactor Authentication"), and [Section 8.4.1.11, “FIDO Pluggable Authentication”](fido-pluggable-authentication.html
    "8.4.1.11 FIDO Pluggable Authentication").
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多因素身份验证可以使用现有的MySQL身份验证方法、新的FIDO身份验证方法或两者的组合。有关更多信息，请参见[第8.2.18节，“多因素身份验证”](multifactor-authentication.html
    "8.2.18 多因素身份验证")，以及[第8.4.1.11节，“FIDO可插拔身份验证”](fido-pluggable-authentication.html
    "8.4.1.11 FIDO可插拔身份验证")。
- en: '**Resource management. ** MySQL now supports creation and management of resource
    groups, and permits assigning threads running within the server to particular
    groups so that threads execute according to the resources available to the group.
    Group attributes enable control over its resources, to enable or restrict resource
    consumption by threads in the group. DBAs can modify these attributes as appropriate
    for different workloads. Currently, CPU time is a manageable resource, represented
    by the concept of “virtual CPU” as a term that includes CPU cores, hyperthreads,
    hardware threads, and so forth. The server determines at startup how many virtual
    CPUs are available, and database administrators with appropriate privileges can
    associate these CPUs with resource groups and assign threads to groups. For more
    information, see [Section 7.1.16, “Resource Groups”](resource-groups.html "7.1.16 Resource
    Groups").'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源管理。** MySQL现在支持创建和管理资源组，并允许将在服务器内运行的线程分配给特定组，以便线程根据组可用的资源执行。组属性可以控制其资源，以启用或限制组内线程的资源消耗。数据库管理员可以根据不同的工作负载适当修改这些属性。目前，CPU时间是一种可管理的资源，表示为“虚拟CPU”的概念，包括CPU核心、超线程、硬件线程等。服务器在启动时确定有多少虚拟CPU可用，具有适当权限的数据库管理员可以将这些CPU与资源组关联并将线程分配给组。有关更多信息，请参见[第7.1.16节，“资源组”](resource-groups.html
    "7.1.16 资源组")。'
- en: '**Table encryption management. ** Table encryption can now be managed globally
    by defining and enforcing encryption defaults. The [`default_table_encryption`](server-system-variables.html#sysvar_default_table_encryption)
    variable defines an encryption default for newly created schemas and general tablespace.
    The encryption default for a schema can also be defined using the `DEFAULT ENCRYPTION`
    clause when creating a schema. By default, a table inherits the encryption of
    the schema or general tablespace it is created in. Encryption defaults are enforced
    by enabling the [`table_encryption_privilege_check`](server-system-variables.html#sysvar_table_encryption_privilege_check)
    variable. The privilege check occurs when creating or altering a schema or general
    tablespace with an encryption setting that differs from the [`default_table_encryption`](server-system-variables.html#sysvar_default_table_encryption)
    setting, or when creating or altering a table with an encryption setting that
    differs from the default schema encryption. The [`TABLE_ENCRYPTION_ADMIN`](privileges-provided.html#priv_table-encryption-admin)
    privilege permits overriding default encryption settings when [`table_encryption_privilege_check`](server-system-variables.html#sysvar_table_encryption_privilege_check)
    is enabled. For more information, see [Defining an Encryption Default for Schemas
    and General Tablespaces](innodb-data-encryption.html#innodb-schema-tablespace-encryption-default
    "Defining an Encryption Default for Schemas and General Tablespaces").'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表加密管理。** 现在可以通过定义和强制执行加密默认值来全局管理表加密。[`default_table_encryption`](server-system-variables.html#sysvar_default_table_encryption)变量为新创建的模式和通用表空间定义了一个加密默认值。创建模式时也可以使用`DEFAULT
    ENCRYPTION`子句定义模式的加密默认值。默认情况下，表继承所在模式或通用表空间的加密。通过启用[`table_encryption_privilege_check`](server-system-variables.html#sysvar_table_encryption_privilege_check)变量来强制执行加密默认值。当创建或更改具有与[`default_table_encryption`](server-system-variables.html#sysvar_default_table_encryption)设置不同的加密设置的模式或通用表空间，或者创建或更改具有与默认模式加密不同的加密设置的表时，将进行权限检查。当启用[`table_encryption_privilege_check`](server-system-variables.html#sysvar_table_encryption_privilege_check)时，[`TABLE_ENCRYPTION_ADMIN`](privileges-provided.html#priv_table-encryption-admin)权限允许覆盖默认加密设置。有关更多信息，请参阅[为模式和通用表空间定义加密默认值](innodb-data-encryption.html#innodb-schema-tablespace-encryption-default
    "为模式和通用表空间定义加密默认值")。'
- en: '**InnoDB enhancements. ** These `InnoDB` enhancements were added:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**InnoDB增强。** 添加了以下`InnoDB`增强功能：'
- en: 'The current maximum auto-increment counter value is written to the redo log
    each time the value changes, and saved to an engine-private system table on each
    checkpoint. These changes make the current maximum auto-increment counter value
    persistent across server restarts. Additionally:'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次值更改时，当前最大自动增量计数器值都会写入重做日志，并在每次检查点时保存到引擎私有系统表中。这些更改使得当前最大自动增量计数器值在服务器重新启动时持久化。此外：
- en: A server restart no longer cancels the effect of the `AUTO_INCREMENT = N` table
    option. If you initialize the auto-increment counter to a specific value, or if
    you alter the auto-increment counter value to a larger value, the new value is
    persisted across server restarts.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器重新启动不再取消`AUTO_INCREMENT = N`表选项的效果。如果您将自动增量计数器初始化为特定值，或者将自动增量计数器值更改为更大的值，则新值将在服务器重新启动时持久化。
- en: A server restart immediately following a [`ROLLBACK`](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements") operation no longer results in
    the reuse of auto-increment values that were allocated to the rolled-back transaction.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`ROLLBACK`](commit.html "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements")操作后立即重新启动服务器不再导致自动增量值被回滚事务分配的重复使用。
- en: If you modify an `AUTO_INCREMENT` column value to a value larger than the current
    maximum auto-increment value (in an [`UPDATE`](update.html "15.2.17 UPDATE Statement")
    operation, for example), the new value is persisted, and subsequent [`INSERT`](insert.html
    "15.2.7 INSERT Statement") operations allocate auto-increment values starting
    from the new, larger value.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您将`AUTO_INCREMENT`列值修改为大于当前最大自动增量值（例如，在[`UPDATE`](update.html "15.2.17 UPDATE
    Statement")操作中），新值将被持久化，并且随后的[`INSERT`](insert.html "15.2.7 INSERT Statement")操作将从新的更大值开始分配自动增量值。
- en: For more information, see [Section 17.6.1.6, “AUTO_INCREMENT Handling in InnoDB”](innodb-auto-increment-handling.html
    "17.6.1.6 AUTO_INCREMENT Handling in InnoDB"), and [InnoDB AUTO_INCREMENT Counter
    Initialization](innodb-auto-increment-handling.html#innodb-auto-increment-initialization
    "InnoDB AUTO_INCREMENT Counter Initialization").
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅 [第 17.6.1.6 节，“InnoDB 中的 AUTO_INCREMENT 处理”](innodb-auto-increment-handling.html
    "17.6.1.6 AUTO_INCREMENT Handling in InnoDB") 和 [InnoDB AUTO_INCREMENT 计数器初始化](innodb-auto-increment-handling.html#innodb-auto-increment-initialization
    "InnoDB AUTO_INCREMENT Counter Initialization")。
- en: When encountering index tree corruption, `InnoDB` writes a corruption flag to
    the redo log, which makes the corruption flag crash safe. `InnoDB` also writes
    in-memory corruption flag data to an engine-private system table on each checkpoint.
    During recovery, `InnoDB` reads corruption flags from both locations and merges
    results before marking in-memory table and index objects as corrupt.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当遇到索引树损坏时，`InnoDB` 会向重做日志写入损坏标志，使损坏标志具有崩溃安全性。`InnoDB` 还会将内存中的损坏标志数据写入每个检查点上的引擎私有系统表。在恢复过程中，`InnoDB`
    从两个位置读取损坏标志并在标记内存表和索引对象为损坏之前合并结果。
- en: The `InnoDB` **memcached** plugin supports multiple `get` operations (fetching
    multiple key-value pairs in a single **memcached** query) and range queries. See
    [Section 17.20.4, “InnoDB memcached Multiple get and Range Query Support”](innodb-memcached-multiple-get-range-query.html
    "17.20.4 InnoDB memcached Multiple get and Range Query Support").
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` **memcached** 插件支持多个 `get` 操作（在单个 **memcached** 查询中获取多个键值对）和范围查询。请参阅
    [第 17.20.4 节，“InnoDB memcached 多个 get 和范围查询支持”](innodb-memcached-multiple-get-range-query.html
    "17.20.4 InnoDB memcached Multiple get and Range Query Support")。'
- en: A new dynamic variable, [`innodb_deadlock_detect`](innodb-parameters.html#sysvar_innodb_deadlock_detect),
    may be used to disable deadlock detection. On high concurrency systems, deadlock
    detection can cause a slowdown when numerous threads wait for the same lock. At
    times, it may be more efficient to disable deadlock detection and rely on the
    [`innodb_lock_wait_timeout`](innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
    setting for transaction rollback when a deadlock occurs.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的动态变量，[`innodb_deadlock_detect`](innodb-parameters.html#sysvar_innodb_deadlock_detect)，可用于禁用死锁检测。在高并发系统中，死锁检测可能会导致大量线程等待同一锁时减速。有时，禁用死锁检测并依赖于
    [`innodb_lock_wait_timeout`](innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
    设置在发生死锁时进行事务回滚可能更有效率。
- en: The new Information Schema [`INNODB_CACHED_INDEXES`](information-schema-innodb-cached-indexes-table.html
    "28.4.5 The INFORMATION_SCHEMA INNODB_CACHED_INDEXES Table") table reports the
    number of index pages cached in the `InnoDB` buffer pool for each index.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的信息模式 [`INNODB_CACHED_INDEXES`](information-schema-innodb-cached-indexes-table.html
    "28.4.5 The INFORMATION_SCHEMA INNODB_CACHED_INDEXES Table") 表报告了每个索引在 `InnoDB`
    缓冲池中缓存的索引页数。
- en: '`InnoDB` temporary tables are now created in the shared temporary tablespace,
    `ibtmp1`.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` 临时表现在在共享临时表空间 `ibtmp1` 中创建。'
- en: The `InnoDB` [tablespace encryption feature](innodb-data-encryption.html "17.13 InnoDB
    Data-at-Rest Encryption") supports encryption of redo log and undo log data. See
    [Redo Log Encryption](innodb-data-encryption.html#innodb-data-encryption-redo-log
    "Redo Log Encryption"), and [Undo Log Encryption](innodb-data-encryption.html#innodb-data-encryption-undo-log
    "Undo Log Encryption").
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` [表空间加密功能](innodb-data-encryption.html "17.13 InnoDB Data-at-Rest Encryption")
    支持重做日志和撤销日志数据的加密。请参阅 [重做日志加密](innodb-data-encryption.html#innodb-data-encryption-redo-log
    "Redo Log Encryption") 和 [撤销日志加密](innodb-data-encryption.html#innodb-data-encryption-undo-log
    "Undo Log Encryption")。'
- en: '`InnoDB` supports `NOWAIT` and `SKIP LOCKED` options with `SELECT ... FOR SHARE`
    and `SELECT ... FOR UPDATE` locking read statements. `NOWAIT` causes the statement
    to return immediately if a requested row is locked by another transaction. `SKIP
    LOCKED` removes locked rows from the result set. See [Locking Read Concurrency
    with NOWAIT and SKIP LOCKED](innodb-locking-reads.html#innodb-locking-reads-nowait-skip-locked
    "Locking Read Concurrency with NOWAIT and SKIP LOCKED").'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB` 支持 `SELECT ... FOR SHARE` 和 `SELECT ... FOR UPDATE` 锁定读语句的 `NOWAIT`
    和 `SKIP LOCKED` 选项。`NOWAIT` 会导致语句立即返回，如果请求的行被另一个事务锁定。`SKIP LOCKED` 会从结果集中移除被锁定的行。请参阅
    [使用 NOWAIT 和 SKIP LOCKED 进行锁定读并发](innodb-locking-reads.html#innodb-locking-reads-nowait-skip-locked
    "Locking Read Concurrency with NOWAIT and SKIP LOCKED")。'
- en: '`SELECT ... FOR SHARE` replaces `SELECT ... LOCK IN SHARE MODE`, but `LOCK
    IN SHARE MODE` remains available for backward compatibility. The statements are
    equivalent. However, `FOR UPDATE` and `FOR SHARE` support `NOWAIT`, `SKIP LOCKED`,
    and `OF *`tbl_name`*` options. See [Section 15.2.13, “SELECT Statement”](select.html
    "15.2.13 SELECT Statement").'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SELECT ... FOR SHARE`替代了`SELECT ... LOCK IN SHARE MODE`，但`LOCK IN SHARE MODE`仍然可用以保持向后兼容性。这两个语句是等效的。然而，`FOR
    UPDATE`和`FOR SHARE`支持`NOWAIT`、`SKIP LOCKED`和`OF *`tbl_name`*`选项。参见[第15.2.13节，“SELECT语句”](select.html
    "15.2.13 SELECT Statement")。'
- en: '`OF *`tbl_name`*` applies locking queries to named tables.'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`OF *`tbl_name`*`将锁定查询应用于命名表。'
- en: '`ADD PARTITION`, `DROP PARTITION`, `COALESCE PARTITION`, `REORGANIZE PARTITION`,
    and `REBUILD PARTITION` [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
    options are supported by native partitioning in-place APIs and may be used with
    `ALGORITHM={COPY|INPLACE}` and `LOCK` clauses.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADD PARTITION`、`DROP PARTITION`、`COALESCE PARTITION`、`REORGANIZE PARTITION`和`REBUILD
    PARTITION` [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")选项由本机分区内部API支持，并且可以与`ALGORITHM={COPY|INPLACE}`和`LOCK`子句一起使用��'
- en: '`DROP PARTITION` with `ALGORITHM=INPLACE` deletes data stored in the partition
    and drops the partition. However, `DROP PARTITION` with `ALGORITHM=COPY` or [`old_alter_table=ON`](server-system-variables.html#sysvar_old_alter_table)
    rebuilds the partitioned table and attempts to move data from the dropped partition
    to another partition with a compatible `PARTITION ... VALUES` definition. Data
    that cannot be moved to another partition is deleted.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`ALGORITHM=INPLACE`的`DROP PARTITION`会删除存储在分区中的数据并且删除该分区。然而，使用`ALGORITHM=COPY`或[`old_alter_table=ON`](server-system-variables.html#sysvar_old_alter_table)的`DROP
    PARTITION`会重建分区表，并尝试将被删除分区的数据移动到具有兼容`PARTITION ... VALUES`定义的另一个分区中。无法移动到另一个分区的数据将被删除。
- en: The `InnoDB` storage engine now uses the MySQL data dictionary rather than its
    own storage engine-specific data dictionary. For information about the data dictionary,
    see [Chapter 16, *MySQL Data Dictionary*](data-dictionary.html "Chapter 16 MySQL
    Data Dictionary").
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`存储引擎现在使用MySQL数据字典而不是其自己的存储引擎特定数据字典。有关数据字典的信息，请参见[第16章，“MySQL数据字典”](data-dictionary.html
    "Chapter 16 MySQL Data Dictionary")。'
- en: '`mysql` system tables and data dictionary tables are now created in a single
    `InnoDB` tablespace file named `mysql.ibd` in the MySQL data directory. Previously,
    these tables were created in individual `InnoDB` tablespace files in the `mysql`
    database directory.'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql`系统表和数据字典表现在创建在MySQL数据目录中名为`mysql.ibd`的单个`InnoDB`表空间文件中。以前，这些表是在`mysql`数据库目录中的单独的`InnoDB`表空间文件中创建的。'
- en: 'The following undo tablespace changes are introduced in MySQL 8.0:'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8.0引入了以下撤销表空间更改：
- en: By default, undo logs now reside in two undo tablespaces that are created when
    the MySQL instance is initialized. Undo logs are no longer created in the system
    tablespace.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，撤销日志现在驻留在初始化MySQL实例时创建的两个撤销表空间中。撤销日志不再在系统表空间中创建。
- en: As of MySQL 8.0.14, additional undo tablespaces can be created in a chosen location
    at runtime using [`CREATE UNDO TABLESPACE`](create-tablespace.html "15.1.21 CREATE
    TABLESPACE Statement") syntax.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.14开始，可以使用[`CREATE UNDO TABLESPACE`](create-tablespace.html "15.1.21 CREATE
    TABLESPACE Statement")语法在选择的位置在运行时创建额外的撤销表空间。
- en: '[PRE0]'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Undo tablespaces created using [`CREATE UNDO TABLESPACE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement") syntax can be dropped at runtime using
    [`DROP UNDO TABLESPACE`](drop-tablespace.html "15.1.33 DROP TABLESPACE Statement")
    syntax.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`CREATE UNDO TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE
    Statement")语法创建的撤销表空间可以使用[`DROP UNDO TABLESPACE`](drop-tablespace.html "15.1.33 DROP
    TABLESPACE Statement")语法在运行时删除。
- en: '[PRE1]'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`ALTER UNDO TABLESPACE`](alter-tablespace.html "15.1.10 ALTER TABLESPACE Statement")
    syntax can be used to mark an undo tablespace as active or inactive.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用[`ALTER UNDO TABLESPACE`](alter-tablespace.html "15.1.10 ALTER TABLESPACE
    Statement")语法将撤销表空间标记为活动或非活动。
- en: '[PRE2]'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A `STATE` column that shows the state of a tablespace was added to the Information
    Schema [`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 The INFORMATION_SCHEMA INNODB_TABLESPACES Table") table. An undo tablespace
    must be in an `empty` state before it can be dropped.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Information Schema [`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 The INFORMATION_SCHEMA INNODB_TABLESPACES Table")表中添加了显示表空间状态的`STATE`列。在删除之前，撤销表空间必须处于`empty`状态。
- en: The [`innodb_undo_log_truncate`](innodb-parameters.html#sysvar_innodb_undo_log_truncate)
    variable is enabled by default.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_undo_log_truncate`](innodb-parameters.html#sysvar_innodb_undo_log_truncate)变量默认启用。'
- en: The [`innodb_rollback_segments`](innodb-parameters.html#sysvar_innodb_rollback_segments)
    variable defines the number of rollback segments per undo tablespace. Previously,
    [`innodb_rollback_segments`](innodb-parameters.html#sysvar_innodb_rollback_segments)
    specified the total number of rollback segments for the MySQL instance. This change
    increases the number of rollback segments available for concurrent transactions.
    More rollback segments increases the likelihood that concurrent transactions use
    separate rollback segments for undo logs, resulting in less resource contention.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_rollback_segments`](innodb-parameters.html#sysvar_innodb_rollback_segments)
    变量定义了每个撤销表空间的回滚段数。以前，[`innodb_rollback_segments`](innodb-parameters.html#sysvar_innodb_rollback_segments)
    指定了 MySQL 实例的总回滚段数。此更改增加了可用于并发事务的回滚段数。更多的回滚段增加了并发事务使用不同回滚段进行撤销日志的可能性，从而减少资源争用。'
- en: 'Default values for variables that affect buffer pool preflushing and flushing
    behavior were modified:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 影响缓冲池预刷和刷新行为的变量的默认值已经修改：
- en: The [`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)
    default value is now 10\. The previous default value of 0 disables buffer pool
    preflushing. A value of 10 enables preflushing when the percentage of dirty pages
    in the buffer pool exceeds 10%. Enabling preflushing improves performance consistency.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_max_dirty_pages_pct_lwm`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct_lwm)
    的默认值现在是 10。以前的默认值为 0，禁用了缓冲池预刷。当缓冲池中脏页的百分比超过 10% 时，值为 10 会启用预刷。启用预刷可以提高性能的一致性。'
- en: The [`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)
    default value was increased from 75 to 90. `InnoDB` attempts to flush data from
    the buffer pool so that the percentage of dirty pages does not exceed this value.
    The increased default value permits a greater percentage of dirty pages in the
    buffer pool.
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_max_dirty_pages_pct`](innodb-parameters.html#sysvar_innodb_max_dirty_pages_pct)
    的默认值从 75 增加到 90。`InnoDB` 试图从缓冲池中刷新数据，以使脏页的百分比不超过此值。增加的默认值允许缓冲池中有更大比例的脏页。'
- en: The default [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    setting is now 2 (interleaved). Interleaved lock mode permits the execution of
    multi-row inserts in parallel, which improves concurrency and scalability. The
    new [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    default setting reflects the change from statement-based replication to row based
    replication as the default replication type in MySQL 5.7. Statement-based replication
    requires the consecutive auto-increment lock mode (the previous default) to ensure
    that auto-increment values are assigned in a predictable and repeatable order
    for a given sequence of SQL statements, whereas row-based replication is not sensitive
    to the execution order of SQL statements. For more information, see [InnoDB AUTO_INCREMENT
    Lock Modes](innodb-auto-increment-handling.html#innodb-auto-increment-lock-modes
    "InnoDB AUTO_INCREMENT Lock Modes").
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的 [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    设置现在是 2（交错）。交错锁模式允许并行执行多行插入，提高了并发性和可伸缩性。新的 [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    默认设置反映了从基于语句的复制更改为基于行的复制作为 MySQL 5.7 中默认复制类型的变化。基于语句的复制需要连续的自增锁模式（以前的默认值）来确保自增值按照可预测和可重复的顺序分配给给定序列的
    SQL 语句，而基于行的复制不受 SQL 语句执行顺序的影响。更多信息，请参见 [InnoDB AUTO_INCREMENT Lock Modes](innodb-auto-increment-handling.html#innodb-auto-increment-lock-modes
    "InnoDB AUTO_INCREMENT Lock Modes")。
- en: For systems that use statement-based replication, the new [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    default setting may break applications that depend on sequential auto-increment
    values. To restore the previous default, set [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    to 1.
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于使用基于语句的复制的系统，新的 [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    默认设置可能会破坏依赖顺序自增值的应用程序。要恢复以前的默认值，请将 [`innodb_autoinc_lock_mode`](innodb-parameters.html#sysvar_innodb_autoinc_lock_mode)
    设置为 1。
- en: Renaming a general tablespace is supported by [`ALTER TABLESPACE ... RENAME
    TO`](alter-tablespace.html "15.1.10 ALTER TABLESPACE Statement") syntax.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持通过 [`ALTER TABLESPACE ... RENAME TO`](alter-tablespace.html "15.1.10 ALTER
    TABLESPACE Statement") 语法重命名通用表空间。
- en: 'The new [`innodb_dedicated_server`](innodb-parameters.html#sysvar_innodb_dedicated_server)
    variable, which is disabled by default, can be used to have `InnoDB` automatically
    configure the following options according to the amount of memory detected on
    the server:'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的[`innodb_dedicated_server`](innodb-parameters.html#sysvar_innodb_dedicated_server)变量，默认情况下已禁用，可用于根据服务器检测到的内存量自动配置以下选项：
- en: '[`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_buffer_pool_size`](innodb-parameters.html#sysvar_innodb_buffer_pool_size)'
- en: '[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)'
- en: '[`innodb_flush_method`](innodb-parameters.html#sysvar_innodb_flush_method)'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_flush_method`](innodb-parameters.html#sysvar_innodb_flush_method)'
- en: This option is intended for MySQL server instances that run on a dedicated server.
    For more information, see [Section 17.8.12, “Enabling Automatic Configuration
    for a Dedicated MySQL Server”](innodb-dedicated-server.html "17.8.12 Enabling
    Automatic Configuration for a Dedicated MySQL Server").
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此选项适用于在专用服务器上运行的MySQL服务器实例。有关更多信息，请参见[第17.8.12节，“为专用MySQL服务器启用自动配置”](innodb-dedicated-server.html
    "17.8.12 为专用MySQL服务器启用自动配置")。
- en: The new Information Schema [`INNODB_TABLESPACES_BRIEF`](information-schema-innodb-tablespaces-brief-table.html
    "28.4.25 The INFORMATION_SCHEMA INNODB_TABLESPACES_BRIEF Table") view provides
    space, name, path, flag, and space type data for `InnoDB` tablespaces.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的信息模式[`INNODB_TABLESPACES_BRIEF`](information-schema-innodb-tablespaces-brief-table.html
    "28.4.25 INFORMATION_SCHEMA INNODB_TABLESPACES_BRIEF 表")视图为`InnoDB`表空间提供空间、名称、路径、标志和空间类型数据。
- en: The [zlib library](http://www.zlib.net/) version bundled with MySQL was raised
    from version 1.2.3 to version 1.2.11\. MySQL implements compression with the help
    of the zlib library.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL捆绑的[zlib库](http://www.zlib.net/)版本从1.2.3提升到1.2.11。MySQL借助zlib库实现压缩。
- en: If you use `InnoDB` compressed tables, see [Section 3.5, “Changes in MySQL 8.0”](upgrading-from-previous-series.html
    "3.5 Changes in MySQL 8.0") for related upgrade implications.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果使用`InnoDB`压缩表，请参阅[第3.5节，“MySQL 8.0中的更改”](upgrading-from-previous-series.html
    "3.5 MySQL 8.0中的更改")以获取相关升级影响。
- en: Serialized dictionary information (SDI) is present in all `InnoDB` tablespace
    files except for global temporary tablespace and undo tablespace files. SDI is
    serialized metadata for table and tablespace objects. The presence of SDI data
    provides metadata redundancy. For example, dictionary object metadata may be extracted
    from tablespace files if the data dictionary becomes unavailable. SDI extraction
    is performed using the [**ibd2sdi**](ibd2sdi.html "6.6.1 ibd2sdi — InnoDB Tablespace
    SDI Extraction Utility") tool. SDI data is stored in `JSON` format.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列化字典信息（SDI）存在于除全局临时表空间和撤销表空间文件之外的所有`InnoDB`表空间文件中。SDI是表和表空间对象的序列化元数据。SDI数据的存在提供了元数据冗余。例如，如果数据字典不可用，则可以从表空间文件中提取字典对象元数据。SDI提取使用[**ibd2sdi**](ibd2sdi.html
    "6.6.1 ibd2sdi — InnoDB表空间SDI提取实用程序")工具进行。SDI数据以`JSON`格式存储。
- en: The inclusion of SDI data in tablespace files increases tablespace file size.
    An SDI record requires a single index page, which is 16KB in size by default.
    However, SDI data is compressed when it is stored to reduce the storage footprint.
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在表空间文件中包含SDI数据会增加表空间文件大小。一个SDI记录需要一个索引页，默认大小为16KB。但是，SDI数据在存储时会进行压缩以减少存储占用。
- en: The `InnoDB` storage engine now supports atomic DDL, which ensures that DDL
    operations are either fully committed or rolled back, even if the server halts
    during the operation. For more information, see [Section 15.1.1, “Atomic Data
    Definition Statement Support”](atomic-ddl.html "15.1.1 Atomic Data Definition
    Statement Support").
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`存储引擎现在支持原子DDL，确保DDL操作要么完全提交，要么回滚，即使服务器在操作期间停止。有关更多信息，请参见[第15.1.1节，“原子数据定义语句支持”](atomic-ddl.html
    "15.1.1 原子数据定义语句支持")。'
- en: Tablespace files can be moved or restored to a new location while the server
    is offline using the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    option. For more information, see [Section 17.6.3.6, “Moving Tablespace Files
    While the Server is Offline”](innodb-moving-data-files-offline.html "17.6.3.6 Moving
    Tablespace Files While the Server is Offline").
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)选项在服务器离线时将表空间文件移动或恢复到新位置。有关更多信息，请参见[第17.6.3.6节，“在服务器离线时移动表空间文件”](innodb-moving-data-files-offline.html
    "17.6.3.6 在服务器离线时移动表空间文件")。
- en: 'The following redo logging optimizations were implemented:'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施了以下重做日志优化：
- en: User threads can now write concurrently to the log buffer without synchronizing
    writes.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户线程现在可以并发写入日志缓冲区而无需同步写入。
- en: User threads can now add dirty pages to the flush list in a relaxed order.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户线程现在可以以松弛顺序将脏页添加到刷新列表中。
- en: A dedicated log thread is now responsible for writing the log buffer to the
    system buffers, flushing system buffers to disk, notifying user threads about
    written and flushed redo, maintaining the lag required for the relaxed flush list
    order, and write checkpoints.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在有一个专用的日志线程负责将日志缓冲区写入系统缓冲区，将系统缓冲区刷新到磁盘，通知用户线程已写入和刷新的重做，维护松弛刷新列表顺序所需的延迟，并写入检查点。
- en: 'System variables were added for configuring the use of spin delay by user threads
    waiting for flushed redo:'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统变量已添加以配置用户线程在等待刷新重做时使用自旋延迟：
- en: '[`innodb_log_wait_for_flush_spin_hwm`](innodb-parameters.html#sysvar_innodb_log_wait_for_flush_spin_hwm):
    Defines the maximum average log flush time beyond which user threads no longer
    spin while waiting for flushed redo.'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_wait_for_flush_spin_hwm`](innodb-parameters.html#sysvar_innodb_log_wait_for_flush_spin_hwm):
    定义了平均日志刷新时间的最大值，超过这个值时，用户线程不再在等待刷新重做时自旋。'
- en: '[`innodb_log_spin_cpu_abs_lwm`](innodb-parameters.html#sysvar_innodb_log_spin_cpu_abs_lwm):
    Defines the minimum amount of CPU usage below which user threads no longer spin
    while waiting for flushed redo.'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_spin_cpu_abs_lwm`](innodb-parameters.html#sysvar_innodb_log_spin_cpu_abs_lwm):
    定义了CPU使用率的最小值，低于此值时，用户线程在等待刷新重做时不再自旋。'
- en: '[`innodb_log_spin_cpu_pct_hwm`](innodb-parameters.html#sysvar_innodb_log_spin_cpu_pct_hwm):
    Defines the maximum amount of CPU usage above which user threads no longer spin
    while waiting for flushed redo.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_spin_cpu_pct_hwm`](innodb-parameters.html#sysvar_innodb_log_spin_cpu_pct_hwm):
    定义了CPU使用率的最大值，高于此值时，用户线程在等待刷新重做时不再自旋。'
- en: The [`innodb_log_buffer_size`](innodb-parameters.html#sysvar_innodb_log_buffer_size)
    variable is now dynamic, which permits resizing of the log buffer while the server
    is running.
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_buffer_size`](innodb-parameters.html#sysvar_innodb_log_buffer_size)变量现在是动态的，允许在服务器运行时调整日志缓冲区的大小。'
- en: For more information, see [Section 10.5.4, “Optimizing InnoDB Redo Logging”](optimizing-innodb-logging.html
    "10.5.4 Optimizing InnoDB Redo Logging").
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参见[第10.5.4节，“优化InnoDB重做日志记录”](optimizing-innodb-logging.html "10.5.4 优化InnoDB重做日志记录")。
- en: As of MySQL 8.0.12, undo logging is supported for small updates to large object
    (LOB) data, which improves performance of LOB updates that are 100 bytes in size
    or less. Previously, LOB updates were a minimum of one LOB page in size, which
    is less than optimal for updates that might only modify a few bytes. This enhancement
    builds upon support added in MySQL 8.0.4 for partial update of LOB data.
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.12，对大对象（LOB）数据进行小更新支持撤销日志记录，这提高了大小为100字节或更小的LOB更新的性能。以前，LOB更新的最小大小为一个LOB页，这对于可能只修改几个字节的更新来说不太理想。此增强功能建立在MySQL
    8.0.4中对LOB数据的部分更新支持之上。
- en: 'As of MySQL 8.0.12, `ALGORITHM=INSTANT` is supported for the following [`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") operations:'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.12，`ALGORITHM=INSTANT`支持以下[`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE语句")操作：
- en: Adding a column. This feature is also referred to as “Instant `ADD COLUMN`”.
    Limitations apply. See [Section 17.12.1, “Online DDL Operations”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations").
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加列。此功能也被称为“即时`ADD COLUMN`”。有一些限制。请参见[第17.12.1节，“在线DDL操作”](innodb-online-ddl-operations.html
    "17.12.1 在线DDL操作")。
- en: Adding or dropping a virtual column.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加或删除虚拟列。
- en: Adding or dropping a column default value.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加或删除列的默认值。
- en: Modifying the definition of an [`ENUM`](enum.html "13.3.5 The ENUM Type") or
    [`SET`](set.html "13.3.6 The SET Type") column.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改[`ENUM`](enum.html "13.3.5 ENUM类型")或[`SET`](set.html "13.3.6 SET类型")列的定义。
- en: Changing the index type.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改索引类型。
- en: Renaming a table.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重命名表。
- en: Operations that support `ALGORITHM=INSTANT` only modify metadata in the data
    dictionary. No metadata locks are taken on the table, and table data is unaffected,
    making the operations instantaneous. If not specified explicitly, `ALGORITHM=INSTANT`
    is used by default by operations that support it. If `ALGORITHM=INSTANT` is specified
    but not supported, the operation fails immediately with an error.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅支持`ALGORITHM=INSTANT`的操作仅修改数据字典中的元数据。表上不会获取元数据锁，表数据也不受影响，使操作瞬间完成。如果未明确指定，支持`ALGORITHM=INSTANT`的操作将默认使用它。如果指定了`ALGORITHM=INSTANT`但不支持，操作将立即失败并显示错误。
- en: For more information about operations that support `ALGORITHM=INSTANT`, see
    [Section 17.12.1, “Online DDL Operations”](innodb-online-ddl-operations.html "17.12.1 Online
    DDL Operations").
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关支持`ALGORITHM=INSTANT`的操作的更多信息，请参见[第17.12.1节，“在线DDL操作”](innodb-online-ddl-operations.html
    "17.12.1 在线DDL操作")。
- en: As of MySQL 8.0.13, the `TempTable` storage engine supports storage of binary
    large object (BLOB) type columns. This enhancement improves performance for queries
    that use temporary tables containing BLOB data. Previously, temporary tables that
    contained BLOB data were stored in the on-disk storage engine defined by [`internal_tmp_disk_storage_engine`](server-system-variables.html#sysvar_internal_tmp_disk_storage_engine).
    For more information, see [Section 10.4.4, “Internal Temporary Table Use in MySQL”](internal-temporary-tables.html
    "10.4.4 Internal Temporary Table Use in MySQL").
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.13，`TempTable`存储引擎支持存储二进制大对象（BLOB）类型列。这个增强功能提高了查询性能，用于包含BLOB数据的临时表。以前，包含BLOB数据的临时表存储在由[`internal_tmp_disk_storage_engine`](server-system-variables.html#sysvar_internal_tmp_disk_storage_engine)定义的磁盘存储引擎中。更多信息，请参见[第10.4.4节，“MySQL中的内部临时表使用”](internal-temporary-tables.html
    "10.4.4 MySQL中的内部临时表使用")。
- en: As of MySQL 8.0.13, the `InnoDB` data-at-rest encryption feature supports general
    tablespaces. Previously, only file-per-table tablespaces could be encrypted. To
    support encryption of general tablespaces, [`CREATE TABLESPACE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement") and [`ALTER TABLESPACE`](alter-tablespace.html
    "15.1.10 ALTER TABLESPACE Statement") syntax was extended to include an `ENCRYPTION`
    clause.
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.13，`InnoDB`数据静止加密功能支持通用表空间。以前，只有文件表表空间可以加密。为了支持通用表空间的加密，[`CREATE
    TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE语句")和[`ALTER TABLESPACE`](alter-tablespace.html
    "15.1.10 ALTER TABLESPACE语句")语法被扩展以包括一个`ENCRYPTION`子句。
- en: The Information Schema [`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 The INFORMATION_SCHEMA INNODB_TABLESPACES Table") table now includes
    an `ENCRYPTION` column that indicates whether or not a tablespace is encrypted.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 信息模式[`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 INFORMATION_SCHEMA INNODB_TABLESPACES表")表现在包括一个`ENCRYPTION`列，指示表空间是否加密。
- en: The `stage/innodb/alter tablespace (encryption)` Performance Schema stage instrument
    was added to permit monitoring of general tablespace encryption operations.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`stage/innodb/alter tablespace (encryption)`性能模式阶段工具，以允许监视通用表空间加密操作。
- en: Disabling the `innodb_buffer_pool_in_core_file` variable reduces the size of
    core files by excluding `InnoDB` buffer pool pages. To use this variable, the
    [`core_file`](server-system-variables.html#sysvar_core_file) variable must be
    enabled and the operating system must support the `MADV_DONTDUMP` non-POSIX extension
    to `madvise()`, which is supported in Linux 3.4 and later. For more information,
    see [Section 17.8.3.7, “Excluding Buffer Pool Pages from Core Files”](innodb-buffer-pool-in-core-file.html
    "17.8.3.7 Excluding Buffer Pool Pages from Core Files").
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用`innodb_buffer_pool_in_core_file`变量通过排除`InnoDB`缓冲池页面来减小核心文件的大小。要使用这个变量，必须启用[`core_file`](server-system-variables.html#sysvar_core_file)变量，并且操作系统必须支持`MADV_DONTDUMP`非POSIX扩展到`madvise()`，这在Linux
    3.4及更高版本中支持。更多信息，请参见[第17.8.3.7节，“从核心文件中排除缓冲池页面”](innodb-buffer-pool-in-core-file.html
    "17.8.3.7 从核心文件中排除缓冲池页面")。
- en: As of MySQL 8.0.13, user-created temporary tables and internal temporary tables
    created by the optimizer are stored in session temporary tablespaces that are
    allocated to a session from a pool of temporary tablespaces. When a session disconnects,
    its temporary tablespaces are truncated and released back to the pool. In previous
    releases, temporary tables were created in the global temporary tablespace (`ibtmp1`),
    which did not return disk space to the operating system after temporary tables
    were dropped.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.13，用户创建的临时表和优化器创建的内部临时表存储在为会话分配的会话临时表空间中，从临时表空间池中分配。当会话断开连接时，其临时表空间被截断并释放回池中。在以前的版本中，临时表被创建在全局临时表空间（`ibtmp1`）中，在临时表被删除后不会将磁盘空间返回给操作系统。
- en: The [`innodb_temp_tablespaces_dir`](innodb-parameters.html#sysvar_innodb_temp_tablespaces_dir)
    variable defines the location where session temporary tablespaces are created.
    The default location is the `#innodb_temp` directory in the data directory.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`innodb_temp_tablespaces_dir`](innodb-parameters.html#sysvar_innodb_temp_tablespaces_dir)变量定义了会话临时表空间创建的位置。默认位置是数据目录中的`#innodb_temp`目录。'
- en: The [`INNODB_SESSION_TEMP_TABLESPACES`](information-schema-innodb-session-temp-tablespaces-table.html
    "28.4.22 The INFORMATION_SCHEMA INNODB_SESSION_TEMP_TABLESPACES Table") table
    provides metadata about session temporary tablespaces.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`INNODB_SESSION_TEMP_TABLESPACES`](information-schema-innodb-session-temp-tablespaces-table.html
    "28.4.22 INFORMATION_SCHEMA INNODB_SESSION_TEMP_TABLESPACES表")表提供有关会话临时表空间的元数据。'
- en: The global temporary tablespace (`ibtmp1`) now stores rollback segments for
    changes made to user-created temporary tables.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局临时表空间（`ibtmp1`）现在存储对用户创建的临时表所做更改的回滚段。
- en: As of MySQL 8.0.14, `InnoDB` supports parallel clustered index reads, which
    can improve [`CHECK TABLE`](check-table.html "15.7.3.2 CHECK TABLE Statement")
    performance. This feature does not apply to secondary index scans. The [`innodb_parallel_read_threads`](innodb-parameters.html#sysvar_innodb_parallel_read_threads)
    session variable must be set to a value greater than 1 for parallel clustered
    index reads to occur. The default value is 4\. The actual number of threads used
    to perform a parallel clustered index read is determined by the [`innodb_parallel_read_threads`](innodb-parameters.html#sysvar_innodb_parallel_read_threads)
    setting or the number of index subtrees to scan, whichever is smaller.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.14开始，`InnoDB`支持并行聚簇索引读取，可以提高[`CHECK TABLE`](check-table.html "15.7.3.2 CHECK
    TABLE语句")性能。此功能不适用于次要索引扫描。[`innodb_parallel_read_threads`](innodb-parameters.html#sysvar_innodb_parallel_read_threads)会话变量必须设置为大于1的值，才能进行并行聚簇索引读取。默认值为4。用于执行并行聚簇索引读取的实际线程数由[`innodb_parallel_read_threads`](innodb-parameters.html#sysvar_innodb_parallel_read_threads)设置或要扫描的索引子树数量决定，取两者中较小的值。
- en: As of 8.0.14, when the [`innodb_dedicated_server`](innodb-parameters.html#sysvar_innodb_dedicated_server)
    variable is enabled, the size and number of log files are configured according
    to the automatically configured buffer pool size. Previously, log file size was
    configured according to the amount of memory detected on the server, and the number
    of log files was not configured automatically.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从8.0.14开始，当启用[`innodb_dedicated_server`](innodb-parameters.html#sysvar_innodb_dedicated_server)变量时，日志文件的大小和数量将根据自动配置的缓冲池大小进行配置。以前，日志文件大小是根据服务器上检测到的内存量进行配置的，日志文件的数量不是自动配置的。
- en: As of 8.0.14, the `ADD DATAFILE` clause of the [`CREATE TABLESPACE`](create-tablespace.html
    "15.1.21 CREATE TABLESPACE Statement") statement is optional, which permits users
    without the [`FILE`](privileges-provided.html#priv_file) privilege to create tablespaces.
    A [`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE Statement")
    statement executed without an `ADD DATAFILE` clause implicitly creates a tablespace
    data file with a unique file name.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从8.0.14开始，[`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE语句")语句的`ADD
    DATAFILE`子句是可选的，这允许没有[`FILE`](privileges-provided.html#priv_file)权限的用户创建表空间。执行不带`ADD
    DATAFILE`子句的[`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE语句")语句会隐式创建一个具有唯一文件名的表空间数据文件。
- en: By default, when the amount of memory occupied by the TempTable storage engine
    exceeds the memory limit defined by the [`temptable_max_ram`](server-system-variables.html#sysvar_temptable_max_ram)
    variable, the TempTable storage engine begins allocating memory-mapped temporary
    files from disk. As of MySQL 8.0.16, this behavior is controlled by the [`temptable_use_mmap`](server-system-variables.html#sysvar_temptable_use_mmap)
    variable. Disabling [`temptable_use_mmap`](server-system-variables.html#sysvar_temptable_use_mmap)
    causes the TempTable storage engine to use `InnoDB` on-disk internal temporary
    tables instead of memory-mapped files as its overflow mechanism. For more information,
    see [Internal Temporary Table Storage Engine](internal-temporary-tables.html#internal-temporary-tables-engines
    "Internal Temporary Table Storage Engine").
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，当TempTable存储引擎占用的内存量超过[`temptable_max_ram`](server-system-variables.html#sysvar_temptable_max_ram)变量定义的内存限制时，TempTable存储引擎开始从磁盘分配内存映射临时文件。从MySQL
    8.0.16开始，此行为由[`temptable_use_mmap`](server-system-variables.html#sysvar_temptable_use_mmap)变量控制。禁用[`temptable_use_mmap`](server-system-variables.html#sysvar_temptable_use_mmap)会导致TempTable存储引擎使用`InnoDB`磁盘上的内部临时表，而不是内存映射文件作为其溢出机制。有关更多信息，请参见[内部临时表存储引擎](internal-temporary-tables.html#internal-temporary-tables-engines
    "内部临时表存储引擎")。
- en: As of MySQL 8.0.16, the `InnoDB` data-at-rest encryption feature supports encryption
    of the `mysql` system tablespace. The `mysql` system tablespace contains the `mysql`
    system database and the MySQL data dictionary tables. For more information, see
    [Section 17.13, “InnoDB Data-at-Rest Encryption”](innodb-data-encryption.html
    "17.13 InnoDB Data-at-Rest Encryption").
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自MySQL 8.0.16起，`InnoDB`数据静态加密功能支持对`mysql`系统表空间进行加密。`mysql`系统表空间包含`mysql`系统数据库和MySQL数据字典表。更多信息，请参见[第17.13节，“InnoDB数据静态加密”](innodb-data-encryption.html
    "17.13 InnoDB数据静态加密")。
- en: The [`innodb_spin_wait_pause_multiplier`](innodb-parameters.html#sysvar_innodb_spin_wait_pause_multiplier)
    variable, introduced in MySQL 8.0.16, provides greater control over the duration
    of spin-lock polling delays that occur when a thread waits to acquire a mutex
    or rw-lock. Delays can be tuned more finely to account for differences in PAUSE
    instruction duration on different processor architectures. For more information,
    see [Section 17.8.8, “Configuring Spin Lock Polling”](innodb-performance-spin_lock_polling.html
    "17.8.8 Configuring Spin Lock Polling").
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_spin_wait_pause_multiplier`](innodb-parameters.html#sysvar_innodb_spin_wait_pause_multiplier)变量，自MySQL
    8.0.16起引入，提供了对当线程等待获取互斥锁或读写锁时发生的自旋锁轮询延迟持续时间的更大控制。延迟可以更精细地调整，以考虑不同处理器架构上PAUSE指令持续时间的差异。更多信息，请参见[第17.8.8节，“配置自旋锁轮询”](innodb-performance-spin_lock_polling.html
    "17.8.8 配置自旋锁轮询")。'
- en: '`InnoDB` parallel read thread performance for large data sets was improved
    in MySQL 8.0.17 through better utilization of read threads, through a reduction
    in read thread I/O for prefetch activity that occurs during parallel scans, and
    through support for parallel scanning of partitions.'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`大数据集并行读取线程性能在MySQL 8.0.17中得到改善，通过更好地利用读取线程，减少在并行扫描期间发生的预取活动的读取线程I/O，并支持对分区进行并行扫描。'
- en: The parallel read thread feature is controlled by the [`innodb_parallel_read_threads`](innodb-parameters.html#sysvar_innodb_parallel_read_threads)
    variable. The maximum setting is now 256, which is the total number of threads
    for all client connections. If the thread limit is reached, connections fall back
    to using a single thread.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并行读取线程功能由[`innodb_parallel_read_threads`](innodb-parameters.html#sysvar_innodb_parallel_read_threads)变量控制。最大设置现在为256，这是所有客户端连接的线程总数。如果线程限制达到，连接将回退到使用单个线程。
- en: The [`innodb_idle_flush_pct`](innodb-parameters.html#sysvar_innodb_idle_flush_pct)
    variable, introduced in MySQL 8.0.18, permits placing a limit on page flushing
    during idle periods, which can help extend the life of solid state storage devices.
    See [Limiting Buffer Flushing During Idle Periods](innodb-buffer-pool-flushing.html#innodb-limit-flushing-rate
    "Limiting Buffer Flushing During Idle Periods").
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_idle_flush_pct`](innodb-parameters.html#sysvar_innodb_idle_flush_pct)变量，自MySQL
    8.0.18起引入，允许在空闲时期限制页面刷新，有助于延长固态存储设备的寿命。请参见[限制空闲时期的缓冲刷新](innodb-buffer-pool-flushing.html#innodb-limit-flushing-rate
    "限制空闲时期的缓冲刷新")。'
- en: Efficient sampling of `InnoDB` data for the purpose of generating histogram
    statistics is supported as of MySQL 8.0.19\. See [Histogram Statistics Analysis](analyze-table.html#analyze-table-histogram-statistics-analysis
    "Histogram Statistics Analysis").
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.19起，支持对`InnoDB`数据进行高效采样，以生成直方图统计信息。请参见[直方图统计分析](analyze-table.html#analyze-table-histogram-statistics-analysis
    "直方图统计分析")。
- en: 'As of MySQL 8.0.20, the doublewrite buffer storage area resides in doublewrite
    files. In previous releases, the storage area resided in the system tablespace.
    Moving the storage area out of the system tablespace reduces write latency, increases
    throughput, and provides flexibility with respect to placement of doublewrite
    buffer pages. The following system variables were introduced for advanced doublewrite
    buffer configuration:'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自MySQL 8.0.20起，双写缓冲存储区位于双写文件中。在之前的版本中，存储区位于系统表空间中。将存储区移出系统表空间可以减少写入延迟，增加吞吐量，并提供关于双写缓冲页放置的灵活性。以下系统变量用于高级双写缓冲配置：
- en: '[`innodb_doublewrite_dir`](innodb-parameters.html#sysvar_innodb_doublewrite_dir)'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_doublewrite_dir`](innodb-parameters.html#sysvar_innodb_doublewrite_dir)'
- en: Defines the doublewrite buffer file directory.
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义双写缓冲文件目录。
- en: '[`innodb_doublewrite_files`](innodb-parameters.html#sysvar_innodb_doublewrite_files)'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_doublewrite_files`](innodb-parameters.html#sysvar_innodb_doublewrite_files)'
- en: Defines the number of doublewrite files.
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义双写文件的数量。
- en: '[`innodb_doublewrite_pages`](innodb-parameters.html#sysvar_innodb_doublewrite_pages)'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_doublewrite_pages`](innodb-parameters.html#sysvar_innodb_doublewrite_pages)'
- en: Defines the maximum number of doublewrite pages per thread for a batch write.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义了每个批次写入的最大双写页数。
- en: '[`innodb_doublewrite_batch_size`](innodb-parameters.html#sysvar_innodb_doublewrite_batch_size)'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_doublewrite_batch_size`](innodb-parameters.html#sysvar_innodb_doublewrite_batch_size)'
- en: Defines the number of doublewrite pages to write in a batch.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义一批中要写入的双写页数。
- en: For more information, see [Section 17.6.4, “Doublewrite Buffer”](innodb-doublewrite-buffer.html
    "17.6.4 Doublewrite Buffer").
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参见[第17.6.4节，“双写缓冲区”](innodb-doublewrite-buffer.html "17.6.4 双写缓冲区")。
- en: The Contention-Aware Transaction Scheduling (CATS) algorithm, which prioritizes
    transactions that are waiting for locks, was improved in MySQL 8.0.20. Transaction
    scheduling weight computation is now performed a separate thread entirely, which
    improves computation performance and accuracy.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先考虑等待锁的事务的争用感知事务调度（CATS）算法在MySQL 8.0.20中得到改进。现在，事务调度权重计算完全在一个单独的线程中执行，这提高了计算性能和准确性。
- en: The First In First Out (FIFO) algorithm, which had also been used for transaction
    scheduling, was removed. The FIFO algorithm was rendered redundant by CATS algorithm
    enhancements. Transaction scheduling previously performed by the FIFO algorithm
    is now performed by the CATS algorithm.
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 先进先出（FIFO）算法，之前也用于事务调度，已被移除。FIFO算法被CATS算法增强所取代。之前由FIFO算法执行的事务调度现在由CATS算法执行。
- en: A `TRX_SCHEDULE_WEIGHT` column was added to the `INFORMATION_SCHEMA.INNODB_TRX`
    table, which permits querying transaction scheduling weights assigned by the CATS
    algorithm.
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`INFORMATION_SCHEMA.INNODB_TRX`表中添加了一个`TRX_SCHEDULE_WEIGHT`列，允许查询CATS算法分配的事务调度权重。
- en: 'The following `INNODB_METRICS` counters were added for monitoring code-level
    transaction scheduling events:'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于监视代码级事务调度事件的以下`INNODB_METRICS`计数器被添加：
- en: '`lock_rec_release_attempts`'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lock_rec_release_attempts`'
- en: The number of attempts to release record locks.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 释放记录锁的尝试次数。
- en: '`lock_rec_grant_attempts`'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lock_rec_grant_attempts`'
- en: The number of attempts to grant record locks.
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 授予记录锁的尝试次数。
- en: '`lock_schedule_refreshes`'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lock_schedule_refreshes`'
- en: The number of times the wait-for graph was analyzed to update transaction schedule
    weights.
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分析等待图以更新事务调度权重的次数。
- en: For more information, see [Section 17.7.6, “Transaction Scheduling”](innodb-transaction-scheduling.html
    "17.7.6 Transaction Scheduling").
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参见[第17.7.6节，“事务调度”](innodb-transaction-scheduling.html "17.7.6 事务调度")。
- en: As of MySQL 8.0.21, to improve concurrency for operations that require access
    to lock queues for table and row resources, the lock system mutex (`lock_sys->mutex`)
    was replaced in by sharded latches, and lock queues were grouped into table and
    page *lock queue shards*, with each shard protected by a dedicated mutex. Previously,
    the single lock system mutex protected all lock queues, which was a point of contention
    on high-concurrency systems. The new sharded implementation permits more granular
    access to lock queues.
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.21，为了改善需要访问表和行资源的锁队列的操作的并发性，锁系统互斥体（`lock_sys->mutex`）被分片锁替代，并且锁队列被分组为表和页面*锁队列分片*，每个分片由专用互斥体保护。以前，单个锁系统互斥体保护所有锁队列，在高并发系统上是一个争用点。新的分片实现允许更精细地访问锁队列。
- en: 'The lock system mutex (`lock_sys->mutex`) was replaced by the following sharded
    latches:'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 锁系统互斥体（`lock_sys->mutex`）被以下分片锁替代：
- en: A global latch (`lock_sys->latches.global_latch`) consisting of 64 read-write
    lock objects (`rw_lock_t`). Access to an individual lock queue requires a shared
    global latch and a latch on the lock queue shard. Operations that require access
    to all lock queues take an exclusive global latch, which latches all table and
    page lock queue shards.
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局分片锁（`lock_sys->latches.global_latch`）由64个读写锁对象（`rw_lock_t`）组成。访问单个锁队列需要一个共享全局锁和一个锁队列分片的锁。需要访问所有锁队列的操作需要一个独占的全局锁，该锁锁定所有表和页面锁队列分片。
- en: Table shard latches (`lock_sys->latches.table_shards.mutexes`), implemented
    as an array of 512 mutexes, with each mutex dedicated to one of 512 table lock
    queue shards.
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表分片锁（`lock_sys->latches.table_shards.mutexes`），实现为一个包含512个互斥体的数组，每个互斥体专用于512个表锁队列分片中的一个。
- en: Page shard latches (`lock_sys->latches.page_shards.mutexes`), implemented as
    an array of 512 mutexes, with each mutex dedicated to one of 512 page lock queue
    shards.
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面分片锁（`lock_sys->latches.page_shards.mutexes`），实现为一个包含512个互斥体的数组，每个互斥体专用于512个页面锁队列分片中的一个。
- en: 'The Performance Schema `wait/synch/mutex/innodb/lock_mutex` instrument for
    monitoring the single lock system mutex was replaced by instruments for monitoring
    the new global, table shard, and page shard latches:'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于监控单个锁系统互斥体的性能模式`wait/synch/mutex/innodb/lock_mutex`仪器已被替换为用于监控新的全局、表分片和页面分片闩锁的仪器：
- en: '`wait/synch/sxlock/innodb/lock_sys_global_rw_lock`'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wait/synch/sxlock/innodb/lock_sys_global_rw_lock`'
- en: '`wait/synch/mutex/innodb/lock_sys_table_mutex`'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wait/synch/mutex/innodb/lock_sys_table_mutex`'
- en: '`wait/synch/mutex/innodb/lock_sys_page_mutex`'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wait/synch/mutex/innodb/lock_sys_page_mutex`'
- en: As of MySQL 8.0.21, table and table partition data files created outside of
    the data directory using the `DATA DIRECTORY` clause are restricted to directories
    known to `InnoDB`. This change permits database administrators to control where
    tablespace data files are created and ensures that the data files can be found
    during recovery.
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.21开始，使用`DATA DIRECTORY`子句在数据目录之外创建的表和表分区数据文件受限于`InnoDB`已知的目录。此更改允许数据库管理员控制表空间数据文件的创建位置，并确保在恢复期间可以找到数据文件。
- en: General and file-per-table tablespaces data files (`.ibd` files) can no longer
    be created in the undo tablespace directory ([`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory))
    unless that directly is known to `InnoDB`.
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通用和每个表的文件表空间数据文件（`.ibd`文件）不再可以在撤销表空间目录（[`innodb_undo_directory`](innodb-parameters.html#sysvar_innodb_undo_directory)）中创建，除非`InnoDB`已知该目录。
- en: Known directories are those defined by the [`datadir`](server-system-variables.html#sysvar_datadir),
    [`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir),
    and [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories) variables.
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已知目录是由[`datadir`](server-system-variables.html#sysvar_datadir)、[`innodb_data_home_dir`](innodb-parameters.html#sysvar_innodb_data_home_dir)和[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)变量定义的目录。
- en: Truncating an `InnoDB` table that resides in a file-per-table tablespace drops
    the existing tablespace and creates a new one. As of MySQL 8.0.21, `InnoDB` creates
    the new tablespace in the default location and writes a warning to the error log
    if the current tablespace directory is unknown. To have [`TRUNCATE TABLE`](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement") create the tablespace in its current location,
    add the directory to the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    setting before running [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement").
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截断位于文件表空间中的`InnoDB`表会删除现有的表空间并创建一个新的表空间。从MySQL 8.0.21开始，如果当前表空间目录未知，`InnoDB`会在默认位置创建新的表空间，并在错误日志中写入警告。要使[`TRUNCATE
    TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")在当前位置创建表空间，请在运行[`TRUNCATE
    TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")之前将目录添加到[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)设置中。
- en: As of MySQL 8.0.21, redo logging can be enabled and disabled using [`ALTER INSTANCE
    {ENABLE|DISABLE} INNODB REDO_LOG`](alter-instance.html "15.1.5 ALTER INSTANCE
    Statement") syntax. This functionality is intended for loading data into a new
    MySQL instance. Disabling redo logging helps speed up data loading by avoiding
    redo log writes.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.21开始，可以使用[`ALTER INSTANCE {ENABLE|DISABLE} INNODB REDO_LOG`](alter-instance.html
    "15.1.5 ALTER INSTANCE Statement")语法启用和禁用重做日志记录。此功能旨在将数据加载到新的MySQL实例中。禁用重做日志记录有助于通过避免重做日志写入来加快数据加载速度。
- en: The new [`INNODB_REDO_LOG_ENABLE`](privileges-provided.html#priv_innodb-redo-log-enable)
    privilege permits enabling and disabling redo logging.
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的[`INNODB_REDO_LOG_ENABLE`](privileges-provided.html#priv_innodb-redo-log-enable)权限允许启用和禁用重做日志记录。
- en: The new [`Innodb_redo_log_enabled`](server-status-variables.html#statvar_Innodb_redo_log_enabled)
    status variable permits monitoring redo logging status.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的[`Innodb_redo_log_enabled`](server-status-variables.html#statvar_Innodb_redo_log_enabled)状态变量允许监控重做日志记录状态。
- en: See [Disabling Redo Logging](innodb-redo-log.html#innodb-disable-redo-logging
    "Disabling Redo Logging").
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见[禁用重做日志记录](innodb-redo-log.html#innodb-disable-redo-logging "Disabling Redo
    Logging")。
- en: At startup, `InnoDB` validates the paths of known tablespace files against tablespace
    file paths stored in the data dictionary in case tablespace files have been moved
    to a different location. The new [`innodb_validate_tablespace_paths`](innodb-parameters.html#sysvar_innodb_validate_tablespace_paths)
    variable, introduced in MySQL 8.0.21, permits disabling tablespace path validation.
    This feature is intended for environments where tablespaces files are not moved.
    Disabling tablespace path validation improves startup time on systems with a large
    number of tablespace files.
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在启动时，`InnoDB`会校验已知表空间文件的路径与数据字典中存储的表空间文件路径是否匹配，以防表空间文件已移动到不同位置。新引入的[`innodb_validate_tablespace_paths`](innodb-parameters.html#sysvar_innodb_validate_tablespace_paths)变量允许禁用表空间路径验证。此功能适用于表空间文件未移动的环境。禁用表空间路径验证可以提高在具有大量表空间文件的系统上的启动时间。
- en: For more information, see [Section 17.6.3.7, “Disabling Tablespace Path Validation”](innodb-disabling-tablespace-path-validation.html
    "17.6.3.7 Disabling Tablespace Path Validation").
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参见[第17.6.3.7节，“禁用表空间路径验证”](innodb-disabling-tablespace-path-validation.html
    "17.6.3.7 Disabling Tablespace Path Validation")。
- en: As of MySQL 8.0.21, on storage engines that support atomic DDL, the [`CREATE
    TABLE ... SELECT`](create-table-select.html "15.1.20.4 CREATE TABLE ... SELECT
    Statement") statement is logged as one transaction in the binary log when row-based
    replication is in use. Previously, it was logged as two transactions, one to create
    the table, and the other to insert data. With this change, [`CREATE TABLE ...
    SELECT`](create-table-select.html "15.1.20.4 CREATE TABLE ... SELECT Statement")
    statements are now safe for row-based replication and permitted for use with GTID-based
    replication. For more information, see [Section 15.1.1, “Atomic Data Definition
    Statement Support”](atomic-ddl.html "15.1.1 Atomic Data Definition Statement Support").
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.21版本，在支持原子DDL的存储引擎上，当使用基于行的复制时，[`CREATE TABLE ... SELECT`](create-table-select.html
    "15.1.20.4 CREATE TABLE ... SELECT Statement")语句将作为一个事务记录在二进制日志中。以前，它被记录为两个事务，一个用于创建表，另一个用于插入数据。通过这个改变，[`CREATE
    TABLE ... SELECT`](create-table-select.html "15.1.20.4 CREATE TABLE ... SELECT
    Statement")语句现在对于基于行的复制是安全的，并且允许与基于GTID的复制一起使用。更多信息，请参见[第15.1.1节，“原子数据定义语句支持”](atomic-ddl.html
    "15.1.1 Atomic Data Definition Statement Support")。
- en: Truncating an undo tablespace on a busy system could affect performance due
    to associated flushing operations that remove old undo tablespace pages from the
    buffer pool and flush the initial pages of the new undo tablespace to disk. To
    address this issue, the flushing operations are removed as of MySQL 8.0.21.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在繁忙系统上截断撤销表空间可能会影响性能，因为相关的刷新操作会从缓冲池中移除旧的撤销表空间页面，并将新撤销表空间的初始页面刷新到磁盘。为了解决这个问题，从MySQL
    8.0.21开始移除了刷新操作。
- en: Old undo tablespace pages are released passively as they become least recently
    used, or are removed at the next full checkpoint. The initial pages of the new
    undo tablespace are now redo logged instead of flushed to disk during the truncate
    operation, which also improves durability of the undo tablespace truncate operation.
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 旧的撤销表空间页面在变得最近未使用时被被动释放，或者在下一个完整检查点时被移除。新撤销表空间的初始页面现在被重做日志记录，而不是在截断操作期间刷新到磁盘，这也提高了撤销表空间截断操作的耐久性。
- en: To prevent potential issues caused by an excessive number of undo tablespace
    truncate operations, truncate operations on the same undo tablespace between checkpoints
    are now limited to 64\. If the limit is exceeded, an undo tablespace can still
    be made inactive, but it is not truncated until after the next checkpoint.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了防止由过多的撤销表空间截断操作引起的潜在问题，现在在检查点之间对同一撤销表空间的截断操作被限制为64次。如果超过限制，撤销表空间仍然可以被设置为非活动状态，但直到下一个检查点之后才会被截断。
- en: '[`INNODB_METRICS`](information-schema-innodb-metrics-table.html "28.4.21 The
    INFORMATION_SCHEMA INNODB_METRICS Table") counters associated with defunct undo
    truncate flushing operations were removed. Removed counters include: `undo_truncate_sweep_count`,
    `undo_truncate_sweep_usec`, `undo_truncate_flush_count`, and `undo_truncate_flush_usec`.'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与废弃的撤销截断刷新操作相关的[`INNODB_METRICS`](information-schema-innodb-metrics-table.html
    "28.4.21 The INFORMATION_SCHEMA INNODB_METRICS Table")计数器已被移除。移除的计数器包括：`undo_truncate_sweep_count`、`undo_truncate_sweep_usec`、`undo_truncate_flush_count`和`undo_truncate_flush_usec`。
- en: See [Section 17.6.3.4, “Undo Tablespaces”](innodb-undo-tablespaces.html "17.6.3.4 Undo
    Tablespaces").
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见[第17.6.3.4节，“撤销表空间”](innodb-undo-tablespaces.html "17.6.3.4 Undo Tablespaces")。
- en: As of MySQL 8.0.22, the new [`innodb_extend_and_initialize`](innodb-parameters.html#sysvar_innodb_extend_and_initialize)
    variable permits configuring how `InnoDB` allocates space to file-per-table and
    general tablespaces on Linux. By default, when an operation requires additional
    space in a tablespace, `InnoDB` allocates pages to the tablespace and physically
    writes NULLs to those pages. This behavior affects performance if new pages are
    allocated frequently. You can disable [`innodb_extend_and_initialize`](innodb-parameters.html#sysvar_innodb_extend_and_initialize)
    on Linux systems to avoid physically writing NULLs to newly allocated tablespace
    pages. When [`innodb_extend_and_initialize`](innodb-parameters.html#sysvar_innodb_extend_and_initialize)
    is disabled, space is allocated using `posix_fallocate()` calls, which reserve
    space without physically writing NULLs.
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.22版本，新的[`innodb_extend_and_initialize`](innodb-parameters.html#sysvar_innodb_extend_and_initialize)变量允许配置`InnoDB`在Linux上为文件表和通用表空间分配空间的方式。默认情况下，当操作需要在表空间中分配额外空间时，`InnoDB`会为表空间分配页面并在这些页面上物理写入NULL。如果频繁分配新页面，这种行为会影响性能。您可以在Linux系统上禁用[`innodb_extend_and_initialize`](innodb-parameters.html#sysvar_innodb_extend_and_initialize)以避免在新分配的表空间页面上物理写入NULL。当禁用[`innodb_extend_and_initialize`](innodb-parameters.html#sysvar_innodb_extend_and_initialize)时，空间使用`posix_fallocate()`调用进行分配，该调用保留空间而不进行物理写入NULL。
- en: A `posix_fallocate()` operation is not atomic, which makes it possible for a
    failure to occur between allocating space to a tablespace file and updating the
    file metadata. Such a failure can leave newly allocated pages in an uninitialized
    state, resulting in a failure when `InnoDB` attempts to access those pages. To
    prevent this scenario, `InnoDB` writes a redo log record before allocating a new
    tablespace page. If a page allocation operation is interrupted, the operation
    is replayed from the redo log record during recovery.
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`posix_fallocate()`操作不是原子性的，这使得在为表空间文件分配空间和更新文件元数据之间发生故障的可能性。这种故障可能会导致新分配的页面处于未初始化状态，当`InnoDB`尝试访问这些页面时会失败。为了防止这种情况发生，`InnoDB`在分配新表空间页面之前写入重做日志记录。如果页面分配操作被中断，操作将在恢复期间从重做日志记录中重放。'
- en: As of MySQL 8.0.23, `InnoDB` supports encryption of doublewrite file pages belonging
    to encrypted tablespaces. The pages are encrypted using the encryption key of
    the associated tablespace. For more information, see [Section 17.13, “InnoDB Data-at-Rest
    Encryption”](innodb-data-encryption.html "17.13 InnoDB Data-at-Rest Encryption").
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.23版本，`InnoDB`支持对属于加密表空间的双写文件页进行加密。这些页面使用相关表空间的加密密钥进行加密。更多信息，请参见[第17.13节，“InnoDB数据静态加密”](innodb-data-encryption.html
    "17.13 InnoDB数据静态加密")。
- en: The [`temptable_max_mmap`](server-system-variables.html#sysvar_temptable_max_mmap)
    variable, introduced in MySQL 8.0.23, defines the maximum amount of memory the
    TempTable storage engine is permitted to allocate from memory-mapped (MMAP) files
    before it starts storing internal temporary table data on disk. A setting of 0
    disables allocation from MMAP files. For more information, see [Section 10.4.4,
    “Internal Temporary Table Use in MySQL”](internal-temporary-tables.html "10.4.4 Internal
    Temporary Table Use in MySQL").
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8.0.23版本引入的[`temptable_max_mmap`](server-system-variables.html#sysvar_temptable_max_mmap)变量定义了TempTable存储引擎允许从内存映射（MMAP）文件分配的最大内存量，然后才开始将内部临时表数据存储在磁盘上。设置为0会禁用从MMAP文件分配。更多信息，请参见[第10.4.4节，“MySQL中的内部临时表使用”](internal-temporary-tables.html
    "10.4.4 MySQL中的内部临时表使用")。
- en: The `AUTOEXTEND_SIZE` option, introduced in MySQL 8.0.23, defines the amount
    by which `InnoDB` extends the size of a tablespace when it becomes full, making
    it possible to extend tablespace size in larger increments. The `AUTOEXTEND_SIZE`
    option is supported with the [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement"), [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement"),
    [`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE TABLESPACE Statement"),
    and [`ALTER TABLESPACE`](alter-tablespace.html "15.1.10 ALTER TABLESPACE Statement")
    statements. For more information, see [Section 17.6.3.9, “Tablespace AUTOEXTEND_SIZE
    Configuration”](innodb-tablespace-autoextend-size.html "17.6.3.9 Tablespace AUTOEXTEND_SIZE
    Configuration").
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTOEXTEND_SIZE` 选项在 MySQL 8.0.23 中引入，定义了当 `InnoDB` 表空间变满时 `InnoDB` 扩展表空间的量，从而可以以更大的增量扩展表空间大小。`AUTOEXTEND_SIZE`
    选项支持 [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE 语句")、[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE 语句")、[`CREATE TABLESPACE`](create-tablespace.html "15.1.21 CREATE
    TABLESPACE 语句") 和 [`ALTER TABLESPACE`](alter-tablespace.html "15.1.10 ALTER TABLESPACE
    语句") 语句。有关更多信息，请参见 [17.6.3.9 节，“表空间 AUTOEXTEND_SIZE 配置”](innodb-tablespace-autoextend-size.html
    "17.6.3.9 表空间 AUTOEXTEND_SIZE 配置")。'
- en: An `AUTOEXTEND_SIZE` size column was added to the Information Schema [`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 The INFORMATION_SCHEMA INNODB_TABLESPACES Table") table.
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Information Schema [`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 INFORMATION_SCHEMA INNODB_TABLESPACES 表") 表中添加了一个 `AUTOEXTEND_SIZE` 大小列。
- en: The [`innodb_segment_reserve_factor`](innodb-parameters.html#sysvar_innodb_segment_reserve_factor)
    system variable, introduced in MySQL 8.0.26, permits configuring the percentage
    of tablespace file segment pages that are reserved as empty pages. For more information,
    see [Configuring the Percentage of Reserved File Segment Pages](innodb-file-space.html#innodb-config-reserved-file-segment-pages
    "Configuring the Percentage of Reserved File Segment Pages").
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_segment_reserve_factor`](innodb-parameters.html#sysvar_innodb_segment_reserve_factor)
    系统变量，在 MySQL 8.0.26 中引入，允许配置作为空白页保留的表空间文件段页面的百分比。有关更多信息，请参见 [配置保留文件段页面的百分比](innodb-file-space.html#innodb-config-reserved-file-segment-pages
    "配置保留文件段页面的百分比")。'
- en: On platforms that support `fdatasync()` system calls, the [`innodb_use_fdatasync`](innodb-parameters.html#sysvar_innodb_use_fdatasync)
    variable, introduced in MySQL 8.0.26, permits using `fdatasync()` instead of `fsync()`
    for operating system flushes. An `fdatasync()` system call does not flush changes
    to file metadata unless required for subsequent data retrieval, providing a potential
    performance benefit.
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在支持 `fdatasync()` 系统调用的平台上，[`innodb_use_fdatasync`](innodb-parameters.html#sysvar_innodb_use_fdatasync)
    变量，在 MySQL 8.0.26 中引入，允许使用 `fdatasync()` 而不是 `fsync()` 进行操作系统刷新。`fdatasync()`
    系统调用不会刷新文件元数据，除非需要进行后续数据检索，从而提供潜在的性能优势。
- en: As of MySQL 8.0.28, the [`tmp_table_size`](server-system-variables.html#sysvar_tmp_table_size)
    variable defines the maximum size of any individual in-memory internal temporary
    table created by the TempTable storage engine. An appropriate size limit prevents
    individual queries from consuming an inordinate amount global TempTable resources.
    See [Internal Temporary Table Storage Engine](internal-temporary-tables.html#internal-temporary-tables-engines
    "Internal Temporary Table Storage Engine").
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.28 版本，[`tmp_table_size`](server-system-variables.html#sysvar_tmp_table_size)
    变量定义了由 TempTable 存储引擎创建的任何单个内存内部临时表的最大大小。适当的大小限制可以防止单个查询消耗过多的全局 TempTable 资源。参见
    [内部临时表存储引擎](internal-temporary-tables.html#internal-temporary-tables-engines "内部临时表存储引擎")。
- en: From MySQL 8.0.28, the [`innodb_open_files`](innodb-parameters.html#sysvar_innodb_open_files)
    variable, which defines the number of files `InnoDB` can have open at one time,
    can be set at runtime using a `SELECT innodb_set_open_files_limit(*`N`*)` statement.
    The statement executes a stored procedure that sets the new limit.
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.28 开始，[`innodb_open_files`](innodb-parameters.html#sysvar_innodb_open_files)
    变量，定义了 `InnoDB` 可以同时打开的文件数，可以通过使用 `SELECT innodb_set_open_files_limit(*`N`*)`
    语句在运行时进行设置。该语句执行一个存储过程来设置新的限制。
- en: To prevent non-LRU manged files from consuming the entire [`innodb_open_files`](innodb-parameters.html#sysvar_innodb_open_files)
    limit, non-LRU managed files are limited to 90 percent of the [`innodb_open_files`](innodb-parameters.html#sysvar_innodb_open_files)
    limit, which reserves 10 percent of the [`innodb_open_files`](innodb-parameters.html#sysvar_innodb_open_files)
    limit for LRU managed files.
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为防止非LRU管理的文件占用整个[`innodb_open_files`](innodb-parameters.html#sysvar_innodb_open_files)限制，非LRU管理的文件限制为[`innodb_open_files`](innodb-parameters.html#sysvar_innodb_open_files)限制的90％，这为LRU管理的文件保留了[`innodb_open_files`](innodb-parameters.html#sysvar_innodb_open_files)限制的10％。
- en: The [`innodb_open_files`](innodb-parameters.html#sysvar_innodb_open_files) limit
    includes temporary tablespace files, which were not counted toward the limit previously.
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`innodb_open_files`](innodb-parameters.html#sysvar_innodb_open_files)限制包括临时表空间文件，在此之前不计入限制。'
- en: From MySQL 8.0.28, `InnoDB` supports [`ALTER TABLE ... RENAME COLUMN`](alter-table.html
    "15.1.9 ALTER TABLE Statement") operations using `ALGORITHM=INSTANT`.
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.28开始，`InnoDB`支持使用`ALGORITHM=INSTANT`进行[`ALTER TABLE ... RENAME COLUMN`](alter-table.html
    "15.1.9 ALTER TABLE Statement")操作。
- en: For more information about this and other DDL operations that support `ALGORITHM=INSTANT`,
    see [Section 17.12.1, “Online DDL Operations”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations").
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关支持`ALGORITHM=INSTANT`的此类DDL操作和其他DDL操作的更多信息，请参见[第17.12.1节，“在线DDL操作”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations")。
- en: From MySQL 8.0.29, `InnoDB` supports [`ALTER TABLE ... DROP COLUMN`](alter-table.html
    "15.1.9 ALTER TABLE Statement") operations using `ALGORITHM=INSTANT`.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.29开始，`InnoDB`支持使用`ALGORITHM=INSTANT`进行[`ALTER TABLE ... DROP COLUMN`](alter-table.html
    "15.1.9 ALTER TABLE Statement")操作。
- en: Prior to MySQL 8.0.29, an instantly added column could only be added as the
    last column of the table. From MySQL 8.0.29, an instantly added column can be
    added to any position in the table.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.29之前，立即添加的列只能添加为表的最后一列。从MySQL 8.0.29开始，立即添加的列可以添加到表中的任何位置。
- en: Instantly added or dropped columns create a new version of the affected row.
    Up to 64 row versions are permitted. A new `TOTAL_ROW_VERSIONS` column was added
    to the Information Schema [`INNODB_TABLES`](information-schema-innodb-tables-table.html
    "28.4.23 The INFORMATION_SCHEMA INNODB_TABLES Table") table to track the number
    of row versions.
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 立即添加或删除的列会创建受影响行的新版本。最多允许64个行版本。Information Schema [`INNODB_TABLES`](information-schema-innodb-tables-table.html
    "28.4.23 The INFORMATION_SCHEMA INNODB_TABLES Table")表中添加了一个新的`TOTAL_ROW_VERSIONS`列，用于跟踪行版本的数量。
- en: For more information about DDL operations that support `ALGORITHM=INSTANT`,
    see [Section 17.12.1, “Online DDL Operations”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations").
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关支持`ALGORITHM=INSTANT`的DDL操作的更多信息，请参见[第17.12.1节，“在线DDL操作”](innodb-online-ddl-operations.html
    "17.12.1 Online DDL Operations")。
- en: From MySQL 8.0.30, the [`innodb_doublewrite`](innodb-parameters.html#sysvar_innodb_doublewrite)
    system variable supports `DETECT_ONLY` and `DETECT_AND_RECOVER` settings. With
    the `DETECT_ONLY` setting, database page content is not written to the doublewrite
    buffer, and recovery does not use the doublewrite buffer to fix incomplete page
    writes. This lightweight setting is intended for detecting incomplete page writes
    only. The `DETECT_AND_RECOVER` setting is equivalent to the existing `ON` setting.
    For more information, see [Section 17.6.4, “Doublewrite Buffer”](innodb-doublewrite-buffer.html
    "17.6.4 Doublewrite Buffer").
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.30开始，[`innodb_doublewrite`](innodb-parameters.html#sysvar_innodb_doublewrite)系统变量支持`DETECT_ONLY`和`DETECT_AND_RECOVER`设置。使用`DETECT_ONLY`设置时，数据库页内容不会写入双写缓冲区，并且恢复不使用双写缓冲区来修复不完整的页写入。此轻量级设置仅用于检测不完整的页写入。`DETECT_AND_RECOVER`设置等同于现有的`ON`设置。有关更多信息，请参见[第17.6.4节，“双写缓冲区”](innodb-doublewrite-buffer.html
    "17.6.4 Doublewrite Buffer")。
- en: From MySQL 8.0.30, `InnoDB` supports dynamic configuration of redo log capacity.
    The [`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)
    system variable can be set at runtime to increase or decrease the total amount
    of disk space occupied by redo log files.
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.30开始，`InnoDB`支持重做日志容量的动态配置。[`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)系统变量可以在运行时设置，以增加或减少重做日志文件占用的总磁盘空间量。
- en: With this change, the number of redo log files and their default location has
    also changed. From MySQL 8.0.30, `InnoDB` maintains 32 redo log files in the `#innodb_redo`
    directory in the data directory. Previously, `InnoDB` created two redo log files
    in the data directory by default, and the number and size of redo log files were
    controlled by the [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    and [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    variables. These two variables are now deprecated.
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随着这一变化，重做日志文件的数量及其默认位置也发生了变化。从MySQL 8.0.30开始，`InnoDB`在数据目录中的`#innodb_redo`目录中维护32个重做日志文件。以前，`InnoDB`默认在数据目录中创建两个重做日志文件，并且重做日志文件的数量和大小由[`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)和[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)变量控制。这两个变量现在已被弃用。
- en: When the `innodb_redo_log_capacity` setting is defined, [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    and [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    settings are ignored; otherwise, those settings are used to compute the `innodb_redo_log_capacity`
    setting ([`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    * [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    = `innodb_redo_log_capacity`). If none of those variables are set, redo log capacity
    is set to the `innodb_redo_log_capacity` default value, which is 104857600 bytes
    (100MB).
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当定义了`innodb_redo_log_capacity`设置时，[`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)和[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)设置将被忽略；否则，这些设置将用于计算`innodb_redo_log_capacity`设置（[`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    * [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    = `innodb_redo_log_capacity`）。如果这些变量都没有设置，则重做日志容量将设置为`innodb_redo_log_capacity`的默认值，即104857600字节（100MB）。
- en: Several status variables are provided for monitoring the redo log and redo log
    resizing operations.
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供了几个状态变量用于监视重做日志和重做日志调整大小操作。
- en: For more information, see [Section 17.6.5, “Redo Log”](innodb-redo-log.html
    "17.6.5 Redo Log").
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[第17.6.5节，“重做日志”](innodb-redo-log.html "17.6.5 重做日志")。
- en: With MySQL 8.0.31, there are two new status variables for monitoring online
    buffer pool resizing operations. The [`Innodb_buffer_pool_resize_status_code`](server-status-variables.html#statvar_Innodb_buffer_pool_resize_status_code)
    status variable reports a status code indicating the stage of an online buffer
    pool resizing operation. The [`Innodb_buffer_pool_resize_status_progress`](server-status-variables.html#statvar_Innodb_buffer_pool_resize_status_progress)
    status variable reports a percentage value indicating the progress of each stage.
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.31中，为监视在线缓冲池调整大小操作新增了两个新的状态变量。[`Innodb_buffer_pool_resize_status_code`](server-status-variables.html#statvar_Innodb_buffer_pool_resize_status_code)状态变量报告一个状态代码，指示在线缓冲池调整大小操作的阶段。[`Innodb_buffer_pool_resize_status_progress`](server-status-variables.html#statvar_Innodb_buffer_pool_resize_status_progress)状态变量报告一个百分比值，指示每个阶段的进度。
- en: For more information, see [Section 17.8.3.1, “Configuring InnoDB Buffer Pool
    Size”](innodb-buffer-pool-resize.html "17.8.3.1 Configuring InnoDB Buffer Pool
    Size").
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[第17.8.3.1节，“配置InnoDB缓冲池大小”](innodb-buffer-pool-resize.html "17.8.3.1
    配置InnoDB缓冲池大小")。
- en: '**Character set support. ** The default character set has changed from `latin1`
    to `utf8mb4`. The `utf8mb4` character set has several new collations, including
    `utf8mb4_ja_0900_as_cs`, the first Japanese language-specific collation available
    for Unicode in MySQL. For more information, see [Section 12.10.1, “Unicode Character
    Sets”](charset-unicode-sets.html "12.10.1 Unicode Character Sets").'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符集支持。** 默认字符集已从`latin1`更改为`utf8mb4`。`utf8mb4`字符集有几个新的排序规则，包括`utf8mb4_ja_0900_as_cs`，这是MySQL中第一个针对Unicode的日语特定排序规则。有关更多信息，请参见[第12.10.1节，“Unicode字符集”](charset-unicode-sets.html
    "12.10.1 Unicode字符集")。'
- en: '**JSON enhancements. ** The following enhancements or additions were made to
    MySQL''s JSON functionality:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON增强。** MySQL的JSON功能进行了以下增强或添加：'
- en: Added the [`->>`](json-search-functions.html#operator_json-inline-path) (inline
    path) operator, which is equivalent to calling [`JSON_UNQUOTE()`](json-modification-functions.html#function_json-unquote)
    on the result of [`JSON_EXTRACT()`](json-search-functions.html#function_json-extract).
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了[`->>`](json-search-functions.html#operator_json-inline-path)（内联路径）运算符，等效于对[`JSON_EXTRACT()`](json-search-functions.html#function_json-extract)的结果调用[`JSON_UNQUOTE()`](json-modification-functions.html#function_json-unquote)。
- en: This is a refinement of the column path operator [`->`](json-search-functions.html#operator_json-column-path)
    introduced in MySQL 5.7; `col->>"$.path"` is equivalent to `JSON_UNQUOTE(col->"$.path")`.
    The inline path operator can be used wherever you can use `JSON_UNQUOTE(JSON_EXTRACT())`,
    such [`SELECT`](select.html "15.2.13 SELECT Statement") column lists, `WHERE`
    and `HAVING` clauses, and `ORDER BY` and `GROUP BY` clauses. For more information,
    see the description of the operator, as well as [JSON Path Syntax](json.html#json-path-syntax
    "JSON Path Syntax").
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 MySQL 5.7 中引入的列路径运算符 [`->`](json-search-functions.html#operator_json-column-path)
    的改进；`col->>"$.path"` 等同于 `JSON_UNQUOTE(col->"$.path")`。内联路径运算符可以在任何可以使用 `JSON_UNQUOTE(JSON_EXTRACT())`
    的地方使用，例如 [`SELECT`](select.html "15.2.13 SELECT 语句") 列列表、`WHERE` 和 `HAVING` 子句，以及
    `ORDER BY` 和 `GROUP BY` 子句。有关更多信息，请参阅该运算符的描述，以及[JSON 路径语法](json.html#json-path-syntax
    "JSON Path Syntax")。
- en: Added two JSON aggregation functions [`JSON_ARRAYAGG()`](aggregate-functions.html#function_json-arrayagg)
    and [`JSON_OBJECTAGG()`](aggregate-functions.html#function_json-objectagg). `JSON_ARRAYAGG()`
    takes a column or expression as its argument, and aggregates the result as a single
    [`JSON`](json.html "13.5 The JSON Data Type") array. The expression can evaluate
    to any MySQL data type; this does not have to be a `JSON` value. `JSON_OBJECTAGG()`
    takes two columns or expressions which it interprets as a key and a value; it
    returns the result as a single `JSON` object. For more information and examples,
    see [Section 14.19, “Aggregate Functions”](aggregate-functions-and-modifiers.html
    "14.19 Aggregate Functions").
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了两个 JSON 聚合函数 [`JSON_ARRAYAGG()`](aggregate-functions.html#function_json-arrayagg)
    和 [`JSON_OBJECTAGG()`](aggregate-functions.html#function_json-objectagg)。`JSON_ARRAYAGG()`
    以列或表达式作为其参数，并将结果聚合为单个 [`JSON`](json.html "13.5 JSON 数据类型") 数组。表达式可以评估为任何 MySQL
    数据类型；这不必是一个 `JSON` 值。`JSON_OBJECTAGG()` 接受两个列或表达式，它将其解释为键和值；它将结果作为单个 `JSON` 对象返回。有关更多信息和示例，请参阅[第
    14.19 节，“聚合函数”](aggregate-functions-and-modifiers.html "14.19 Aggregate Functions")。
- en: Added the JSON utility function [`JSON_PRETTY()`](json-utility-functions.html#function_json-pretty),
    which outputs an existing [`JSON`](json.html "13.5 The JSON Data Type") value
    in an easy-to-read format; each JSON object member or array value is printed on
    a separate line, and a child object or array is intended 2 spaces with respect
    to its parent.
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 JSON 实用函数 [`JSON_PRETTY()`](json-utility-functions.html#function_json-pretty)，它以易于阅读的格式输出现有的
    [`JSON`](json.html "13.5 JSON 数据类型") 值；每个 JSON 对象成员或数组值都打印在单独的行上，子对象或数组相对于其父对象缩进
    2 个空格。
- en: This function also works with a string that can be parsed as a JSON value.
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数还可以处理可以解析为 JSON 值的字符串。
- en: For more detailed information and examples, see [Section 14.17.8, “JSON Utility
    Functions”](json-utility-functions.html "14.17.8 JSON Utility Functions").
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更详细信息和示例，请参阅[第 14.17.8 节，“JSON 实用函数”](json-utility-functions.html "14.17.8
    JSON Utility Functions")。
- en: 'When sorting [`JSON`](json.html "13.5 The JSON Data Type") values in a query
    using `ORDER BY`, each value is now represented by a variable-length part of the
    sort key, rather than a part of a fixed 1K in size. In many cases this can reduce
    excessive usage. For example, a scalar `INT` or even `BIGINT` value actually requires
    very few bytes, so that the remainder of this space (up to 90% or more) was taken
    up by padding. This change has the following benefits for performance:'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在查询中使用 `ORDER BY` 对 [`JSON`](json.html "13.5 JSON 数据类型") 值进行排序时，每个值现在由排序键的可变长度部分表示，而不是固定大小的
    1K 部分。在许多情况下，这可以减少过度使用。例如，标量 `INT` 或甚至 `BIGINT` 值实际上只需要很少的字节，因此剩余空间（高达 90% 或更多）被填充。这种变化对性能有以下好处：
- en: Sort buffer space is now used more effectively, so that filesorts need not flush
    to disk as early or often as with fixed-length sort keys. This means that more
    data can be sorted in memory, avoiding unnecessary disk access.
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在更有效地使用排序缓冲区空间，因此文件排序不需要像固定长度排序键那样早或频繁地刷新到磁盘。这意味着更多的数据可以在内存中排序，避免不必要的磁盘访问。
- en: Shorter keys can be compared more quickly than longer ones, providing a noticeable
    improvement in performance. This is true for sorts performed entirely in memory
    as well as for sorts that require writing to and reading from disk.
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较短的键比较起来比较长的键更快，这在性能上有明显的改善。这对于完全在内存中执行的排序以及需要写入和从磁盘读取的排序都是适用的。
- en: Added support in MySQL 8.0.2 for partial, in-place updates of `JSON` column
    values, which is more efficient than completely removing an existing JSON value
    and writing a new one in its place, as was done previously when updating any `JSON`
    column. For this optimization to be applied, the update must be applied using
    [`JSON_SET()`](json-modification-functions.html#function_json-set), [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace),
    or [`JSON_REMOVE()`](json-modification-functions.html#function_json-remove). New
    elements cannot be added to the JSON document being updated; values within the
    document cannot take more space than they did before the update. See [Partial
    Updates of JSON Values](json.html#json-partial-updates "Partial Updates of JSON
    Values"), for a detailed discussion of the requirements.
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.2中添加了对`JSON`列值的部分、原地更新的支持，这比完全删除现有JSON值并在其位置写入新值更有效，以前更新任何`JSON`列时都是这样做的。要应用此优化，更新必须使用[`JSON_SET()`](json-modification-functions.html#function_json-set)、[`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)或[`JSON_REMOVE()`](json-modification-functions.html#function_json-remove)。无法向正在更新的JSON文档添加新元素；文档内的值不能比更新前占用更多空间。有关要求的详细讨论，请参阅[JSON值的部分更新](json.html#json-partial-updates
    "JSON值的部分更新")。
- en: Partial updates of JSON documents can be written to the binary log, taking up
    less space than logging complete JSON documents. Partial updates are always logged
    as such when statement-based replication is in use. For this to work with row-based
    replication, you must first set [`binlog_row_value_options=PARTIAL_JSON`](replication-options-binary-log.html#sysvar_binlog_row_value_options);
    see this variable's description for more information.
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: JSON文档的部分更新可以写入二进制日志，占用的空间比记录完整的JSON文档少。当使用基于语句的复制时，部分更新总是被记录为这样。要使其与基于行的复制一起工作，必须首先设置[`binlog_row_value_options=PARTIAL_JSON`](replication-options-binary-log.html#sysvar_binlog_row_value_options)；有关更多信息，请参阅此变量的描述。
- en: Added the JSON utility functions [`JSON_STORAGE_SIZE()`](json-utility-functions.html#function_json-storage-size)
    and [`JSON_STORAGE_FREE()`](json-utility-functions.html#function_json-storage-free).
    `JSON_STORAGE_SIZE()` returns the storage space in bytes used for the binary representation
    of a JSON document prior to any partial update (see previous item). `JSON_STORAGE_FREE()`
    shows the amount of space remaining in a table column of type [`JSON`](json.html
    "13.5 The JSON Data Type") after it has been partially updated using `JSON_SET()`
    or `JSON_REPLACE()`; this is greater than zero if the binary representation of
    the new value is less than that of the previous value.
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了JSON实用函数[`JSON_STORAGE_SIZE()`](json-utility-functions.html#function_json-storage-size)和[`JSON_STORAGE_FREE()`](json-utility-functions.html#function_json-storage-free)。`JSON_STORAGE_SIZE()`返回在进行任何部分更新之前用于JSON文档的二进制表示的存储空间（请参阅上一条）。`JSON_STORAGE_FREE()`显示了在使用`JSON_SET()`或`JSON_REPLACE()`部分更新表列类型为[`JSON`](json.html
    "13.5 JSON数据类型")后剩余的空间量；如果新值的二进制表示比先前值的小，则此值大于零。
- en: Each of these functions also accepts a valid string representation of a JSON
    document. For such a value, `JSON_STORAGE_SIZE()` returns the space used by its
    binary representation following its conversion to a JSON document. For a variable
    containing the string representation of a JSON document, `JSON_STORAGE_FREE()`
    returns zero. Either function produces an error if its (non-null) argument cannot
    be parsed as a valid JSON document, and `NULL` if the argument is `NULL`.
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些函数还接受JSON文档的有效字符串表示。对于这样的值，`JSON_STORAGE_SIZE()`返回其转换为JSON文档后的二进制表示所使用的空间。对于包含JSON文档字符串表示的变量，`JSON_STORAGE_FREE()`返回零。如果其（非空）参数无法解析为有效的JSON文档，则任一函数会产生错误，并且如果参数为`NULL`，则返回`NULL`。
- en: For more information and examples, see [Section 14.17.8, “JSON Utility Functions”](json-utility-functions.html
    "14.17.8 JSON Utility Functions").
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参阅[第14.17.8节，“JSON实用函数”](json-utility-functions.html "14.17.8 JSON实用函数")。
- en: '`JSON_STORAGE_SIZE()` and `JSON_STORAGE_FREE()` were implemented in MySQL 8.0.2.'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`JSON_STORAGE_SIZE()`和`JSON_STORAGE_FREE()`在MySQL 8.0.2中实现。'
- en: Added support in MySQL 8.0.2 for ranges such as `$[1 to 5]` in XPath expressions.
    Also added support in this version for the `last` keyword and relative addressing,
    such that `$[last]` always selects the last (highest-numbered) element in the
    array and `$[last-1]` the next to last element. `last` and expressions using it
    can also be included in range definitions. For example, `$[last-2 to last-1]`
    returns the last two elements but one from an array. See [Searching and Modifying
    JSON Values](json.html#json-paths "Searching and Modifying JSON Values"), for
    additional information and examples.
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.2中添加了对XPath表达式中范围（如`$[1 to 5]`）的支持。在此版本中还添加了对`last`关键字和相对寻址的支持，使得`$[last]`始终选择数组中的最后一个（编号最高）元素，而`$[last-1]`选择倒数第二个元素。`last`和使用它的表达式也可以包含在范围定义中。例如，`$[last-2
    to last-1]`返回数组中倒数第二个元素。有关更多信息和示例，请参见[搜索和修改JSON值](json.html#json-paths "搜索和修改JSON值")。
- en: 'Added a JSON merge function intended to conform to [RFC 7396](https://tools.ietf.org/html/rfc7396).
    [`JSON_MERGE_PATCH()`](json-modification-functions.html#function_json-merge-patch),
    when used on 2 JSON objects, merges them into a single JSON object that has as
    members a union of the following sets:'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个旨在符合[RFC 7396](https://tools.ietf.org/html/rfc7396)的JSON合并函数。当在2个JSON对象上使用[`JSON_MERGE_PATCH()`](json-modification-functions.html#function_json-merge-patch)时，它将它们合并为一个具有以下集合并集的单个JSON对象作为成员：
- en: Each member of the first object for which there is no member with the same key
    in the second object.
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个对象的每个成员，在第二个对象中没有具有相同键的成员。
- en: Each member of the second object for which there is no member having the same
    key in the first object, and whose value is not the JSON `null` literal.
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个对象的每个成员，在第一个对象中没有具有相同键的成员，并且其值不是JSON `null`文字。
- en: Each member having a key that exists in both objects, and whose value in the
    second object is not the JSON `null` literal.
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个具有在两个对象中都存在的键的成员，并且第二个对象中的值不是JSON `null`文字。
- en: As part of this work, the [`JSON_MERGE()`](json-modification-functions.html#function_json-merge)
    function has been renamed [`JSON_MERGE_PRESERVE()`](json-modification-functions.html#function_json-merge-preserve).
    `JSON_MERGE()` continues to be recognized as an alias for `JSON_MERGE_PRESERVE()`
    in MySQL 8.0, but is now deprecated and is subject to removal in a future version
    of MySQL.
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这项工作的一部分，[`JSON_MERGE()`](json-modification-functions.html#function_json-merge)函数已重命名为[`JSON_MERGE_PRESERVE()`](json-modification-functions.html#function_json-merge-preserve)。在MySQL
    8.0中，`JSON_MERGE()`仍然被识别为`JSON_MERGE_PRESERVE()`的别名，但现已被弃用，并可能在将来的MySQL版本中被移除。
- en: For more information and examples, see [Section 14.17.4, “Functions That Modify
    JSON Values”](json-modification-functions.html "14.17.4 Functions That Modify
    JSON Values").
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参见[第14.17.4节，“修改JSON值的函数”](json-modification-functions.html "14.17.4 修改JSON值的函数")。
- en: 'Implemented “last duplicate key wins” normalization of duplicate keys, consistent
    with [RFC 7159](https://tools.ietf.org/html/rfc7159) and most JavaScript parsers.
    An example of this behavior is shown here, where only the rightmost member having
    the key `x` is preserved:'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了“最后重复键胜出”的重复键规范化，与[RFC 7159](https://tools.ietf.org/html/rfc7159)和大多数JavaScript解析器保持一致。这种行为的示例如下，只保留具有键`x`的最右边成员：
- en: '[PRE3]'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Values inserted into MySQL [`JSON`](json.html "13.5 The JSON Data Type") columns
    are also normalized in this way, as shown in this example:'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 插入到MySQL [`JSON`](json.html "13.5 JSON数据类型")列中的值也以这种方式规范化，如下例所示：
- en: '[PRE4]'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is an incompatible change from previous versions of MySQL, where a “first
    duplicate key wins” algorithm was used in such cases.
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是与MySQL先前版本不兼容的更改，在这种情况下使用了“第一个重复键胜出”的算法。
- en: See [Normalization, Merging, and Autowrapping of JSON Values](json.html#json-normalization
    "Normalization, Merging, and Autowrapping of JSON Values"), for more information
    and examples.
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参见[JSON值的规范化、合并和自动包装](json.html#json-normalization "JSON值的规范化、合并和自动包装")。
- en: Added the [`JSON_TABLE()`](json-table-functions.html#function_json-table) function
    in MySQL 8.0.4\. This function accepts JSON data and returns it as a relational
    table having the specified columns.
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.4中添加了[`JSON_TABLE()`](json-table-functions.html#function_json-table)函数。此函数接受JSON数据并将其作为具有指定列的关系表返回。
- en: 'This function has the syntax `JSON_TABLE(*`expr`*, *`path`* COLUMNS *`column_list`*)
    [AS] *`alias`*)`, where *`expr`* is an expression that returns JSON data, *`path`*
    is a JSON path applied to the source, and *`column_list`* is a list of column
    definitions. An example is shown here:'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数的语法为`JSON_TABLE(*`expr`*, *`path`* COLUMNS *`column_list`*) [AS] *`alias`*)`，其中*`expr`*是返回JSON数据的表达式，*`path`*是应用于源的JSON路径，*`column_list`*是列定义的列表。这里有一个示例：
- en: '[PRE5]'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The JSON source expression can be any expression that yields a valid JSON document,
    including a JSON literal, a table column, or a function call that returns JSON
    such as [`JSON_EXTRACT(t1, data, '$.post.comments')`](json-search-functions.html#function_json-extract).
    For more information, see [Section 14.17.6, “JSON Table Functions”](json-table-functions.html
    "14.17.6 JSON Table Functions").
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: JSON源表达式可以是产生有效JSON文档的任何表达式，包括JSON文字、表列或返回JSON的函数调用，例如[`JSON_EXTRACT(t1, data,
    '$.post.comments')`](json-search-functions.html#function_json-extract)。有关更多信息，请参见[第14.17.6节，“JSON表函数”](json-table-functions.html
    "14.17.6 JSON表函数")。
- en: '**Data type support. ** MySQL now supports use of expressions as default values
    in data type specifications. This includes the use of expressions as default values
    for the [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types"), `GEOMETRY`, and [`JSON`](json.html "13.5 The
    JSON Data Type") data types, which previously could not be assigned default values
    at all. For details, see [Section 13.6, “Data Type Default Values”](data-type-defaults.html
    "13.6 Data Type Default Values").'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据类型支持。** MySQL现在支持在数据类型规范中将表达式用作默认值。这包括以前无法分配默认值的[`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")、[`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")、`GEOMETRY`和[`JSON`](json.html "13.5 JSON数据类型")数据类型的表达式作为默认值。有关详细信息，请参见[第13.6节，“数据类型默认值”](data-type-defaults.html
    "13.6 数据类型默认值")。'
- en: '**Optimizer. ** These optimizer enhancements were added:'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化器。** 这些优化器增强功能已添加：'
- en: MySQL now supports invisible indexes. An invisible index is not used by the
    optimizer at all, but is otherwise maintained normally. Indexes are visible by
    default. Invisible indexes make it possible to test the effect of removing an
    index on query performance, without making a destructive change that must be undone
    should the index turn out to be required. See [Section 10.3.12, “Invisible Indexes”](invisible-indexes.html
    "10.3.12 Invisible Indexes").
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL现在支持不可见索引。不可见索引根本不被优化器使用，但在其他方面正常维护。索引默认是可见的。不可见索引使得可以测试删除索引对查询性能的影响，而不必进行破坏性更改，如果索引被证明是必需的，则必须撤消更改。请参见[第10.3.12节，“不可见索引”](invisible-indexes.html
    "10.3.12 不可见索引")。
- en: 'MySQL now supports descending indexes: `DESC` in an index definition is no
    longer ignored but causes storage of key values in descending order. Previously,
    indexes could be scanned in reverse order but at a performance penalty. A descending
    index can be scanned in forward order, which is more efficient. Descending indexes
    also make it possible for the optimizer to use multiple-column indexes when the
    most efficient scan order mixes ascending order for some columns and descending
    order for others. See [Section 10.3.13, “Descending Indexes”](descending-indexes.html
    "10.3.13 Descending Indexes").'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL现在支持降序索引：在索引定义中使用`DESC`不再被忽略，而是导致按降序顺序存储键值。以前，索引可以以相反顺序扫描，但会导致性能损失。降序索引可以按正向顺序扫描，这更有效率。降序索引还使优化器能够在最有效的扫描顺序中混合一些列按升序顺序和其他列按降序顺序时使用多列索引。请参见[第10.3.13节，“降序索引”](descending-indexes.html
    "10.3.13 降序索引")。
- en: MySQL now supports creation of functional index key parts that index expression
    values rather than column values. Functional key parts enable indexing of values
    that cannot be indexed otherwise, such as [`JSON`](json.html "13.5 The JSON Data
    Type") values. For details, see [Section 15.1.15, “CREATE INDEX Statement”](create-index.html
    "15.1.15 CREATE INDEX Statement").
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL现在支持创建功能性索引键部分，用于索引表达式值而不是列值。功能性键部分使得可以索引无法以其他方式索引的值，例如[`JSON`](json.html
    "13.5 JSON数据类型")值。有关详细信息，请参见[第15.1.15节，“CREATE INDEX语句”](create-index.html "15.1.15 CREATE
    INDEX语句")。
- en: 'In MySQL 8.0.14 and later, trivial `WHERE` conditions arising from constant
    literal expressions are removed during preparation, rather than later on during
    optimization. Removal of the condition earlier in the process makes it possible
    to simplify joins for queries with outer joins having trivial conditions, such
    as this one:'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.14及更高版本中，由于常量文字表达式导致的琐碎`WHERE`条件在准备阶段被移除，而不是在优化过程中。在处理过程中较早地移除条件使得可以简化具有琐碎条件的外连接查询的连接，例如这样一个：
- en: '[PRE6]'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The optimizer now sees during preparation that 0 = 1 is always false, making
    `OR 0 = 1` redundant, and removes it, leaving this:'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化器现在在准备阶段发现`0 = 1`始终为假，使得`OR 0 = 1`变得多余，并将其移除，留下如下内容：
- en: '[PRE7]'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now the optimizer can rewrite the query as an inner join, like this:'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在优化器可以将查询重写为内连接，如下所示：
- en: '[PRE8]'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For more information, see [Section 10.2.1.9, “Outer Join Optimization”](outer-join-optimization.html
    "10.2.1.9 Outer Join Optimization").
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参阅[Section 10.2.1.9, “Outer Join Optimization”](outer-join-optimization.html
    "10.2.1.9 Outer Join Optimization")。
- en: In MySQL 8.0.16 and later, MySQL can use constant folding at optimization time
    to handle comparisons between a column and a constant value where the constant
    is out of range or on a range boundary with respect to the type of the column,
    rather than doing so for each row at execution time. For example, given a table
    `t` with a `TINYINT UNSIGNED` column `c`, the optimizer can rewrite a condition
    such as `WHERE c < 256` to `WHERE 1` (and optimize the condition away altogether),
    or `WHERE c >= 255` to `WHERE c = 255`.
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.16及更高版本中，MySQL可以在优化时使用常量折叠来处理列与常量值之间的比较，其中常量超出范围或在列类型的范围边界上，而不是在执行时为每行执行此操作。例如，给定一个具有`TINYINT
    UNSIGNED`列`c`的表`t`，优化器可以将诸如`WHERE c < 256`的条件重写为`WHERE 1`（并完全优化掉条件），或将`WHERE c
    >= 255`重写为`WHERE c = 255`。
- en: See [Section 10.2.1.14, “Constant-Folding Optimization”](constant-folding-optimization.html
    "10.2.1.14 Constant-Folding Optimization"), for more information.
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参阅[Section 10.2.1.14, “Constant-Folding Optimization”](constant-folding-optimization.html
    "10.2.1.14 Constant-Folding Optimization")。
- en: Beginning with MySQL 8.0.16, the semijoin optimizations used with `IN` subqueries
    can now be applied to `EXISTS` subqueries as well. In addition, the optimizer
    now decorrelates trivially-correlated equality predicates in the `WHERE` condition
    attached to the subquery, so that they can be treated similarly to expressions
    in `IN` subqueries; this applies to both `EXISTS` and `IN` subqueries.
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.16开始，与`IN`子查询一起使用的半连接优化现在也可以应用于`EXISTS`子查询。此外，优化器现在将附加到子查询的`WHERE`条件中的琐碎相关等式谓词解耦，以便它们可以类似于`IN`子查询中的表达式处理；这适用于`EXISTS`和`IN`子查询。
- en: For more information, see [Section 10.2.2.1, “Optimizing IN and EXISTS Subquery
    Predicates with Semijoin Transformations”](semijoins.html "10.2.2.1 Optimizing
    IN and EXISTS Subquery Predicates with Semijoin Transformations").
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参阅[Section 10.2.2.1, “Optimizing IN and EXISTS Subquery Predicates with
    Semijoin Transformations”](semijoins.html "10.2.2.1 Optimizing IN and EXISTS Subquery
    Predicates with Semijoin Transformations")。
- en: As of MySQL 8.0.17, the server rewrites any incomplete SQL predicates (that
    is, predicates having the form `WHERE *`value`*`, in which *`value`* is a column
    name or constant expression and no comparison operator is used) internally as
    `WHERE *`value`* <> 0` during the contextualization phase, so that the query resolver,
    query optimizer, and query executor need work only with complete predicates.
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.17，服务器在上下文化阶段内部将任何不完整的SQL谓词（即形式为`WHERE *`value`*`的谓词，其中*`value`*是列名或常量表达式且未使用比较运算符）重写为`WHERE
    *`value`* <> 0`，以便查询解析器、查询优化器和查询执行器只需处理完整的谓词。
- en: One visible effect of this change is that, for Boolean values, [`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement") output now shows `true` and `false`, rather than `1`
    and `0`.
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一变化的一个显著效果是，对于布尔值，[`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement")输出现在显示`true`和`false`，而不是`1`和`0`。
- en: 'Another effect of this change is that evaluation of a JSON value in an SQL
    boolean context performs an implicit comparison against JSON integer 0\. Consider
    the table created and populated as shown here:'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此变化的另一个效果是，在SQL布尔上下文中对JSON值的评估执行隐式比较与JSON整数0。考虑如下所示创建和填充的表：
- en: '[PRE9]'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Previously, the server attempted to convert an extracted `true` or `false`
    value to an SQL boolean when comparing it in an SQL boolean context, as shown
    by the following query using `IS TRUE`:'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以前，服务器在将提取的`true`或`false`值在SQL布尔上下文中进行比较时，尝试将其转换为SQL布尔值，如下面使用`IS TRUE`的查询所示：
- en: '[PRE10]'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In MySQL 8.0.17 and later, the implicit comparison of the extracted value with
    JSON integer 0 leads to a different result:'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.17及更高版本中，提取值与JSON整数0的隐式比较会导致不同的结果：
- en: '[PRE11]'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Beginning with MySQL 8.0.21, you can use [`JSON_VALUE()`](json-search-functions.html#function_json-value)
    on the extracted value to perform type conversion prior to performing the test,
    as shown here:'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.21开始，您可以在执行测试之前对提取的值使用[`JSON_VALUE()`](json-search-functions.html#function_json-value)进行类型转换，如下所示：
- en: '[PRE12]'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Also beginning with MySQL 8.0.21, the server provides the warning Evaluating
    a JSON value in SQL boolean context does an implicit comparison against JSON integer
    0; if this is not what you want, consider converting JSON to an SQL numeric type
    with JSON_VALUE RETURNING when comparing extracted values in an SQL boolean context
    in this manner.
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样从MySQL 8.0.21开始，服务器提供警告：在SQL布尔上下文中评估JSON值会隐式与JSON整数0进行比较；如果这不是您想要的，请考虑在这种方式中比较提取值时，使用JSON_VALUE
    RETURNING将JSON转换为SQL数值类型。
- en: In MySQL 8.0.17 and later a `WHERE` condition having `NOT IN (*`subquery`*)`
    or `NOT EXISTS (*`subquery`*)` is transformed internally into an antijoin. (An
    antijoin returns all rows from the table for which there is no row in the table
    to which it is joined matching the join condition.) This removes the subquery
    which can result in faster query execution since the subquery's tables are now
    handled on the top level.
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.17及更高版本中，具有`NOT IN (*`子查询`*)`或`NOT EXISTS (*`子查询`*)`的`WHERE`条件在内部转换为反连接。
    （反连接返回表中没有与连接条件匹配的行的表中的所有行。）这会删除子查询，可以加快查询执行速度，因为现在子查询的表在顶层处理。
- en: This is similar to, and reuses, the existing `IS NULL` (`Not exists`) optimization
    for outer joins; see [EXPLAIN Extra Information](explain-output.html#explain-extra-information
    "EXPLAIN Extra Information").
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这类似于并重用了现有的外连接的`IS NULL`（`Not exists`）优化；请参阅[EXPLAIN Extra Information](explain-output.html#explain-extra-information
    "EXPLAIN Extra Information")。
- en: 'Beginning with MySQL 8.0.21, a single-table [`UPDATE`](update.html "15.2.17 UPDATE
    Statement") or [`DELETE`](delete.html "15.2.2 DELETE Statement") statement can
    now in many cases make use of a semijoin transformation or subquery materialization.
    This applies to statements of the forms shown here:'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.21开始，单表[`UPDATE`](update.html "15.2.17 UPDATE Statement")或[`DELETE`](delete.html
    "15.2.2 DELETE Statement")语句现在在许多情况下可以使用半连接转换或子查询材料化。这适用于以下形式的语句：
- en: '`UPDATE t1 SET t1.a=*`value`* WHERE t1.a IN (SELECT t2.a FROM t2)`'
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UPDATE t1 SET t1.a=*`value`* WHERE t1.a IN (SELECT t2.a FROM t2)`'
- en: '`DELETE FROM t1 WHERE t1.a IN (SELECT t2.a FROM t2)`'
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE FROM t1 WHERE t1.a IN (SELECT t2.a FROM t2)`'
- en: 'This can be done for a single-table `UPDATE` or `DELETE` meeting the following
    conditions:'
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这可以用于满足以下条件的单表`UPDATE`或`DELETE`：
- en: The `UPDATE` or `DELETE` statement uses a subquery having a `[NOT] IN` or `[NOT]
    EXISTS` predicate.
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UPDATE`或`DELETE`语句使用具有`[NOT] IN`或`[NOT] EXISTS`谓词的子查询。'
- en: The statement has no `ORDER BY` clause, and has no `LIMIT` clause.
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该语句没有`ORDER BY`子句，也没有`LIMIT`子句。
- en: (The multi-table versions of `UPDATE` and `DELETE` do not support `ORDER BY`
    or `LIMIT`.)
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: （`UPDATE`和`DELETE`的多表版本不支持`ORDER BY`或`LIMIT`。）
- en: The target table does not support read-before-write removal (relevant only for
    [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables).
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标表不支持读取前写入删除（仅适用于[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")表）。
- en: Semijoin or subquery materialization is allowed, based on any hints contained
    in the subquery and the value of [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch).
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于子查询中包含的任何提示和[`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)的值，允许半连接或子查询材料化。
- en: 'When the semijoin optimization is used for an eligible single-table `DELETE`
    or `UPDATE`, this is visible in the optimizer trace: for a multi-table statement
    there is a `join_optimization` object in the trace, while there is none for a
    single-table statement. The conversion is also visible in the output of `EXPLAIN
    FORMAT=TREE` or [`EXPLAIN ANALYZE`](explain.html#explain-analyze "Obtaining Information
    with EXPLAIN ANALYZE"); a single-table statement shows `<not executable by iterator
    executor>`, while a multi-table statement reports a full plan.'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当半连接优化用于符合条件的单表`DELETE`或`UPDATE`时，在优化器跟踪中可见：对于多表语句，跟踪中有一个`join_optimization`对象，而对于单表语句则没有。转换也可在`EXPLAIN
    FORMAT=TREE`或[`EXPLAIN ANALYZE`](explain.html#explain-analyze "使用 EXPLAIN ANALYZE
    获取信息")的输出中看到；单表语句显示`<not executable by iterator executor>`，而多表语句报告完整计划。
- en: Also beginning with MySQL 8.0.21, semi-consistent reads are supported by multi-table
    `UPDATE` statements using [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine") tables, for transaction isolation levels weaker than [`REPEATABLE
    READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read).
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.21开始，使用[`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine")表的多表`UPDATE`语句支持半一致性读取，适用于弱于[`REPEATABLE READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read)的事务隔离级别。
- en: '**Improved hash join performance. ** MySQL 8.0.23 reimplements the hash table
    used for hash joins, resulting in several improvements in hash join performance.
    This work includes a fix for an issue (Bug #31516149, Bug #99933) whereby only
    roughly 2/3 of the memory allocated for the join buffer ([`join_buffer_size`](server-system-variables.html#sysvar_join_buffer_size))
    could actually be used by a hash join.'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的哈希连接性能。** MySQL 8.0.23 重新实现了用于哈希连接的哈希表，从而改进了哈希连接性能。这项工作包括修复了一个问题（Bug #31516149,
    Bug #99933），即哈希连接只能使用约分配给连接缓冲区（[`join_buffer_size`](server-system-variables.html#sysvar_join_buffer_size)）的2/3
    内存。'
- en: The new hash table is generally faster than the old one, and uses less memory
    for alignment, keys/values, and in scenarios where there are many equal keys.
    In addition, the server can now free old memory when the size of the hash table
    increases.
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的哈希表通常比旧的更快，并且在对齐、键/值以及存在许多相等键的情况下使用更少的内存。此外，当哈希表的大小增加时，服务器现在可以释放旧内存。
- en: '**Common table expressions. ** MySQL now supports common table expressions,
    both nonrecursive and recursive. Common table expressions enable use of named
    temporary result sets, implemented by permitting a [`WITH`](with.html "15.2.20 WITH
    (Common Table Expressions)") clause preceding [`SELECT`](select.html "15.2.13 SELECT
    Statement") statements and certain other statements. For more information, see
    [Section 15.2.20, “WITH (Common Table Expressions)”](with.html "15.2.20 WITH (Common
    Table Expressions)").'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共表达式。** MySQL 现在支持公共表达式，包括非递归和递归。公共表达式使得可以使用命名的临时结果集，通过允许在[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句和某些其他语句之前使用[`WITH`](with.html "15.2.20 WITH (Common
    Table Expressions)")子句来实现。有关更多信息，请参见[Section 15.2.20, “WITH (公共表达式)”](with.html
    "15.2.20 WITH (公共表达式)")。'
- en: As of MySQL 8.0.19, the recursive [`SELECT`](select.html "15.2.13 SELECT Statement")
    part of a recursive common table expression (CTE) supports a `LIMIT` clause. `LIMIT`
    with `OFFSET` is also supported. See [Recursive Common Table Expressions](with.html#common-table-expressions-recursive
    "Recursive Common Table Expressions"), for more information.
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.19，递归公共表达式（CTE）的[`SELECT`](select.html "15.2.13 SELECT Statement")部分支持`LIMIT`子句。还支持带有`OFFSET`的`LIMIT`。有关更多信息，请参见[递归公共表达式](with.html#common-table-expressions-recursive
    "递归公共表达式")。
- en: '**Window functions. ** MySQL now supports window functions that, for each row
    from a query, perform a calculation using rows related to that row. These include
    functions such as [`RANK()`](window-function-descriptions.html#function_rank),
    [`LAG()`](window-function-descriptions.html#function_lag), and [`NTILE()`](window-function-descriptions.html#function_ntile).
    In addition, several existing aggregate functions now can be used as window functions
    (for example, [`SUM()`](aggregate-functions.html#function_sum) and [`AVG()`](aggregate-functions.html#function_avg)).
    For more information, see [Section 14.20, “Window Functions”](window-functions.html
    "14.20 Window Functions").'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**窗口函数。** MySQL 现在支持窗口函数，对于查询的每一行，执行使用与该行相关的行的计算。这些函数包括[`RANK()`](window-function-descriptions.html#function_rank)、[`LAG()`](window-function-descriptions.html#function_lag)和[`NTILE()`](window-function-descriptions.html#function_ntile)等函数。此外，现在几个现有的聚合函数也可以用作窗口函数（例如，[`SUM()`](aggregate-functions.html#function_sum)和[`AVG()`](aggregate-functions.html#function_avg)）。有关更多信息，请参见[Section 14.20,
    “窗口函数”](window-functions.html "14.20 窗口函数")。'
- en: '**Lateral derived tables. ** A derived table now may be preceded by the `LATERAL`
    keyword to specify that it is permitted to refer to (depend on) columns of preceding
    tables in the same `FROM` clause. Lateral derived tables make possible certain
    SQL operations that cannot be done with nonlateral derived tables or that require
    less-efficient workarounds. See [Section 15.2.15.9, “Lateral Derived Tables”](lateral-derived-tables.html
    "15.2.15.9 Lateral Derived Tables").'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lateral 派生表。** 现在，派生表前面可以加上`LATERAL`关键字，以指定允许引用（依赖）同一`FROM`子句中之前表的列。Lateral
    派生表使得某些 SQL 操作成为可能，这些操作无法使用非 Lateral 派生表完成，或者需要使用效率较低的变通方法。请参见[Section 15.2.15.9,
    “Lateral 派生表”](lateral-derived-tables.html "15.2.15.9 Lateral 派生表")。'
- en: '**Aliases in single-table DELETE statements. ** In MySQL 8.0.16 and later,
    single-table [`DELETE`](delete.html "15.2.2 DELETE Statement") statements support
    the use of table aliases.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单表DELETE语句中的别名。** 在MySQL 8.0.16及更高版本中，单表[`DELETE`](delete.html "15.2.2 DELETE
    Statement")语句支持使用表别名。'
- en: '**Regular expression support. ** Previously, MySQL used the Henry Spencer regular
    expression library to support regular expression operators ([`REGEXP`](regexp.html#operator_regexp),
    [`RLIKE`](regexp.html#operator_regexp)). Regular expression support has been reimplemented
    using International Components for Unicode (ICU), which provides full Unicode
    support and is multibyte safe. The [`REGEXP_LIKE()`](regexp.html#function_regexp-like)
    function performs regular expression matching in the manner of the [`REGEXP`](regexp.html#operator_regexp)
    and [`RLIKE`](regexp.html#operator_regexp) operators, which now are synonyms for
    that function. In addition, the [`REGEXP_INSTR()`](regexp.html#function_regexp-instr),
    [`REGEXP_REPLACE()`](regexp.html#function_regexp-replace), and [`REGEXP_SUBSTR()`](regexp.html#function_regexp-substr)
    functions are available to find match positions and perform substring substitution
    and extraction, respectively. The [`regexp_stack_limit`](server-system-variables.html#sysvar_regexp_stack_limit)
    and [`regexp_time_limit`](server-system-variables.html#sysvar_regexp_time_limit)
    system variables provide control over resource consumption by the match engine.
    For more information, see [Section 14.8.2, “Regular Expressions”](regexp.html
    "14.8.2 Regular Expressions"). For information about ways in which applications
    that use regular expressions may be affected by the implementation change, see
    [Regular Expression Compatibility Considerations](regexp.html#regexp-compatibility
    "Regular Expression Compatibility Considerations").'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正则表达式支持。** 以前，MySQL使用Henry Spencer正则表达式库来支持正则表达式操作符([`REGEXP`](regexp.html#operator_regexp),
    [`RLIKE`](regexp.html#operator_regexp))。现在，正则表达式支持已经重新实现，使用了提供完整Unicode支持且支持多字节的International
    Components for Unicode (ICU)。[`REGEXP_LIKE()`](regexp.html#function_regexp-like)函数以[`REGEXP`](regexp.html#operator_regexp)和[`RLIKE`](regexp.html#operator_regexp)操作符的方式执行正则表达式匹配，这两者现在是该函数的同义词。此外，[`REGEXP_INSTR()`](regexp.html#function_regexp-instr)、[`REGEXP_REPLACE()`](regexp.html#function_regexp-replace)和[`REGEXP_SUBSTR()`](regexp.html#function_regexp-substr)函数可用于查找匹配位置以及执行子字符串替换和提取。[`regexp_stack_limit`](server-system-variables.html#sysvar_regexp_stack_limit)和[`regexp_time_limit`](server-system-variables.html#sysvar_regexp_time_limit)系统变量可控制匹配引擎的资源消耗。更多信息，请参见[第14.8.2节，“正则表达式”](regexp.html
    "14.8.2 Regular Expressions")。关于使用正则表达式的应用程序可能受到实现更改影响的信息，请参见[正则表达式兼容性注意事项](regexp.html#regexp-compatibility
    "Regular Expression Compatibility Considerations")。'
- en: One effect of this change is that `[a-zA-Z]` and `[0-9]` perform much better
    in MySQL 8.0 than `[[:alpha:]]` and `[[:digit:]]`, respectively. Existing applications
    that use the character classes in pattern matching should be upgraded to use the
    ranges instead.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一变化的一个影响是，在MySQL 8.0中，`[a-zA-Z]`和`[0-9]`的性能比`[[:alpha:]]`和`[[:digit:]]`要好得多。已经使用模式匹配中的字符类的现有应用程序应升级为使用范围。
- en: '**Internal temporary tables. ** The `TempTable` storage engine replaces the
    `MEMORY` storage engine as the default engine for in-memory internal temporary
    tables. The `TempTable` storage engine provides efficient storage for [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types") and [`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types") columns. The [`internal_tmp_mem_storage_engine`](server-system-variables.html#sysvar_internal_tmp_mem_storage_engine)
    session variable defines the storage engine for in-memory internal temporary tables.
    Permitted values are `TempTable` (the default) and `MEMORY`. The [`temptable_max_ram`](server-system-variables.html#sysvar_temptable_max_ram)
    variable defines the maximum amount of memory that the `TempTable` storage engine
    can use before data is stored to disk.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部临时表。** `TempTable`存储引擎取代了`MEMORY`存储引擎，成为内存中临时表的默认引擎。`TempTable`存储引擎为[`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")和[`VARBINARY`](binary-varbinary.html "13.3.3 The
    BINARY and VARBINARY Types")列提供高效的存储。[`internal_tmp_mem_storage_engine`](server-system-variables.html#sysvar_internal_tmp_mem_storage_engine)会话变量定义了内存中临时表的存储引擎。允许的值为`TempTable`（默认）和`MEMORY`。[`temptable_max_ram`](server-system-variables.html#sysvar_temptable_max_ram)变量定义了`TempTable`存储引擎在数据存储到磁盘之前可以使用的最大内存量。'
- en: '**Logging. ** These enhancements were added to improve logging:'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录。** 这些增强功能旨在改进日志记录：'
- en: Error logging was rewritten to use the MySQL component architecture. Traditional
    error logging is implemented using built-in components, and logging using the
    system log is implemented as a loadable component. In addition, a loadable JSON
    log writer is available. For more information, see [Section 7.4.2, “The Error
    Log”](error-log.html "7.4.2 The Error Log").
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误日志已重写以使用MySQL组件架构。传统错误日志使用内置组件实现，使用系统日志进行记录则使用可加载组件实现。此外，还提供了可加载的JSON日志写入器。更多信息，请参见[Section 7.4.2,
    “The Error Log”](error-log.html "7.4.2 The Error Log")。
- en: From MySQL 8.0.30, error log components can be loaded implicitly at startup
    before the `InnoDB` storage engine is available. This new method of loading error
    log components loads and enables the components defined by the [`log_error_services`](server-system-variables.html#sysvar_log_error_services)
    variable.
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.30开始，在`InnoDB`存储引擎可用之前，错误日志组件可以在启动时隐式加载。这种新的加载错误日志组件的方法会加载并启用由[`log_error_services`](server-system-variables.html#sysvar_log_error_services)变量定义的组件。
- en: Previously, error log components had to be installed first using [`INSTALL COMPONENT`](install-component.html
    "15.7.4.3 INSTALL COMPONENT Statement") and could only be loaded after `InnoDB`
    was fully available, as the list of components to load was read from the `mysql.components`
    table, which is an `InnoDB` table.
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以前，必须首先使用[`INSTALL COMPONENT`](install-component.html "15.7.4.3 INSTALL COMPONENT
    Statement")安装错误日志组件，并且只能在`InnoDB`完全可用后加载，因为要加载的组件列表是从`mysql.components`表中读取的，该表是一个`InnoDB`表。
- en: 'Implicit loading of error log components has these advantages:'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 隐式加载错误日志组件具有以下优点：
- en: Log components are loaded earlier in the startup sequence, making logged information
    available sooner.
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志组件在启动序列中较早加载，使记录的信息更早可用。
- en: It helps avoid loss of buffered log information should a failure occur during
    startup.
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在启动过程中发生故障时，有助于避免缓冲日志信息的丢失。
- en: Loading log components using [`INSTALL COMPONENT`](install-component.html "15.7.4.3 INSTALL
    COMPONENT Statement") is not required, simplifying error log configuration.
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要使用[`INSTALL COMPONENT`](install-component.html "15.7.4.3 INSTALL COMPONENT
    Statement")加载日志组件，简化了错误日志配置。
- en: The explicit method of loading log components using `INSTALL COMPONENT` remains
    supported for backward compatibility.
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`INSTALL COMPONENT`显式加载日志组件的方法仍然受支持，以确保向后兼容性。
- en: For more information, see [Section 7.4.2.1, “Error Log Configuration”](error-log-configuration.html
    "7.4.2.1 Error Log Configuration").
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参见[Section 7.4.2.1, “Error Log Configuration”](error-log-configuration.html
    "7.4.2.1 Error Log Configuration")。
- en: '**Backup lock. ** A new type of backup lock permits DML during an online backup
    while preventing operations that could result in an inconsistent snapshot. The
    new backup lock is supported by [`LOCK INSTANCE FOR BACKUP`](lock-instance-for-backup.html
    "15.3.5 LOCK INSTANCE FOR BACKUP and UNLOCK INSTANCE Statements") and [`UNLOCK
    INSTANCE`](lock-instance-for-backup.html "15.3.5 LOCK INSTANCE FOR BACKUP and
    UNLOCK INSTANCE Statements") syntax. The [`BACKUP_ADMIN`](privileges-provided.html#priv_backup-admin)
    privilege is required to use these statements.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备份锁。** 新的备份锁类型允许在线备份期间进行DML操作，同时阻止可能导致不一致快照的操作。新的备份锁由[`LOCK INSTANCE FOR
    BACKUP`](lock-instance-for-backup.html "15.3.5 LOCK INSTANCE FOR BACKUP and UNLOCK
    INSTANCE Statements")和[`UNLOCK INSTANCE`](lock-instance-for-backup.html "15.3.5 LOCK
    INSTANCE FOR BACKUP and UNLOCK INSTANCE Statements")语法支持。需要[`BACKUP_ADMIN`](privileges-provided.html#priv_backup-admin)权限才能使用这些语句。'
- en: '**Replication. ** The following enhancements have been made to MySQL Replication:'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制。** MySQL复制功能已进行以下增强：'
- en: MySQL Replication now supports binary logging of partial updates to JSON documents
    using a compact binary format, saving space in the log over logging complete JSON
    documents. Such compact logging is done automatically when statement-based logging
    is in use, and can be enabled by setting the new `binlog_row_value_options` system
    variable to `PARTIAL_JSON`. For more information, see [Partial Updates of JSON
    Values](json.html#json-partial-updates "Partial Updates of JSON Values"), as well
    as the description of [`binlog_row_value_options`](replication-options-binary-log.html#sysvar_binlog_row_value_options).
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL复制现在支持使用紧凑的二进制格式对JSON文档的部分更新进行二进制日志记录，相比记录完整的JSON文档，可以节省日志空间。当使用基于语句的日志记录时，此类紧凑日志记录会自动执行，并且可以通过将新的`binlog_row_value_options`系统变量设置为`PARTIAL_JSON`来启用。更多信息，请参见[Partial
    Updates of JSON Values](json.html#json-partial-updates "Partial Updates of JSON
    Values")，以及[`binlog_row_value_options`](replication-options-binary-log.html#sysvar_binlog_row_value_options)的描述。
- en: '**Connection management. ** MySQL Server now permits a TCP/IP port to be configured
    specifically for administrative connections. This provides an alternative to the
    single administrative connection that is permitted on the network interfaces used
    for ordinary connections even when [`max_connections`](server-system-variables.html#sysvar_max_connections)
    connections are already established. See [Section 7.1.12.1, “Connection Interfaces”](connection-interfaces.html
    "7.1.12.1 Connection Interfaces").'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接管理。** MySQL 服务器现在允许为管理连接专门配置 TCP/IP 端口。这提供了一种替代方案，即使已经建立了 [`max_connections`](server-system-variables.html#sysvar_max_connections)
    连接，也可以在用于普通连接的网络接口上配置单个管理连接。请参阅 [Section 7.1.12.1, “Connection Interfaces”](connection-interfaces.html
    "7.1.12.1 Connection Interfaces")。'
- en: MySQL now provides more control over the use of compression to minimize the
    number of bytes sent over connections to the server. Previously, a given connection
    was either uncompressed or used the `zlib` compression algorithm. Now, it is also
    possible to use the `zstd` algorithm, and to select a compression level for `zstd`
    connections. The permitted compression algorithms can be configured on the server
    side, as well as on the connection-origination side for connections by client
    programs and by servers participating in source/replica replication or Group Replication.
    For more information, see [Section 6.2.8, “Connection Compression Control”](connection-compression-control.html
    "6.2.8 Connection Compression Control").
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 现在提供了更多控制压缩以减少发送到服务器的字节数的功能。以前，给定连接要么未经压缩，要么使用 `zlib` 压缩算法。现在，还可以使用 `zstd`
    算法，并为 `zstd` 连接选择压缩级别。允许在服务器端配置压缩算法，以及在客户端程序发起的连接和参与源/副本复制或组复制的服务器端的连接发起端配置压缩算法。有关更多信息，请参阅
    [Section 6.2.8, “Connection Compression Control”](connection-compression-control.html
    "6.2.8 Connection Compression Control")。
- en: '**Configuration. ** The maximum permitted length of host names throughout MySQL
    has been raised to 255 ASCII characters, up from the previous limit of 60 characters.
    This applies to, for example, host name-related columns in the data dictionary,
    `mysql` system schema, Performance Schema, `INFORMATION_SCHEMA`, and `sys` schema;
    the `MASTER_HOST` value for the [`CHANGE MASTER TO`](change-master-to.html "15.4.2.1 CHANGE
    MASTER TO Statement") statement; the `Host` column in [`SHOW PROCESSLIST`](show-processlist.html
    "15.7.7.29 SHOW PROCESSLIST Statement") statement output; host names in account
    names (such as used in account-management statements and in `DEFINER` attributes);
    and host name-related command options and system variables.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置。** MySQL 中主机名的最大允许长度已从先前的 60 个字符提高到 255 个 ASCII 字符。例如，数据字典、`mysql` 系统模式、性能模式、`INFORMATION_SCHEMA`
    和 `sys` 模式中与主机名相关的列；[`CHANGE MASTER TO`](change-master-to.html "15.4.2.1 CHANGE
    MASTER TO Statement") 语句中的 `MASTER_HOST` 值；[`SHOW PROCESSLIST`](show-processlist.html
    "15.7.7.29 SHOW PROCESSLIST Statement") 语句输出中的 `Host` 列；帐户名称中的主机名（例如在帐户管理语句和 `DEFINER`
    属性中使用）；以及与主机名相关的命令选项和系统变量。'
- en: 'Caveats:'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意事项：
- en: The increase in permitted host name length can affect tables with indexes on
    host name columns. For example, tables in the `mysql` system schema that index
    host names now have an explicit `ROW_FORMAT` attribute of `DYNAMIC` to accommodate
    longer index values.
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的主机名长度增加可能会影响具有主机名列索引的表。例如，现在在索引主机名的 `mysql` 系统模式中的表具有显式的 `ROW_FORMAT` 属性为
    `DYNAMIC`，以容纳更长的索引值。
- en: Some file name-valued configuration settings might be constructed based on the
    server host name. The permitted values are constrained by the underlying operating
    system, which may not permit file names long enough to include 255-character host
    names. This affects the [`general_log_file`](server-system-variables.html#sysvar_general_log_file),
    [`log_error`](server-system-variables.html#sysvar_log_error), [`pid_file`](server-system-variables.html#sysvar_pid_file),
    [`relay_log`](replication-options-replica.html#sysvar_relay_log), and [`slow_query_log_file`](server-system-variables.html#sysvar_slow_query_log_file)
    system variables and corresponding options. If host name-based values are too
    long for the OS, explicit shorter values must be provided.
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些文件名值配置设置可能基于服务器主机名构建。允许的值受基础操作系统的限制，可能不允许文件名足够长以包含 255 个字符的主机名。这会影响 [`general_log_file`](server-system-variables.html#sysvar_general_log_file)、[`log_error`](server-system-variables.html#sysvar_log_error)、[`pid_file`](server-system-variables.html#sysvar_pid_file)、[`relay_log`](replication-options-replica.html#sysvar_relay_log)
    和 [`slow_query_log_file`](server-system-variables.html#sysvar_slow_query_log_file)
    系统变量及相应选项。如果基于主机名的值对于操作系统来说太长，则必须提供显式较短的值。
- en: 'Although the server now supports 255-character host names, connections to the
    server established using the [`--ssl-mode=VERIFY_IDENTITY`](connection-options.html#option_general_ssl-mode)
    option are constrained by maximum host name length supported by OpenSSL. Host
    name matches pertain to two fields of SSL certificates, which have maximum lengths
    as follows: Common Name: maximum length 64; Subject Alternative Name: maximum
    length as per RFC#1034.'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管服务器现在支持 255 字符的主机名，但使用[`--ssl-mode=VERIFY_IDENTITY`](connection-options.html#option_general_ssl-mode)选项建立到服务器的连接受
    OpenSSL 支持的最大主机名长度的限制。主机名匹配涉及 SSL 证书的两个字段，其最大长度如下：通用名称：最大长度 64；主题备用名称：根据 RFC#1034
    的最大长度。
- en: '**Plugins. ** Previously, MySQL plugins could be written in C or C++. MySQL
    header files used by plugins now contain C++ code, which means that plugins must
    be written in C++, not C.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件。** 以前，MySQL 插件可以用 C 或 C++ 编写。现在插件使用的 MySQL 头文件包含 C++ 代码，这意味着插件必须用 C++
    而不是 C 编写。'
- en: '**C API. ** The MySQL C API now supports asynchronous functions for nonblocking
    communication with the MySQL server. Each function is the asynchronous counterpart
    to an existing synchronous function. The synchronous functions block if reads
    from or writes to the server connection must wait. The asynchronous functions
    enable an application to check whether work on the server connection is ready
    to proceed. If not, the application can perform other work before checking again
    later. See [C API Asynchronous Interface](/doc/c-api/8.0/en/c-api-asynchronous-interface.html).'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C API。** MySQL C API 现在支持用于与 MySQL 服务器进行非阻塞通信的异步函数。每个函数都是现有同步函数的异步对应项。如果从服务器连接读取或写入必须等待，则同步函数会阻塞。异步函数使应用程序能够检查服务器连接上的工作是否准备好继续。如果没有准备好，应用程序可以在稍后再次检查之前执行其他工作。请参阅[C
    API 异步接口](/doc/c-api/8.0/en/c-api-asynchronous-interface.html)。'
- en: '**Additional target types for casts. ** The functions [`CAST()`](cast-functions.html#function_cast)
    and [`CONVERT()`](cast-functions.html#function_convert) now support conversions
    to types [`DOUBLE`](floating-point-types.html "13.1.4 Floating-Point Types (Approximate
    Value) - FLOAT, DOUBLE"), [`FLOAT`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE"), and [`REAL`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"). Added in MySQL
    8.0.17\. See [Section 14.10, “Cast Functions and Operators”](cast-functions.html
    "14.10 Cast Functions and Operators").'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强制转换的附加目标类型。** 函数[`CAST()`](cast-functions.html#function_cast)和[`CONVERT()`](cast-functions.html#function_convert)现在支持转换为类型[`DOUBLE`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT, DOUBLE")、[`FLOAT`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE")和[`REAL`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT,
    DOUBLE")。在 MySQL 8.0.17 中添加。请参阅[第 14.10 节，“强制转换函数和运算符”](cast-functions.html "14.10 强制转换函数和运算符")。'
- en: '**JSON schema validation. ** MySQL 8.0.17 adds two functions [`JSON_SCHEMA_VALID()`](json-validation-functions.html#function_json-schema-valid)
    and [`JSON_SCHEMA_VALIDATION_REPORT()`](json-validation-functions.html#function_json-schema-validation-report)
    for validating JSON documents again JSON schemas. `JSON_SCHEMA_VALID()` returns
    TRUE (1) if the document validates against the schema and FALSE (0) if it does
    not. `JSON_SCHEMA_VALIDATION_REPORT()` returns a JSON document containing detailed
    information about the results of the validation. The following statements apply
    to both of these functions:'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON 模式验证。** MySQL 8.0.17 添加了两个函数[`JSON_SCHEMA_VALID()`](json-validation-functions.html#function_json-schema-valid)和[`JSON_SCHEMA_VALIDATION_REPORT()`](json-validation-functions.html#function_json-schema-validation-report)用于验证
    JSON 文档是否符合 JSON 模式。`JSON_SCHEMA_VALID()`如果文档符合模式则返回 TRUE（1），否则返回 FALSE（0）。`JSON_SCHEMA_VALIDATION_REPORT()`返回一个包含验证结果详细信息的
    JSON 文档。以下声明适用于这两个函数：'
- en: The schema must conform to Draft 4 of the JSON Schema specification.
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式必须符合 JSON Schema 规范的 Draft 4 版本。
- en: '`required` attributes are supported.'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持`required`属性。
- en: External resources and the `$ref` keyword are not supported.
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持外部资源和`$ref`关键字。
- en: Regular expression patterns are supported; invalid patterns are silently ignored.
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持正则表达式模式；无效模式会被静默忽略。
- en: See [Section 14.17.7, “JSON Schema Validation Functions”](json-validation-functions.html
    "14.17.7 JSON Schema Validation Functions"), for more information and examples.
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参阅[第 14.17.7 节，“JSON 模式验证函数”](json-validation-functions.html "14.17.7 JSON
    模式验证函数")。
- en: '**Multi-valued indexes. ** Beginning with MySQL 8.0.17, [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") supports the creation of a multi-valued
    index, which is a secondary index defined on a [`JSON`](json.html "13.5 The JSON
    Data Type") column that stores an array of values and which can have multiple
    index records for a single data record. Such an index uses a key part definition
    such as `CAST(data->''$.zipcode'' AS UNSIGNED ARRAY)`. A multi-valued index is
    used automatically by the MySQL optimizer for suitable queries, as can be viewed
    in the output of [`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement").'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多值索引。** 从MySQL 8.0.17开始，[`InnoDB`](innodb-storage-engine.html "第17章 InnoDB存储引擎")支持创建多值索引，这是在存储值数组的[`JSON`](json.html
    "13.5 JSON数据类型")列上定义的二级索引，对于单个数据记录可以有多个索引记录。这样的索引使用类似于`CAST(data->''$.zipcode''
    AS UNSIGNED ARRAY)`的键部分定义。MySQL优化器会自动为适当的查询使用多值索引，可以在[`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN语句")输出中查看。'
- en: 'As part of this work, MySQL adds a new function [`JSON_OVERLAPS()`](json-search-functions.html#function_json-overlaps)
    and a new [`MEMBER OF()`](json-search-functions.html#operator_member-of) operator
    for working with [`JSON`](json.html "13.5 The JSON Data Type") documents, additionally
    extending the [`CAST()`](cast-functions.html#function_cast) function with a new
    `ARRAY` keyword, as described in the following list:'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这项工作的一部分，MySQL添加了一个新函数[`JSON_OVERLAPS()`](json-search-functions.html#function_json-overlaps)和一个新的[`MEMBER
    OF()`](json-search-functions.html#operator_member-of)运算符，用于处理[`JSON`](json.html
    "13.5 JSON数据类型")文档，并通过在下面的列表中描述的新`ARRAY`关键字扩展了[`CAST()`](cast-functions.html#function_cast)函数：
- en: '`JSON_OVERLAPS()` compares two [`JSON`](json.html "13.5 The JSON Data Type")
    documents. If they contain any key-value pairs or array elements in common, the
    function returns TRUE (1); otherwise it returns FALSE (0). If both values are
    scalars, the function performs a simple test for equality. If one argument is
    a JSON array and the other is a scalar, the scalar is treated as an array element.
    Thus, `JSON_OVERLAPS()` acts as a complement to [`JSON_CONTAINS()`](json-search-functions.html#function_json-contains).'
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_OVERLAPS()`比较两个[`JSON`](json.html "13.5 JSON数据类型")文档。如果它们包含任何共同的键值对或数组元素，则函数返回TRUE（1）；否则返回FALSE（0）。如果两个值都是标量，函数执行简单的相等性测试。如果一个参数是JSON数组，另一个是标量，则标量被视为数组元素。因此，`JSON_OVERLAPS()`作为[`JSON_CONTAINS()`](json-search-functions.html#function_json-contains)的补充。'
- en: '`MEMBER OF()` tests whether the first operand (a scalar or JSON document) is
    a member of the JSON array passed as the second operand, returning TRUE (1) if
    it is, and FALSE (0) if it is not. No type conversion of the operand is performed.'
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEMBER OF()`测试第一个操作数（标量或JSON文档）是否是作为第二个操作数传递的JSON数组的成员，如果是，则返回TRUE（1），否则返回FALSE（0）。不执行操作数的类型转换。'
- en: '`CAST(`expression` AS `type` ARRAY)` permits creation of a functional index
    by casting the JSON array found in a JSON document at *`json_path`* to an SQL
    array. Type specifiers are limited to those already supported by `CAST()`, with
    the exception of `BINARY` (not supported). This usage of `CAST()` (and the `ARRAY`
    keyword) is supported only by [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine"), and only for the creation of a multi-valued index.'
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAST(`expression` AS `type` ARRAY)`允许通过将位于*`json_path`*中的JSON文档中的JSON数组转换为SQL数组来创建一个功能性索引。类型说明符仅限于`CAST()`已支持的类型，但不包括`BINARY`（不支持）。`CAST()`（和`ARRAY`关键字）仅由[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")支持，并且仅用于创建多值索引。'
- en: For detailed information about multi-valued indexes, including examples, see
    [Multi-Valued Indexes](create-index.html#create-index-multi-valued "Multi-Valued
    Indexes"). [Section 14.17.3, “Functions That Search JSON Values”](json-search-functions.html
    "14.17.3 Functions That Search JSON Values"), provides information about `JSON_OVERLAPS()`
    and `MEMBER OF()`, along with examples of use.
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关多值索引的详细信息，包括示例，请参见[多值索引](create-index.html#create-index-multi-valued "多值索引")。[第14.17.3节，“搜索JSON值的函数”](json-search-functions.html
    "14.17.3 搜索JSON值的函数")提供了有关`JSON_OVERLAPS()`和`MEMBER OF()`的信息，以及使用示例。
- en: '**Hintable time_zone. ** As of MySQL 8.0.17, the [`time_zone`](server-system-variables.html#sysvar_time_zone)
    session variable is hintable using [`SET_VAR`](optimizer-hints.html#optimizer-hints-set-var
    "Variable-Setting Hint Syntax").'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可提示的time_zone。** 截至MySQL 8.0.17，[`time_zone`](server-system-variables.html#sysvar_time_zone)会话变量可以使用[`SET_VAR`](optimizer-hints.html#optimizer-hints-set-var
    "变量设置提示语法")进行提示。'
- en: '**Redo Log Archiving. ** As of MySQL 8.0.17, `InnoDB` supports redo log archiving.
    Backup utilities that copy redo log records may sometimes fail to keep pace with
    redo log generation while a backup operation is in progress, resulting in lost
    redo log records due to those records being overwritten. The redo log archiving
    feature addresses this issue by sequentially writing redo log records to an archive
    file. Backup utilities can copy redo log records from the archive file as necessary,
    thereby avoiding the potential loss of data. For more information, see [Redo Log
    Archiving](innodb-redo-log.html#innodb-redo-log-archiving "Redo Log Archiving").'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重做日志归档。** 截至MySQL 8.0.17版本，`InnoDB`支持重做日志归档。备份工具复制重做日志记录时，有时可能无法跟上重做日志生成的速度，导致在备份操作进行时丢失重做日志记录，因为这些记录被覆盖。重做日志归档功能通过将重做日志记录顺序写入归档文件来解决此问题。备份工具可以根据需要从归档文件中复制重做日志记录，从而避免数据的潜在丢失。有关更多信息，请参见[重做日志归档](innodb-redo-log.html#innodb-redo-log-archiving
    "重做日志归档")。'
- en: '**The Clone Plugin. ** As of MySQL 8.0.17, MySQL provides a clone plugin that
    permits cloning `InnoDB` data locally or from a remote MySQL server instance.
    A local cloning operation stores cloned data on the same server or node where
    the MySQL instance runs. A remote cloning operation transfers cloned data over
    the network from a donor MySQL server instance to the recipient server or node
    where the cloning operation was initiated.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**克隆插件。** 截至MySQL 8.0.17版本，MySQL提供了一个克隆插件，允许在本地或从远程MySQL服务器实例克隆`InnoDB`数据。本地克隆操作将克隆数据存储在MySQL实例运行的同一服务器或节点上。远程克隆操作将克隆数据通过网络从捐赠MySQL服务器实例传输到启动克隆操作的接收服务器或节点。'
- en: The clone plugin supports replication. In addition to cloning data, a cloning
    operation extracts and transfers replication coordinates from the donor and applies
    them on the recipient, which enables using the clone plugin for provisioning Group
    Replication members and replicas. Using the clone plugin for provisioning is considerably
    faster and more efficient than replicating a large number of transactions. Group
    Replication members can also be configured to use the clone plugin as an alternative
    method of recovery, so that members automatically choose the most efficient way
    to retrieve group data from seed members.
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 克隆插件支持复制。除了克隆数据外，克隆操作还从捐赠端提取并传输复制坐标，并在接收端应用这些坐标，从而使得可以使用克隆插件为配置组复制成员和副本提供服务。使用克隆插件进行配置比复制大量事务要快得多且更有效。组复制成员还可以配置为使用克隆插件作为恢复的替代方法，以便成员自动选择从种子成员检索组数据的最有效方式。
- en: For more information, see [Section 7.6.7, “The Clone Plugin”](clone-plugin.html
    "7.6.7 The Clone Plugin"), and [Section 20.5.4.2, “Cloning for Distributed Recovery”](group-replication-cloning.html
    "20.5.4.2 Cloning for Distributed Recovery").
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[Section 7.6.7, “克隆插件”](clone-plugin.html "7.6.7 克隆插件")，以及[Section 20.5.4.2,
    “用于分布式恢复的克隆”](group-replication-cloning.html "20.5.4.2 用于分布式恢复的克隆")。
- en: As of MySQL 8.0.27, concurrent DDL operations on the donor MySQL Server instance
    are permitted while a cloning operation is in progress. Previously, a backup lock
    was held during the cloning operation, preventing concurrent DDL on the donor.
    To revert to the previous behavior of blocking concurrent DDL on the donor during
    a clone operation, enable the [`clone_block_ddl`](clone-plugin-options-variables.html#sysvar_clone_block_ddl)
    variable. See [Section 7.6.7.4, “Cloning and Concurrent DDL”](clone-plugin-concurrent-ddl.html
    "7.6.7.4 Cloning and Concurrent DDL").
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.27版本，克隆操作进行时，允许在捐赠MySQL服务器实例上进行并发DDL操作。以前，在克隆操作期间会持有备份锁，阻止在捐赠端进行并发DDL。要恢复到在克隆操作期间阻止捐赠端进行并发DDL的先前行为，请启用[`clone_block_ddl`](clone-plugin-options-variables.html#sysvar_clone_block_ddl)变量。参见[Section 7.6.7.4,
    “克隆和并发DDL”](clone-plugin-concurrent-ddl.html "7.6.7.4 克隆和并发DDL")。
- en: As of MySQL 8.0.29, the [`clone_delay_after_data_drop`](clone-plugin-options-variables.html#sysvar_clone_delay_after_data_drop)
    variable permits specifying a delay period immediately after removing existing
    data on the recipient MySQL Server instance at the start of a remote cloning operation.
    The delay is intended to provide enough time for the file system on the recipient
    host to free space before data is cloned from the donor MySQL Server instance.
    Certain file systems free space asynchronously in a background process. On these
    file systems, cloning data too soon after dropping existing data can result in
    clone operation failures due to insufficient space. The maximum delay period is
    3600 seconds (1 hour). The default setting is 0 (no delay).
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.29开始，[`clone_delay_after_data_drop`](clone-plugin-options-variables.html#sysvar_clone_delay_after_data_drop)变量允许在远程克隆操作开始时在接收方MySQL服务器实例上删除现有数据后立即指定延迟时间。延迟旨在在从捐赠方MySQL服务器实例克隆数据之前为接收方主机上的文件系统释放足够的空间。某些文件系统会异步释放空间。在这些文件系统上，在删除现有数据后太快克隆数据可能导致由于空间不足而克隆操作失败。最大延迟时间为3600秒（1小时）。默认设置为0（无延迟）。
- en: As of MySQL 8.0.37, cloning is allowed between different point releases. In
    other words, only the major and minor version numbers must match when previously
    the point release number also had to match.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.37开始，克隆允许在不同的点发布版本之间进行。换句话说，以前必须匹配点发布号，现在只需要主版本号和次版本号匹配。
- en: For example, clone functionality now permits cloning 8.0.37 to 8.0.41 or 8.0.51
    to 8.0.39\. Previous restrictions still apply to versions older than 8.0.37, so
    cloning the likes of 8.0.36 to 8.0.42 or vice-versa is not permitted.
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，克隆功能现在允许将8.0.37克隆到8.0.41或8.0.51克隆到8.0.39。对于早于8.0.37的版本仍然存在先前的限制，因此不允许克隆8.0.36到8.0.42或反之亦不允许。
- en: '**Hash Join Optimization. ** Beginning with MySQL 8.0.18, a hash join is used
    whenever each pair of tables in a join includes at least one equi-join condition,
    and no indexes apply to any join condition. A hash join does not require indexes,
    although it can be used with indexes applying to single-table predicates only.
    A hash join is more efficient in most cases than the block-nested loop algorithm.
    Joins such as those shown here can be optimized in this manner:'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**哈希连接优化。** 从MySQL 8.0.18开始，只要连接中的每对表都包含至少一个等值连接条件，并且没有索引适用于任何连接条件，就会使用哈希连接。哈希连接不需要索引，尽管它可以与仅适用于单表谓词的索引一起使用。在大多数情况下，哈希连接比块嵌套循环算法更有效率。这种连接可以通过这种方式进行优化：'
- en: '[PRE13]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Hash joins can also be used for Cartesian products—that is, when no join condition
    is specified.
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哈希连接也可以用于笛卡尔积——也就是在没有指定连接条件时。
- en: You can see when the hash join optimization is being used for a particular query
    using [`EXPLAIN FORMAT=TREE`](explain.html "15.8.2 EXPLAIN Statement") or [`EXPLAIN
    ANALYZE`](explain.html#explain-analyze "Obtaining Information with EXPLAIN ANALYZE").
    (In MySQL 8.0.20 and later, you can also use `EXPLAIN`, omitting `FORMAT=TREE`.)
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以通过[`EXPLAIN FORMAT=TREE`](explain.html "15.8.2 EXPLAIN Statement")或[`EXPLAIN
    ANALYZE`](explain.html#explain-analyze "Obtaining Information with EXPLAIN ANALYZE")来查看特定查询中是否使用了哈希连接优化。（在MySQL
    8.0.20及更高版本中，也可以使用`EXPLAIN`，省略`FORMAT=TREE`。）
- en: The amount of memory available to a hash join is limited by the value of [`join_buffer_size`](server-system-variables.html#sysvar_join_buffer_size).
    A hash join that requires more than this much memory is executed on disk; the
    number of disk files that can be used by an on-disk hash join is limited by [`open_files_limit`](server-system-variables.html#sysvar_open_files_limit).
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哈希连接可用的内存量受[`join_buffer_size`](server-system-variables.html#sysvar_join_buffer_size)值的限制。如果哈希连接需要的内存超过这么多，则在磁盘上执行；磁盘哈希连接可以使用的磁盘文件数量受[`open_files_limit`](server-system-variables.html#sysvar_open_files_limit)的限制。
- en: As of MySQL 8.0.19, the [`hash_join`](switchable-optimizations.html#optflag_hash-join)
    optimizer switch which was introduced in MySQL 8.0.18 no longer supported (hash_join=on
    still appears as part of the value of optimizer_switch, but setting it no longer
    has any effect). The [`HASH_JOIN`](optimizer-hints.html#optimizer-hints-table-level
    "Table-Level Optimizer Hints") and `NO_HASH_JOIN` optimizer hints are also no
    longer supported. The switch and the hint are both now deprecated; expect them
    to be removed in a future MySQL release. In MySQL 8.0.18 and later, hash joins
    can be disabled using the [`NO_BNL`](optimizer-hints.html#optimizer-hints-table-level
    "Table-Level Optimizer Hints") optimizer switch.
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.19版本，MySQL 8.0.18中引入的[`hash_join`](switchable-optimizations.html#optflag_hash-join)优化器开关不再受支持（hash_join=on仍然作为optimizer_switch值的一部分，但设置它不再产生任何效果）。[`HASH_JOIN`](optimizer-hints.html#optimizer-hints-table-level
    "表级优化提示")和`NO_HASH_JOIN`优化提示也不再受支持。该开关和提示现已被弃用；预计它们将在未来的MySQL版本中被移除。在MySQL 8.0.18及更高版本中，可以使用[`NO_BNL`](optimizer-hints.html#optimizer-hints-table-level
    "表级优化提示")优化器开关来禁用哈希连接。
- en: In MySQL 8.0.20 and later, block nested loop is no longer used in the MySQL
    server, and a hash join is employed any time a block nested loop would have been
    used previously, even when the query contains no equi-join conditions. This applies
    to inner non-equijoins, semijoins, antijoins, left outer joins, and right outer
    joins. The [`block_nested_loop`](switchable-optimizations.html#optflag_block-nested-loop)
    flag for the [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    system variable as well as the [`BNL`](optimizer-hints.html#optimizer-hints-table-level
    "Table-Level Optimizer Hints") and `NO_BNL` optimizer hints are still supported,
    but henceforth control use of hash joins only. In addition, both inner and outer
    joins (including semijoins and antijoins) can now employ batched key access (BKA),
    which allocates join buffer memory incrementally so that individual queries need
    not use up large amounts of resources that they do not actually require for resolution.
    BKA for inner joins only is supported starting with MySQL 8.0.18.
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.20及更高版本中，MySQL服务器不再使用块嵌套循环，而是在以前会使用块嵌套循环的任何时候都使用哈希连接，即使查询不包含等值连接条件。这适用于内部非等值连接、半连接、反连接、左外连接和右外连接。[`block_nested_loop`](switchable-optimizations.html#optflag_block-nested-loop)标志用于[`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)系统变量，以及[`BNL`](optimizer-hints.html#optimizer-hints-table-level
    "表级优化提示")和`NO_BNL`优化提示仍然受支持，但从现在开始仅控制哈希连接的使用。此外，内部和外部连接（包括半连接和反连接）现在都可以使用批量键访问（BKA），该方法逐步分配连接缓冲区内存，以便个别查询不必使用实际上并不需要的大量资源来解决问题。从MySQL
    8.0.18开始，仅支持内部连接的BKA。
- en: MySQL 8.0.20 also replaces the executor used in previous versions of MySQL with
    the iterator executor. This work includes replacement of the old index subquery
    engines that governed queries of the form `WHERE *`value`* IN (SELECT *`column`*
    FROM *`table`* WHERE ...)` for those `IN` queries which have not been optimized
    as semijoins, as well as queries materialized in the same form, which formerly
    depended on the old executor.
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 8.0.20还用迭代器执行器替换了先前版本MySQL中使用的执行器。此工作包括替换了旧的索引子查询引擎，该引擎控制形式为`WHERE *`value`*
    IN (SELECT *`column`* FROM *`table`* WHERE ...)`的查询，对于那些未被优化为半连接的`IN`查询，以及以相同形式材料化的查询，这些查询以前依赖于旧执行器。
- en: For more information and examples, see [Section 10.2.1.4, “Hash Join Optimization”](hash-joins.html
    "10.2.1.4 Hash Join Optimization"). See also [Batched Key Access Joins](bnl-bka-optimization.html#bka-optimization
    "Batched Key Access Joins").
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息和示例，请参阅[第10.2.1.4节，“哈希连接优化”](hash-joins.html "10.2.1.4 哈希连接优化")。另请参阅[批量键访问连接](bnl-bka-optimization.html#bka-optimization
    "批量键访问连接")。
- en: '**EXPLAIN ANALYZE Statement. ** A new form of the [`EXPLAIN`](explain.html
    "15.8.2 EXPLAIN Statement") statement, [`EXPLAIN ANALYZE`](explain.html#explain-analyze
    "Obtaining Information with EXPLAIN ANALYZE"), is implemented in MySQL 8.0.18,
    providing expanded information about the execution of [`SELECT`](select.html "15.2.13 SELECT
    Statement") statements in `TREE` format for each iterator used in processing the
    query, and making it possible to compare estimated cost with the actual cost of
    the query. This information includes startup cost, total cost, number of rows
    returned by this iterator, and the number of loops executed.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EXPLAIN ANALYZE 语句。** MySQL 8.0.18 中实现了一种新形式的[`EXPLAIN`](explain.html "15.8.2 EXPLAIN
    语句")语句，[`EXPLAIN ANALYZE`](explain.html#explain-analyze "使用 EXPLAIN ANALYZE 获取信息")，为每个用于处理查询的迭代器提供了关于[`SELECT`](select.html
    "15.2.13 SELECT 语句")语句执行的`TREE`格式的扩展信息，使得可以比较查询的预估成本与实际成本。这些信息包括启动成本、总成本、此迭代器返回的行数以及执行的循环次数。'
- en: In MySQL 8.0.21 and later, this statement also supports a `FORMAT=TREE` specifier.
    `TREE` is the only supported format.
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.21 及更高版本中，此语句还支持`FORMAT=TREE`指定符。`TREE`是唯一支持的格式。
- en: See [Obtaining Information with EXPLAIN ANALYZE](explain.html#explain-analyze
    "Obtaining Information with EXPLAIN ANALYZE"), for more information.
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看[使用 EXPLAIN ANALYZE 获取信息](explain.html#explain-analyze "使用 EXPLAIN ANALYZE
    获取信息")，获取更多信息。
- en: '**Query cast injection. ** In version 8.0.18 and later, MySQL injects cast
    operations into the query item tree inside expressions and conditions in which
    the data type of the argument and the expected data type do not match. This has
    no effect on query results or speed of execution, but makes the query as executed
    equivalent to one which is compliant with the SQL standard while maintaining backwards
    compatibility with previous releases of MySQL.'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询转换注入。** 在版本 8.0.18 及更高版本中，MySQL将转换操作注入到表达式和条件中的查询项树中，其中参数的数据类型与预期数据类型不匹配。这不会影响查询结果或执行速度，但使得执行的查询等效于符合
    SQL 标准的查询，同时保持与之前版本的 MySQL 的向后兼容性。'
- en: Such implicit casts are now performed between temporal types ([`DATE`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), [`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), [`TIME`](time.html "13.2.3 The
    TIME Type")) and numeric types ([`SMALLINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`TINYINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT"), [`MEDIUMINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`INT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT")/[`INTEGER`](integer-types.html "13.1.2 Integer Types (Exact Value) -
    INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), [`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT"); [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point Types (Exact
    Value) - DECIMAL, NUMERIC")/[`NUMERIC`](fixed-point-types.html "13.1.3 Fixed-Point
    Types (Exact Value) - DECIMAL, NUMERIC"); [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"), [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"), [`REAL`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"); [`BIT`](bit-type.html
    "13.1.5 Bit-Value Type - BIT")) whenever they are compared using any of the standard
    numeric comparison operators ([`=`](assignment-operators.html#operator_assign-equal),
    [`>=`](comparison-operators.html#operator_greater-than-or-equal), [`>`](comparison-operators.html#operator_greater-than),
    [`<`](comparison-operators.html#operator_less-than), [`<=`](comparison-operators.html#operator_less-than-or-equal),
    [`<>`](comparison-operators.html#operator_not-equal)/[`!=`](comparison-operators.html#operator_not-equal),
    or [`<=>`](comparison-operators.html#operator_equal-to)). In this case, any value
    that is not already a `DOUBLE` is cast as one. Cast injection is also now performed
    for comparisons between [`DATE`](datetime.html "13.2.2 The DATE, DATETIME, and
    TIMESTAMP Types") or [`TIME`](time.html "13.2.3 The TIME Type") values and [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") values, where the arguments
    are cast whenever necessary as `DATETIME`.
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种隐式转换现在在时间类型（[`DATE`](datetime.html "13.2.2 日期、DATETIME 和 TIMESTAMP 类型"), [`DATETIME`](datetime.html
    "13.2.2 日期、DATETIME 和 TIMESTAMP 类型"), [`TIMESTAMP`](datetime.html "13.2.2 日期、DATETIME
    和 TIMESTAMP 类型"), [`TIME`](time.html "13.2.3 TIME 类型")) 和数值类型（[`SMALLINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT"), [`TINYINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT"), [`MEDIUMINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT"), [`INT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT")/[`INTEGER`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT"), [`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER、INT、SMALLINT、TINYINT、MEDIUMINT、BIGINT"); [`DECIMAL`](fixed-point-types.html
    "13.1.3 定点类型（精确值） - DECIMAL、NUMERIC")/[`NUMERIC`](fixed-point-types.html "13.1.3 定点类型（精确值）
    - DECIMAL、NUMERIC"); [`FLOAT`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT、DOUBLE"),
    [`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值） - FLOAT、DOUBLE"), [`REAL`](floating-point-types.html
    "13.1.4 浮点类型（近似值） - FLOAT、DOUBLE"); [`BIT`](bit-type.html "13.1.5 位值类型 - BIT"))
    之间以及它们使用任何标准数值比较运算符（[`=`](assignment-operators.html#operator_assign-equal), [`>=`](comparison-operators.html#operator_greater-than-or-equal),
    [`>`](comparison-operators.html#operator_greater-than), [`<`](comparison-operators.html#operator_less-than),
    [`<=`](comparison-operators.html#operator_less-than-or-equal), [`<>`](comparison-operators.html#operator_not-equal)/[`!=`](comparison-operators.html#operator_not-equal),
    或 [`<=>`](comparison-operators.html#operator_equal-to)) 进行比较时执行。在这种情况下，任何不是`DOUBLE`的值都会被转换为`DOUBLE`。现在还会对[`DATE`](datetime.html
    "13.2.2 日期、DATETIME 和 TIMESTAMP 类型")或[`TIME`](time.html "13.2.3 TIME 类型")值与[`DATETIME`](datetime.html
    "13.2.2 日期、DATETIME 和 TIMESTAMP 类型")值之间的比较执行转换注入，其中在必要时将参数转换为`DATETIME`。
- en: Beginning with MySQL 8.0.21, such casts are also performed when comparing string
    types with other types. String types that are cast include [`CHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), [`VARCHAR`](char.html "13.3.2 The CHAR and
    VARCHAR Types"), [`BINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY
    Types"), [`VARBINARY`](binary-varbinary.html "13.3.3 The BINARY and VARBINARY
    Types"), [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types"), [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types"), [`ENUM`](enum.html "13.3.5 The ENUM Type"),
    and [`SET`](set.html "13.3.6 The SET Type"). When comparing a value of a string
    type with a numeric type or `YEAR`, the string cast is to `DOUBLE`; if the type
    of the other argument is not `FLOAT`, `DOUBLE`, or `REAL`, it is also cast to
    `DOUBLE`. When comparing a string type to a `DATETIME` or `TIMESTAMP` value, the
    string is cast is to `DATETIME`; when comparing a string type with `DATE`, the
    string is cast to `DATE`.
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.21开始，当将字符串类型与其他类型进行比较时，也会执行这种转换。进行转换的字符串类型包括[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")，[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")，[`BINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型")，[`VARBINARY`](binary-varbinary.html
    "13.3.3 BINARY和VARBINARY类型")，[`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")，[`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")，[`ENUM`](enum.html "13.3.5 ENUM类型")和[`SET`](set.html "13.3.6 SET类型")。将字符串类型的值与数值类型或`YEAR`进行比较时，字符串转换为`DOUBLE`；如果另一个参数的类型不是`FLOAT`，`DOUBLE`或`REAL`，则也将其转换为`DOUBLE`。将字符串类型与`DATETIME`或`TIMESTAMP`值进行比较时，字符串转换为`DATETIME`；将字符串类型与`DATE`进行比较时，字符串转换为`DATE`。
- en: 'It is possible to see when casts are injected into a given query by viewing
    the output of [`EXPLAIN ANALYZE`](explain.html#explain-analyze "Obtaining Information
    with EXPLAIN ANALYZE"), `EXPLAIN FORMAT=JSON`, or, as shown here, `EXPLAIN FORMAT=TREE`:'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过查看[`EXPLAIN ANALYZE`](explain.html#explain-analyze "使用EXPLAIN ANALYZE获取信息")，`EXPLAIN
    FORMAT=JSON`或者如下所示的`EXPLAIN FORMAT=TREE`来查看将转换注入到给定查询中的情况：
- en: '[PRE14]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Such casts can also be seen by executing `EXPLAIN [FORMAT=TRADITIONAL]`, in
    which case it is also necessary to issue [`SHOW WARNINGS`](show-warnings.html
    "15.7.7.42 SHOW WARNINGS Statement") after executing the `EXPLAIN` statement.
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还可以通过执行`EXPLAIN [FORMAT=TRADITIONAL]`来查看这种转换，此时还需要在执行`EXPLAIN`语句后发出[`SHOW WARNINGS`](show-warnings.html
    "15.7.7.42 SHOW WARNINGS语句")。
- en: '**Time zone support for TIMESTAMP and DATETIME. ** As of MySQL 8.0.19, the
    server accepts a time zone offset with inserted datetime ([`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") and [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")) values. This offset uses the
    same format as that employed when setting the [`time_zone`](server-system-variables.html#sysvar_time_zone)
    system variable, except that a leading zero is required when the hours portion
    of the offset is less than 10, and `''-00:00''` is not allowed. Examples of datetime
    literals that include time zone offsets are `''2019-12-11 10:40:30-05:00''`, `''2003-04-14
    03:30:00+10:00''`, and `''2020-01-01 15:35:45+05:30''`.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TIMESTAMP和DATETIME的时区支持。** 从MySQL 8.0.19开始，服务器接受插入日期时间（[`TIMESTAMP`](datetime.html
    "13.2.2 日期、DATETIME和TIMESTAMP类型")和[`DATETIME`](datetime.html "13.2.2 日期、DATETIME和TIMESTAMP类型")）值的时区偏移量。此偏移量使用与设置[`time_zone`](server-system-variables.html#sysvar_time_zone)系统变量时使用的相同格式，只是当偏移量的小时部分小于10时需要前导零，并且不允许`''-00:00''`。包含时区偏移量的日期时间文字示例包括`''2019-12-11
    10:40:30-05:00''`，`''2003-04-14 03:30:00+10:00''`和`''2020-01-01 15:35:45+05:30''`。'
- en: Time zone offsets are not displayed when selecting datetime values.
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择日期时间值时，不显示时区偏移量。
- en: Datetime literals incorporating time zone offsets can be used as prepared statement
    parameter values.
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以将包含时区偏移量的日期时间文字用作预备语句参数值。
- en: As part of this work, the value used to set the [`time_zone`](server-system-variables.html#sysvar_time_zone)
    system variable is now also restricted to the range `-13:59` to `+14:00`, inclusive.
    (It remains possible to assign name values to `time_zone` such as `'EST'`, `'Posix/Australia/Brisbane'`,
    and `'Europe/Stockholm'` to this variable, provided that the MySQL time zone tables
    are loaded; see [Populating the Time Zone Tables](time-zone-support.html#time-zone-installation
    "Populating the Time Zone Tables")).
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这项工作的一部分，用于设置[`time_zone`](server-system-variables.html#sysvar_time_zone)系统变量的值现在也限制在`-13:59`到`+14:00`的范围内（仍然可以将名称值分配给`time_zone`，例如`'EST'`，`'Posix/Australia/Brisbane'`和`'Europe/Stockholm'`到这个变量，前提是MySQL时区表已加载；参见[填充时区表](time-zone-support.html#time-zone-installation
    "填充时区表")）。
- en: For more information and examples, see [Section 7.1.15, “MySQL Server Time Zone
    Support”](time-zone-support.html "7.1.15 MySQL Server Time Zone Support"), as
    well as [Section 13.2.2, “The DATE, DATETIME, and TIMESTAMP Types”](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types").
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参见[第7.1.15节，“MySQL服务器时区支持”](time-zone-support.html "7.1.15 MySQL服务器时区支持")，以及[第13.2.2节，“DATE、DATETIME和TIMESTAMP类型”](datetime.html
    "13.2.2 DATE、DATETIME和TIMESTAMP类型")。
- en: '**Precise information for JSON schema CHECK constraint failures. ** When using
    [`JSON_SCHEMA_VALID()`](json-validation-functions.html#function_json-schema-valid)
    to specify a `CHECK` constraint, MySQL 8.0.19 and later provides precise information
    about the reasons for failures of such constraints.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON模式CHECK约束失败的精确信息。** 当使用[`JSON_SCHEMA_VALID()`](json-validation-functions.html#function_json-schema-valid)指定`CHECK`约束时，MySQL
    8.0.19及更高版本提供有关此类约束失败原因的精确信息。'
- en: For examples and more information, see [JSON_SCHEMA_VALID() and CHECK constraints](json-validation-functions.html#json-validation-functions-constraints
    "JSON_SCHEMA_VALID() and CHECK constraints"). See also [Section 15.1.20.6, “CHECK
    Constraints”](create-table-check-constraints.html "15.1.20.6 CHECK Constraints").
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关示例和更多信息，请参见[JSON_SCHEMA_VALID()和CHECK约束](json-validation-functions.html#json-validation-functions-constraints
    "JSON_SCHEMA_VALID()和CHECK约束")。另请参见[第15.1.20.6节，“CHECK约束”](create-table-check-constraints.html
    "15.1.20.6 CHECK约束")。
- en: '**Row and column aliases with ON DUPLICATE KEY UPDATE. ** Beginning with MySQL
    8.0.19, it is possible to reference the row to be inserted, and, optionally, its
    columns, using aliases. Consider the following [`INSERT`](insert.html "15.2.7 INSERT
    Statement") statement on a table `t` having columns `a` and `b`:'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带有ON DUPLICATE KEY UPDATE的行和列别名。** 从MySQL 8.0.19开始，可以使用别名引用要插入的行，以及可选地引用其列。考虑在具有列`a`和`b`的表`t`上执行以下[`INSERT`](insert.html
    "15.2.7 INSERT语句")语句：'
- en: '[PRE15]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using the alias `new` for the new row, and, in some cases, the aliases `m`
    and `n` for this row''s columns, the `INSERT` statement can be rewritten in many
    different ways, some examples of which are shown here:'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用别名`new`表示新行，并且在某些情况下，使用别名`m`和`n`表示此行的列，`INSERT`语句可以以许多不同的方式重写，以下是一些示例：
- en: '[PRE16]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For more information and examples, see [Section 15.2.7.2, “INSERT ... ON DUPLICATE
    KEY UPDATE Statement”](insert-on-duplicate.html "15.2.7.2 INSERT ... ON DUPLICATE
    KEY UPDATE Statement").
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参见[第15.2.7.2节，“INSERT ... ON DUPLICATE KEY UPDATE语句”](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE语句")。
- en: '**SQL standard explicit table clause and table value constructor. ** Added
    table value constructors and explicit table clauses according to the SQL standard.
    These are implemented in MySQL 8.0.19, respectively, as the [`TABLE`](table.html
    "15.2.16 TABLE Statement") statement and the [`VALUES`](values.html "15.2.19 VALUES
    Statement") statement.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL标准明确的表子句和表值构造函数。** 根据SQL标准添加了表值构造函数和明确的表子句。这些分别在MySQL 8.0.19中实现为[`TABLE`](table.html
    "15.2.16 TABLE语句")语句和[`VALUES`](values.html "15.2.19 VALUES语句")语句。'
- en: 'The [`TABLE`](table.html "15.2.16 TABLE Statement") statement has the format
    `TABLE *`table_name`*`, and is equivalent to `SELECT * FROM *`table_name`*`. It
    supports `ORDER BY` and `LIMIT` clauses ( the latter with optional `OFFSET`),
    but does not allow for the selection of individual table columns. `TABLE` can
    be used anywhere that you would employ the equivalent [`SELECT`](select.html "15.2.13 SELECT
    Statement") statement; this includes joins, unions, [`INSERT ... SELECT`](insert-select.html
    "15.2.7.1 INSERT ... SELECT Statement"), [`REPLACE`](replace.html "15.2.12 REPLACE
    Statement"), [`CREATE TABLE ... SELECT`](create-table-select.html "15.1.20.4 CREATE
    TABLE ... SELECT Statement") statements, and subqueries. For example:'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TABLE`](table.html "15.2.16 TABLE语句")语句的格式为`TABLE *`table_name`*`，等同于`SELECT
    * FROM *`table_name`*`。它支持`ORDER BY`和`LIMIT`子句（后者带有可选的`OFFSET`），但不允许选择单个表列。`TABLE`可以在任何需要等效[`SELECT`](select.html
    "15.2.13 SELECT语句")语句的地方使用；这包括连接、联合、[`INSERT ... SELECT`](insert-select.html "15.2.7.1 INSERT
    ... SELECT语句")、[`REPLACE`](replace.html "15.2.12 REPLACE语句")、[`CREATE TABLE ...
    SELECT`](create-table-select.html "15.1.20.4 CREATE TABLE ... SELECT语句")语句和子查询。例如：'
- en: '`TABLE t1 UNION TABLE t2` is equivalent to `SELECT * FROM t1 UNION SELECT *
    FROM t2`'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE t1 UNION TABLE t2`等同于`SELECT * FROM t1 UNION SELECT * FROM t2`'
- en: '`CREATE TABLE t2 TABLE t1` is equivalent to `CREATE TABLE t2 SELECT * FROM
    t1`'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CREATE TABLE t2 TABLE t1`等同于`CREATE TABLE t2 SELECT * FROM t1`'
- en: '`SELECT a FROM t1 WHERE b > ANY (TABLE t2)` is equivalent to `SELECT a FROM
    t1 WHERE b > ANY (SELECT * FROM t2)`.'
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELECT a FROM t1 WHERE b > ANY (TABLE t2)`等同于`SELECT a FROM t1 WHERE b > ANY
    (SELECT * FROM t2)`。'
- en: '[`VALUES`](values.html "15.2.19 VALUES Statement") can be used to supply a
    table value to an [`INSERT`](insert.html "15.2.7 INSERT Statement"), [`REPLACE`](replace.html
    "15.2.12 REPLACE Statement"), or [`SELECT`](select.html "15.2.13 SELECT Statement")
    statement, and consists of the `VALUES` keyword followed by a series of row constructors
    (`ROW()`) separated by commas. For example, the statement `INSERT INTO t1 VALUES
    ROW(1,2,3), ROW(4,5,6), ROW(7,8,9)` provides an SQL-compliant equivalent to the
    MySQL-specific `INSERT INTO t1 VALUES (1,2,3), (4,5,6), (7,8,9)`. You can also
    select from a [`VALUES`](values.html "15.2.19 VALUES Statement") table value constructor
    just as you would a table, bearing in mind that you must supply a table alias
    when doing so, and use this [`SELECT`](select.html "15.2.13 SELECT Statement")
    just as you would any other; this includes joins, unions, and subqueries.'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`VALUES`](values.html "15.2.19 VALUES Statement") 可用于向 [`INSERT`](insert.html
    "15.2.7 INSERT Statement")、[`REPLACE`](replace.html "15.2.12 REPLACE Statement")
    或 [`SELECT`](select.html "15.2.13 SELECT Statement") 语句提供表值，由 `VALUES` 关键字后跟一系列由逗号分隔的行构造函数
    (`ROW()`) 组成。例如，语句 `INSERT INTO t1 VALUES ROW(1,2,3), ROW(4,5,6), ROW(7,8,9)`
    提供了一个符合 SQL 标准的等效于 MySQL 特定的 `INSERT INTO t1 VALUES (1,2,3), (4,5,6), (7,8,9)`。您也可以像操作表一样从
    [`VALUES`](values.html "15.2.19 VALUES Statement") 表值构造函数中选择，但请记住在这样做时必须提供表别名，并像操作其他表一样使用这个
    [`SELECT`](select.html "15.2.13 SELECT Statement")；这包括连接、联合和子查询。'
- en: 'For more information about `TABLE` and `VALUES`, and for examples of their
    use, see the following sections of this documentation:'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关 `TABLE` 和 `VALUES` 的更多信息，以及它们的使用示例，请参阅本文档的以下部分：
- en: '[Section 15.2.16, “TABLE Statement”](table.html "15.2.16 TABLE Statement")'
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 15.2.16 节，“TABLE 语句”](table.html "15.2.16 TABLE Statement")'
- en: '[Section 15.2.19, “VALUES Statement”](values.html "15.2.19 VALUES Statement")'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 15.2.19 节，“VALUES 语句”](values.html "15.2.19 VALUES Statement")'
- en: '[Section 15.1.20.4, “CREATE TABLE ... SELECT Statement”](create-table-select.html
    "15.1.20.4 CREATE TABLE ... SELECT Statement")'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 15.1.20.4 节，“CREATE TABLE ... SELECT 语句”](create-table-select.html "15.1.20.4 CREATE
    TABLE ... SELECT Statement")'
- en: '[Section 15.2.7.1, “INSERT ... SELECT Statement”](insert-select.html "15.2.7.1 INSERT
    ... SELECT Statement")'
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 15.2.7.1 节，“INSERT ... SELECT 语句”](insert-select.html "15.2.7.1 INSERT ...
    SELECT Statement")'
- en: '[Section 15.2.13.2, “JOIN Clause”](join.html "15.2.13.2 JOIN Clause")'
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 15.2.13.2 节，“JOIN 子句”](join.html "15.2.13.2 JOIN Clause")'
- en: '[Section 15.2.15, “Subqueries”](subqueries.html "15.2.15 Subqueries")'
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 15.2.15 节，“子查询”](subqueries.html "15.2.15 Subqueries")'
- en: '[Section 15.2.18, “UNION Clause”](union.html "15.2.18 UNION Clause")'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 15.2.18 节，“UNION 子句”](union.html "15.2.18 UNION Clause")'
- en: '**Optimizer hints for FORCE INDEX, IGNORE INDEX. ** MySQL 8.0 introduces index-level
    optimizer hints which serve as analogs to the traditional index hints as described
    in [Section 10.9.4, “Index Hints”](index-hints.html "10.9.4 Index Hints"). The
    new hints are listed here, along with their `FORCE INDEX` or `IGNORE INDEX` equivalents:'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FORCE INDEX、IGNORE INDEX 的优化器提示。** MySQL 8.0 引入了索引级别的优化器提示，作为传统索引提示的类似物，如
    [第 10.9.4 节，“索引提示”](index-hints.html "10.9.4 Index Hints") 中所述。新提示在此列出，以及它们的 `FORCE
    INDEX` 或 `IGNORE INDEX` 等效项：'
- en: '[`GROUP_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints"): Equivalent to `FORCE INDEX FOR GROUP BY`'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`GROUP_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints")：等同于 `FORCE INDEX FOR GROUP BY`'
- en: '[`NO_GROUP_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints"): Equivalent to `IGNORE INDEX FOR GROUP BY`'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`NO_GROUP_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints")：等同于 `IGNORE INDEX FOR GROUP BY`'
- en: '[`JOIN_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints"): Equivalent to `FORCE INDEX FOR JOIN`'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JOIN_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints")：等同于 `FORCE INDEX FOR JOIN`'
- en: '[`NO_JOIN_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints"): Equivalent to `IGNORE INDEX FOR JOIN`'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`NO_JOIN_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints")：等同于 `IGNORE INDEX FOR JOIN`'
- en: '[`ORDER_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints"): Equivalent to `FORCE INDEX FOR ORDER BY`'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ORDER_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints")：等同于 `FORCE INDEX FOR ORDER BY`'
- en: '[`NO_ORDER_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints"): Equivalent to `IGNORE INDEX FOR ORDER BY`'
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`NO_ORDER_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints")：等同于 `IGNORE INDEX FOR ORDER BY`'
- en: '[`INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level Optimizer
    Hints"): Same as [`GROUP_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints") plus [`JOIN_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints") plus [`ORDER_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints"); equivalent to `FORCE INDEX` with no modifier'
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`INDEX`](optimizer-hints.html#optimizer-hints-index-level "索引级别优化提示")：与[`GROUP_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "索引级别优化提示")、[`JOIN_INDEX`](optimizer-hints.html#optimizer-hints-index-level "索引级别优化提示")和[`ORDER_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "索引级别优化提示")相同；相当于没有修饰符的`FORCE INDEX`'
- en: '[`NO_INDEX`](optimizer-hints.html#optimizer-hints-index-level "Index-Level
    Optimizer Hints"): Same as [`NO_GROUP_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints") plus [`NO_JOIN_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints") plus [`NO_ORDER_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints"); equivalent to `IGNORE INDEX` with no modifier'
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`NO_INDEX`](optimizer-hints.html#optimizer-hints-index-level "索引级别优化提示")：与[`NO_GROUP_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "索引级别优化提示")、[`NO_JOIN_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "索引级别优化提示")和[`NO_ORDER_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "索引级别优化提示")相同；相当于没有修饰符的`IGNORE INDEX`'
- en: 'For example, the following two queries are equivalent:'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，以下两个查询是等效的：
- en: '[PRE17]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The optimizer hints listed previously follow the same basic rules for syntax
    and usage as existing index-level optimizer hints.
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 先前列出的优化提示遵循与现有索引级别优化提示相同的基本语法和用法规则。
- en: These optimizer hints are intended to replace `FORCE INDEX` and `IGNORE INDEX`,
    which we plan to deprecate in a future MySQL release, and subsequently to remove
    from MySQL. They do not implement a single exact equivalent for `USE INDEX`; instead,
    you can employ one or more of [`NO_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints"), [`NO_JOIN_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints"), [`NO_GROUP_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints"), or [`NO_ORDER_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints") to achieve the same effect.
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些优化提示旨在取代`FORCE INDEX`和`IGNORE INDEX`，我们计划在未来的MySQL版本中弃用，并随后从MySQL中删除。它们不实现`USE
    INDEX`的单个精确等效项；相反，你可以使用[`NO_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "索引级别优化提示")、[`NO_JOIN_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "索引级别优化提示")、[`NO_GROUP_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "索引级别优化提示")或[`NO_ORDER_INDEX`](optimizer-hints.html#optimizer-hints-index-level
    "索引级别优化提示")中的一个或多个来实现相同的效果。
- en: For further information and examples of use, see [Index-Level Optimizer Hints](optimizer-hints.html#optimizer-hints-index-level
    "Index-Level Optimizer Hints").
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息和使用示例，请参阅[索引级别优化提示](optimizer-hints.html#optimizer-hints-index-level
    "索引级别优化提示")。
- en: '**JSON_VALUE() function. ** MySQL 8.0.21 implements a new function [`JSON_VALUE()`](json-search-functions.html#function_json-value)
    intended to simplify indexing of [`JSON`](json.html "13.5 The JSON Data Type")
    columns. In its most basic form, it takes as arguments a JSON document and a JSON
    path pointing to a single value in that document, as well as (optionally) allowing
    you to specify a return type with the `RETURNING` keyword. `JSON_VALUE(*`json_doc`*,
    *`path`* RETURNING *`type`*)` is equivalent to this:'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON_VALUE()函数。** MySQL 8.0.21实现了一个新函数[`JSON_VALUE()`](json-search-functions.html#function_json-value)，旨在简化对[`JSON`](json.html
    "13.5 JSON数据类型")列的索引。在其最基本形式中，它接受一个JSON文档和指向该文档中单个值的JSON路径作为参数，还允许你使用`RETURNING`关键字指定返回类型（可选）。`JSON_VALUE(*`json_doc`*,
    *`path`* RETURNING *`type`*)`等效于这个：'
- en: '[PRE18]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can also specify `ON EMPTY`, `ON ERROR`, or both clauses, similar to those
    employed with [`JSON_TABLE()`](json-table-functions.html#function_json-table).
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还可以指定`ON EMPTY`、`ON ERROR`或两者子句，类似于与[`JSON_TABLE()`](json-table-functions.html#function_json-table)一起使用的方式。
- en: 'You can use `JSON_VALUE()` to create an index on an expression on a `JSON`
    column like this:'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用`JSON_VALUE()`来在`JSON`列上创建表达式索引，就像这样：
- en: '[PRE19]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A query using this expression, such as that shown here, can make use of the
    index:'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此表达式的查询，如下所示，可以利用索引：
- en: '[PRE20]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In many cases, this is simpler than creating a generated column from the `JSON`
    column and then creating an index on the generated column.
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在许多情况下，这比从`JSON`列创建生成列，然后在生成列上创建索引更简单。
- en: For more information and examples, see the description of [`JSON_VALUE()`](json-search-functions.html#function_json-value).
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参阅[`JSON_VALUE()`](json-search-functions.html#function_json-value)的描述。
- en: '**User comments and user attributes. ** MySQL 8.0.21 introduces the ability
    to set user comments and user attributes when creating or updating user accounts.
    A user comment consists of arbitrary text passed as the argument to a `COMMENT`
    clause used with a [`CREATE USER`](create-user.html "15.7.1.3 CREATE USER Statement")
    or [`ALTER USER`](alter-user.html "15.7.1.1 ALTER USER Statement") statement.
    A user attribute consists of data in the form of a JSON object passed as the argument
    to an `ATTRIBUTE` clause used with either of these two statements. The attribute
    can contain any valid key-value pairs in JSON object notation. Only one of `COMMENT`
    or `ATTRIBUTE` can be used in a single `CREATE USER` or `ALTER USER` statement.'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户评论和用户属性。** MySQL 8.0.21引入了在创建或更新用户帐户时设置用户评论和用户属性的功能。用户评论由作为[`CREATE USER`](create-user.html
    "15.7.1.3 CREATE USER Statement")或[`ALTER USER`](alter-user.html "15.7.1.1 ALTER
    USER Statement")语句中使用的`COMMENT`子句的参数传递的任意文本组成。用户属性由作为这两个语句之一中使用的`ATTRIBUTE`子句的参数传递的JSON对象形式的数据组成。属性可以包含JSON对象表示法中的任何有效键值对。在单个`CREATE
    USER`或`ALTER USER`语句中只能使用`COMMENT`或`ATTRIBUTE`中的一个。'
- en: User comments and user attributes are stored together internally as a JSON object,
    the comment text as the value of an element having `comment` as its key. This
    information can be retrieved from the `ATTRIBUTE` column of the Information Schema
    [`USER_ATTRIBUTES`](information-schema-user-attributes-table.html "28.3.46 The
    INFORMATION_SCHEMA USER_ATTRIBUTES Table") table; since it is in JSON format,
    you can use MySQL's JSON function and operators to parse its contents (see [Section 14.17,
    “JSON Functions”](json-functions.html "14.17 JSON Functions")). Successive changes
    to the user attribute are merged with its current value as when using the [`JSON_MERGE_PATCH()`](json-modification-functions.html#function_json-merge-patch)
    function.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户评论和用户属性在内部一起存储为JSON对象，评论文本作为具有`comment`作为其键的元素的值。此信息可以从Information Schema
    [`USER_ATTRIBUTES`](information-schema-user-attributes-table.html "28.3.46 The
    INFORMATION_SCHEMA USER_ATTRIBUTES Table")表的`ATTRIBUTE`列中检索；由于它是以JSON格式，您可以使用MySQL的JSON函数和运算符来解析其内容（参见[第14.17节，“JSON函数”](json-functions.html
    "14.17 JSON Functions")）。对用户属性的连续更改与其当前值合并，就像使用[`JSON_MERGE_PATCH()`](json-modification-functions.html#function_json-merge-patch)函数一样。
- en: 'Example:'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE21]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: For more information and examples, see [Section 15.7.1.3, “CREATE USER Statement”](create-user.html
    "15.7.1.3 CREATE USER Statement"), [Section 15.7.1.1, “ALTER USER Statement”](alter-user.html
    "15.7.1.1 ALTER USER Statement"), and [Section 28.3.46, “The INFORMATION_SCHEMA
    USER_ATTRIBUTES Table”](information-schema-user-attributes-table.html "28.3.46 The
    INFORMATION_SCHEMA USER_ATTRIBUTES Table").
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参阅[第15.7.1.3节，“CREATE USER语句”](create-user.html "15.7.1.3 CREATE
    USER Statement")，[第15.7.1.1节，“ALTER USER语句”](alter-user.html "15.7.1.1 ALTER USER
    Statement")和[第28.3.46节，“INFORMATION_SCHEMA USER_ATTRIBUTES表”](information-schema-user-attributes-table.html
    "28.3.46 The INFORMATION_SCHEMA USER_ATTRIBUTES Table")。
- en: '**New optimizer_switch flags. ** MySQL 8.0.21 adds two new flags for the [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    system variable, as described in the following list:'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新的optimizer_switch标志。** MySQL 8.0.21添加了两个新标志用于[`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)系统变量，如下列表所述：'
- en: '[`prefer_ordering_index`](switchable-optimizations.html#optflag_prefer-ordering-index)
    flag'
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`prefer_ordering_index`](switchable-optimizations.html#optflag_prefer-ordering-index)标志'
- en: By default, MySQL attempts to use an ordered index for any `ORDER BY` or `GROUP
    BY` query that has a `LIMIT` clause, whenever the optimizer determines that this
    would result in faster execution. Because it is possible in some cases that choosing
    a different optimization for such queries actually performs better, it is now
    possible to disable this optimization by setting the [`prefer_ordering_index`](switchable-optimizations.html#optflag_prefer-ordering-index)
    flag to `off`.
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，MySQL尝试对具有`LIMIT`子句的任何`ORDER BY`或`GROUP BY`查询使用有序索引，只要优化器确定这样做会导致更快的执行。因为在某些情况下选择不同的优化对于这些查询实际上执行更好是可能的，现在可以通过将[`prefer_ordering_index`](switchable-optimizations.html#optflag_prefer-ordering-index)标志设置为`off`来禁用此优化。
- en: The default value for this flag is `on`.
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此标志的默认值为`on`。
- en: '[`subquery_to_derived`](switchable-optimizations.html#optflag_subquery-to-derived)
    flag'
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`subquery_to_derived`](switchable-optimizations.html#optflag_subquery-to-derived)标志'
- en: When this flag is set to `on`, the optimizer transforms eligible scalar subqueries
    into joins on derived tables. For example, the query `SELECT * FROM t1 WHERE t1.a
    > (SELECT COUNT(a) FROM t2)` is rewritten as `SELECT t1.a FROM t1 JOIN ( SELECT
    COUNT(t2.a) AS c FROM t2 ) AS d WHERE t1.a > d.c`.
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当该标志设置为`on`时，优化器将符合条件的标量子查询转换为对派生表的连接。例如，查询`SELECT * FROM t1 WHERE t1.a > (SELECT
    COUNT(a) FROM t2)`被重写为`SELECT t1.a FROM t1 JOIN ( SELECT COUNT(t2.a) AS c FROM
    t2 ) AS d WHERE t1.a > d.c`。
- en: This optimization can be applied to a subquery which is part of a `SELECT`,
    `WHERE`, `JOIN`, or `HAVING` clause; contains one or more aggregate functions
    but no `GROUP BY` clause; is not correlated; and does not use any nondeterministic
    functions.
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种优化可以应用于子查询，该子查询是`SELECT`、`WHERE`、`JOIN`或`HAVING`子句的一部分；包含一个或多个聚合函数但没有`GROUP
    BY`子句；不是相关的；并且不使用任何非确定性函数。
- en: The optimization can also be applied to a table subquery which is the argument
    to `IN`, `NOT IN`, `EXISTS`, or `NOT EXISTS`, and which does not contain a `GROUP
    BY`. For example, the query `SELECT * FROM t1 WHERE t1.b < 0 OR t1.a IN (SELECT
    t2.a + 1 FROM t2)` is rewritten as `SELECT a, b FROM t1 LEFT JOIN (SELECT DISTINCT
    1 AS e1, t2.a AS e2 FROM t2) d ON t1.a + 1 = d.e2 WHERE t1.b < 0 OR d.e1 IS NOT
    NULL`.
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该优化也可以应用于作为`IN`、`NOT IN`、`EXISTS`或`NOT EXISTS`参数的表子查询，并且不包含`GROUP BY`。例如，查询`SELECT
    * FROM t1 WHERE t1.b < 0 OR t1.a IN (SELECT t2.a + 1 FROM t2)`被重写为`SELECT a, b
    FROM t1 LEFT JOIN (SELECT DISTINCT 1 AS e1, t2.a AS e2 FROM t2) d ON t1.a + 1
    = d.e2 WHERE t1.b < 0 OR d.e1 IS NOT NULL`。
- en: Starting with MySQL 8.0.24, this optimization can also be applied to a correlated
    scalar subquery by applying an extra grouping to it, and then an outer join on
    the lifted predicate. For example, a query such as `SELECT * FROM t1 WHERE (SELECT
    a FROM t2 WHERE t2.a=t1.a) > 0` can be rewritten as `SELECT t1.* FROM t1 LEFT
    OUTER JOIN (SELECT a, COUNT(*) AS ct FROM t2 GROUP BY a) AS derived ON t1.a =
    derived.a WHERE derived.a > 0`. MySQL performs a cardinality check to make sure
    that the subquery does not return more than one row ([`ER_SUBQUERY_NO_1_ROW`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_subquery_no_1_row)).
    See [Section 15.2.15.7, “Correlated Subqueries”](correlated-subqueries.html "15.2.15.7 Correlated
    Subqueries"), for more information.
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.24开始，这种优化也可以应用于相关的标量子查询，通过对其应用额外的分组，然后在提升的谓词上进行外连接。例如，像`SELECT *
    FROM t1 WHERE (SELECT a FROM t2 WHERE t2.a=t1.a) > 0`这样的查询可以重写为`SELECT t1.* FROM
    t1 LEFT OUTER JOIN (SELECT a, COUNT(*) AS ct FROM t2 GROUP BY a) AS derived ON
    t1.a = derived.a WHERE derived.a > 0`。MySQL执行基数检查，以确保子查询不会返回多于一行（[`ER_SUBQUERY_NO_1_ROW`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_subquery_no_1_row)）。更多信息请参见[第15.2.15.7节，“相关子查询”](correlated-subqueries.html
    "15.2.15.7 Correlated Subqueries")。
- en: This optimization is normally disabled, since it does not yield a noticeable
    performance benefit in most cases; the flag is set to `off` by default.
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种优化通常是禁用的，因为在大多数情况下它并不会带来明显的性能优势；该标志默认设置为`off`。
- en: For more information, see [Section 10.9.2, “Switchable Optimizations”](switchable-optimizations.html
    "10.9.2 Switchable Optimizations"). See also [Section 10.2.1.19, “LIMIT Query
    Optimization”](limit-optimization.html "10.2.1.19 LIMIT Query Optimization"),
    [Section 10.2.2.1, “Optimizing IN and EXISTS Subquery Predicates with Semijoin
    Transformations”](semijoins.html "10.2.2.1 Optimizing IN and EXISTS Subquery Predicates
    with Semijoin Transformations"), and [Section 10.2.2.4, “Optimizing Derived Tables,
    View References, and Common Table Expressions with Merging or Materialization”](derived-table-optimization.html
    "10.2.2.4 Optimizing Derived Tables, View References, and Common Table Expressions
    with Merging or Materialization").
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参见[第10.9.2节，“可切换的优化”](switchable-optimizations.html "10.9.2 Switchable
    Optimizations")。另请参见[第10.2.1.19节，“LIMIT查询优化”](limit-optimization.html "10.2.1.19 LIMIT
    Query Optimization")，[第10.2.2.1节，“使用半连接转换优化IN和EXISTS子查询谓词”](semijoins.html "10.2.2.1 Optimizing
    IN and EXISTS Subquery Predicates with Semijoin Transformations")和[第10.2.2.4节，“使用合并或材料化优化派生表、视图引用和公共表达式”](derived-table-optimization.html
    "10.2.2.4 Optimizing Derived Tables, View References, and Common Table Expressions
    with Merging or Materialization")。
- en: '**XML enhancements. ** As of MySQL 8.0.21, the [`LOAD XML`](load-xml.html "15.2.10 LOAD
    XML Statement") statement now supports `CDATA` sections in the XML to be imported.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML增强。** 从MySQL 8.0.21开始，[`LOAD XML`](load-xml.html "15.2.10 LOAD XML Statement")语句现在支持要导入的XML中的`CDATA`部分。'
- en: '**Casting to the YEAR type now supported. ** Beginning with MySQL 8.0.22, the
    server allows casting to [`YEAR`](year.html "13.2.4 The YEAR Type"). Both the
    [`CAST()`](cast-functions.html#function_cast) and [`CONVERT()`](cast-functions.html#function_convert)
    functions support single-digit, two-digit, and four-digit `YEAR` values. For one-digit
    and two-digit values, the allowed range is 0-99\. Four-digit values must be in
    the range 1901-2155. `YEAR` can also be used as the return type for the [`JSON_VALUE()`](json-search-functions.html#function_json-value)
    function; this function supports four-digit years only.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持转换为 YEAR 类型。** 从 MySQL 8.0.22 开始，服务器允许转换为[`YEAR`](year.html "13.2.4 The
    YEAR Type")。[`CAST()`](cast-functions.html#function_cast)和[`CONVERT()`](cast-functions.html#function_convert)函数都支持单个数字、两位数字和四位数字的`YEAR`值。对于一位数和两位数的值，允许的范围是
    0-99。四位数值必须在 1901-2155 范围内。`YEAR`也可以作为[`JSON_VALUE()`](json-search-functions.html#function_json-value)函数的返回类型；此函数仅支持四位数年份。'
- en: String, time-and-date, and floating-point values can all be cast to `YEAR`.
    Casting of [`GEOMETRY`](spatial-type-overview.html "13.4.1 Spatial Data Types")
    values to `YEAR` is not supported.
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串、时间日期和浮点值都可以转换为`YEAR`。不支持将[`GEOMETRY`](spatial-type-overview.html "13.4.1 Spatial
    Data Types")值转换为`YEAR`。
- en: For more information, including conversion rules, see the description of the
    [`CONVERT()`](cast-functions.html#function_convert) function.
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参阅[`CONVERT()`](cast-functions.html#function_convert)函数的描述。
- en: '**Retrieval of TIMESTAMP values as UTC. ** MySQL 8.0.22 and later supports
    conversion of a [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types") column value from the system time zone to a UTC [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") on retrieval, using `CAST(*`value`*
    AT TIME ZONE *`specifier`* AS DATETIME)`, where the specifier is one of `[INTERVAL]
    ''+00:00''` or `''UTC''`. The precision of the `DATETIME` value returned by the
    cast can be specified up to 6 decimal places, if desired. The `ARRAY` keyword
    is not supported with this construct.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以 UTC 检索 TIMESTAMP 值。** MySQL 8.0.22 及更高版本支持将系统时区的[`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")列值转换为 UTC [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types")进行检索，使用`CAST(*`value`* AT TIME
    ZONE *`specifier`* AS DATETIME)`，其中 specifier 是 `[INTERVAL] ''+00:00''` 或 `''UTC''`
    中的一个。如果需要，可以指定转换返回的`DATETIME`值的精度高达 6 位小数。此结构不支持`ARRAY`关键字。'
- en: '`TIMESTAMP` values inserted into a table using a timezone offset are also supported.
    Use of `AT TIME ZONE` is not supported for [`CONVERT()`](cast-functions.html#function_convert)
    or any other MySQL function or construct.'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也支持使用时区偏移插入到表中的`TIMESTAMP`值。不支持对[`CONVERT()`](cast-functions.html#function_convert)或任何其他
    MySQL 函数或结构使用`AT TIME ZONE`。
- en: For further information and examples, see the description of the [`CAST()`](cast-functions.html#function_cast)
    function.
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息和示例，请参阅[`CAST()`](cast-functions.html#function_cast)函数的描述。
- en: '**Dump file output synchronization. ** MySQL 8.0.22 and later supports periodic
    synchronization when writing to files by [`SELECT INTO DUMPFILE`](select-into.html
    "15.2.13.1 SELECT ... INTO Statement") and `SELECT INTO OUTFILE` statements. This
    can be enabled by setting the [`select_into_disk_sync`](server-system-variables.html#sysvar_select_into_disk_sync)
    system variable to `ON`; the size of the write buffer is determined by the value
    set for [`select_into_buffer_size`](server-system-variables.html#sysvar_select_into_buffer_size);
    the default is 131072 (2^(17)) bytes.'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转储文件输出同步。** MySQL 8.0.22 及更高版本支持通过[`SELECT INTO DUMPFILE`](select-into.html
    "15.2.13.1 SELECT ... INTO Statement")和`SELECT INTO OUTFILE`语句写入文件时的定期同步。可以通过将[`select_into_disk_sync`](server-system-variables.html#sysvar_select_into_disk_sync)系统变量设置为`ON`来启用此功能；写入缓冲区的大小由[`select_into_buffer_size`](server-system-variables.html#sysvar_select_into_buffer_size)设置的值确定；默认值为
    131072（2^(17)）字节。'
- en: In addition, an optional delay following synchronization to disk can be set
    using [`select_into_disk_sync_delay`](server-system-variables.html#sysvar_select_into_disk_sync_delay);
    the default is no delay (0 milliseconds).
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在同步到磁盘后，可以使用[`select_into_disk_sync_delay`](server-system-variables.html#sysvar_select_into_disk_sync_delay)设置可选的延迟；默认情况下没有延迟（0
    毫秒）。
- en: For more information, see the descriptions of the variables referenced previously
    in this item.
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参阅此项中先前引用的变量的描述。
- en: '**Single preparation of statements. ** As of MySQL 8.0.22, a prepared statement
    is prepared a single time, rather than once each time it is executed. This is
    done when executing [`PREPARE`](prepare.html "15.5.1 PREPARE Statement"). This
    is also true for any statement inside a stored procedure; the statement is prepared
    once, when the stored procedure is first executed.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语句的单次准备。** 从MySQL 8.0.22开始，准备好的语句只需准备一次，而不是每次执行时都准备。这是在执行[`PREPARE`](prepare.html
    "15.5.1 准备语句")时完成的。对于存储过程中的任何语句也是如此；当首次执行存储过程时，语句将被准备一次。'
- en: 'One result of this change is that the fashion in which dynamic parameters used
    in prepared statements are resolved is also changed in the ways listed here:'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种变化的一个结果是，准备语句中使用的动态参数解析方式也发生了变化，具体列在以下方式中：
- en: A prepared statement parameter is assigned a data type when the statement is
    prepared; the type persists for each subsequent execution of the statement (unless
    the statement is reprepared; see following).
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备语句参数在准备语句时被分配一个数据类型；该类型将持续存在于语句的每次后续执行中（除非语句被重新准备；请参见下文）。
- en: Using a different data type for a given parameter or user variable within a
    prepared statement for executions of the statement subsequent to the first execution
    may cause the statement to be reprepared; for this reason, it is advisable to
    use the same data type for a given parameter when re-executing a prepared statement.
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用不同的数据类型为准备好的语句中的给定参数或用户变量，在第一次执行后的后续执行可能导致语句被重新准备；因此，建议在重新执行准备好的语句时使用相同的数据类型。
- en: 'The following constructs employing window functions are no longer accepted,
    in order to align with the SQL standard:'
  id: totrans-429
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了与SQL标准保持一致，不再接受以下使用窗口函数的构造：
- en: '[`NTILE(NULL)`](window-function-descriptions.html#function_ntile)'
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NTILE(NULL)`](window-function-descriptions.html#function_ntile)'
- en: '[`NTH_VALUE(*`expr`*, NULL)`](window-function-descriptions.html#function_nth-value)'
  id: totrans-431
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NTH_VALUE(*`expr`*, NULL)`](window-function-descriptions.html#function_nth-value)'
- en: '[`LEAD(*`expr`*, *`nn`*)`](window-function-descriptions.html#function_lead)
    and [`LAG(*`expr`*, *`nn`*)`](window-function-descriptions.html#function_lag),
    where *`nn`* is a negative number'
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`LEAD(*`expr`*, *`nn`*)`](window-function-descriptions.html#function_lead)和[`LAG(*`expr`*,
    *`nn`*)`](window-function-descriptions.html#function_lag)，其中*`nn`*是一个负数'
- en: This facilitates greater compliance with the SQL standard. See the individual
    function descriptions for further details.
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这有助于更好地符合SQL标准。有关更多详细信息，请参阅各个函数描述。
- en: A user variable referenced within a prepared statement now has its data type
    determined when the statement is prepared; the type persists for each subsequent
    execution of the statement.
  id: totrans-434
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在准备语句中引用的用户变量现在在准备语句时确定其数据类型；该类型将持续存在于语句的每次后续执行中。
- en: A user variable referenced by a statement occurring within a stored procedure
    now has its data type determined the first time the statement is executed; the
    type persists for any subsequent invocation of the containing stored procedure.
  id: totrans-435
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在存储过程中出现的语句引用的用户变量现在在第一次执行语句时确定其数据类型；该类型将持续存在于包含存储过程的任何后续调用中。
- en: When executing a prepared statement of the form `SELECT *`expr1`*, *`expr2`*,
    ... FROM *`table`* ORDER BY ?`, passing an integer value *`N`* for the parameter
    no longer causes ordering of the results by the *`N`*^(th) expression in the select
    list; the results are no longer ordered, as is expected with `ORDER BY *`constant`*`.
  id: totrans-436
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当执行形式为`SELECT *`expr1`*, *`expr2`*, ... FROM *`table`* ORDER BY ?`的准备语句时，为参数传递整数值*`N`*不再导致结果按照选择列表中的第*`N`*个表达式排序；结果不再排序，如在`ORDER
    BY *`constant`*`中所预期的那样。
- en: Preparing a statement used as a prepared statement or within a stored procedure
    only once enhances the performance of the statement, since it negates the added
    cost of repeated preparation. Doing so also avoids possible multiple rollbacks
    of preparation structures, which has been the source of numerous issues in MySQL.
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅在存储过程中使用的准备好的语句只需准备一次，可以增强语句的性能，因为它消除了重复准备的额外成本。这样做还可以避免可能的多次回滚准备结构，这是MySQL中许多问题的根源。
- en: For more information, see [Section 15.5.1, “PREPARE Statement”](prepare.html
    "15.5.1 PREPARE Statement").
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[第15.5.1节，“准备语句”](prepare.html "15.5.1 准备语句")。
- en: '**RIGHT JOIN as LEFT JOIN handling. ** As of MySQL 8.0.22, the server handles
    all instances of `RIGHT JOIN` internally as `LEFT JOIN`, eliminating a number
    of special cases in which a complete conversion was not performed at parse time.'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将RIGHT JOIN视为LEFT JOIN处理。** 截至MySQL 8.0.22，服务器在内部将所有`RIGHT JOIN`实例处理为`LEFT
    JOIN`，消除了在解析时未执行完全转换的一些特殊情况。'
- en: '**Derived condition pushdown optimization. ** MySQL 8.0.22 (and later) implements
    derived condition pushdown for queries having materialized derived tables. For
    a query such as `SELECT * FROM (SELECT i, j FROM t1) AS dt WHERE i > *`constant`*`,
    it is now possible in many cases to push the outer `WHERE` condition down to the
    derived table, in this case resulting in `SELECT * FROM (SELECT i, j FROM t1 WHERE
    i > *`constant`*) AS dt`.'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**派生条件下推优化。** MySQL 8.0.22（及更高版本）为具有物化派生表的查询实现了派生条件下推。对于诸如`SELECT * FROM (SELECT
    i, j FROM t1) AS dt WHERE i > *`constant`*`这样的查询，现在在许多情况下可以将外部`WHERE`条件下推到派生表，这种情况下结果为`SELECT
    * FROM (SELECT i, j FROM t1 WHERE i > *`constant`*) AS dt`。'
- en: Previously, if the derived table was materialized and not merged, MySQL materialized
    the entire table, then qualified the rows with the `WHERE` condition. Moving the
    `WHERE` condition into the subquery using the derived condition pushdown optimization
    can often reduce the number of rows must be processed, which can decrease the
    time needed to execute the query.
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以前，如果派生表被物化而不是合并，MySQL会将整个表物化，然后使用`WHERE`条件限定行。使用派生条件下推优化将`WHERE`条件移动到子查询中，通常可以减少必须处理的行数，从而减少执行查询所需的时间。
- en: An outer `WHERE` condition can be pushed down directly to a materialized derived
    table when the derived table does not use any aggregate or window functions. When
    the derived table has a `GROUP BY` and does not use any window functions, the
    outer `WHERE` condition can be pushed down to the derived table as a `HAVING`
    condition. The `WHERE` condition can also be pushed down when the derived table
    uses a window function and the outer `WHERE` references columns used in the window
    function's `PARTITION` clause.
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外部`WHERE`条件可以直接下推到一个物化派生表，当派生表不使用任何聚合或窗口函数时。当派生表具有`GROUP BY`并且不使用任何窗口函数时，外部`WHERE`条件可以作为`HAVING`条件下推到派生表。当派生表使用窗口函数且外部`WHERE`引用窗口函数的`PARTITION`子句中使用的列时，`WHERE`条件也可以下推。
- en: Derived condition pushdown is enabled by default, as indicated by the [`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)
    system variable's [`derived_condition_pushdown`](switchable-optimizations.html#optflag_derived-condition-pushdown)
    flag. The flag, added in MySQL 8.0.22, is set to `on` by default; to disable the
    optimization for a specific query, you can use the [`NO_DERIVED_CONDITION_PUSHDOWN`](optimizer-hints.html#optimizer-hints-table-level
    "Table-Level Optimizer Hints") optimizer hint (also added in MySQL 8.0.22). If
    the optimization is disabled due to [`derived_condition_pushdown`](switchable-optimizations.html#optflag_derived-condition-pushdown)
    being set to `off`, you can enable it for a given query using [`DERIVED_CONDITION_PUSHDOWN`](optimizer-hints.html#optimizer-hints-table-level
    "Table-Level Optimizer Hints").
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 派生条件下推优化默认启用，由[`optimizer_switch`](server-system-variables.html#sysvar_optimizer_switch)系统变量的[`derived_condition_pushdown`](switchable-optimizations.html#optflag_derived-condition-pushdown)标志指示。该标志在MySQL
    8.0.22中添加，默认设置为`on`；要禁用特定查询的优化，可以使用[`NO_DERIVED_CONDITION_PUSHDOWN`](optimizer-hints.html#optimizer-hints-table-level
    "Table-Level Optimizer Hints")优化提示（也在MySQL 8.0.22中添加）。如果由于[`derived_condition_pushdown`](switchable-optimizations.html#optflag_derived-condition-pushdown)设置为`off`而禁用优化，可以使用[`DERIVED_CONDITION_PUSHDOWN`](optimizer-hints.html#optimizer-hints-table-level
    "Table-Level Optimizer Hints")为给定查询启用它。
- en: The derived condition pushdown optimization cannot be employed for a derived
    table that contains a `LIMIT` clause. Prior to MySQL 8.0.29, the optimization
    also cannot be used when the query contains [`UNION`](union.html "15.2.18 UNION
    Clause"). In MySQL 8.0.29 and later, conditions can be pushed down to both query
    blocks of a union in most cases; see [Section 10.2.2.5, “Derived Condition Pushdown
    Optimization”](derived-condition-pushdown-optimization.html "10.2.2.5 Derived
    Condition Pushdown Optimization"), for more information.
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 派生条件下推优化不能用于包含`LIMIT`子句的派生表。在MySQL 8.0.29之前，当查询包含[`UNION`](union.html "15.2.18 UNION
    Clause")时，优化也无法使用。在MySQL 8.0.29及更高版本中，条件在大多数情况下可以下推到联合的两个查询块；有关更多信息，请参见[Section 10.2.2.5，“派生条件下推优化”](derived-condition-pushdown-optimization.html
    "10.2.2.5 Derived Condition Pushdown Optimization")。
- en: In addition, a condition that itself uses a subquery cannot be pushed down,
    and a `WHERE` condition cannot be pushed down to a derived table that is also
    an inner table of an outer join. For additional information and examples, see
    [Section 10.2.2.5, “Derived Condition Pushdown Optimization”](derived-condition-pushdown-optimization.html
    "10.2.2.5 Derived Condition Pushdown Optimization").
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，一个使用子查询的条件本身无法被下推，而一个 `WHERE` 条件也无法被下推到作为外连接的内连接的派生表。有关更多信息和示例，请参阅 [Section 10.2.2.5,
    “派生条件下推优化”](derived-condition-pushdown-optimization.html "10.2.2.5 派生条件下推优化")。
- en: '**Non-locking reads on MySQL grant tables. ** As of MySQL 8.0.22, to permit
    concurrent DML and DDL operations on MySQL grant tables, read operations that
    previously acquired row locks on MySQL grant tables are executed as non-locking
    reads.'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MySQL 授权表上的非锁定读取。** 截至 MySQL 8.0.22 版本，为了允许在 MySQL 授权表上进行并发的 DML 和 DDL 操作，先前在
    MySQL 授权表上获取行锁的读取操作现在作为非锁定读取执行。'
- en: 'The operations that are now performed as non-locking reads on MySQL grant tables
    include:'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在 MySQL 授权表上作为非锁定读取执行的操作包括：
- en: '[`SELECT`](select.html "15.2.13 SELECT Statement") statements and other read-only
    statements that read data from grant tables through join lists and subqueries,
    including [`SELECT ... FOR SHARE`](innodb-locking-reads.html "17.7.2.4 Locking
    Reads") statements, using any transaction isolation level.'
  id: totrans-448
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过连接列表和子查询从授权表读取数据的 [`SELECT`](select.html "15.2.13 SELECT 语句") 语句和其他只读语句，包括使用任何事务隔离级别的
    [`SELECT ... FOR SHARE`](innodb-locking-reads.html "17.7.2.4 锁定读取") 语句。
- en: DML operations that read data from grant tables (through join lists or subqueries)
    but do not modify them, using any transaction isolation level.
  id: totrans-449
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从授权表读取数据的 DML 操作（通过连接列表或子查询），但不修改它们，使用任何事务隔离级别。
- en: For additional information, see [Grant Table Concurrency](grant-tables.html#grant-tables-concurrency
    "Grant Table Concurrency").
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅 [授权表并发性](grant-tables.html#grant-tables-concurrency "授权表并发性")。
- en: '**64-bit support for FROM_UNIXTIME(), UNIX_TIMESTAMP(), CONVERT_TZ(). ** As
    of MySQL 8.0.28, the functions [`FROM_UNIXTIME()`](date-and-time-functions.html#function_from-unixtime),
    [`UNIX_TIMESTAMP()`](date-and-time-functions.html#function_unix-timestamp), and
    [`CONVERT_TZ()`](date-and-time-functions.html#function_convert-tz) handle 64-bit
    values on platforms that support them. This includes 64-bit versions of Linux,
    MacOS, and Windows.'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FROM_UNIXTIME()、UNIX_TIMESTAMP()、CONVERT_TZ() 的 64 位支持。** 截至 MySQL 8.0.28
    版本，函数 [`FROM_UNIXTIME()`](date-and-time-functions.html#function_from-unixtime)、[`UNIX_TIMESTAMP()`](date-and-time-functions.html#function_unix-timestamp)
    和 [`CONVERT_TZ()`](date-and-time-functions.html#function_convert-tz) 在支持它们的平台上处理
    64 位值。这包括 Linux、MacOS 和 Windows 的 64 位版本。'
- en: On compatible platforms, `UNIX_TIMESTAMP()` now handles values up to `'3001-01-18
    23:59:59.999999'` UTC, and `FROM_UNIXTIME()` can convert values up to 32536771199.999999
    seconds since the Unix Epoch; `CONVERT_TZ()` now accepts values that do not exceed
    `'3001-01-18 23:59:59.999999'` UTC following conversion.
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在兼容的平台上，`UNIX_TIMESTAMP()` 现在处理的值可达到 `'3001-01-18 23:59:59.999999'` UTC，而 `FROM_UNIXTIME()`
    可以将值转换为自 Unix 纪元以来的 32536771199.999999 秒；`CONVERT_TZ()` 现在在转换后接受不超过 `'3001-01-18
    23:59:59.999999'` UTC 的值。
- en: The behavior of these functions on 32-bit platforms is unaffected by these changes.
    The behavior of the [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and
    TIMESTAMP Types") type is also not affected (on any platform); for working with
    datetimes after `'2038-01-19 03:14:07.999999'`, UTC, use the [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") type instead.
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些函数在 32 位平台上的行为不受这些更改的影响。[`TIMESTAMP`](datetime.html "13.2.2 日期、时间和时间戳类型")
    类型的行为也不受影响（在任何平台上）；若要处理 `'2038-01-19 03:14:07.999999'` UTC 之后的日期时间，请改用 [`DATETIME`](datetime.html
    "13.2.2 日期、时间和时间戳类型") 类型。
- en: For more information, see the descriptions of the individual functions just
    discussed, in [Section 14.7, “Date and Time Functions”](date-and-time-functions.html
    "14.7 Date and Time Functions").
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅刚刚讨论的各个函数的描述，在 [Section 14.7, “日期和时间函数”](date-and-time-functions.html
    "14.7 日期和时间函数")。
- en: '**Resource allocation control. ** Beginning with MySQL 8.0.28, you can see
    the amount of memory used for queries issued by all regular users by checking
    the [`Global_connection_memory`](server-status-variables.html#statvar_Global_connection_memory)
    status variable. (This total does not include resources used by system users such
    as MySQL root. It is also exclusive of any memory taken by the [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine") buffer pool.)'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源分配控制。** 从MySQL 8.0.28开始，您可以通过检查[`Global_connection_memory`](server-status-variables.html#statvar_Global_connection_memory)状态变量来查看所有常规用户发出的查询使用的内存量。（此总数不包括系统用户（如MySQL
    root）使用的资源。它还不包括由[`InnoDB`](innodb-storage-engine.html "第17章 InnoDB存储引擎")缓冲池占用的任何内存。）'
- en: To enable updates of `Global_connection_memory`, it is necessary to set [`global_connection_memory_tracking
    = 1`](server-system-variables.html#sysvar_global_connection_memory_tracking);
    this is `0` (off) by default. You can control how often `Global_connection_memory`
    is updated by setting [`connection_memory_chunk_size`](server-system-variables.html#sysvar_connection_memory_chunk_size).
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要启用对`Global_connection_memory`的更新，需要设置[`global_connection_memory_tracking =
    1`](server-system-variables.html#sysvar_global_connection_memory_tracking)；默认情况下为`0`（关闭）。您可以通过设置[`connection_memory_chunk_size`](server-system-variables.html#sysvar_connection_memory_chunk_size)来控制多久更新一次`Global_connection_memory`。
- en: 'It is also possible to set memory usage limits for normal users on the session
    or global level, or both, by setting either or both of the system variables listed
    here:'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还可以通过设置以下列出的系统变量中的一个或两个，或两者同时，在会话或全局级别为普通用户设置内存使用限制：
- en: '[`connection_memory_limit`](server-system-variables.html#sysvar_connection_memory_limit):
    Amount of memory allocated for each connection. Whenever this limit is exceeded
    for any user, new queries from this user are rejected.'
  id: totrans-458
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`connection_memory_limit`](server-system-variables.html#sysvar_connection_memory_limit)：为每个连接分配的内存量。每当任何用户超出此限制时，来自该用户的新查询将被拒绝。'
- en: '[`global_connection_memory_limit`](server-system-variables.html#sysvar_global_connection_memory_limit):
    Amount of memory allocated for all connections. Whenever this limit is exceeded,
    new queries from any regular user are rejected.'
  id: totrans-459
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`global_connection_memory_limit`](server-system-variables.html#sysvar_global_connection_memory_limit)：为所有连接分配的内存量。每当超出此限制时，来自任何常规用户的新查询将被拒绝。'
- en: These limits do not apply to system processes or administrative accounts.
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些限制不适用于系统进程或管理帐户。
- en: See the descriptions of the referenced variables for more information.
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅所引用变量的描述。
- en: '**Detached XA transactions. ** MySQL 8.0.29 adds support for XA transactions
    which, once prepared, are no longer connected to the originating connection. This
    means that they can be committed or rolled back by another connection, and that
    the current session can immediately begin another transaction.'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分离的XA事务。** MySQL 8.0.29增加了对XA事务的支持，一旦准备就绪，就不再与发起连接相关联。这意味着它们可以由另一个连接提交或回滚，并且当前会话可以立即开始另一个事务。'
- en: A system variable [`xa_detach_on_prepare`](server-system-variables.html#sysvar_xa_detach_on_prepare)
    controls whether XA transaction are detached; the default is `ON`, which causes
    all XA transactions to be detached. Use of temporary tables is disallowed for
    XA transactions when this is in effect.
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 系统变量[`xa_detach_on_prepare`](server-system-variables.html#sysvar_xa_detach_on_prepare)控制XA事务是否分离；默认值为`ON`，导致所有XA事务被分离。在此情况下，禁止对XA事务使用临时表。
- en: For more information, see [Section 15.3.8.2, “XA Transaction States”](xa-states.html
    "15.3.8.2 XA Transaction States").
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参见[第15.3.8.2节，“XA事务状态”](xa-states.html "15.3.8.2 XA Transaction States")。
- en: '**Automatic binary log purge control. ** MySQL 8.0.29 adds the [`binlog_expire_logs_auto_purge`](replication-options-binary-log.html#sysvar_binlog_expire_logs_auto_purge)
    system variable, which provides a single interface for enabling and disabling
    automatic purging of the binary logs. This is enabled (`ON`) by default; to disable
    automatic purging of the binary log files, set this variable to `OFF`.'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动二进制日志清除控制。** MySQL 8.0.29增加了[`binlog_expire_logs_auto_purge`](replication-options-binary-log.html#sysvar_binlog_expire_logs_auto_purge)系统变量，提供了一个单一接口来启用和禁用二进制日志的自动清除。默认情况下启用（`ON`）；要禁用二进制日志文件的自动清除，请将此变量设置为`OFF`。'
- en: '`binlog_expire_logs_auto_purge` must be `ON` in order for automatic purging
    of the binary log files to proceed; the value of this variable takes precedence
    over that of any other server option or variable, including (but not exclusive
    to) [`binlog_expire_logs_seconds`](replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds).'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`binlog_expire_logs_auto_purge`必须为`ON`，才能自动清除二进制日志文件；此变量的值优先于任何其他服务器选项或变量，包括（但不限于）[`binlog_expire_logs_seconds`](replication-options-binary-log.html#sysvar_binlog_expire_logs_seconds)。'
- en: The setting for `binlog_expire_logs_auto_purge` has no effect on [`PURGE BINARY
    LOGS`](purge-binary-logs.html "15.4.1.1 PURGE BINARY LOGS Statement").
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`binlog_expire_logs_auto_purge`的设置对[`PURGE BINARY LOGS`](purge-binary-logs.html
    "15.4.1.1 PURGE BINARY LOGS Statement")没有影响。'
- en: '**Conditional routine and trigger creation statements. ** Beginning with MySQL
    8.0.29, the following statements support an `IF NOT EXISTS` option:'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**条件例程和触发器创建语句。** 从MySQL 8.0.29开始，以下语句支持`IF NOT EXISTS`选项：'
- en: '[`CREATE FUNCTION`](create-function.html "15.1.14 CREATE FUNCTION Statement")'
  id: totrans-469
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CREATE FUNCTION`](create-function.html "15.1.14 CREATE FUNCTION Statement")'
- en: '[`CREATE PROCEDURE`](create-procedure.html "15.1.17 CREATE PROCEDURE and CREATE
    FUNCTION Statements")'
  id: totrans-470
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CREATE PROCEDURE`](create-procedure.html "15.1.17 CREATE PROCEDURE and CREATE
    FUNCTION Statements")'
- en: '[`CREATE TRIGGER`](create-trigger.html "15.1.22 CREATE TRIGGER Statement")'
  id: totrans-471
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CREATE TRIGGER`](create-trigger.html "15.1.22 CREATE TRIGGER Statement")'
- en: For `CREATE FUNCTION` when creating a stored function and `CREATE PROCEDURE`,
    this option prevents an error from occurring if there is already a routine having
    the same name. For [`CREATE FUNCTION`](create-function-loadable.html "15.7.4.1 CREATE
    FUNCTION Statement for Loadable Functions") when used to create a loadable function,
    the option prevents an error if there already exists a loadable function having
    that name. For `CREATE TRIGGER`, the option prevents an error from occurring if
    there already exists in the same schema and on the same table a trigger having
    the same name.
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`CREATE FUNCTION`用于创建存储函数和`CREATE PROCEDURE`时，此选项可防止出现同名例程的错误。对于[`CREATE FUNCTION`](create-function-loadable.html
    "15.7.4.1 CREATE FUNCTION Statement for Loadable Functions")用于创建可加载函数时，该选项可防止出现同名可加载函数的错误。对于`CREATE
    TRIGGER`，该选项可防止出现同名触发器的错误，如果在同一模式和同一表中已经存在同名触发器。
- en: This enhancement aligns the syntax of these statements more closely with that
    of [`CREATE DATABASE`](create-database.html "15.1.12 CREATE DATABASE Statement"),
    [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement"), [`CREATE
    USER`](create-user.html "15.7.1.3 CREATE USER Statement"), and [`CREATE EVENT`](create-event.html
    "15.1.13 CREATE EVENT Statement") (all of which already support `IF NOT EXISTS`),
    and acts to complement the `IF EXISTS` option supported by [`DROP PROCEDURE`](drop-procedure.html
    "15.1.29 DROP PROCEDURE and DROP FUNCTION Statements"), [`DROP FUNCTION`](drop-function.html
    "15.1.26 DROP FUNCTION Statement"), and [`DROP TRIGGER`](drop-trigger.html "15.1.34 DROP
    TRIGGER Statement") statements.
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此增强功能使这些语句的语法更接近于[`CREATE DATABASE`](create-database.html "15.1.12 CREATE DATABASE
    Statement")、[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")、[`CREATE
    USER`](create-user.html "15.7.1.3 CREATE USER Statement")和[`CREATE EVENT`](create-event.html
    "15.1.13 CREATE EVENT Statement")（这些语句已经支持`IF NOT EXISTS`），并且补充了[`DROP PROCEDURE`](drop-procedure.html
    "15.1.29 DROP PROCEDURE and DROP FUNCTION Statements")、[`DROP FUNCTION`](drop-function.html
    "15.1.26 DROP FUNCTION Statement")和[`DROP TRIGGER`](drop-trigger.html "15.1.34 DROP
    TRIGGER Statement")语句支持的`IF EXISTS`选项。
- en: For more information, see the descriptions of the indicated SQL statements,
    as well as [Function Name Resolution](function-resolution.html#function-name-resolution
    "Function Name Resolution"). See also [Section 19.5.1.7, “Replication of CREATE
    TABLE ... SELECT Statements”](replication-features-create-select.html "19.5.1.7 Replication
    of CREATE TABLE ... SELECT Statements").
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅指定SQL语句的描述，以及[函数名称解析](function-resolution.html#function-name-resolution
    "Function Name Resolution")。另请参阅[第19.5.1.7节，“复制CREATE TABLE ... SELECT语句”](replication-features-create-select.html
    "19.5.1.7 Replication of CREATE TABLE ... SELECT Statements")。
- en: '**Included FIDO library upgrade. ** MySQL 8.0.30 upgrades the included `fido2`
    library (used with the `authentication_fido` plugin) from version 1.5.0 to version
    1.8.0.'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含FIDO库升级。** MySQL 8.0.30将`fido2`库（与`authentication_fido`插件一起使用）从版本1.5.0升级到版本1.8.0。'
- en: See [Section 8.4.1.11, “FIDO Pluggable Authentication”](fido-pluggable-authentication.html
    "8.4.1.11 FIDO Pluggable Authentication"), for more information.
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看[第8.4.1.11节，“FIDO可插拔认证”](fido-pluggable-authentication.html "8.4.1.11 FIDO
    Pluggable Authentication")，获取更多信息。
- en: '**Character sets: Language-specific collations. ** Previously, when more than
    one language had the exact same collation definition, MySQL implemented collations
    for only one of the languages, which meant that some languages were covered only
    by `utf8mb4` Unicode 9.0 collations specific to other languages. MySQL 8.0.30
    (and later) fixes such issues by providing language-specific collations for those
    languages that were previously covered only by language-specific collations for
    other languages. Languages covered by the new collations are listed here:'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符集：特定语言排序规则。** 以前，当多种语言具有完全相同的排序规则定义时，MySQL仅为其中一种语言实现了排序规则，这意味着某些语言仅由其他语言特定的`utf8mb4`
    Unicode 9.0排序规则覆盖。MySQL 8.0.30（及更高版本）通过为以前仅由其他语言特定排序规则覆盖的语言提供特定语言排序规则来解决此类问题。新排序规则覆盖的语言列在此处：'
- en: Norwegian (Nynorsk)
  id: totrans-478
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挪威语（新挪威语）
- en: and
  id: totrans-479
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和
- en: Norwegian (Bokmål)
  id: totrans-480
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 挪威语（书面挪威语）
- en: Serbian (Latin characters)
  id: totrans-481
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 塞尔维亚语（拉丁字符）
- en: Bosnian (Latin characters)
  id: totrans-482
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 波斯尼亚语（拉丁字符）
- en: Bulgarian
  id: totrans-483
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保加利亚语
- en: Galician
  id: totrans-484
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加利西亚语
- en: Mongolian (Cyrillic characters)
  id: totrans-485
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蒙古语（西里尔字母）
- en: MySQL provides `*_as_cs` and `*_ai_ci` collations for each of the languages
    just listed.
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL为每种语言提供了`*_as_cs`和`*_ai_ci`排序规则。
- en: For more information, see [Language-Specific Collations](charset-unicode-sets.html#charset-unicode-sets-language-specific-collations
    "Language-Specific Collations").
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[特定语言排序规则](charset-unicode-sets.html#charset-unicode-sets-language-specific-collations
    "特定语言排序规则")。
- en: '**IF EXISTS and IGNORE UNKNOWN USER options for REVOKE. ** MySQL 8.0.30 implements
    two new options for [`REVOKE`](revoke.html "15.7.1.8 REVOKE Statement") which
    can be used to determine whether a statement yields an error or a warning when
    a user, role, or privilege specified in the statement cannot be found, or cannot
    be assigned. Very basic syntax showing the placement of these new options is provided
    here:'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IF EXISTS 和 IGNORE UNKNOWN USER 选项用于 REVOKE。** MySQL 8.0.30 实现了两个新选项用于[`REVOKE`](revoke.html
    "15.7.1.8 REVOKE 语句")，可用于确定当语句中指定的用户、角色或权限找不到或无法分配时，语句是否产生错误或警告。这里提供了基本语法，显示了这些新选项的放置位置：'
- en: '[PRE22]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`IF EXISTS` causes an unsuccessful `REVOKE` statement to raise a warning instead
    of an error, as long as the named target user or role actually exists, despite
    any references in the statement to any roles or privileges which cannot be found.'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`IF EXISTS` 导致未成功的`REVOKE`语句引发警告，而不是错误，只要语句中指定的目标用户或角色实际存在，尽管语句中可能引用任何找不到的角色或权限。'
- en: '`IGNORE UNKNOWN USER` causes an unsuccessful *`REVOKE`* to raise a warning
    rather than an error when the target user or role named in the statement cannot
    be found.'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`IGNORE UNKNOWN USER` 导致未成功的*`REVOKE`*引发警告，而不是错误，当语句中指定的目标用户或角色找不到时。'
- en: For further information and examples, see [Section 15.7.1.8, “REVOKE Statement”](revoke.html
    "15.7.1.8 REVOKE Statement").
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息和示例，请参阅[第15.7.1.8节“REVOKE 语句”](revoke.html "15.7.1.8 REVOKE 语句")。
- en: '**Generated invisible primary keys. ** Beginning with MySQL 8.0.30, it is possible
    to run a replication source server such that a generated invisible primary key
    (GIPK) is added to any [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine") table that is created without an explicit primary key. The generated
    key column definition added to such a table is equivalent to what is shown here:'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成的隐形主键。** 从 MySQL 8.0.30 开始，可以运行一个复制源服务器，使得在创建没有显式主键的[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB 存储引擎")表时，会添加一个生成的隐形主键（GIPK）。添加到这样一个表的生成键列定义等同于这里显示的内容：'
- en: '[PRE23]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: GIPK mode is not enabled by default. To enable it, set the [`sql_generate_invisible_primary_key`](server-system-variables.html#sysvar_sql_generate_invisible_primary_key)
    server system variable to `ON`.
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: GIPK 模式默认情况下未启用。要启用它，请将[`sql_generate_invisible_primary_key`](server-system-variables.html#sysvar_sql_generate_invisible_primary_key)服务器系统变量设置为`ON`。
- en: Generated invisible primary keys are normally visible in the output of statements
    such as [`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW CREATE TABLE
    Statement") and [`SHOW INDEX`](show-index.html "15.7.7.22 SHOW INDEX Statement"),
    as well as in MySQL Information Schema tables such as the [`COLUMNS`](information-schema-columns-table.html
    "28.3.8 The INFORMATION_SCHEMA COLUMNS Table") and [`STATISTICS`](information-schema-statistics-table.html
    "28.3.34 The INFORMATION_SCHEMA STATISTICS Table") tables. You can cause them
    to be hidden in such cases instead, by setting [`show_gipk_in_create_table_and_information_schema`](server-system-variables.html#sysvar_show_gipk_in_create_table_and_information_schema)
    to `OFF`.
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成的不可见主键通常在诸如 [`SHOW CREATE TABLE`](show-create-table.html "15.7.7.10 SHOW CREATE
    TABLE 语句") 和 [`SHOW INDEX`](show-index.html "15.7.7.22 SHOW INDEX 语句") 这样的语句的输出中可见，以及在
    MySQL 信息模式表中，如 [`COLUMNS`](information-schema-columns-table.html "28.3.8 INFORMATION_SCHEMA
    COLUMNS 表") 和 [`STATISTICS`](information-schema-statistics-table.html "28.3.34
    INFORMATION_SCHEMA STATISTICS 表") 表中。您可以通过将 [`show_gipk_in_create_table_and_information_schema`](server-system-variables.html#sysvar_show_gipk_in_create_table_and_information_schema)
    设置为 `OFF` 来在这些情况下隐藏它们。
- en: As part of this work, a new `--skip-generated-invisible-primary-key` option
    is added to [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup
    Program") and [**mysqlpump**](mysqlpump.html "6.5.6 mysqlpump — A Database Backup
    Program") to exclude generated invisible primary keys, columns, and column values
    from their output.
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这项工作的一部分，为 [**mysqldump**](mysqldump.html "6.5.4 mysqldump — 数据库备份程序") 和 [**mysqlpump**](mysqlpump.html
    "6.5.6 mysqlpump — 数据库备份程序") 添加了一个新的 `--skip-generated-invisible-primary-key`
    选项，用于在输出中排除生成的不可见主键、列和列值。
- en: '**GIPKs and replication between tables with or without primary keys. ** In
    MySQL Replication, a replica effectively ignores any setting for [`sql_generate_invisible_primary_key`](server-system-variables.html#sysvar_sql_generate_invisible_primary_key)
    on the source, such that it has no effect on replicated tables. MySQL 8.0.32 and
    later makes it possible for the replica to add a generated invisible primary key
    to any [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    table that otherwise, as replicated, has no primary key. You can do this by invoking
    [`CHANGE REPLICATION SOURCE TO ... REQUIRE_TABLE_PRIMARY_KEY_CHECK = GENERATE`](change-replication-source-to.html
    "15.4.2.3 CHANGE REPLICATION SOURCE TO Statement") on the replica.'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**GIPKs 和表之间的复制，无论是否有主键。** 在 MySQL 复制中，副本实际上会忽略源端的 [`sql_generate_invisible_primary_key`](server-system-variables.html#sysvar_sql_generate_invisible_primary_key)
    设置，因此对复制表没有影响。MySQL 8.0.32 及更高版本使得副本可以向任何 [`InnoDB`](innodb-storage-engine.html
    "第 17 章 InnoDB 存储引擎") 表中添加一个生成的不可见主键，即使该表在复制时没有主键。您可以通过在副本上调用 [`CHANGE REPLICATION
    SOURCE TO ... REQUIRE_TABLE_PRIMARY_KEY_CHECK = GENERATE`](change-replication-source-to.html
    "15.4.2.3 CHANGE REPLICATION SOURCE TO 语句") 来实现这一点。'
- en: '`REQUIRE_TABLE_PRIMARY_KEY_CHECK = GENERATE` is not compatible with MySQL Group
    Replication.'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`REQUIRE_TABLE_PRIMARY_KEY_CHECK = GENERATE` 与 MySQL Group Replication 不兼容。'
- en: For further information, see [Section 15.1.20.11, “Generated Invisible Primary
    Keys”](create-table-gipks.html "15.1.20.11 Generated Invisible Primary Keys").
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅 [第 15.1.20.11 节，“生成的不可见主键”](create-table-gipks.html "15.1.20.11
    生成的不可见主键")。
- en: '**Crash-safe XA transactions. ** Previously, XA transactions were not fully
    resilient to an unexpected halt with respect to the binary log, and if this occurred
    while the server was executing [`XA PREPARE`](xa-statements.html "15.3.8.1 XA
    Transaction SQL Statements"), `XA COMMIT`, or `XA ROLLBACK`, the server was not
    guaranteed to be recoverable to the correct state, possibly leaving the binary
    log with extra XA transactions that had not been applied, or missing one or more
    XA transactions that had been applied. Beginning with MySQL 8.0.30, this is no
    longer an issue, and a server that drops out of a replication topology for whatever
    reason can always be brought back to a consistent XA transaction state when rejoining.'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**崩溃安全的 XA 事务。** 以前，XA 事务在意外停止时对于二进制日志并不完全具有弹性，如果这种情况发生在服务器执行 [`XA PREPARE`](xa-statements.html
    "15.3.8.1 XA 事务 SQL 语句")、`XA COMMIT` 或 `XA ROLLBACK` 时，服务器不能保证能够恢复到正确的状态，可能会导致二进制日志中存在未应用的额外
    XA 事务，或者缺少一个或多个已应用的 XA 事务。从 MySQL 8.0.30 开始，这不再是一个问题，无论出于何种原因，从复制拓扑中掉出的服务器都可以在重新加入时始终被带回一致的
    XA 事务状态。'
- en: '*Known issue*: When the same transaction XID is used to execute XA transactions
    sequentially and a break occurs during the execution of `XA COMMIT ... ONE PHASE`,
    using this same XID, after this transaction has been prepared in the storage engine,
    it may not be possible any longer to synchronize the state between the binary
    log and the storage engine.'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*已知问题*：当相同的事务 XID 用于顺序执行 XA 事务，并且在执行`XA COMMIT ... ONE PHASE`期间发生中断时，再次使用此相同的
    XID，在此事务在存储引擎中准备好之后，可能不再可能在二进制日志和存储引擎之间同步状态。'
- en: For more information, see [Section 15.3.8.3, “Restrictions on XA Transactions”](xa-restrictions.html
    "15.3.8.3 Restrictions on XA Transactions").
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[第 15.3.8.3 节，“XA 事务的限制”](xa-restrictions.html "15.3.8.3 XA 事务的限制")。
- en: '**Nesting with UNION. ** Beginning with MySQL 8.0.31, bodies of parenthesized
    query expressions can be nested up to 63 levels deep in combination with [`UNION`](union.html
    "15.2.18 UNION Clause"). Such queries were previously rejected with error [`ER_NOT_SUPPORTED_YET`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_not_supported_yet),
    but are now allowed. [`EXPLAIN`](explain.html "15.8.2 EXPLAIN Statement") output
    for such a query is shown here:'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 UNION 进行嵌套。** 从 MySQL 8.0.31 开始，带括号的查询表达式的主体可以与 [`UNION`](union.html "15.2.18 UNION
    子句") 结合，最多可以嵌套到 63 级深度。此类查询以前会因错误 [`ER_NOT_SUPPORTED_YET`](/doc/mysql-errors/8.0/en/server-error-reference.html#error_er_not_supported_yet)
    被拒绝，但现在允许。此类查询的 [`EXPLAIN`](explain.html "15.8.2 EXPLAIN 语句") 输出如下：'
- en: '[PRE24]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: MySQL follows SQL standard semantics when collapsing bodies of parenthesized
    query expressions, so that a higher outer limit cannot override an inner lower
    one. For example, `(SELECT ... LIMIT 5) LIMIT 10` can return no more than five
    rows.
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 在折叠带括号的查询表达式的主体时遵循 SQL 标准语义，因此外部较高限制不能覆盖内部较低限制。例如，`(SELECT ... LIMIT 5)
    LIMIT 10` 最多只能返回五行。
- en: The 63-level limit is imposed only after the MySQL Optimizer's parser has performed
    any simplifications or merges which it can.
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 优化器的解析器在执行任何简化或合并操作后，才会施加 63 级限制。
- en: For more information, see [Section 15.2.11, “Parenthesized Query Expressions”](parenthesized-query-expressions.html
    "15.2.11 Parenthesized Query Expressions").
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[第 15.2.11 节，“带括号的查询表达式”](parenthesized-query-expressions.html "15.2.11 带括号的查询表达式")。
- en: '**Disabling query rewrites. ** Previously, when using the `Rewriter` plugin,
    all queries were subject to being rewritten, regardless of user. This could be
    problematic in certain cases, such as when administering the system, or when applying
    statements originating from a replication source or a dump file created by [**mysqldump**](mysqldump.html
    "6.5.4 mysqldump — A Database Backup Program") or another MySQL program. MySQL
    8.0.31 provides a solution to such issues by implementing a new user privilege
    [`SKIP_QUERY_REWRITE`](privileges-provided.html#priv_skip-query-rewrite); statements
    issued by a user having this privilege are ignored by `Rewriter` and not rewritten.'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用查询重写。** 以前，使用 `Rewriter` 插件时，所有查询都会被重写，而不管用户是谁。在某些情况下，这可能会有问题，例如在管理系统时，或者应用来自复制源或由
    [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    或其他 MySQL 程序创建的转储文件的语句时。MySQL 8.0.31 通过实现新的用户权限 [`SKIP_QUERY_REWRITE`](privileges-provided.html#priv_skip-query-rewrite)
    来解决这些问题；具有此权限的用户发出的语句将被 `Rewriter` 忽略并且不会被重写。'
- en: MySQL 8.0.31 also adds a new server system variable [`rewriter_enabled_for_threads_without_privilege_checks`](rewriter-query-rewrite-plugin-reference.html#sysvar_rewriter_enabled_for_threads_without_privilege_checks).
    When set to `OFF`, rewritable statements issued by threads for which `PRIVILEGE_CHECKS_USER`
    is `NULL` (such as replication applier threads) are not rewritten by the `Rewriter`
    plugin. The default is `ON`, which means such statements are rewritten.
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 8.0.31 还添加了一个新的服务器系统变量 [`rewriter_enabled_for_threads_without_privilege_checks`](rewriter-query-rewrite-plugin-reference.html#sysvar_rewriter_enabled_for_threads_without_privilege_checks)。当设置为
    `OFF` 时，由 `PRIVILEGE_CHECKS_USER` 为 `NULL` 的线程（例如复制应用程序线程）发出的可重写语句不会被 `Rewriter`
    插件重写。默认值为 `ON`，这意味着这些语句会被重写。
- en: For more information, see [Section 7.6.4, “The Rewriter Query Rewrite Plugin”](rewriter-query-rewrite-plugin.html
    "7.6.4 The Rewriter Query Rewrite Plugin").
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[第 7.6.4 节，“Rewriter 查询重写插件”](rewriter-query-rewrite-plugin.html
    "7.6.4 Rewriter 查询重写插件")。
- en: '**Replication filtering of XA statements. ** Previously, the statements [`XA
    START`](xa-statements.html "15.3.8.1 XA Transaction SQL Statements"), `XA END`,
    `XA COMMIT`, and `XA ROLLBACK` were filtered by the default database whenever
    using [`--replicate-do-db`](replication-options-replica.html#option_mysqld_replicate-do-db)
    or [`--replicate-ignore-db`](replication-options-replica.html#option_mysqld_replicate-ignore-db),
    which could lead to missed transactions. As of MySQL 8.0.31, these statements
    are not filtered in such cases, regardless of the value of [`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format).'
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XA语句的复制过滤。** 以前，当使用[`--replicate-do-db`](replication-options-replica.html#option_mysqld_replicate-do-db)或[`--replicate-ignore-db`](replication-options-replica.html#option_mysqld_replicate-ignore-db)时，默认数据库会过滤掉[`XA
    START`](xa-statements.html "15.3.8.1 XA Transaction SQL Statements")、`XA END`、`XA
    COMMIT`和`XA ROLLBACK`语句，这可能导致遗漏的事务。从 MySQL 8.0.31 开始，在这种情况下，这些语句不会被过滤，无论[`binlog_format`](replication-options-binary-log.html#sysvar_binlog_format)的值是什么。'
- en: '**Replication filtering and privilege checks. ** Beginning with MySQL 8.0.31,
    when replication filtering is in use, a replica no longer raises replication errors
    related to privilege checks or [`require_row_format`](server-system-variables.html#sysvar_require_row_format)
    validation for events which are filtered out, making it possible to filter out
    any transactions that fail validation.'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制过滤和权限检查。** 从 MySQL 8.0.31 开始，当使用复制过滤时，副本不再因被过滤掉的事件引起与权限检查或[`require_row_format`](server-system-variables.html#sysvar_require_row_format)验证相关的复制错误，从而可以过滤掉任何验证失败的事务。'
- en: Because privilege checks on filtered rows can no longer cause replication to
    stop, a replica can now accept only the portion of a database to which a given
    user has been granted access; this is true as long as updates to this part of
    the database are replicated only in row-based format.
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为过滤行上的权限检查不再会导致复制停止，所以副本现在可以仅接受给定用户已被授予访问权限的数据库部分；只要对数据库的此部分的更新仅以行格式进行复制。
- en: This capability may also be of use when migrating to MySQL HeatWave Service
    from an on-premise or cloud service which uses tables for administration or other
    purposes to which the inbound replication user does not have access.
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从一个使用表进行管理或其他用途的本地或云服务迁移到 MySQL HeatWave 服务时，此功能也可能对于入站复制用户无法访问的情况有所帮助。
- en: For more information, see [Section 19.2.5, “How Servers Evaluate Replication
    Filtering Rules”](replication-rules.html "19.2.5 How Servers Evaluate Replication
    Filtering Rules"), as well as [Section 19.5.1.29, “Replica Errors During Replication”](replication-features-errors.html
    "19.5.1.29 Replica Errors During Replication").
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息，请参见[第19.2.5节，“服务器如何评估复制过滤规则”](replication-rules.html "19.2.5 How Servers
    Evaluate Replication Filtering Rules")，以及[第19.5.1.29节，“复制期间的副本错误”](replication-features-errors.html
    "19.5.1.29 Replica Errors During Replication")。
- en: '**INTERSECT and EXCEPT table operators. ** MySQL 8.0.31 adds support for the
    SQL [`INTERSECT`](intersect.html "15.2.8 INTERSECT Clause") and [`EXCEPT`](except.html
    "15.2.4 EXCEPT Clause") table operators. Where *`a`* and *`b`* represent result
    sets of queries, these operators behave as follows:'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**INTERSECT和EXCEPT表运算符。** MySQL 8.0.31 添加了对 SQL [`INTERSECT`](intersect.html
    "15.2.8 INTERSECT Clause") 和 [`EXCEPT`](except.html "15.2.4 EXCEPT Clause") 表运算符的支持。其中
    *`a`* 和 *`b`* 代表查询结果集，这些运算符的行为如下：'
- en: '`*`a`* INTERSECT *`b`*` includes only rows appearing in both result sets *`a`*
    and *`b`*.'
  id: totrans-518
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`a`* INTERSECT *`b`*`仅包括同时出现在结果集 *`a`* 和 *`b`* 中的行。'
- en: '`*`a`* EXCEPT *`b`*` returns only those rows from result set *`a`* which do
    *not* also appear in *`b`*.'
  id: totrans-519
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`a`* EXCEPT *`b`*`仅返回结果集 *`a`* 中那些不同时出现在 *`b`* 中的行。'
- en: '`INTERSECT DISTINCT`, `INTERSECT ALL`, `EXCEPT DISTINCT`, and `EXCEPT ALL`
    are all supported; `DISTINCT` is the default for both `INTERSECT` and `EXCEPT`
    (this is the same as for [`UNION`](union.html "15.2.18 UNION Clause")).'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`INTERSECT DISTINCT`、`INTERSECT ALL`、`EXCEPT DISTINCT` 和 `EXCEPT ALL` 都受支持；`DISTINCT`
    是 `INTERSECT` 和 `EXCEPT` 的默认值（与[`UNION`](union.html "15.2.18 UNION Clause")相同）。'
- en: For more information and examples, see [Section 15.2.8, “INTERSECT Clause”](intersect.html
    "15.2.8 INTERSECT Clause"), and [Section 15.2.4, “EXCEPT Clause”](except.html
    "15.2.4 EXCEPT Clause").
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参见[第15.2.8节，“INTERSECT子句”](intersect.html "15.2.8 INTERSECT Clause")和[第15.2.4节，“EXCEPT子句”](except.html
    "15.2.4 EXCEPT Clause")。
- en: '**User-defined histograms. ** Beginning with MySQL 8.0.31, it is possible to
    set the histogram of a column to a user-specified JSON value. This can be done
    using the following SQL syntax:'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户定义的直方图。** 从 MySQL 8.0.31 开始，可以将列的直方图设置为用户指定的 JSON 值。可以使用以下 SQL 语法完成：'
- en: '[PRE25]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This statement creates or overwrites a histogram for column *`col_name`* of
    table *`tbl_name`* using the histogram''s JSON representation *`json_data`*. After
    executing this statement, you can verify that the histogram was created or updated
    by querying the Information Schema [`COLUMN_STATISTICS`](information-schema-column-statistics-table.html
    "28.3.11 The INFORMATION_SCHEMA COLUMN_STATISTICS Table") table, like this:'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此语句为表*`tbl_name`*的列*`col_name`*创建或覆盖直方图，使用直方图的 JSON 表示*`json_data`*。执行此语句后，您可以通过查询信息模式[`COLUMN_STATISTICS`](information-schema-column-statistics-table.html
    "28.3.11 INFORMATION_SCHEMA COLUMN_STATISTICS 表")表来验证直方图是否已创建或更新，如下所示：
- en: '[PRE26]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The column value returned should be the same *`json_data`* used in the previous
    `ANALYZE TABLE` statement.
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回的列值应与先前 `ANALYZE TABLE` 语句中使用的*`json_data`*相同。
- en: This can be of use in cases where values deemed important are missed by the
    histogram sampling process. When this happens, you may want to modify the histogram
    or set your own histogram based on the complete data set. In addition, sampling
    a large user data set and building a histogram from it are resource-heavy operations
    which can impact user queries. With this enhancement, histogram generation can
    be moved off the (primary) server and performed on a replica instead; the generated
    histograms can then be assigned to the proper table columns on the source server.
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在直方图采样过程中，可能会错过被视为重要的值。当发生这种情况时，您可能希望修改直方图或根据完整数据集设置自己的直方图。此外，对大型用户数据集进行采样并构建直方图是消耗资源的操作，可能会影响用户查询。通过这种增强，直方图生成可以从（主）服务器转移到副本上执行；然后将生成的直方图分配给源服务器上的适当表列。
- en: For more information and examples, see [Histogram Statistics Analysis](analyze-table.html#analyze-table-histogram-statistics-analysis
    "Histogram Statistics Analysis").
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参见[直方图统计分析](analyze-table.html#analyze-table-histogram-statistics-analysis
    "直方图统计分析")。
- en: '**Server build ID (Linux). ** MySQL 8.0.31 adds the read-only [`build_id`](server-system-variables.html#sysvar_build_id)
    system variable for Linux systems, where a 160-bit `SHA1` signature is generated
    at compile time; the value of `build_id` is that of the generated value converted
    to a hexadecimal string, providing a unique identifier for the build.'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器构建 ID（Linux）。** MySQL 8.0.31 为 Linux 系统添加了只读[`build_id`](server-system-variables.html#sysvar_build_id)
    系统变量，其中在编译时生成一个 160 位的 `SHA1` 签名；`build_id` 的值是生成的值转换为十六进制字符串的值，为构建提供了唯一标识符。'
- en: '`build_id` is written to the server log each time MySQL starts.'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次 MySQL 启动时，`build_id` 都会写入服务器日志。
- en: If you build MySQL from source, you can observe that this value changes each
    time you recompile the server. See [Section 2.8, “Installing MySQL from Source”](source-installation.html
    "2.8 Installing MySQL from Source"), for more information.
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您从源代码构建 MySQL，您会观察到每次重新编译服务器时此值会更改。有关更多信息，请参见[第 2.8 节，“从源代码安装 MySQL”](source-installation.html
    "2.8 从源代码安装 MySQL")。
- en: This variable is not supported on platforms other than Linux.
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此变量不支持 Linux 以外的平台。
- en: '**Default EXPLAIN output format. ** MySQL 8.0.32 adds a system variable [`explain_format`](server-system-variables.html#sysvar_explain_format)
    which determines the format of the output from an [`EXPLAIN`](explain.html#explain-execution-plan
    "Obtaining Execution Plan Information") statement used to obtain a query execution
    plan in the absence of any `FORMAT` option. For example, if the value of `explain_format`
    is `TREE`, then the output from any such `EXPLAIN` uses the tree-like format,
    just as if the statement had specified `FORMAT=TREE`.'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认 EXPLAIN 输出格式。** MySQL 8.0.32 添加了一个系统变量[`explain_format`](server-system-variables.html#sysvar_explain_format)，用于确定在没有任何`FORMAT`选项的情况下获取查询执行计划的[`EXPLAIN`](explain.html#explain-execution-plan
    "获取执行计划信息")语句输出格式。例如，如果`explain_format`的值为`TREE`，那么任何这样的`EXPLAIN`输出都使用类似树状的格式，就像语句已经指定了`FORMAT=TREE`一样。'
- en: This behavior is overridden by the value set in a `FORMAT` option. Suppose that
    *`explain_format`* is set to *`TREE`*; even so, `EXPLAIN FORMAT=JSON *`stmt`*`
    displays the result using the JSON output format.
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此行为将被`FORMAT`选项中设置的值覆盖。假设*`explain_format`*设置为*`TREE`*；即使如此，`EXPLAIN FORMAT=JSON
    *`stmt`*` 也会使用 JSON 输出格式显示结果。
- en: For more information and examples, see the description of the [`explain_format`](server-system-variables.html#sysvar_explain_format)
    system variable, as well as [Obtaining Execution Plan Information](explain.html#explain-execution-plan
    "Obtaining Execution Plan Information"). There are also implications for the behavior
    of `EXPLAIN ANALYZE`; see [Obtaining Information with EXPLAIN ANALYZE](explain.html#explain-analyze
    "Obtaining Information with EXPLAIN ANALYZE").
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参阅 [`explain_format`](server-system-variables.html#sysvar_explain_format)
    系统变量的描述，以及 [获取执行计划信息](explain.html#explain-execution-plan "获取执行计划信息")。对于 `EXPLAIN
    ANALYZE` 的行为也有影响；请参阅 [使用 EXPLAIN ANALYZE 获取信息](explain.html#explain-analyze "使用
    EXPLAIN ANALYZE 获取信息")。
- en: '**ST_TRANSFORM() Cartesian SRS support. ** Prior to MySQL 8.0.30, the [`ST_TRANSFORM()`](spatial-operator-functions.html#function_st-transform)
    function did not support Cartesian Spatial Reference Systems. In MySQL 8.0.30
    and later, this function provides support for the Popular Visualisation Pseudo
    Mercator (EPSG 1024) projection method, used for WGS 84 Pseudo-Mercator (SRID
    3857). MySQL 8.0.32 and later supports all Cartesian SRSs, except for EPSG 1042,
    EPSG 1043, EPSG 9816, and EPSG 9826.'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ST_TRANSFORM() 支持笛卡尔坐标系。** 在 MySQL 8.0.30 之前，[`ST_TRANSFORM()`](spatial-operator-functions.html#function_st-transform)
    函数不支持笛卡尔空间参考系统。在 MySQL 8.0.30 及更高版本中，此函数支持流行的可视化伪墨卡托（EPSG 1024）投影方法，用于 WGS 84
    伪墨卡托（SRID 3857）。MySQL 8.0.32 及更高版本支持除 EPSG 1042、EPSG 1043、EPSG 9816 和 EPSG 9826
    之外的所有笛卡尔空间参考系统。'
- en: Features Deprecated in MySQL 8.0
  id: totrans-537
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MySQL 8.0 中已弃用的特性
- en: The following features are deprecated in MySQL 8.0 and may be removed in a future
    series. Where alternatives are shown, applications should be updated to use them.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 以下功能在 MySQL 8.0 中已弃用，并可能在未来的系列中被移除。如果显示了替代方案，则应更新应用程序以使用它们。
- en: For applications that use features deprecated in MySQL 8.0 that have been removed
    in a higher MySQL series, statements may fail when replicated from a MySQL 8.0
    source to a higher-series replica, or may have different effects on source and
    replica. To avoid such problems, applications that use features deprecated in
    8.0 should be revised to avoid them and use alternatives when possible.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在 MySQL 8.0 中使用已弃用功能的应用程序，在更高版本的 MySQL 系列中已移除的情况下，从 MySQL 8.0 源到更高系列的复制时可能会导致语句失败，或者在源和副本上产生不同的效果。为避免此类问题，应修订使用
    8.0 中已弃用功能的应用程序，尽可能使用替代方案。
- en: '**Wildcard characters in database grants. ** The use of the characters `%`
    and `_` as wildcards in database grants is deprecated as of MySQL 8.0.35\. You
    should expect for the wildcard functionality to removed in a future MySQL release
    and for these characters always to be treated as literals, as they are already
    whenever the value of the [`partial_revokes`](server-system-variables.html#sysvar_partial_revokes)
    server system variable is `ON`.'
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库授权中的通配符字符。** 在 MySQL 8.0.35 中，使用 `%` 和 `_` 作为数据库授权中的通配符已被弃用。您应该预期通配符功能在未来的
    MySQL 版本中被移除，并且这些字符始终被视为文字，就像在 [`partial_revokes`](server-system-variables.html#sysvar_partial_revokes)
    服务器系统变量的值为 `ON` 时一样。'
- en: In addition, the treatment of `%` by the server as a synonym for `localhost`
    when checking privileges is now also deprecated as of MySQL 8.0.35, and thus subject
    to removal in a future version of MySQL.
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，当检查权限时，服务器将 `%` 视为 `localhost` 的处理方式在 MySQL 8.0.35 中也已弃用，因此可能在未来的 MySQL 版本中被移除。
- en: Pluggable FIDO authentication is deprecated in MySQL 8.0.35 and later.
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8.0.35 及更高版本中已弃用可插拔的 FIDO 认证。
- en: The [`--character-set-client-handshake`](server-options.html#option_mysqld_character-set-client-handshake)
    option, originally intended for use with upgrades from very old versions of MySQL,
    is now deprecated in MySQL 8.0.35 and later MySQL 8.0 releases, where a warning
    is issued whenever it is used. You should expect this option to be removed in
    a future version of MySQL; applications depending on this option should begin
    migration away from it as soon as possible.
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`--character-set-client-handshake`](server-options.html#option_mysqld_character-set-client-handshake)
    选项最初用于从非常旧版本的 MySQL 进行升级，现在在 MySQL 8.0.35 及更高版本中已弃用，使用时会发出警告。您应该预期此选项在未来的 MySQL
    版本中被移除；依赖此选项的应用程序应尽快迁移。'
- en: The [`old`](server-system-variables.html#sysvar_old) and [`new`](server-system-variables.html#sysvar_new)
    server system variables and related server options are deprecated in MySQL 8.0,
    beginning with MySQL 8.0.35\. A warning is now issued whenever either of these
    variables is set or read. Because these variables are destined for removal in
    a future version of MySQL, applications which depend on them should begin migration
    away from them as soon as possible.
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0 版本中，开始于 MySQL 8.0.35，[`old`](server-system-variables.html#sysvar_old)
    和 [`new`](server-system-variables.html#sysvar_new) 服务器系统变量及相关服务器选项已被弃用。每当设置或读取这些变量时，现在会发出警告。由于这些变量将在未来的
    MySQL 版本中被移除，依赖于它们的应用程序应尽快开始迁移。
- en: Legacy audit log filtering mode is deprecated as of MySQL 8.0.34\. New deprecation
    warnings are emitted for legacy audit log filtering system variables. These deprecated
    variables are either read-only or dynamic.
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8.0.34 版本开始，传统审计日志过滤模式已被弃用。传统审计日志过滤系统变量现在会发出新的弃用警告。这些弃用的变量要么是只读的，要么是动态的。
- en: (Read-only) [`audit_log_policy`](audit-log-reference.html#sysvar_audit_log_policy)
    now writes a warning message to the MySQL server error log during server startup
    when the value is not `ALL` (default value).
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (只读) [`audit_log_policy`](audit-log-reference.html#sysvar_audit_log_policy)
    现在在服务器启动时，当值不为 `ALL`（默认值）时，会向 MySQL 服务器错误日志写入警告消息。
- en: '(Dynamic) [`audit_log_include_accounts`](audit-log-reference.html#sysvar_audit_log_include_accounts),
    [`audit_log_exclude_accounts`](audit-log-reference.html#sysvar_audit_log_exclude_accounts),
    [`audit_log_statement_policy`](audit-log-reference.html#sysvar_audit_log_statement_policy),
    and [`audit_log_connection_policy`](audit-log-reference.html#sysvar_audit_log_connection_policy).
    Dynamic variables print a warning message based on usage:'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (动态) [`audit_log_include_accounts`](audit-log-reference.html#sysvar_audit_log_include_accounts)，[`audit_log_exclude_accounts`](audit-log-reference.html#sysvar_audit_log_exclude_accounts)，[`audit_log_statement_policy`](audit-log-reference.html#sysvar_audit_log_statement_policy)，以及
    [`audit_log_connection_policy`](audit-log-reference.html#sysvar_audit_log_connection_policy)。动态变量基于使用情况打印警告消息：
- en: Passing in a non-NULL value to [`audit_log_include_accounts`](audit-log-reference.html#sysvar_audit_log_include_accounts)
    or [`audit_log_exclude_accounts`](audit-log-reference.html#sysvar_audit_log_exclude_accounts)
    during MySQL server startup now writes a warning message to the server error log.
  id: totrans-548
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 服务器启动期间向 [`audit_log_include_accounts`](audit-log-reference.html#sysvar_audit_log_include_accounts)
    或 [`audit_log_exclude_accounts`](audit-log-reference.html#sysvar_audit_log_exclude_accounts)
    传递非 NULL 值现在会向服务器错误日志写入警告消息。
- en: Passing in a non-default value to [`audit_log_statement_policy`](audit-log-reference.html#sysvar_audit_log_statement_policy)
    or [`audit_log_connection_policy`](audit-log-reference.html#sysvar_audit_log_connection_policy)
    during MySQL server startup now writes a warning message to the server error log.
    `ALL` is the default value for both variables.
  id: totrans-549
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 服务器启动期间传递非默认值给 [`audit_log_statement_policy`](audit-log-reference.html#sysvar_audit_log_statement_policy)
    或 [`audit_log_connection_policy`](audit-log-reference.html#sysvar_audit_log_connection_policy)
    现在会向服务器错误日志写入警告消息。`ALL` 是这两个变量的默认值。
- en: Changing an existing value using [`SET`](set.html "13.3.6 The SET Type") syntax
    during a MySQL client session now writes a warning message to the client log.
  id: totrans-550
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 客户端会话期间使用 [`SET`](set.html "13.3.6 The SET Type") 语法更改现有值现在会向客户端日志写入警告消息。
- en: Persisting a variable using [`SET PERSIST`](set-variable.html "15.7.6.1 SET
    Syntax for Variable Assignment") syntax during a MySQL client session now writes
    a warning message to the client log.
  id: totrans-551
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 客户端会话期间使用 [`SET PERSIST`](set-variable.html "15.7.6.1 SET Syntax for
    Variable Assignment") 语法持久化变量现在会向客户端日志写入警告消息。
- en: In MySQL 8.0.34 and later, the `mysql_native_password` authentication plugin
    is deprecated and it now produces a deprecation warning in the server error log
    if an account attempts to authenticate using `mysql_native_password` as an authentication
    method.
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.34 及更高版本中，`mysql_native_password` 认证插件已被弃用，如果账户尝试使用 `mysql_native_password`
    进行认证，现在会在服务器错误日志中产生弃用警告。
- en: The [`ssl_fips_mode`](server-system-variables.html#sysvar_ssl_fips_mode) server
    system variable, [`--ssl-fips-mode`](connection-options.html#option_general_ssl-fips-mode)
    client option, and the `MYSQL_OPT_SSL_FIPS_MODE` option are deprecated and subject
    to removal in a future version of MySQL.
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ssl_fips_mode`](server-system-variables.html#sysvar_ssl_fips_mode) 服务器系统变量，[`--ssl-fips-mode`](connection-options.html#option_general_ssl-fips-mode)
    客户端选项，以及 `MYSQL_OPT_SSL_FIPS_MODE` 选项已被弃用，并将在未来的 MySQL 版本中被移除。'
- en: The `keyring_file` and `keyring_encrypted_file` plugins are deprecated as of
    MySQL 8.0.34\. These keyring plugins are superseded by the `component_keyring_file`
    and `component_keyring_encrypted_file` components. For a concise comparison of
    keyring components and plugins, see [Section 8.4.4.1, “Keyring Components Versus
    Keyring Plugins”](keyring-component-plugin-comparison.html "8.4.4.1 Keyring Components
    Versus Keyring Plugins").
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyring_file`和`keyring_encrypted_file`插件已从MySQL 8.0.34开始弃用。这些密钥环插件已被`component_keyring_file`和`component_keyring_encrypted_file`组件取代。有关密钥环组件和插件的简明比较，请参见[第8.4.4.1节，“密钥环组件与密钥环插件比较”](keyring-component-plugin-comparison.html
    "8.4.4.1 密钥环组件与密钥环插件比较")。'
- en: As of MySQL 8.0.31, the `keyring_oci` plugin is deprecated and subject to removal
    in a future release of MySQL. Instead, consider using the `component_keyring_oci`
    component for storing keyring data (see [Section 8.4.4.11, “Using the Oracle Cloud
    Infrastructure Vault Keyring Component”](keyring-oci-component.html "8.4.4.11 Using
    the Oracle Cloud Infrastructure Vault Keyring Component")).
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.31开始，`keyring_oci`插件已被弃用，并可能在未来的MySQL版本中被移除。相反，考虑使用`component_keyring_oci`组件来存储密钥环数据（参见[第8.4.4.11节，“使用Oracle
    Cloud基础设施Vault密钥环组件”](keyring-oci-component.html "8.4.4.11 使用Oracle Cloud基础设施Vault密钥环组件")）。
- en: The `utf8mb3` character set is deprecated. Please use `utf8mb4` instead.
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8mb3`字符集已被弃用。请改用`utf8mb4`。'
- en: 'The following character sets are deprecated:'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下字符集已被弃用：
- en: '`ucs2` (see [Section 12.9.4, “The ucs2 Character Set (UCS-2 Unicode Encoding)”](charset-unicode-ucs2.html
    "12.9.4 The ucs2 Character Set (UCS-2 Unicode Encoding)"))'
  id: totrans-558
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ucs2` (参见[第12.9.4节，“ucs2字符集（UCS-2 Unicode编码）”](charset-unicode-ucs2.html "12.9.4 ucs2字符集（UCS-2
    Unicode编码）"))'
- en: '`macroman` and `macce` (see [Section 12.10.2, “West European Character Sets”](charset-we-sets.html
    "12.10.2 West European Character Sets"), and [Section 12.10.3, “Central European
    Character Sets”](charset-ce-sets.html "12.10.3 Central European Character Sets"))'
  id: totrans-559
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`macroman`和`macce` (参见[第12.10.2节，“西欧字符集”](charset-we-sets.html "12.10.2 西欧字符集")，以及[第12.10.3节，“中欧字符集”](charset-ce-sets.html
    "12.10.3 中欧字符集"))'
- en: '`dec` (see [Section 12.10.2, “West European Character Sets”](charset-we-sets.html
    "12.10.2 West European Character Sets"))'
  id: totrans-560
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dec` (参见[第12.10.2节，“西欧字符集”](charset-we-sets.html "12.10.2 西欧字符集"))'
- en: '`hp8` (see [Section 12.10.2, “West European Character Sets”](charset-we-sets.html
    "12.10.2 West European Character Sets"))'
  id: totrans-561
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hp8` (参见[第12.10.2节，“西欧字符集”](charset-we-sets.html "12.10.2 西欧字符集"))'
- en: 'In MySQL 8.0.28 and later, any of these character sets or their collations
    produces a deprecation warning when used in either of the following ways:'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.28及更高版本中，任何这些字符集或它们的排序在以下任一方式中使用时会产生弃用警告：
- en: When starting the MySQL server with [`--character-set-server`](server-system-variables.html#sysvar_character_set_server)
    or [`--collation-server`](server-system-variables.html#sysvar_collation_server)
  id: totrans-563
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在启动MySQL服务器时使用[`--character-set-server`](server-system-variables.html#sysvar_character_set_server)或[`--collation-server`](server-system-variables.html#sysvar_collation_server)
- en: When specified in any SQL statement, including but not limited to [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement"), [`CREATE DATABASE`](create-database.html "15.1.12 CREATE
    DATABASE Statement"), [`SET NAMES`](set-names.html "15.7.6.3 SET NAMES Statement"),
    and [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")
  id: totrans-564
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何SQL语句中指定时，包括但不限于[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE语句")，[`CREATE
    DATABASE`](create-database.html "15.1.12 CREATE DATABASE语句")，[`SET NAMES`](set-names.html
    "15.7.6.3 SET NAMES语句")和[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE语句")
- en: You should use `utf8mb4` instead any of the character sets listed previously.
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该使用`utf8mb4`而不是之前列出的任何字符集。
- en: 'User-defined collations are deprecated. Beginning with MySQL 8.0.33, either
    of the following causes a warning to be written to the log:'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户自定义排序已被弃用。从MySQL 8.0.33开始，以下任一情况都会导致警告写入日志：
- en: Use of `COLLATE` in any SQL statement together with the name of a user-defined
    collation
  id: totrans-567
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何SQL语句中与用户自定义排序的名称一起使用`COLLATE`
- en: Using the name of a user-defined collation for the value of [`collation_server`](server-system-variables.html#sysvar_collation_server),
    [`collation_database`](server-system-variables.html#sysvar_collation_database),
    or [`collation_connection`](server-system-variables.html#sysvar_collation_connection).
  id: totrans-568
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`collation_server`](server-system-variables.html#sysvar_collation_server)，[`collation_database`](server-system-variables.html#sysvar_collation_database)，或[`collation_connection`](server-system-variables.html#sysvar_collation_connection)的值中使用用户自定义排序的名称。
- en: You should expect support for user-defined collations to be removed in a future
    version of MySQL.
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该预计在未来的MySQL版本中将删除对用户定义排序规则的支持。
- en: Because `caching_sha2_password` is the default authentication plugin in MySQL
    8.0 and provides a superset of the capabilities of the `sha256_password` authentication
    plugin, `sha256_password` is deprecated; expect it to be removed in a future version
    of MySQL. MySQL accounts that authenticate using `sha256_password` should be migrated
    to use `caching_sha2_password` instead.
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为`caching_sha2_password`是MySQL 8.0中的默认身份验证插件，并提供了`sha256_password`身份验证插件功能的超集，`sha256_password`已被弃用；预计在未来的MySQL版本中将被移除。使用`sha256_password`进行身份验证的MySQL账户应该迁移到使用`caching_sha2_password`。
- en: The `validate_password` plugin has been reimplemented to use the component infrastructure.
    The plugin form of `validate_password` is still available but is now deprecated;
    expect it to be removed in a future version of MySQL. MySQL installations that
    use the plugin should make the transition to using the component instead. See
    [Section 8.4.3.3, “Transitioning to the Password Validation Component”](validate-password-transitioning.html
    "8.4.3.3 Transitioning to the Password Validation Component").
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate_password`插件已被重新实现以使用组件基础架构。`validate_password`插件形式仍然可用，但现在已被弃用；预计在未来的MySQL版本中将被移除。使用该插件的MySQL安装应该过渡到使用组件。参见[第8.4.3.3节，“过渡到密码验证组件”](validate-password-transitioning.html
    "8.4.3.3 Transitioning to the Password Validation Component")。'
- en: The `ENGINE` clause for the [`ALTER TABLESPACE`](alter-tablespace.html "15.1.10 ALTER
    TABLESPACE Statement") and [`DROP TABLESPACE`](drop-tablespace.html "15.1.33 DROP
    TABLESPACE Statement") statements is deprecated.
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ALTER TABLESPACE`](alter-tablespace.html "15.1.10 ALTER TABLESPACE Statement")和[`DROP
    TABLESPACE`](drop-tablespace.html "15.1.33 DROP TABLESPACE Statement")语句的`ENGINE`子句已被弃用。'
- en: The [`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)
    SQL mode is deprecated.
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PAD_CHAR_TO_FULL_LENGTH`](sql-mode.html#sqlmode_pad_char_to_full_length)
    SQL模式已被弃用。'
- en: '`AUTO_INCREMENT` support is deprecated for columns of type [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") and [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") (and any synonyms).
    Consider removing the `AUTO_INCREMENT` attribute from such columns, or convert
    them to an integer type.'
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTO_INCREMENT`支持已被弃用于[`FLOAT`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE")和[`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE")（以及任何同义词）类型的列。考虑从这些列中移除`AUTO_INCREMENT`属性，或将它们转换为整数类型。'
- en: The `UNSIGNED` attribute is deprecated for columns of type [`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"), [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE"), and [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") (and any synonyms).
    Consider using a simple `CHECK` constraint instead for such columns.
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UNSIGNED`属性已被弃用于[`FLOAT`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE")、[`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE")和[`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC")（以及任何同义词）类型的列。考虑为这些列使用简单的`CHECK`约束代替。'
- en: '`FLOAT(*`M`*,*`D`*)` and `DOUBLE(*`M`*,*`D`*)` syntax to specify the number
    of digits for columns of type [`FLOAT`](floating-point-types.html "13.1.4 Floating-Point
    Types (Approximate Value) - FLOAT, DOUBLE") and [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") (and any synonyms)
    is a nonstandard MySQL extension. This syntax is deprecated.'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FLOAT(*`M`*,*`D`*)`和`DOUBLE(*`M`*,*`D`*)`语法用于指定[`FLOAT`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE")和[`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE")（以及任何同义词）类型列的数字位数，这是MySQL的非标准扩展。此语法已被弃用。'
- en: The `ZEROFILL` attribute is deprecated for numeric data types, as is the display
    width attribute for integer data types. Consider using an alternative means of
    producing the effect of these attributes. For example, applications could use
    the [`LPAD()`](string-functions.html#function_lpad) function to zero-pad numbers
    up to the desired width, or they could store the formatted numbers in [`CHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types") columns.
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ZEROFILL`属性已被弃用于数值数据类型，整数数据类型的显示宽度属性也是如此。考虑使用其他方法来实现这些属性的效果。例如，应用程序可以使用[`LPAD()`](string-functions.html#function_lpad)函数将数字零填充到所需的宽度，或者它们可以将格式化的数字存储在[`CHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types")列中。'
- en: For string data types, the `BINARY` attribute is a nonstandard MySQL extension
    that is shorthand for specifying the binary (`_bin`) collation of the column character
    set (or of the table default character set if no column character set is specified).
    In MySQL 8.0, this nonstandard use of `BINARY` is ambiguous because the `utf8mb4`
    character set has multiple `_bin` collations, so the `BINARY` attribute is deprecated;
    expect support for it to be removed in a future version of MySQL. Applications
    should be adjusted to use an explicit `_bin` collation instead.
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于字符串数据类型，`BINARY`属性是一个非标准的MySQL扩展，用于指定列字符集的二进制(`_bin`)排序规则（如果未指定列字符集，则使用表默认字符集）。在MySQL
    8.0中，这种非标准用法的`BINARY`是模棱两可的，因为`utf8mb4`字符集有多个`_bin`排序规则，所以`BINARY`属性已被弃用；应调整应用程序以使用显式的`_bin`排序规则。
- en: The use of `BINARY` to specify a data type or character set remains unchanged.
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`BINARY`指定数据类型或字符集的做法保持不变。
- en: Previous versions of MySQL supported the nonstandard shorthand expressions `ASCII`
    and `UNICODE`, respectively, for `CHARACTER SET latin1` and `CHARACTER SET ucs2`.
    `ASCII` and `UNICODE` are deprecated (MySQL 8.0.28 and later) and now produce
    a warning. Use `CHARACTER SET` instead, in both cases.
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前的MySQL版本支持非标准的简写表达式`ASCII`和`UNICODE`，分别用于`CHARACTER SET latin1`和`CHARACTER
    SET ucs2`。`ASCII`和`UNICODE`已被弃用（MySQL 8.0.28及更高版本），现在会产生警告。在这两种情况下，请改用`CHARACTER
    SET`。
- en: The nonstandard C-style [`&&`](logical-operators.html#operator_and), [`||`](logical-operators.html#operator_or),
    and [`!`](logical-operators.html#operator_not) operators that are synonyms for
    the standard SQL [`AND`](logical-operators.html#operator_and), [`OR`](logical-operators.html#operator_or),
    and [`NOT`](logical-operators.html#operator_not) operators, respectively, are
    deprecated. Applications that use the nonstandard operators should be adjusted
    to use the standard operators.
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为标准SQL的[`AND`](logical-operators.html#operator_and)、[`OR`](logical-operators.html#operator_or)和[`NOT`](logical-operators.html#operator_not)运算符的非标准C风格的[`&&`](logical-operators.html#operator_and)、[`||`](logical-operators.html#operator_or)和[`!`](logical-operators.html#operator_not)运算符已被弃用。使用非标准运算符的应用程序应调整为使用标准运算符。
- en: Note
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: Use of [`||`](logical-operators.html#operator_or) is deprecated unless the [`PIPES_AS_CONCAT`](sql-mode.html#sqlmode_pipes_as_concat)
    SQL mode is enabled. In that case, `||` signifies the SQL-standard string concatenation
    operator).
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除非启用了[`PIPES_AS_CONCAT`](sql-mode.html#sqlmode_pipes_as_concat) SQL 模式，否则使用[`||`](logical-operators.html#operator_or)已被弃用（在这种情况下，`||`表示SQL标准的字符串连接运算符）。
- en: The [`JSON_MERGE()`](json-modification-functions.html#function_json-merge) function
    is deprecated. Use [`JSON_MERGE_PRESERVE()`](json-modification-functions.html#function_json-merge-preserve)
    instead.
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`JSON_MERGE()`](json-modification-functions.html#function_json-merge)函数已被弃用。请改用[`JSON_MERGE_PRESERVE()`](json-modification-functions.html#function_json-merge-preserve)。'
- en: The `SQL_CALC_FOUND_ROWS` query modifier and accompanying [`FOUND_ROWS()`](information-functions.html#function_found-rows)
    function are deprecated. See the [`FOUND_ROWS()`](information-functions.html#function_found-rows)
    description for information about an alternative strategy.
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SQL_CALC_FOUND_ROWS`查询修饰符和相应的[`FOUND_ROWS()`](information-functions.html#function_found-rows)函数已被弃用。请查看[`FOUND_ROWS()`](information-functions.html#function_found-rows)的描述以获取替代策略的信息。'
- en: Support for `TABLESPACE = innodb_file_per_table` and `TABLESPACE = innodb_temporary`
    clauses with [`CREATE TEMPORARY TABLE`](create-table.html "15.1.20 CREATE TABLE
    Statement") is deprecated as of MySQL 8.0.13.
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至MySQL 8.0.13，对于[`CREATE TEMPORARY TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement")，`TABLESPACE = innodb_file_per_table`和`TABLESPACE = innodb_temporary`子句已被弃用。
- en: For [`SELECT`](select.html "15.2.13 SELECT Statement") statements, use of an
    `INTO` clause after `FROM` but not at the end of the [`SELECT`](select.html "15.2.13 SELECT
    Statement") is deprecated as of MySQL 8.0.20\. It is preferred to place the `INTO`
    at the end of the statement.
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`SELECT`](select.html "15.2.13 SELECT Statement")语句，在`FROM`之后但不是在[`SELECT`](select.html
    "15.2.13 SELECT Statement")的末尾使用`INTO`已被弃用，截至MySQL 8.0.20。最好将`INTO`放在语句的末尾。
- en: 'For [`UNION`](union.html "15.2.18 UNION Clause") statements, these two variants
    containing `INTO` are deprecated as of MySQL 8.0.20:'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`UNION`](union.html "15.2.18 UNION Clause")语句，截至MySQL 8.0.20，这两个包含`INTO`的变体已被弃用：
- en: In the trailing query block of a query expression, use of `INTO` before `FROM`.
  id: totrans-589
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在查询表达式的尾部查询块中，在`FROM`之前使用`INTO`。
- en: In a parenthesized trailing block of a query expression, use of `INTO`, regardless
    of its position relative to `FROM`.
  id: totrans-590
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在查询表达式的括号尾部块中，无论`INTO`相对于`FROM`的位置如何，都要使用。
- en: See [Section 15.2.13.1, “SELECT ... INTO Statement”](select-into.html "15.2.13.1 SELECT
    ... INTO Statement"), and [Section 15.2.18, “UNION Clause”](union.html "15.2.18 UNION
    Clause").
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅[第15.2.13.1节，“SELECT ... INTO语句”](select-into.html "15.2.13.1 SELECT ...
    INTO语句")和[第15.2.18节，“UNION子句”](union.html "15.2.18 UNION子句")。
- en: '[`FLUSH HOSTS`](flush.html#flush-hosts) is deprecated as of MySQL 8.0.23\.
    Instead, truncate the Performance Schema [`host_cache`](performance-schema-host-cache-table.html
    "29.12.21.3 The host_cache Table") table:'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自MySQL 8.0.23起，[`FLUSH HOSTS`](flush.html#flush-hosts)已被弃用。取而代之的是截断性能模式[`host_cache`](performance-schema-host-cache-table.html
    "29.12.21.3 host_cache表")表：
- en: '[PRE27]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    operation requires the [`DROP`](privileges-provided.html#priv_drop) privilege
    for the table.
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE语句")操作需要表的[`DROP`](privileges-provided.html#priv_drop)权限。'
- en: The [**mysql_upgrade**](mysql-upgrade.html "6.4.5 mysql_upgrade — Check and
    Upgrade MySQL Tables") client is deprecated because its capabilities for upgrading
    the system tables in the `mysql` system schema and objects in other schemas have
    been moved into the MySQL server. See [Section 3.4, “What the MySQL Upgrade Process
    Upgrades”](upgrading-what-is-upgraded.html "3.4 What the MySQL Upgrade Process
    Upgrades").
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为其升级系统模式中的系统表和其他模式中的对象的能力已被移至MySQL服务器，所以已弃用[**mysql_upgrade**](mysql-upgrade.html
    "6.4.5 mysql_upgrade — 检查和升级MySQL表")客户端。请参阅[第3.4节，“MySQL升级过程升级了什么”](upgrading-what-is-upgraded.html
    "3.4 MySQL升级过程升级了什么")。
- en: The [`--no-dd-upgrade`](server-options.html#option_mysqld_no-dd-upgrade) server
    option is deprecated. It is superseded by the [`--upgrade`](server-options.html#option_mysqld_upgrade)
    option, which provides finer control over data dictionary and server upgrade behavior.
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`--no-dd-upgrade`](server-options.html#option_mysqld_no-dd-upgrade)服务器选项已被弃用。它已被[`--upgrade`](server-options.html#option_mysqld_upgrade)选项取代，该选项提供了对数据字典和服务器升级行为的更精细控制。'
- en: The `mysql_upgrade_info` file, which is created data directory and used to store
    the MySQL version number, is deprecated; expect it to be removed in a future version
    of MySQL.
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建于数据目录中并用于存储MySQL版本号的`mysql_upgrade_info`文件已被弃用；预计将在将来的MySQL版本中删除。
- en: The `relay_log_info_file` system variable and `--master-info-file` option are
    deprecated. Previously, these were used to specify the name of the relay log info
    log and source info log when [`relay_log_info_repository=FILE`](replication-options-replica.html#sysvar_relay_log_info_repository)
    and [`master_info_repository=FILE`](replication-options-replica.html#sysvar_master_info_repository)
    were set, but those settings have been deprecated. The use of files for the relay
    log info log and source info log has been superseded by crash-safe replica tables,
    which are the default in MySQL 8.0.
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`relay_log_info_file`系统变量和`--master-info-file`选项已被弃用。以前，当设置[`relay_log_info_repository=FILE`](replication-options-replica.html#sysvar_relay_log_info_repository)和[`master_info_repository=FILE`](replication-options-replica.html#sysvar_master_info_repository)时，这些用于指定中继日志信息日志和源信息日志的名称，但这些设置已被弃用。中继日志信息日志和源信息日志的文件使用已被MySQL
    8.0中的崩溃安全复制表取代，这是默认设置。'
- en: The [`max_length_for_sort_data`](server-system-variables.html#sysvar_max_length_for_sort_data)
    system variable is now deprecated due to optimizer changes that make it obsolete
    and of no effect.
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于优化器的更改使其过时且无效，[`max_length_for_sort_data`](server-system-variables.html#sysvar_max_length_for_sort_data)系统变量现已被弃用。
- en: 'These legacy parameters for compression of connections to the server are deprecated:
    The [`--compress`](connection-options.html#option_general_compress) client command-line
    option; the `MYSQL_OPT_COMPRESS` option for the [`mysql_options()`](/doc/c-api/8.0/en/mysql-options.html)
    C API function; the [`slave_compressed_protocol`](replication-options-replica.html#sysvar_slave_compressed_protocol)
    system variable. For information about parameters to use instead, see [Section 6.2.8,
    “Connection Compression Control”](connection-compression-control.html "6.2.8 Connection
    Compression Control").'
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些用于压缩与服务器连接的传统参数已被弃用：[`--compress`](connection-options.html#option_general_compress)客户端命令行选项；[`mysql_options()`](/doc/c-api/8.0/en/mysql-options.html)
    C API函数的`MYSQL_OPT_COMPRESS`选项；[`slave_compressed_protocol`](replication-options-replica.html#sysvar_slave_compressed_protocol)系统变量。有关替代参数的信息，请参阅[第6.2.8节，“连接压缩控制”](connection-compression-control.html
    "6.2.8 连接压缩控制")。
- en: Use of the `MYSQL_PWD` environment variable to specify a MySQL password is deprecated.
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`MYSQL_PWD`环境变量指定MySQL密码已被弃用。
- en: Use of [`VALUES()`](miscellaneous-functions.html#function_values) to access
    new row values in [`INSERT ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html
    "15.2.7.2 INSERT ... ON DUPLICATE KEY UPDATE Statement") is deprecated as of MySQL
    8.0.20\. Use aliases for the new row and columns, instead.
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.20 开始，使用[`VALUES()`](miscellaneous-functions.html#function_values)来访问[`INSERT
    ... ON DUPLICATE KEY UPDATE`](insert-on-duplicate.html "15.2.7.2 INSERT ... ON
    DUPLICATE KEY UPDATE Statement")中的新行值已被弃用。改为使用新行和列的别名。
- en: Because specifying `ON ERROR` before `ON EMPTY` when invoking [`JSON_TABLE()`](json-table-functions.html#function_json-table)
    is counter to the SQL standard, this syntax is now deprecated in MySQL. Beginning
    with MySQL 8.0.20, the server prints a warning whenever you attempt to do so.
    When specifying both of these clauses in a single `JSON_TABLE()` invocation, make
    sure that `ON EMPTY` is used first.
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为在调用[`JSON_TABLE()`](json-table-functions.html#function_json-table)时在`ON ERROR`之前指定`ON
    EMPTY`与 SQL 标准相悖，这种语法现在在 MySQL 中已被弃用。从 MySQL 8.0.20 开始，服务器在您尝试这样做时会打印警告。在单个`JSON_TABLE()`调用中指定这两个子句时，请确保首先使用`ON
    EMPTY`。
- en: Columns with index prefixes have never been supported as part of a table's partitioning
    key; previously, these were allowed when creating, altering, or upgrading partitioned
    tables but were excluded by the table's partitioning function, and no warning
    that this had occurred was issued by the server. This permissive behavior is now
    deprecated, and subject to removal in a future version of MySQL in which using
    any such columns in the partitioning key causes the [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") or [`ALTER TABLE`](alter-table.html "15.1.9 ALTER
    TABLE Statement") statement in they occur to be rejected.
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有索引前缀的列从未作为表的分区键的一部分得到支持；以前，在创建、修改或升级分区表时允许这样做，但被排除在表的分区函数之外，并且服务器没有发出发生这种情况的警告。这种宽容的行为现在已被弃用，并且在将来的
    MySQL 版本中，如果在分区键中使用任何这些列，将导致拒绝[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement")或[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")语句。
- en: As of MySQL 8.0.21, whenever columns using index prefixes are specified as part
    of the partitioning key, a warning is generated for each such column. Whenever
    a [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") or [`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") statement is rejected
    because all columns in the proposed partitioning key would have index prefixes,
    the resulting error now provides the exact reason for the rejection. In either
    instance, this includes cases in which the columns used in the partitioning function
    are defined implicitly as those in the table's primary key by employing an empty
    `PARTITION BY KEY()` clause.
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 MySQL 8.0.21 开始，每当指定使用索引前缀的列作为分区键的一部分时，将为每个这样的列生成警告。每当因为所有提议的分区键中的列都具有索引前缀而拒绝[`CREATE
    TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")或[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement")语句时，生成的错误现在提供了拒绝的确切原因。在任何情况下，这包括使用空的`PARTITION
    BY KEY()`子句通过隐式定义分区函数中使用的列为表的主键中的列的情况。
- en: For more information and examples, see [Column index prefixes not supported
    for key partitioning](partitioning-limitations.html#partitioning-limitations-prefixes
    "Column index prefixes not supported for key partitioning").
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参见[不支持列索引前缀用于键分区](partitioning-limitations.html#partitioning-limitations-prefixes
    "不支持列索引前缀用于键分区")。
- en: The InnoDB memcached plugin is deprecated as of MySQL 8.0.22; expect support
    for it to be removed in a future version of MySQL.
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.22，InnoDB memcached 插件已被弃用；预计在将来的 MySQL 版本中将删除对其的支持。
- en: The [`temptable_use_mmap`](server-system-variables.html#sysvar_temptable_use_mmap)
    variable is deprecated as of MySQL 8.0.26; expect support for it to be removed
    in a future version of MySQL.
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`temptable_use_mmap`](server-system-variables.html#sysvar_temptable_use_mmap)变量从
    MySQL 8.0.26 开始已被弃用；预计在将来的 MySQL 版本中将删除对其的支持。'
- en: The [`BINARY`](cast-functions.html#operator_binary) operator is deprecated as
    of MySQL 8.0.27, and you should expect its removal in a future version of MySQL.
    Use of `BINARY` now causes a warning. Use [`CAST(... AS BINARY)`](cast-functions.html#function_cast)
    instead.
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`BINARY`](cast-functions.html#operator_binary)运算符从 MySQL 8.0.27 开始已被弃用，您应该预期在将来的
    MySQL 版本中将其移除。现在使用`BINARY`会导致警告。改用[`CAST(... AS BINARY)`](cast-functions.html#function_cast)。'
- en: The [`default_authentication_plugin`](server-system-variables.html#sysvar_default_authentication_plugin)
    variable is deprecated as of MySQL 8.0.27; expect support for it to be removed
    in a future version of MySQL.
  id: totrans-610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`default_authentication_plugin`](server-system-variables.html#sysvar_default_authentication_plugin)变量从MySQL
    8.0.27开始被弃用；预计在未来的MySQL版本中将不再支持它。'
- en: The [`default_authentication_plugin`](server-system-variables.html#sysvar_default_authentication_plugin)
    variable is still used in MySQL 8.0.27, but in conjunction with and at a lower
    precedence than the new `authentication_policy` system variable, which is introduced
    in MySQL 8.0.27 with the multifactor authentication feature. For details, see
    [The Default Authentication Plugin](pluggable-authentication.html#pluggable-authentication-default-plugin
    "The Default Authentication Plugin").
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`default_authentication_plugin`](server-system-variables.html#sysvar_default_authentication_plugin)变量仍然在MySQL
    8.0.27中使用，但与新的`authentication_policy`系统变量一起，并且优先级低于在MySQL 8.0.27中引入的多因素认证功能。详情请参见[默认认证插件](pluggable-authentication.html#pluggable-authentication-default-plugin
    "默认认证插件")。'
- en: The [`--abort-slave-event-count`](replication-options-replica.html#option_mysqld_abort-slave-event-count)
    and [`--disconnect-slave-event-count`](replication-options-replica.html#option_mysqld_disconnect-slave-event-count)
    server options, used by the MySQL test suite and not normally used in production,
    are deprecated as of MySQL 8.0.29; expect both options to be removed in a future
    version of MySQL.
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`--abort-slave-event-count`](replication-options-replica.html#option_mysqld_abort-slave-event-count)和[`--disconnect-slave-event-count`](replication-options-replica.html#option_mysqld_disconnect-slave-event-count)服务器选项，由MySQL测试套件使用，通常不在生产中使用，从MySQL
    8.0.29开始被弃用；预计这两个选项将在未来的MySQL版本中被移除。'
- en: The [`myisam_repair_threads`](server-system-variables.html#sysvar_myisam_repair_threads)
    system variable and [**myisamchk**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance
    Utility") [`--parallel-recover`](myisamchk-repair-options.html#option_myisamchk_parallel-recover)
    option are deprecated as of MySQL 8.0.29; expect support for both to be removed
    in a future release of MySQL.
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`myisam_repair_threads`](server-system-variables.html#sysvar_myisam_repair_threads)系统变量和[**myisamchk**](myisamchk.html
    "6.6.4 myisamchk — MyISAM Table-Maintenance Utility") [`--parallel-recover`](myisamchk-repair-options.html#option_myisamchk_parallel-recover)选项从MySQL
    8.0.29开始被弃用；预计在未来的MySQL版本中将不再支持这两者。'
- en: From MySQL 8.0.29, values other than 1 (the default) for [`myisam_repair_threads`](server-system-variables.html#sysvar_myisam_repair_threads)
    produce a warning.
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.29开始，[`myisam_repair_threads`](server-system-variables.html#sysvar_myisam_repair_threads)的值不为1（默认值）会产生警告。
- en: 'Previously, MySQL accepted [`DATE`](datetime.html "13.2.2 The DATE, DATETIME,
    and TIMESTAMP Types"), [`TIME`](time.html "13.2.3 The TIME Type"), [`DATETIME`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types"), and [`TIMESTAMP`](datetime.html
    "13.2.2 The DATE, DATETIME, and TIMESTAMP Types") literals containing an arbitrary
    number of (arbitrary) delimiter characters, as well as `DATETIME` and `TIMESTAMP`
    literals with an arbitrary number of whitespace characters before, after, and
    between the date and time parts. As of MySQL 8.0.29, the server raises a deprecation
    warning whenever the literal value contains any of the following:'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，MySQL接受包含任意数量的（任意）分隔符字符的[`DATE`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")、[`TIME`](time.html
    "13.2.3 TIME类型")、[`DATETIME`](datetime.html "13.2.2 DATE、DATETIME和TIMESTAMP类型")和[`TIMESTAMP`](datetime.html
    "13.2.2 DATE、DATETIME和TIMESTAMP类型")文字，以及在日期和时间部分之间、之前和之后有任意数量的空白字符的`DATETIME`和`TIMESTAMP`文字。从MySQL
    8.0.29开始，服务器在文字值包含以下内容时会引发弃用警告：
- en: One or more nonstandard delimiter characters
  id: totrans-616
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个非标准分隔符字符
- en: Excess delimiter characters
  id: totrans-617
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多余的分隔符字符
- en: Whitespace other than the space character (' ', `0x20`)
  id: totrans-618
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了空格字符（' '，`0x20`）之外的空白字符
- en: Excess space characters
  id: totrans-619
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多余的空格字符
- en: One deprecation warning is issued per temporal value, even if there are multiple
    issues with it. This warning is not promoted to an error in strict mode, so that
    performing an [`INSERT`](insert.html "15.2.7 INSERT Statement") of such a value
    still succeeds when strict mode is in effect.
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个时间值发出一个弃用警告，即使它有多个问题。在严格模式下，此警告不会升级为错误，因此在严格模式下执行这样一个值的[`INSERT`](insert.html
    "15.2.7 INSERT语句")仍然成功。
- en: You should expect the nonstandard behavior to be removed in a future version
    of MySQL, and take steps now to insure that your applications do not depend on
    it.
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该期待非标准行为在未来的MySQL版本中被移除，并立即采取措施确保你的应用程序不依赖于它。
- en: See [String and Numeric Literals in Date and Time Context](date-and-time-literals.html#date-and-time-string-numeric-literals
    "String and Numeric Literals in Date and Time Context"), for more information
    and examples.
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参见[日期和时间上下文中的字符串和数字文字](date-and-time-literals.html#date-and-time-string-numeric-literals
    "日期和时间上下文中的字符串和数字文字")。
- en: The [`replica_parallel_type`](replication-options-replica.html#sysvar_replica_parallel_type)
    system variable and its associated server option `--replica-parallel-type` are
    deprecated as of MySQL 8.0.29\. Beginning with this release, reading or setting
    this value raises a deprecation warning; expect it to be removed in a future version
    of MySQL.
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`replica_parallel_type`](replication-options-replica.html#sysvar_replica_parallel_type)系统变量及其相关的服务器选项`--replica-parallel-type`从MySQL
    8.0.29开始已被弃用。从这个版本开始，读取或设置此值会引发弃用警告；请预期它将在未来的MySQL版本中被移除。'
- en: Beginning with MySQL 8.0.30, setting the [`replica_parallel_workers`](replication-options-replica.html#sysvar_replica_parallel_workers)
    system variable (or the equivalent server option) to 0 is deprecated, and elicits
    a warning. When you want a replica to use single threading, use `replica_parallel_workers=1`
    instead, which produces the same result, but with no warning.
  id: totrans-624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.30开始，将[`replica_parallel_workers`](replication-options-replica.html#sysvar_replica_parallel_workers)系统变量（或等效的服务器选项）设置为0已被弃用，并引发警告。当您希望副本使用单线程时，请改用`replica_parallel_workers=1`，这将产生相同的结果，但不会有警告。
- en: The [`--skip-host-cache`](server-options.html#option_mysqld_skip-host-cache)
    server option is deprecated beginning with MySQL 8.0.30; expect its removal in
    a future MySQL release. Use the [`host_cache_size`](server-system-variables.html#sysvar_host_cache_size)
    system variable instead.
  id: totrans-625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`--skip-host-cache`](server-options.html#option_mysqld_skip-host-cache)服务器选项从MySQL
    8.0.30开始已被弃用；预计在未来的MySQL版本中将被移除。请使用[`host_cache_size`](server-system-variables.html#sysvar_host_cache_size)系统变量代替。'
- en: The [`--old-style-user-limits`](server-options.html#option_mysqld_old-style-user-limits)
    option, intended for backwards compatibility with very old (pre-5.0.3) releases,
    is deprecated as of MySQL 8.0.30; using it now raises a warning. You should expect
    this option to be removed in a future release of MySQL.
  id: totrans-626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`--old-style-user-limits`](server-options.html#option_mysqld_old-style-user-limits)选项，用于与非常旧（5.0.3之前）版本向后兼容，从MySQL
    8.0.30开始已被弃用；现在使用它会引发警告。您应该预期这个选项将在未来的MySQL版本中被移除。'
- en: The [`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)
    and [`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)
    variables are deprecated as of MySQL 8.0.30\. These variables are superseded by
    the [`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)
    variable. For more information, see [Section 17.6.5, “Redo Log”](innodb-redo-log.html
    "17.6.5 Redo Log").
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`innodb_log_files_in_group`](innodb-parameters.html#sysvar_innodb_log_files_in_group)和[`innodb_log_file_size`](innodb-parameters.html#sysvar_innodb_log_file_size)变量从MySQL
    8.0.30开始已被弃用。这些变量已被[`innodb_redo_log_capacity`](innodb-parameters.html#sysvar_innodb_redo_log_capacity)变量取代。更多信息，请参见[第17.6.5节，“重做日志”](innodb-redo-log.html
    "17.6.5 重做日志")。'
- en: As of MySQL 8.0.32, the use of “FULL” as an unquoted identifier is deprecated,
    due to the fact that it is a reserved keyword in the SQL standard. This means
    that a statement such as `CREATE TABLE full (c1 INT, c2 INT)` now raises a warning
    (`ER_WARN_DEPRECATED_TO_BE_REMOVED_IDENT_FULL`). To prevent this from happening,
    change the name or, as shown here, encase it in backticks ([PRE28]
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从MySQL 8.0.32开始，“FULL”作为未引用的标识符已被弃用，因为它是SQL标准中的保留关键字。这意味着像`CREATE TABLE full
    (c1 INT, c2 INT)`这样的语句现在会引发警告（`ER_WARN_DEPRECATED_TO_BE_REMOVED_IDENT_FULL`）。为了防止这种情况发生，更改名称或者像这里所示一样用反引号括起来（[PRE28]
- en: CREATE TABLE `full` (c1 INT, c2 INT);
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: CREATE TABLE `full` (c1 INT, c2 INT);
- en: '[PRE29]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: mysql> CREATE TABLE t1(a INT, KEY (a)) /*!50110KEY_BLOCK_SIZE=1024*/ ENGINE=MYISAM;
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql> CREATE TABLE t1(a INT, KEY (a)) /*!50110KEY_BLOCK_SIZE=1024*/ ENGINE=MYISAM;
- en: Query OK, 0 rows affected, 1 warning (0.01 sec)
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询成功，影响行数为0，警告数为1（0.01秒）
- en: mysql> SHOW WARNINGS\G
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql> SHOW WARNINGS\G
- en: '*************************** 1\. row ***************************'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*************************** 1\. 行 ***************************'
- en: 'Level: Warning'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 级别：警告
- en: 'Code: 4164'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码：4164
- en: 'Message: Immediately starting the version comment after the version number
    is'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 消息：立即在版本号后开始版本注释
- en: deprecated and may change behavior in a future release. Please insert a
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用并可能在未来版本中更改行为。请插入
- en: white-space character after the version number.
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本号后的空格字符。
- en: 1 row in set (0.00 sec)
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1 行受影响（0.00秒）
- en: '[PRE30]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: mysql> CREATE TABLE t2(a INT, KEY (a)) /*!50110 KEY_BLOCK_SIZE=1024*/ ENGINE=MYISAM;
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql> CREATE TABLE t2(a INT, KEY (a)) /*!50110 KEY_BLOCK_SIZE=1024*/ ENGINE=MYISAM;
- en: Query OK, 0 rows affected (0.00 sec)
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询成功，影响行数为0（0.00秒）
- en: '[PRE31]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE
- en: ER_BINLOG_ROW_RBR_TO_SBR
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_BINLOG_ROW_RBR_TO_SBR
- en: ER_BINLOG_ROW_WRONG_TABLE_DEF
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_BINLOG_ROW_WRONG_TABLE_DEF
- en: ER_CANT_ACTIVATE_LOG
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CANT_ACTIVATE_LOG
- en: ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION
- en: ER_CANT_CREATE_FEDERATED_TABLE
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CANT_CREATE_FEDERATED_TABLE
- en: ER_CANT_CREATE_SROUTINE
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CANT_CREATE_SROUTINE
- en: ER_CANT_DELETE_FILE
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CANT_DELETE_FILE
- en: ER_CANT_GET_WD
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CANT_GET_WD
- en: ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF
- en: ER_CANT_SET_WD
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CANT_SET_WD
- en: ER_CANT_WRITE_LOCK_LOG_TABLE
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CANT_WRITE_LOCK_LOG_TABLE
- en: ER_CREATE_DB_WITH_READ_LOCK
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CREATE_DB_WITH_READ_LOCK
- en: ER_CYCLIC_REFERENCE
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_CYCLIC_REFERENCE
- en: ER_DB_DROP_DELETE
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_DB_DROP_DELETE
- en: ER_DELAYED_NOT_SUPPORTED
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_DELAYED_NOT_SUPPORTED
- en: ER_DIFF_GROUPS_PROC
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_DIFF_GROUPS_PROC
- en: ER_DISK_FULL
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_DISK_FULL
- en: ER_DROP_DB_WITH_READ_LOCK
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_DROP_DB_WITH_READ_LOCK
- en: ER_DROP_USER
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_DROP_USER
- en: ER_DUMP_NOT_IMPLEMENTED
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_DUMP_NOT_IMPLEMENTED
- en: ER_ERROR_DURING_CHECKPOINT
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_ERROR_DURING_CHECKPOINT
- en: ER_ERROR_ON_CLOSE
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_ERROR_ON_CLOSE
- en: ER_EVENTS_DB_ERROR
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EVENTS_DB_ERROR
- en: ER_EVENT_CANNOT_DELETE
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EVENT_CANNOT_DELETE
- en: ER_EVENT_CANT_ALTER
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EVENT_CANT_ALTER
- en: ER_EVENT_COMPILE_ERROR
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EVENT_COMPILE_ERROR
- en: ER_EVENT_DATA_TOO_LONG
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EVENT_DATA_TOO_LONG
- en: ER_EVENT_DROP_FAILED
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EVENT_DROP_FAILED
- en: ER_EVENT_MODIFY_QUEUE_ERROR
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EVENT_MODIFY_QUEUE_ERROR
- en: ER_EVENT_NEITHER_M_EXPR_NOR_M_AT
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EVENT_NEITHER_M_EXPR_NOR_M_AT
- en: ER_EVENT_OPEN_TABLE_FAILED
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EVENT_OPEN_TABLE_FAILED
- en: ER_EVENT_STORE_FAILED
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EVENT_STORE_FAILED
- en: ER_EXEC_STMT_WITH_OPEN_CURSOR
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_EXEC_STMT_WITH_OPEN_CURSOR
- en: ER_FAILED_ROUTINE_BREAK_BINLOG
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_FAILED_ROUTINE_BREAK_BINLOG
- en: ER_FLUSH_MASTER_BINLOG_CLOSED
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_FLUSH_MASTER_BINLOG_CLOSED
- en: ER_FORM_NOT_FOUND
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_FORM_NOT_FOUND
- en: ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF__UNUSED
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF__UNUSED
- en: ER_FRM_UNKNOWN_TYPE
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_FRM_UNKNOWN_TYPE
- en: ER_GOT_SIGNAL
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_GOT_SIGNAL
- en: ER_GRANT_PLUGIN_USER_EXISTS
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_GRANT_PLUGIN_USER_EXISTS
- en: ER_GTID_MODE_REQUIRES_BINLOG
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_GTID_MODE_REQUIRES_BINLOG
- en: ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST
- en: ER_HASHCHK
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_HASHCHK
- en: ER_INDEX_REBUILD
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_INDEX_REBUILD
- en: ER_INNODB_NO_FT_USES_PARSER
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_INNODB_NO_FT_USES_PARSER
- en: ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR
- en: ER_LOAD_DATA_INVALID_COLUMN_UNUSED
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_LOAD_DATA_INVALID_COLUMN_UNUSED
- en: ER_LOGGING_PROHIBIT_CHANGING_OF
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_LOGGING_PROHIBIT_CHANGING_OF
- en: ER_MALFORMED_DEFINER
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_MALFORMED_DEFINER
- en: ER_MASTER_KEY_ROTATION_ERROR_BY_SE
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_MASTER_KEY_ROTATION_ERROR_BY_SE
- en: ER_NDB_CANT_SWITCH_BINLOG_FORMAT
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_NDB_CANT_SWITCH_BINLOG_FORMAT
- en: ER_NEVER_USED
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_NEVER_USED
- en: ER_NISAMCHK
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_NISAMCHK
- en: ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR
- en: ER_NO_FILE_MAPPING
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_NO_FILE_MAPPING
- en: ER_NO_GROUP_FOR_PROC
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_NO_GROUP_FOR_PROC
- en: ER_NO_RAID_COMPILED
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_NO_RAID_COMPILED
- en: ER_NO_SUCH_KEY_VALUE
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_NO_SUCH_KEY_VALUE
- en: ER_NO_SUCH_PARTITION__UNUSED
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_NO_SUCH_PARTITION__UNUSED
- en: ER_OBSOLETE_CANNOT_LOAD_FROM_TABLE
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_OBSOLETE_CANNOT_LOAD_FROM_TABLE
- en: ER_OBSOLETE_COL_COUNT_DOESNT_MATCH_CORRUPTED
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_OBSOLETE_COL_COUNT_DOESNT_MATCH_CORRUPTED
- en: ER_ORDER_WITH_PROC
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_ORDER_WITH_PROC
- en: ER_PARTITION_SUBPARTITION_ERROR
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_PARTITION_SUBPARTITION_ERROR
- en: ER_PARTITION_SUBPART_MIX_ERROR
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_PARTITION_SUBPART_MIX_ERROR
- en: ER_PART_STATE_ERROR
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_PART_STATE_ERROR
- en: ER_PASSWD_LENGTH
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_PASSWD_LENGTH
- en: ER_QUERY_ON_MASTER
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_QUERY_ON_MASTER
- en: ER_RBR_NOT_AVAILABLE
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_RBR_NOT_AVAILABLE
- en: ER_SKIPPING_LOGGED_TRANSACTION
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_SKIPPING_LOGGED_TRANSACTION
- en: ER_SLAVE_CHANNEL_DELETE
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_SLAVE_CHANNEL_DELETE
- en: ER_SLAVE_MULTIPLE_CHANNELS_HOST_PORT
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_SLAVE_MULTIPLE_CHANNELS_HOST_PORT
- en: ER_SLAVE_MUST_STOP
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_SLAVE_MUST_STOP
- en: ER_SLAVE_WAS_NOT_RUNNING
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_SLAVE_WAS_NOT_RUNNING
- en: ER_SLAVE_WAS_RUNNING
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_SLAVE_WAS_RUNNING
- en: ER_SP_GOTO_IN_HNDLR
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_SP_GOTO_IN_HNDLR
- en: ER_SP_PROC_TABLE_CORRUPT
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_SP_PROC_TABLE_CORRUPT
- en: ER_SQL_MODE_NO_EFFECT
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_SQL_MODE_NO_EFFECT
- en: ER_SR_INVALID_CREATION_CTX
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_SR_INVALID_CREATION_CTX
- en: ER_TABLE_NEEDS_UPG_PART
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_TABLE_NEEDS_UPG_PART
- en: ER_TOO_MUCH_AUTO_TIMESTAMP_COLS
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_TOO_MUCH_AUTO_TIMESTAMP_COLS
- en: ER_UNEXPECTED_EOF
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_UNEXPECTED_EOF
- en: ER_UNION_TABLES_IN_DIFFERENT_DIR
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_UNION_TABLES_IN_DIFFERENT_DIR
- en: ER_UNSUPPORTED_BY_REPLICATION_THREAD
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_UNSUPPORTED_BY_REPLICATION_THREAD
- en: ER_UNUSED1
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_UNUSED1
- en: ER_UNUSED2
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_UNUSED2
- en: ER_UNUSED3
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_UNUSED3
- en: ER_UNUSED4
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_UNUSED4
- en: ER_UNUSED5
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_UNUSED5
- en: ER_UNUSED6
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_UNUSED6
- en: ER_VIEW_SELECT_DERIVED_UNUSED
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_VIEW_SELECT_DERIVED_UNUSED
- en: ER_WRONG_MAGIC
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_WRONG_MAGIC
- en: ER_WSAS_FAILED
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ER_WSAS_FAILED
- en: '```'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```'
- en: The deprecated `INFORMATION_SCHEMA` `INNODB_LOCKS` and `INNODB_LOCK_WAITS` tables
    are removed. Use the Performance Schema [`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table") and [`data_lock_waits`](performance-schema-data-lock-waits-table.html
    "29.12.13.2 The data_lock_waits Table") tables instead.
  id: totrans-739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已弃用的`INFORMATION_SCHEMA` `INNODB_LOCKS`和`INNODB_LOCK_WAITS`表已被移除。请改用性能模式[`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table")和[`data_lock_waits`](performance-schema-data-lock-waits-table.html
    "29.12.13.2 The data_lock_waits Table")表。
- en: Note
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Note
- en: In MySQL 5.7, the `LOCK_TABLE` column in the `INNODB_LOCKS` table and the `locked_table`
    column in the `sys` schema [`innodb_lock_waits`](sys-innodb-lock-waits.html "30.4.3.9 The
    innodb_lock_waits and x$innodb_lock_waits Views") and [`x$innodb_lock_waits`](sys-innodb-lock-waits.html
    "30.4.3.9 The innodb_lock_waits and x$innodb_lock_waits Views") views contain
    combined schema/table name values. In MySQL 8.0, the [`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 The data_locks Table") table and the `sys` schema views contain separate
    schema name and table name columns. See [Section 30.4.3.9, “The innodb_lock_waits
    and x$innodb_lock_waits Views”](sys-innodb-lock-waits.html "30.4.3.9 The innodb_lock_waits
    and x$innodb_lock_waits Views").
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 5.7中，`INNODB_LOCKS`表中的`LOCK_TABLE`列和`sys`模式中的`locked_table`列的[`innodb_lock_waits`](sys-innodb-lock-waits.html
    "30.4.3.9 innodb_lock_waits和x$innodb_lock_waits视图")和[`x$innodb_lock_waits`](sys-innodb-lock-waits.html
    "30.4.3.9 innodb_lock_waits和x$innodb_lock_waits视图")视图包含组合的模式/表名值。在MySQL 8.0中，[`data_locks`](performance-schema-data-locks-table.html
    "29.12.13.1 data_locks表")表和`sys`模式视图包含单独的模式名和表名列。参见[第30.4.3.9节，“innodb_lock_waits和x$innodb_lock_waits视图”](sys-innodb-lock-waits.html
    "30.4.3.9 innodb_lock_waits和x$innodb_lock_waits视图")。
- en: '`InnoDB` no longer supports compressed temporary tables. When [`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)
    is enabled (the default), [`CREATE TEMPORARY TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") returns an error if `ROW_FORMAT=COMPRESSED` or `KEY_BLOCK_SIZE`
    is specified. If [`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)
    is disabled, warnings are issued and the temporary table is created using a non-compressed
    row format.'
  id: totrans-742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`不再支持压缩临时表。当启用[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)（默认情况下）时，如果指定`ROW_FORMAT=COMPRESSED`或`KEY_BLOCK_SIZE`，[`CREATE
    TEMPORARY TABLE`](create-table.html "15.1.20 CREATE TABLE语句")将返回错误。如果禁用[`innodb_strict_mode`](innodb-parameters.html#sysvar_innodb_strict_mode)，则会发出警告并使用非压缩行格式创建临时表。'
- en: '`InnoDB` no longer creates `.isl` files (`InnoDB` Symbolic Link files) when
    creating tablespace data files outside of the MySQL data directory. The [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    option now supports locating tablespace files created outside of the data directory.'
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在MySQL数据目录之外创建表空间数据文件时，`InnoDB`不再创建`.isl`文件（`InnoDB`符号链接文件）。现在[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)选项支持定位在数据目录之外创建的表空间文件。
- en: With this change, moving a remote tablespace while the server is offline by
    manually modifying an `.isl` file is no longer supported. Moving remote tablespace
    files is now supported by the [`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)
    option. See [Section 17.6.3.6, “Moving Tablespace Files While the Server is Offline”](innodb-moving-data-files-offline.html
    "17.6.3.6 Moving Tablespace Files While the Server is Offline").
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过这个改变，在服务器离线时通过手动修改`.isl`文件来移动远程表空间不再受支持。现在通过[`innodb_directories`](innodb-parameters.html#sysvar_innodb_directories)选项支持移动远程表空间文件。参见[第17.6.3.6节，“服务器离线时移动表空间文件”](innodb-moving-data-files-offline.html
    "17.6.3.6 服务器离线时移动表空间文件")。
- en: 'The following `InnoDB` file format variables were removed:'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除以下`InnoDB`文件格式变量：
- en: '`innodb_file_format`'
  id: totrans-746
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innodb_file_format`'
- en: '`innodb_file_format_check`'
  id: totrans-747
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innodb_file_format_check`'
- en: '`innodb_file_format_max`'
  id: totrans-748
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innodb_file_format_max`'
- en: '`innodb_large_prefix`'
  id: totrans-749
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innodb_large_prefix`'
- en: File format variables were necessary for creating tables compatible with earlier
    versions of `InnoDB` in MySQL 5.1\. Now that MySQL 5.1 has reached the end of
    its product lifecycle, these options are no longer required.
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 5.1中，文件格式变量对于创建与早期版本的`InnoDB`兼容的表是必要的。现在MySQL 5.1已经到达产品生命周期的尽头，这些选项不再需要。
- en: The `FILE_FORMAT` column was removed from the [`INNODB_TABLES`](information-schema-innodb-tables-table.html
    "28.4.23 The INFORMATION_SCHEMA INNODB_TABLES Table") and [`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 The INFORMATION_SCHEMA INNODB_TABLESPACES Table") Information Schema
    tables.
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FILE_FORMAT`列已从[`INNODB_TABLES`](information-schema-innodb-tables-table.html
    "28.4.23 INFORMATION_SCHEMA INNODB_TABLES表")和[`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 INFORMATION_SCHEMA INNODB_TABLESPACES表")信息模式表中移除。'
- en: The `innodb_support_xa` system variable, which enables support for two-phase
    commit in XA transactions, was removed. `InnoDB` support for two-phase commit
    in XA transactions is always enabled.
  id: totrans-752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除`innodb_support_xa`系统变量，该变量启用XA事务中的两阶段提交支持。`InnoDB`对XA事务中的两阶段提交始终启用。
- en: Support for DTrace was removed.
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再支持DTrace。
- en: The `JSON_APPEND()` function was removed. Use [`JSON_ARRAY_APPEND()`](json-modification-functions.html#function_json-array-append)
    instead.
  id: totrans-754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_APPEND()` 函数已被移除。请改用 [`JSON_ARRAY_APPEND()`](json-modification-functions.html#function_json-array-append)。'
- en: Support for placing table partitions in shared `InnoDB` tablespaces was removed
    in MySQL 8.0.13\. Shared tablespaces include the `InnoDB` system tablespace and
    general tablespaces. For information about identifying partitions in shared tablespaces
    and moving them to file-per-table tablespaces, see [Section 3.6, “Preparing Your
    Installation for Upgrade”](upgrade-prerequisites.html "3.6 Preparing Your Installation
    for Upgrade").
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8.0.13 版本中移除了将表分区放置在共享 `InnoDB` 表空间中的支持。共享表空间包括 `InnoDB` 系统表空间和通用表空间。有关识别共享表空间中的分区并将其移动到每个表的文件表空间的信息，请参见
    [Section 3.6, “Preparing Your Installation for Upgrade”](upgrade-prerequisites.html
    "3.6 Preparing Your Installation for Upgrade")。
- en: Support for setting user variables in statements other than [`SET`](set-variable.html
    "15.7.6.1 SET Syntax for Variable Assignment") was deprecated in MySQL 8.0.13\.
    This functionality is subject to removal in MySQL 8.4.
  id: totrans-756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 8.0.13 版本中弃用了在除 [`SET`](set-variable.html "15.7.6.1 SET Syntax for Variable
    Assignment") 之外的语句中设置用户变量的功能。此功能可能在 MySQL 8.4 中移除。
- en: The `--ndb` [**perror**](perror.html "6.8.2 perror — Display MySQL Error Message
    Information") option was removed. Use the [**ndb_perror**](mysql-cluster-programs-ndb-perror.html
    "25.5.16 ndb_perror — Obtain NDB Error Message Information") utility instead.
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--ndb` 选项已被移除。请改用 [**ndb_perror**](mysql-cluster-programs-ndb-perror.html
    "25.5.16 ndb_perror — Obtain NDB Error Message Information") 实用程序。'
- en: The `innodb_undo_logs` variable was removed. The [`innodb_rollback_segments`](innodb-parameters.html#sysvar_innodb_rollback_segments)
    variables performs the same function and should be used instead.
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innodb_undo_logs` 变量已被移除。[`innodb_rollback_segments`](innodb-parameters.html#sysvar_innodb_rollback_segments)
    变量执行相同功能，应该代替使用。'
- en: The `Innodb_available_undo_logs` status variable was removed. The number of
    available rollback segments per tablespace may be retrieved using `SHOW VARIABLES
    LIKE 'innodb_rollback_segments';`
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Innodb_available_undo_logs` 状态变量已被移除。每个表空间可用的回滚段数量可以通过 `SHOW VARIABLES LIKE
    ''innodb_rollback_segments'';` 获取。'
- en: As of MySQL 8.0.14, the previously deprecated [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)
    variable is no longer configurable. For more information, see [Section 17.6.3.4,
    “Undo Tablespaces”](innodb-undo-tablespaces.html "17.6.3.4 Undo Tablespaces").
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.14 版本，先前弃用的 [`innodb_undo_tablespaces`](innodb-parameters.html#sysvar_innodb_undo_tablespaces)
    变量不再可配置。更多信息，请参见 [Section 17.6.3.4, “Undo Tablespaces”](innodb-undo-tablespaces.html
    "17.6.3.4 Undo Tablespaces")。
- en: Support for the `ALTER TABLE ... UPGRADE PARTITIONING` statement has been removed.
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除对 `ALTER TABLE ... UPGRADE PARTITIONING` 语句的支持。
- en: As of MySQL 8.0.16, support for the [`internal_tmp_disk_storage_engine`](server-system-variables.html#sysvar_internal_tmp_disk_storage_engine)
    system variable has been removed; internal temporary tables on disk now always
    use the [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    storage engine. See [Storage Engine for On-Disk Internal Temporary Tables](internal-temporary-tables.html#internal-temporary-tables-engines-disk
    "Storage Engine for On-Disk Internal Temporary Tables"),for more information.
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至 MySQL 8.0.16 版本，已移除对 [`internal_tmp_disk_storage_engine`](server-system-variables.html#sysvar_internal_tmp_disk_storage_engine)
    系统变量的支持；磁盘上的内部临时表现在始终使用 [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine") 存储引擎。更多信息，请参见 [Storage Engine for On-Disk Internal Temporary
    Tables](internal-temporary-tables.html#internal-temporary-tables-engines-disk
    "Storage Engine for On-Disk Internal Temporary Tables")。
- en: The [`DISABLE_SHARED`](source-configuration-options.html#option_cmake_disable_shared)
    **CMake** option was unused and has been removed.
  id: totrans-763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未使用的 [`DISABLE_SHARED`](source-configuration-options.html#option_cmake_disable_shared)
    **CMake** 选项已被移除。
- en: The [`myisam_repair_threads`](server-system-variables.html#sysvar_myisam_repair_threads)
    system variable is removed as of MySQL 8.0.30.
  id: totrans-764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`myisam_repair_threads`](server-system-variables.html#sysvar_myisam_repair_threads)
    系统变量已在 MySQL 8.0.30 版本中移除。'
