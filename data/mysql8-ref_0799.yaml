- en: 14.6.1 Arithmetic Operators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.6.1 算术运算符
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html](https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html](https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html)
- en: '**Table 14.9 Arithmetic Operators**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 14.9 算术运算符**'
- en: '| Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| [`%`, `MOD`](arithmetic-functions.html#operator_mod) | Modulo operator |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`%`, `MOD`](arithmetic-functions.html#operator_mod) | 取模运算符 |'
- en: '| [`*`](arithmetic-functions.html#operator_times) | Multiplication operator
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`*`](arithmetic-functions.html#operator_times) | 乘法运算符 |'
- en: '| [`+`](arithmetic-functions.html#operator_plus) | Addition operator |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`+`](arithmetic-functions.html#operator_plus) | 加法运算符 |'
- en: '| [`-`](arithmetic-functions.html#operator_minus) | Minus operator |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`-`](arithmetic-functions.html#operator_minus) | 减法运算符 |'
- en: '| [`-`](arithmetic-functions.html#operator_unary-minus) | Change the sign of
    the argument |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`-`](arithmetic-functions.html#operator_unary-minus) | 改变参数的符号 |'
- en: '| [`/`](arithmetic-functions.html#operator_divide) | Division operator |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`/`](arithmetic-functions.html#operator_divide) | 除法运算符 |'
- en: '| [`DIV`](arithmetic-functions.html#operator_div) | Integer division |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`DIV`](arithmetic-functions.html#operator_div) | 整数除法 |'
- en: 'The usual arithmetic operators are available. The result is determined according
    to the following rules:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的算术运算符都是可用的。结果根据以下规则确定：
- en: In the case of [`-`](arithmetic-functions.html#operator_minus), [`+`](arithmetic-functions.html#operator_plus),
    and [`*`](arithmetic-functions.html#operator_times), the result is calculated
    with [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") (64-bit) precision if both operands
    are integers.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`-`](arithmetic-functions.html#operator_minus)、[`+`](arithmetic-functions.html#operator_plus)和[`*`](arithmetic-functions.html#operator_times)，如果两个操作数都是整数，则结果将以[`BIGINT`](integer-types.html
    "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")（64位）精度计算。
- en: If both operands are integers and any of them are unsigned, the result is an
    unsigned integer. For subtraction, if the [`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    SQL mode is enabled, the result is signed even if any operand is unsigned.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个操作数都是整数且其中任何一个是无符号的，则结果将是无符号整数。对于减法，如果启用了[`NO_UNSIGNED_SUBTRACTION`](sql-mode.html#sqlmode_no_unsigned_subtraction)
    SQL 模式，则结果将是有符号的，即使任何操作数是无符号的。
- en: If any of the operands of a [`+`](arithmetic-functions.html#operator_plus),
    [`-`](arithmetic-functions.html#operator_minus), [`/`](arithmetic-functions.html#operator_divide),
    [`*`](arithmetic-functions.html#operator_times), [`%`](arithmetic-functions.html#operator_mod)
    is a real or string value, the precision of the result is the precision of the
    operand with the maximum precision.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果[`+`](arithmetic-functions.html#operator_plus)、[`-`](arithmetic-functions.html#operator_minus)、[`/`](arithmetic-functions.html#operator_divide)、[`*`](arithmetic-functions.html#operator_times)、[`%`](arithmetic-functions.html#operator_mod)的任何操作数是实数或字符串值，则结果的精度为具有最大精度的操作数的精度。
- en: In division performed with [`/`](arithmetic-functions.html#operator_divide),
    the scale of the result when using two exact-value operands is the scale of the
    first operand plus the value of the [`div_precision_increment`](server-system-variables.html#sysvar_div_precision_increment)
    system variable (which is 4 by default). For example, the result of the expression
    `5.05 / 0.014` has a scale of six decimal places (`360.714286`).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用[`/`](arithmetic-functions.html#operator_divide)进行除法运算时，使用两个精确值操作数的结果的精度为第一个操作数的精度加上[`div_precision_increment`](server-system-variables.html#sysvar_div_precision_increment)系统变量的值（默认为4）。例如，表达式`5.05
    / 0.014`的结果具有六位小数的精度（`360.714286`）。
- en: These rules are applied for each operation, such that nested calculations imply
    the precision of each component. Hence, `(14620 / 9432456) / (24250 / 9432456)`,
    resolves first to `(0.0014) / (0.0026)`, with the final result having 8 decimal
    places (`0.60288653`).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则适用于每个操作，因此嵌套计算意味着每个组件的精度。因此，`(14620 / 9432456) / (24250 / 9432456)`，首先解析为`(0.0014)
    / (0.0026)`，最终结果具有8位小数的精度（`0.60288653`）。
- en: Because of these rules and the way they are applied, care should be taken to
    ensure that components and subcomponents of a calculation use the appropriate
    level of precision. See [Section 14.10, “Cast Functions and Operators”](cast-functions.html
    "14.10 Cast Functions and Operators").
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些规则及其应用方式，应注意确保计算的组件和子组件使用适当级别的精度。参见[第14.10节，“转换函数和运算符”](cast-functions.html
    "14.10 转换函数和运算符")。
- en: For information about handling of overflow in numeric expression evaluation,
    see [Section 13.1.7, “Out-of-Range and Overflow Handling”](out-of-range-and-overflow.html
    "13.1.7 Out-of-Range and Overflow Handling").
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有关数值表达式计算中溢出处理的信息，请参见[第13.1.7节，“超出范围和溢出处理”](out-of-range-and-overflow.html "13.1.7 Out-of-Range
    and Overflow Handling")。
- en: Arithmetic operators apply to numbers. For other types of values, alternative
    operations may be available. For example, to add date values, use [`DATE_ADD()`](date-and-time-functions.html#function_date-add);
    see [Section 14.7, “Date and Time Functions”](date-and-time-functions.html "14.7 Date
    and Time Functions").
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 算术运算符适用于数字。对于其他类型的值，可能会提供替代操作。例如，要添加日期值，请使用[`DATE_ADD()`](date-and-time-functions.html#function_date-add);
    请参阅[第14.7节，“日期和时间函数”](date-and-time-functions.html "14.7 Date and Time Functions")。
- en: '[`+`](arithmetic-functions.html#operator_plus)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`+`](arithmetic-functions.html#operator_plus)'
- en: 'Addition:'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加法：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[`-`](arithmetic-functions.html#operator_minus)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`-`](arithmetic-functions.html#operator_minus)'
- en: 'Subtraction:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 减法：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[`-`](arithmetic-functions.html#operator_unary-minus)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`-`](arithmetic-functions.html#operator_unary-minus)'
- en: Unary minus. This operator changes the sign of the operand.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一元负号。此运算符改变操作数的符号。
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: If this operator is used with a [`BIGINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"), the
    return value is also a [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"). This means that
    you should avoid using `-` on integers that may have the value of −2^(63).
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果此运算符与[`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value) - INTEGER,
    INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")一起使用，则返回值也是[`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT")。这意味着您应避免对可能具有值−2^(63)的整数使用`-`。
- en: '[`*`](arithmetic-functions.html#operator_times)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`](arithmetic-functions.html#operator_times)'
- en: 'Multiplication:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 乘法：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The last expression produces an error because the result of the integer multiplication
    exceeds the 64-bit range of [`BIGINT`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") calculations.
    (See [Section 13.1, “Numeric Data Types”](numeric-types.html "13.1 Numeric Data
    Types").)
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后一个表达式会产生错误，因为整数乘法的结果超出了[`BIGINT`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")计算的64位范围。（请参阅[第13.1节，“数值数据类型”](numeric-types.html
    "13.1 Numeric Data Types")。）
- en: '[`/`](arithmetic-functions.html#operator_divide)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`/`](arithmetic-functions.html#operator_divide)'
- en: 'Division:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除法：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Division by zero produces a `NULL` result:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除以零会产生`NULL`结果：
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A division is calculated with [`BIGINT`](integer-types.html "13.1.2 Integer
    Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") arithmetic
    only if performed in a context where its result is converted to an integer.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅当在将其结果转换为整数的上下文中执行时，才使用[`BIGINT`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")算术计算除法。
- en: '[`DIV`](arithmetic-functions.html#operator_div)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DIV`](arithmetic-functions.html#operator_div)'
- en: Integer division. Discards from the division result any fractional part to the
    right of the decimal point.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 整数除法。舍弃除法结果小数点右侧的任何小数部分。
- en: If either operand has a noninteger type, the operands are converted to [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") and divided using
    [`DECIMAL`](fixed-point-types.html "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL,
    NUMERIC") arithmetic before converting the result to [`BIGINT`](integer-types.html
    "13.1.2 Integer Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT,
    BIGINT"). If the result exceeds `BIGINT` range, an error occurs.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果任一操作数具有非整数类型，则在将结果转换为[`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact
    Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")之前，将操作数转换为[`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC")并使用[`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC")算术进行除法。如果结果超出`BIGINT`范围，则会发生错误。
- en: '[PRE6]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[`*`N`* % *`M`*`](arithmetic-functions.html#operator_mod), [`*`N`* MOD *`M`*`](arithmetic-functions.html#operator_mod)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`*`N`* % *`M`*`](arithmetic-functions.html#operator_mod), [`*`N`* MOD *`M`*`](arithmetic-functions.html#operator_mod)'
- en: Modulo operation. Returns the remainder of *`N`* divided by *`M`*. For more
    information, see the description for the [`MOD()`](mathematical-functions.html#function_mod)
    function in [Section 14.6.2, “Mathematical Functions”](mathematical-functions.html
    "14.6.2 Mathematical Functions").
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 取模运算。返回*`N`*除以*`M`*的余数。有关更多信息，请参见[第14.6.2节，“数学函数”](mathematical-functions.html
    "14.6.2 Mathematical Functions")中[`MOD()`](mathematical-functions.html#function_mod)函数的描述。
