- en: 13.3.4 The BLOB and TEXT Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.3.4 BLOB和TEXT类型
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/blob.html](https://dev.mysql.com/doc/refman/8.0/en/blob.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/blob.html](https://dev.mysql.com/doc/refman/8.0/en/blob.html)
- en: A `BLOB` is a binary large object that can hold a variable amount of data. The
    four `BLOB` types are `TINYBLOB`, `BLOB`, `MEDIUMBLOB`, and `LONGBLOB`. These
    differ only in the maximum length of the values they can hold. The four `TEXT`
    types are `TINYTEXT`, `TEXT`, `MEDIUMTEXT`, and `LONGTEXT`. These correspond to
    the four `BLOB` types and have the same maximum lengths and storage requirements.
    See [Section 13.7, “Data Type Storage Requirements”](storage-requirements.html
    "13.7 Data Type Storage Requirements").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLOB`是可以容纳可变数量数据的二进制大对象。四种`BLOB`类型分别是`TINYBLOB`、`BLOB`、`MEDIUMBLOB`和`LONGBLOB`。它们仅在可以容纳的值的最大长度上有所不同。四种`TEXT`类型是`TINYTEXT`、`TEXT`、`MEDIUMTEXT`和`LONGTEXT`。这些与四种`BLOB`类型对应，并具有相同的最大长度和存储要求。参见[第13.7节，“数据类型存储要求”](storage-requirements.html
    "13.7 数据类型存储要求")。'
- en: '`BLOB` values are treated as binary strings (byte strings). They have the `binary`
    character set and collation, and comparison and sorting are based on the numeric
    values of the bytes in column values. `TEXT` values are treated as nonbinary strings
    (character strings). They have a character set other than `binary`, and values
    are sorted and compared based on the collation of the character set.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`BLOB`值被视为二进制字符串（字节字符串）。它们具有`binary`字符集和排序规则，比较和排序基于列值中字节的数值。`TEXT`值被视为非二进制字符串（字符字符串）。它们具有除`binary`之外的字符集，并且根据字符集的排序规则进行排序和比较。'
- en: If strict SQL mode is not enabled and you assign a value to a `BLOB` or `TEXT`
    column that exceeds the column's maximum length, the value is truncated to fit
    and a warning is generated. For truncation of nonspace characters, you can cause
    an error to occur (rather than a warning) and suppress insertion of the value
    by using strict SQL mode. See [Section 7.1.11, “Server SQL Modes”](sql-mode.html
    "7.1.11 Server SQL Modes").
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未启用严格的SQL模式并且将值分配给超出列的最大长度的`BLOB`或`TEXT`列，则该值将被截断以适应并生成警告。对于非空格字符的截断，您可以通过使用严格的SQL模式导致错误发生（而不是警告）并抑制值的插入。参见[第7.1.11节，“服务器SQL模式”](sql-mode.html
    "7.1.11 服务器SQL模式")。
- en: Truncation of excess trailing spaces from values to be inserted into [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") columns always generates a warning, regardless
    of the SQL mode.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要插入[`TEXT`](blob.html "13.3.4 BLOB和TEXT类型")列的值中多余的尾随空格截断总是生成警告，无论SQL模式如何。
- en: For `TEXT` and `BLOB` columns, there is no padding on insert and no bytes are
    stripped on select.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`TEXT`和`BLOB`列，在插入时不会填充，选择时也不会去除任何字节。
- en: If a `TEXT` column is indexed, index entry comparisons are space-padded at the
    end. This means that, if the index requires unique values, duplicate-key errors
    occur for values that differ only in the number of trailing spaces. For example,
    if a table contains `'a'`, an attempt to store `'a '` causes a duplicate-key error.
    This is not true for `BLOB` columns.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对`TEXT`列进行索引，索引条目比较在末尾填充空格。这意味着，如果索引需要唯一值，则对于仅在尾随空格数量上不同的值会导致重复键错误。例如，如果表包含`'a'`，则尝试存储`'a '`会导致重复键错误。对于`BLOB`列则不是这样。
- en: 'In most respects, you can regard a `BLOB` column as a [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") column that can be as large as you like.
    Similarly, you can regard a `TEXT` column as a [`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") column. `BLOB` and `TEXT` differ from [`VARBINARY`](binary-varbinary.html
    "13.3.3 The BINARY and VARBINARY Types") and [`VARCHAR`](char.html "13.3.2 The
    CHAR and VARCHAR Types") in the following ways:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数方面，您可以将`BLOB`列视为可以任意大的[`VARBINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型")列。同样，您可以将`TEXT`列视为[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")列。`BLOB`和`TEXT`与[`VARBINARY`](binary-varbinary.html "13.3.3 BINARY和VARBINARY类型")和[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")在以下方面有所不同：
- en: For indexes on `BLOB` and `TEXT` columns, you must specify an index prefix length.
    For [`CHAR`](char.html "13.3.2 The CHAR and VARCHAR Types") and [`VARCHAR`](char.html
    "13.3.2 The CHAR and VARCHAR Types"), a prefix length is optional. See [Section 10.3.5,
    “Column Indexes”](column-indexes.html "10.3.5 Column Indexes").
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`BLOB`和`TEXT`列上的索引，必须指定索引前缀长度。对于[`CHAR`](char.html "13.3.2 CHAR和VARCHAR类型")和[`VARCHAR`](char.html
    "13.3.2 CHAR和VARCHAR类型")，前缀长度是可选的。参见[第10.3.5节，“列索引”](column-indexes.html "10.3.5 列索引")。
- en: '`BLOB` and `TEXT` columns cannot have `DEFAULT` values.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BLOB`和`TEXT`列不能有`DEFAULT`值。'
- en: If you use the `BINARY` attribute with a `TEXT` data type, the column is assigned
    the binary (`_bin`) collation of the column character set.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`TEXT`数据类型中使用`BINARY`属性，则该列将被分配为列字符集的二进制(`_bin`)排序规则。
- en: '`LONG` and `LONG VARCHAR` map to the `MEDIUMTEXT` data type. This is a compatibility
    feature.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`LONG`和`LONG VARCHAR`映射到`MEDIUMTEXT`数据类型。这是一个兼容性特性。'
- en: MySQL Connector/ODBC defines `BLOB` values as `LONGVARBINARY` and `TEXT` values
    as `LONGVARCHAR`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL Connector/ODBC将`BLOB`值定义为`LONGVARBINARY`，将`TEXT`值定义为`LONGVARCHAR`。
- en: 'Because `BLOB` and `TEXT` values can be extremely long, you might encounter
    some constraints in using them:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`BLOB`和`TEXT`值可能非常长，所以在使用它们时可能会遇到一些限制：
- en: 'Only the first [`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)
    bytes of the column are used when sorting. The default value of [`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)
    is 1024. You can make more bytes significant in sorting or grouping by increasing
    the value of [`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)
    at server startup or runtime. Any client can change the value of its session [`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)
    variable:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在排序时只使用列的前[`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)字节。[`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)的默认值为1024。您可以通过在服务器启动或运行时增加[`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)的值来使更多字节在排序或分组中起作用。任何客户端都可以更改其会话[`max_sort_length`](server-system-variables.html#sysvar_max_sort_length)变量的值：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Instances of `BLOB` or `TEXT` columns in the result of a query that is processed
    using a temporary table causes the server to use a table on disk rather than in
    memory because the `MEMORY` storage engine does not support those data types (see
    [Section 10.4.4, “Internal Temporary Table Use in MySQL”](internal-temporary-tables.html
    "10.4.4 Internal Temporary Table Use in MySQL")). Use of disk incurs a performance
    penalty, so include `BLOB` or `TEXT` columns in the query result only if they
    are really needed. For example, avoid using [`SELECT *`](select.html "15.2.13 SELECT
    Statement"), which selects all columns.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用临时表处理的查询结果中存在`BLOB`或`TEXT`列的实例会导致服务器在磁盘上而不是内存中使用表，因为`MEMORY`存储引擎不支持这些数据类型（参见[第10.4.4节，“MySQL中的内部临时表使用”](internal-temporary-tables.html
    "10.4.4 MySQL中的内部临时表使用")）。使用磁盘会导致性能损失，因此只有在真正需要时才在查询结果中包含`BLOB`或`TEXT`列。例如，避免使用[`SELECT
    *`](select.html "15.2.13 SELECT语句")，它会选择所有列。
- en: The maximum size of a `BLOB` or `TEXT` object is determined by its type, but
    the largest value you actually can transmit between the client and server is determined
    by the amount of available memory and the size of the communications buffers.
    You can change the message buffer size by changing the value of the [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)
    variable, but you must do so for both the server and your client program. For
    example, both [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    and [**mysqldump**](mysqldump.html "6.5.4 mysqldump — A Database Backup Program")
    enable you to change the client-side [`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)
    value. See [Section 7.1.1, “Configuring the Server”](server-configuration.html
    "7.1.1 Configuring the Server"), [Section 6.5.1, “mysql — The MySQL Command-Line
    Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client"), and [Section 6.5.4,
    “mysqldump — A Database Backup Program”](mysqldump.html "6.5.4 mysqldump — A Database
    Backup Program"). You may also want to compare the packet sizes and the size of
    the data objects you are storing with the storage requirements, see [Section 13.7,
    “Data Type Storage Requirements”](storage-requirements.html "13.7 Data Type Storage
    Requirements")
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BLOB`或`TEXT`对象的最大大小由其类型确定，但实际上您可以在客户端和服务器之间传输的最大值取决于可用内存量和通信缓冲区的大小。您可以通过更改[`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)变量的值来更改消息缓冲区大小，但必须同时为服务器和客户端程序执行此操作。例如，[**mysql**](mysql.html
    "6.5.1 mysql — MySQL命令行客户端")和[**mysqldump**](mysqldump.html "6.5.4 mysqldump —
    数据库备份程序")都允许您更改客户端端的[`max_allowed_packet`](server-system-variables.html#sysvar_max_allowed_packet)值。请参阅[第7.1.1节，“配置服务器”](server-configuration.html
    "7.1.1 配置服务器")，[第6.5.1节，“mysql — MySQL命令行客户端”](mysql.html "6.5.1 mysql — MySQL命令行客户端")和[第6.5.4节，“mysqldump
    — 数据库备份程序”](mysqldump.html "6.5.4 mysqldump — 数据库备份程序")。您可能还想比较数据包大小和您存储的数据对象的大小与存储要求的大小，参见[第13.7节，“数据类型存储要求”](storage-requirements.html
    "13.7 数据类型存储要求")'
- en: Each `BLOB` or `TEXT` value is represented internally by a separately allocated
    object. This is in contrast to all other data types, for which storage is allocated
    once per column when the table is opened.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`BLOB`或`TEXT`值在内部由单独分配的对象表示。这与所有其他数据类型形成对比，其他数据类型在打开表时为每列分配存储空间。
- en: In some cases, it may be desirable to store binary data such as media files
    in `BLOB` or `TEXT` columns. You may find MySQL's string handling functions useful
    for working with such data. See [Section 14.8, “String Functions and Operators”](string-functions.html
    "14.8 String Functions and Operators"). For security and other reasons, it is
    usually preferable to do so using application code rather than giving application
    users the [`FILE`](privileges-provided.html#priv_file) privilege. You can discuss
    specifics for various languages and platforms in the MySQL Forums ([http://forums.mysql.com/](http://forums.mysql.com/)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，将二进制数据（如媒体文件）存储在`BLOB`或`TEXT`列中可能是可取的。您可能会发现MySQL的字符串处理函数在处理此类数据时非常有用。请参阅[第14.8节，“字符串函数和运算符”](string-functions.html
    "14.8 字符串函数和运算符")。出于安全和其他原因，通常最好使用应用程序代码来处理此类数据，而不是给予应用程序用户[`FILE`](privileges-provided.html#priv_file)权限。您可以在MySQL论坛（[http://forums.mysql.com/](http://forums.mysql.com/)）讨论各种语言和平台的具体情况。
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Within the [**mysql**](mysql.html "6.5.1 mysql — The MySQL Command-Line Client")
    client, binary strings display using hexadecimal notation, depending on the value
    of the [`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex).
    For more information about that option, see [Section 6.5.1, “mysql — The MySQL
    Command-Line Client”](mysql.html "6.5.1 mysql — The MySQL Command-Line Client").
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在[**mysql**](mysql.html "6.5.1 mysql — MySQL命令行客户端")客户端中，二进制字符串以十六进制表示，具体取决于[`--binary-as-hex`](mysql-command-options.html#option_mysql_binary-as-hex)的值。有关该选项的更多信息，请参阅[第6.5.1节，“mysql
    — MySQL命令行客户端”](mysql.html "6.5.1 mysql — MySQL命令行客户端")。
