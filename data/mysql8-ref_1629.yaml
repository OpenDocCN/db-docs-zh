- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-transactions.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-transactions.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-transactions.html](https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster-limitations-transactions.html)
- en: 25.2.7.3 Limits Relating to Transaction Handling in NDB Cluster
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 25.2.7.3 NDB 集群中与事务处理相关的限制
- en: 'A number of limitations exist in NDB Cluster with regard to the handling of
    transactions. These include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理事务方面，NDB 集群存在一些限制。这些包括以下内容：
- en: '**Transaction isolation level. ** The [`NDBCLUSTER`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") storage engine supports only the [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)
    transaction isolation level. (`InnoDB`, for example, supports [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed),
    [`READ UNCOMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-uncommitted),
    [`REPEATABLE READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read),
    and [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable).)
    You should keep in mind that `NDB` implements `READ COMMITTED` on a per-row basis;
    when a read request arrives at the data node storing the row, what is returned
    is the last committed version of the row at that time.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事务隔离级别。** [`NDBCLUSTER`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0") 存储引擎仅支持 [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)
    事务隔离级别。（例如，`InnoDB` 支持 [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)、[`READ
    UNCOMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-uncommitted)、[`REPEATABLE
    READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read) 和 [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)。）您应该记住，`NDB`
    在每行基础上实现了 `READ COMMITTED`；当读取请求到达存储该行的数据节点时，返回的是该时刻该行的最后提交版本。'
- en: Uncommitted data is never returned, but when a transaction modifying a number
    of rows commits concurrently with a transaction reading the same rows, the transaction
    performing the read can observe “before” values, “after” values, or both, for
    different rows among these, due to the fact that a given row read request can
    be processed either before or after the commit of the other transaction.
  id: totrans-4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 未提交数据永远不会返回，但是当修改多行的事务与读取相同行的事务同时提交时，执行读取的事务可能会观察到这些行中的不同行的“之前”值、“之后”值或两者，这是因为给定行读取请求可以在另一个事务提交之前或之后处理。
- en: 'To ensure that a given transaction reads only before or after values, you can
    impose row locks using [`SELECT ... LOCK IN SHARE MODE`](select.html "15.2.13 SELECT
    Statement"). In such cases, the lock is held until the owning transaction is committed.
    Using row locks can also cause the following issues:'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为确保给定事务仅读取之前或之后的值，您可以使用 [`SELECT ... LOCK IN SHARE MODE`](select.html "15.2.13 SELECT
    Statement") 强制施加行锁。在这种情况下，锁将保持直到拥有事务提交。使用行锁还可能导致以下问题：
- en: Increased frequency of lock wait timeout errors, and reduced concurrency
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁等待超时错误频率增加，并发性降低
- en: Increased transaction processing overhead due to reads requiring a commit phase
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于读取需要提交阶段，事务处理开销增加
- en: Possibility of exhausting the available number of concurrent locks, which is
    limited by [`MaxNoOfConcurrentOperations`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-maxnoofconcurrentoperations)
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能耗尽可用并发锁数量的可能性，这由 [`MaxNoOfConcurrentOperations`](mysql-cluster-ndbd-definition.html#ndbparam-ndbd-maxnoofconcurrentoperations)
    限制
- en: '`NDB` uses `READ COMMITTED` for all reads unless a modifier such as `LOCK IN
    SHARE MODE` or `FOR UPDATE` is used. `LOCK IN SHARE MODE` causes shared row locks
    to be used; `FOR UPDATE` causes exclusive row locks to be used. Unique key reads
    have their locks upgraded automatically by `NDB` to ensure a self-consistent read;
    `BLOB` reads also employ extra locking for consistency.'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`NDB` 在所有读取操作中使用 `READ COMMITTED`，除非使用诸如 `LOCK IN SHARE MODE` 或 `FOR UPDATE`
    等修饰符。`LOCK IN SHARE MODE` 导致使用共享行锁；`FOR UPDATE` 导致使用独占行锁。唯一键读取会被 `NDB` 自动升级锁以确保自洽读取；`BLOB`
    读取也会为了一致性而使用额外的锁定。'
- en: See [Section 25.6.8.4, “NDB Cluster Backup Troubleshooting”](mysql-cluster-backup-troubleshooting.html
    "25.6.8.4 NDB Cluster Backup Troubleshooting"), for information on how NDB Cluster's
    implementation of transaction isolation level can affect backup and restoration
    of `NDB` databases.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见 [第 25.6.8.4 节，“NDB 集群备份故障排除”](mysql-cluster-backup-troubleshooting.html "25.6.8.4 NDB
    Cluster Backup Troubleshooting")，了解 NDB 集群的事务隔离级别实现如何影响 `NDB` 数据库的备份和恢复。
- en: '**Transactions and BLOB or TEXT columns. ** [`NDBCLUSTER`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") stores only part of a column value that uses
    any of MySQL''s [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") or [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") data types in the table visible to MySQL; the
    remainder of the [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") or [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") is stored in a separate internal table that
    is not accessible to MySQL. This gives rise to two related issues of which you
    should be aware whenever executing [`SELECT`](select.html "15.2.13 SELECT Statement")
    statements on tables that contain columns of these types:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事务和BLOB或TEXT列。** [`NDBCLUSTER`](mysql-cluster.html "Chapter 25 MySQL NDB
    Cluster 8.0")仅在MySQL可见的表中存储使用MySQL的任何[`BLOB`](blob.html "13.3.4 The BLOB and TEXT
    Types")或[`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")数据类型的列值的一部分；[`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types")或[`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types")的其余部分存储在一个不可访问的单独内部表中。这会引发两个相关问题，您在执行包含这些类型列的表上的[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句时应该注意：'
- en: 'For any [`SELECT`](select.html "15.2.13 SELECT Statement") from an NDB Cluster
    table: If the [`SELECT`](select.html "15.2.13 SELECT Statement") includes a [`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types") or [`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types") column, the [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)
    transaction isolation level is converted to a read with read lock. This is done
    to guarantee consistency.'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于从NDB Cluster表中的任何[`SELECT`](select.html "15.2.13 SELECT Statement")：如果[`SELECT`](select.html
    "15.2.13 SELECT Statement")包括[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")或[`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")列，则[`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)事务隔离级别会转换为带读锁的读取。这样做是为了保证一致性。
- en: For any [`SELECT`](select.html "15.2.13 SELECT Statement") which uses a unique
    key lookup to retrieve any columns that use any of the [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") or [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")
    data types and that is executed within a transaction, a shared read lock is held
    on the table for the duration of the transaction—that is, until the transaction
    is either committed or aborted.
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于任何使用唯一键查找来检索使用任何[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")或[`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")数据类型的列的[`SELECT`](select.html "15.2.13 SELECT
    Statement")，并且在事务内执行的情况下，表上会持有一个共享读锁，直到事务要么提交要么中止。
- en: This issue does not occur for queries that use index or table scans, even against
    [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables having [`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types") or [`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types") columns.
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于使用索引或表扫描的查询，即使针对具有[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")或[`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")列的[`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0")表，也不会出现此问题。
- en: 'For example, consider the table `t` defined by the following [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statement:'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，考虑以下[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")语句定义的表`t`：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following query on `t` causes a shared read lock, because it uses a unique
    key lookup:'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对`t`的以下查询会导致共享读锁，因为它使用了唯一键查找：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, none of the four queries shown here causes a shared read lock:'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，这里展示的四个查询中没有一个会导致共享读锁：
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is because, of these four queries, the first uses an index scan, the second
    and third use table scans, and the fourth, while using a primary key lookup, does
    not retrieve the value of any [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")
    or [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") columns.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是因为在这四个查询中，第一个使用索引扫描，第二和第三使用表扫描，而第四个虽然使用主键查找，但不检索任何[`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types")或[`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")列的值。
- en: You can help minimize issues with shared read locks by avoiding queries that
    use unique key lookups that retrieve [`BLOB`](blob.html "13.3.4 The BLOB and TEXT
    Types") or [`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types") columns, or, in
    cases where such queries are not avoidable, by committing transactions as soon
    as possible afterward.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过避免检索[`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types")或[`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types")列的唯一键查找查询，或者在无法避免这类查询的情况下，尽快提交事务，可以帮助最小化共享读锁的问题。
- en: '**Unique key lookups and transaction isolation. ** Unique indexes are implemented
    in `NDB` using a hidden index table which is maintained internally. When a user-created
    `NDB` table is accessed using a unique index, the hidden index table is first
    read to find the primary key that is then used to read the user-created table.
    To avoid modification of the index during this double-read operation, the row
    found in the hidden index table is locked. When a row referenced by a unique index
    in the user-created `NDB` table is updated, the hidden index table is subject
    to an exclusive lock by the transaction in which the update is performed. This
    means that any read operation on the same (user-created) `NDB` table must wait
    for the update to complete. This is true even when the transaction level of the
    read operation is [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唯一键查找和事务隔离。** 使用隐藏索引表在`NDB`中实现唯一索引，该表在内部维护。当使用唯一索引访问用户创建的`NDB`表时，首先读取隐藏索引表以找到然后用于读取用户创建的表的主键。为了避免在这种双重读取操作期间修改索引，对在隐藏索引表中找到的行进行锁定。当更新用户创建的`NDB`表中唯一索引引用的行时，由执行更新的事务对隐藏索引表施加排他锁。这意味着对同一（用户创建的）`NDB`表的任何读取操作都必须等待更新完成。即使读取操作的事务级别为[`READ
    COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)，也是如此。'
- en: One workaround which can be used to bypass potentially blocking reads is to
    force the SQL node to ignore the unique index when performing the read. This can
    be done by using the `IGNORE INDEX` index hint as part of the [`SELECT`](select.html
    "15.2.13 SELECT Statement") statement reading the table (see [Section 10.9.4,
    “Index Hints”](index-hints.html "10.9.4 Index Hints")). Because the MySQL server
    creates a shadowing ordered index for every unique index created in `NDB`, this
    lets the ordered index be read instead, and avoids unique index access locking.
    The resulting read is as consistent as a committed read by primary key, returning
    the last committed value at the time the row is read.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以用于绕过潜在阻塞读取的一种解决方法是强制 SQL 节点在执行读取时忽略唯一索引。这可以通过在读取表时使用`IGNORE INDEX`索引提示作为[`SELECT`](select.html
    "15.2.13 SELECT Statement")语句的一部分来实现（参见[Section 10.9.4, “Index Hints”](index-hints.html
    "10.9.4 Index Hints")）。因为 MySQL 服务器为在`NDB`中创建的每个唯一索引创建了一个阴影有序索引，这样可以读取有序索引，避免唯一索引访问锁定。结果读取与按主键提交的读取一样一致，在读取行时返回最后提交的值。
- en: Reading via an ordered index makes less efficient use of resources in the cluster,
    and may have higher latency.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过有序索引进行读取会较少有效地利用集群资源，并可能具有较高的延迟。
- en: It is also possible to avoid using the unique index for access by querying for
    ranges rather than for unique values.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也可以通过查询范围而不是唯一值来避免使用唯一索引进行访问。
- en: '**Rollbacks. ** There are no partial transactions, and no partial rollbacks
    of transactions. A duplicate key or similar error causes the entire transaction
    to be rolled back.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回滚。** 没有部分事务，也没有部分事务回滚。重复键或类似错误会导致整个事务回滚。'
- en: This behavior differs from that of other transactional storage engines such
    as [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    that may roll back individual statements.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种行为与其他事务存储引擎（如[`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine")）不同，后者可能会回滚单个语句。
- en: '**Transactions and memory usage. ** As noted elsewhere in this chapter, NDB
    Cluster does not handle large transactions well; it is better to perform a number
    of small transactions with a few operations each than to attempt a single large
    transaction containing a great many operations. Among other considerations, large
    transactions require very large amounts of memory. Because of this, the transactional
    behavior of a number of MySQL statements is affected as described in the following
    list:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事务和内存使用。** 如本章其他地方所述，NDB Cluster 不擅长处理大型事务；最好执行一些包含少量操作的小事务，而不是尝试包含大量操作的单个大型事务。除其他考虑外，大型事务需要非常大量的内存。因此，一些
    MySQL 语句的事务行为受到影响，如下列表所述：'
- en: '[`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")
    is not transactional when used on [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") tables. If a [`TRUNCATE TABLE`](truncate-table.html "15.1.37 TRUNCATE
    TABLE Statement") fails to empty the table, then it must be re-run until it is
    successful.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")表上使用[`TRUNCATE
    TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")时不具有事务性。如果[`TRUNCATE
    TABLE`](truncate-table.html "15.1.37 TRUNCATE TABLE Statement")未能清空表格，则必须重复运行直到成功。
- en: '`DELETE FROM` (even with no `WHERE` clause) *is* transactional. For tables
    containing a great many rows, you may find that performance is improved by using
    several `DELETE FROM ... LIMIT ...` statements to “chunk” the delete operation.
    If your objective is to empty the table, then you may wish to use [`TRUNCATE TABLE`](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement") instead.'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE FROM`（即使没有`WHERE`子句）*是*事务性的。对于包含大量行的表，您可能会发现通过使用多个`DELETE FROM ...
    LIMIT ...`语句来“分块”删除操作可以提高性能。如果您的目标是清空表格，则可能希望改用[`TRUNCATE TABLE`](truncate-table.html
    "15.1.37 TRUNCATE TABLE Statement")。'
- en: '**LOAD DATA statements. ** [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    is not transactional when used on [`NDB`](mysql-cluster.html "Chapter 25 MySQL
    NDB Cluster 8.0") tables.'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LOAD DATA 语句。** [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    在[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")表上使用时不具有事务性。'
- en: Important
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: When executing a [`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")
    statement, the [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")
    engine performs commits at irregular intervals that enable better utilization
    of the communication network. It is not possible to know ahead of time when such
    commits take place.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在执行[`LOAD DATA`](load-data.html "15.2.9 LOAD DATA Statement")语句时，[`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0")引擎以不规则的间隔执行提交，以便更好地利用通信网络。无法提前知道这些提交何时发生。
- en: '**ALTER TABLE and transactions. ** When copying an [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") table as part of an [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement"), the creation of the copy is nontransactional.
    (In any case, this operation is rolled back when the copy is deleted.)'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ALTER TABLE 和事务。** 在作为[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE
    Statement")的一部分复制[`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0")表时，复制的创建是非事务性的。（无论如何，当复制被删除时，此操作会被回滚。）'
- en: '**Transactions and the COUNT() function. ** When using NDB Cluster Replication,
    it is not possible to guarantee the transactional consistency of the [`COUNT()`](aggregate-functions.html#function_count)
    function on the replica. In other words, when performing on the source a series
    of statements ([`INSERT`](insert.html "15.2.7 INSERT Statement"), [`DELETE`](delete.html
    "15.2.2 DELETE Statement"), or both) that changes the number of rows in a table
    within a single transaction, executing `SELECT COUNT(*) FROM *`table`*` queries
    on the replica may yield intermediate results. This is due to the fact that `SELECT
    COUNT(...)` may perform dirty reads, and is not a bug in the [`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0") storage engine. (See Bug #31321 for more information.)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事务和 COUNT() 函数。** 在使用NDB Cluster Replication时，无法保证副本上[`COUNT()`](aggregate-functions.html#function_count)函数的事务一致性。换句话说，在源上执行一系列语句（[`INSERT`](insert.html
    "15.2.7 INSERT Statement")、[`DELETE`](delete.html "15.2.2 DELETE Statement")或两者）以在单个事务中更改表中的行数时，在副本上执行`SELECT
    COUNT(*) FROM *`table`*`查询可能会产生中间结果。这是因为`SELECT COUNT(...)`可能执行脏读，并不是[`NDB`](mysql-cluster.html
    "Chapter 25 MySQL NDB Cluster 8.0")存储引擎中的错误。（有关更多信息，请参见Bug #31321。）'
