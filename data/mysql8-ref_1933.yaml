- en: 28.3.38 The INFORMATION_SCHEMA TABLES Table
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 28.3.38 The INFORMATION_SCHEMA TABLES Table
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html](https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html](https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html)
- en: The [`TABLES`](information-schema-tables-table.html "28.3.38 The INFORMATION_SCHEMA
    TABLES Table") table provides information about tables in databases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TABLES`](https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html)表提供有关��据库中表的信息。'
- en: Columns in [`TABLES`](information-schema-tables-table.html "28.3.38 The INFORMATION_SCHEMA
    TABLES Table") that represent table statistics hold cached values. The [`information_schema_stats_expiry`](server-system-variables.html#sysvar_information_schema_stats_expiry)
    system variable defines the period of time before cached table statistics expire.
    The default is 86400 seconds (24 hours). If there are no cached statistics or
    statistics have expired, statistics are retrieved from storage engines when querying
    table statistics columns. To update cached values at any time for a given table,
    use [`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE TABLE Statement").
    To always retrieve the latest statistics directly from storage engines, set [`information_schema_stats_expiry`](server-system-variables.html#sysvar_information_schema_stats_expiry)
    to `0`. For more information, see [Section 10.2.3, “Optimizing INFORMATION_SCHEMA
    Queries”](information-schema-optimization.html "10.2.3 Optimizing INFORMATION_SCHEMA
    Queries").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TABLES`](https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html)中表示表统计信息的列保存了缓存值。[`information_schema_stats_expiry`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_information_schema_stats_expiry)系统变量定义了缓存表统计信息过期之前的时间段。默认值为86400秒（24小时）。如果没有缓存统计信息或统计信息已过期，在查询表统计信息列时，将从存储引擎中检索统计信息。要随时更新给定表的缓存值，请使用[`ANALYZE
    TABLE`](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html)语句。要始终直接从存储引擎中检索最新统计信息，请将[`information_schema_stats_expiry`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_information_schema_stats_expiry)设置为`0`。更多信息，请参见[Section 10.2.3,
    “Optimizing INFORMATION_SCHEMA Queries”](https://dev.mysql.com/doc/refman/8.0/en/information-schema-optimization.html)。'
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If the [`innodb_read_only`](innodb-parameters.html#sysvar_innodb_read_only)
    system variable is enabled, [`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE
    TABLE Statement") may fail because it cannot update statistics tables in the data
    dictionary, which use `InnoDB`. For [`ANALYZE TABLE`](analyze-table.html "15.7.3.1 ANALYZE
    TABLE Statement") operations that update the key distribution, failure may occur
    even if the operation updates the table itself (for example, if it is a `MyISAM`
    table). To obtain the updated distribution statistics, set [`information_schema_stats_expiry=0`](server-system-variables.html#sysvar_information_schema_stats_expiry).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了[`innodb_read_only`](https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_read_only)系统变量，则[`ANALYZE
    TABLE`](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html)可能会失败，因为它无法更新使用`InnoDB`的数据字典中的统计表。对于更新键分布的[`ANALYZE
    TABLE`](https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html)操作，即使操作更新了表本身（例如，如果它是`MyISAM`表），也可能会发生失败。要获取更新后的分布统计信息，请将[`information_schema_stats_expiry=0`](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_information_schema_stats_expiry)。
- en: 'The [`TABLES`](information-schema-tables-table.html "28.3.38 The INFORMATION_SCHEMA
    TABLES Table") table has these columns:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TABLES`](https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html)表具有以下列：'
- en: '`TABLE_CATALOG`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE_CATALOG`'
- en: The name of the catalog to which the table belongs. This value is always `def`.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表所属的目录名称。该值始终为`def`。
- en: '`TABLE_SCHEMA`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE_SCHEMA`'
- en: The name of the schema (database) to which the table belongs.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表所属的模式（数据库）的名称。
- en: '`TABLE_NAME`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE_NAME`'
- en: The name of the table.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表的名称。
- en: '`TABLE_TYPE`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE_TYPE`'
- en: '`BASE TABLE` for a table, `VIEW` for a view, or `SYSTEM VIEW` for an `INFORMATION_SCHEMA`
    table.'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表的`BASE TABLE`，视图的`VIEW`，或`INFORMATION_SCHEMA`表的`SYSTEM VIEW`。
- en: The [`TABLES`](information-schema-tables-table.html "28.3.38 The INFORMATION_SCHEMA
    TABLES Table") table does not list `TEMPORARY` tables.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TABLES`](https://dev.mysql.com/doc/refman/8.0/en/information-schema-tables-table.html)表不列出`TEMPORARY`表。'
- en: '`ENGINE`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENGINE`'
- en: The storage engine for the table. See [Chapter 17, *The InnoDB Storage Engine*](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine"), and [Chapter 18, *Alternative Storage
    Engines*](storage-engines.html "Chapter 18 Alternative Storage Engines").
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表的存储引擎。请参阅[Chapter 17, *The InnoDB Storage Engine*](https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html)，以及[Chapter 18,
    *Alternative Storage Engines*](https://dev.mysql.com/doc/refman/8.0/en/storage-engines.html)。
- en: For partitioned tables, `ENGINE` shows the name of the storage engine used by
    all partitions.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于分区表，`ENGINE`显示所有分区使用的存储引擎的名称。
- en: '`VERSION`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VERSION`'
- en: This column is unused. With the removal of `.frm` files in MySQL 8.0, this column
    now reports a hardcoded value of `10`, which is the last `.frm` file version used
    in MySQL 5.7.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此列未使用。随着MySQL 8.0中`.frm`文件的移除，此列现在报告一个硬编码值`10`，这是MySQL 5.7中使用的最后一个`.frm`文件版本。
- en: '`ROW_FORMAT`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ROW_FORMAT`'
- en: The row-storage format (`Fixed`, `Dynamic`, `Compressed`, `Redundant`, `Compact`).
    For `MyISAM` tables, `Dynamic` corresponds to what [**myisamchk -dvv**](myisamchk.html
    "6.6.4 myisamchk — MyISAM Table-Maintenance Utility") reports as `Packed`.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 行存储格式（`Fixed`，`Dynamic`，`Compressed`，`Redundant`，`Compact`）。对于`MyISAM`表，`Dynamic`对应于[**myisamchk
    -dvv**](myisamchk.html "6.6.4 myisamchk — MyISAM Table-Maintenance Utility")报告的`Packed`。
- en: '`TABLE_ROWS`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE_ROWS`'
- en: The number of rows. Some storage engines, such as `MyISAM`, store the exact
    count. For other storage engines, such as `InnoDB`, this value is an approximation,
    and may vary from the actual value by as much as 40% to 50%. In such cases, use
    `SELECT COUNT(*)` to obtain an accurate count.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 行数。一些存储引擎，如`MyISAM`，存储确切的计数。对于其他存储引擎，如`InnoDB`，这个值是一个近似值，可能与实际值相差40%至50%。在这种情况下，使用`SELECT
    COUNT(*)`来获得准确的计数。
- en: '`TABLE_ROWS` is `NULL` for `INFORMATION_SCHEMA` tables.'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`INFORMATION_SCHEMA`表，`TABLE_ROWS`为`NULL`。
- en: For [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")
    tables, the row count is only a rough estimate used in SQL optimization. (This
    is also true if the [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine") table is partitioned.)
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")表，行计数仅是SQL优化中使用的粗略估计。（如果[`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine")表被分区，这也是正确的。）
- en: '`AVG_ROW_LENGTH`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AVG_ROW_LENGTH`'
- en: The average row length.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 平均行长度。
- en: '`DATA_LENGTH`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATA_LENGTH`'
- en: For `MyISAM`, `DATA_LENGTH` is the length of the data file, in bytes.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`MyISAM`，`DATA_LENGTH`是数据文件的长度，以字节为单位。
- en: For `InnoDB`, `DATA_LENGTH` is the approximate amount of space allocated for
    the clustered index, in bytes. Specifically, it is the clustered index size, in
    pages, multiplied by the `InnoDB` page size.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`InnoDB`，`DATA_LENGTH`是近似为聚簇索引分配的空间量，以字节为单位。具体来说，它是聚簇索引大小（以页为单位）乘以`InnoDB`页大小。
- en: Refer to the notes at the end of this section for information regarding other
    storage engines.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关其他存储引擎的信息，请参考本节末尾的注释。
- en: '`MAX_DATA_LENGTH`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAX_DATA_LENGTH`'
- en: For `MyISAM`, `MAX_DATA_LENGTH` is maximum length of the data file. This is
    the total number of bytes of data that can be stored in the table, given the data
    pointer size used.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`MyISAM`，`MAX_DATA_LENGTH`是数据文件的最大长度。这是可以存储在表中的数据字节数总数，考虑到使用的数据指针大小。
- en: Unused for `InnoDB`.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`InnoDB`未使用。
- en: Refer to the notes at the end of this section for information regarding other
    storage engines.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关其他存储引擎的信息，请参考本节末尾的注释。
- en: '`INDEX_LENGTH`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INDEX_LENGTH`'
- en: For `MyISAM`, `INDEX_LENGTH` is the length of the index file, in bytes.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`MyISAM`，`INDEX_LENGTH`是索引文件的长度，以字节为单位。
- en: For `InnoDB`, `INDEX_LENGTH` is the approximate amount of space allocated for
    non-clustered indexes, in bytes. Specifically, it is the sum of non-clustered
    index sizes, in pages, multiplied by the `InnoDB` page size.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`InnoDB`，`INDEX_LENGTH`是非聚簇索引分配的空间量的近似值，以字节为单位。具体来说，它是非聚簇索引大小（以页为单位）的总和，乘以`InnoDB`页大小。
- en: Refer to the notes at the end of this section for information regarding other
    storage engines.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关其他存储引擎的信息，请参考本节末尾的注释。
- en: '`DATA_FREE`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATA_FREE`'
- en: The number of allocated but unused bytes.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已分配但未使用字节的数量。
- en: '`InnoDB` tables report the free space of the tablespace to which the table
    belongs. For a table located in the shared tablespace, this is the free space
    of the shared tablespace. If you are using multiple tablespaces and the table
    has its own tablespace, the free space is for only that table. Free space means
    the number of bytes in completely free extents minus a safety margin. Even if
    free space displays as 0, it may be possible to insert rows as long as new extents
    need not be allocated.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InnoDB`表报告表所属表空间的空闲空间。对于位于共享表空间中的表，这是共享表空间的空闲空间。如果您使用多个表空间并且表有自己的表空间，则空闲空间仅适用于该表。空闲空间表示完全空闲范围中的字节数减去安全边界。即使空闲空间显示为0，也可能可以插入行，只要不需要分配新的范围。'
- en: For NDB Cluster, `DATA_FREE` shows the space allocated on disk for, but not
    used by, a Disk Data table or fragment on disk. (In-memory data resource usage
    is reported by the `DATA_LENGTH` column.)
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于NDB Cluster，`DATA_FREE`显示在磁盘上为磁盘数据表或片段分配但未使用的空间。（内存数据资源使用由`DATA_LENGTH`列报告。）
- en: 'For partitioned tables, this value is only an estimate and may not be absolutely
    correct. A more accurate method of obtaining this information in such cases is
    to query the `INFORMATION_SCHEMA` [`PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table") table, as shown in this example:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于分区表，此值仅为估计值，可能不完全正确。在这种情况下，获取此信息的更准确方法是查询`INFORMATION_SCHEMA` [`PARTITIONS`](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table")表，如下例所示：
- en: '[PRE0]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For more information, see [Section 28.3.21, “The INFORMATION_SCHEMA PARTITIONS
    Table”](information-schema-partitions-table.html "28.3.21 The INFORMATION_SCHEMA
    PARTITIONS Table").
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息，请参见[Section 28.3.21, “The INFORMATION_SCHEMA PARTITIONS Table”](information-schema-partitions-table.html
    "28.3.21 The INFORMATION_SCHEMA PARTITIONS Table")。
- en: '`AUTO_INCREMENT`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTO_INCREMENT`'
- en: The next `AUTO_INCREMENT` value.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一个`AUTO_INCREMENT`值。
- en: '`CREATE_TIME`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CREATE_TIME`'
- en: When the table was created.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表创建的时间。
- en: '`UPDATE_TIME`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UPDATE_TIME`'
- en: When the table was last updated. For some storage engines, this value is `NULL`.
    Even with [file-per-table](glossary.html#glos_file_per_table "file-per-table")
    mode with each `InnoDB` table in a separate `.ibd` file, [change buffering](glossary.html#glos_change_buffering
    "change buffering") can delay the write to the data file, so the file modification
    time is different from the time of the last insert, update, or delete. For `MyISAM`,
    the data file timestamp is used; however, on Windows the timestamp is not updated
    by updates, so the value is inaccurate.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表上次更新的时间。对于某些存储引擎，此值为`NULL`。即使使用每个`InnoDB`表在单独的`.ibd`文件中的[file-per-table](glossary.html#glos_file_per_table
    "file-per-table")模式，[change buffering](glossary.html#glos_change_buffering "change
    buffering")也可能延迟对数据文件的写入，因此文件修改时间与最后插入、更新或删除的时间不同。对于`MyISAM`，使用数据文件时间戳；但在Windows上，时间戳不会被更新，因此值不准确。
- en: '`UPDATE_TIME` displays a timestamp value for the last [`UPDATE`](update.html
    "15.2.17 UPDATE Statement"), [`INSERT`](insert.html "15.2.7 INSERT Statement"),
    or [`DELETE`](delete.html "15.2.2 DELETE Statement") performed on `InnoDB` tables
    that are not partitioned. For MVCC, the timestamp value reflects the [`COMMIT`](commit.html
    "15.3.1 START TRANSACTION, COMMIT, and ROLLBACK Statements") time, which is considered
    the last update time. Timestamps are not persisted when the server is restarted
    or when the table is evicted from the `InnoDB` data dictionary cache.'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UPDATE_TIME`显示了对未分区的`InnoDB`表执行的最后一次[`UPDATE`](update.html "15.2.17 UPDATE
    Statement")、[`INSERT`](insert.html "15.2.7 INSERT Statement")或[`DELETE`](delete.html
    "15.2.2 DELETE Statement")的时间戳值。对于MVCC，时间戳值反映了[`COMMIT`](commit.html "15.3.1 START
    TRANSACTION, COMMIT, and ROLLBACK Statements")时间，被视为最后更新时间。当服务器重新启动或表从`InnoDB`数据字典缓存中删除时，时间戳不会被持久化。'
- en: '`CHECK_TIME`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHECK_TIME`'
- en: When the table was last checked. Not all storage engines update this time, in
    which case, the value is always `NULL`.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上次检查表的时间。并非所有存储引擎都会更新此时间，如果不更新，则值始终为`NULL`。
- en: For partitioned [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB
    Storage Engine") tables, `CHECK_TIME` is always `NULL`.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于分区的[`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage Engine")表，`CHECK_TIME`始终为`NULL`。
- en: '`TABLE_COLLATION`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE_COLLATION`'
- en: The table default collation. The output does not explicitly list the table default
    character set, but the collation name begins with the character set name.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表的默认排序规则。输出中没有明确列出表的默认字符集，但排序规则名称以字符集名称开头。
- en: '`CHECKSUM`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHECKSUM`'
- en: The live checksum value, if any.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 活动校验和值（如果有）。
- en: '`CREATE_OPTIONS`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CREATE_OPTIONS`'
- en: Extra options used with [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE
    Statement").
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement")一起使用的额外选项。
- en: '`CREATE_OPTIONS` shows `partitioned` for a partitioned table.'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CREATE_OPTIONS`显示为分区表。'
- en: Prior to MySQL 8.0.16, `CREATE_OPTIONS` shows the `ENCRYPTION` clause specified
    for tables created in file-per-table tablespaces. As of MySQL 8.0.16, it shows
    the encryption clause for file-per-table tablespaces if the table is encrypted
    or if the specified encryption differs from the schema encryption. The encryption
    clause is not shown for tables created in general tablespaces. To identify encrypted
    file-per-table and general tablespaces, query the [`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html
    "28.4.24 The INFORMATION_SCHEMA INNODB_TABLESPACES Table") `ENCRYPTION` column.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.16 之前，`CREATE_OPTIONS` 显示了为在每个文件表空间中创建的表指定的 `ENCRYPTION` 子句。从 MySQL
    8.0.16 开始，如果表已加密或指定的加密与模式加密不同，则显示每个文件表空间的加密子句。对于在一般表空间中创建的表，不显示加密子句。要识别加密的每个文件表空间和一般表空间，请查询
    [`INNODB_TABLESPACES`](information-schema-innodb-tablespaces-table.html "28.4.24 The
    INFORMATION_SCHEMA INNODB_TABLESPACES Table") 的 `ENCRYPTION` 列。
- en: When creating a table with [strict mode](glossary.html#glos_strict_mode "strict
    mode") disabled, the storage engine's default row format is used if the specified
    row format is not supported. The actual row format of the table is reported in
    the `ROW_FORMAT` column. `CREATE_OPTIONS` shows the row format that was specified
    in the [`CREATE TABLE`](create-table.html "15.1.20 CREATE TABLE Statement") statement.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在创建表时禁用 [严格模式](glossary.html#glos_strict_mode "strict mode")，如果指定的行格式不受支持，则使用存储引擎的默认行格式。表的实际行格式在
    `ROW_FORMAT` 列中报告。`CREATE_OPTIONS` 显示在 [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") 语句中指定的行格式。
- en: When altering the storage engine of a table, table options that are not applicable
    to the new storage engine are retained in the table definition to enable reverting
    the table with its previously defined options to the original storage engine,
    if necessary. The `CREATE_OPTIONS` column may show retained options.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当更改表的存储引擎时，不适用于新存储引擎的表选项保留在表定义中，以便在必要时将具有先前定义选项的表还原为原始存储引擎。`CREATE_OPTIONS`
    列可能显示保留的选项。
- en: '`TABLE_COMMENT`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TABLE_COMMENT`'
- en: The comment used when creating the table (or information as to why MySQL could
    not access the table information).
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建表时使用的注释（或者为什么 MySQL 无法访问表信息的信息）。
- en: Notes
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables, the
    output of this statement shows appropriate values for the `AVG_ROW_LENGTH` and
    `DATA_LENGTH` columns, with the exception that [`BLOB`](blob.html "13.3.4 The
    BLOB and TEXT Types") columns are not taken into account.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") 表，此语句的输出显示
    `AVG_ROW_LENGTH` 和 `DATA_LENGTH` 列的适当值，但不考虑 [`BLOB`](blob.html "13.3.4 The BLOB
    and TEXT Types") 列。
- en: For [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables, `DATA_LENGTH`
    includes data stored in main memory only; the `MAX_DATA_LENGTH` and `DATA_FREE`
    columns apply to Disk Data.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") 表，`DATA_LENGTH`
    仅包括存储在主内存中的数据；`MAX_DATA_LENGTH` 和 `DATA_FREE` 列适用于磁盘数据。
- en: For NDB Cluster Disk Data tables, `MAX_DATA_LENGTH` shows the space allocated
    for the disk part of a Disk Data table or fragment. (In-memory data resource usage
    is reported by the `DATA_LENGTH` column.)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 NDB 集群磁盘数据表，`MAX_DATA_LENGTH` 显示为磁盘数据表或片段的磁盘部分分配的空间。（内存数据资源使用由 `DATA_LENGTH`
    列报告。）
- en: For `MEMORY` tables, the `DATA_LENGTH`, `MAX_DATA_LENGTH`, and `INDEX_LENGTH`
    values approximate the actual amount of allocated memory. The allocation algorithm
    reserves memory in large amounts to reduce the number of allocation operations.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `MEMORY` 表，`DATA_LENGTH`、`MAX_DATA_LENGTH` 和 `INDEX_LENGTH` 的值近似于实际分配的内存量。分配算法会大量保留内存以减少分配操作的数量。
- en: For views, most [`TABLES`](information-schema-tables-table.html "28.3.38 The
    INFORMATION_SCHEMA TABLES Table") columns are 0 or `NULL` except that `TABLE_NAME`
    indicates the view name, `CREATE_TIME` indicates the creation time, and `TABLE_COMMENT`
    says `VIEW`.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于视图，大多数 [`TABLES`](information-schema-tables-table.html "28.3.38 The INFORMATION_SCHEMA
    TABLES Table") 列为 0 或 `NULL`，除了 `TABLE_NAME` 指示视图名称，`CREATE_TIME` 指示创建时间，`TABLE_COMMENT`
    显示 `VIEW`。
- en: 'Table information is also available from the [`SHOW TABLE STATUS`](show-table-status.html
    "15.7.7.38 SHOW TABLE STATUS Statement") and [`SHOW TABLES`](show-tables.html
    "15.7.7.39 SHOW TABLES Statement") statements. See [Section 15.7.7.38, “SHOW TABLE
    STATUS Statement”](show-table-status.html "15.7.7.38 SHOW TABLE STATUS Statement"),
    and [Section 15.7.7.39, “SHOW TABLES Statement”](show-tables.html "15.7.7.39 SHOW
    TABLES Statement"). The following statements are equivalent:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 表信息也可以通过[`SHOW TABLE STATUS`](show-table-status.html "15.7.7.38 SHOW TABLE STATUS
    Statement")和[`SHOW TABLES`](show-tables.html "15.7.7.39 SHOW TABLES Statement")语句获取。请参阅[Section 15.7.7.38,
    “SHOW TABLE STATUS Statement”](show-table-status.html "15.7.7.38 SHOW TABLE STATUS
    Statement")和[Section 15.7.7.39, “SHOW TABLES Statement”](show-tables.html "15.7.7.39 SHOW
    TABLES Statement")。以下语句是等效的：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following statements are equivalent:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句是等效的：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
