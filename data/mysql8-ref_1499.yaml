- en: 20.3.2 Group Replication Limitations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 20.3.2 Group Replication限制
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-replication-limitations.html](https://dev.mysql.com/doc/refman/8.0/en/group-replication-limitations.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/group-replication-limitations.html](https://dev.mysql.com/doc/refman/8.0/en/group-replication-limitations.html)
- en: '[Limit on Group Size](group-replication-limitations.html#group-replication-limitations-group-size
    "Limit on Group Size")'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[组大小限制](group-replication-limitations.html#group-replication-limitations-group-size
    "组大小限制")'
- en: '[Limits on Transaction Size](group-replication-limitations.html#group-replication-limitations-transaction-size
    "Limits on Transaction Size")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[事务大小限制](group-replication-limitations.html#group-replication-limitations-transaction-size
    "事务大小限制")'
- en: The following known limitations exist for Group Replication. Note that the limitations
    and issues described for multi-primary mode groups can also apply in single-primary
    mode clusters during a failover event, while the newly elected primary flushes
    out its applier queue from the old primary.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Group Replication存在以下已知限制。请注意，在故障转移事件期间，多主模式组的限制和问题也可能适用于单主模式集群，而新选举的主节点会清空其来自旧主节点的应用程序队列。
- en: Tip
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Group Replication is built on GTID based replication, therefore you should also
    be aware of [Section 19.1.3.7, “Restrictions on Replication with GTIDs”](replication-gtids-restrictions.html
    "19.1.3.7 Restrictions on Replication with GTIDs").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Group Replication是基于GTID的复制构建的，因此您还应该注意[Section 19.1.3.7, “使用GTID进行复制的限制”](replication-gtids-restrictions.html
    "19.1.3.7 使用GTID进行复制的限制")。
- en: '**`--upgrade=MINIMAL` option. ** Group Replication cannot be started following
    a MySQL Server upgrade that uses the MINIMAL option (`--upgrade=MINIMAL`), which
    does not upgrade system tables on which the replication internals depend.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`--upgrade=MINIMAL`选项。** Group Replication无法在使用MINIMAL选项(`--upgrade=MINIMAL`)进行MySQL
    Server升级后启动，因为该选项不会升级复制内部所依赖的系统表。'
- en: '**Gap Locks. ** Group Replication''s certification process for concurrent transactions
    does not take into account [gap locks](glossary.html#glos_gap_lock "gap lock"),
    as information about gap locks is not available outside of [`InnoDB`](innodb-storage-engine.html
    "Chapter 17 The InnoDB Storage Engine"). See [Gap Locks](innodb-locking.html#innodb-gap-locks
    "Gap Locks") for more information.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间隙锁。** Group Replication的并发事务认证过程不考虑[间隙锁](glossary.html#glos_gap_lock "间隙锁")，因为间隙锁的信息在[`InnoDB`](innodb-storage-engine.html
    "第17章 InnoDB存储引擎")之外不可用。有关更多信息，请参阅[间隙锁](innodb-locking.html#innodb-gap-locks "间隙锁")。'
- en: Note
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For a group in multi-primary mode, unless you rely on [`REPEATABLE READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read)
    semantics in your applications, we recommend using the [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)
    isolation level with Group Replication. InnoDB does not use gap locks in [`READ
    COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed),
    which aligns the local conflict detection within InnoDB with the distributed conflict
    detection performed by Group Replication. For a group in single-primary mode,
    only the primary accepts writes, so the [`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)
    isolation level is not important to Group Replication.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于多主模式下的组，除非您的应用程序依赖于[`REPEATABLE READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read)语义，我们建议在Group
    Replication中使用[`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)隔离级别。
    InnoDB在[`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)中不使用间隙锁，这使得InnoDB内部的本地冲突检测与Group
    Replication执行的分布式冲突检测保持一致。对于单主模式下的组，只有主节点接受写操作，因此[`READ COMMITTED`](innodb-transaction-isolation-levels.html#isolevel_read-committed)隔离级别对于Group
    Replication并不重要。
- en: '**Table Locks and Named Locks. ** The certification process does not take into
    account table locks (see [Section 15.3.6, “LOCK TABLES and UNLOCK TABLES Statements”](lock-tables.html
    "15.3.6 LOCK TABLES and UNLOCK TABLES Statements")) or named locks (see [`GET_LOCK()`](locking-functions.html#function_get-lock)).'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表锁和命名锁。** 认证过程不考虑表锁（参见[Section 15.3.6, “LOCK TABLES和UNLOCK TABLES语句”](lock-tables.html
    "15.3.6 LOCK TABLES和UNLOCK TABLES语句")）或命名锁（参见[`GET_LOCK()`](locking-functions.html#function_get-lock)）。'
- en: '**Binary Log Checksums. ** Up to and including MySQL 8.0.20, Group Replication
    cannot make use of checksums and does not support their presence in the binary
    log, so you must set [`binlog_checksum=NONE`](replication-options-binary-log.html#sysvar_binlog_checksum)
    when configuring a server instance to become a group member. From MySQL 8.0.21,
    Group Replication supports checksums, so group members may use the default setting
    [`binlog_checksum=CRC32`](replication-options-binary-log.html#sysvar_binlog_checksum).
    The setting for [`binlog_checksum`](replication-options-binary-log.html#sysvar_binlog_checksum)
    does not have to be the same for all members of a group.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二进制日志校验和。** 截至 MySQL 8.0.20，Group Replication 无法使用校验和，也不支持二进制日志中的校验和，因此在配置服务器实例成为组成员时，必须设置[`binlog_checksum=NONE`](replication-options-binary-log.html#sysvar_binlog_checksum)。从
    MySQL 8.0.21 开始，Group Replication 支持校验和，因此组成员可以使用默认设置[`binlog_checksum=CRC32`](replication-options-binary-log.html#sysvar_binlog_checksum)。[`binlog_checksum`](replication-options-binary-log.html#sysvar_binlog_checksum)
    的设置不必对组中的所有成员相同。'
- en: When checksums are available, Group Replication does not use them to verify
    incoming events on the `group_replication_applier` channel, because events are
    written to that relay log from multiple sources and before they are actually written
    to the originating server's binary log, which is when a checksum is generated.
    Checksums are used to verify the integrity of events on the `group_replication_recovery`
    channel and on any other replication channels on group members.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当校验和可用时，Group Replication 不会使用它们来验证`group_replication_applier`通道上的传入事件，因为事件是从多个来源写入到中继日志中的，而在它们实际写入到原始服务器的二进制日志之前，校验和是不会生成的。校验和用于验证`group_replication_recovery`通道上的事件的完整性，以及组成员上的任何其他复制通道上的事件。
- en: '**SERIALIZABLE Isolation Level. ** [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)
    isolation level is not supported in multi-primary groups by default. Setting a
    transaction isolation level to `SERIALIZABLE` configures Group Replication to
    refuse to commit the transaction.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可串行化隔离级别。** [`SERIALIZABLE`](innodb-transaction-isolation-levels.html#isolevel_serializable)
    隔离级别在多主组中默认不受支持。将事务隔离级别设置为`SERIALIZABLE`会配置 Group Replication 拒绝提交事务。'
- en: '**Concurrent DDL versus DML Operations. ** Concurrent data definition statements
    and data manipulation statements executing against the same object but on different
    servers is not supported when using multi-primary mode. During execution of Data
    Definition Language (DDL) statements on an object, executing concurrent Data Manipulation
    Language (DML) on the same object but on a different server instance has the risk
    of conflicting DDL executing on different instances not being detected.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发 DDL 与 DML 操作。** 在使用多主模式时，不支持针对同一对象执行并发数据定义语句和数据操作语句，但在不同的服务器上执行。在对象上执行数据定义语言（DDL）语句期间，在不同服务器实例上执行相同对象的并发数据操作语言（DML）存在冲突的风险，因为在不同实例上执行的冲突DDL可能不会被检测到。'
- en: '**Foreign Keys with Cascading Constraints. ** Multi-primary mode groups (members
    all configured with [`group_replication_single_primary_mode=OFF`](group-replication-system-variables.html#sysvar_group_replication_single_primary_mode))
    do not support tables with multi-level foreign key dependencies, specifically
    tables that have defined `CASCADING` [foreign key constraints](glossary.html#glos_foreign_key_constraint
    "FOREIGN KEY constraint"). This is because foreign key constraints that result
    in cascading operations executed by a multi-primary mode group can result in undetected
    conflicts and lead to inconsistent data across the members of the group. Therefore
    we recommend setting [`group_replication_enforce_update_everywhere_checks=ON`](group-replication-system-variables.html#sysvar_group_replication_enforce_update_everywhere_checks)
    on server instances used in multi-primary mode groups to avoid undetected conflicts.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有级联约束的外键。** 多主模式组（所有成员都配置为[`group_replication_single_primary_mode=OFF`](group-replication-system-variables.html#sysvar_group_replication_single_primary_mode)）不支持具有多级外键依赖关系的表，特别是定义了`CASCADING`[外键约束](glossary.html#glos_foreign_key_constraint
    "FOREIGN KEY constraint")的表。这是因为由多主模式组执行的导致级联操作的外键约束可能导致未检测到的冲突，并导致组成员之间的数据不一致。因此，我们建议在用于多主模式组的服务器实例上设置[`group_replication_enforce_update_everywhere_checks=ON`](group-replication-system-variables.html#sysvar_group_replication_enforce_update_everywhere_checks)以避免未检测到的冲突。'
- en: In single-primary mode this is not a problem as it does not allow concurrent
    writes to multiple members of the group and thus there is no risk of undetected
    conflicts.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在单主模式下，这不是问题，因为它不允许并发写入到组的多个成员，因此不存在未检测到的冲突风险。
- en: '**Multi-primary Mode Deadlock. ** When a group is operating in multi-primary
    mode, `SELECT .. FOR UPDATE` statements can result in a deadlock. This is because
    the lock is not shared across the members of the group, therefore the expectation
    for such a statement might not be reached.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多主模式死锁。** 当一个组以多主模式运行时，`SELECT .. FOR UPDATE`语句可能导致死锁。这是因为锁不在组的成员之间共享，因此对于这样的语句的期望可能无法实现。'
- en: '**Replication Filters. ** Global replication filters cannot be used on a MySQL
    server instance that is configured for Group Replication, because filtering transactions
    on some servers would make the group unable to reach agreement on a consistent
    state. Channel specific replication filters can be used on replication channels
    that are not directly involved with Group Replication, such as where a group member
    also acts as a replica to a source that is outside the group. They cannot be used
    on the `group_replication_applier` or `group_replication_recovery` channels.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制过滤器。** 不能在配置为Group Replication的MySQL服务器实例上使用全局复制过滤器，因为在某些服务器上过滤事务会导致组无法达成一致状态。可以在与Group
    Replication无直接关系的复制通道上使用特定通道的复制过滤器，例如，当一个组成员同时充当组外源的副本时。不能在`group_replication_applier`或`group_replication_recovery`通道上使用。'
- en: '**Encrypted Connections. ** Support for the TLSv1.3 protocol is available in
    MySQL Server as of MySQL 8.0.16, provided that MySQL was compiled using OpenSSL
    1.1.1 or higher. In MySQL 8.0.16 and MySQL 8.0.17, if the server supports TLSv1.3,
    the protocol is not supported in the group communication engine and cannot be
    used by Group Replication. Group Replication supports TLSv1.3 from MySQL 8.0.18,
    where it can be used for group communication connections and distributed recovery
    connections.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密连接。** MySQL Server自MySQL 8.0.16起支持TLSv1.3协议，前提是MySQL使用了OpenSSL 1.1.1或更高版本进行编译。在MySQL
    8.0.16和MySQL 8.0.17中，如果服务器支持TLSv1.3，则该协议在组通信引擎中不受支持，无法被Group Replication使用。从MySQL
    8.0.18开始，Group Replication支持TLSv1.3，可以用于组通信连接和分布式恢复连接。'
- en: In MySQL 8.0.18, TLSv1.3 can be used in Group Replication for the distributed
    recovery connection, but the [`group_replication_recovery_tls_version`](group-replication-system-variables.html#sysvar_group_replication_recovery_tls_version)
    and [`group_replication_recovery_tls_ciphersuites`](group-replication-system-variables.html#sysvar_group_replication_recovery_tls_ciphersuites)
    system variables are not available. The donor servers must therefore permit the
    use of at least one TLSv1.3 ciphersuite that is enabled by default, as listed
    in [Section 8.3.2, “Encrypted Connection TLS Protocols and Ciphers”](encrypted-connection-protocols-ciphers.html
    "8.3.2 Encrypted Connection TLS Protocols and Ciphers"). From MySQL 8.0.19, you
    can use the options to configure client support for any selection of ciphersuites,
    including only non-default ciphersuites if you want.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL 8.0.18中，TLSv1.3可以用于Group Replication的分布式恢复连接，但[`group_replication_recovery_tls_version`](group-replication-system-variables.html#sysvar_group_replication_recovery_tls_version)和[`group_replication_recovery_tls_ciphersuites`](group-replication-system-variables.html#sysvar_group_replication_recovery_tls_ciphersuites)系统变量不可用。因此，捐赠服务器必须允许使用至少一个默认启用的TLSv1.3密码套件，如[第8.3.2节“加密连接TLS协议和密码套件”](encrypted-connection-protocols-ciphers.html
    "8.3.2 加密连接TLS协议和密码套件")中列出的那样。从MySQL 8.0.19开始，您可以使用选项配置客户端支持任意选择的密码套件，包括仅使用非默认密码套件。
- en: '**Cloning Operations. ** Group Replication initiates and manages cloning operations
    for distributed recovery, but group members that have been set up to support cloning
    may also participate in cloning operations that a user initiates manually. In
    releases before MySQL 8.0.20, you cannot initiate a cloning operation manually
    if the operation involves a group member on which Group Replication is running.
    From MySQL 8.0.20, you can do this, provided that the cloning operation does not
    remove and replace the data on the recipient. The statement to initiate the cloning
    operation must therefore include the `DATA DIRECTORY` clause if Group Replication
    is running. See [Section 20.5.4.2.4, “Cloning for Other Purposes”](group-replication-cloning.html#group-replication-cloning-manual
    "20.5.4.2.4 Cloning for Other Purposes").'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**克隆操作。** Group Replication启动并管理用于分布式恢复的克隆操作，但已设置为支持克隆的组成员也可以参与用户手动启动的克隆操作。在MySQL
    8.0.20之前的版本中，如果操作涉及正在运行Group Replication的组成员，则无法手动启动克隆操作。从MySQL 8.0.20开始，只要克隆操作不会删除并替换接收方的数据，就可以执行此操作。因此，如果Group
    Replication正在运行，则启动克隆操作的语句必须包含`DATA DIRECTORY`子句。请参阅[Section 20.5.4.2.4, “Cloning
    for Other Purposes”](group-replication-cloning.html#group-replication-cloning-manual
    "20.5.4.2.4 Cloning for Other Purposes")。'
- en: Limit on Group Size
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 组大小限制
- en: The maximum number of MySQL servers that can be members of a single replication
    group is 9\. If further members attempt to join the group, their request is refused.
    This limit has been identified from testing and benchmarking as a safe boundary
    where the group performs reliably on a stable local area network.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 单个复制组中可以成为成员的MySQL服务器的最大数量为9。如果更多成员尝试加入组，则其请求将被拒绝。这个限制是通过测试和基准测试确定的，作为组在稳定的局域网上可靠运行的安全边界。
- en: Limits on Transaction Size
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 事务大小限制
- en: 'If an individual transaction results in message contents which are large enough
    that the message cannot be copied between group members over the network within
    a 5-second window, members can be suspected of having failed, and then expelled,
    just because they are busy processing the transaction. Large transactions can
    also cause the system to slow due to problems with memory allocation. To avoid
    these issues use the following mitigations:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单个事务导致消息内容过大，以至于在5秒窗口内无法在组成员之间复制消息，那么成员可能会被怀疑失败，然后被驱逐，仅仅因为它们正忙于处理事务。大型事务也可能导致系统由于内存分配问题而变慢。为避免这些问题，请使用以下缓解措施：
- en: If unnecessary expulsions occur due to large messages, use the system variable
    [`group_replication_member_expel_timeout`](group-replication-system-variables.html#sysvar_group_replication_member_expel_timeout)
    to allow additional time before a member under suspicion of having failed is expelled.
    You can allow up to an hour after the initial 5-second detection period before
    a suspect member is expelled from the group. From MySQL 8.0.21, an additional
    5 seconds is allowed by default.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果由于大型消息而发生不必要的驱逐，请使用系统变量[`group_replication_member_expel_timeout`](group-replication-system-variables.html#sysvar_group_replication_member_expel_timeout)在怀疑失败的成员被驱逐之前提供额外的时间。在初始的5秒检测期之后，您可以允许多达一小时的时间，然后才将怀疑的成员从组中驱逐。从MySQL
    8.0.21开始，默认情况下额外允许5秒。
- en: Where possible, try and limit the size of your transactions before they are
    handled by Group Replication. For example, split up files used with `LOAD DATA`
    into smaller chunks.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下，在交由Group Replication处理之前，尽量限制事务的大小。例如，将与`LOAD DATA`一起使用的文件拆分为较小的块。
- en: Use the system variable [`group_replication_transaction_size_limit`](group-replication-system-variables.html#sysvar_group_replication_transaction_size_limit)
    to specify a maximum transaction size that the group accepts. In MySQL 8.0, this
    system variable defaults to a maximum transaction size of 150000000 bytes (approximately
    143 MB). Transactions above this size are rolled back and are not sent to Group
    Replication's Group Communication System (GCS) for distribution to the group.
    Adjust the value of this variable depending on the maximum message size that you
    need the group to tolerate, bearing in mind that the time taken to process a transaction
    is proportional to its size.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用系统变量[`group_replication_transaction_size_limit`](group-replication-system-variables.html#sysvar_group_replication_transaction_size_limit)来指定组接受的最大事务大小。在MySQL
    8.0中，此系统变量默认为最大事务大小为150000000字节（约143 MB）。超过此大小的事务将被回滚，并且不会发送到Group Replication的Group
    Communication System (GCS)以分发给组。根据您需要组容忍的最大消息大小调整此变量的值，要牢记处理事务所需的时间与其大小成正比。
- en: Use the system variable [`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)
    to specify a message size above which compression is applied. This system variable
    defaults to 1000000 bytes (1 MB), so large messages are automatically compressed.
    Compression is carried out by Group Replication's Group Communication System (GCS)
    when it receives a message that was permitted by the [`group_replication_transaction_size_limit`](group-replication-system-variables.html#sysvar_group_replication_transaction_size_limit)
    setting but exceeds the [`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)
    setting. For more information, see [Section 20.7.4, “Message Compression”](group-replication-message-compression.html
    "20.7.4 Message Compression").
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用系统变量[`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)来指定应用压缩的消息大小阈值。该系统变量默认为1000000字节（1
    MB），因此大消息会自动进行压缩。当Group Replication的Group Communication System（GCS）接收到一个由[`group_replication_transaction_size_limit`](group-replication-system-variables.html#sysvar_group_replication_transaction_size_limit)设置允许但超过[`group_replication_compression_threshold`](group-replication-system-variables.html#sysvar_group_replication_compression_threshold)设置的消息时，将执行压缩。更多信息，请参见[第20.7.4节，“消息压缩”](group-replication-message-compression.html
    "20.7.4 消息压缩")。
- en: Use the system variable [`group_replication_communication_max_message_size`](group-replication-system-variables.html#sysvar_group_replication_communication_max_message_size)
    to specify a message size above which messages are fragmented. This system variable
    defaults to 10485760 bytes (10 MiB), so large messages are automatically fragmented.
    GCS carries out fragmentation after compression if the compressed message still
    exceeds the [`group_replication_communication_max_message_size`](group-replication-system-variables.html#sysvar_group_replication_communication_max_message_size)
    limit. In order for a replication group to use fragmentation, all group members
    must be at MySQL 8.0.16 or above, and the Group Replication communication protocol
    version in use by the group must allow fragmentation. For more information, see
    [Section 20.7.5, “Message Fragmentation”](group-replication-performance-message-fragmentation.html
    "20.7.5 Message Fragmentation").
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用系统变量[`group_replication_communication_max_message_size`](group-replication-system-variables.html#sysvar_group_replication_communication_max_message_size)来指定应用分段的消息大小阈值。该系统变量默认为10485760字节（10
    MiB），因此大消息会自动进行分段。如果压缩后的消息仍超过[`group_replication_communication_max_message_size`](group-replication-system-variables.html#sysvar_group_replication_communication_max_message_size)限制，GCS将在压缩后执行分段。为了使复制组使用分段，所有组成员必须使用MySQL
    8.0.16或更高版本，并且组使用的Group Replication通信协议版本必须允许分段。更多信息，请参见[第20.7.5节，“消息分段”](group-replication-performance-message-fragmentation.html
    "20.7.5 消息分段")。
- en: The maximum transaction size, message compression, and message fragmentation
    can all be deactivated by specifying a zero value for the relevant system variable.
    If you have deactivated all these safeguards, the upper size limit for a message
    that can be handled by the applier thread on a member of a replication group is
    the value of the member's [`replica_max_allowed_packet`](replication-options-replica.html#sysvar_replica_max_allowed_packet)
    or [`slave_max_allowed_packet`](replication-options-replica.html#sysvar_slave_max_allowed_packet)
    system variable, which have a default and maximum value of 1073741824 bytes (1
    GB). A message that exceeds this limit fails when the receiving member attempts
    to handle it. The upper size limit for a message that a group member can originate
    and attempt to transmit to the group is 4294967295 bytes (approximately 4 GB).
    This is a hard limit on the packet size that is accepted by the group communication
    engine for Group Replication (XCom, a Paxos variant), which receives messages
    after GCS has handled them. A message that exceeds this limit fails when the originating
    member attempts to broadcast it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最大交易大小、消息压缩和消息分段都可以通过指定相关系统变量的零值来停用。如果您已停用了所有这些保护措施，那么在复制组成员的应用程序线程可以处理的消息的上限大小是成员的[`replica_max_allowed_packet`](replication-options-replica.html#sysvar_replica_max_allowed_packet)或[`slave_max_allowed_packet`](replication-options-replica.html#sysvar_slave_max_allowed_packet)系统变量的值，这些变量的默认和最大值为1073741824字节（1
    GB）。当接收成员尝试处理超过此限制的消息时，消息将失败。组成员可以发起并尝试传输到组的消息的上限大小为4294967295字节（约4 GB）。这是接受由组复制（XCom，一种Paxos变体）的组通信引擎处理后的消息的数据包大小的硬限制，GCS在处理消息后接收它们。当发起成员尝试广播超过此限制的消息时，消息将失败。
