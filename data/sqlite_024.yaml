- en: The Tcl interface to the SQLite library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite库的Tcl接口
- en: 原文：[https://sqlite.com/tclsqlite.html](https://sqlite.com/tclsqlite.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/tclsqlite.html](https://sqlite.com/tclsqlite.html)
- en: The SQLite library is designed to be very easy to use from a [Tcl or Tcl/Tk](http://www.tcl-lang.org)
    script. SQLite began as a [Tcl extension](http://www.tcl-lang.org/doc/tea/) and
    the primary [test suite](testing.html) for SQLite is written in TCL. SQLite can
    be used with any programming language, but its connections to TCL run deep.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite库被设计为从[Tcl或Tcl/Tk](http://www.tcl-lang.org)脚本非常容易使用。 SQLite起初是作为[Tcl扩展](http://www.tcl-lang.org/doc/tea/)，并且其主要[测试套件](testing.html)是用TCL编写的。
    SQLite可以与任何编程语言一起使用，但它与TCL的连接非常深入。
- en: This document gives an overview of the Tcl programming interface for SQLite.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档概述了SQLite的Tcl编程接口。
- en: The API
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API
- en: The interface to the SQLite library consists of single tcl command named **sqlite3**
    Because there is only this one command, the interface is not placed in a separate
    namespace.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite库的接口由一个名为**sqlite3**的单个tcl命令组成，因为只有这一个命令，所以接口没有放置在单独的命名空间中。
- en: 'The **sqlite3** command is mostly used as follows to open or create a database:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite3**命令主要用于以下方式来打开或创建数据库：'
- en: '**sqlite3**  *dbcmd  ?database-name?  ?options?*'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**sqlite3**  *dbcmd  ?database-name?  ?options?*'
- en: To get information only, the **sqlite3** command may be given exactly one argument,
    either "-version", "-sourceid" or "-has-codec", which will return the specified
    datum with no other effect.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅获取信息，**sqlite3**命令可以提供恰好一个参数，即"-version"、"-sourceid"或"-has-codec"，这将返回指定的数据，而没有其他效果。
- en: With other arguments, the **sqlite3** command opens the database named in the
    second non-option argument, or named "" if there is no such. If the open succeeds,
    a new Tcl command named by the first argument is created and "" is returned. (This
    approach is similar to the way widgets are created in Tk.) If the open fails,
    an error is raised without creating a Tcl command and an error message string
    is returned.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有其他参数时，**sqlite3**命令会打开第二个非选项参数中指定的数据库，如果没有则创建一个名为""的数据库。如果打开成功，将创建一个由第一个参数命名的新Tcl命令，并返回""。（这种方法类似于在Tk中创建小部件。）如果打开失败，则会引发错误而不创建Tcl命令，并返回一个错误消息字符串。
- en: If the database does not already exist, the default behavior is for it to be
    created automatically (though this can be changed by using the "**-create *false***"
    option).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库不存在，默认行为是自动创建它（尽管可以通过使用 "**-create *false***" 选项更改这一行为）。
- en: The name of the database is usually just the name of a disk file in which the
    database is stored. If the name of the database is the special name "[:memory:](inmemorydb.html)",
    then a new database is created in memory. If the name of the database is an empty
    string, then the database is created in an empty file that is automatically deleted
    when the database connection closes. [URI filenames](uri.html) can be used if
    the "**-uri yes**" option is supplied on the **sqlite3** command.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的名称通常只是存储数据库的磁盘文件的名称。如果数据库的名称是特殊名称"[:memory:](inmemorydb.html)"，则在内存中创建一个新数据库。如果数据库的名称是空字符串，则在关闭数据库连接时自动删除空文件中创建数据库。如果在**sqlite3**命令上提供了"**-uri
    yes**"选项，则可以使用[URI文件名](uri.html)。
- en: 'Options understood by the **sqlite3** command include:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite3**命令理解的选项包括：'
- en: '**-create** *BOOLEAN*'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-create** *BOOLEAN*'
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If true, then a new database is created if one does not already exist. If false,
    then an attempt to open a database file that does not previously exist raises
    an error. The default behavior is "true".
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为真，则如果不存在，则创建一个新数据库。如果为假，则尝试打开先前不存在的数据库文件会引发错误。默认行为为"true"。
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-nomutex** *BOOLEAN*'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-nomutex** *BOOLEAN*'
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If true, then all mutexes for the database connection are disabled. This provides
    a small performance boost in single-threaded applications.
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为真，则禁用数据库连接的所有互斥体，这在单线程应用程序中提供了小幅性能提升。
- en: ''
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-readonly** *BOOLEAN*'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-readonly** *BOOLEAN*'
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If true, then open the database file read-only. If false, then the database
    is opened for both reading and writing if filesystem permissions allow, or for
    reading only if filesystem write permission is denied by the operating system.
    The default setting is "false". Note that if the previous process to have the
    database did not exit cleanly and left behind a [hot journal](fileformat2.html#hotjrnl),
    then the write permission is required to recover the database after opening, and
    the database cannot be opened read-only.
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为真，则以只读模式打开数据库文件。如果为假，则如果文件系统权限允许，则以读写模式打开数据库，或者如果操作系统通过文件系统写入权限拒绝，则仅以只读模式打开。默认设置为"false"。请注意，如果先前用于数据库的进程未干净退出并留下[热日志](fileformat2.html#hotjrnl)，则在打开后需要写权限来恢复数据库，并且数据库不能以只读方式打开。
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-uri** *BOOLEAN*'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-uri** *BOOLEAN*'
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If true, then interpret the filename argument as a [URI filename](uri.html).
    If false, then the argument is a literal filename. The default value is "false".
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为真，则将文件名参数解释为[URI文件名](uri.html)。如果为假，则参数为字面文件名。默认值为"false"。
- en: ''
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-vfs** *VFSNAME*'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-vfs** *VFSNAME*'
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use an alternative [VFS](vfs.html) named by the argument.
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用替代的[VFS](vfs.html)根据参数命名。
- en: ''
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-fullmutex** *BOOLEAN*'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-fullmutex** *BOOLEAN*'
- en: ''
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If true, multiple threads can safely attempt to use the database. If false,
    such attempts are unsafe. The default value depends upon how the extension is
    built.
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为真，则多个线程可以安全地尝试使用数据库。如果为假，则此类尝试是不安全的。默认值取决于扩展构建方式。
- en: ''
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-nofollow** *BOOLEAN*'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-nofollow** *BOOLEAN*'
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If true, and the database name refers to a symbolic link, it will not be followed
    to open the true database file. If false, symbolic links will be followed. The
    default is "false".
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果为真，并且数据库名称是符号链接，则不会跟随以打开真实数据库文件。如果为假，则会跟随符号链接。默认为"false"。
- en: Once an SQLite database is open, it can be controlled using methods of the *dbcmd*.
    There are currently 40 methods defined.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦SQLite数据库打开，可以使用*dbcmd*的方法进行控制。当前定义了40种方法。
- en: '|'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[authorizer](#authorizer)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[authorizer](#authorizer)'
- en: '[backup](#backup)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[backup](#backup)'
- en: '[bind_fallback](#bind_fallback)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[bind_fallback](#bind_fallback)'
- en: '[busy](#busy)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[busy](#busy)'
- en: '[cache](#cache)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[cache](#cache)'
- en: '[changes](#changes)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[changes](#changes)'
- en: '[close](#close)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[close](#close)'
- en: '[collate](#collate)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[collate](#collate)'
- en: '[collation_needed](#collation_needed)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[collation_needed](#collation_needed)'
- en: '[commit_hook](#commit_hook)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[commit_hook](#commit_hook)'
- en: '[complete](#complete)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[complete](#complete)'
- en: '[config](#config)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[config](#config)'
- en: '[copy](#copy)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[copy](#copy)'
- en: '[deserialize](#deserialize)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[deserialize](#deserialize)'
- en: '|'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[enable_load_extension](#enable_load_extension)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[enable_load_extension](#enable_load_extension)'
- en: '[errorcode](#errorcode)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[errorcode](#errorcode)'
- en: '[eval](#eval)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[eval](#eval)'
- en: '[exists](#exists)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[exists](#exists)'
- en: '[function](#function)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[function](#function)'
- en: '[incrblob](#incrblob)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[incrblob](#incrblob)'
- en: '[interrupt](#interrupt)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[interrupt](#interrupt)'
- en: '[last_insert_rowid](#last_insert_rowid)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[last_insert_rowid](#last_insert_rowid)'
- en: '[nullvalue](#nullvalue)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[nullvalue](#nullvalue)'
- en: '[onecolumn](#onecolumn)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[onecolumn](#onecolumn)'
- en: '[preupdate](#preupdate)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[preupdate](#preupdate)'
- en: '[profile](#profile)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[profile](#profile)'
- en: '[progress](#progress)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[progress](#progress)'
- en: '[restore](#restore)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[restore](#restore)'
- en: '|'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[rollback_hook](#rollback_hook)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[rollback_hook](#rollback_hook)'
- en: '[serialize](#serialize)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[serialize](#serialize)'
- en: '[status](#status)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[status](#status)'
- en: '[timeout](#timeout)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[timeout](#timeout)'
- en: '[total_changes](#total_changes)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[total_changes](#total_changes)'
- en: '[trace](#trace)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[trace](#trace)'
- en: '[trace_v2](#trace_v2)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[trace_v2](#trace_v2)'
- en: '[transaction](#transaction)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[transaction](#transaction)'
- en: '[unlock_notify](#unlock_notify)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[unlock_notify](#unlock_notify)'
- en: '[update_hook](#update_hook)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[update_hook](#update_hook)'
- en: '[version](#version)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[version](#version)'
- en: '[wal_hook](#wal_hook)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[wal_hook](#wal_hook)'
- en: '|'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The use of each of these methods will be explained in the sequel, though not
    in the order shown above.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将在续集中解释每个方法的使用，尽管不按照上述顺序。
- en: The "eval" method
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"eval"方法'
- en: 'The most useful *dbcmd* method is "eval". The eval method is used to execute
    SQL on the database. The syntax of the eval method looks like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用的*dbcmd*方法是"eval"。eval方法用于在数据库上执行SQL。eval方法的语法如下：
- en: '*dbcmd*  **eval**  ?**-withoutnulls**?  *sql*   ?*array-name*?  ?*script*?'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **eval**  ?**-withoutnulls**?  *sql*   ?*array-name*?  ?*script*?'
- en: 'The job of the eval method is to execute the SQL statement or statements given
    in the second argument. For example, to create a new table in a database, you
    can do this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: eval方法的作用是执行第二个参数中给出的SQL语句或语句。例如，要在数据库中创建一个新表，可以这样做：
- en: '**sqlite3 db1 ./testdb'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**sqlite3 db1 ./testdb'
- en: db1 eval {CREATE TABLE t1(a int, b text)}**
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: db1 eval {CREATE TABLE t1(a int, b text)}**
- en: The above code creates a new table named **t1** with columns **a** and **b**.
    What could be simpler?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个名为**t1**，带有列**a**和**b**的新表。有什么比这更简单的呢？
- en: 'Query results are returned as a list of column values. If a query requests
    2 columns and there are 3 rows matching the query, then the returned list will
    contain 6 elements. For example:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 查询结果作为列值列表返回。如果查询请求 2 列，并且有 3 行匹配查询，则返回的列表将包含 6 个元素。例如：
- en: '**db1 eval {INSERT INTO t1 VALUES(1,''hello'')}'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**db1 eval {INSERT INTO t1 VALUES(1,''hello'')}'
- en: db1 eval {INSERT INTO t1 VALUES(2,'goodbye')}
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: db1 eval {INSERT INTO t1 VALUES(2,'goodbye')}
- en: db1 eval {INSERT INTO t1 VALUES(3,'howdy!')}
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: db1 eval {INSERT INTO t1 VALUES(3,'howdy!')}
- en: set x [db1 eval {SELECT * FROM t1 ORDER BY a}]**
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: set x [db1 eval {SELECT * FROM t1 ORDER BY a}]**
- en: The variable **$x** is set by the above code to
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 **$x** 由上述代码设置为
- en: '**1 hello 2 goodbye 3 howdy!**'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**1 hello 2 goodbye 3 howdy!**'
- en: 'You can also process the results of a query one row at a time by specifying
    the name of an array variable and a script following the SQL code. For each row
    of the query result, the values of all columns will be inserted into the array
    variable and the script will be executed. For instance:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过指定数组变量的名称和跟随 SQL 代码的脚本来逐行处理查询结果。对于查询结果的每一行，所有列的值将插入到数组变量中，并且将执行脚本。例如：
- en: '**db1 eval {SELECT * FROM t1 ORDER BY a} values {'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**db1 eval {SELECT * FROM t1 ORDER BY a} values {'
- en: parray values
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: parray values
- en: puts ""
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: puts ""
- en: '}**'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}**'
- en: 'This last code will give the following output:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将输出以下内容：
- en: '**values(*) = a b'
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**values(*) = a b'
- en: values(a) = 1
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: values(a) = 1
- en: values(b) = hello**
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: values(b) = hello**
- en: ''
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: values(*) = a b
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: values(*) = a b
- en: values(a) = 2
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: values(a) = 2
- en: values(b) = goodbye
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: values(b) = goodbye
- en: ''
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: values(*) = a b
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: values(*) = a b
- en: values(a) = 3
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: values(a) = 3
- en: values(b) = howdy!
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: values(b) = howdy!
- en: 'For each column in a row of the result, the name of that column is used as
    an index in to array and the value of the column is stored in the corresponding
    array entry. (Caution: If two or more columns in the result set of a query have
    the same name, then the last column with that name will overwrite prior values
    and earlier columns with the same name will be inaccessible.) The special array
    index * is used to store a list of column names in the order that they appear.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于结果的每行中的每列，该列的名称用作数组中的索引，并且列的值存储在相应的数组条目中。（注意：如果查询结果集中的两个或更多列具有相同的名称，则具有该名称的最后一列将覆盖先前的值，并且先前具有相同名称的较早列将无法访问。）特殊数组索引
    * 用于按它们出现的顺序存储列名列表。
- en: Normally, NULL SQL results are stored in the array using the [nullvalue](#nullvalue)
    setting. However, if the **-withoutnulls** option is used, then NULL SQL values
    cause the corresponding array element to be unset instead.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，NULL SQL 结果使用 [nullvalue](https://wiki.example.org/nullvalue) 设置存储在数组中。但是，如果使用了
    **-withoutnulls** 选项，则 NULL SQL 值将导致相应的数组元素被取消设置。
- en: 'If the array variable name is omitted or is the empty string, then the value
    of each column is stored in a variable with the same name as the column itself.
    For example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数组变量名被省略或为空字符串，则每列的值将存储在与列名相同的变量中。例如：
- en: '**db1 eval {SELECT * FROM t1 ORDER BY a} {'
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**db1 eval {SELECT * FROM t1 ORDER BY a} {'
- en: puts "a=$a b=$b"
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: puts "a=$a b=$b"
- en: '}**'
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}**'
- en: From this we get the following output
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 由此我们得到以下输出
- en: '**a=1 b=hello'
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**a=1 b=hello'
- en: a=2 b=goodbye
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a=2 b=goodbye
- en: a=3 b=howdy!**
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a=3 b=howdy!**
- en: 'Tcl variable names can appear in the SQL statement of the second argument in
    any position where it is legal to put a string or number literal. The value of
    the variable is substituted for the variable name. If the variable does not exist
    a NULL values is used. For example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Tcl 变量名称可以出现在第二个参数的 SQL 语句中的任何位置，合法的地方是在字符串或数字字面量中。变量的值将替换为变量名。如果变量不存在，则使用 NULL
    值。例如：
- en: '**db1 eval {INSERT INTO t1 VALUES(5,$bigstring)}**'
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**db1 eval {INSERT INTO t1 VALUES(5,$bigstring)}**'
- en: Note that it is not necessary to quote the $bigstring value. That happens automatically.
    If $bigstring is a large string or binary object, this technique is not only easier
    to write, it is also much more efficient since it avoids making a copy of the
    content of $bigstring.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，不需要对 $bigstring 值加引号。这是自动完成的。如果 $bigstring 是一个大字符串或二进制对象，则此技术不仅更容易编写，而且效率更高，因为它避免了复制
    $bigstring 内容。
- en: 'If the $bigstring variable has both a string and a "bytearray" representation,
    then TCL inserts the value as a string. If it has only a "bytearray" representation,
    then the value is inserted as a BLOB. To force a value to be inserted as a BLOB
    even if it also has a text representation, use a "@" character to in place of
    the "$". Like this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 $bigstring 变量既有字符串又有 "bytearray" 表示，则 TCL 将其值插入为字符串。如果它只有 "bytearray" 表示，则将该值插入为
    BLOB。要强制将值插入为 BLOB，即使它也有文本表示，请在 "$" 的位置使用 "@" 字符。像这样：
- en: '**db1 eval {INSERT INTO t1 VALUES(5,@bigstring)}**'
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**db1 eval {INSERT INTO t1 VALUES(5,@bigstring)}**'
- en: 'If the variable does not have a bytearray representation, then "@" works just
    like "$". Note that ":" works like "$" in all cases so the following is another
    way to express the same statement:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果变量没有 bytearray 表示形式，则 "@" 就像 "$" 一样工作。请注意，":" 在所有情况下都像 "$" 一样工作，因此以下是表示相同语句的另一种方式：
- en: '**db1 eval {INSERT INTO t1 VALUES(5,:bigstring)}**'
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**db1 eval {INSERT INTO t1 VALUES(5,:bigstring)}**'
- en: The use of ":" instead of "$" before the name of a variable can sometimes be
    useful if the SQL text is enclosed in double-quotes "..." instead of curly-braces
    {...}. When the SQL is contained within double-quotes "..." then TCL will do the
    substitution of $-variables, which can lead to SQL injection if extreme care is
    not used. But TCL will never substitute a :-variable regardless of whether double-quotes
    "..." or curly-braces {...} are used to enclose the SQL, so the use of :-variables
    adds an extra measure of defense against SQL injection.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在变量名之前使用 ":" 而不是 "$" 有时可以很有用，如果 SQL 文本是用双引号 "..." 而不是大括号 {...} 括起来的话。当 SQL 包含在双引号
    "..." 中时，TCL 将对 $-变量进行替换，如果不小心使用会导致 SQL 注入。但是 TCL 永远不会替换 :-变量，无论 SQL 是用双引号 "..."
    还是大括号 {...} 括起来，因此使用 :-变量可以额外增加防止 SQL 注入的措施。
- en: The "close" method
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"close" 方法'
- en: 'As its name suggests, the "close" method to an SQLite database just closes
    the database. This has the side-effect of deleting the *dbcmd* Tcl command. Here
    is an example of opening and then immediately closing a database:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，"close" 方法关闭 SQLite 数据库，这会删除 *dbcmd* Tcl 命令。以下是打开然后立即关闭数据库的示例：
- en: '**sqlite3 db1 ./testdb'
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**sqlite3 db1 ./testdb'
- en: db1 close**
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: db1 close**
- en: 'If you delete the *dbcmd* directly, that has the same effect as invoking the
    "close" method. So the following code is equivalent to the previous:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果直接删除*dbcmd*，这与调用 "close" 方法具有相同的效果。因此，下面的代码等同于之前的代码：
- en: '**sqlite3 db1 ./testdb'
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**sqlite3 db1 ./testdb'
- en: rename db1 {}**
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: rename db1 {}**
- en: The "transaction" method
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"transaction" 方法'
- en: The "transaction" method is used to execute a TCL script inside an SQLite database
    transaction. The transaction is committed when the script completes, or it rolls
    back if the script fails. If the transaction occurs within another transaction
    (even one that is started manually using BEGIN) it is a no-op.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '"transaction" 方法用于在 SQLite 数据库事务内执行 TCL 脚本。当脚本完成时，事务将提交，如果脚本失败则回滚。如果事务发生在另一个事务内（即使手动使用
    BEGIN 启动的事务），则它是无操作的。'
- en: The transaction command can be used to group together several SQLite commands
    in a safe way. You can always start transactions manually using BEGIN, of course.
    But if an error occurs so that the COMMIT or ROLLBACK are never run, then the
    database will remain locked indefinitely. Also, BEGIN does not nest, so you have
    to make sure no other transactions are active before starting a new one. The "transaction"
    method takes care of all of these details automatically.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 事务命令可用于以安全方式组合几个 SQLite 命令。当然，您始终可以手动启动事务使用 BEGIN。但是，如果发生错误导致 COMMIT 或 ROLLBACK
    永远不会运行，则数据库将无限期保持锁定状态。此外，BEGIN 不支持嵌套，因此在启动新事务之前必须确保没有其他事务处于活动状态。 "transaction"
    方法会自动处理所有这些细节。
- en: 'The syntax looks like this:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '*dbcmd*  **transaction**  *?transaction-type?*   *script*'
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **事务**  *?事务类型?*   *脚本*'
- en: The *transaction-type* can be one of **deferred**, **exclusive** or **immediate**.
    The default is deferred.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '*事务类型* 可以是 **deferred**，**exclusive** 或 **immediate** 中的一种。默认值为 deferred。'
- en: The "cache" method
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"cache" 方法'
- en: 'The "eval" method described [above](#eval) keeps a cache of [prepared statements](c3ref/prepare.html)
    for recently evaluated SQL commands. The "cache" method is used to control this
    cache. The first form of this command is:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 上面描述的 "eval" 方法保留最近评估的 SQL 命令的 [prepared statements](c3ref/prepare.html) 缓存。
    "cache" 方法用于控制此缓存。此命令的第一种形式如下：
- en: '*dbcmd*  **cache size**  *N*'
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **缓存大小**  *N*'
- en: This sets the maximum number of statements that can be cached. The upper limit
    is 100\. The default is 10\. If you set the cache size to 0, no caching is done.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了可以缓存的语句的最大数量。上限是100。默认值是10。如果将缓存大小设置为0，则不会进行缓存。
- en: 'The second form of the command is this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的第二种形式如下：
- en: '*dbcmd*  **cache flush**'
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **缓存刷新**'
- en: The cache-flush method [finalizes](c3ref/finalize.html) all prepared statements
    currently in the cache.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存刷新方法[finalizes](c3ref/finalize.html)目前缓存中的所有准备好的语句。
- en: The "complete" method
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"complete" 方法'
- en: The "complete" method takes a string of supposed SQL as its only argument. It
    returns TRUE if the string is a complete statement of SQL and FALSE if there is
    more to be entered.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '"complete" 方法以所谓的 SQL 字符串作为其唯一参数。如果该字符串是完整的 SQL 语句，则返回 TRUE；如果还有待输入，则返回 FALSE。'
- en: The "complete" method is useful when building interactive applications in order
    to know when the user has finished entering a line of SQL code. This is really
    just an interface to the [**sqlite3_complete()**](c3ref/complete.html) C function.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建交互式应用程序时，"complete" 方法非常有用，用于判断用户是否已完成输入一行 SQL 代码。这实际上只是 [**sqlite3_complete()**](c3ref/complete.html)
    C 函数的一个接口。
- en: The "config" method
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"config" 方法'
- en: 'The "config" method queries or changes certain configuration settings for the
    database connection using the [sqlite3_db_config()](c3ref/db_config.html) interface.
    Run this method with no arguments to get a TCL list of available configuration
    settings and their current values:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '"config" 方法使用 [sqlite3_db_config()](c3ref/db_config.html) 接口来查询或更改数据库连接的某些配置设置。不带参数运行此方法以获取可用配置设置及其当前值的
    TCL 列表：'
- en: '*dbcmd*  **config**'
  id: totrans-160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **config**'
- en: 'The above will return something like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以上将返回类似于以下内容：
- en: defensive 0 dqs_ddl 1 dqs_dml 1 enable_fkey 0 enable_qpsg 0 enable_trigger 1
    enable_view 1 fts3_tokenizer 1 legacy_alter_table 0 legacy_file_format 0 load_extension
    0 no_ckpt_on_close 0 reset_database 0 trigger_eqp 0 trusted_schema 1 writable_schema
    0
  id: totrans-162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: defensive 0 dqs_ddl 1 dqs_dml 1 enable_fkey 0 enable_qpsg 0 enable_trigger 1
    enable_view 1 fts3_tokenizer 1 legacy_alter_table 0 legacy_file_format 0 load_extension
    0 no_ckpt_on_close 0 reset_database 0 trigger_eqp 0 trusted_schema 1 writable_schema
    0
- en: Add the name of an individual configuration setting to query the current value
    of that setting. Optionally add a boolean value to change a setting.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 添加单个配置设置的名称以查询该设置的当前值。可选地添加布尔值以更改设置。
- en: The following four configuration changes are recommended for maximum application
    security. Turning off the trust_schema setting prevents virtual tables and dodgy
    SQL functions from being used inside of triggers, views, CHECK constraints, generated
    columns, and expression indexes. Turning off the dqs_dml and dqs_ddl settings
    prevents the use of double-quoted strings. Turning on defensive prevents direct
    writes to shadow tables.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 建议进行以下四项配置更改以实现最大的应用程序安全性。关闭 trust_schema 设置可以防止在触发器、视图、CHECK 约束、生成列和表达式索引内使用虚拟表和不安全的
    SQL 函数。关闭 dqs_dml 和 dqs_ddl 设置可以防止使用双引号字符串。打开 defensive 可以防止直接写入到影子表。
- en: '[PRE0]'
  id: totrans-165
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The "copy" method
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"copy" 方法'
- en: 'The "copy" method copies data from a file into a table. It returns the number
    of rows processed successfully from the file. The syntax of the copy method looks
    like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '"copy" 方法将数据从文件复制到表中。它返回从文件成功处理的行数。copy 方法的语法如下：'
- en: '*dbcmd*  **copy**  *conflict-algorithm*   *table-name *  *file-name *     ?*column-separator*?
      ?*null-indicator*?'
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **copy**  *conflict-algorithm*   *table-name *  *file-name *     ?*column-separator*?
      ?*null-indicator*?'
- en: 'Conflict-algorithm must be one of the SQLite conflict algorithms for the INSERT
    statement: *rollback*, *abort*, *fail*,*ignore*, or *replace*. See the SQLite
    Language section for [ON CONFLICT](lang_conflict.html) for more information. The
    conflict-algorithm must be specified in lower case.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 冲突算法必须是 INSERT 语句的 SQLite 冲突算法之一：*rollback*、*abort*、*fail*、*ignore* 或 *replace*。有关更多信息，请参阅
    SQLite 语言部分的 [ON CONFLICT](lang_conflict.html)。冲突算法必须以小写指定。
- en: Table-name must already exists as a table. File-name must exist, and each row
    must contain the same number of columns as defined in the table. If a line in
    the file contains more or less than the number of columns defined, the copy method
    rollbacks any inserts, and returns an error.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Table-name 必须已存在作为一个表。File-name 必须存在，并且文件中的每一行必须包含与表定义的列数相同的列数。如果文件中的某行包含的列数多于或少于表定义的列数，copy
    方法将回滚任何插入，并返回错误。
- en: Column-separator is an optional column separator string. The default is the
    ASCII tab character \t.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Column-separator 是一个可选的列分隔符字符串。默认为 ASCII 制表符 \t。
- en: Null-indicator is an optional string that indicates a column value is null.
    The default is an empty string. Note that column-separator and null-indicator
    are optional positional arguments; if null-indicator is specified, a column-separator
    argument must be specified and precede the null-indicator argument.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Null-indicator 是一个可选字符串，表示列值为 null。默认为空字符串。请注意，column-separator 和 null-indicator
    是可选的位置参数；如果指定了 null-indicator，则必须先指定 column-separator 参数。
- en: The copy method implements similar functionality to the **.import** SQLite shell
    command.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '"copy" 方法实现了与 **.import** SQLite shell 命令类似的功能。'
- en: The "timeout" method
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"timeout" 方法'
- en: The "timeout" method is used to control how long the SQLite library will wait
    for locks to clear before giving up on a database transaction. The default timeout
    is 0 millisecond. (In other words, the default behavior is not to wait at all.)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '"timeout" 方法用于控制 SQLite 库在放弃数据库事务之前等待锁定清除的时间。默认超时时间为 0 毫秒（换句话说，默认行为是不等待）。'
- en: The SQLite database allows multiple simultaneous readers or a single writer
    but not both. If any process is writing to the database no other process is allows
    to read or write. If any process is reading the database other processes are allowed
    to read but not write. The entire database shared a single lock.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 数据库允许多个同时读取器或单个写入器，但不能同时进行读写。如果任何进程正在向数据库写入，则不允许其他进程读取或写入。如果任何进程正在读取数据库，则允许其他进程读取但不允许写入。整个数据库共享一个锁。
- en: 'When SQLite tries to open a database and finds that it is locked, it can optionally
    delay for a short while and try to open the file again. This process repeats until
    the query times out and SQLite returns a failure. The timeout is adjustable. It
    is set to 0 by default so that if the database is locked, the SQL statement fails
    immediately. But you can use the "timeout" method to change the timeout value
    to a positive number. For example:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当 SQLite 尝试打开数据库并发现它被锁定时，它可以选择延迟一小段时间然后再次尝试打开文件。此过程重复，直到查询超时并且 SQLite 返回失败。超时时间可调整。默认情况下设置为
    0，因此如果数据库被锁定，则 SQL 语句立即失败。但是您可以使用 "timeout" 方法将超时值更改为正数。例如：
- en: '**db1 timeout 2000**'
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**db1 timeout 2000**'
- en: The argument to the timeout method is the maximum number of milliseconds to
    wait for the lock to clear. So in the example above, the maximum delay would be
    2 seconds.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: timeout 方法的参数是等待锁定清除的最大毫秒数。因此，在上面的示例中，最大延迟将为 2 秒。
- en: The "busy" method
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"busy" 方法'
- en: The "busy" method, like "timeout", only comes into play when the database is
    locked. But the "busy" method gives the programmer much more control over what
    action to take. The "busy" method specifies a callback Tcl procedure that is invoked
    whenever SQLite tries to open a locked database. A single integer argument is
    appended to the callback before it is invoke. The argument is the number of prior
    calls to the busy callback for the current locking event. It is intended that
    the callback will do some other useful work for a short while (such as service
    GUI events) then return so that the lock can be tried again. The callback procedure
    should return "0" if it wants SQLite to try again to open the database and should
    return "1" if it wants SQLite to abandon the current operation.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '"busy" 方法与 "timeout" 类似，仅在数据库被锁定时起作用。但是 "busy" 方法允许程序员更多地控制要采取的操作。"busy" 方法指定一个回调
    Tcl 过程，每当 SQLite 尝试打开一个锁定的数据库时调用该过程。在调用回调之前，会附加一个整数参数，该参数是当前锁定事件的先前调用次数。回调应该在短时间内完成一些其他有用的工作（如服务
    GUI 事件），然后返回，以便可以再次尝试锁定。如果回调过程希望 SQLite 再次尝试打开数据库，则应返回 "0"；如果希望 SQLite 放弃当前操作，则应返回
    "1"。'
- en: If the busy method is invoked without an argument, the name of the callback
    procedure last set by the busy method is returned. If no callback procedure has
    been set, an empty string is returned.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有参数调用 busy 方法，则返回最后由 busy 方法设置的回调过程的名称。如果未设置任何回调过程，则返回空字符串。
- en: The "enable_load_extension" method
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"enable_load_extension" 方法'
- en: The extension loading mechanism of SQLite (accessed using the [load_extension()](lang_corefunc.html#load_extension)
    SQL function) is turned off by default. This is a security precaution. If an application
    wants to make use of the [load_extension()](lang_corefunc.html#load_extension)
    function it must first turn the capability on using this method.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 的扩展加载机制（使用 [load_extension()](lang_corefunc.html#load_extension) SQL
    函数访问）默认关闭。这是一种安全预防措施。如果应用程序希望使用 [load_extension()](lang_corefunc.html#load_extension)
    函数，则必须首先使用此方法打开此功能。
- en: This method takes a single boolean argument which will turn the extension loading
    functionality on or off.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个布尔参数，用于打开或关闭扩展加载功能。
- en: For best security, do not use this method unless truly needed, and run [PRAGMA
    trusted_schema=OFF](pragma.html#pragma_trusted_schema) or the "[db config trusted_schema
    0](#config)" method before invoking this method.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 出于最佳安全考虑，除非确实需要，否则不要使用此方法，并在调用此方法之前运行 [PRAGMA trusted_schema=OFF](pragma.html#pragma_trusted_schema)
    或 "[db config trusted_schema 0](#config)" 方法。
- en: This method maps to the [sqlite3_enable_load_extension()](c3ref/enable_load_extension.html)
    C/C++ interface.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法映射到 [sqlite3_enable_load_extension()](c3ref/enable_load_extension.html) C/C++
    接口。
- en: The "exists" method
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**exists** 方法'
- en: The "exists" method is similar to "onecolumn" and "eval" in that it executes
    SQL statements. The difference is that the "exists" method always returns a boolean
    value which is TRUE if a query in the SQL statement it executes returns one or
    more rows and FALSE if the SQL returns an empty set.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**exists** 方法类似于 "onecolumn" 和 "eval"，它执行 SQL 语句。不同之处在于，"exists" 方法始终返回布尔值，如果它执行的
    SQL 语句返回一个或多个行，则返回 TRUE，如果 SQL 返回空集，则返回 FALSE。'
- en: 'The "exists" method is often used to test for the existence of rows in a table.
    For example:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**exists** 方法经常用于测试表中是否存在行。例如：'
- en: '**if {[db exists {SELECT 1 FROM table1 WHERE user=$user}]} {'
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**if {[db exists {SELECT 1 FROM table1 WHERE user=$user}]} {'
- en: '# Processing if $user exists'
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '# 如果 $user 存在则处理'
- en: '} else {'
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '} else {'
- en: '# Processing if $user does not exist'
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '# 如果 $user 不存在则处理'
- en: '}**'
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '}**'
- en: The "last_insert_rowid" method
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**last_insert_rowid** 方法'
- en: The "last_insert_rowid" method returns an integer which is the ROWID of the
    most recently inserted database row.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**last_insert_rowid** 方法返回一个整数，该整数是最近插入的数据库行的 ROWID。'
- en: The "function" method
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**function** 方法'
- en: The "function" method registers new SQL functions with the SQLite engine. The
    arguments are the name of the new SQL function and a TCL command that implements
    that function. Arguments to the function are appended to the TCL command before
    it is invoked.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**function** 方法向 SQLite 引擎注册新的 SQL 函数。参数是新 SQL 函数的名称以及实现该函数的 TCL 命令。在调用之前，函数的参数将追加到
    TCL 命令中。'
- en: For security reasons, it is recommended that applications first set [PRAGMA
    trusted_schema=OFF](pragma.html#pragma_trusted_schema) or run the "[db config
    trusted_schema 0](#config)" method before using this method.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全考虑，建议应用程序在使用此方法之前首先设置 [PRAGMA trusted_schema=OFF](pragma.html#pragma_trusted_schema)
    或运行 "[db config trusted_schema 0](#config)" 方法。
- en: 'The syntax looks like this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '*dbcmd*  **function**   *sql-name*   *?options?*   *script*'
  id: totrans-202
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **function**   *sql-name*   *?options?*   *script*'
- en: 'The following example creates a new SQL function named "hex" that converts
    its numeric argument in to a hexadecimal encoded string:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例创建一个名为 "hex" 的新 SQL 函数，该函数将其数值参数转换为十六进制编码字符串：
- en: '**db function hex {format 0x%X}**'
  id: totrans-204
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**db 函数 hex {format 0x%X}**'
- en: 'The "function" method accepts the following options:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**function** 方法接受以下选项：'
- en: '**-argcount** *INTEGER*'
  id: totrans-206
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-argcount** *INTEGER*'
- en: ''
  id: totrans-207
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Specify the number of arguments that the SQL function accepts. The default value
    of -1 means any number of arguments.
  id: totrans-208
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指定 SQL 函数接受的参数数量。默认值为 -1，表示任意数量的参数。
- en: ''
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-deterministic**'
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-deterministic**'
- en: ''
  id: totrans-211
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This option indicates that the function will always return the same answer given
    the same argument values. The SQLite query optimizer uses this information to
    cache answers from function calls with constant inputs and reuse the result rather
    than invoke the function repeatedly.
  id: totrans-212
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项指示函数在给定相同参数值时将始终返回相同的答案。SQLite 查询优化器使用此信息来缓存具有恒定输入的函数调用的答案，并重用结果，而不是重复调用函数。
- en: ''
  id: totrans-213
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-directonly**'
  id: totrans-214
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-directonly**'
- en: ''
  id: totrans-215
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This option restricts the function to only be usable by direct top-level SQL
    statement. The function will not be accessible to triggers, views, CHECK constraints,
    generated columns, or index expressions. This option is recommended for all application-defined
    SQL functions, and is highly recommended for any SQL function that has side effects
    or that reveals internal state of the application.
  id: totrans-216
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项限制函数仅可通过直接的顶层 SQL 语句使用。该函数将不可供触发器、视图、CHECK 约束、生成列或索引表达式访问。此选项建议用于所有应用定义的
    SQL 函数，并强烈建议用于具有副作用或者揭示应用程序内部状态的任何 SQL 函数。
- en: ''
  id: totrans-217
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Security Warning:** Without this switch, an attacker might be able to change
    the schema of a database file to include the new function inside a trigger or
    view or CHECK constraint and thereby trick the application into running the function
    with parameters of the attacker''s choosing. Hence, if the new function has side
    effects or reveals internal state about the application and the -directonly option
    is not used, that is a potential security vulnerability.'
  id: totrans-218
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**安全警告：** 如果没有此开关，攻击者可能能够修改数据库文件的模式，将新函数包含在触发器、视图或 CHECK 约束中，从而欺骗应用程序使用攻击者选择的参数运行函数。因此，如果新函数具有副作用或揭示应用程序内部状态，并且未使用
    -directonly 选项，则存在潜在的安全漏洞。'
- en: ''
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-innocuous**'
  id: totrans-220
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-innocuous**'
- en: ''
  id: totrans-221
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This option indicates that the function has no side effects and does not leak
    any information that cannot be computed directly from its input parameters. When
    this option is specified, the function may be used in triggers, views, CHECK constraints,
    generated columns, and/or index expressions even if [PRAGMA trusted_schema=OFF](pragma.html#pragma_trusted_schema).
    The use of this option is discouraged unless it is truly needed.
  id: totrans-222
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项指示函数没有副作用，并且不泄漏任何无法直接从其输入参数计算的信息。当指定此选项时，即使 [PRAGMA trusted_schema=OFF](pragma.html#pragma_trusted_schema)，该函数也可以在触发器、视图、CHECK
    约束、生成的列和/或索引表达式中使用。除非确实需要，否则不建议使用此选项。
- en: ''
  id: totrans-223
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-returntype integer|real|text|blob|any**'
  id: totrans-224
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-returntype integer|real|text|blob|any**'
- en: ''
  id: totrans-225
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This option is used to configure the type of the result returned by the function.
    If this option is set to "any" (the default), SQLite attempts to determine the
    type of each value returned by the function implementation based on the Tcl value's
    internal type. Or, if it is set to "text" or "blob", the returned value is always
    a text or blob value, respectively. If this option is set to "integer", SQLite
    attempts to coerce the value returned by the function to an integer. If this is
    not possible without data loss, it attempts to coerce it to a real value, and
    finally falls back to text. If this option is set to "real", an attempt is made
    to return a real value, falling back to text if this is not possible.
  id: totrans-226
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此选项用于配置函数返回的结果类型。如果将此选项设置为 "any"（默认值），SQLite 会基于 Tcl 值的内部类型尝试确定函数实现返回值的类型。或者，如果设置为
    "text" 或 "blob"，则返回值始终为文本或 blob 值。如果将此选项设置为 "integer"，SQLite 尝试将函数返回的值强制转换为整数。如果无法在不丢失数据的情况下进行此操作，则尝试将其转换为实数值，最后回退到文本。如果将此选项设置为
    "real"，则尝试返回实数值，如果无法实现，则回退到文本。
- en: The "nullvalue" method
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"nullvalue" 方法'
- en: The "nullvalue" method changes the representation for NULL returned as result
    of the "eval" method.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '"nullvalue" 方法改变了作为 "eval" 方法结果返回的 NULL 的表示方式。'
- en: '**db1 nullvalue NULL**'
  id: totrans-229
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**db1 nullvalue NULL**'
- en: The "nullvalue" method is useful to differ between NULL and empty column values
    as Tcl lacks a NULL representation. The default representation for NULL values
    is an empty string.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '"nullvalue" 方法在 Tcl 中缺少 NULL 表示时非常有用，用于区分 NULL 和空列值。NULL 值的默认表示是空字符串。'
- en: The "onecolumn" method
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"onecolumn" 方法'
- en: The "onecolumn" method works like "[eval](#eval)" in that it evaluates the SQL
    query statement given as its argument. The difference is that "onecolumn" returns
    a single element which is the first column of the first row of the query result.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '"onecolumn" 方法类似于 "[eval](#eval)"，它评估作为参数给出的 SQL 查询语句。不同之处在于，"onecolumn" 返回一个单一元素，即查询结果的第一行的第一列。'
- en: This is a convenience method. It saves the user from having to do a "`[lindex ... 0]`"
    on the results of an "eval" in order to extract a single column result.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个方便的方法。它保存用户免去了对 "eval" 结果进行 "`[lindex ... 0]`" 提取单列结果的步骤。
- en: The "changes" method
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"changes" 方法'
- en: The "changes" method returns an integer which is the number of rows in the database
    that were inserted, deleted, and/or modified by the most recent "eval" method.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '"changes" 方法返回一个整数，该整数表示数据库中由最近的 "eval" 方法插入、删除和/或修改的行数。'
- en: The "total_changes" method
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"total_changes" 方法'
- en: The "total_changes" method returns an integer which is the number of rows in
    the database that were inserted, deleted, and/or modified since the current database
    connection was first opened.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '"total_changes" 方法返回一个整数，该整数表示自打开当前数据库连接以来插入、删除和/或修改的行数。'
- en: The "authorizer" method
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"authorizer" 方法'
- en: The "authorizer" method provides access to the [sqlite3_set_authorizer](c3ref/set_authorizer.html)
    C/C++ interface. The argument to authorizer is the name of a procedure that is
    called when SQL statements are being compiled in order to authorize certain operations.
    The callback procedure takes 5 arguments which describe the operation being coded.
    If the callback returns the text string "SQLITE_OK", then the operation is allowed.
    If it returns "SQLITE_IGNORE", then the operation is silently disabled. If the
    return is "SQLITE_DENY" then the compilation fails with an error.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '"authorizer" 方法提供对 [sqlite3_set_authorizer](c3ref/set_authorizer.html) C/C++
    接口的访问。authorizer 的参数是一个过程的名称，当编译 SQL 语句以授权特定操作时会调用该过程。回调过程接受 5 个描述编码操作的参数。如果回调返回文本字符串
    "SQLITE_OK"，则允许操作。如果返回 "SQLITE_IGNORE"，则操作会被静默禁用。如果返回 "SQLITE_DENY"，则编译将失败并显示错误。'
- en: If the argument is an empty string then the authorizer is disabled. If the argument
    is omitted, then the current authorizer is returned.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数是空字符串，则禁用授权者。如果省略参数，则返回当前授权者。
- en: The "bind_fallback" method
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"bind_fallback" 方法'
- en: The "bind_fallback" method gives the application control over how to handle
    parameter binding when no TCL variable matches the parameter name.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '"bind_fallback" 方法允许应用程序控制在没有匹配参数名称的 TCL 变量时如何处理参数绑定。'
- en: When the [eval method](#eval) sees a named SQL parameter such as "$abc" or ":def"
    or "@ghi" in an SQL statement, it tries to look up a TCL variable with the same
    name, and it binds the value of that TCL variable to the SQL parameter. If no
    such TCL variable exists, the default behavior is to bind an SQL NULL value to
    the parameter. However, if a bind_fallback proc is specified, then that proc is
    invoked with the name of the SQL parameter and the return value from the proc
    is bound to the SQL parameter. Or if the proc returns an error, then the SQL statement
    aborts with that error. If the proc returns with some code other than TCL_OK or
    TCL_ERROR, then the SQL parameter is bound to NULL, as it would be by default.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [eval 方法](#eval) 在 SQL 语句中看到命名的 SQL 参数（如 "$abc" 或 ":def" 或 "@ghi"），它尝试查找相同名称的
    TCL 变量，并将该 TCL 变量的值绑定到 SQL 参数。如果没有这样的 TCL 变量存在，默认行为是将 SQL NULL 值绑定到参数。但是，如果指定了
    bind_fallback proc，则调用该 proc 并将 proc 的返回值绑定到 SQL 参数。如果 proc 返回错误，则 SQL 语句中止并显示该错误。如果
    proc 返回除 TCL_OK 或 TCL_ERROR 之外的其他代码，则将 SQL 参数绑定为 NULL，就像默认情况下一样。
- en: The "bind_fallback" method has a single optional argument. If the argument is
    an empty string, then the bind_fallback is cancelled and the default behavior
    is restored. If the argument is a non-empty string, then the argument is a TCL
    command (usually the name of a proc) to invoke whenever an SQL parameter is seen
    that does not match any TCL variable. If the "bind_fallback" method is given no
    arguments, then the current bind_fallback command is returned.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '"bind_fallback" 方法有一个可选参数。如果参数是空字符串，则取消 bind_fallback 并恢复默认行为。如果参数是非空字符串，则参数是要调用的
    TCL 命令（通常是 proc 的名称），每当看到不匹配任何 TCL 变量的 SQL 参数时调用该命令。如果 "bind_fallback" 方法没有参数，则返回当前的
    bind_fallback 命令。'
- en: 'As an example, the following setup causes TCL to throw an error if an SQL statement
    contains an parameter that does not match any global TCL variable:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下设置会导致 TCL 在 SQL 语句中包含不匹配任何全局 TCL 变量的参数时抛出错误：
- en: '[PRE1]'
  id: totrans-246
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The "progress" method
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"progress" 方法'
- en: 'This method registers a callback that is invoked periodically during query
    processing. There are two arguments: the number of SQLite virtual machine opcodes
    between invocations, and the TCL command to invoke. Setting the progress callback
    to an empty string disables it.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法注册一个回调函数，它在查询处理期间定期调用。有两个参数：在调用之间的 SQLite 虚拟机操作码数，以及要调用的 TCL 命令。将进度回调设置为空字符串会禁用它。
- en: The progress callback can be used to display the status of a lengthy query or
    to process GUI events during a lengthy query.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 进度回调可以用于显示长查询的状态或在长查询期间处理 GUI 事件。
- en: The "collate" method
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"collate" 方法'
- en: 'This method registers new text collating sequences. There are two arguments:
    the name of the collating sequence and the name of a TCL procedure that implements
    a comparison function for the collating sequence.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法注册新的文本排序序列。有两个参数：排序序列的名称和实现排序函数的 TCL 过程的名称。
- en: 'For example, the following code implements a collating sequence called "NOCASE"
    that sorts in text order without regard to case:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码实现了一个称为 "NOCASE" 的排序序列，按文本顺序排序而不考虑大小写：
- en: '[PRE2]'
  id: totrans-253
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The "collation_needed" method
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"collation_needed" 方法'
- en: This method registers a callback routine that is invoked when the SQLite engine
    needs a particular collating sequence but does not have that collating sequence
    registered. The callback can register the collating sequence. The callback is
    invoked with a single parameter which is the name of the needed collating sequence.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法注册一个回调函数，当 SQLite 引擎需要特定排序序列但未注册该排序序列时调用该回调。回调函数会注册排序序列，参数是所需排序序列的名称。
- en: The "commit_hook" method
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"commit_hook" 方法'
- en: This method registers a callback routine that is invoked just before SQLite
    tries to commit changes to a database. If the callback throws an exception or
    returns a non-zero result, then the transaction rolls back rather than commit.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法注册一个回调例程，该例程在 SQLite 尝试提交对数据库的更改之前调用。如果回调抛出异常或返回非零结果，则事务回滚而不是提交。
- en: The "rollback_hook" method
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"rollback_hook" 方法'
- en: This method registers a callback routine that is invoked just before SQLite
    tries to do a rollback. The script argument is run without change.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法注册一个回调例程，该例程在 SQLite 尝试执行回滚之前调用。脚本参数不会改变。
- en: The "status" method
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"status" 方法'
- en: This method returns status information from the most recently evaluated SQL
    statement. The status method takes a single argument which should be either "steps"
    or "sorts". If the argument is "steps", then the method returns the number of
    full table scan steps that the previous SQL statement evaluated. If the argument
    is "sorts", the method returns the number of sort operations. This information
    can be used to detect queries that are not using indices to speed search or sorting.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回最近评估的 SQL 语句的状态信息。状态方法接受一个参数，应为"steps"或"sorts"之一。如果参数为"steps"，则该方法返回前一个
    SQL 语句评估的全表扫描步骤数。如果参数为"sorts"，则该方法返回排序操作的数量。此信息可用于检测未使用索引以加快搜索或排序的查询。
- en: The status method is basically a wrapper on the [sqlite3_stmt_status()](c3ref/stmt_status.html)
    C-language interface.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 状态方法基本上是 [sqlite3_stmt_status()](c3ref/stmt_status.html) C 语言接口的包装器。
- en: The "update_hook" method
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"update_hook" 方法'
- en: 'This method registers a callback routine that is invoked just after each row
    is modified by an UPDATE, INSERT, or DELETE statement. Four arguments are appended
    to the callback before it is invoked:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法注册一个回调例程，该例程在每次通过 UPDATE、INSERT 或 DELETE 语句修改每行后立即调用。在调用回调之前，会附加四个参数：
- en: The keyword "INSERT", "UPDATE", or "DELETE", as appropriate
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"INSERT"、"UPDATE" 或 "DELETE" 等关键字，视情况而定'
- en: The name of the database which is being changed
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在更改的数据库的名称
- en: The table that is being changed
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在更改的表
- en: The rowid of the row in the table being changed
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在更改的表中行的 rowid
- en: The callback must not do anything that will modify the database connection that
    invoked the update hook such as running queries.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 回调不能执行任何会修改调用更新钩子的数据库连接的操作，如运行查询。
- en: The "preupdate" method
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"preupdate" 方法'
- en: This method either registers a callback routine that is invoked just before
    each row is modified by an UPDATE, INSERT, or DELETE statement, or may perform
    certain operations related to the impending update.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法要么注册一个回调例程，该例程在每次通过 UPDATE、INSERT 或 DELETE 语句修改每行前调用，要么执行与即将进行的更新相关的某些操作。
- en: 'To register or remove a preupdate callback, use this syntax:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册或移除预更新回调，请使用以下语法：
- en: '*dbcmd*  **preupdate  hook**  *?SCRIPT?*'
  id: totrans-273
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **preupdate  hook**  *?SCRIPT?*'
- en: 'When a preupdate callback is registered, then prior to each row modification,
    the callback is run with these arguments:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 注册预更新回调时，每次行修改之前，会使用以下参数运行回调：
- en: The keyword "INSERT", "UPDATE", or "DELETE", as appropriate
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"INSERT"、"UPDATE" 或 "DELETE" 等关键字，视情况而定'
- en: The name of the database which is being changed
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在更改的数据库的名称
- en: The table that is being changed
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在更改的表
- en: The original rowid of the row in the table being changed
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在更改的表中行的原始 rowid
- en: The new rowid (if any) of the row in the table being changed
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正在更改的表中行的新 rowid（如果有）
- en: The callback must not do anything that will modify the database connection that
    invoked the preupdate hook such as running queries.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 回调不能执行任何会修改调用预更新钩子的数据库连接的操作，如运行查询。
- en: 'When the callback is executing, and only then, these preupdate operations may
    be performed by use of the indicated syntax:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 当回调正在执行时，并且仅在这时，可以通过使用指定的语法执行这些预更新操作：
- en: '*dbcmd*  **preupdate  count**'
  id: totrans-282
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **preupdate  count**'
- en: '*dbcmd*  **preupdate  depth**'
  id: totrans-283
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **preupdate  depth**'
- en: '*dbcmd*  **preupdate  new**  *INDEX*'
  id: totrans-284
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **preupdate  new**  *INDEX*'
- en: '*dbcmd*  **preupdate  old**  *INDEX*'
  id: totrans-285
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **preupdate  old**  *INDEX*'
- en: The **count** submethod returns the number of columns in the row that is being
    inserted, updated, or deleted.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**count** 子方法返回正在插入、更新或删除的行中的列数。'
- en: The **depth** submethod returns the update nesting depth. This will be 0 for
    a direct insert, update, or delete operation; 1 for inserts, updates, or deletes
    invoked by top-level triggers; or higher values for changes resulting from trigger-invoked
    triggers.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**depth** 子方法返回更新嵌套深度。对于直接的插入、更新或删除操作，深度为0；对于由顶层触发器调用的插入、更新或删除，深度为1；或者对于由触发器调用的触发器引起的更改，深度更高。'
- en: The **old** and **new** submethods return the selected original or changed column
    value respectively of the row being updated.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**old** 和 **new** 子方法分别返回正在更新的行的原始或更改后的列值。'
- en: Note that the Tcl interface (and underlying SQLite library) must have been built
    with the preprocessor symbol SQLITE_ENABLE_PREUPDATE_HOOK defined for the **preupdate**
    method to be available.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Tcl接口（和底层的SQLite库）必须使用预处理器符号SQLITE_ENABLE_PREUPDATE_HOOK定义才能使用**preupdate**方法。
- en: The "wal_hook" method
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"wal_hook" 方法'
- en: 'This method registers a callback routine that is invoked after transaction
    commit when the database is in [WAL mode](wal.html). Two arguments are appended
    to the callback command before it is invoked:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法注册一个回调例程，该例程在数据库处于[WAL模式](wal.html)时在事务提交后调用。在调用前，将向回调命令附加两个参数：
- en: The name of the database on which the transaction was committed
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交事务的数据库的名称
- en: The number of entries in the write-ahead log (WAL) file for that database
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该数据库的写入前日志（WAL）文件中的条目数
- en: This method might decide to run a [checkpoint](wal.html#ckpt) either itself
    or as a subsequent idle callback. Note that SQLite only allows a single WAL hook.
    By default this single WAL hook is used for the auto-checkpointing. If you set
    up an explicit WAL hook, then that one WAL hook must ensure that checkpoints are
    occurring since the auto-checkpointing mechanism will be disabled.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可以决定是否运行一个[checkpoint](wal.html#ckpt)，可以是自身或后续的空闲回调。请注意，SQLite仅允许一个WAL挂钩。默认情况下，此单个WAL挂钩用于自动检查点。如果设置了显式WAL挂钩，则该WAL挂钩必须确保发生检查点，因为自动检查点机制将被禁用。
- en: This method should return an integer value that is equivalent to an SQLite error
    code (usually 0 for SQLITE_OK in the case of success or 1 for SQLITE_ERROR if
    some error occurs). As in [sqlite3_wal_hook()](c3ref/wal_hook.html), the results
    of returning an integer that does not correspond to an SQLite error code are undefined.
    If the value returned by the script cannot be interpreted as an integer value,
    or if the script throws a Tcl exception, no error is returned to SQLite but a
    Tcl background-error is raised.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法应返回一个整数值，该值等效于SQLite错误代码（成功情况下通常为SQLITE_OK的0或者如果发生某些错误则为SQLITE_ERROR的1）。如同[sqlite3_wal_hook()](c3ref/wal_hook.html)，如果脚本返回的值无法解释为整数值，或者脚本引发Tcl异常，则SQLite不返回错误，但会引发Tcl后台错误。
- en: The "incrblob" method
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"incrblob" 方法'
- en: 'This method opens a TCL channel that can be used to read or write into a preexisting
    BLOB in the database. The syntax is like this:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法打开一个TCL通道，可用于读取或写入数据库中预先存在的BLOB。语法如下：
- en: '*dbcmd*  **incrblob**  **?-readonly?**   *?DB?  TABLE  COLUMN  ROWID*'
  id: totrans-298
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **incrblob**  **?-readonly?**   *?DB?  TABLE  COLUMN  ROWID*'
- en: The command returns a new TCL channel for reading or writing to the BLOB. The
    channel is opened using the underlying [sqlite3_blob_open()](c3ref/blob_open.html)
    C-language interface. Close the channel using the **close** command of TCL.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令返回一个新的TCL通道，用于读取或写入BLOB。使用TCL的**close**命令关闭通道。
- en: The "errorcode" method
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"errorcode" 方法'
- en: This method returns the numeric error code that resulted from the most recent
    SQLite operation.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回由最近的SQLite操作产生的数值错误代码。
- en: The "trace" method
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"trace" 方法'
- en: The "trace" method registers a callback that is invoked as each SQL statement
    is compiled. The text of the SQL is appended as a single string to the command
    before it is invoked. This can be used (for example) to keep a log of all SQL
    operations that an application performs.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '"trace" 方法注册一个回调，该回调在编译每个SQL语句时调用。SQL的文本作为一个字符串附加到调用前的命令。可以使用此功能（例如）来记录应用程序执行的所有SQL操作。'
- en: The "trace_v2" method
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"trace_v2" 方法'
- en: 'The "trace_v2" method registers a callback that is invoked as each SQL statement
    is compiled. The syntax is as follows:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '"trace_v2" 方法注册一个回调，该回调在编译每个SQL语句时调用。语法如下：'
- en: '*dbcmd*  **trace_v2**  ?*callback*?  ?*mask*?'
  id: totrans-306
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **trace_v2**  ?*callback*?  ?*mask*?'
- en: 'This command causes the "callback" script to be invoked whenever certain conditions
    occurs. The conditions are determined by the *mask* argument, which should be
    a TCL-list of zero or more of the following keywords:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令导致在发生特定条件时调用"callback"脚本。条件由*mask*参数确定，*mask*应为零个或多个以下关键字的TCL列表：
- en: '**statement**'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**statement**'
- en: '**profile**'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**profile**'
- en: '**row**'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**row**'
- en: '**close**'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**close**'
- en: Traces for **statement** invoke the callback with two arguments whenever a new
    SQL statement is run. The first argument is an integer which is the value of the
    pointer to the underlying [sqlite3_stmt](c3ref/stmt.html) object. This integer
    can be used to correlate SQL statement text with the result of a **profile** or
    **row** callback. The second argument is the unexpanded text of the SQL statement
    being run. By "unexpanded", we mean that variable substitutions in the text are
    not expanded into the variable values. This is different from the behavior of
    the "trace" method which does expand variable substitutions.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '**statement**跟踪会在运行新的SQL语句时调用回调函数，带有两个参数。第一个参数是一个整数，表示指向底层[sqlite3_stmt](c3ref/stmt.html)对象的指针值。此整数可用于将SQL语句文本与**profile**或**row**回调的结果关联起来。第二个参数是SQL语句运行时的未展开文本。所谓未展开是指文本中的变量替换未展开成变量值。这与"trace"方法的行为不同，后者会展开变量替换。'
- en: Traces for **profile** invoke the callback with two arguments as each SQL statement
    finishes. The first argument is an integer which is the value of the underlying
    [sqlite3_stmt](c3ref/stmt.html) object. The second argument is the approximate
    run-time for the statement in nanoseconds. The run-time is the best estimate available
    depending on the capabilities of the platform on which the application is running.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '**profile**跟踪会在每个SQL语句完成时调用带有两个参数的回调函数。第一个参数是底层[sqlite3_stmt](c3ref/stmt.html)对象的值。第二个参数是语句的大致运行时间（以纳秒为单位）。运行时间是根据应用程序运行平台的能力提供的最佳估计。'
- en: Traces for **row** invoke the callback with a single argument whenever a new
    result row is available from an SQL statement. The argument is an integer which
    is the value of the underlying [sqlite3_stmt](c3ref/stmt.html) object pointer.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**row**跟踪会在每次从SQL语句中获取新结果行时调用回调函数，带有一个参数。该参数是底层[sqlite3_stmt](c3ref/stmt.html)对象指针的值。'
- en: Traces for **close** invoke the callback with a single argument as the database
    connection is closing. The argument is an integer which is the value of a pointer
    to the underlying [sqlite3](c3ref/sqlite3.html) object that is closing.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭时的**close**跟踪会调用带有一个参数的回调函数，因为数据库连接正在关闭。该参数是一个整数，表示正在关闭的底层[sqlite3](c3ref/sqlite3.html)对象的指针值。
- en: There can only be a single trace callback registered on a database connection.
    Each use of "trace" or "trace_v2" cancels all prior trace callback.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 只能在数据库连接上注册一个单一的跟踪回调。每次使用"trace"或"trace_v2"都会取消先前的所有跟踪回调。
- en: The "backup" method
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"backup"方法'
- en: 'The "backup" method makes a backup copy of a live database. The command syntax
    is like this:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '"backup"方法创建一个活动数据库的备份副本。命令语法如下：'
- en: '*dbcmd*  **backup**  ?*source-database*?  *backup-filename*'
  id: totrans-319
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **backup**  ?*source-database*?  *backup-filename*'
- en: The optional *source-database* argument tells which database in the current
    connection should be backed up. The default value is **main** (or, in other words,
    the primary database file). To back up TEMP tables use **temp**. To backup an
    auxiliary database added to the connection using the [ATTACH](lang_attach.html)
    command, use the name of that database as it was assigned in the [ATTACH](lang_attach.html)
    command.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的*source-database*参数指定应备份当前连接中的哪个数据库。默认值为**main**（或者说是主数据库文件）。要备份TEMP表，请使用**temp**。要备份通过[ATTACH](lang_attach.html)命令添加到连接中的辅助数据库，请使用在[ATTACH](lang_attach.html)命令中分配的数据库名称。
- en: The *backup-filename* is the name of a file into which the backup is written.
    *Backup-filename* does not have to exist ahead of time, but if it does, it must
    be a well-formed SQLite database.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '*backup-filename*是备份写入的文件名。*Backup-filename*不需要事先存在，但如果存在，必须是一个格式良好的SQLite数据库。'
- en: The "restore" method
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"restore"方法'
- en: 'The "restore" method copies the content from a separate database file into
    the current database connection, overwriting any preexisting content. The command
    syntax is like this:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '"restore"方法将内容从单独的数据库文件复制到当前数据库连接中，覆盖任何现有内容。命令语法如下：'
- en: '*dbcmd*  **restore**  ?*target-database*?  *source-filename*'
  id: totrans-324
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **restore**  ?*target-database*?  *source-filename*'
- en: The optional *target-database* argument tells which database in the current
    connection should be overwritten with new content. The default value is **main**
    (or, in other words, the primary database file). To repopulate the TEMP tables
    use **temp**. To overwrite an auxiliary database added to the connection using
    the [ATTACH](lang_attach.html) command, use the name of that database as it was
    assigned in the [ATTACH](lang_attach.html) command.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的 *target-database* 参数告知当前连接中应该使用新内容覆盖的数据库。默认值是 **main**（或者说，主数据库文件）。要重新填充
    TEMP 表，请使用 **temp**。要覆盖使用 [ATTACH](lang_attach.html) 命令添加到连接中的辅助数据库，请使用该命令中分配的数据库名称。
- en: The *source-filename* is the name of an existing well-formed SQLite database
    file from which the content is extracted.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '*source-filename* 是现有的格式良好的 SQLite 数据库文件的名称，从中提取内容。'
- en: The "serialize" method
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"serialize" 方法'
- en: 'The "serialize" method creates a BLOB which is a complete copy of an underlying
    database. The syntax is like this:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '"serialize" 方法创建一个 BLOB，它是底层数据库的完整副本。语法如下：'
- en: '*dbcmd*  **serialize**  ?*database*?'
  id: totrans-329
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **serialize**  ?*database*?'
- en: The optional argument is the name of the schema or database to be serialized.
    The default value is "main".
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 可选参数是要序列化的模式或数据库的名称。默认值是 "main"。
- en: This routine returns a TCL byte-array that is the complete content of the identified
    database. This byte-array can be written into a file and then used as an ordinary
    SQLite database, or it can be sent over a TCP/IP connection to some other application,
    or passed to the "deserialize" method of another database connection.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 此例程返回一个 TCL 字节数组，该数组是指定数据库的完整内容。此字节数组可写入文件，然后像普通的 SQLite 数据库一样使用，或者可通过 TCP/IP
    连接发送给其他应用程序，或传递给另一个数据库连接的 "deserialize" 方法。
- en: This method only functions if SQLite is compiled with -DSQLITE_ENABLE_DESERIALIZE
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅在 SQLite 编译时使用 -DSQLITE_ENABLE_DESERIALIZE 时有效
- en: The "deserialize" method
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"deserialize" 方法'
- en: 'The "deserialize" method takes a TCL byte-array that contains an SQLite database
    file and adds it to the database connection. The syntax is:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '"deserialize" 方法接受一个包含 SQLite 数据库文件的 TCL 字节数组，并将其添加到数据库连接中。语法如下：'
- en: '*dbcmd*  **deserialize**  ?*database*?  *value*'
  id: totrans-335
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **deserialize**  ?*database*?  *value*'
- en: The option *database* argument identifies which attached database should receive
    the deserialization. The default is "main".
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的 *database* 参数标识应该接收反序列化的附加数据库。默认值为 "main"。
- en: This command causes SQLite to disconnect from the previous database and reattach
    to an in-memory database with the content in *value*. If *value* is not a byte-array
    containing a well-defined SQLite database, then subsequent commands will likely
    return [SQLITE_CORRUPT](rescode.html#corrupt) errors.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令导致 SQLite 断开与先前数据库的连接，并重新连接到一个内存数据库，其内容为 *value*。如果 *value* 不是包含良好定义的 SQLite
    数据库的字节数组，则后续命令可能会返回 [SQLITE_CORRUPT](rescode.html#corrupt) 错误。
- en: This method only functions if SQLite is compiled with -DSQLITE_ENABLE_DESERIALIZE
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅在 SQLite 编译时使用 -DSQLITE_ENABLE_DESERIALIZE 时有效
- en: The "interrupt" method
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"interrupt" 方法'
- en: The "interrupt" method invokes the [sqlite3_interrupt()](c3ref/interrupt.html)
    interface, causing any pending queries to halt.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '"interrupt" 方法调用 [sqlite3_interrupt()](c3ref/interrupt.html) 接口，导致任何待处理的查询中止。'
- en: The "version" method
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"version" 方法'
- en: Return the current library version. For example, "3.23.0".
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前库的版本。例如，"3.23.0"。
- en: The "profile" method
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"profile" 方法'
- en: 'This method is used to profile the execution of SQL statements run by the application.
    The syntax is as follows:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于分析应用程序运行的 SQL 语句的执行情况。语法如下：
- en: '*dbcmd*  **profile**  ?*script*?'
  id: totrans-345
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*dbcmd*  **profile**  ?*script*?'
- en: 'Unless *script* is an empty string, this method arranges for the *script* to
    be evaluated after the execution of each SQL statement. Two arguments are appended
    to *script* before it is invoked: the text of the SQL statement executed and the
    time elapsed while executing the statement, in nanoseconds.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 除非 *script* 是空字符串，否则此方法会安排在每个 SQL 语句执行后评估 *script*。在调用之前会附加两个参数到 *script*：执行的
    SQL 语句的文本和执行该语句所用的时间（以纳秒计）。
- en: A database handle may only have a single profile script registered at any time.
    If there is already a script registered when the profile method is invoked, the
    previous profile script is replaced by the new one. If the *script* argument is
    an empty string, any previously registered profile callback is canceled but no
    new profile script is registered.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库句柄一次只能注册一个配置文件脚本。如果在调用配置文件方法时已经注册了脚本，则先前的配置文件脚本将被新的脚本替换。如果 *script* 参数是空字符串，则取消任何先前注册的配置文件回调，但不注册新的配置文件脚本。
- en: The "unlock_notify" method
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"unlock_notify" 方法'
- en: The unlock_notify method is used access the [sqlite3_unlock_notify()](c3ref/unlock_notify.html)
    interface to the SQLite core library for testing purposes. The use of this method
    by applications is discouraged.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`unlock_notify` 方法用于访问 [sqlite3_unlock_notify()](c3ref/unlock_notify.html)
    接口，用于 SQLite 核心库的测试目的。不建议应用程序使用此方法。'
