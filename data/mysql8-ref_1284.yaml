- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-txn.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-txn.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-txn.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-txn.html)
- en: 17.20.6.4 Controlling Transactional Behavior of the InnoDB memcached Plugin
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 17.20.6.4 控制InnoDB memcached插件的事务行为
- en: Unlike traditional **memcached**, the `daemon_memcached` plugin allows you to
    control durability of data values produced through calls to `add`, `set`, `incr`,
    and so on. By default, data written through the **memcached** interface is stored
    to disk, and calls to `get` return the most recent value from disk. Although the
    default behavior does not offer the best possible raw performance, it is still
    fast compared to the SQL interface for `InnoDB` tables.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的**memcached**不同，`daemon_memcached`插件允许您控制通过`add`、`set`、`incr`等调用生成的数据值的耐久性。默认情况下，通过**memcached**接口写入的数据会存储到磁盘，并且调用`get`会从磁盘返回最新的值。尽管默认行为并不提供最佳的原始性能，但与`InnoDB`表的SQL接口相比，仍然快速。
- en: As you gain experience using the `daemon_memcached` plugin, you can consider
    relaxing durability settings for non-critical classes of data, at the risk of
    losing some updated values in the event of an outage, or returning data that is
    slightly out-of-date.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您使用`daemon_memcached`插件的经验增加，您可以考虑放宽非关键数据类的耐久性设置，以便在发生故障时可能会丢失一些更新的值，或者返回略有过时的数据。
- en: Frequency of Commits
  id: totrans-4
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 提交频率
- en: One tradeoff between durability and raw performance is how frequently new and
    changed data is [committed](glossary.html#glos_commit "commit"). If data is critical,
    is should be committed immediately so that it is safe in case of an unexpected
    exit or outage. If data is less critical, such as counters that are reset after
    an unexpected exit or logging data that you can afford to lose, you might prefer
    higher raw throughput that is available with less frequent commits.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 耐久性和原始性能之间的一个权衡是新数据和更改数据的提交频率。如果数据很关键，应立即提交，以便在意外退出或故障时安全。如果数据不那么关键，例如在意外退出后重置的计数器或您可以承受丢失的日志数据，您可能更喜欢更少的提交频率可用的更高原始吞吐量。
- en: When a **memcached** operation inserts, updates, or deletes data in the underlying
    `InnoDB` table, the change might be committed to the `InnoDB` table instantly
    (if [`daemon_memcached_w_batch_size=1`](innodb-parameters.html#sysvar_daemon_memcached_w_batch_size))
    or some time later (if the [`daemon_memcached_w_batch_size`](innodb-parameters.html#sysvar_daemon_memcached_w_batch_size)
    value is greater than 1). In either case, the change cannot be rolled back. If
    you increase the value of [`daemon_memcached_w_batch_size`](innodb-parameters.html#sysvar_daemon_memcached_w_batch_size)
    to avoid high I/O overhead during busy times, commits could become infrequent
    when the workload decreases. As a safety measure, a background thread automatically
    commits changes made through the **memcached** API at regular intervals. The interval
    is controlled by the [`innodb_api_bk_commit_interval`](innodb-parameters.html#sysvar_innodb_api_bk_commit_interval)
    configuration option, which has a default setting of `5` seconds.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当**memcached**操作在底层`InnoDB`表中插入、更新或删除数据时，如果[`daemon_memcached_w_batch_size=1`](innodb-parameters.html#sysvar_daemon_memcached_w_batch_size)，更改可能会立即提交到`InnoDB`表中，或者稍后一段时间（如果[`daemon_memcached_w_batch_size`](innodb-parameters.html#sysvar_daemon_memcached_w_batch_size)的值大于1）。在任何情况下，更改都无法回滚。如果您增加[`daemon_memcached_w_batch_size`](innodb-parameters.html#sysvar_daemon_memcached_w_batch_size)的值以避免在繁忙时期产生高I/O开销，当工作负载减少时，提交可能变得不频繁。作为一项安全措施，后台线程会定期自动提交通过**memcached**
    API进行的更改。这个间隔由[`innodb_api_bk_commit_interval`](innodb-parameters.html#sysvar_innodb_api_bk_commit_interval)配置选项控制，默认设置为`5`秒。
- en: When a **memcached** operation inserts or updates data in the underlying `InnoDB`
    table, the changed data is immediately visible to other **memcached** requests
    because the new value remains in the memory cache, even if it is not yet committed
    on the MySQL side.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当**memcached**操作在底层`InnoDB`表中插入或更新数据时，由于新值仍然保留在内存缓存中，即使尚未在MySQL端提交，其他**memcached**请求立即可以看到更改的数据。
- en: Transaction Isolation
  id: totrans-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 事务隔离
- en: When a **memcached** operation such as `get` or `incr` causes a query or DML
    operation on the underlying `InnoDB` table, you can control whether the operation
    sees the very latest data written to the table, only data that has been committed,
    or other variations of transaction [isolation level](glossary.html#glos_isolation_level
    "isolation level"). Use the [`innodb_api_trx_level`](innodb-parameters.html#sysvar_innodb_api_trx_level)
    configuration option to control this feature. The numeric values specified for
    this option correspond to isolation levels such as [`REPEATABLE READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read).
    See the description of the [`innodb_api_trx_level`](innodb-parameters.html#sysvar_innodb_api_trx_level)
    option for information about other settings.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当 memcached 操作（如 `get` 或 `incr`）导致基础 `InnoDB` 表上的查询或 DML 操作时，您可以控制操作是否看到表中最新写入的数据，仅看到已提交的数据，或事务[隔离级别](glossary.html#glos_isolation_level
    "isolation level")的其他变化。使用 [`innodb_api_trx_level`](innodb-parameters.html#sysvar_innodb_api_trx_level)
    配置选项来控制此功能。此选项指定的数字值对应于隔离级别，如 [`REPEATABLE READ`](innodb-transaction-isolation-levels.html#isolevel_repeatable-read)。有关其他设置的信息，请参阅
    [`innodb_api_trx_level`](innodb-parameters.html#sysvar_innodb_api_trx_level) 选项的描述。
- en: A strict isolation level ensures that data you retrieve is not rolled back or
    changed suddenly causing subsequent queries to return different values. However,
    strict isolation levels require greater [locking](glossary.html#glos_locking "locking")
    overhead, which can cause waits. For a NoSQL-style application that does not use
    long-running transactions, you can typically use the default isolation level or
    switch to a less strict isolation level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 严格的隔离级别确保您检索的数据不会被回滚或突然更改，导致后续查询返回不同的值。然而，严格的隔离级别需要更大的[锁定](glossary.html#glos_locking
    "locking")开销，可能会导致等待。对于不使用长时间事务的 NoSQL 风格应用程序，通常可以使用默认隔离级别或切换到较不严格的隔禅级别。
- en: Disabling Row Locks for memcached DML Operations
  id: totrans-11
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 禁用 memcached 的 DML 操作的行锁。
- en: The [`innodb_api_disable_rowlock`](innodb-parameters.html#sysvar_innodb_api_disable_rowlock)
    option can be used to disable row locks when **memcached** requests through the
    `daemon_memcached` plugin cause DML operations. By default, `innodb_api_disable_rowlock`
    is set to `OFF` which means that **memcached** requests row locks for `get` and
    `set` operations. When `innodb_api_disable_rowlock` is set to `ON`, **memcached**
    requests a table lock instead of row locks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当 **memcached** 请求通过 `daemon_memcached` 插件导致对 `InnoDB` 表的查询或 DML 操作时，可以使用 [`innodb_api_disable_rowlock`](innodb-parameters.html#sysvar_innodb_api_disable_rowlock)
    选项来禁用行锁。默认情况下，`innodb_api_disable_rowlock` 设置为 `OFF`，这意味着 **memcached** 请求行锁用于
    `get` 和 `set` 操作。当 `innodb_api_disable_rowlock` 设置为 `ON` 时，**memcached** 请求表锁而不是行锁。
- en: The `innodb_api_disable_rowlock` option is not dynamic. It must be specified
    at startup on the [**mysqld**](mysqld.html "6.3.1 mysqld — The MySQL Server")
    command line or entered in a MySQL configuration file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`innodb_api_disable_rowlock` 选项不是动态的。必须在启动时在 [**mysqld**](mysqld.html "6.3.1 mysqld
    — The MySQL Server") 命令行上指定，或在 MySQL 配置文件中输入。'
- en: Allowing or Disallowing DDL
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 允许或禁止 DDL。
- en: By default, you can perform [DDL](glossary.html#glos_ddl "DDL") operations such
    as [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") on tables
    used by the `daemon_memcached` plugin. To avoid potential slowdowns when these
    tables are used for high-throughput applications, disable DDL operations on these
    tables by enabling [`innodb_api_enable_mdl`](innodb-parameters.html#sysvar_innodb_api_enable_mdl)
    at startup. This option is less appropriate when accessing the same tables through
    both **memcached** and SQL, because it blocks [`CREATE INDEX`](create-index.html
    "15.1.15 CREATE INDEX Statement") statements on the tables, which could be important
    for running reporting queries.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，可以在 `daemon_memcached` 插件使用的表上执行[DDL](glossary.html#glos_ddl "DDL") 操作，如
    [`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement")。为避免这些表用于高吞吐量应用程序时潜在的减速，启用
    [`innodb_api_enable_mdl`](innodb-parameters.html#sysvar_innodb_api_enable_mdl)
    来禁用这些表上的 DDL 操作。当通过 **memcached** 和 SQL 访问相同的表时，此选项不太合适，因为它会阻止对表进行 [`CREATE INDEX`](create-index.html
    "15.1.15 CREATE INDEX Statement") 语句的操作，这对运行报表查询可能很重要。
- en: Storing Data on Disk, in Memory, or Both
  id: totrans-16
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 将数据存储在磁盘、内存中，或两者兼而有之。
- en: The `innodb_memcache.cache_policies` table specifies whether to store data written
    through the **memcached** interface to disk (`innodb_only`, the default); in memory
    only, as with traditional **memcached** (`cache_only`); or both (`caching`).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`innodb_memcache.cache_policies` 表指定是否将通过 **memcached** 接口写入的数据存储到磁盘（`innodb_only`，默认）；仅存��在内存中，如传统的
    **memcached**（`cache_only`）；或两者兼而有之（`caching`）。'
- en: With the `caching` setting, if **memcached** cannot find a key in memory, it
    searches for the value in an `InnoDB` table. Values returned from `get` calls
    under the `caching` setting could be out-of-date if the values were updated on
    disk in the `InnoDB` table but are not yet expired from the memory cache.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`caching`设置，如果**memcached**在内存中找不到一个键，它会在`InnoDB`表中搜索该值。在`caching`设置下返回的`get`调用的值可能已经过时，如果这些值在`InnoDB`表中更新但尚未从内存缓存中过期。
- en: The caching policy can be set independently for `get`, `set` (including `incr`
    and `decr`), `delete`, and `flush` operations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存策略可以独立设置为`get`、`set`（包括`incr`和`decr`）、`delete`和`flush`操作。
- en: For example, you might allow `get` and `set` operations to query or update a
    table and the **memcached** memory cache at the same time (using the `caching`
    setting), while making `delete`, `flush`, or both operate only on the in-memory
    copy (using the `cache_only` setting). That way, deleting or flushing an item
    only expires the item from the cache, and the latest value is returned from the
    `InnoDB` table the next time the item is requested.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以允许`get`和`set`操作同时查询或更新表和**memcached**内存缓存（使用`caching`设置），同时使`delete`、`flush`或两者仅在内存副本上操作（使用`cache_only`设置）。这样，删除或刷新项目仅会使项目从缓存中过期，并且下次请求项目时将从`InnoDB`表中返回最新值。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`innodb_memcache.cache_policies` values are only read at startup. After changing
    values in this table, uninstall and reinstall the `daemon_memcached` plugin to
    ensure that changes take effect.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`innodb_memcache.cache_policies`的值只在启动时读取。在更改此表中的值后，卸载并重新安装`daemon_memcached`插件以确保更改生效。'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
