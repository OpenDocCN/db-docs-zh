- en: 13.8 Choosing the Right Type for a Column
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.8 选择适合列的正确类型
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/choosing-types.html](https://dev.mysql.com/doc/refman/8.0/en/choosing-types.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/choosing-types.html](https://dev.mysql.com/doc/refman/8.0/en/choosing-types.html)
- en: For optimum storage, you should try to use the most precise type in all cases.
    For example, if an integer column is used for values in the range from `1` to
    `99999`, `MEDIUMINT UNSIGNED` is the best type. Of the types that represent all
    the required values, this type uses the least amount of storage.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最佳存储，您应该尽量在所有情况下使用最精确的类型。例如，如果整数列用于范围在`1`到`99999`之间的值，`MEDIUMINT UNSIGNED`是最佳类型。在表示所有所需值的类型中，此类型使用的存储空间最少。
- en: All basic calculations (`+`, `-`, `*`, and `/`) with [`DECIMAL`](fixed-point-types.html
    "13.1.3 Fixed-Point Types (Exact Value) - DECIMAL, NUMERIC") columns are done
    with precision of 65 decimal (base 10) digits. See [Section 13.1.1, “Numeric Data
    Type Syntax”](numeric-type-syntax.html "13.1.1 Numeric Data Type Syntax").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所有基本计算（`+`, `-`, `*`, 和 `/`）与[`DECIMAL`](fixed-point-types.html "13.1.3 固定点类型（精确值）
    - DECIMAL, NUMERIC")列都以65位十进制（基数10）数字的精度进行。参见[Section 13.1.1, “Numeric Data Type
    Syntax”](numeric-type-syntax.html "13.1.1 数字数据类型语法")。
- en: If accuracy is not too important or if speed is the highest priority, the [`DOUBLE`](floating-point-types.html
    "13.1.4 Floating-Point Types (Approximate Value) - FLOAT, DOUBLE") type may be
    good enough. For high precision, you can always convert to a fixed-point type
    stored in a [`BIGINT`](integer-types.html "13.1.2 Integer Types (Exact Value)
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT"). This enables you to do
    all calculations with 64-bit integers and then convert results back to floating-point
    values as necessary.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果精度不是太重要，或者速度是最高优先级，[`DOUBLE`](floating-point-types.html "13.1.4 浮点类型（近似值）
    - FLOAT, DOUBLE") 类型可能已经足够好了。对于高精度，您可以随时转换为存储在[`BIGINT`](integer-types.html "13.1.2 整数类型（精确值）
    - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT")中的固定点类型。这使您可以使用64位整数进行所有计算，然后根据需要将结果转换回浮点值。
