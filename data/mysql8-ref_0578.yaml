- en: 10.4.7 Limits on Table Column Count and Row Size
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10.4.7 表列数和行大小的限制
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/column-count-limit.html](https://dev.mysql.com/doc/refman/8.0/en/column-count-limit.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/column-count-limit.html](https://dev.mysql.com/doc/refman/8.0/en/column-count-limit.html)
- en: This section describes limits on the number of columns in tables and the size
    of individual rows.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了表中列数和单个行大小的限制。
- en: '[Column Count Limits](column-count-limit.html#column-count-limits "Column Count
    Limits")'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列数限制](column-count-limit.html#column-count-limits "列数限制")'
- en: '[Row Size Limits](column-count-limit.html#row-size-limits "Row Size Limits")'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[行大小限制](column-count-limit.html#row-size-limits "行大小限制")'
- en: Column Count Limits
  id: totrans-5
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 列数限制
- en: 'MySQL has hard limit of 4096 columns per table, but the effective maximum may
    be less for a given table. The exact column limit depends on several factors:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL每个表的列数有4096列的硬限制，但对于给定表，实际最大值可能会更少。确切的列限制取决于几个因素：
- en: The maximum row size for a table constrains the number (and possibly size) of
    columns because the total length of all columns cannot exceed this size. See [Row
    Size Limits](column-count-limit.html#row-size-limits "Row Size Limits").
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表的最大行大小限制了列的数量（可能也是大小），因为所有列的总长度不能超过这个大小。参见[行大小限制](column-count-limit.html#row-size-limits
    "行大小限制")。
- en: The storage requirements of individual columns constrain the number of columns
    that fit within a given maximum row size. Storage requirements for some data types
    depend on factors such as storage engine, storage format, and character set. See
    [Section 13.7, “Data Type Storage Requirements”](storage-requirements.html "13.7 Data
    Type Storage Requirements").
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个列的存储要求限制了适合于给定最大行大小的列数。某些数据类型的存储要求取决于诸如存储引擎、存储格式和字符集等因素。参见[第13.7节，“数据类型存储要求”](storage-requirements.html
    "13.7 数据类型存储要求")。
- en: Storage engines may impose additional restrictions that limit table column count.
    For example, [`InnoDB`](innodb-storage-engine.html "Chapter 17 The InnoDB Storage
    Engine") has a limit of 1017 columns per table. See [Section 17.22, “InnoDB Limits”](innodb-limits.html
    "17.22 InnoDB Limits"). For information about other storage engines, see [Chapter 18,
    *Alternative Storage Engines*](storage-engines.html "Chapter 18 Alternative Storage
    Engines").
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储引擎可能会施加额外的限制，限制表列数。例如，[`InnoDB`](innodb-storage-engine.html "第17章 InnoDB存储引擎")每个表有1017列的限制。参见[第17.22节，“InnoDB限制”](innodb-limits.html
    "17.22 InnoDB Limits")。有关其他存储引擎的信息，请参见[第18章，“替代存储引擎”](storage-engines.html "第18章 替代存储引擎")。
- en: Functional key parts (see [Section 15.1.15, “CREATE INDEX Statement”](create-index.html
    "15.1.15 CREATE INDEX Statement")) are implemented as hidden virtual generated
    stored columns, so each functional key part in a table index counts against the
    table total column limit.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能键部分（参见[第15.1.15节，“CREATE INDEX语句”](create-index.html "15.1.15 CREATE INDEX
    Statement")）被实现为隐藏的虚拟生成的存储列，因此表索引中的每个功能键部分都计入表总列限制。
- en: Row Size Limits
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 行大小限制
- en: 'The maximum row size for a given table is determined by several factors:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表的最大行大小由几个因素决定：
- en: The internal representation of a MySQL table has a maximum row size limit of
    65,535 bytes, even if the storage engine is capable of supporting larger rows.
    [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") and [`TEXT`](blob.html "13.3.4 The
    BLOB and TEXT Types") columns only contribute 9 to 12 bytes toward the row size
    limit because their contents are stored separately from the rest of the row.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL表的内部表示具有最大行大小限制为65,535字节，即使存储引擎能够支持更大的行。[`BLOB`](blob.html "13.3.4 BLOB和TEXT类型")和[`TEXT`](blob.html
    "13.3.4 BLOB和TEXT类型")列仅对行大小限制贡献9到12字节，因为它们的内容与行的其余部分分开存储。
- en: The maximum row size for an `InnoDB` table, which applies to data stored locally
    within a database page, is slightly less than half a page for 4KB, 8KB, 16KB,
    and 32KB [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    settings. For example, the maximum row size is slightly less than 8KB for the
    default 16KB `InnoDB` page size. For 64KB pages, the maximum row size is slightly
    less than 16KB. See [Section 17.22, “InnoDB Limits”](innodb-limits.html "17.22 InnoDB
    Limits").
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`表的最大行大小，适用于数据库页面内存储的数据，对于4KB、8KB、16KB和32KB的[`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)设置，略小于半页。例如，默认16KB的`InnoDB`页面大小的最大行大小略小于8KB。对于64KB页面，最大行大小略小于16KB。参见[第17.22节，“InnoDB限制”](innodb-limits.html
    "17.22 InnoDB Limits")。'
- en: If a row containing [variable-length columns](glossary.html#glos_variable_length_type
    "variable-length type") exceeds the `InnoDB` maximum row size, `InnoDB` selects
    variable-length columns for external off-page storage until the row fits within
    the `InnoDB` row size limit. The amount of data stored locally for variable-length
    columns that are stored off-page differs by row format. For more information,
    see [Section 17.10, “InnoDB Row Formats”](innodb-row-format.html "17.10 InnoDB
    Row Formats").
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果包含[变长列](glossary.html#glos_variable_length_type "variable-length type")的行超过`InnoDB`的最大行大小，`InnoDB`会选择将变长列存储在外部页外存储，直到行符合`InnoDB`行大小限制。存储在本地的变长列数据量因行格式而异。有关更多信息，请参见[第17.10节，“InnoDB行格式”](innodb-row-format.html
    "17.10 InnoDB Row Formats")。
- en: Different storage formats use different amounts of page header and trailer data,
    which affects the amount of storage available for rows.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的存储格式使用不同数量的页头和页尾数据，这会影响可用于行的存储量。
- en: For information about `InnoDB` row formats, see [Section 17.10, “InnoDB Row
    Formats”](innodb-row-format.html "17.10 InnoDB Row Formats").
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`InnoDB`行格式的信息，请参见[第17.10节，“InnoDB行格式”](innodb-row-format.html "17.10 InnoDB
    Row Formats")。
- en: For information about `MyISAM` storage formats, see [Section 18.2.3, “MyISAM
    Table Storage Formats”](myisam-table-formats.html "18.2.3 MyISAM Table Storage
    Formats").
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`MyISAM`存储格式的信息，请参见[第18.2.3节，“MyISAM表存储格式”](myisam-table-formats.html "18.2.3 MyISAM
    Table Storage Formats")。
- en: Row Size Limit Examples
  id: totrans-19
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 行大小限制示例
- en: The MySQL maximum row size limit of 65,535 bytes is demonstrated in the following
    `InnoDB` and `MyISAM` examples. The limit is enforced regardless of storage engine,
    even though the storage engine may be capable of supporting larger rows.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL的最大行大小限制为65,535字节，以下示例演示了`InnoDB`和`MyISAM`的情况。该限制是强制执行的，无论存储引擎如何，即使存储引擎可能支持更大的行。
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the following `MyISAM` example, changing a column to [`TEXT`](blob.html "13.3.4 The
    BLOB and TEXT Types") avoids the 65,535-byte row size limit and permits the operation
    to succeed because [`BLOB`](blob.html "13.3.4 The BLOB and TEXT Types") and [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") columns only contribute 9 to 12 bytes toward
    the row size.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下`MyISAM`示例中，将列更改为[`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")可以避免65,535字节的行大小限制，并且允许操作成功，因为[`BLOB`](blob.html
    "13.3.4 The BLOB and TEXT Types")和[`TEXT`](blob.html "13.3.4 The BLOB and TEXT
    Types")列只对行大小贡献了9到12字节。
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The operation succeeds for an `InnoDB` table because changing a column to [`TEXT`](blob.html
    "13.3.4 The BLOB and TEXT Types") avoids the MySQL 65,535-byte row size limit,
    and `InnoDB` off-page storage of variable-length columns avoids the `InnoDB` row
    size limit.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`InnoDB`表，将列更改为[`TEXT`](blob.html "13.3.4 The BLOB and TEXT Types")可以避免MySQL的65,535字节行大小限制，并且`InnoDB`的变长列页外存储避免了`InnoDB`行大小限制。
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Storage for variable-length columns includes length bytes, which are counted
    toward the row size. For example, a [`VARCHAR(255) CHARACTER SET utf8mb3`](char.html
    "13.3.2 The CHAR and VARCHAR Types") column takes two bytes to store the length
    of the value, so each value can take up to 767 bytes.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变长列的存储包括长度字节，这些字节计入行大小。例如，[`VARCHAR(255) CHARACTER SET utf8mb3`](char.html "13.3.2 The
    CHAR and VARCHAR Types")列需要两个字节来存储值的长度，因此每个值最多可以占用767字节。
- en: 'The statement to create table `t1` succeeds because the columns require 32,765
    + 2 bytes and 32,766 + 2 bytes, which falls within the maximum row size of 65,535
    bytes:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建表`t1`的语句成功，因为列需要32,765 + 2字节和32,766 + 2字节，这在最大行大小为65,535字节的范围内：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The statement to create table `t2` fails because, although the column length
    is within the maximum length of 65,535 bytes, two additional bytes are required
    to record the length, which causes the row size to exceed 65,535 bytes:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建表`t2`的语句失败，因为虽然列长度在65,535字节的最大长度范围内，但需要额外的两个字节来记录长度，这导致行大小超过65,535字节：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Reducing the column length to 65,533 or less permits the statement to succeed.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将列长度减少到65,533或更少可以使语句成功。
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For [`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine")
    tables, `NULL` columns require additional space in the row to record whether their
    values are `NULL`. Each `NULL` column takes one bit extra, rounded up to the nearest
    byte.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于[`MyISAM`](myisam-storage-engine.html "18.2 The MyISAM Storage Engine")表，`NULL`列需要额外的空间来记录它们的值是否为`NULL`。每个`NULL`列需要额外的一位，向上取整到最近的字节。
- en: 'The statement to create table `t3` fails because [`MyISAM`](myisam-storage-engine.html
    "18.2 The MyISAM Storage Engine") requires space for `NULL` columns in addition
    to the space required for variable-length column length bytes, causing the row
    size to exceed 65,535 bytes:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建表`t3`的语句失败，因为[`MyISAM`](myisam-storage-engine.html "第18.2节 MyISAM存储引擎")除了需要变长列长度字节所需的空间外，还需要为`NULL`列留出空间，导致行大小超过65,535字节：
- en: '[PRE7]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For information about [`InnoDB`](innodb-storage-engine.html "Chapter 17 The
    InnoDB Storage Engine") `NULL` column storage, see [Section 17.10, “InnoDB Row
    Formats”](innodb-row-format.html "17.10 InnoDB Row Formats").
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关[`InnoDB`](innodb-storage-engine.html "第17章 InnoDB存储引擎") `NULL`列存储的信息，请参阅[第17.10节“InnoDB行格式”](innodb-row-format.html
    "17.10 InnoDB行格式")。
- en: '`InnoDB` restricts row size (for data stored locally within the database page)
    to slightly less than half a database page for 4KB, 8KB, 16KB, and 32KB [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)
    settings, and to slightly less than 16KB for 64KB pages.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InnoDB`限制行大小（在数据库页面内本地存储的数据）略小于4KB、8KB、16KB和32KB [`innodb_page_size`](innodb-parameters.html#sysvar_innodb_page_size)设置的一半数据库页面大小，并且略小于64KB页面的16KB。'
- en: The statement to create table `t4` fails because the defined columns exceed
    the row size limit for a 16KB `InnoDB` page.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建表`t4`的语句失败，因为定义的列超过了16KB `InnoDB`页面的行大小限制。
- en: '[PRE8]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
