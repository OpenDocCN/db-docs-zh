- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html](https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html](https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html)
- en: 15.2.15.6 Subqueries with EXISTS or NOT EXISTS
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.2.15.6 带有 EXISTS 或 NOT EXISTS 的子查询
- en: 'If a subquery returns any rows at all, `EXISTS *`subquery`*` is `TRUE`, and
    `NOT EXISTS *`subquery`*` is `FALSE`. For example:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果子查询返回任何行，`EXISTS *`子查询`*` 是 `TRUE`，而 `NOT EXISTS *`子查询`*` 是 `FALSE`。例如：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Traditionally, an `EXISTS` subquery starts with `SELECT *`, but it could begin
    with `SELECT 5` or `SELECT column1` or anything at all. MySQL ignores the [`SELECT`](select.html
    "15.2.13 SELECT Statement") list in such a subquery, so it makes no difference.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，`EXISTS` 子查询以 `SELECT *` 开头，但也可以以 `SELECT 5` 或 `SELECT column1` 或任何其他内容开头。MySQL会忽略这种子查询中的
    [`SELECT`](select.html "15.2.13 SELECT Statement") 列表，因此不会有任何区别。
- en: 'For the preceding example, if `t2` contains any rows, even rows with nothing
    but `NULL` values, the `EXISTS` condition is `TRUE`. This is actually an unlikely
    example because a `[NOT] EXISTS` subquery almost always contains correlations.
    Here are some more realistic examples:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前面的示例，如果 `t2` 包含任何行，即使行中只有 `NULL` 值，`EXISTS` 条件也为 `TRUE`。这实际上是一个不太可能的示例，因为
    `[NOT] EXISTS` 子查询几乎总是包含相关性。以下是一些更现实的示例：
- en: What kind of store is present in one or more cities?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个城市中存在什么样的商店？
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What kind of store is present in no cities?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有城市中存在什么样的商店？
- en: '[PRE2]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What kind of store is present in all cities?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有城市中存在什么样的商店？
- en: '[PRE3]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The last example is a double-nested `NOT EXISTS` query. That is, it has a `NOT
    EXISTS` clause within a `NOT EXISTS` clause. Formally, it answers the question
    “does a city exist with a store that is not in `Stores`”? But it is easier to
    say that a nested `NOT EXISTS` answers the question “is *`x`* `TRUE` for all *`y`*?”
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个示例是一个双重嵌套的 `NOT EXISTS` 查询。也就是说，它在一个 `NOT EXISTS` 子句中有一个 `NOT EXISTS` 子句。形式上，它回答了“是否存在一个城市有一个不在
    `Stores` 中的商店”这个问题？但更容易说的是，嵌套的 `NOT EXISTS` 回答了“对于所有 *`y`*，*`x`* 是否都为 `TRUE`？”
- en: 'In MySQL 8.0.19 and later, you can also use `NOT EXISTS` or `NOT EXISTS` with
    [`TABLE`](table.html "15.2.16 TABLE Statement") in the subquery, like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MySQL 8.0.19 及更高版本中，您还可以在子查询中使用 `NOT EXISTS` 或 `NOT EXISTS` 与 [`TABLE`](table.html
    "15.2.16 TABLE Statement")，就像这样：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The results are the same as when using `SELECT *` with no `WHERE` clause in
    the subquery.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 结果与在子查询中没有 `WHERE` 子句的情况下使用 `SELECT *` 相同。
