- en: 29.4.1 Performance Schema Event Timing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 29.4.1 性能模式事件计时
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/performance-schema-timing.html](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-timing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/performance-schema-timing.html](https://dev.mysql.com/doc/refman/8.0/en/performance-schema-timing.html)
- en: Events are collected by means of instrumentation added to the server source
    code. Instruments time events, which is how the Performance Schema provides an
    idea of how long events take. It is also possible to configure instruments not
    to collect timing information. This section discusses the available timers and
    their characteristics, and how timing values are represented in events.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是通过添加到服务器源代码的仪器来收集的。仪器计时事件，这就是性能模式提供事件持续时间的方式。还可以配置仪器不收集计时信息。本节讨论可用计时器及其特性，以及事件中计时值的表示方式。
- en: Performance Schema Timers
  id: totrans-3
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 性能模式计时器
- en: 'Performance Schema timers vary in precision and amount of overhead. To see
    what timers are available and their characteristics, check the [`performance_timers`](performance-schema-performance-timers-table.html
    "29.12.21.6 The performance_timers Table") table:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 性能模式计时器在精度和开销量上有所不同。要查看可用的计时器及其特性，请查看[`performance_timers`](performance-schema-performance-timers-table.html
    "29.12.21.6 The performance_timers Table")表：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the values associated with a given timer name are `NULL`, that timer is not
    supported on your platform.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与给定计时器名称相关联的值为`NULL`，则该计时器在您的平台上不受支持。
- en: 'The columns have these meanings:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 列的含义如下：
- en: The `TIMER_NAME` column shows the names of the available timers. `CYCLE` refers
    to the timer that is based on the CPU (processor) cycle counter.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMER_NAME`列显示可用计时器的名称。`CYCLE`指的是基于CPU（处理器）周期计数器的计时器。'
- en: '`TIMER_FREQUENCY` indicates the number of timer units per second. For a cycle
    timer, the frequency is generally related to the CPU speed. The value shown was
    obtained on a system with a 2.4GHz processor. The other timers are based on fixed
    fractions of seconds.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMER_FREQUENCY`表示每秒的计时器单位数。对于循环计时器，频率通常与CPU速度有关。显示的值是在一个2.4GHz处理器系统上获得的。其他计时器基于固定的秒分数。'
- en: '`TIMER_RESOLUTION` indicates the number of timer units by which timer values
    increase at a time. If a timer has a resolution of 10, its value increases by
    10 each time.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMER_RESOLUTION`表示计时器值每次增加的计时器单位数。如果计时器的分辨率为10，那么每次增加10。'
- en: '`TIMER_OVERHEAD` is the minimal number of cycles of overhead to obtain one
    timing with the given timer. The overhead per event is twice the value displayed
    because the timer is invoked at the beginning and end of the event.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMER_OVERHEAD`是获取给定计时器的一个计时所需的最小周期数。每个事件的开销是显示值的两倍，因为计时器在事件开始和结束时被调用。'
- en: 'The Performance Schema assigns timers as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 性能模式将计时器分配如下：
- en: The wait timer uses `CYCLE`.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待计时器使用`CYCLE`。
- en: The idle, stage, statement, and transaction timers use `NANOSECOND` on platforms
    where the `NANOSECOND` timer is available, `MICROSECOND` otherwise.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空闲、阶段、语句和事务计时器在支持`NANOSECOND`计时器的平台上使用`NANOSECOND`，否则使用`MICROSECOND`。
- en: At server startup, the Performance Schema verifies that assumptions made at
    build time about timer assignments are correct, and displays a warning if a timer
    is not available.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器启动时，性能模式会验证构建时关于计时器分配的假设是否正确，并在计时器不可用时显示警告。
- en: To time wait events, the most important criterion is to reduce overhead, at
    the possible expense of the timer accuracy, so using the `CYCLE` timer is the
    best.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计时等待事件，最重要的标准是减少开销，可能会牺牲计时器的准确性，因此使用`CYCLE`计时器是最好的选择。
- en: The time a statement (or stage) takes to execute is in general orders of magnitude
    larger than the time it takes to execute a single wait. To time statements, the
    most important criterion is to have an accurate measure, which is not affected
    by changes in processor frequency, so using a timer which is not based on cycles
    is the best. The default timer for statements is `NANOSECOND`. The extra “overhead”
    compared to the `CYCLE` timer is not significant, because the overhead caused
    by calling a timer twice (once when the statement starts, once when it ends) is
    orders of magnitude less compared to the CPU time used to execute the statement
    itself. Using the `CYCLE` timer has no benefit here, only drawbacks.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 语句（或阶段）执行所需的时间通常比执行单个等待所需的时间大几个数量级。为了计时语句，最重要的标准是要有一个准确的测量，不受处理器频率变化的影响，因此使用不基于循环的计时器是最好的。语句的默认计时器是`NANOSECOND`。与`CYCLE`计时器相比的额外“开销”并不显著，因为由于调用计时器两次（一次在语句开始时，一次在语句结束时）引起的开销与执行语句本身所用的CPU时间相比，数量级要小得多。在这里使用`CYCLE`计时器没有好处，只有缺点。
- en: The precision offered by the cycle counter depends on processor speed. If the
    processor runs at 1 GHz (one billion cycles/second) or higher, the cycle counter
    delivers sub-nanosecond precision. Using the cycle counter is much cheaper than
    getting the actual time of day. For example, the standard `gettimeofday()` function
    can take hundreds of cycles, which is an unacceptable overhead for data gathering
    that may occur thousands or millions of times per second.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 循环计数器提供的精度取决于处理器速度。如果处理器运行速度为1 GHz（十亿个周期/秒）或更高，则循环计数器提供亚纳秒级精度。使用循环计数器比获取实际的当天时间要便宜得多。例如，标准的`gettimeofday()`函数可能需要数百个周期，这对于可能每秒发生数千次或数百万次的数据收集来说是不可接受的开销。
- en: 'Cycle counters also have disadvantages:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 循环计数器也有缺点：
- en: End users expect to see timings in wall-clock units, such as fractions of a
    second. Converting from cycles to fractions of seconds can be expensive. For this
    reason, the conversion is a quick and fairly rough multiplication operation.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终用户希望看到墙钟单位的时间，例如秒的分数。从循环到秒的转换可能很昂贵。因此，转换是一个快速且相当粗糙的乘法运算。
- en: Processor cycle rate might change, such as when a laptop goes into power-saving
    mode or when a CPU slows down to reduce heat generation. If a processor's cycle
    rate fluctuates, conversion from cycles to real-time units is subject to error.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器的循环速率可能会发生变化，例如当笔记本电脑进入节能模式或当CPU减速以减少热量产生时。如果处理器的循环速率波动，从循环到实时单位的转换可能会出现错误。
- en: Cycle counters might be unreliable or unavailable depending on the processor
    or the operating system. For example, on Pentiums, the instruction is `RDTSC`
    (an assembly-language rather than a C instruction) and it is theoretically possible
    for the operating system to prevent user-mode programs from using it.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据处理器或操作系统的不同，循环计数器可能不可靠或不可用。例如，在奔腾处理器上，指令是`RDTSC`（汇编语言而不是C指令），理论上操作系统可以阻止用户模式程序使用它。
- en: Some processor details related to out-of-order execution or multiprocessor synchronization
    might cause the counter to seem fast or slow by up to 1000 cycles.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与乱序执行或多处理器同步相关的一些处理器细节可能导致计数器看起来快或慢多达1000个周期。
- en: MySQL works with cycle counters on x386 (Windows, macOS, Linux, Solaris, and
    other Unix flavors), PowerPC, and IA-64.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL在x386（Windows，macOS，Linux，Solaris和其他Unix变种），PowerPC和IA-64上使用循环计数器。
- en: Performance Schema Timer Representation in Events
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Performance Schema事件中的计时器表示
- en: 'Rows in Performance Schema tables that store current events and historical
    events have three columns to represent timing information: `TIMER_START` and `TIMER_END`
    indicate when an event started and finished, and `TIMER_WAIT` indicates event
    duration.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Performance Schema表中存储当前事件和历史事件的行有三列用于表示时间信息：`TIMER_START`和`TIMER_END`表示事件开始和结束的时间，`TIMER_WAIT`表示事件持续时间。
- en: The [`setup_instruments`](performance-schema-setup-instruments-table.html "29.12.2.3 The
    setup_instruments Table") table has an `ENABLED` column to indicate the instruments
    for which to collect events. The table also has a `TIMED` column to indicate which
    instruments are timed. If an instrument is not enabled, it produces no events.
    If an enabled instrument is not timed, events produced by the instrument have
    `NULL` for the `TIMER_START`, `TIMER_END`, and `TIMER_WAIT` timer values. This
    in turn causes those values to be ignored when calculating aggregate time values
    in summary tables (sum, minimum, maximum, and average).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[`setup_instruments`](performance-schema-setup-instruments-table.html "29.12.2.3 The
    setup_instruments Table") 表具有一个 `ENABLED` 列，用于指示要收集事件的仪器。该表还有一个 `TIMED` 列，用于指示哪些仪器是定时的。如果一个仪器未启用，则不会产生事件。如果启用的仪器未定时，则由仪器产生的事件的
    `TIMER_START`、`TIMER_END` 和 `TIMER_WAIT` 计时器值为 `NULL`。这反过来导致在汇总表（总和、最小值、最大值和平均值）中计算聚合时间值时忽略这些值。'
- en: Internally, times within events are stored in units given by the timer in effect
    when event timing begins. For display when events are retrieved from Performance
    Schema tables, times are shown in picoseconds (trillionths of a second) to normalize
    them to a standard unit, regardless of which timer is selected.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件内部，事件中的时间以事件定时开始时的计时器给定的单位存储。当从性能模式表中检索事件时，时间以皮秒（万亿分之一秒）显示，以将它们归一化为标准单位，而不管选择了哪个计时器。
- en: The timer baseline (“time zero”) occurs at Performance Schema initialization
    during server startup. `TIMER_START` and `TIMER_END` values in events represent
    picoseconds since the baseline. `TIMER_WAIT` values are durations in picoseconds.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器基线（“零时间点”）发生在服务器启动期间的性能模式初始化。事件中的 `TIMER_START` 和 `TIMER_END` 值表示自基线以来的皮秒数。`TIMER_WAIT`
    值是以皮秒为单位的持续时间。
- en: Picosecond values in events are approximate. Their accuracy is subject to the
    usual forms of error associated with conversion from one unit to another. If the
    `CYCLE` timer is used and the processor rate varies, there might be drift. For
    these reasons, it is not reasonable to look at the `TIMER_START` value for an
    event as an accurate measure of time elapsed since server startup. On the other
    hand, it is reasonable to use `TIMER_START` or `TIMER_WAIT` values in `ORDER BY`
    clauses to order events by start time or duration.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 事件中的皮秒值是近似值。它们的准确性受到与从一个单位转换到另一个单位相关的常见误差形式的影响。如果使用 `CYCLE` 计时器并且处理器速率变化，可能会出现漂移。因此，查看事件的
    `TIMER_START` 值作为自服务器启动以来经过的时间的准确度测量是不合理的。另一方面，使用 `TIMER_START` 或 `TIMER_WAIT`
    值在 `ORDER BY` 子句中对事件按开始时间或持续时间排序是合理的。
- en: The choice of picoseconds in events rather than a value such as microseconds
    has a performance basis. One implementation goal was to show results in a uniform
    time unit, regardless of the timer. In an ideal world this time unit would look
    like a wall-clock unit and be reasonably precise; in other words, microseconds.
    But to convert cycles or nanoseconds to microseconds, it would be necessary to
    perform a division for every instrumentation. Division is expensive on many platforms.
    Multiplication is not expensive, so that is what is used. Therefore, the time
    unit is an integer multiple of the highest possible `TIMER_FREQUENCY` value, using
    a multiplier large enough to ensure that there is no major precision loss. The
    result is that the time unit is “picoseconds.” This precision is spurious, but
    the decision enables overhead to be minimized.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 事件中选择皮秒而不是微秒等值具有性能基础。一个实现目标是以统一的时间单位显示结果，而不管计时器是什么。在理想世界中，这个时间单位看起来像一个挂钟单位，并且相当精确；换句话说，微秒。但是要将周期或纳秒转换为微秒，就需要对每个仪器执行除法。在许多平台上，除法是昂贵的。乘法不昂贵，所以这就是所使用的。因此，时间单位是最高可能的
    `TIMER_FREQUENCY` 值的整数倍，使用足够大的乘数来确保没有主要的精度损失。结果是时间单位是“皮秒”。这种精度是虚假的，但这个决定使得开销最小化。
- en: 'While a wait, stage, statement, or transaction event is executing, the respective
    current-event tables display current-event timing information:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当等待、阶段、语句或事务事件正在执行时，相应的当前事件表显示当前事件的定时信息：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To make it possible to determine how long a not-yet-completed event has been
    running, the timer columns are set as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够确定尚未完成的事件运行了多长时间，计时器列设置如下：
- en: '`TIMER_START` is populated.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMER_START` 已填充。'
- en: '`TIMER_END` is populated with the current timer value.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMER_END` 已填充，显示当前计时器值。'
- en: '`TIMER_WAIT` is populated with the time elapsed so far (`TIMER_END` − `TIMER_START`).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIMER_WAIT` 已填充，显示到目前为止经过的时间（`TIMER_END` − `TIMER_START`）。'
- en: 'Events that have not yet completed have an `END_EVENT_ID` value of `NULL`.
    To assess time elapsed so far for an event, use the `TIMER_WAIT` column. Therefore,
    to identify events that have not yet completed and have taken longer than *`N`*
    picoseconds thus far, monitoring applications can use this expression in queries:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尚未完成的事件具有`END_EVENT_ID`值为`NULL`。要评估到目前为止事件经过的时间，使用`TIMER_WAIT`列。因此，要识别尚未完成且到目前为止已经花费超过*`N`*皮秒的事件，监控应用程序可以在查询中使用这个表达式：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Event identification as just described assumes that the corresponding instruments
    have `ENABLED` and `TIMED` set to `YES` and that the relevant consumers are enabled.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 事件识别如上所述，假设相应的仪器`ENABLED`和`TIMED`设置为`YES`，并且相关的消费者已启用。
