- en: Limits In SQLite
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite中的限制
- en: 原文：[https://sqlite.com/limits.html](https://sqlite.com/limits.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/limits.html](https://sqlite.com/limits.html)
- en: '"Limits" in the context of this article means sizes or quantities that can
    not be exceeded. We are concerned with things like the maximum number of bytes
    in a BLOB or the maximum number of columns in a table.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '"限制"在本文的上下文中指的是不能超过的大小或数量。我们关注的是诸如BLOB中的最大字节数或表中的最大列数等问题。'
- en: SQLite was originally designed with a policy of avoiding arbitrary limits. Of
    course, every program that runs on a machine with finite memory and disk space
    has limits of some kind. But in SQLite, those limits were not well defined. The
    policy was that if it would fit in memory and you could count it with a 32-bit
    integer, then it should work.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite最初设计时避免任意限制的策略。当然，每个在有限内存和磁盘空间上运行的程序都有某种类型的限制。但在SQLite中，这些限制并没有定义得很好。政策是，如果它适合内存并且您可以用32位整数计数它，那么它应该可以工作。
- en: Unfortunately, the no-limits policy has been shown to create problems. Because
    the upper bounds were not well defined, they were not tested, and bugs were often
    found when pushing SQLite to extremes. For this reason, versions of SQLite since
    about release 3.5.8 (2008-04-16) have well-defined limits, and those limits are
    tested as part of the [test suite](testing.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，无限制政策已被证明会造成问题。因为上限没有很好地定义，所以它们没有被测试，当将SQLite推向极限时通常会发现错误。因此，自大约发布3.5.8版本的SQLite（2008-04-16）以来，它具有明确定义的限制，并且这些限制作为[测试套件](testing.html)的一部分进行测试。
- en: This article defines what the limits of SQLite are and how they can be customized
    for specific applications. The default settings for limits are normally quite
    large and adequate for almost every application. Some applications may want to
    increase a limit here or there, but we expect such needs to be rare. More commonly,
    an application might want to recompile SQLite with much lower limits to avoid
    excess resource utilization in the event of bug in higher-level SQL statement
    generators or to help thwart attackers who inject malicious SQL statements.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本文定义了SQLite的限制是什么以及如何为特定应用程序定制这些限制。限制的默认设置通常非常大且几乎适用于每个应用程序。一些应用程序可能希望在某些地方增加限制，但我们预计这种需求会很少。更常见的是，应用程序可能希望重新编译SQLite，以避免在高级SQL语句生成器中存在bug或帮助阻止注入恶意SQL语句的攻击者时过多地利用资源。
- en: Some limits can be changed at run-time on a per-connection basis using the [sqlite3_limit()](c3ref/limit.html)
    interface with one of the [limit categories](c3ref/c_limit_attached.html#sqlitelimitlength)
    defined for that interface. Run-time limits are designed for applications that
    have multiple databases, some of which are for internal use only and others which
    can be influenced or controlled by potentially hostile external agents. For example,
    a web browser application might use an internal database to track historical page
    views but have one or more separate databases that are created and controlled
    by javascript applications that are downloaded from the internet. The [sqlite3_limit()](c3ref/limit.html)
    interface allows internal databases managed by trusted code to be unconstrained
    while simultaneously placing tight limitations on databases created or controlled
    by untrusted external code in order to help prevent a denial of service attack.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时，某些限制可以通过使用[sqlite3_limit()](c3ref/limit.html)接口在每个连接的基础上进行更改，使用该接口为该接口定义的一个[限制类别](c3ref/c_limit_attached.html#sqlitelimitlength)。运行时限制适用于具有多个数据库的应用程序，其中一些仅用于内部使用，而其他可能受到潜在敌对外部代理控制或受到影响。例如，Web浏览器应用程序可能使用内部数据库跟踪历史页面查看，但有一个或多个由从Internet下载的JavaScript应用程序创建和控制的单独数据库。[sqlite3_limit()](c3ref/limit.html)接口允许由受信任代码管理的内部数据库不受限制，同时在由不受信任的外部代码创建或控制的数据库上设置严格限制，以帮助防止拒绝服务攻击。
- en: '**Maximum length of a string or BLOB**'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**字符串或BLOB的最大长度**'
- en: 'The maximum number of bytes in a string or BLOB in SQLite is defined by the
    preprocessor macro SQLITE_MAX_LENGTH. The default value of this macro is 1 billion
    (1 thousand million or 1,000,000,000). You can raise or lower this value at compile-time
    using a command-line option like this:'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQLite中，字符串或BLOB中的最大字节数由预处理器宏SQLITE_MAX_LENGTH定义。该宏的默认值为10亿（1千万或1,000,000,000）。您可以使用类似以下的命令行选项在编译时提高或降低此值：
- en: -DSQLITE_MAX_LENGTH=123456789
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: -DSQLITE_MAX_LENGTH=123456789
- en: The current implementation will only support a string or BLOB length up to 2^(31)-1
    or 2147483647\. And some built-in functions such as hex() might fail well before
    that point. In security-sensitive applications it is best not to try to increase
    the maximum string and blob length. In fact, you might do well to lower the maximum
    string and blob length to something more in the range of a few million if that
    is possible.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当前的实现仅支持字符串或BLOB长度最多为2^(31)-1或2147483647。并且一些内置函数，如hex()，在此点之前可能会失败。在安全敏感的应用程序中，最好不要尝试增加最大字符串和blob长度。实际上，如果可能的话，最好将最大字符串和BLOB长度降低到几百万左右的范围。
- en: During part of SQLite's INSERT and SELECT processing, the complete content of
    each row in the database is encoded as a single BLOB. So the SQLITE_MAX_LENGTH
    parameter also determines the maximum number of bytes in a row.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQLite的INSERT和SELECT处理的某个部分，数据库中每行的完整内容被编码为单个BLOB。因此，SQLITE_MAX_LENGTH参数还确定了行中的最大字节数。
- en: The maximum string or BLOB length can be lowered at run-time using the [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_LENGTH](c3ref/c_limit_attached.html#sqlitelimitlength),size)
    interface.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过使用[sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_LENGTH](c3ref/c_limit_attached.html#sqlitelimitlength),size)接口可以在运行时降低字符串或BLOB的最大长度。
- en: '**Maximum Number Of Columns**'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**列的最大数量**'
- en: 'The SQLITE_MAX_COLUMN compile-time parameter is used to set an upper bound
    on:'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLITE_MAX_COLUMN编译时参数用于设置上限：
- en: The number of columns in a table
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表中的列数
- en: The number of columns in an index
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引中的列数
- en: The number of columns in a view
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图中的列数
- en: The number of terms in the SET clause of an UPDATE statement
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: UPDATE语句的SET子句中的项数
- en: The number of columns in the result set of a SELECT statement
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELECT语句结果集中的列数
- en: The number of terms in a GROUP BY or ORDER BY clause
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GROUP BY或ORDER BY子句中的项数
- en: The number of values in an INSERT statement
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: INSERT语句中值的数量
- en: The default setting for SQLITE_MAX_COLUMN is 2000\. You can change it at compile
    time to values as large as 32767\. On the other hand, many experienced database
    designers will argue that a well-normalized database will never need more than
    100 columns in a table.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLITE_MAX_COLUMN的默认设置为2000。您可以在编译时将其更改为32767等大的值。另一方面，许多经验丰富的数据库设计师会认为，规范化良好的数据库永远不会需要超过100个列。
- en: In most applications, the number of columns is small - a few dozen. There are
    places in the SQLite code generator that use algorithms that are O(N²) where N
    is the number of columns. So if you redefine SQLITE_MAX_COLUMN to be a really
    huge number and you generate SQL that uses a large number of columns, you may
    find that [sqlite3_prepare_v2()](c3ref/prepare.html) runs slowly.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数应用程序中，列数较少，只有几十个。SQLite代码生成器中使用算法的地方的复杂度为O(N²)，其中N是列的数量。因此，如果您将SQLITE_MAX_COLUMN重新定义为一个非常巨大的数字，并且生成使用大量列的SQL，您可能会发现[sqlite3_prepare_v2()](c3ref/prepare.html)运行缓慢。
- en: The maximum number of columns can be lowered at run-time using the [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_COLUMN](c3ref/c_limit_attached.html#sqlitelimitcolumn),size)
    interface.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用[sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_COLUMN](c3ref/c_limit_attached.html#sqlitelimitcolumn),size)接口在运行时降低最大列数。
- en: '**Maximum Length Of An SQL Statement**'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**SQL语句的最大长度**'
- en: The maximum number of bytes in the text of an SQL statement is limited to SQLITE_MAX_SQL_LENGTH
    which defaults to 1,000,000,000.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQL语句中文本的最大字节数限制为SQLITE_MAX_SQL_LENGTH，默认为1,000,000,000。
- en: 'If an SQL statement is limited to be a million bytes in length, then obviously
    you will not be able to insert multi-million byte strings by embedding them as
    literals inside of INSERT statements. But you should not do that anyway. Use host
    [parameters](lang_expr.html#varparam) for your data. Prepare short SQL statements
    like this:'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果SQL语句的长度限制为100万字节，那么显然您将无法通过将它们作为字面值嵌入到INSERT语句中来插入几百万字节的字符串。但无论如何，您都不应该这样做。使用宿主[参数](lang_expr.html#varparam)进行数据。准备短的SQL语句如下：
- en: INSERT INTO tab1 VALUES(?,?,?);
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: INSERT INTO tab1 VALUES(?,?,?);
- en: Then use the [sqlite3_bind_XXXX()](c3ref/bind_blob.html) functions to bind your
    large string values to the SQL statement. The use of binding obviates the need
    to escape quote characters in the string, reducing the risk of SQL injection attacks.
    It also runs faster since the large string does not need to be parsed or copied
    as much.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后使用[sqlite3_bind_XXXX()](c3ref/bind_blob.html)函数将大字符串值绑定到SQL语句。使用绑定可以避免在字符串中转义引号字符，减少SQL注入攻击的风险。它还运行更快，因为大字符串不需要解析或复制太多次。
- en: The maximum length of an SQL statement can be lowered at run-time using the
    [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_SQL_LENGTH](c3ref/c_limit_attached.html#sqlitelimitsqllength),size)
    interface.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用 [sqlite3_limit](c3ref/limit.html)(db, [SQLITE_LIMIT_SQL_LENGTH](c3ref/c_limit_attached.html#sqlitelimitsqllength),
    size) 接口在运行时降低 SQL 语句的最大长度。
- en: '**Maximum Number Of Tables In A Join**'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接中的最大表数**'
- en: SQLite does not support joins containing more than 64 tables. This limit arises
    from the fact that the SQLite code generator uses bitmaps with one bit per join-table
    in the query optimizer.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 不支持包含超过 64 张表的连接。此限制源于 SQLite 代码生成器在查询优化器中使用的位图，每个连接表对应一个位。
- en: SQLite uses an efficient [query planner algorithm](queryplanner-ng.html) and
    so even a large join can be [prepared](c3ref/prepare.html) quickly. Hence, there
    is no mechanism to raise or lower the limit on the number of tables in a join.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 使用高效的 [查询规划算法](queryplanner-ng.html)，因此即使是大型连接也可以快速地进行 [准备](c3ref/prepare.html)。因此，没有机制来提高或降低连接中表的数量限制。
- en: '**Maximum Depth Of An Expression Tree**'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**表达式树的最大深度**'
- en: SQLite parses expressions into a tree for processing. During code generation,
    SQLite walks this tree recursively. The depth of expression trees is therefore
    limited in order to avoid using too much stack space.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 将表达式解析为树进行处理。在代码生成期间，SQLite 递归地遍历此树。因此，表达式树的深度受限以避免使用过多的堆栈空间。
- en: The SQLITE_MAX_EXPR_DEPTH parameter determines the maximum expression tree depth.
    If the value is 0, then no limit is enforced. The current implementation has a
    default value of 1000.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数 `SQLITE_MAX_EXPR_DEPTH` 确定表达式树的最大深度。如果该值为 0，则不会施加限制。当前实现的默认值为 1000。
- en: The maximum depth of an expression tree can be lowered at run-time using the
    [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_EXPR_DEPTH](c3ref/c_limit_attached.html#sqlitelimitexprdepth),size)
    interface if the SQLITE_MAX_EXPR_DEPTH is initially positive. In other words,
    the maximum expression depth can be lowered at run-time if there is already a
    compile-time limit on the expression depth. If SQLITE_MAX_EXPR_DEPTH is set to
    0 at compile time (if the depth of expressions is unlimited) then the [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_EXPR_DEPTH](c3ref/c_limit_attached.html#sqlitelimitexprdepth),size)
    is a no-op.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行时可以使用 [sqlite3_limit](c3ref/limit.html)(db, [SQLITE_LIMIT_EXPR_DEPTH](c3ref/c_limit_attached.html#sqlitelimitexprdepth),
    size) 接口降低表达式树的最大深度，前提是 `SQLITE_MAX_EXPR_DEPTH` 初始值为正数。换句话说，如果表达式深度在编译时有限制，则可以在运行时降低最大表达式深度。如果
    `SQLITE_MAX_EXPR_DEPTH` 在编译时设置为 0（表示表达式深度无限制），则 [sqlite3_limit](c3ref/limit.html)(db,
    [SQLITE_LIMIT_EXPR_DEPTH](c3ref/c_limit_attached.html#sqlitelimitexprdepth), size)
    不起作用。
- en: '**Maximum Number Of Arguments On A Function**'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**函数中的最大参数数目**'
- en: The SQLITE_MAX_FUNCTION_ARG parameter determines the maximum number of parameters
    that can be passed to an SQL function. The default value of this limit is 100\.
    SQLite should work with functions that have thousands of parameters. However,
    we suspect that anybody who tries to invoke a function with more than a few parameters
    is really trying to find security exploits in systems that use SQLite, not do
    useful work, and so for that reason we have set this parameter relatively low.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数 `SQLITE_MAX_FUNCTION_ARG` 确定可以传递给 SQL 函数的最大参数数目。此限制的默认值为 100。SQLite 应该能够处理具有数千个参数的函数。但是，我们怀疑任何试图调用超过少数参数的函数的人实际上是在寻找使用
    SQLite 的系统中的安全漏洞，而不是做有用的工作，因此出于这个原因我们将此参数设置相对较低。
- en: The number of arguments to a function is sometimes stored in a signed character.
    So there is a hard upper bound on SQLITE_MAX_FUNCTION_ARG of 127.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数的参数数量有时存储在有符号字符中。因此，`SQLITE_MAX_FUNCTION_ARG` 的硬上限为 127。
- en: The maximum number of arguments in a function can be lowered at run-time using
    the [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_FUNCTION_ARG](c3ref/c_limit_attached.html#sqlitelimitfunctionarg),size)
    interface.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用 [sqlite3_limit](c3ref/limit.html)(db, [SQLITE_LIMIT_FUNCTION_ARG](c3ref/c_limit_attached.html#sqlitelimitfunctionarg),
    size) 接口在运行时降低函数中的最大参数数目。
- en: '**Maximum Number Of Terms In A Compound SELECT Statement**'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**复合 SELECT 语句中的最大项数**'
- en: A compound [SELECT](lang_select.html) statement is two or more SELECT statements
    connected by operators UNION, UNION ALL, EXCEPT, or INTERSECT. We call each individual
    SELECT statement within a compound SELECT a "term".
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 复合 [SELECT](lang_select.html) 语句是由联合、联合全部、差集或交集运算符连接的两个或多个 SELECT 语句。我们称复合 SELECT
    中的每个单独 SELECT 语句为一个“项”。
- en: The code generator in SQLite processes compound SELECT statements using a recursive
    algorithm. In order to limit the size of the stack, we therefore limit the number
    of terms in a compound SELECT. The maximum number of terms is SQLITE_MAX_COMPOUND_SELECT
    which defaults to 500. We think this is a generous allotment since in practice
    we almost never see the number of terms in a compound select exceed single digits.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 中的代码生成器使用递归算法处理复合 SELECT 语句。为了限制堆栈的大小，因此我们限制复合 SELECT 中的项数。最大项数是 SQLITE_MAX_COMPOUND_SELECT，默认为
    500。我们认为这是一个很大的分配，因为在实际应用中，我们几乎从不见复合选择中的项数超过个位数。
- en: The maximum number of compound SELECT terms can be lowered at run-time using
    the [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_COMPOUND_SELECT](c3ref/c_limit_attached.html#sqlitelimitcompoundselect),size)
    interface.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用 [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_COMPOUND_SELECT](c3ref/c_limit_attached.html#sqlitelimitcompoundselect),size)
    接口在运行时降低复合 SELECT 项的最大数目。
- en: '**Maximum Length Of A LIKE Or GLOB Pattern**'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LIKE 或 GLOB 模式的最大长度**'
- en: The pattern matching algorithm used in the default [LIKE](lang_expr.html#like)
    and [GLOB](lang_expr.html#glob) implementation of SQLite can exhibit O(N²) performance
    (where N is the number of characters in the pattern) for certain pathological
    cases. To avoid denial-of-service attacks from miscreants who are able to specify
    their own LIKE or GLOB patterns, the length of the LIKE or GLOB pattern is limited
    to SQLITE_MAX_LIKE_PATTERN_LENGTH bytes. The default value of this limit is 50000\.
    A modern workstation can evaluate even a pathological LIKE or GLOB pattern of
    50000 bytes relatively quickly. The denial of service problem only comes into
    play when the pattern length gets into millions of bytes. Nevertheless, since
    most useful LIKE or GLOB patterns are at most a few dozen bytes in length, paranoid
    application developers may want to reduce this parameter to something in the range
    of a few hundred if they know that external users are able to generate arbitrary
    patterns.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 默认的 LIKE 和 GLOB 实现中使用的模式匹配算法在某些极端情况下可能表现为 O(N²) 的性能（其中 N 是模式中的字符数）。为了避免来自能够指定自己
    LIKE 或 GLOB 模式的不良分子的拒绝服务攻击，LIKE 或 GLOB 模式的长度限制为 SQLITE_MAX_LIKE_PATTERN_LENGTH
    字节。此限制的默认值为 50000。现代工作站甚至可以快速评估 50000 字节的极端 LIKE 或 GLOB 模式。仅当模式长度达到数百万字节时，拒绝服务问题才会出现。尽管如此，由于大多数有用的
    LIKE 或 GLOB 模式长度最多为几十字节，偏执的应用程序开发人员可能希望将此参数减少到几百字节的范围，如果他们知道外部用户能够生成任意模式。
- en: The maximum length of a LIKE or GLOB pattern can be lowered at run-time using
    the [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_LIKE_PATTERN_LENGTH](c3ref/c_limit_attached.html#sqlitelimitlikepatternlength),size)
    interface.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用 [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_LIKE_PATTERN_LENGTH](c3ref/c_limit_attached.html#sqlitelimitlikepatternlength),size)
    接口在运行时降低 LIKE 或 GLOB 模式的最大长度。
- en: '**Maximum Number Of Host Parameters In A Single SQL Statement**'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**单个 SQL 语句中的最大主机参数数目**'
- en: A host [parameter](lang_expr.html#varparam) is a place-holder in an SQL statement
    that is filled in using one of the [sqlite3_bind_XXXX()](c3ref/bind_blob.html)
    interfaces. Many SQL programmers are familiar with using a question mark ("?")
    as a host parameter. SQLite also supports named host parameters prefaced by ":",
    "$", or "@" and numbered host parameters of the form "?123".
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主机 [parameter](lang_expr.html#varparam) 是 SQL 语句中的占位符，使用 [sqlite3_bind_XXXX()](c3ref/bind_blob.html)
    接口之一填充。许多 SQL 程序员习惯使用问号（"?"）作为主机参数。SQLite 还支持以 ":", "$" 或 "@" 开头的命名主机参数，以及形如 "?123"
    的编号主机参数。
- en: Each host parameter in an SQLite statement is assigned a number. The numbers
    normally begin with 1 and increase by one with each new parameter. However, when
    the "?123" form is used, the host parameter number is the number that follows
    the question mark.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 语句中的每个主机参数都分配一个编号。这些编号通常从 1 开始，并且每次新增参数时递增。但是，当使用 "?123" 形式时，主机参数编号是跟随问号后面的数字。
- en: SQLite allocates space to hold all host parameters between 1 and the largest
    host parameter number used. Hence, an SQL statement that contains a host parameter
    like ?1000000000 would require gigabytes of storage. This could easily overwhelm
    the resources of the host machine. To prevent excessive memory allocations, the
    maximum value of a host parameter number is SQLITE_MAX_VARIABLE_NUMBER, which
    defaults to 999 for SQLite versions prior to 3.32.0 (2020-05-22) or 32766 for
    SQLite versions after 3.32.0.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite为容纳所有主机参数分配空间，从1到使用的最大主机参数编号。因此，包含主机参数如?1000000000的SQL语句将需要大量存储空间。这可能轻易超出主机机器的资源。为了防止过多的内存分配，主机参数编号的最大值是SQLITE_MAX_VARIABLE_NUMBER，默认为999（适用于SQLite版本3.32.0之前，即2020-05-22发布）或32766（适用于SQLite版本3.32.0之后）。
- en: The maximum host parameter number can be lowered at run-time using the [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_VARIABLE_NUMBER](c3ref/c_limit_attached.html#sqlitelimitvariablenumber),size)
    interface.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最大主机参数数量可以在运行时使用[sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_VARIABLE_NUMBER](c3ref/c_limit_attached.html#sqlitelimitvariablenumber),size)接口降低。
- en: '**Maximum Depth Of Trigger Recursion**'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**触发器递归的最大深度**'
- en: SQLite limits the depth of recursion of triggers in order to prevent a statement
    involving recursive triggers from using an unbounded amount of memory.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite限制触发器的递归深度，以防止涉及递归触发器的语句使用无限量的内存。
- en: Prior to SQLite [version 3.6.18](releaselog/3_6_18.html) (2009-09-11), triggers
    were not recursive and so this limit was meaningless. Beginning with version 3.6.18,
    recursive triggers were supported but had to be explicitly enabled using the [PRAGMA
    recursive_triggers](pragma.html#pragma_recursive_triggers) statement. Beginning
    with [version 3.7.0](releaselog/3_7_0.html) (2009-09-11), recursive triggers are
    enabled by default but can be manually disabled using [PRAGMA recursive_triggers](pragma.html#pragma_recursive_triggers).
    The SQLITE_MAX_TRIGGER_DEPTH is only meaningful if recursive triggers are enabled.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQLite [3.6.18版本](releaselog/3_6_18.html)（2009-09-11）之前，触发器不是递归的，因此这个限制是无意义的。从3.6.18版本开始，支持递归触发器，但必须使用[PRAGMA
    recursive_triggers](pragma.html#pragma_recursive_triggers)语句显式启用。从[3.7.0版本](releaselog/3_7_0.html)（2009-09-11）开始，默认启用递归触发器，但可以使用[PRAGMA
    recursive_triggers](pragma.html#pragma_recursive_triggers)手动禁用。只有在启用递归触发器时，SQLITE_MAX_TRIGGER_DEPTH才有意义。
- en: The default maximum trigger recursion depth is 1000.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认的最大触发器递归深度为1000。
- en: '**Maximum Number Of Attached Databases**'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**附加数据库的最大数量**'
- en: The [ATTACH](lang_attach.html) statement is an SQLite extension that allows
    two or more databases to be associated to the same database connection and to
    operate as if they were a single database. The number of simultaneously attached
    databases is limited to SQLITE_MAX_ATTACHED which is set to 10 by default. The
    maximum number of attached databases cannot be increased above 125.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ATTACH](lang_attach.html)语句是SQLite的一个扩展，允许将两个或更多数据库关联到同一个数据库连接，并且操作它们就像它们是一个单一的数据库。同时附加的数据库数量限制为默认的SQLITE_MAX_ATTACHED，其默认值为10。最大附加数据库数量不能超过125。'
- en: The maximum number of attached databases can be lowered at run-time using the
    [sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_ATTACHED](c3ref/c_limit_attached.html#sqlitelimitattached),size)
    interface.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最大可以附加的数据库数量可以在运行时使用[sqlite3_limit](c3ref/limit.html)(db,[SQLITE_LIMIT_ATTACHED](c3ref/c_limit_attached.html#sqlitelimitattached),size)接口降低。
- en: '**Maximum Number Of Pages In A Database File**'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据库文件中的页面最大数量**'
- en: SQLite is able to limit the size of a database file to prevent the database
    file from growing too large and consuming too much disk space. The SQLITE_MAX_PAGE_COUNT
    parameter is the maximum number of pages allowed in a single database file. An
    attempt to insert new data that would cause the database file to grow larger than
    this will return SQLITE_FULL.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite能够限制数据库文件的大小，以防止数据库文件过大并消耗过多的磁盘空间。SQLITE_MAX_PAGE_COUNT参数是单个数据库文件中允许的最大页面数。尝试插入新数据会使数据库文件增长超过此限制将返回SQLITE_FULL。
- en: The largest possible setting for SQLITE_MAX_PAGE_COUNT is 4294967294 (2^(32)-2).
    Since version 3.45.0 (2024-01-15), 4294967294 is also the default value for SQLITE_MAX_PAGE_COUNT.
    When used with the default page size of 4096 bytes, this gives a maximum database
    size of about 17.5 terabytes. If the page size is increased to the maximum of
    65536 bytes, then the database file can grow to be as large as about 281 terabytes.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLITE_MAX_PAGE_COUNT的最大可能设置为4294967294（2^(32)-2）。从版本3.45.0（2024-01-15）开始，4294967294也是SQLITE_MAX_PAGE_COUNT的默认值。使用默认页面大小4096字节时，这给出了约17.5太字节的最大数据库大小。如果页面大小增加到最大的65536字节，则数据库文件可以增长到约281太字节。
- en: The [max_page_count PRAGMA](pragma.html#pragma_max_page_count) can be used to
    raise or lower this limit at run-time.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用[max_page_count PRAGMA](pragma.html#pragma_max_page_count)在运行时提高或降低此限制。
- en: '**Maximum Number Of Rows In A Table**'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**表中的最大行数**'
- en: The theoretical maximum number of rows in a table is 2^(64) (18446744073709551616
    or about 1.8e+19). This limit is unreachable since the maximum database size of
    281 terabytes will be reached first. A 281 terabytes database can hold no more
    than approximately 2e+13 rows, and then only if there are no indices and if each
    row contains very little data.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表中的理论最大行数为2^(64)（18446744073709551616或约1.8e+19）。此限制是不可达的，因为281太字节的最大数据库大小将首先达到。281太字节的数据库最多可以容纳约2e+13行，仅当没有索引且每行包含非常少的数据时才能达到这一限制。
- en: '**Maximum Database Size**'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最大数据库大小**'
- en: Every database consists of one or more "pages". Within a single database, every
    page is the same size, but different databases can have page sizes that are powers
    of two between 512 and 65536, inclusive. The maximum size of a database file is
    4294967294 pages. At the maximum page size of 65536 bytes, this translates into
    a maximum database size of approximately 1.4e+14 bytes (281 terabytes, or 256
    tebibytes, or 281474 gigabytes or 256,000 gibibytes).
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个数据库由一个或多个“页”组成。在单个数据库内，每个页面大小相同，但不同的数据库可以具有介于512和65536之间的二次幂页面大小。数据库文件的最大大小为4294967294页。在页面大小为65536字节时，这相当于大约1.4e+14字节（281太字节，或256
    tebibytes，或281474千兆字节或256,000 gibibytes）的最大数据库大小。
- en: This particular upper bound is untested since the developers do not have access
    to hardware capable of reaching this limit. However, tests do verify that SQLite
    behaves correctly and sanely when a database reaches the maximum file size of
    the underlying filesystem (which is usually much less than the maximum theoretical
    database size) and when a database is unable to grow due to disk space exhaustion.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此特定上限未经过测试，因为开发人员无法访问能够达到此限制的硬件。然而，测试验证了SQLite在数据库达到底层文件系统的最大文件大小（通常远小于最大理论数据库大小）时的正确和合理行为，以及在由于磁盘空间耗尽而无法增长时的行为。
- en: '**Maximum Number Of Tables In A Schema**'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**架构中的最大表数**'
- en: Each table and index requires at least one page in the database file. An "index"
    in the previous sentence means an index created explicitly using a [CREATE INDEX](lang_createindex.html)
    statement or implicit indices created by UNIQUE and PRIMARY KEY constraints. Since
    the maximum number of pages in a database file is 2147483646 (a little over 2
    billion) this is also then an upper bound on the number of tables and indices
    in a schema.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库文件中每个表和索引至少需要一个页面。前一句中的“索引”指的是通过[CREATE INDEX](lang_createindex.html)语句显式创建的索引或由UNIQUE和PRIMARY
    KEY约束隐式创建的索引。由于数据库文件中页面的最大数量为2147483646（略多于20亿），这也是模式中表和索引数量的上限。
- en: Whenever a database is opened, the entire schema is scanned and parsed and a
    parse tree for the schema is held in memory. That means that database connection
    startup time and initial memory usage is proportional to the size of the schema.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每当打开数据库时，整个架构将被扫描和解析，并且架构的解析树将保存在内存中。这意味着数据库连接的启动时间和初始内存使用量与架构的大小成正比。
