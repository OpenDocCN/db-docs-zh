- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/structured-system-variables.html](https://dev.mysql.com/doc/refman/8.0/en/structured-system-variables.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/structured-system-variables.html](https://dev.mysql.com/doc/refman/8.0/en/structured-system-variables.html)
- en: 7.1.9.5 Structured System Variables
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 7.1.9.5 结构化系统变量
- en: 'A structured variable differs from a regular system variable in two respects:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化变量在两个方面与常规系统变量不同：
- en: Its value is a structure with components that specify server parameters considered
    to be closely related.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其值是一个具有指定为密切相关的服务器参数的组件的结构。
- en: There might be several instances of a given type of structured variable. Each
    one has a different name and refers to a different resource maintained by the
    server.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能会有几个给定类型的结构化变量实例。每个实例都有一个不同的名称，并引用服务器维护的不同资源。
- en: 'MySQL supports one structured variable type, which specifies parameters governing
    the operation of key caches. A key cache structured variable has these components:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL支持一种结构化变量类型，用于指定管理关键缓存操作的参数。关键缓存结构化变量具有以下组件：
- en: '[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)'
- en: '[`key_cache_block_size`](server-system-variables.html#sysvar_key_cache_block_size)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`key_cache_block_size`](server-system-variables.html#sysvar_key_cache_block_size)'
- en: '[`key_cache_division_limit`](server-system-variables.html#sysvar_key_cache_division_limit)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`key_cache_division_limit`](server-system-variables.html#sysvar_key_cache_division_limit)'
- en: '[`key_cache_age_threshold`](server-system-variables.html#sysvar_key_cache_age_threshold)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`key_cache_age_threshold`](server-system-variables.html#sysvar_key_cache_age_threshold)'
- en: This section describes the syntax for referring to structured variables. Key
    cache variables are used for syntax examples, but specific details about how key
    caches operate are found elsewhere, in [Section 10.10.2, “The MyISAM Key Cache”](myisam-key-cache.html
    "10.10.2 The MyISAM Key Cache").
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了引用结构化变量的语法。关键缓存变量用于语法示例，但关于关键缓存如何运作的具体细节可以在其他地方找到，在[第10.10.2节，“MyISAM关键缓存”](myisam-key-cache.html
    "10.10.2 The MyISAM Key Cache")中。
- en: 'To refer to a component of a structured variable instance, you can use a compound
    name in *`instance_name.component_name`* format. Examples:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要引用结构化变量实例的组件，可以使用*`instance_name.component_name`*格式的复合名称。例如：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For each structured system variable, an instance with the name of `default`
    is always predefined. If you refer to a component of a structured variable without
    any instance name, the `default` instance is used. Thus, `default.key_buffer_size`
    and [`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size) both
    refer to the same system variable.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个结构化系统变量，名称为`default`的实例始终预定义。如果您引用结构化变量的组件而没有任何实例名称，则使用`default`实例。因此，`default.key_buffer_size`和[`key_buffer_size`](server-system-variables.html#sysvar_key_buffer_size)都引用同一系统变量。
- en: 'Structured variable instances and components follow these naming rules:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化变量实例和组件遵循以下命名规则：
- en: For a given type of structured variable, each instance must have a name that
    is unique *within* variables of that type. However, instance names need not be
    unique *across* structured variable types. For example, each structured variable
    has an instance named `default`, so `default` is not unique across variable types.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定类型的结构化变量，每个实例的名称必须在该类型的变量中是唯一的。但是，实例名称在结构化变量类型之间不需要是唯一的。例如，每个结构化变量都有一个名为`default`的实例，因此`default`在变量类型之间不是唯一的。
- en: The names of the components of each structured variable type must be unique
    across all system variable names. If this were not true (that is, if two different
    types of structured variables could share component member names), it would not
    be clear which default structured variable to use for references to member names
    that are not qualified by an instance name.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每种结构化变量类型的组件名称必须在所有系统变量名称中是唯一的。如果不是这样（也就是说，如果两种不同类型的结构化变量可以共享组件成员名称），那么对于未由实例名称限定的成员名称的引用将不清楚使用哪个默认结构化变量。
- en: If a structured variable instance name is not legal as an unquoted identifier,
    refer to it as a quoted identifier using backticks. For example, `hot-cache` is
    not legal, but ``hot-cache`` is.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果结构化变量实例名称作为未引用的标识符不合法，则使用反引号引用它作为引用标识符。例如，`hot-cache`不合法，但``hot-cache``是。
- en: '`global`, `session`, and `local` are not legal instance names. This avoids
    a conflict with notation such as `@@GLOBAL.*`var_name`*` for referring to nonstructured
    system variables.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global`、`session`和`local`不是合法的实例名称。这避免了与诸如`@@GLOBAL.*`var_name`*`之类的表示非结构化系统变量的符号发生冲突。'
- en: Currently, the first two rules have no possibility of being violated because
    the only structured variable type is the one for key caches. These rules may assume
    greater significance if some other type of structured variable is created in the
    future.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，前两条规则不可能被违反，因为唯一的结构化变量类型是键缓存类型。如果将来创建其他类型的结构化变量，则这些规则可能变得更加重要。
- en: 'With one exception, you can refer to structured variable components using compound
    names in any context where simple variable names can occur. For example, you can
    assign a value to a structured variable using a command-line option:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了一个例外情况外，在任何简单变量名可以出现的上下文中，您都可以使用复合名称引用结构化变量组件。例如，您可以使用命令行选项为结构化变量赋值：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In an option file, use this syntax:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在选项文件中，请使用以下语法：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you start the server with this option, it creates a key cache named `hot_cache`
    with a size of 64KB in addition to the default key cache that has a default size
    of 8MB.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用此选项启动服务器，则会创建一个名为`hot_cache`的键缓存，大小为64KB，另外还会创建一个默认大小为8MB的默认键缓存。
- en: 'Suppose that you start the server as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您以以下方式启动服务器：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case, the server sets the size of the default key cache to 256KB. (You
    could also have written `--default.key_buffer_size=256K`.) In addition, the server
    creates a second key cache named `extra_cache` that has a size of 128KB, with
    the size of block buffers for caching table index blocks set to 2048 bytes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，服务器将默认键缓存的大小设置为256KB。（您也可以编写`--default.key_buffer_size=256K`。）此外，服务器还会创建一个名为`extra_cache`的第二个键缓存，其大小为128KB，用于缓存表索引块的块缓冲区大小设置为2048字节。
- en: 'The following example starts the server with three different key caches having
    sizes in a 3:1:1 ratio:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例启动具有3:1:1比例大小的三个不同键缓存的服务器：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Structured variable values may be set and retrieved at runtime as well. For
    example, to set a key cache named `hot_cache` to a size of 10MB, use either of
    these statements:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化变量值也可以在运行时设置和检索。例如，要将名为`hot_cache`的键缓存设置为10MB的大小，请使用以下任一语句：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To retrieve the cache size, do this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索缓存大小，请执行以下操作：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, the following statement does not work. The variable is not interpreted
    as a compound name, but as a simple string for a [`LIKE`](string-comparison-functions.html#operator_like)
    pattern-matching operation:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，以下语句不起作用。该变量不被解释为复合名称，而是被解释为用于[`LIKE`](string-comparison-functions.html#operator_like)模式匹配操作的简单字符串：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is the exception to being able to use structured variable names anywhere
    a simple variable name may occur.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是能够在简单变量名出现的任何地方使用结构化变量名的例外情况。
