- en: 12.13.1 Character Definition Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12.13.1 字符定义数组
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/character-arrays.html](https://dev.mysql.com/doc/refman/8.0/en/character-arrays.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://dev.mysql.com/doc/refman/8.0/en/character-arrays.html](https://dev.mysql.com/doc/refman/8.0/en/character-arrays.html)'
- en: 'Each simple character set has a configuration file located in the `sql/share/charsets`
    directory. For a character set named *`MYSYS`*, the file is named `*`MYSET`*.xml`.
    It uses `<map>` array elements to list character set properties. `<map>` elements
    appear within these elements:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个简单字符集都有一个配置文件，位于 `sql/share/charsets` 目录中。 对于名为 *`MYSYS`* 的字符集，文件名为 `*`MYSET`*.xml`。
    它使用 `<map>` 数组元素列出字符集属性。 `<map>` 元素出现在这些元素内部：
- en: '`<ctype>` defines attributes for each character.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ctype>` 为每个字符定义属性。'
- en: '`<lower>` and `<upper>` list the lowercase and uppercase characters.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<lower>` 和 `<upper>` 列出小写和大写字符。'
- en: '`<unicode>` maps 8-bit character values to Unicode values.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<unicode>` 将8位字符值映射到Unicode值。'
- en: '`<collation>` elements indicate character ordering for comparison and sorting,
    one element per collation. Binary collations need no `<map>` element because the
    character codes themselves provide the ordering.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<collation>` 元素指示用于比较和排序的字符排序，每个排序一个元素。 二进制排序不需要 `<map>` 元素，因为字符代码本身提供排序。'
- en: 'For a complex character set as implemented in a `ctype-*`MYSET`*.c` file in
    the `strings` directory, there are corresponding arrays: `ctype_*`MYSET`*[]`,
    `to_lower_*`MYSET`*[]`, and so forth. Not every complex character set has all
    of the arrays. See also the existing `ctype-*.c` files for examples. See the `CHARSET_INFO.txt`
    file in the `strings` directory for additional information.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在 `strings` 目录中的 `ctype-*`MYSET`*.c` 文件中实现的复杂字符集，有相应的数组：`ctype_*`MYSET`*[]`，`to_lower_*`MYSET`*[]`
    等等。 并非每个复杂字符集都有所有数组。 有关示例，请参见现有的 `ctype-*.c` 文件。 有关更多信息，请参见 `strings` 目录中的 `CHARSET_INFO.txt`
    文件。
- en: Most of the arrays are indexed by character value and have 256 elements. The
    `<ctype>` array is indexed by character value + 1 and has 257 elements. This is
    a legacy convention for handling `EOF`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数组按字符值索引，并具有256个元素。 `<ctype>` 数组按字符值 + 1 索引，并具有257个元素。 这是处理 `EOF` 的传统约定。
- en: '`<ctype>` array elements are bit values. Each element describes the attributes
    of a single character in the character set. Each attribute is associated with
    a bitmask, as defined in `include/m_ctype.h`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ctype>` 数组元素是位值。 每个元素描述字符集中单个字符的属性。 每个属性与位掩码关联，如 `include/m_ctype.h` 中定义的：'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `<ctype>` value for a given character should be the union of the applicable
    bitmask values that describe the character. For example, `''A''` is an uppercase
    character (`_MY_U`) as well as a hexadecimal digit (`_MY_X`), so its `ctype` value
    should be defined like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 给定字符的 `<ctype>` 值应该是描述该字符的适用位掩码值的并集。 例如，`'A'` 是大写字符（`_MY_U`）以及十六进制数字（`_MY_X`），因此其
    `ctype` 值应该定义如下：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The bitmask values in `m_ctype.h` are octal values, but the elements of the
    `<ctype>` array in `*`MYSET`*.xml` should be written as hexadecimal values.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_ctype.h` 中的位掩码值是八进制值，但在 `*`MYSET`*.xml` 中的 `<ctype>` 数组的元素应该以十六进制值编写。'
- en: 'The `<lower>` and `<upper>` arrays hold the lowercase and uppercase characters
    corresponding to each member of the character set. For example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`<lower>` 和 `<upper>` 数组保存与字符集中每个成员对应的小写和大写字符。 例如：'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Each `<collation>` array indicates how characters should be ordered for comparison
    and sorting purposes. MySQL sorts characters based on the values of this information.
    In some cases, this is the same as the `<upper>` array, which means that sorting
    is case-insensitive. For more complicated sorting rules (for complex character
    sets), see the discussion of string collating in [Section 12.13.2, “String Collating
    Support for Complex Character Sets”](string-collating.html "12.13.2 String Collating
    Support for Complex Character Sets").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `<collation>` 数组指示字符应如何排序以进行比较和排序。 MySQL根据此信息的值对字符进行排序。 在某些情况下，这与 `<upper>`
    数组相同，这意味着排序不区分大小写。 对于更复杂的排序规则（用于复杂字符集），请参阅 [12.13.2 “复杂字符集的字符串排序支持”](string-collating.html
    "12.13.2 复杂字符集的字符串排序支持") 中有关字符串排序的讨论。
