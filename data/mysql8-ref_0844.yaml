- en: 14.17.1 JSON Function Reference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14.17.1 JSON 函数参考
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html](https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html](https://dev.mysql.com/doc/refman/8.0/en/json-function-reference.html)
- en: '**Table 14.22 JSON Functions**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**表格 14.22 JSON 函数**'
- en: '| Name | Description | Introduced | Deprecated |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 | 引入版本 | 弃用版本 |'
- en: '| [`->`](json-search-functions.html#operator_json-column-path) | Return value
    from JSON column after evaluating path; equivalent to JSON_EXTRACT(). |  |  |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`->`](json-search-functions.html#operator_json-column-path) | 在评估路径后从 JSON
    列返回值；等同于 JSON_EXTRACT()。 |  |  |'
- en: '| [`->>`](json-search-functions.html#operator_json-inline-path) | Return value
    from JSON column after evaluating path and unquoting the result; equivalent to
    JSON_UNQUOTE(JSON_EXTRACT()). |  |  |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`->>`](json-search-functions.html#operator_json-inline-path) | 在评估路径并取消引用结果后从
    JSON 列返回值；等同于 JSON_UNQUOTE(JSON_EXTRACT())。 |  |  |'
- en: '| [`JSON_ARRAY()`](json-creation-functions.html#function_json-array) | Create
    JSON array |  |  |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_ARRAY()`](json-creation-functions.html#function_json-array) | 创建 JSON
    数组 |  |  |'
- en: '| [`JSON_ARRAY_APPEND()`](json-modification-functions.html#function_json-array-append)
    | Append data to JSON document |  |  |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_ARRAY_APPEND()`](json-modification-functions.html#function_json-array-append)
    | 向 JSON 文档追加数据 |  |  |'
- en: '| [`JSON_ARRAY_INSERT()`](json-modification-functions.html#function_json-array-insert)
    | Insert into JSON array |  |  |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_ARRAY_INSERT()`](json-modification-functions.html#function_json-array-insert)
    | 插入 JSON 数组 |  |  |'
- en: '| [`JSON_CONTAINS()`](json-search-functions.html#function_json-contains) |
    Whether JSON document contains specific object at path |  |  |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_CONTAINS()`](json-search-functions.html#function_json-contains) |
    判断 JSON 文档是否包含特定路径的对象 |  |  |'
- en: '| [`JSON_CONTAINS_PATH()`](json-search-functions.html#function_json-contains-path)
    | Whether JSON document contains any data at path |  |  |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_CONTAINS_PATH()`](json-search-functions.html#function_json-contains-path)
    | 判断 JSON 文档是否在路径上包含任何数据 |  |  |'
- en: '| [`JSON_DEPTH()`](json-attribute-functions.html#function_json-depth) | Maximum
    depth of JSON document |  |  |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_DEPTH()`](json-attribute-functions.html#function_json-depth) | JSON
    文档的最大深度 |  |  |'
- en: '| [`JSON_EXTRACT()`](json-search-functions.html#function_json-extract) | Return
    data from JSON document |  |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_EXTRACT()`](json-search-functions.html#function_json-extract) | 从
    JSON 文档返回数据 |  |  |'
- en: '| [`JSON_INSERT()`](json-modification-functions.html#function_json-insert)
    | Insert data into JSON document |  |  |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_INSERT()`](json-modification-functions.html#function_json-insert)
    | 向 JSON 文档插入数据 |  |  |'
- en: '| [`JSON_KEYS()`](json-search-functions.html#function_json-keys) | Array of
    keys from JSON document |  |  |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_KEYS()`](json-search-functions.html#function_json-keys) | 从 JSON 文档中获取键数组
    |  |  |'
- en: '| [`JSON_LENGTH()`](json-attribute-functions.html#function_json-length) | Number
    of elements in JSON document |  |  |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_LENGTH()`](json-attribute-functions.html#function_json-length) | JSON
    文档中的元素数量 |  |  |'
- en: '| [`JSON_MERGE()`](json-modification-functions.html#function_json-merge) |
    Merge JSON documents, preserving duplicate keys. Deprecated synonym for JSON_MERGE_PRESERVE()
    |  | Yes |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_MERGE()`](json-modification-functions.html#function_json-merge) |
    合并 JSON 文档，保留重复的键。已弃用，JSON_MERGE_PRESERVE() 的同义词 |  | 是 |'
- en: '| [`JSON_MERGE_PATCH()`](json-modification-functions.html#function_json-merge-patch)
    | Merge JSON documents, replacing values of duplicate keys |  |  |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_MERGE_PATCH()`](json-modification-functions.html#function_json-merge-patch)
    | 合并 JSON 文档，替换重复键的值 |  |  |'
- en: '| [`JSON_MERGE_PRESERVE()`](json-modification-functions.html#function_json-merge-preserve)
    | Merge JSON documents, preserving duplicate keys |  |  |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_MERGE_PRESERVE()`](json-modification-functions.html#function_json-merge-preserve)
    | 合并 JSON 文档，保留重复的键 |  |  |'
- en: '| [`JSON_OBJECT()`](json-creation-functions.html#function_json-object) | Create
    JSON object |  |  |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_OBJECT()`](json-creation-functions.html#function_json-object) | 创建
    JSON 对象 |  |  |'
- en: '| [`JSON_OVERLAPS()`](json-search-functions.html#function_json-overlaps) |
    Compares two JSON documents, returns TRUE (1) if these have any key-value pairs
    or array elements in common, otherwise FALSE (0) | 8.0.17 |  |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_OVERLAPS()`](json-search-functions.html#function_json-overlaps) |
    比较两个 JSON 文档，如果有任何键值对或数组元素相同则返回 TRUE (1)，否则返回 FALSE (0) | 8.0.17 |  |'
- en: '| [`JSON_PRETTY()`](json-utility-functions.html#function_json-pretty) | Print
    a JSON document in human-readable format |  |  |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_PRETTY()`](json-utility-functions.html#function_json-pretty) | 以人类可读的格式打印
    JSON 文档 |  |  |'
- en: '| [`JSON_QUOTE()`](json-creation-functions.html#function_json-quote) | Quote
    JSON document |  |  |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_QUOTE()`](json-creation-functions.html#function_json-quote) | 引用 JSON
    文档 |  |  |'
- en: '| [`JSON_REMOVE()`](json-modification-functions.html#function_json-remove)
    | Remove data from JSON document |  |  |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_REMOVE()`](json-modification-functions.html#function_json-remove)
    | 从 JSON 文档中移除数据 |  |  |'
- en: '| [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)
    | Replace values in JSON document |  |  |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_REPLACE()`](json-modification-functions.html#function_json-replace)
    | 替换 JSON 文档中的值 |  |  |'
- en: '| [`JSON_SCHEMA_VALID()`](json-validation-functions.html#function_json-schema-valid)
    | Validate JSON document against JSON schema; returns TRUE/1 if document validates
    against schema, or FALSE/0 if it does not | 8.0.17 |  |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_SCHEMA_VALID()`](json-validation-functions.html#function_json-schema-valid)
    | 验证 JSON 文档是否符合 JSON 模式；如果文档符合模式，则返回 TRUE/1，否则返回 FALSE/0 | 8.0.17 |  |'
- en: '| [`JSON_SCHEMA_VALIDATION_REPORT()`](json-validation-functions.html#function_json-schema-validation-report)
    | Validate JSON document against JSON schema; returns report in JSON format on
    outcome on validation including success or failure and reasons for failure | 8.0.17
    |  |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_SCHEMA_VALIDATION_REPORT()`](json-validation-functions.html#function_json-schema-validation-report)
    | 针对 JSON 模式验证 JSON 文档；以 JSON 格式返回验证结果报告，包括成功或失败以及失败原因 | 8.0.17 |  |'
- en: '| [`JSON_SEARCH()`](json-search-functions.html#function_json-search) | Path
    to value within JSON document |  |  |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_SEARCH()`](json-search-functions.html#function_json-search) | JSON
    文档中值的路径 |  |  |'
- en: '| [`JSON_SET()`](json-modification-functions.html#function_json-set) | Insert
    data into JSON document |  |  |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_SET()`](json-modification-functions.html#function_json-set) | 向 JSON
    文档中插入数据 |  |  |'
- en: '| [`JSON_STORAGE_FREE()`](json-utility-functions.html#function_json-storage-free)
    | Freed space within binary representation of JSON column value following partial
    update |  |  |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_STORAGE_FREE()`](json-utility-functions.html#function_json-storage-free)
    | 部分更新后 JSON 列值的二进制表示中释放的空间 |  |  |'
- en: '| [`JSON_STORAGE_SIZE()`](json-utility-functions.html#function_json-storage-size)
    | Space used for storage of binary representation of a JSON document |  |  |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_STORAGE_SIZE()`](json-utility-functions.html#function_json-storage-size)
    | 存储 JSON 文档的二进制表示所使用的空间 |  |  |'
- en: '| [`JSON_TABLE()`](json-table-functions.html#function_json-table) | Return
    data from a JSON expression as a relational table |  |  |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_TABLE()`](json-table-functions.html#function_json-table) | 将 JSON
    表达式的数据作为关系表返回 |  |  |'
- en: '| [`JSON_TYPE()`](json-attribute-functions.html#function_json-type) | Type
    of JSON value |  |  |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_TYPE()`](json-attribute-functions.html#function_json-type) | JSON
    值的类型 |  |  |'
- en: '| [`JSON_UNQUOTE()`](json-modification-functions.html#function_json-unquote)
    | Unquote JSON value |  |  |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_UNQUOTE()`](json-modification-functions.html#function_json-unquote)
    | 取消 JSON 值的引号 |  |  |'
- en: '| [`JSON_VALID()`](json-attribute-functions.html#function_json-valid) | Whether
    JSON value is valid |  |  |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_VALID()`](json-attribute-functions.html#function_json-valid) | JSON
    值是否有效 |  |  |'
- en: '| [`JSON_VALUE()`](json-search-functions.html#function_json-value) | Extract
    value from JSON document at location pointed to by path provided; return this
    value as VARCHAR(512) or specified type | 8.0.21 |  |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`JSON_VALUE()`](json-search-functions.html#function_json-value) | 在路径指定的位置从
    JSON 文档中提取值；将此值作为 VARCHAR(512) 或指定类型返回 | 8.0.21 |  |'
- en: '| [`MEMBER OF()`](json-search-functions.html#operator_member-of) | Returns
    true (1) if first operand matches any element of JSON array passed as second operand,
    otherwise returns false (0) | 8.0.17 |  |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`MEMBER OF()`](json-search-functions.html#operator_member-of) | 如果第一个操作数与作为第二个操作数传递的
    JSON 数组的任何元素匹配，则返回 true (1)，否则返回 false (0) | 8.0.17 |  |'
- en: '| Name | Description | Introduced | Deprecated |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: 名称 | 描述 | 引入版本 | 废弃版本 |
- en: MySQL supports two aggregate JSON functions [`JSON_ARRAYAGG()`](aggregate-functions.html#function_json-arrayagg)
    and [`JSON_OBJECTAGG()`](aggregate-functions.html#function_json-objectagg). See
    [Section 14.19, “Aggregate Functions”](aggregate-functions-and-modifiers.html
    "14.19 Aggregate Functions"), for descriptions of these.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 支持两个聚合 JSON 函数 [`JSON_ARRAYAGG()`](aggregate-functions.html#function_json-arrayagg)
    和 [`JSON_OBJECTAGG()`](aggregate-functions.html#function_json-objectagg)。有关这些函数的描述，请参见
    [第 14.19 节，“聚合函数”](aggregate-functions-and-modifiers.html "14.19 Aggregate Functions")。
- en: MySQL also supports “pretty-printing” of JSON values in an easy-to-read format,
    using the [`JSON_PRETTY()`](json-utility-functions.html#function_json-pretty)
    function. You can see how much storage space a given JSON value takes up, and
    how much space remains for additional storage, using [`JSON_STORAGE_SIZE()`](json-utility-functions.html#function_json-storage-size)
    and [`JSON_STORAGE_FREE()`](json-utility-functions.html#function_json-storage-free),
    respectively. For complete descriptions of these functions, see [Section 14.17.8,
    “JSON Utility Functions”](json-utility-functions.html "14.17.8 JSON Utility Functions").
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL还支持以易于阅读的格式“漂亮打印”JSON值，使用[`JSON_PRETTY()`](json-utility-functions.html#function_json-pretty)函数。您可以通过[`JSON_STORAGE_SIZE()`](json-utility-functions.html#function_json-storage-size)和[`JSON_STORAGE_FREE()`](json-utility-functions.html#function_json-storage-free)函数，分别查看给定JSON值占用的存储空间以及剩余的存储空间。有关这些函数的完整描述，请参见[第14.17.8节，“JSON实用函数”](json-utility-functions.html
    "14.17.8 JSON Utility Functions")。
