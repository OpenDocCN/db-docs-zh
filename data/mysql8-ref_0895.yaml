- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/alter-table-examples.html](https://dev.mysql.com/doc/refman/8.0/en/alter-table-examples.html)
  id: totrans-0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/alter-table-examples.html](https://dev.mysql.com/doc/refman/8.0/en/alter-table-examples.html)
- en: 15.1.9.3 ALTER TABLE Examples
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 15.1.9.3 修改表示例
- en: 'Begin with a table `t1` created as shown here:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里创建一个名为`t1`的表：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To rename the table from `t1` to `t2`:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将表从`t1`重命名为`t2`：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To change column `a` from [`INTEGER`](integer-types.html "13.1.2 Integer Types
    (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT") to `TINYINT
    NOT NULL` (leaving the name the same), and to change column `b` from `CHAR(10)`
    to `CHAR(20)` as well as renaming it from `b` to `c`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 将列`a`从[`INTEGER`](integer-types.html "13.1.2 整数类型（精确值） - INTEGER, INT, SMALLINT,
    TINYINT, MEDIUMINT, BIGINT")更改为`TINYINT NOT NULL`（保持名称不变），将列`b`从`CHAR(10)`更改为`CHAR(20)`，并将其重命名为`c`：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To add a new [`TIMESTAMP`](datetime.html "13.2.2 The DATE, DATETIME, and TIMESTAMP
    Types") column named `d`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个名为`d`的新的[`TIMESTAMP`](datetime.html "13.2.2 日期、时间和时间戳类型")列：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To add an index on column `d` and a `UNIQUE` index on column `a`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在列`d`上添加一个索引和在列`a`上添加一个`UNIQUE`索引：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To remove column `c`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除列`c`：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To add a new `AUTO_INCREMENT` integer column named `c`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个名为`c`的新的`AUTO_INCREMENT`整数列：
- en: '[PRE6]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We indexed `c` (as a `PRIMARY KEY`) because `AUTO_INCREMENT` columns must be
    indexed, and we declare `c` as `NOT NULL` because primary key columns cannot be
    `NULL`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对`c`进行了索引（作为`PRIMARY KEY`），因为`AUTO_INCREMENT`列必须被索引，并且我们声明`c`为`NOT NULL`，因为主键列不能为`NULL`。
- en: 'For [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster 8.0") tables,
    it is also possible to change the storage type used for a table or column. For
    example, consider an [`NDB`](mysql-cluster.html "Chapter 25 MySQL NDB Cluster
    8.0") table created as shown here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`NDB`](mysql-cluster.html "第25章 MySQL NDB Cluster 8.0")表，也可以更改表或列使用的存储类型。例如，考虑一个如下所示创建的[`NDB`](mysql-cluster.html
    "第25章 MySQL NDB Cluster 8.0")表：
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To convert this table to disk-based storage, you can use the following [`ALTER
    TABLE`](alter-table.html "15.1.9 ALTER TABLE Statement") statement:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此表转换为基于磁盘的存储，您可以使用以下[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE 语句")语句：
- en: '[PRE8]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It is not necessary that the tablespace was referenced when the table was originally
    created; however, the tablespace must be referenced by the [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement"):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初创建表时不需要引用表空间；但是，在[`ALTER TABLE`](alter-table.html "15.1.9 ALTER TABLE 语句")中必须引用表空间：
- en: '[PRE9]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To change the storage type of an individual column, you can use `ALTER TABLE
    ... MODIFY [COLUMN]`. For example, suppose you create an NDB Cluster Disk Data
    table with two columns, using this [`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE Statement") statement:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改单个列的存储类型，可以使用`ALTER TABLE ... MODIFY [COLUMN]`。例如，假设您使用以下[`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE 语句")语句创建了一个具有两列的NDB Cluster Disk Data表：
- en: '[PRE10]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To change column `c2` from disk-based to in-memory storage, include a STORAGE
    MEMORY clause in the column definition used by the ALTER TABLE statement, as shown
    here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要将列`c2`从基于磁盘的存储更改为内存存储，在ALTER TABLE语句中使用列定义中的STORAGE MEMORY子句，如下所示：
- en: '[PRE11]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can make an in-memory column into a disk-based column by using `STORAGE
    DISK` in a similar fashion.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过类似的方式使用`STORAGE DISK`将内存列转换为基于磁盘的列。
- en: 'Column `c1` uses disk-based storage, since this is the default for the table
    (determined by the table-level `STORAGE DISK` clause in the [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement") statement). However, column `c2` uses in-memory
    storage, as can be seen here in the output of SHOW [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE Statement"):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 列`c1`使用基于磁盘的存储，因为这是表的默认设置（由[`CREATE TABLE`](create-table.html "15.1.20 CREATE
    TABLE 语句")语句中的表级`STORAGE DISK`子句确定）。然而，列`c2`使用内存存储，如在SHOW [`CREATE TABLE`](create-table.html
    "15.1.20 CREATE TABLE 语句")的输出中所示：
- en: '[PRE12]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When you add an `AUTO_INCREMENT` column, column values are filled in with sequence
    numbers automatically. For `MyISAM` tables, you can set the first sequence number
    by executing `SET INSERT_ID=*`value`*` before [`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE Statement") or by using the `AUTO_INCREMENT=*`value`*` table
    option.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当您添加一个`AUTO_INCREMENT`列时，列值会自动填充为序列号。对于`MyISAM`表，您可以在[`ALTER TABLE`](alter-table.html
    "15.1.9 ALTER TABLE 语句")之前执行`SET INSERT_ID=*`value`*`或使用`AUTO_INCREMENT=*`value`*`表选项来设置第一个序列号。
- en: With `MyISAM` tables, if you do not change the `AUTO_INCREMENT` column, the
    sequence number is not affected. If you drop an `AUTO_INCREMENT` column and then
    add another `AUTO_INCREMENT` column, the numbers are resequenced beginning with
    1.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`MyISAM`表，如果不更改`AUTO_INCREMENT`列，则序列号不受影响。如果删除一个`AUTO_INCREMENT`列，然后添加另一个`AUTO_INCREMENT`列，数字将从1开始重新排序。
- en: 'When replication is used, adding an `AUTO_INCREMENT` column to a table might
    not produce the same ordering of the rows on the replica and the source. This
    occurs because the order in which the rows are numbered depends on the specific
    storage engine used for the table and the order in which the rows were inserted.
    If it is important to have the same order on the source and replica, the rows
    must be ordered before assigning an `AUTO_INCREMENT` number. Assuming that you
    want to add an `AUTO_INCREMENT` column to the table `t1`, the following statements
    produce a new table `t2` identical to `t1` but with an `AUTO_INCREMENT` column:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用复制时，在表中添加一个`AUTO_INCREMENT`列可能导致副本和源之间的行排序不同。这是因为行编号的顺序取决于用于表的特定存储引擎以及插入行的顺序。如果在源和副本上具有相同的顺序很重要，则必须在分配`AUTO_INCREMENT`编号之前对行进行排序。假设您想要向表`t1`添加一个`AUTO_INCREMENT`列，以下语句将生成一个新表`t2`，与`t1`相同但带有一个`AUTO_INCREMENT`列：
- en: '[PRE13]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This assumes that the table `t1` has columns `col1` and `col2`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设表`t1`具有列`col1`和`col2`。
- en: 'This set of statements also produces a new table `t2` identical to `t1`, with
    the addition of an `AUTO_INCREMENT` column:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这组语句还会生成一个新表`t2`，与`t1`相同，但添加了一个`AUTO_INCREMENT`列：
- en: '[PRE14]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Important
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: To guarantee the same ordering on both source and replica, *all* columns of
    `t1` must be referenced in the `ORDER BY` clause.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要保证源和副本上的相同排序，必须在`ORDER BY`子句中引用`t1`的*所有*列。
- en: 'Regardless of the method used to create and populate the copy having the `AUTO_INCREMENT`
    column, the final step is to drop the original table and then rename the copy:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用何种方法创建和填充具有`AUTO_INCREMENT`列的副本，最后一步都是删除原始表，然后重命名副本：
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
