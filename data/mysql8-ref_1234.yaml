- en: 17.11.3 InnoDB Checkpoints
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 17.11.3 InnoDB 检查点
- en: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-checkpoints.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-checkpoints.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://dev.mysql.com/doc/refman/8.0/en/innodb-checkpoints.html](https://dev.mysql.com/doc/refman/8.0/en/innodb-checkpoints.html)
- en: Making your [log files](glossary.html#glos_log_file "log file") very large may
    reduce disk I/O during [checkpointing](glossary.html#glos_checkpoint "checkpoint").
    It often makes sense to set the total size of the log files as large as the buffer
    pool or even larger.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使你的[日志文件](glossary.html#glos_log_file "log file")变得非常大可能会在[检查点](glossary.html#glos_checkpoint
    "checkpoint")期间减少磁盘I/O。通常情况下，将日志文件的总大小设置为缓冲池的大小甚至更大是有意义的。
- en: How Checkpoint Processing Works
  id: totrans-3
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查点处理的工作原理
- en: '`InnoDB` implements a [checkpoint](glossary.html#glos_checkpoint "checkpoint")
    mechanism known as [fuzzy checkpointing](glossary.html#glos_fuzzy_checkpointing
    "fuzzy checkpointing"). `InnoDB` flushes modified database pages from the buffer
    pool in small batches. There is no need to flush the buffer pool in one single
    batch, which would disrupt processing of user SQL statements during the checkpointing
    process.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`InnoDB`实现了一种被称为[模糊检查点](glossary.html#glos_fuzzy_checkpointing "fuzzy checkpointing")的[检查点](glossary.html#glos_checkpoint
    "checkpoint")机制。`InnoDB`会将修改过的数据库页面以小批量方式从缓冲池刷新出去。在检查点过程中，没有必要一次性刷新缓冲池，这样会干扰用户SQL语句的处理过程。'
- en: During [crash recovery](glossary.html#glos_crash_recovery "crash recovery"),
    `InnoDB` looks for a checkpoint label written to the log files. It knows that
    all modifications to the database before the label are present in the disk image
    of the database. Then `InnoDB` scans the log files forward from the checkpoint,
    applying the logged modifications to the database.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在[崩溃恢复](glossary.html#glos_crash_recovery "crash recovery")期间，`InnoDB`会寻找写入日志文件的检查点标签。它知道标签之前对数据库的所有修改都存在于数据库的磁盘镜像中。然后，`InnoDB`从检查点开始向前扫描日志文件，将记录的修改应用到数据库中。
