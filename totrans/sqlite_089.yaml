- en: 1\. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 介绍
- en: 原文：[https://sqlite.com/vfs.html](https://sqlite.com/vfs.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/vfs.html](https://sqlite.com/vfs.html)
- en: This article describes the SQLite OS portability layer or "VFS" - the module
    at the bottom of the SQLite implementation stack that provides portability across
    operating systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本文描述了 SQLite 的操作系统可移植性层或称为“VFS” - 这是 SQLite 实现堆栈中的底部模块，提供跨操作系统的可移植性。
- en: 2\. The VFS In Relation To The Rest Of SQLite
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. VFS 与 SQLite 的其他部分的关系
- en: '![](../Images/4c694eef2019b62b0ae37ce4a53f2e48.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c694eef2019b62b0ae37ce4a53f2e48.png)'
- en: The internal organization of the SQLite library can be viewed as the stack of
    modules shown to the right. The Tokenizer, Parser, and Code Generator components
    are used to process SQL statements and convert them into executable programs in
    a virtual machine language or byte code. Roughly speaking, these top three layers
    implement [sqlite3_prepare_v2()](c3ref/prepare.html). The byte code generated
    by the top three layers is a [prepared statement](c3ref/stmt.html). The Virtual
    Machine module is responsible for running the SQL statement byte code. The B-Tree
    module organizes a database file into multiple key/value stores with ordered keys
    and logarithmic performance. The Pager module is responsible for loading pages
    of the database file into memory, for implementing and controlling transactions,
    and for creating and maintaining the journal files that prevent database corruption
    following a crash or power failure. The OS Interface is a thin abstraction that
    provides a common set of routines for adapting SQLite to run on different operating
    systems. Roughly speaking, the bottom four layers implement [sqlite3_step()](c3ref/step.html).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 库的内部组织可以看作是右侧显示的模块堆栈。分词器（Tokenizer）、解析器（Parser）和代码生成器（Code Generator）组件用于处理
    SQL 语句并将其转换为虚拟机语言或字节码中的可执行程序。粗略地说，这些顶层的三个层实现了 [sqlite3_prepare_v2()](c3ref/prepare.html)。顶层三层生成的字节码是一个
    [prepared statement](c3ref/stmt.html)。虚拟机模块负责运行 SQL 语句的字节码。B-Tree 模块将数据库文件组织成具有有序键和对数性能的多个键/值存储。Pager
    模块负责将数据库文件的页面加载到内存中，实现和控制事务，并创建和维护日志文件，以防止由崩溃或断电引起的数据库损坏。操作系统接口是一个薄的抽象层，提供了一组通用例程，以使
    SQLite 在不同的操作系统上运行。粗略地说，底部的四层实现了 [sqlite3_step()](c3ref/step.html)。
- en: This article is about the bottom layer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本文讨论底层。
- en: The OS Interface - also called the "VFS" - is what makes SQLite portable across
    operating systems. Whenever any of the other modules in SQLite needs to communicate
    with the operating system, they invoke methods in the VFS. The VFS then invokes
    the operating-specific code needed to satisfy the request. Hence, porting SQLite
    to a new operating system is simply a matter of writing a new OS interface layer
    or "VFS".
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统接口 - 也称为“VFS” - 是使 SQLite 能够跨操作系统运行的关键。当 SQLite 的其他模块需要与操作系统通信时，它们调用 VFS
    中的方法。然后，VFS 调用需要满足请求的特定操作系统代码。因此，将 SQLite 移植到新的操作系统只是编写新的操作系统接口层或“VFS”的问题。
- en: 3\. Multiple VFSes
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 多个 VFS
- en: The standard SQLite source tree contains built-in VFSes for unix and windows.
    Alternative VFSes can be added at start-time or run-time using the [sqlite3_vfs_register()](c3ref/vfs_find.html)
    interface.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 标准 SQLite 源代码树包含内置的 Unix 和 Windows VFS。可以在启动时或运行时使用 [sqlite3_vfs_register()](c3ref/vfs_find.html)
    接口添加替代 VFS。
- en: Multiple VFSes can be registered at the same time. Each VFS has a unique names.
    Separate [database connections](c3ref/sqlite3.html) within the same process can
    be using different VFSes at the same time. For that matter, if a single database
    connection has multiple database files open using the [ATTACH](lang_attach.html)
    command, then each attached database might be using a different VFS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可以同时注册多个 VFS。每个 VFS 都有唯一的名称。同一进程中的单独的 [数据库连接](c3ref/sqlite3.html) 可以同时使用不同的
    VFS。就此而言，如果单个数据库连接使用 [ATTACH](lang_attach.html) 命令打开了多个数据库文件，则每个附加的数据库可能使用不同的
    VFS。
- en: 3.1\. Standard Unix VFSes
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1\. 标准 Unix VFS
- en: 'Unix builds come with multiple built-in VFSes. The default VFS for unix is
    called "unix" and is used in most applications. Other VFSes that might be found
    in unix (depending on compile-time options) include:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 构建提供多个内置 VFS。Unix 的默认 VFS 名称为 "unix"，在大多数应用程序中使用。在 Unix 中还可以找到其他 VFS（取决于编译时选项），例如：
- en: '**unix-dotfile** - uses dot-file locking rather than POSIX advisory locks.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**unix-dotfile** - 使用点文件锁定而不是 POSIX 建议锁。'
- en: '**unix-excl** - obtains and holds an exclusive lock on database files, preventing
    other processes from accessing the database. Also keeps the [wal-index](walformat.html#shm)
    in heap rather than in shared memory.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**unix-excl** - 获取并保持对数据库文件的独占锁，防止其他进程访问数据库。还将 [wal-index](walformat.html#shm)
    保存在堆中，而不是在共享内存中。'
- en: '**unix-none** - all file locking operations are no-ops.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**unix-none** - 所有文件锁定操作都是无操作。'
- en: '**unix-namedsem** - uses named semaphores for file locking. VXWorks only.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**unix-namedsem** - 使用命名信号量进行文件锁定。仅适用于 VXWorks。'
- en: 'The various unix VFSes differ only in the way they handle file locking - they
    share most of their implementation in common with one another and are all located
    in the same SQLite source file: [os_unix.c](https://www.sqlite.org/src/doc/trunk/src/os_unix.c).
    Note that except for "unix" and "unix-excl", the various unix VFSes all use incompatible
    locking implementations. If two processes are accessing the same SQLite database
    using different unix VFSes, they may not see each others locks and may end up
    interfering with one another, resulting in database corruption. The "unix-none"
    VFS in particular does no locking at all and will easily result in database corruption
    if used by two or more database connections at the same time. Programmers are
    encouraged to use only "unix" or "unix-excl" unless there is a compelling reason
    to do otherwise.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 各种 Unix VFS 仅在处理文件锁定的方式上有所不同 - 它们大部分实现都是相同的，并且都位于同一个 SQLite 源文件中：[os_unix.c](https://www.sqlite.org/src/doc/trunk/src/os_unix.c)。请注意，除了
    "unix" 和 "unix-excl" 外，各种 Unix VFS 使用的锁定实现都是不兼容的。如果两个进程使用不同的 Unix VFS 访问同一个 SQLite
    数据库，则它们可能看不到对方的锁定，可能会相互干扰，导致数据库损坏。特别是 "unix-none" VFS 根本不进行任何锁定，如果同时被两个或更多的数据库连接使用，很容易导致数据库损坏。建议程序员只使用
    "unix" 或 "unix-excl"，除非有充分的理由使用其他 VFS。
- en: 3.2\. Standard Windows VFSes
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2\. 标准的 Windows VFS
- en: 'Windows builds also come with multiple built-in VFSes. The default Windows
    VFS is called "win32" and is used in most applications. Other VFSes that might
    be found on windows builds include:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 构建还带有多个内置的 VFS。默认的 Windows VFS 称为 "win32"，在大多数应用程序中使用。Windows 构建可能包含的其他
    VFS 包括：
- en: '**win32-longpath** - like "win32" except that pathnames can be up to 65534
    bytes in length, whereas pathnames max out at 1040 bytes in "win32".'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**win32-longpath** - 类似于 "win32"，但路径名可以长达 65534 字节，而在 "win32" 中路径名最多为 1040
    字节。'
- en: '**win32-none** - all file locking operations are no-ops.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**win32-none** - 所有文件锁定操作都是空操作。'
- en: '**win32-longpath-none** - combination of "win32-longpath" and "win32-none"
    - long pathnames are supported and all lock operations are no-ops.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**win32-longpath-none** - 结合了 "win32-longpath" 和 "win32-none" - 支持长路径名，所有锁定操作都是空操作。'
- en: As with unix, most of the code for the various Windows VFSes is shared.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Unix 一样，各种 Windows VFS 的大部分代码是共享的。
- en: 3.3\. Specifying Which VFS To Use
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3\. 指定要使用的 VFS
- en: There is always one VFS which is the default VFS. On unix systems, the "unix"
    VFS comes up as the default and on windows it is "win32". If no other actions
    are taken, new database connections will make use of the default VFS.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总是有一个 VFS 是默认的 VFS。在 Unix 系统上，默认为 "unix" VFS，在 Windows 上为 "win32"。如果没有其他操作，新的数据库连接将使用默认的
    VFS。
- en: 'The default VFS can be changed by registering or re-registering the VFS using
    the [sqlite3_vfs_register()](c3ref/vfs_find.html) interface with a second parameter
    of 1\. Hence, if a (unix) process wants to always use the "unix-nolock" VFS in
    place of "unix", the following code would work:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用 [sqlite3_vfs_register()](c3ref/vfs_find.html) 接口并将第二个参数设置为 1 来注册或重新注册
    VFS 以更改默认 VFS。因此，如果一个（unix）进程希望始终使用 "unix-nolock" VFS 替代 "unix"，以下代码将起作用：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'An alternate VFS can also be specified as the 4th parameter to the [sqlite3_open_v2()](c3ref/open.html)
    function. For example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以将备用 VFS 作为 [sqlite3_open_v2()](c3ref/open.html) 函数的第四个参数指定。例如：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, if [URI filenames](uri.html) have been enabled, then the alternative
    VFS can be specified using the "vfs=" parameter on the URI. This technique works
    with [sqlite3_open()](c3ref/open.html), [sqlite3_open16()](c3ref/open.html), [sqlite3_open_v2()](c3ref/open.html),
    and when a new database is [ATTACH](lang_attach.html)-ed to an existing database
    connection. For example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果启用了 [URI 文件名](uri.html)，那么可以通过 URI 上的 "vfs=" 参数来指定替代 VFS。这个技术可以与 [sqlite3_open()](c3ref/open.html)，[sqlite3_open16()](c3ref/open.html)，[sqlite3_open_v2()](c3ref/open.html)
    以及在已存在的数据库连接上进行新数据库 [ATTACH](lang_attach.html) 时使用。例如：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The VFS specified by a URI has the highest priority. After that comes a VFS
    specified as the fourth argument to [sqlite3_open_v2()](c3ref/open.html). The
    default VFS is used if no VFS is specified otherwise.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由 URI 指定的 VFS 优先级最高。其次是作为 [sqlite3_open_v2()](c3ref/open.html) 第四个参数指定的 VFS。如果未指定
    VFS，则使用默认 VFS。
- en: 3.4\. VFS Shims
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4\. VFS Shims
- en: From the point of view of the uppers layers of the SQLite stack, each open database
    file uses exactly one VFS. But in practice, a particular VFS might just be a thin
    wrapper around another VFS that does the real work. We call a wrapper VFS a "shim".
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQLite 栈的上层来看，每个打开的数据库文件都会使用一个 VFS。但实际上，某个特定的 VFS 可能只是另一个执行实际工作的 VFS 的薄包装。我们称包装的
    VFS 为“shim”。
- en: A simple example of a shim is the "vfstrace" VFS. This is a VFS (implemented
    in the [test_vfstrace.c](https://www.sqlite.org/src/doc/trunk/src/test_vfstrace.c)
    source file) that writes a message associated with each VFS method call into a
    log file, then passes control off to another VFS to do the actual work.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的 shim 示例是 "vfstrace" VFS。这是一个 VFS（在 [test_vfstrace.c](https://www.sqlite.org/src/doc/trunk/src/test_vfstrace.c)
    源文件中实现），它在每个 VFS 方法调用时将关联的消息写入日志文件，然后将控制传递给另一个 VFS 来执行实际工作。
- en: 3.5\. Other Example VFSes
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.5\. 其他示例 VFS
- en: 'The following are other VFS implementations available in the public SQLite
    source tree:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是公共 SQLite 源树中可用的其他 VFS 实现：
- en: '[appendvfs.c](https://www.sqlite.org/src/file/ext/misc/appendvfs.c) - This
    VFS allows an SQLite database to be appended to the end of some other file. This
    can be used, for example, to append an SQLite database onto the end of an executable
    such that, when run, it can easily locate the appended database. The [command-line
    shell](cli.html) will use this VFS if launched with the --append option, and its
    .archive command will use it given the --append flag.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[appendvfs.c](https://www.sqlite.org/src/file/ext/misc/appendvfs.c) - 这个VFS允许将SQLite数据库附加到另一个文件的末尾。例如，可以将SQLite数据库附加到可执行文件的末尾，这样在运行时可以轻松定位附加的数据库。如果使用--append选项启动命令行shell，它将使用这个VFS，其.archive命令在使用--append标志时也会使用它。'
- en: '[test_demovfs.c](https://www.sqlite.org/src/doc/trunk/src/test_demovfs.c) -
    This file implements a very simple VFS named "demo" that uses POSIX functions
    such as open(), read(), write(), fsync(), close(), fsync(), sleep(), time(), and
    so forth. This VFS only works on unix systems. But it is not intended as a replacement
    for the standard "unix" VFS used by default on unix platforms. The "demo" VFS
    is deliberately kept very simple so that it can be used as a learning aid or as
    template for building other VFSes or for porting SQLite to new operating systems.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_demovfs.c](https://www.sqlite.org/src/doc/trunk/src/test_demovfs.c) -
    该文件实现了一个名为"demo"的非常简单的虚拟文件系统（VFS），使用诸如 open()、read()、write()、fsync()、close()、fsync()、sleep()、time()
    等 POSIX 函数。这个 VFS 只在Unix系统上工作。但它不打算替代Unix平台上默认使用的标准"unix" VFS。"demo" VFS 故意保持非常简单，以便用作学习辅助工具或作为构建其他VFS或将SQLite移植到新操作系统的模板。'
- en: '[test_quota.c](https://www.sqlite.org/src/doc/trunk/src/test_quota.c) - This
    file implements a shim called "quota" that enforces cumulative file size limits
    on a collection of database files. An auxiliary interface is used to define "quota
    groups". A quota group is a set of files (database files, journals, and temporary
    files) whose names all match a [GLOB](lang_expr.html#glob) pattern. The sum of
    the sizes of all files in each quota group is tracked, and if that sum exceeds
    a threshold defined for the quota group, a callback function is invoked. That
    callback can either increase the threshold or cause the operation that would have
    exceeded the quota to fail with an [SQLITE_FULL](rescode.html#full) error. One
    of the uses of this shim is used to enforce resource limits on application databases
    in Firefox.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_quota.c](https://www.sqlite.org/src/doc/trunk/src/test_quota.c) - 该文件实现了一个名为"quota"的适配器，它在一组数据库文件上强制执行累积文件大小限制。使用辅助接口来定义"quota
    groups"。Quota group是一组文件（数据库文件、日志和临时文件），它们的名称都匹配一个[GLOB](lang_expr.html#glob)模式。跟踪每个配额组中所有文件的大小总和，如果该总和超过为配额组定义的阈值，则调用回调函数。该回调可以增加阈值，或者导致超过配额的操作失败，并显示[SQLITE_FULL](rescode.html#full)错误。这个适配器的一个用途是在Firefox中对应用程序数据库施加资源限制。'
- en: '[test_multiplex.c](https://www.sqlite.org/src/doc/trunk/src/test_multiplex.c)
    - This file implements a shim that allows database files to exceed the maximum
    file size of the underlying filesystem. This shim presents an interface to the
    upper six layers of SQLite that makes it look like very large files are being
    used, when in reality each such large file is split up into many smaller files
    on the underlying system. This shim has been used, for example, to allow databases
    to grow larger than 2 gibibytes on FAT16 filesystems.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_multiplex.c](https://www.sqlite.org/src/doc/trunk/src/test_multiplex.c)
    - 此文件实现了一个插座，允许数据库文件超过底层文件系统的最大文件大小。这个插座为 SQLite 的上层六层提供了一个接口，使得看起来像是在使用非常大的文件，但实际上每个这样的大文件在底层系统上被分割成许多更小的文件。例如，这个插座已经被用来允许数据库在
    FAT16 文件系统上增长超过 2 gibibytes。'
- en: '[test_onefile.c](https://www.sqlite.org/src/doc/trunk/src/test_onefile.c) -
    This file implements a demonstration VFS named "fs" that shows how SQLite can
    be used on an embedded device that lacks a filesystem. Content is written directly
    to the underlying media. A VFS derived from this demonstration code could be used
    by a gadget with a limited amount of flash memory to make SQLite behave as the
    filesystem for the flash memory on the device.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_onefile.c](https://www.sqlite.org/src/doc/trunk/src/test_onefile.c) -
    此文件实现了一个名为“fs”的演示虚拟文件系统（VFS），展示了 SQLite 如何在缺乏文件系统的嵌入式设备上使用。内容直接写入底层介质。可以从这个演示代码派生一个
    VFS，使得一个具有有限闪存的小设备能够使 SQLite 表现为设备上的闪存文件系统。'
- en: '[test_journal.c](https://www.sqlite.org/src/doc/trunk/src/test_journal.c) -
    This file implements a shim used during SQLite testing that verifies that the
    database and rollback journal are written in the correct order and are "synced"
    at appropriate times in order to guarantee that the database can recover from
    a power loss or hard reset at any time. The shim checks several invariants on
    the operation of databases and rollback journals and raises exceptions if any
    of those invariants are violated. These invariants, in turn, assure that the database
    is always recoverable. Running a large suite of test cases using this shim provides
    added assurance that SQLite databases will not be damaged by unexpected power
    failures or device resets.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_journal.c](https://www.sqlite.org/src/doc/trunk/src/test_journal.c) -
    此文件实现了 SQLite 测试中使用的一个插座，用于验证数据库和回滚日志的正确写入顺序，并在适当的时候进行“同步”，以确保数据库可以在任何时候从断电或硬重置中恢复。该插座检查数据库和回滚日志操作的几个不变量，并在违反任何这些不变量时引发异常。这些不变量反过来又保证了数据库始终是可恢复的。使用此插座运行一大套测试用例能够额外保证
    SQLite 数据库不会因意外的断电或设备重置而损坏。'
- en: '[test_vfs.c](https://www.sqlite.org/src/doc/trunk/src/test_vfs.c) - This file
    implements a shim that can be used to simulate filesystem faults. This shim is
    used during testing to verify that SQLite responses sanely to hardware malfunctions
    or to other error conditions such as running out of filesystem space that are
    difficult to test on a real system.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_vfs.c](https://www.sqlite.org/src/doc/trunk/src/test_vfs.c) - 此文件实现了一个用于模拟文件系统故障的接口。在测试过程中使用此接口来验证SQLite对硬件故障或其他难以在真实系统上测试的错误条件的合理响应。'
- en: There are other VFS implementations both in the core SQLite source code library
    and in available extensions. The list above is not meant to be exhaustive but
    merely representative of the kinds of features that can be realized using the
    VFS interface.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 核心SQLite源代码库和可用扩展中还有其他VFS实现。上述列表并非详尽无遗，只是VFS接口可以实现的功能类型的代表。
- en: 4\. VFS Implementations
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. VFS 实现
- en: 'A new VFS is implemented by subclassing three objects:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对三个对象进行子类化来实现新的VFS：
- en: '[sqlite3_vfs](c3ref/vfs.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_vfs](c3ref/vfs.html)'
- en: '[sqlite3_io_methods](c3ref/io_methods.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_io_methods](c3ref/io_methods.html)'
- en: '[sqlite3_file](c3ref/file.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_file](c3ref/file.html)'
- en: An [sqlite3_vfs](c3ref/vfs.html) object defines the name of the VFS and the
    core methods that implement the interface to the operating system, such as checking
    for existence of files, deleting files, creating files and opening and for reading
    and/or writing, converting filenames into their canonical form. The [sqlite3_vfs](c3ref/vfs.html)
    object also contains methods for obtaining randomness from the operating system,
    for suspending a process (sleeping) and for finding the current date and time.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [sqlite3_vfs](c3ref/vfs.html) 对象定义了VFS的名称和实现操作系统接口的核心方法，比如检查文件是否存在、删除文件、创建文件、打开文件进行读取和/或写入、将文件名转换为它们的规范形式。[sqlite3_vfs](c3ref/vfs.html)
    对象还包含了从操作系统获取随机数的方法，挂起进程（睡眠）的方法以及查找当前日期和时间的方法。
- en: The [sqlite3_file](c3ref/file.html) object represents an open file. The xOpen
    method of [sqlite3_vfs](c3ref/vfs.html) constructs an [sqlite3_file](c3ref/file.html)
    object when the file is opened. The [sqlite3_file](c3ref/file.html) keeps track
    of the state of the file while it is opened.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[sqlite3_file](c3ref/file.html) 对象表示一个打开的文件。当文件打开时，[sqlite3_vfs](c3ref/vfs.html)
    的 xOpen 方法构造一个 [sqlite3_file](c3ref/file.html) 对象。[sqlite3_file](c3ref/file.html)
    对象在文件打开期间跟踪文件的状态。'
- en: The [sqlite3_io_methods](c3ref/io_methods.html) object holds the methods used
    to interact with an open file. Each [sqlite3_file](c3ref/file.html) contains a
    pointer to an [sqlite3_io_methods](c3ref/io_methods.html) object that is appropriate
    for the file it represents. The [sqlite3_io_methods](c3ref/io_methods.html) object
    contains methods to do things such as read and write from the file, to truncate
    the file, to flush any changes to persistent storage, to find the size of the
    file, to lock and unlock the file, and to close file and destroy the [sqlite3_file](c3ref/file.html)
    object.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[sqlite3_io_methods](c3ref/io_methods.html) 对象包含用于与打开文件交互的方法。每个 [sqlite3_file](c3ref/file.html)
    包含一个指向适用于其所代表文件的 [sqlite3_io_methods](c3ref/io_methods.html) 对象的指针。[sqlite3_io_methods](c3ref/io_methods.html)
    对象包含诸如读取和写入文件、截断文件、将任何更改刷新到持久存储、查找文件大小、锁定和解锁文件、关闭文件和销毁 [sqlite3_file](c3ref/file.html)
    对象等方法。'
- en: Writing the code for a new VFS involves constructing a subclass for the [sqlite3_vfs](c3ref/vfs.html)
    object and then registering that VFS object using a call to [sqlite3_vfs_register()](c3ref/vfs_find.html).
    The VFS implementation also provides subclasses for [sqlite3_file](c3ref/file.html)
    and [sqlite3_io_methods](c3ref/io_methods.html) but those objects are not registered
    directly with SQLite. Instead, the [sqlite3_file](c3ref/file.html) object is returned
    from the xOpen method of [sqlite3_vfs](c3ref/vfs.html) and the [sqlite3_file](c3ref/file.html)
    object points to an instance of the [sqlite3_io_methods](c3ref/io_methods.html)
    object.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 编写新 VFS 的代码涉及构造一个 [sqlite3_vfs](c3ref/vfs.html) 对象的子类，然后通过调用 [sqlite3_vfs_register()](c3ref/vfs_find.html)
    注册该 VFS 对象。VFS 的实现还为 [sqlite3_file](c3ref/file.html) 和 [sqlite3_io_methods](c3ref/io_methods.html)
    提供了子类，但这些对象不会直接注册到 SQLite。相反，[sqlite3_file](c3ref/file.html) 对象从 [sqlite3_vfs](c3ref/vfs.html)
    的 xOpen 方法返回，并且 [sqlite3_file](c3ref/file.html) 对象指向 [sqlite3_io_methods](c3ref/io_methods.html)
    对象的一个实例。
