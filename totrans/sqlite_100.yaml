- en: 1\. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. Introduction
- en: 原文：[https://sqlite.com/privatebranch.html](https://sqlite.com/privatebranch.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/privatebranch.html](https://sqlite.com/privatebranch.html)
- en: SQLite is designed to meet most developer's needs without any changes or customization.
    When changes are needed, they can normally be accomplished using start-time [(1)](c3ref/config.html)
    or runtime [(2)](c3ref/db_config.html) [(3)](c3ref/limit.html) [(4)](c3ref/vfs_find.html)
    configuration methods or via [compile-time options](compile.html). It is very
    rare that an application developer will need to edit the SQLite source code in
    order to incorporate SQLite into a product.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 被设计为在不进行任何更改或自定义的情况下满足大多数开发者的需求。当需要更改时，通常可以使用启动时 [(1)](c3ref/config.html)
    或运行时 [(2)](c3ref/db_config.html) [(3)](c3ref/limit.html) [(4)](c3ref/vfs_find.html)
    配置方法或通过[编译时选项](compile.html)来完成。在将 SQLite 集成到产品中时，几乎不需要应用程序开发者编辑 SQLite 源代码。
- en: We call custom modifications to the SQLite source code that are held for the
    use of a single application a "private branch". When a private branch becomes
    necessary, the application developer must take on the task of keeping the private
    branch in synchronization with the public SQLite sources. This is tedious. It
    can also be tricky, since while the SQLite file format and published interfaces
    are very stable, the internal implementation of SQLite changes quite rapidly.
    Hundreds or thousands of lines of code might change for any given SQLite point
    release.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称对 SQLite 源代码进行的定制修改，仅供单个应用程序使用的私有分支为"私有分支"。当需要私有分支时，应用程序开发者必须承担将私有分支与公共 SQLite
    源代码同步的任务。这是一项繁琐的工作。它也可能会很棘手，因为尽管 SQLite 的文件格式和公布的接口非常稳定，但 SQLite 的内部实现变化非常迅速。对于任何给定的
    SQLite 点发布，可能会有数百甚至数千行代码发生变化。
- en: This article outlines one possible method for keeping a private branch of SQLite
    in sync with the public SQLite source code. There are many ways of maintaining
    a private branch, of course. Nobody is compelled to use the method describe here.
    This article is not trying to impose a particular procedure on maintainers of
    private branches. The point of this article is to offer an example of one process
    for maintaining a private branch which can be used as a template for designing
    processes best suited for the circumstances of each individual project.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本文概述了一种可能的方法，用于将 SQLite 的私有分支与公共 SQLite 源代码保持同步。当然，有许多维护私有分支的方法。没有人被迫使用本文所描述的方法。本文并不试图强加于私有分支的维护者特定的程序。本文的目的是提供一个维护私有分支的示例过程，可以作为设计最适合每个项目情况的过程模板。
- en: '![](../Images/add7fadadfc2360b12c636e9078a9230.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/add7fadadfc2360b12c636e9078a9230.png)'
- en: 2\. The Basic Idea
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. The Basic Idea
- en: We propose to use the [fossil software configuration management](http://www.fossil-scm.org)
    system to set up two branches. One branch (the "public branch" or "trunk") contains
    the published SQLite sources and the other branch is the private branch which
    contains the code that is customized for the project. Whenever a new public release
    of SQLite is made, that release is added to the public branch and then the changes
    are merged into the private branch.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用[fossil软件配置管理](http://www.fossil-scm.org)系统设置两个分支。一个分支（“公共分支”或“主干”）包含发布的
    SQLite 源代码，另一个分支是包含为项目定制的代码的私有分支。每当发布新的公共 SQLite 版本时，该版本将被添加到公共分支，然后将更改合并到私有分支。
- en: This document proposes to use [fossil](http://www.fossil-scm.org/), but any
    other distributed software configuration management system such as [monotone](http://www.monotone.ca/)
    or [mercurial](http://www.selenic.com/mercurial/wiki/) (a.k.a. "hg"), or [git](http://www.git-scm.org/)
    could serve just as well. The concept will be the same, though the specifics of
    the procedure will vary.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文建议使用[fossil](http://www.fossil-scm.org/)，但任何其他分布式软件配置管理系统，如[monotone](http://www.monotone.ca/)或[mercurial](http://www.selenic.com/mercurial/wiki/)（也称为“hg”），或[git](http://www.git-scm.org/)同样适用。概念是相同的，尽管具体的步骤会有所不同。
- en: The diagram at the right illustrates the concept. One begins with a standard
    SQLite release. For the sake of example, suppose that one intends to create a
    private branch off of SQLite version 3.6.15\. In the diagram this is version (1).
    The maintainer makes an exact copy of the baseline SQLite into the branch space,
    shown as version (2). Note that (1) and (2) are exactly the same. Then the maintainer
    applies the private changes to version (2) resulting in version (3). In other
    words, version (3) is SQLite version 3.6.15 plus edits.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的图示说明了这个概念。我们从标准的 SQLite 发布版本开始。举个例子，假设我们打算从 SQLite 版本 3.6.15 创建一个私有分支。在图中，这是版本（1）。维护者将基线的
    SQLite 完全复制到分支空间中，显示为版本（2）。请注意版本（1）和（2）完全相同。然后维护者将私有更改应用于版本（2），得到版本（3）。换句话说，版本（3）是
    SQLite 版本 3.6.15 加上修改。
- en: Later, SQLite version 3.6.16 is released, as shown by circle (4) in the diagram.
    At the point, the private branch maintainer does a merge which takes all of the
    changes going from (1) to (4) and applies those changes to (3). The result is
    version (5), which is SQLite 3.6.16 plus edits.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，SQLite 版本 3.6.16 发布了，如图中的圆圈（4）所示。在这一点上，私有分支的维护者执行合并操作，将从（1）到（4）的所有更改应用于（3）。结果是版本（5），这是
    SQLite 3.6.16 加上修改。
- en: There might be merge conflicts. In other words, it might be that the changes
    from (2) to (3) are incompatible with the changes from (1) to (4). In that case,
    the maintainer will have to manually resolve the conflicts. Hopefully conflicts
    will not come up that often. Conflicts are less likely to occur when the private
    edits are kept to a minimum.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会出现合并冲突。换句话说，从（2）到（3）的更改可能与从（1）到（4）的更改不兼容。在这种情况下，维护者将不得不手动解决冲突。希望冲突不会经常发生。当最小化私有编辑时，冲突发生的可能性较小。
- en: The cycle above can be repeated many times. The diagram shows a third SQLite
    release, 3.6.17 in circle (6). The private branch maintainer can do another merge
    in order to incorporate the changes moving from (4) to (6) into the private branch,
    resulting in version (7).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 上述周期可以重复多次。图示显示第三个 SQLite 发布版本为 3.6.17，位于圆圈（6）中。私有分支维护者可以进行另一次合并，以将从（4）到（6）的更改合并到私有分支中，形成版本（7）。
- en: 3\. The Procedure
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 过程
- en: The remainder of this document will guide the reader through the steps needed
    to maintain a private branch. The general idea is the same as outlined above.
    This section merely provides more detail.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档的其余部分将引导读者完成维护私有分支所需的步骤。总体思路与上文概述的相同。本节仅提供更详细的信息。
- en: We emphasize again that these steps are not intended to be the only acceptable
    method for maintaining private branch. This approach is one of many. Use this
    document as a baseline for preparing project-specific procedures. Do not be afraid
    to experiment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次强调，这些步骤并不意味着维护私有分支的唯一可接受方法。这种方法只是众多方法之一。将本文档作为准备项目特定程序的基准。不要害怕尝试不同的方法。
- en: 3.1\. Obtain The Software
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1\. 获取软件
- en: '[Fossil](http://www.fossil-scm.org/) is a computer program that must be installed
    on your machine before you use it. Fortunately, installing fossil is very easy.
    Fossil is a single "*.exe" file that you simply download and run. To uninstall
    fossil, simply delete the exe file. [Detailed instructions](http://www.fossil-scm.org/index.html/doc/tip/www/quickstart.wiki)
    for installing and getting started with fossil are available on the [fossil website](http://www.fossil-scm.org).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[Fossil](http://www.fossil-scm.org/) 是一款必须在您的计算机上安装后才能使用的计算机程序。幸运的是，安装 Fossil
    非常简单。Fossil 只是一个单独的 "*.exe" 文件，您只需下载并运行即可。要卸载 Fossil，只需删除 exe 文件。有关安装和开始使用 Fossil
    的详细说明，请访问 [fossil 网站](http://www.fossil-scm.org/index.html/doc/tip/www/quickstart.wiki)。您可以在
    [fossil 网站](http://www.fossil-scm.org) 上找到。'
- en: 3.2\. Create A Project Repository
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2\. 创建项目存储库
- en: 'Create a fossil repository to host the private branch using the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个 Fossil 存储库来托管私有分支：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can call your project anything you like. The "`.fossil`" suffix is optional.
    For this document, we will continue to call the project "`private-project.fossil`".
    Note that `private-project.fossil` is an ordinary disk file (actually an SQLite
    database) that will contain your complete project history. You can make a backup
    of the project simply by making a copy of that one file.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随意命名你的项目。".fossil" 后缀是可选的。对于本文档，我们将继续称该项目为 "`private-project.fossil`"。请注意，`private-project.fossil`
    是一个普通的磁盘文件（实际上是一个 SQLite 数据库），它将包含你的完整项目历史记录。你可以通过复制该文件来简单地备份项目。
- en: 'If you want to configure the new project, type:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想配置新项目，请输入：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The "ui" command will cause fossil to run a miniature built-in webserver and
    to launch your web-browser pointing at that webserver. You can use your web-browser
    to configure your project in various ways. See the instructions on the fossil
    website for additional information.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '"ui" 命令会让 Fossil 运行一个迷你内置 Web 服务器，并启动你的 Web 浏览器指向该服务器。你可以使用 Web 浏览器以各种方式配置你的项目。请参阅
    Fossil 网站上的说明获取更多信息。'
- en: 'Once the project repository is created, create an open checkout of the project
    by moving to the directory where you want to keep all of the project source code
    and typing:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目存储库创建完成，通过移动到你希望保留所有项目源代码的目录，并输入以下命令，创建项目的开放式检出：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can have multiple checkouts of the same project if you want. And you can
    "clone" the repository to different machines so that multiple developers can use
    it. See the fossil website for further information.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以在同一项目上进行多个检出。并且你可以将存储库“克隆”到不同的计算机上，以便多个开发者可以使用它。有关详细信息，请参阅 Fossil 网站。
- en: 3.3\. Installing The SQLite Baseline In Fossil
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3\. 在 Fossil 中安装 SQLite 基线
- en: The repository created in the previous step is initially empty. The next step
    is to load the baseline SQLite release - circle (1) in the diagram above.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一步创建的存储库最初是空的。下一步是加载基线 SQLite 发布版本 - 如上图中的圆圈（1）所示。
- en: Begin by obtaining a copy of SQLite in whatever form you use it. The public
    SQLite you obtain should be as close to your private edited copy as possible.
    If your project uses the SQLite amalgamation, then get a copy of the amalgamation.
    If you use the preprocessed separate source files, get those instead. Put all
    the source files in the checkout directory created in the previous step.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先获取 SQLite 的副本，以你使用的任何形式。你获取的公共 SQLite 应尽可能接近你的私人编辑副本。如果你的项目使用 SQLite 集成版本，那么获取集成版本的副本。如果使用预处理的单独源文件，则获取这些文件。将所有源文件放在上一步创建的检出目录中。
- en: 'The source code in public SQLite releases uses unix line endings (ASCII code
    10: "newline" only, NL) and spaces instead of tabs. If you will be changing the
    line ending to windows-style line endings (ASCII codes 13, 10: "carriage-return"
    and "newline"; CR-NL) or if you will be changing space indents into tab indents,
    **make that change now** before you check in the baseline. The merging process
    will only work well if the differences between the public and the private branches
    are minimal. If every single line of the source file is changed in the private
    branch because you changed from NL to CR-NL line endings, then the merge steps
    will not work correctly.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 公共SQLite发布版本中的源代码使用Unix换行符（ASCII码10："换行符"，NL）和空格代替制表符。如果你将换行符更改为Windows风格的换行符（ASCII码13、10："回车符"和"换行符"，CR-NL），或者将空格缩进改为制表符缩进，**现在就进行更改**，然后再签入基准线。只有公共分支和私有分支之间的差异很小，合并过程才能正常工作。如果因为从NL到CR-NL换行符的更改导致私有分支中每一行源文件都被更改，那么合并步骤将无法正确执行。
- en: 'Let us assume that you are using the amalgamation source code. Add the baseline
    to your project as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在使用聚合源代码。按以下步骤将基准线添加到你的项目中：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you are using separate source files, name all of the source files instead
    of just the two amalgamation source files. Once this is done, commit your changes
    as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用单独的源文件，请命名所有源文件，而不仅仅是两个聚合源文件。完成此步骤后，请按以下步骤提交你的更改：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will be prompted for a check-in comment. Say whatever you like. After the
    commit completes, your baseline will be part of the repository. The following
    command, if you like, to see this on the "timeline":'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会要求你输入一个签入注释。可以随意输入。提交完成后，你的基准线将成为仓库的一部分。如果愿意，可以运行以下命令查看此过程在“时间轴”上的显示：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That last command is the same "ui" command that we ran before. It starts a mini-webserver
    running and points your web browser at it. But this time we didn't have to specify
    the repository file because we are located inside a checkout and so fossil can
    figure out the repository for itself. If you want to type in the repository filename
    as the second argument, you can. But it is optional.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令与我们之前运行的“ui”命令相同。它启动一个运行中的迷你Web服务器，并将你的Web浏览器指向它。但这次我们不需要指定仓库文件，因为我们位于一个检出中，所以Fossil可以自行找到仓库。如果愿意，可以将仓库文件名作为第二个参数输入，但这是可选的。
- en: 'If you do not want to use your web browser to view the new check-in, you can
    get some information from the command-line using commands like these:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用浏览器查看新的签入信息，你可以使用类似以下命令从命令行获取一些信息：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 3.4\. Creating The Private Branch
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.4\. 创建私有分支
- en: 'The previous step created circle (1) in the diagram above. This step will create
    circle (2). Run the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上一步在上图中创建了圆圈（1）。这一步将创建圆圈（2）。运行以下命令：
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command will create a new branch named "private" (you can use a different
    name if you like) and assign it a background color of light blue ("#add8e8").
    You can omit the background color if you want, though having a distinct background
    does make it easier to tell the branch from the "trunk" (the public branch) on
    timeline displays. You can change the background color of the private branch or
    of the public branch (the "trunk") using the web interface if you like.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个名为"private"的新分支（如果愿意，可以使用不同的名称），并分配给它浅蓝色的背景色（"#add8e8"）。如果你愿意，可以省略背景色，不过有一个独特的背景色可以使得在时间轴显示中更容易区分"trunk"（公共分支）和"private"分支。如果愿意，你可以通过Web界面更改私有分支或公共分支（"trunk"）的背景色。
- en: 'The command above created the new branch. But your checkout is still on the
    trunk - a fact you can see by running the command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令创建了新分支。但你的检出仍然在主干上 - 你可以通过运行以下命令确认这一点：
- en: '[PRE8]'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To change your check-out to the private branch, type:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要将检出切换到私有分支，请输入：
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can run the "info" command again to verify that you are on the private
    branch. To go back to the public branch, type:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以再次运行"info"命令来验证你当前位于私有分支上。要返回到公共分支，请键入：
- en: '[PRE10]'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Normally, fossil will modify all the files in your checkout when switching between
    the private and the public branches. But at this point, the files are identical
    in both branches so no modifications need to be made.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当在私有和公共分支之间切换时，fossil会修改检出中的所有文件。但在此时，两个分支中的文件是相同的，因此不需要进行修改。
- en: 3.5\. Adding Customizations To The Code In The Private Branch
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.5\. 在私有分支中为代码添加自定义内容
- en: 'Now it is time to make the private, custom modifications to SQLite which are
    the whole point of this exercise. Switch to the private branch (if you are not
    already there) using the "`fossil update private`" command, then bring up the
    source files in your text editor and make whatever changes you want to make. Once
    you have finished making changes, commit those changes using this command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候对SQLite进行私有的自定义修改了，这也是此操作的重点。使用"`fossil update private`"命令切换到私有分支（如果你还没有在那里），然后在文本编辑器中打开源文件并进行你想要的任何更改。完成更改后，请使用以下命令提交这些更改：
- en: '[PRE11]'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You will be prompted once again to enter a commit describing your changes. Then
    the commit will occur. The commit creates a new checkin in the repository that
    corresponds to circle (3) in the diagram above.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你将再次被提示输入描述更改的提交。然后提交将会执行。提交将在存储库中创建一个新的检入，对应于上图中的圆圈（3）。
- en: Now that the public and private branches are different, you can run the "`fossil
    update trunk`" and "`fossil update private`" commands and see that fossil really
    does change the files in the checkout as you switch back and forth between branches.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在公共分支和私有分支不同，你可以运行"`fossil update trunk`"和"`fossil update private`"命令，看看在你在分支之间切换时，fossil确实会改变检出中的文件。
- en: Note that in the diagram above, we showed the private edits as a single commit.
    This was for clarity of presentation only. There is nothing to stop you from doing
    dozens or hundreds of separate tiny changes and committing each separately. In
    fact, making many small changes is the preferred way to work. The only reason
    for doing all the changes in a single commit is that it makes the diagram easier
    to draw.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在上述图表中，我们将私有编辑显示为单个提交。这仅是为了清晰地展示。实际上，你完全可以进行数十甚至数百个单独的微小更改，并分别提交每一个更改。事实上，进行许多小的更改是工作的首选方式。将所有更改合并为单个提交的唯一原因是它使图表更容易绘制。
- en: 3.6\. Incorporating New Public SQLite Releases
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.6\. 合并新发布的公共 SQLite 版本
- en: 'Suppose that after a while (about a month, usually) a new version of SQLite
    is released: 3.6.16\. You will want to incorporate this new public version of
    SQLite into your repository in the public branch (the trunk). To do this, first
    change your repository over to the trunk:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设过了一段时间（通常约一个月），SQLite 的新版本发布了：3.6.16\. 你会想要将这个新的公共版本的 SQLite 合并到你的仓库的公共分支（主干）中。为了做到这一点，首先切换到主干：
- en: '[PRE12]'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then download the new version of the SQLite sources and overwrite the files
    that are in the checkout.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后下载新版本的 SQLite 源码并覆盖检出的文件。
- en: If you made NL to CR-NL line ending changes or space to tab indentation changes
    in the original baseline, make the same changes to the new source file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在原始基线中进行了从 NL 到 CR-NL 的换行符更改或者从空格到制表符的缩进更改，那么对新的源文件进行相同的更改。
- en: Once everything is ready, run the "`fossil commit`" command to check in the
    changes. This creates circle (4) in the diagram above.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪后，运行 "`fossil commit`" 命令来提交更改。这在上述图表中创建圆圈（4）。
- en: 3.7\. Merging Public SQLite Updates Into The Private Branch
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.7\. 将公共 SQLite 更新合并到私有分支
- en: 'The next step is to move the changes in the public branch over into the private
    branch. In other words, we want to create circle (5) in the diagram above. Begin
    by changing to the private branch using "`fossil update private`". Then type this
    command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将公共分支中的更改移动到私有分支。换句话说，我们希望在上图中创建圆圈（5）。首先使用 "`fossil update private`" 命令切换到私有分支。然后输入以下命令：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The "merge" command attempts to apply all the changes between circles (1) and
    (4) to the files in the local checkout. Note that circle (5) has not been created
    yet. You will need to run the "commit" to create circle (5).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '"merge" 命令试图将圆圈（1）到（4）之间的所有更改应用到本地检出的文件中。注意，圆圈（5）还没有创建。你需要运行 "commit" 命令来创建圆圈（5）。'
- en: It might be that there are conflicts in the merge. Conflicts occur when the
    same line of code was changed in different ways between circles (1) and (4) versus
    circles (2) and (3). The merge command will announce any conflicts and will include
    both versions of the conflicting lines in the output. You will need to bring up
    the files that contain conflicts and manually resolve the conflicts.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会在合并中出现冲突。当在圈（1）和（4）与圈（2）和（3）之间以不同方式更改同一行代码时，就会发生冲突。合并命令会在输出中宣布任何冲突，并将冲突行的两个版本都包含在内。您需要打开包含冲突的文件并手动解决冲突。
- en: After resolving conflicts, many users like to compile and test the new version
    before committing it to the repository. Or you can commit first and test later.
    Either way, run the "`fossil commit`" command to check-in the circle (5) version.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决冲突后，许多用户喜欢在提交到存储库之前编译和测试新版本。或者您可以先提交后测试。无论哪种方式，运行“`fossil commit`”命令来提交版本（5）。
- en: 3.8\. Further Updates
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.8\. 进一步更新
- en: As new versions of SQLite are released, repeat steps 3.6 and 3.7 to add changes
    in the new release to the private branch. Additional private changes can be made
    on the private branch in between releases if desired.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 随着新版本的 SQLite 发布，重复步骤 3.6 和 3.7，将新发布的更改添加到私有分支中。如果需要，还可以在发布之间在私有分支上进行额外的私有更改。
- en: 4\. Variations
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 变化
- en: 'Since this document was first written, the canonical SQLite source code has
    been moved from the venerable CVS system into a Fossil repository at [https://www.sqlite.org/src](https://www.sqlite.org/src).
    This means that if you are working with canonical SQLite source code (as opposed
    to the [amalgamation](amalgamation.html) source code files, sqlite3.c and sqlite3.h)
    then you can create a private repository simply by cloning the official repository:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 自此文档首次撰写以来，官方 SQLite 源代码已从古老的 CVS 系统迁移到了 [Fossil 存储库](https://www.sqlite.org/src)。这意味着，如果您使用的是官方
    SQLite 源代码（而不是[合并](amalgamation.html)源代码文件 sqlite3.c 和 sqlite3.h），那么只需克隆官方存储库即可创建私有存储库：
- en: '[PRE14]'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This command both creates the new repository and populates it with all the latest
    SQLite code. You can then create a private branch as described in section 3.4.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令同时创建新存储库并填充所有最新的 SQLite 代码。然后，可以按照第 3.4 节的描述创建一个私有分支。
- en: 'When the private repository is created by cloning, incorporating new public
    SQLite releases becomes much easier too. To pull in all of the latest changes
    from the public SQLite repository, simply move into the open check-out and do:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过克隆创建私有存储库时，也更容易将新的公共 SQLite 发布集成进来。要获取公共 SQLite 存储库中的所有最新更改，只需进入开放式检出并执行：
- en: '[PRE15]'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then continue to merge the changes in "trunk" with your "private" changes as
    described in section 3.7.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后继续按照第 3.7 节中描述的方式将“主干”中的更改与您的“私有”更改合并。
