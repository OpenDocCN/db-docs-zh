["```sql\n> typedef struct sqlite sqlite;\n> #define SQLITE_OK           0   /* Successful result */\n> \n> sqlite *sqlite_open(const char *dbname, int mode, char **errmsg);\n> \n> void sqlite_close(sqlite *db);\n> \n> int sqlite_exec(\n>   sqlite *db,\n>   char *sql,\n>   int (*xCallback)(void*,int,char**,char**),\n>   void *pArg,\n>   char **errmsg\n> );\n> \n> ```", "```sql\n> int Callback(void *pArg, int argc, char **argv, char **columnNames){\n>   return 0;\n> }\n> \n> ```", "```sql\n> argv[i][0] == 0\n> \n> ```", "```sql\n> argv[i] == 0\n> \n> ```", "```sql\n> argv == 0\n> \n> ```", "```sql\n> #define SQLITE_OK           0   /* Successful result */\n> #define SQLITE_ERROR        1   /* SQL error or missing database */\n> #define SQLITE_INTERNAL     2   /* An internal logic error in SQLite */\n> #define SQLITE_PERM         3   /* Access permission denied */\n> #define SQLITE_ABORT        4   /* Callback routine requested an abort */\n> #define SQLITE_BUSY         5   /* The database file is locked */\n> #define SQLITE_LOCKED       6   /* A table in the database is locked */\n> #define SQLITE_NOMEM        7   /* A malloc() failed */\n> #define SQLITE_READONLY     8   /* Attempt to write a readonly database */\n> #define SQLITE_INTERRUPT    9   /* Operation terminated by sqlite_interrupt() */\n> #define SQLITE_IOERR       10   /* Some kind of disk I/O error occurred */\n> #define SQLITE_CORRUPT     11   /* The database disk image is malformed */\n> #define SQLITE_NOTFOUND    12   /* (Internal Only) Table or record not found */\n> #define SQLITE_FULL        13   /* Insertion failed because database is full */\n> #define SQLITE_CANTOPEN    14   /* Unable to open the database file */\n> #define SQLITE_PROTOCOL    15   /* Database lock protocol error */\n> #define SQLITE_EMPTY       16   /* (Internal Only) Database table is empty */\n> #define SQLITE_SCHEMA      17   /* The database schema changed */\n> #define SQLITE_TOOBIG      18   /* Too much data for one row of a table */\n> #define SQLITE_CONSTRAINT  19   /* Abort due to constraint violation */\n> #define SQLITE_MISMATCH    20   /* Data type mismatch */\n> #define SQLITE_MISUSE      21   /* Library used incorrectly */\n> #define SQLITE_NOLFS       22   /* Uses OS features not supported on host */\n> #define SQLITE_AUTH        23   /* Authorization denied */\n> #define SQLITE_ROW         100  /* sqlite_step() has another row ready */\n> #define SQLITE_DONE        101  /* sqlite_step() has finished executing */\n> \n> ```", "```sql\n> typedef struct sqlite_vm sqlite_vm;\n> \n> int sqlite_compile(\n>   sqlite *db,              /* The open database */\n>   const char *zSql,        /* SQL statement to be compiled */\n>   const char **pzTail,     /* OUT: uncompiled tail of zSql */\n>   sqlite_vm **ppVm,        /* OUT: the virtual machine to execute zSql */\n>   char **pzErrmsg          /* OUT: Error message. */\n> );\n> \n> int sqlite_step(\n>   sqlite_vm *pVm,          /* The virtual machine to execute */\n>   int *pN,                 /* OUT: Number of columns in result */\n>   const char ***pazValue,  /* OUT: Column data */\n>   const char ***pazColName /* OUT: Column names and datatypes */\n> );\n> \n> int sqlite_finalize(\n>   sqlite_vm *pVm,          /* The virtual machine to be finalized */\n>   char **pzErrMsg          /* OUT: Error message */\n> );\n> \n> ```", "```sql\n> int sqlite_last_insert_rowid(sqlite*);\n> \n> int sqlite_changes(sqlite*);\n> \n> int sqlite_get_table(\n>   sqlite*,\n>   char *sql,\n>   char ***result,\n>   int *nrow,\n>   int *ncolumn,\n>   char **errmsg\n> );\n> \n> void sqlite_free_table(char**);\n> \n> void sqlite_interrupt(sqlite*);\n> \n> int sqlite_complete(const char *sql);\n> \n> void sqlite_busy_handler(sqlite*, int (*)(void*,const char*,int), void*);\n> \n> void sqlite_busy_timeout(sqlite*, int ms);\n> \n> const char sqlite_version[];\n> \n> const char sqlite_encoding[];\n> \n> int sqlite_exec_printf(\n>   sqlite*,\n>   char *sql,\n>   int (*)(void*,int,char**,char**),\n>   void*,\n>   char **errmsg,\n>   ...\n> );\n> \n> int sqlite_exec_vprintf(\n>   sqlite*,\n>   char *sql,\n>   int (*)(void*,int,char**,char**),\n>   void*,\n>   char **errmsg,\n>   va_list\n> );\n> \n> int sqlite_get_table_printf(\n>   sqlite*,\n>   char *sql,\n>   char ***result,\n>   int *nrow,\n>   int *ncolumn,\n>   char **errmsg,\n>   ...\n> );\n> \n> int sqlite_get_table_vprintf(\n>   sqlite*,\n>   char *sql,\n>   char ***result,\n>   int *nrow,\n>   int *ncolumn,\n>   char **errmsg,\n>   va_list\n> );\n> \n> char *sqlite_mprintf(const char *zFormat, ...);\n> \n> char *sqlite_vmprintf(const char *zFormat, va_list);\n> \n> void sqlite_freemem(char*);\n> \n> void sqlite_progress_handler(sqlite*, int, int (*)(void*), void*);\n> \n> ```", "```sql\n> sqlite_exec_printf(db,\n>   \"INSERT INTO table1 VALUES('%s')\",\n>   0, 0, 0, zString);\n> \n> ```", "```sql\n> INSERT INTO table1 VALUES('Hi y'all')\n> \n> ```", "```sql\n> sqlite_exec_printf(db,\n>   \"INSERT INTO table1 VALUES('%q')\",\n>   0, 0, 0, zString);\n> \n> ```", "```sql\n> INSERT INTO table1 VALUES('Hi y''all')\n> \n> ```", "```sql\n> sqlite_exec_printf(db,\n>   \"INSERT INTO table1 VALUES(%Q)\",\n>   0, 0, 0, zString);\n> \n> ```", "```sql\n> INSERT INTO table1 VALUES('Hi y''all')\n> \n> ```", "```sql\n> INSERT INTO table1 VALUES(NULL)\n> \n> ```", "```sql\n> char *sqlite_mprintf(const char *zFormat, ...);\n> char *sqlite_vmprintf(const char *zFormat, va_list);\n> \n> ```", "```sql\n> typedef struct sqlite_func sqlite_func;\n> \n> int sqlite_create_function(\n>   sqlite *db,\n>   const char *zName,\n>   int nArg,\n>   void (*xFunc)(sqlite_func*,int,const char**),\n>   void *pUserData\n> );\n> int sqlite_create_aggregate(\n>   sqlite *db,\n>   const char *zName,\n>   int nArg,\n>   void (*xStep)(sqlite_func*,int,const char**),\n>   void (*xFinalize)(sqlite_func*),\n>   void *pUserData\n> );\n> \n> char *sqlite_set_result_string(sqlite_func*,const char*,int);\n> void sqlite_set_result_int(sqlite_func*,int);\n> void sqlite_set_result_double(sqlite_func*,double);\n> void sqlite_set_result_error(sqlite_func*,const char*,int);\n> \n> void *sqlite_user_data(sqlite_func*);\n> void *sqlite_aggregate_context(sqlite_func*, int nBytes);\n> int sqlite_aggregate_count(sqlite_func*);\n> \n> ```"]