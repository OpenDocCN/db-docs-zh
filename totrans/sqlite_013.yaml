- en: 1\. Amalgamation Versus Individual Source Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://sqlite.com/howtocompile.html](https://sqlite.com/howtocompile.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <title>How To Compile SQLite</title>
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SQLite is ANSI-C source code. It must be compiled into machine code before it
    is useful. This article is a guide to the various ways of compiling SQLite.
  prefs: []
  type: TYPE_NORMAL
- en: This article does not contain a step-by-step recipe for compiling SQLite. That
    would be difficult since each development situation is different. Rather, this
    article describes and illustrates the principles behind the compilation of SQLite.
    Typical compilation commands are provided as examples with the expectation that
    application developers can use these examples as guidance for developing their
    own custom compilation procedures. In other words, this article provides ideas
    and insights, not turnkey solutions.
  prefs: []
  type: TYPE_NORMAL
- en: SQLite is built from over one hundred files of C code and script spread across
    multiple directories. The implementation of SQLite is pure ANSI-C, but many of
    the C-language source code files are either generated or transformed by auxiliary
    C programs and AWK, SED, and TCL scripts prior to being incorporated into the
    finished SQLite library. Building the necessary C programs and transforming and/or
    creating the C-language source code for SQLite is a complex process.
  prefs: []
  type: TYPE_NORMAL
- en: 'To simplify matters, SQLite is also available as a pre-packaged [amalgamation](amalgamation.html)
    source code file: **sqlite3.c**. The amalgamation is a single file of ANSI-C code
    that implements the entire SQLite library. The amalgamation is much easier to
    deal with. Everything is contained within a single code file, so it is easy to
    drop into the source tree of a larger C or C++ program. All the code generation
    and transformation steps have already been carried out so there are no auxiliary
    C programs to configure and compile and no scripts to run. And, because the entire
    library is contained in a single translation unit, compilers are able to do more
    advanced optimizations resulting in a 5% to 10% performance improvement. For these
    reasons, the amalgamation source file ("**sqlite3.c**") is recommended for all
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '*The use of the [amalgamation](amalgamation.html) is recommended for all applications.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Building SQLite directly from individual source code files is certainly possible,
    but it is not recommended. For some specialized applications, it might be necessary
    to modify the build process in ways that cannot be done using just the prebuilt
    amalgamation source file downloaded from the website. For those situations, it
    is recommended that a customized amalgamation be built (as described [below](howtocompile.html#amal))
    and used. In other words, even if a project requires building SQLite beginning
    with individual source files, it is still recommended that an amalgamation source
    file be used as an intermediate step.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Compiling The Command-Line Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A build of the [command-line interface](cli.html) requires three source files:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sqlite3.c**: The SQLite amalgamation source file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sqlite3.h**: The header files that accompanies sqlite3.c and defines the
    C-language interfaces to SQLite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**shell.c**: The command-line interface program itself. This is the C source
    code file that contains the definition of the **main()** routine and the loop
    that prompts for user input and passes that input into the SQLite database engine
    for processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All three of the above source files are contained in the [amalgamation tarball](download.html#amalgtarball)
    available on the [download page](download.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the CLI, simply put these three files in the same directory and compile
    them together. Using MSVC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'On Unix systems (or on Windows using cygwin or mingw+msys) the command typically
    looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'The pthreads library is needed to make SQLite threadsafe. But since the CLI
    is single threaded, we could instruct SQLite to build in a non-threadsafe mode
    and thereby omit the pthreads library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'The -ldl library is needed to support dynamic loading, the [sqlite3_load_extension()](c3ref/load_extension.html)
    interface and the [load_extension() SQL function](lang_corefunc.html#load_extension).
    If these features are not required, then they can be omitted using [SQLITE_OMIT_LOAD_EXTENSION](compile.html#omit_load_extension)
    compile-time option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: One might want to provide other [compile-time options](compile.html) such as
  prefs: []
  type: TYPE_NORMAL
- en: '[-DSQLITE_ENABLE_FTS4](compile.html#enable_fts4) or [-DSQLITE_ENABLE_FTS5](compile.html#enable_fts5)
    for full-text search,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[-DSQLITE_ENABLE_RTREE](compile.html#enable_rtree) for the R*Tree search engine
    extension,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[-DSQLITE_ENABLE_DBSTAT_VTAB](compile.html#enable_dbstat_vtab) for the [dbstat
    virtual table](dbstat.html), or'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[-DSQLITE_ENABLE_MATH_FUNCTIONS](compile.html#enable_math_functions) for extended
    math functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to see extra commentary in [EXPLAIN](lang_explain.html) listings,
    add the [-DSQLITE_ENABLE_EXPLAIN_COMMENTS](compile.html#enable_explain_comments)
    option. Add -DHAVE_READLINE and the -lreadline and -lncurses libraries to get
    command-line editing support. One might also want to specify some compiler optimization
    switches. (The precompiled CLI available for download from the SQLite website
    uses "-Os".) There are countless possible variations here. A command to compile
    a full-featured shell might look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'The key point is this: Building the CLI consists of compiling together two
    C-language files. The **shell.c** file contains the definition of the entry point
    and the user input loop and the SQLite amalgamation **sqlite3.c** contains the
    complete implementation of the SQLite library.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Compiling The TCL Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TCL interface for SQLite is a small module that is added into the regular
    amalgamation. The result is a new amalgamated source file called "**tclsqlite3.c**".
    This single source file is all that is needed to generate a shared library that
    can be loaded into a standard [tclsh](http://wiki.tcl-lang.org/2541) or [wish](http://wiki.tcl-lang.org/2364)
    using the [TCL load command](http://wiki.tcl-lang.org/9830), or to generate a
    standalone tclsh that comes with SQLite built in. A copy of the tcl amalgamation
    is included on the [download page](download.html) as a file in the [TEA tarball](download.html#amalgtarball).
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a TCL-loadable library for SQLite on Linux, the following command
    will suffice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Building shared libraries for Mac OS X and Windows is not nearly so simple,
    unfortunately. For those platforms it is best to use the configure script and
    makefile that is included with the [TEA tarball](download.html#amalgtarball).
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a standalone tclsh that is statically linked with SQLite, use this
    compiler invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: The trick here is the -DTCLSH=1 option. The TCL interface module for SQLite
    includes a **main()** procedure that initializes a TCL interpreter and enters
    a command-line loop when it is compiled with -DTCLSH=1\. The command above works
    on both Linux and Mac OS X, though one may need to adjust the library options
    depending on the platform and which version of TCL one is linking against.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Building The Amalgamation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The versions of the SQLite amalgamation that are supplied on the [download
    page](download.html) are normally adequate for most users. However, some projects
    may want or need to build their own amalgamations. A common reason for building
    a custom amalgamation is in order to use certain [compile-time options](compile.html)
    to customize the SQLite library. Recall that the SQLite amalgamation contains
    a lot of C-code that is generated by auxiliary programs and scripts. Many of the
    compile-time options effect this generated code and must be supplied to the code
    generators before the amalgamation is assembled. The set of compile-time options
    that must be passed into the code generators can vary from one release of SQLite
    to the next, but at the time of this writing (circa SQLite 3.6.20, 2009-11-04)
    the set of options that must be known by the code generators includes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[SQLITE_ENABLE_UPDATE_DELETE_LIMIT](compile.html#enable_update_delete_limit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_ALTERTABLE](compile.html#omit_altertable)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_ANALYZE](compile.html#omit_analyze)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_ATTACH](compile.html#omit_attach)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_AUTOINCREMENT](compile.html#omit_autoincrement)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_CAST](compile.html#omit_cast)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_COMPOUND_SELECT](compile.html#omit_compound_select)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_EXPLAIN](compile.html#omit_explain)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_FOREIGN_KEY](compile.html#omit_foreign_key)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_PRAGMA](compile.html#omit_pragma)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_REINDEX](compile.html#omit_reindex)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_SUBQUERY](compile.html#omit_subquery)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_TEMPDB](compile.html#omit_tempdb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_TRIGGER](compile.html#omit_trigger)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_VACUUM](compile.html#omit_vacuum)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_VIEW](compile.html#omit_view)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_OMIT_VIRTUALTABLE](compile.html#omit_virtualtable)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To build a custom amalgamation, first download the original individual source
    files onto a Unix or Unix-like development platform. Be sure to get the original
    source files not the "preprocessed source files". One can obtain the complete
    set of original source files either from the [download page](download.html) or
    directly from the [configuration management system](https://www.sqlite.org/src).
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose the SQLite source tree is stored in a directory named "sqlite". Plan
    to construct the amalgamation in a parallel directory named (for example) "bld".
    First construct an appropriate Makefile by either running the configure script
    at the top of the SQLite source tree, or by making a copy of one of the template
    Makefiles at the top of the source tree. Then hand edit this Makefile to include
    the desired compile-time options. Finally run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'Or on Windows with MSVC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: The "sqlite3.c" make target will automatically construct the regular "**sqlite3.c**"
    amalgamation source file, its header file "**sqlite3.h**", and the "**tclsqlite3.c**"
    amalgamation source file that includes the TCL interface. Afterwards, the needed
    files can be copied into project directories and compiled according to the procedures
    outlined above.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Building A Windows DLL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To build a DLL of SQLite for use in Windows, first acquire the appropriate amalgamated
    source code files, sqlite3.c and sqlite3.h. These can either be downloaded from
    the [SQLite website](https://www.sqlite.org/download.html) or custom generated
    from sources as shown above.
  prefs: []
  type: TYPE_NORMAL
- en: 'With source code files in the working directory, a DLL can be generated using
    MSVC with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: The above command should be run from the MSVC Native Tools Command Prompt. If
    you have MSVC installed on your machine, you probably have multiple versions of
    this Command Prompt, for native builds for x86 and x64, and possibly also for
    cross-compiling to ARM. Use the appropriate Command Prompt depending on the desired
    DLL.
  prefs: []
  type: TYPE_NORMAL
- en: 'If using the MinGW compiler, the command-line is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Note that MinGW generates 32-bit DLLs only. There is a separate MinGW64 project
    that can be used to generate 64-bit DLLs. Presumably the command-line syntax is
    similar. Also note that recent versions of MSVC generate DLLs that will not work
    on WinXP and earlier versions of Windows. So for maximum compatibility of your
    generated DLL, MinGW is recommended. A good rule-of-thumb is to generate 32-bit
    DLLs using MinGW and 64-bit DLLs using MSVC.
  prefs: []
  type: TYPE_NORMAL
- en: 'In most cases, you will want to supplement the basic commands above with [compile-time
    options](compile.html) appropriate for your application. Commonly used compile-time
    options include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**-Os** - Optimize for size. Make the DLL as small as possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-O2** - Optimize for speed. This will make the DLL larger by unrolling loops
    and inlining functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-DSQLITE_ENABLE_FTS4** - Include the [full-text search](fts3.html) engine
    code in SQLite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-DSQLITE_ENABLE_RTREE** - Include the [R-Tree extension](rtree.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**-DSQLITE_ENABLE_COLUMN_METADATA** - This enables some extra APIs that are
    required by some common systems, including Ruby-on-Rails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
