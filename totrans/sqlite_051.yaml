- en: Internal Versus External BLOBs in SQLite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://sqlite.com/intern-v-extern-blob.html](https://sqlite.com/intern-v-extern-blob.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you have a database of large BLOBs, do you get better read performance when
    you store the complete BLOB content directly in the database or is it faster to
    store each BLOB in a separate file and store just the corresponding filename in
    the database?
  prefs: []
  type: TYPE_NORMAL
- en: To try to answer this, we ran 49 test cases with various BLOB sizes and SQLite
    page sizes on a Linux workstation (Ubuntu circa 2011 with the Ext4 filesystem
    on a fast SATA disk). For each test case, a database was created containing 100MB
    of BLOB content. The sizes of the BLOBs ranged from 10KB to 1MB. The number of
    BLOBs varied in order to keep the total BLOB content at about 100MB. (Hence, 100
    BLOBs for the 1MB size and 10000 BLOBs for the 10K size and so forth.) SQLite
    [version 3.7.8](releaselog/3_7_8.html) (2011-09-19) was used.
  prefs: []
  type: TYPE_NORMAL
- en: '*Update: New measurements for SQLite version 3.19.0 (2017-05-22) show that
    SQLite is about [35% faster](fasterthanfs.html) than direct disk I/O for both
    reads and writes of 10KB blobs.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The matrix below shows the time needed to read BLOBs stored in separate files
    divided by the time needed to read BLOBs stored entirely in the database. Hence,
    for numbers larger than 1.0, it is faster to store the BLOBs directly in the database.
    For numbers smaller than 1.0, it is faster to store the BLOBs in separate files.
  prefs: []
  type: TYPE_NORMAL
- en: In every case, the pager cache size was adjusted to keep the amount of cache
    memory at about 2MB. For example, a 2000 page cache was used for 1024 byte pages
    and a 31 page cache was used for 65536 byte pages. The BLOB values were read in
    a random order.
  prefs: []
  type: TYPE_NORMAL
- en: '| Database Page Size | BLOB size |'
  prefs: []
  type: TYPE_TB
- en: '| 10k | 20k | 50k | 100k | 200k | 500k | 1m |'
  prefs: []
  type: TYPE_TB
- en: '| 1024 | 1.535 | 1.020 | 0.608 | 0.456 | 0.330 | 0.247 | 0.233 |'
  prefs: []
  type: TYPE_TB
- en: '| 2048 | 2.004 | 1.437 | 0.870 | 0.636 | 0.483 | 0.372 | 0.340 |'
  prefs: []
  type: TYPE_TB
- en: '| 4096 | 2.261 | 1.886 | 1.173 | 0.890 | 0.701 | 0.526 | 0.487 |'
  prefs: []
  type: TYPE_TB
- en: '| 8192 | 2.240 | 1.866 | 1.334 | 1.035 | 0.830 | 0.625 | 0.720 |'
  prefs: []
  type: TYPE_TB
- en: '| 16384 | 2.439 | 1.757 | 1.292 | 1.023 | 0.829 | 0.820 | 0.598 |'
  prefs: []
  type: TYPE_TB
- en: '| 32768 | 1.878 | 1.843 | 1.296 | 0.981 | 0.976 | 0.675 | 0.613 |'
  prefs: []
  type: TYPE_TB
- en: '| 65536 | 1.256 | 1.255 | 1.339 | 0.983 | 0.769 | 0.687 | 0.609 |'
  prefs: []
  type: TYPE_TB
- en: 'We deduce the following rules of thumb from the matrix above:'
  prefs: []
  type: TYPE_NORMAL
- en: A database page size of 8192 or 16384 gives the best performance for large BLOB
    I/O.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For BLOBs smaller than 100KB, reads are faster when the BLOBs are stored directly
    in the database file. For BLOBs larger than 100KB, reads from a separate file
    are faster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, your mileage may vary depending on hardware, filesystem, and operating
    system. Double-check these figures on target hardware before committing to a particular
    design.
  prefs: []
  type: TYPE_NORMAL
