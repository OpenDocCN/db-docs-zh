- en: Internal Versus External BLOBs in SQLite
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite中的内部与外部BLOB
- en: 原文：[https://sqlite.com/intern-v-extern-blob.html](https://sqlite.com/intern-v-extern-blob.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/intern-v-extern-blob.html](https://sqlite.com/intern-v-extern-blob.html)
- en: If you have a database of large BLOBs, do you get better read performance when
    you store the complete BLOB content directly in the database or is it faster to
    store each BLOB in a separate file and store just the corresponding filename in
    the database?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有大型BLOB的数据库，直接将完整的BLOB内容存储在数据库中，还是将每个BLOB存储在单独的文件中并仅在数据库中存储相应的文件名，哪种方式能获得更好的读取性能？
- en: To try to answer this, we ran 49 test cases with various BLOB sizes and SQLite
    page sizes on a Linux workstation (Ubuntu circa 2011 with the Ext4 filesystem
    on a fast SATA disk). For each test case, a database was created containing 100MB
    of BLOB content. The sizes of the BLOBs ranged from 10KB to 1MB. The number of
    BLOBs varied in order to keep the total BLOB content at about 100MB. (Hence, 100
    BLOBs for the 1MB size and 10000 BLOBs for the 10K size and so forth.) SQLite
    [version 3.7.8](releaselog/3_7_8.html) (2011-09-19) was used.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试回答这个问题，我们在Linux工作站（Ubuntu约2011年，使用Ext4文件系统和快速SATA硬盘）上运行了49个测试案例，分别使用不同的BLOB大小和SQLite页面大小。对于每个测试案例，创建了一个包含100MB
    BLOB内容的数据库。BLOB的大小范围从10KB到1MB不等。BLOB的数量因此而变化，以保持总BLOB内容约为100MB。（因此，1MB大小的BLOB有100个，10K大小的有10000个，依此类推。）使用了SQLite
    [版本3.7.8](releaselog/3_7_8.html)（2011-09-19）。
- en: '*Update: New measurements for SQLite version 3.19.0 (2017-05-22) show that
    SQLite is about [35% faster](fasterthanfs.html) than direct disk I/O for both
    reads and writes of 10KB blobs.*'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*更新：针对SQLite版本3.19.0（2017-05-22）的新测量结果显示，SQLite在读写10KB BLOB时比直接磁盘I/O快约35%。*'
- en: The matrix below shows the time needed to read BLOBs stored in separate files
    divided by the time needed to read BLOBs stored entirely in the database. Hence,
    for numbers larger than 1.0, it is faster to store the BLOBs directly in the database.
    For numbers smaller than 1.0, it is faster to store the BLOBs in separate files.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的矩阵显示了读取存储在单独文件中的BLOB所需时间与读取完全存储在数据库中的BLOB所需时间之比。因此，对于大于1.0的数字，直接将BLOB存储在数据库中更快。对于小于1.0的数字，将BLOB存储在单独文件中更快。
- en: In every case, the pager cache size was adjusted to keep the amount of cache
    memory at about 2MB. For example, a 2000 page cache was used for 1024 byte pages
    and a 31 page cache was used for 65536 byte pages. The BLOB values were read in
    a random order.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，页面缓存大小都被调整以保持大约2MB的缓存内存量。例如，对于1024字节的页面，使用了2000页缓存，对于65536字节的页面，使用了31页缓存。BLOB值是以随机顺序读取的。
- en: '| Database Page Size | BLOB size |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 数据库页面大小 | BLOB大小 |'
- en: '| 10k | 20k | 50k | 100k | 200k | 500k | 1m |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 10k | 20k | 50k | 100k | 200k | 500k | 1m |'
- en: '| 1024 | 1.535 | 1.020 | 0.608 | 0.456 | 0.330 | 0.247 | 0.233 |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 1024 | 1.535 | 1.020 | 0.608 | 0.456 | 0.330 | 0.247 | 0.233 |'
- en: '| 2048 | 2.004 | 1.437 | 0.870 | 0.636 | 0.483 | 0.372 | 0.340 |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 2048 | 2.004 | 1.437 | 0.870 | 0.636 | 0.483 | 0.372 | 0.340 |'
- en: '| 4096 | 2.261 | 1.886 | 1.173 | 0.890 | 0.701 | 0.526 | 0.487 |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 4096 | 2.261 | 1.886 | 1.173 | 0.890 | 0.701 | 0.526 | 0.487 |'
- en: '| 8192 | 2.240 | 1.866 | 1.334 | 1.035 | 0.830 | 0.625 | 0.720 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 8192 | 2.240 | 1.866 | 1.334 | 1.035 | 0.830 | 0.625 | 0.720 |'
- en: '| 16384 | 2.439 | 1.757 | 1.292 | 1.023 | 0.829 | 0.820 | 0.598 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 16384 | 2.439 | 1.757 | 1.292 | 1.023 | 0.829 | 0.820 | 0.598 |'
- en: '| 32768 | 1.878 | 1.843 | 1.296 | 0.981 | 0.976 | 0.675 | 0.613 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 32768 | 1.878 | 1.843 | 1.296 | 0.981 | 0.976 | 0.675 | 0.613 |'
- en: '| 65536 | 1.256 | 1.255 | 1.339 | 0.983 | 0.769 | 0.687 | 0.609 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 65536 | 1.256 | 1.255 | 1.339 | 0.983 | 0.769 | 0.687 | 0.609 |'
- en: 'We deduce the following rules of thumb from the matrix above:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从上述矩阵中得出以下经验法则：
- en: A database page size of 8192 or 16384 gives the best performance for large BLOB
    I/O.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库页面大小为8192或16384时，对大型BLOB I/O性能最佳。
- en: For BLOBs smaller than 100KB, reads are faster when the BLOBs are stored directly
    in the database file. For BLOBs larger than 100KB, reads from a separate file
    are faster.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于小于100KB的BLOB，将BLOB直接存储在数据库文件中时读取速度更快。对于大于100KB的BLOB，从单独文件中读取速度更快。
- en: Of course, your mileage may vary depending on hardware, filesystem, and operating
    system. Double-check these figures on target hardware before committing to a particular
    design.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，实际情况可能因硬件、文件系统和操作系统而异。在确定特定设计之前，请在目标硬件上仔细检查这些数据。
