- en: 1.0 File Locking And Concurrency In SQLite Version 3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.0 SQLite 版本 3 中的文件锁定与并发
- en: 原文：[https://sqlite.com/lockingv3.html](https://sqlite.com/lockingv3.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/lockingv3.html](https://sqlite.com/lockingv3.html)
- en: This document was originally created in early 2004 when SQLite version 2 was
    still in widespread use and was written to introduce the new concepts of SQLite
    version 3 to readers who were already familiar with SQLite version 2\. But these
    days, most readers of this document have probably never seen SQLite version 2
    and are only familiar with SQLite version 3\. Nevertheless, this document continues
    to serve as an authoritative reference to how database file locking works in SQLite
    version 3.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本文最初创建于 2004 年初，当时 SQLite 版本 2 仍广泛使用，并旨在向已熟悉 SQLite 版本 2 的读者介绍 SQLite 版本 3 的新概念。但如今，大多数本文的读者可能从未见过
    SQLite 版本 2，只熟悉 SQLite 版本 3。尽管如此，本文仍作为 SQLite 版本 3 中数据库文件锁定工作原理的权威参考。
- en: The document only describes locking for the older rollback-mode transaction
    mechanism. Locking for the newer [write-ahead log](wal.html) or [WAL mode](wal.html)
    is described separately.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本文仅描述了较旧的回滚模式事务机制的锁定。关于较新的[预写式日志](wal.html)或[WAL 模式](wal.html)的锁定是另有描述的。
- en: SQLite [Version 3.0.0](releaselog/3_0_0.html) introduced a new locking and journaling
    mechanism designed to improve concurrency over SQLite version 2 and to reduce
    the writer starvation problem. The new mechanism also allows atomic commits of
    transactions involving multiple database files. This document describes the new
    locking mechanism. The intended audience is programmers who want to understand
    and/or modify the pager code and reviewers working to verify the design of SQLite
    version 3.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite [Version 3.0.0](releaselog/3_0_0.html)引入了一种新的锁定和日志机制，旨在改善与 SQLite 版本
    2 相比的并发性，并减少写入饥饿问题。新机制还允许涉及多个数据库文件的事务的原子提交。本文描述了新的锁定机制。目标读者是希望理解和/或修改 pager 代码的程序员，以及工作于验证
    SQLite 版本 3 设计的审阅人员。
- en: 2.0 Overview
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0 概述
- en: Locking and concurrency control are handled by the [pager module](https://www.sqlite.org/src/finfo?name=src/pager.c).
    The pager module is responsible for making SQLite "ACID" (Atomic, Consistent,
    Isolated, and Durable). The pager module makes sure changes happen all at once,
    that either all changes occur or none of them do, that two or more processes do
    not try to access the database in incompatible ways at the same time, and that
    once changes have been written they persist until explicitly deleted. The pager
    also provides a memory cache of some of the contents of the disk file.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库锁定和并发控制由[pager 模块](https://www.sqlite.org/src/finfo?name=src/pager.c)处理。pager
    模块负责使 SQLite “ACID”（原子性、一致性、隔离性和持久性）。pager 模块确保更改一次性发生，要么所有更改发生，要么都不发生；两个或多个进程不能同时以不兼容的方式访问数据库；一旦更改被写入，它们将持久保存直至显式删除。pager
    还提供磁盘文件部分内容的内存缓存。
- en: 'The pager is unconcerned with the details of B-Trees, text encodings, indices,
    and so forth. From the point of view of the pager the database consists of a single
    file of uniform-sized blocks. Each block is called a "page" and is usually 1024
    bytes in size. The pages are numbered beginning with 1\. So the first 1024 bytes
    of the database are called "page 1" and the second 1024 bytes are call "page 2"
    and so forth. All other encoding details are handled by higher layers of the library.
    The pager communicates with the operating system using one of several modules
    (Examples: [os_unix.c](https://www.sqlite.org/src/finfo?name=src/os_unix.c), [os_win.c](https://www.sqlite.org/src/finfo?name=src/os_win.c))
    that provides a uniform abstraction for operating system services.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 分页器并不关心B树、文本编码、索引等细节。从分页器的角度看，数据库由一个统一大小的块文件组成。每个块称为一个“页”，通常大小为1024字节。页从1开始编号。因此，数据库的前1024字节称为“第一页”，第二个1024字节称为“第二页”，依此类推。所有其他编码细节由库的更高层处理。分页器使用操作系统的一个或多个模块与操作系统通信（示例：[os_unix.c](https://www.sqlite.org/src/finfo?name=src/os_unix.c)，[os_win.c](https://www.sqlite.org/src/finfo?name=src/os_win.c)），提供操作系统服务的统一抽象。
- en: The pager module effectively controls access for separate threads, or separate
    processes, or both. Throughout this document whenever the word "process" is written
    you may substitute the word "thread" without changing the truth of the statement.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 分页器模块有效地控制了各个线程或进程的访问。在本文档中，每当提到“进程”时，您可以替换为“线程”而不改变陈述的真实性。
- en: 3.0 Locking
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.0 锁定
- en: 'From the point of view of a single process, a database file can be in one of
    five locking states:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单个进程来说，数据库文件可以处于五种锁定状态之一：
- en: '| UNLOCKED | No locks are held on the database. The database may be neither
    read nor written. Any internally cached data is considered suspect and subject
    to verification against the database file before being used. Other processes can
    read or write the database as their own locking states permit. This is the default
    state. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| UNLOCKED | 数据库上没有任何锁定。数据库既不能读取也不能写入。任何内部缓存的数据在使用之前必须与数据库文件进行验证。其他进程可以根据其自身的锁定状态读取或写入数据库。这是默认状态。
    |'
- en: '| SHARED | The database may be read but not written. Any number of processes
    can hold SHARED locks at the same time, hence there can be many simultaneous readers.
    But no other thread or process is allowed to write to the database file while
    one or more SHARED locks are active. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| SHARED | 可以读取但不能写入数据库。多个进程可以同时持有共享锁，因此可以有多个同时读取者。但只要有一个或多个共享锁处于活动状态，就不允许其他线程或进程向数据库文件写入。
    |'
- en: '| RESERVED | A RESERVED lock means that the process is planning on writing
    to the database file at some point in the future but that it is currently just
    reading from the file. Only a single RESERVED lock may be active at one time,
    though multiple SHARED locks can coexist with a single RESERVED lock. RESERVED
    differs from PENDING in that new SHARED locks can be acquired while there is a
    RESERVED lock. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 预留锁 | 预留锁表示进程计划在未来某个时刻向数据库文件写入内容，但当前只是从文件中读取。一次只能有一个预留锁活动，尽管多个共享锁可以与单个预留锁共存。预留锁与待处理锁的区别在于，在存在预留锁时可以获取新的共享锁。
    |'
- en: '| PENDING | A PENDING lock means that the process holding the lock wants to
    write to the database as soon as possible and is just waiting on all current SHARED
    locks to clear so that it can get an EXCLUSIVE lock. No new SHARED locks are permitted
    against the database if a PENDING lock is active, though existing SHARED locks
    are allowed to continue. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 待处理锁 | 待处理锁表示持有锁的进程希望尽快写入数据库，只是在等待所有当前共享锁清除，以便获取独占锁。如果存在待处理锁，则不允许对数据库获取新的共享锁，但允许现有的共享锁继续存在。
    |'
- en: '| EXCLUSIVE | An EXCLUSIVE lock is needed in order to write to the database
    file. Only one EXCLUSIVE lock is allowed on the file and no other locks of any
    kind are allowed to coexist with an EXCLUSIVE lock. In order to maximize concurrency,
    SQLite works to minimize the amount of time that EXCLUSIVE locks are held. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 独占锁 | 为了向数据库文件写入内容，需要获取独占锁。同一文件只能存在一个独占锁，且不允许与独占锁共存的其他任何锁。为了最大化并发性，SQLite
    努力减少独占锁的持有时间。 |'
- en: The operating system interface layer understands and tracks all five locking
    states described above. The pager module only tracks four of the five locking
    states. A PENDING lock is always just a temporary stepping stone on the path to
    an EXCLUSIVE lock and so the pager module does not track PENDING locks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统接口层理解和跟踪上述五种锁定状态。分页器模块仅跟踪其中四种锁定状态。待处理锁只是在获取独占锁的路径上的一个临时过渡状态，因此分页器模块不跟踪待处理锁。
- en: 4.0 The Rollback Journal
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.0 回滚日志
- en: When a process wants to change a database file (and it is not in [WAL](wal.html)
    mode), it first records the original unchanged database content in a *rollback
    journal*. The rollback journal is an ordinary disk file that is always located
    in the same directory or folder as the database file and has the same name as
    the database file with the addition of a `-journal` suffix. The rollback journal
    also records the initial size of the database so that if the database file grows
    it can be truncated back to its original size on a rollback.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当进程想要修改数据库文件（且不处于[WAL](wal.html)模式时），首先会在一个*回滚日志*中记录未改变的原始数据库内容。回滚日志是一个普通的磁盘文件，总是位于与数据库文件相同的目录或文件夹中，并且与数据库文件同名，只是在后面加了一个
    `-journal` 后缀。回滚日志还记录了数据库的初始大小，因此如果数据库文件增长，则可以在回滚时将其截断回到原始大小。
- en: If SQLite is working with multiple databases at the same time (using the [ATTACH](lang_attach.html)
    command) then each database has its own rollback journal. But there is also a
    separate aggregate journal called the *super-journal*. The super-journal does
    not contain page data used for rolling back changes. Instead the super-journal
    contains the names of the individual database rollback journals for each of the
    ATTACHed databases. Each of the individual database rollback journals also contain
    the name of the super-journal. If there are no ATTACHed databases (or if none
    of the ATTACHed database is participating in the current transaction) no super-journal
    is created and the normal rollback journal contains an empty string in the place
    normally reserved for recording the name of the super-journal.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果SQLite同时处理多个数据库（使用[ATTACH](lang_attach.html)命令），则每个数据库都有其自己的回滚日志。但是还有一个名为*超级日志*的单独的聚合日志。超级日志不包含用于回滚更改的页面数据。相反，超级日志包含每个附加数据库的单独数据库回滚日志的名称。每个单独的数据库回滚日志也包含超级日志的名称。如果没有附加数据库（或者如果没有附加的数据库参与当前事务），则不会创建超级日志，并且普通的回滚日志在通常用于记录超级日志名称的位置上包含空字符串。
- en: A rollback journal is said to be [hot](fileformat2.html#hotjrnl) if it needs
    to be rolled back in order to restore the integrity of its database. A hot journal
    is created when a process is in the middle of a database update and a program
    or operating system crash or power failure prevents the update from completing.
    Hot journals are an exception condition. Hot journals exist to recover from crashes
    and power failures. If everything is working correctly (that is, if there are
    no crashes or power failures) you will never get a hot journal.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚日志被称为[热](fileformat2.html#hotjrnl)，如果需要回滚以恢复数据库的完整性。当进程正在进行数据库更新并且程序或操作系统崩溃或断电导致更新未能完成时，将创建热日志。热日志是一种异常情况。热日志用于从崩溃和断电中恢复。如果一切正常（即没有崩溃或断电），您永远不会遇到热日志。
- en: 'If no super-journal is involved, then a journal is hot if it exists and has
    a non-zero header and its corresponding database file does not have a RESERVED
    lock. If a super-journal is named in the file journal, then the file journal is
    hot if its super-journal exists and there is no RESERVED lock on the corresponding
    database file. It is important to understand when a journal is hot so the preceding
    rules will be repeated in bullets:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有涉及超级日志，则如果日志存在且具有非零头，并且相应的数据库文件没有保留锁，则日志为热。如果在文件日志中命名了超级日志，则如果其超级日志存在并且相应的数据库文件上没有保留锁，则文件日志为热。了解何时日志为热是很重要的，因此前述规则将重复列举如下：
- en: A journal is hot if...
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个日志文件...
- en: It exists, and
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它存在，并且
- en: Its size is greater than 512 bytes, and
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小大于512字节，并且
- en: The journal header is non-zero and well-formed, and
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志头非零且格式良好，并且
- en: Its super-journal exists or the super-journal name is an empty string, and
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其超级日志存在或超级日志名称为空字符串，并且
- en: There is no RESERVED lock on the corresponding database file.
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对应的数据库文件上没有保留锁。
- en: 4.1 Dealing with hot journals
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.1 处理热日志
- en: Before reading from a database file, SQLite always checks to see if that database
    file has a hot journal. If the file does have a hot journal, then the journal
    is rolled back before the file is read. In this way, we ensure that the database
    file is in a consistent state before it is read.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在从数据库文件读取之前，SQLite始终会检查该数据库文件是否有热日志。如果文件确实有热日志，则在读取文件之前回滚该日志。通过这种方式，我们确保在读取之前数据库文件处于一致的状态。
- en: 'When a process wants to read from a database file, it followed the following
    sequence of steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当进程想要从数据库文件读取时，它遵循以下步骤序列：
- en: Open the database file and obtain a SHARED lock. If the SHARED lock cannot be
    obtained, fail immediately and return SQLITE_BUSY.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开数据库文件并获取共享锁。如果无法获取共享锁，则立即失败并返回SQLITE_BUSY。
- en: Check to see if the database file has a hot journal. If the file does not have
    a hot journal, we are done. Return immediately. If there is a hot journal, that
    journal must be rolled back by the subsequent steps of this algorithm.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查数据库文件是否有热日志。如果文件没有热日志，我们就完成了。立即返回。如果有热日志，则必须通过后续步骤回滚该日志。
- en: 'Acquire a PENDING lock then an EXCLUSIVE lock on the database file. (Note:
    Do not acquire a RESERVED lock because that would make other processes think the
    journal was no longer hot.) If we fail to acquire these locks it means another
    process is already trying to do the rollback. In that case, drop all locks, close
    the database, and return SQLITE_BUSY.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库文件上获取挂起锁，然后获取排他锁。 （注意：不要获取保留锁，因为那会让其他进程认为日志不再是热的。）如果我们无法获取这些锁，则意味着另一个进程已经尝试进行回滚。在这种情况下，释放所有锁，关闭数据库，并返回SQLITE_BUSY。
- en: Read the journal file and roll back the changes.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取日志文件并回滚更改。
- en: Wait for the rolled back changes to be written onto persistent storage. This
    protects the integrity of the database in case another power failure or crash
    occurs.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待回滚的更改写入持久存储。这样可以在发生另一次断电或崩溃时保护数据库的完整性。
- en: Delete the journal file (or truncate the journal to zero bytes in length if
    [PRAGMA journal_mode=TRUNCATE](pragma.html#pragma_journal_mode) is set, or zero
    the journal header if [PRAGMA journal_mode=PERSIST](pragma.html#pragma_journal_mode)
    is set).
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除日志文件（如果设置了[PRAGMA journal_mode=TRUNCATE](pragma.html#pragma_journal_mode)，则将日志截断为零字节长度，或者如果设置了[PRAGMA
    journal_mode=PERSIST](pragma.html#pragma_journal_mode)，则将日志头部清零）。
- en: Delete the super-journal file if it is safe to do so. This step is optional.
    It is here only to prevent stale super-journals from cluttering up the disk drive.
    See the discussion below for details.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果可以的话，删除超级日志文件。这一步骤是可选的。这么做仅仅是为了防止过时的超级日志文件堆积在磁盘驱动器上。详细信息请参见下面的讨论。
- en: Drop the EXCLUSIVE and PENDING locks but retain the SHARED lock.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 丢弃排他锁和挂起锁，但保留共享锁。
- en: After the algorithm above completes successfully, it is safe to read from the
    database file. Once all reading has completed, the SHARED lock is dropped.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述算法成功完成后，从数据库文件中读取是安全的。一旦所有的读取完成，SHARED 锁就会被释放。
- en: 4.2 Deleting stale super-journals
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4.2 删除陈旧的超级日志
- en: A stale super-journal is a super-journal that is no longer being used for anything.
    There is no requirement that stale super-journals be deleted. The only reason
    for doing so is to free up disk space.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个陈旧的超级日志是指不再用于任何目的的超级日志。没有必要删除陈旧的超级日志。唯一的原因是为了释放磁盘空间。
- en: A super-journal is stale if no individual file journals are pointing to it.
    To figure out if a super-journal is stale, we first read the super-journal to
    obtain the names of all of its file journals. Then we check each of those file
    journals. If any of the file journals named in the super-journal exists and points
    back to the super-journal, then the super-journal is not stale. If all file journals
    are either missing or refer to other super-journals or no super-journal at all,
    then the super-journal we are testing is stale and can be safely deleted.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个超级日志在没有个别文件日志指向它时就变得陈旧了。要确定一个超级日志是否陈旧，我们首先读取超级日志以获取所有文件日志的名称。然后我们检查每一个文件日志。如果任何一个在超级日志中命名的文件日志存在，并指向回超级日志，则该超级日志不是陈旧的。如果所有文件日志要么丢失要么指向其他超级日志或者根本没有超级日志，那么我们正在测试的超级日志就是陈旧的，可以安全删除。
- en: 5.0 Writing to a database file
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.0 写入数据库文件
- en: To write to a database, a process must first acquire a SHARED lock as described
    above (possibly rolling back incomplete changes if there is a hot journal). After
    a SHARED lock is obtained, a RESERVED lock must be acquired. The RESERVED lock
    signals that the process intends to write to the database at some point in the
    future. Only one process at a time can hold a RESERVED lock. But other processes
    can continue to read the database while the RESERVED lock is held.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要向数据库写入，进程必须首先像上面描述的那样获取一个 SHARED 锁（如果存在热日志，则可能回滚不完整的更改）。获取 SHARED 锁后，必须获取 RESERVED
    锁。 RESERVED 锁表示进程打算在将来某个时候写入数据库。一次只有一个进程可以持有 RESERVED 锁。但是在持有 RESERVED 锁期间，其他进程仍然可以继续读取数据库。
- en: If the process that wants to write is unable to obtain a RESERVED lock, it must
    mean that another process already has a RESERVED lock. In that case, the write
    attempt fails and returns SQLITE_BUSY.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果试图写入的进程无法获取一个 RESERVED 锁，这必须意味着另一个进程已经拥有一个 RESERVED 锁。在这种情况下，写入尝试失败并返回 SQLITE_BUSY。
- en: After obtaining a RESERVED lock, the process that wants to write creates a rollback
    journal. The header of the journal is initialized with the original size of the
    database file. Space in the journal header is also reserved for a super-journal
    name, though the super-journal name is initially empty.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在获得 RESERVED 锁之后，希望写入的进程会创建一个回滚日志。日志的头部会被初始化为数据库文件的原始大小。日志头部还预留了超级日志名称的空间，尽管超级日志名称最初是空的。
- en: Before making changes to any page of the database, the process writes the original
    content of that page into the rollback journal. Changes to pages are held in memory
    at first and are not written to the disk. The original database file remains unaltered,
    which means that other processes can continue to read the database.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在对数据库的任何页面进行更改之前，进程将页面的原始内容写入回滚日志。页面的更改首先保存在内存中，并未写入磁盘。原始数据库文件保持不变，这意味着其他进程可以继续读取数据库。
- en: 'Eventually, the writing process will want to update the database file, either
    because its memory cache has filled up or because it is ready to commit its changes.
    Before this happens, the writer must make sure no other process is reading the
    database and that the rollback journal data is safely on the disk surface so that
    it can be used to rollback incomplete changes in the event of a power failure.
    The steps are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，写入过程将希望更新数据库文件，无论是因为其内存缓存已满还是准备提交其更改。在此之前，写入程序必须确保没有其他进程正在读取数据库，并且回滚日志数据已安全地存储在磁盘表面，以便在断电时可以用来回滚不完整的更改。步骤如下：
- en: Make sure all rollback journal data has actually been written to the surface
    of the disk (and is not just being held in the operating system's or disk controllers
    cache) so that if a power failure occurs the data will still be there after power
    is restored.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有回滚日志数据确实已写入磁盘表面（而不仅仅是保存在操作系统或磁盘控制器缓存中），以便在发生断电时，数据在电源恢复后仍然存在。
- en: Obtain a PENDING lock and then an EXCLUSIVE lock on the database file. If other
    processes still have SHARED locks, the writer might have to wait until those SHARED
    locks clear before it is able to obtain an EXCLUSIVE lock.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获得数据库文件的**PENDING**锁，然后再获取**EXCLUSIVE**锁。如果其他进程仍然持有**SHARED**锁，则写入程序可能需要等待直到这些**SHARED**锁被清除才能获取**EXCLUSIVE**锁。
- en: Write all page modifications currently held in memory out to the original database
    disk file.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前保存在内存中的所有页面修改写入原始数据库磁盘文件。
- en: If the reason for writing to the database file is because the memory cache was
    full, then the writer will not commit right away. Instead, the writer might continue
    to make changes to other pages. Before subsequent changes are written to the database
    file, the rollback journal must be flushed to disk again. Note also that the EXCLUSIVE
    lock that the writer obtained in order to write to the database initially must
    be held until all changes are committed. That means that no other processes are
    able to access the database from the time the memory cache first spills to disk
    until the transaction commits.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果写入数据库文件的原因是因为内存缓存已满，那么写入程序将不会立即提交。相反，写入程序可能会继续对其他页面进行更改。在将后续更改写入数据库文件之前，必须再次将回滚日志刷新到磁盘。还需注意，最初为了写入数据库而获取的**EXCLUSIVE**锁必须在所有更改提交之前保持。这意味着从内存缓存首次溢出到磁盘直到事务提交之前，其他进程无法访问数据库。
- en: 'When a writer is ready to commit its changes, it executes the following steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当写入者准备提交其更改时，执行以下步骤：
- en: Obtain an EXCLUSIVE lock on the database file and make sure all memory changes
    have been written to the database file using the algorithm of steps 1-3 above.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取数据库文件的 EXCLUSIVE 锁，并确保所有内存更改都已使用步骤 1-3 的算法写入数据库文件。
- en: Flush all database file changes to the disk. Wait for those changes to actually
    be written onto the disk surface.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新所有数据库文件的更改到磁盘。等待这些更改实际被写入磁盘表面。
- en: Delete the journal file. (Or if the [PRAGMA journal_mode](pragma.html#pragma_journal_mode)
    is TRUNCATE or PERSIST, truncate the journal file or zero the header of the journal
    file, respectively.) This is the instant when the changes are committed. Prior
    to deleting the journal file, if a power failure or crash occurs, the next process
    to open the database will see that it has a hot journal and will roll the changes
    back. After the journal is deleted, there will no longer be a hot journal and
    the changes will persist.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除日志文件。（或者如果[PRAGMA journal_mode](pragma.html#pragma_journal_mode)是 TRUNCATE
    或 PERSIST，则分别截断日志文件或将日志文件头部清零。）这是提交更改的时刻。在删除日志文件之前，如果发生断电或崩溃，下一个打开数据库的进程将看到有一个热日志，并将回滚更改。日志文件删除后，将不再存在热日志，并且更改将持久保存。
- en: Drop the EXCLUSIVE and PENDING locks from the database file.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数据库文件中删除 EXCLUSIVE 和 PENDING 锁。
- en: As soon as the PENDING lock is released from the database file, other processes
    can begin reading the database again. In the current implementation, the RESERVED
    lock is also released, but that is not essential for correct operation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从数据库文件中释放了 PENDING 锁，其他进程可以再次开始读取数据库。在当前实现中，RESERVED 锁也被释放，但这对于正确的操作并不是必要的。
- en: 'If a transaction involves multiple databases, then a more complex commit sequence
    is used, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个事务涉及多个数据库，则使用更复杂的提交顺序，如下所示：
- en: Make sure all individual database files have an EXCLUSIVE lock and a valid journal.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有单个数据库文件具有 EXCLUSIVE 锁和有效的日志。
- en: Create a super-journal. The name of the super-journal is arbitrary. (The current
    implementation appends random suffixes to the name of the main database file until
    it finds a name that does not previously exist.) Fill the super-journal with the
    names of all the individual journals and flush its contents to disk.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个超级日志。超级日志的名称是任意的。（当前实现将随机后缀附加到主数据库文件的名称，直到找到一个之前不存在的名称。）用所有单个日志的名称填充超级日志，并将其内容刷新到磁盘。
- en: Write the name of the super-journal into all individual journals (in space set
    aside for that purpose in the headers of the individual journals) and flush the
    contents of the individual journals to disk and wait for those changes to reach
    the disk surface.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将超级日志的名称写入所有单个日志（在单个日志头部专门留出的空间中），并刷新单个日志的内容到磁盘，并等待这些更改达到磁盘表面。
- en: Flush all database file changes to the disk. Wait for those changes to actually
    be written onto the disk surface.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新所有数据库文件更改到磁盘。等待这些更改确实被写入磁盘表面。
- en: Delete the super-journal file. This is the instant when the changes are committed.
    Prior to deleting the super-journal file, if a power failure or crash occurs,
    the individual file journals will be considered hot and will be rolled back by
    the next process that attempts to read them. After the super-journal has been
    deleted, the file journals will no longer be considered hot and the changes will
    persist.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除超级日志文件。这是提交更改的时刻。在删除超级日志文件之前，如果发生断电或崩溃，个别文件日志将被下一个尝试读取它们的进程视为热点并将其回滚。删除超级日志后，文件日志将不再被视为热点，更改将持久保存。
- en: Delete all individual journal files.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除所有单独的日志文件。
- en: Drop the EXCLUSIVE and PENDING locks from all database files.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从所有数据库文件中删除排他锁和挂起锁。
- en: 5.1 Writer starvation
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1 写入饥饿
- en: In SQLite version 2, if many processes are reading from the database, it might
    be the case that there is never a time when there are no active readers. And if
    there is always at least one read lock on the database, no process would ever
    be able to make changes to the database because it would be impossible to acquire
    a write lock. This situation is called *writer starvation*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLite 第 2 版中，如果有很多进程在从数据库中读取数据，可能永远不会出现没有活跃读取者的情况。如果数据库上始终至少有一个读取锁，任何进程都无法对数据库进行更改，因为无法获取写入锁。这种情况称为*写入饥饿*。
- en: SQLite version 3 seeks to avoid writer starvation through the use of the PENDING
    lock. The PENDING lock allows existing readers to continue but prevents new readers
    from connecting to the database. So when a process wants to write a busy database,
    it can set a PENDING lock which will prevent new readers from coming in. Assuming
    existing readers do eventually complete, all SHARED locks will eventually clear
    and the writer will be given a chance to make its changes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 第 3 版试图通过使用 PENDING 锁来避免写入饥饿。PENDING 锁允许现有的读取者继续，但阻止新的读取者连接到数据库。因此，当一个进程想要写入一个繁忙的数据库时，可以设置一个
    PENDING 锁，这将阻止新的读取者进入。假设现有的读取者最终完成，所有共享锁最终将清除，写入者将有机会进行更改。
- en: 6.0 How To Corrupt Your Database Files
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.0 如何损坏你的数据库文件
- en: The pager module is very robust but it can be subverted. This section attempts
    to identify and explain the risks. (See also the [Things That Can Go Wrong](atomiccommit.html#sect_9_0)
    section of the article on [Atomic Commit](atomiccommit.html).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Pager 模块非常强大，但也可以被破坏。本节试图识别和解释风险。（另请参阅[Things That Can Go Wrong](atomiccommit.html#sect_9_0)一文中关于[原子提交](atomiccommit.html)部分。）
- en: Clearly, a hardware or operating system fault that introduces incorrect data
    into the middle of the database file or journal will cause problems. Likewise,
    if a rogue process opens a database file or journal and writes malformed data
    into the middle of it, then the database will become corrupt. There is not much
    that can be done about these kinds of problems so they are given no further attention.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，硬件或操作系统故障导致数据库文件或日志中插入不正确数据将会引起问题。同样地，如果恶意进程打开数据库文件或日志，并向其中写入格式错误的数据，那么数据库将会损坏。对于这些问题，没有太多可以做的，因此它们不再受到进一步的关注。
- en: SQLite uses POSIX advisory locks to implement locking on Unix. On Windows it
    uses the LockFile(), LockFileEx(), and UnlockFile() system calls. SQLite assumes
    that these system calls all work as advertised. If that is not the case, then
    database corruption can result. One should note that POSIX advisory locking is
    known to be buggy or even unimplemented on many NFS implementations (including
    recent versions of Mac OS X) and that there are reports of locking problems for
    network filesystems under Windows. Your best defense is to not use SQLite for
    files on a network filesystem.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 在 Unix 上使用 POSIX 咨询锁来实现锁定。在 Windows 上，它使用 `LockFile()`、`LockFileEx()`
    和 `UnlockFile()` 系统调用。SQLite 假设这些系统调用都按照它们的宣称工作。如果情况不是这样，可能会导致数据库损坏。需要注意的是，众所周知，POSIX
    咨询锁在许多 NFS 实现（包括最近的 Mac OS X 版本）上存在问题，甚至未实现，并且有关 Windows 下网络文件系统的锁定问题的报道。你最好的防御措施是不要在网络文件系统上使用
    SQLite。
- en: SQLite uses the fsync() system call to flush data to the disk under Unix and
    it uses the FlushFileBuffers() to do the same under Windows. Once again, SQLite
    assumes that these operating system services function as advertised. But it has
    been reported that fsync() and FlushFileBuffers() do not always work correctly,
    especially with some network filesystems or inexpensive IDE disks. Apparently
    some manufactures of IDE disks have controller chips that report that data has
    reached the disk surface when in fact the data is still in volatile cache memory
    in the disk drive electronics. There are also reports that Windows sometimes chooses
    to ignore FlushFileBuffers() for unspecified reasons. The author cannot verify
    any of these reports. But if they are true, it means that database corruption
    is a possibility following an unexpected power loss. These are hardware and/or
    operating system bugs that SQLite is unable to defend against.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 在 Unix 下使用 `fsync()` 系统调用将数据刷新到磁盘，在 Windows 下则使用 `FlushFileBuffers()`
    来完成相同的操作。再次强调，SQLite 假设这些操作系统服务按照它们的宣称工作。但有报道称，特别是在某些网络文件系统或廉价的 IDE 硬盘上，`fsync()`
    和 `FlushFileBuffers()` 并不总是正常工作。显然，一些 IDE 硬盘的制造商的控制器芯片会报告数据已经达到磁盘表面，但实际上数据仍然存在于磁盘驱动电子设备的易失性缓存内存中。还有报道称，由于未指明的原因，Windows
    有时会选择忽略 `FlushFileBuffers()`。作者无法验证这些报告的真实性。但如果这些问题确实存在，意味着在意外断电后可能会导致数据库损坏。这些都是
    SQLite 无法应对的硬件和/或操作系统错误。
- en: If a Linux [ext3](http://en.wikipedia.org/wiki/Ext3) filesystem is mounted without
    the "barrier=1" option in the [/etc/fstab](http://en.wikipedia.org/wiki/fstab)
    and the disk drive write cache is enabled then filesystem corruption can occur
    following a power loss or OS crash. Whether or not corruption can occur depends
    on the details of the disk control hardware; corruption is more likely with inexpensive
    consumer-grade disks and less of a problem for enterprise-class storage devices
    with advanced features such as non-volatile write caches. Various ext3 experts
    [confirm this behavior](http://www.redhat.com/archives/ext3-users/2010-July/msg00001.html).
    We are told that most Linux distributions do not use barrier=1 and do not disable
    the write cache so most Linux distributions are vulnerable to this problem. Note
    that this is an operating system and hardware issue and that there is nothing
    that SQLite can do to work around it. [Other database engines](http://ozlabs.org/~rusty/index.cgi/tech/2009-10-20.html)
    have also run into this same problem.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Linux 的 [ext3](http://zh.wikipedia.org/wiki/Ext3) 文件系统在 [/etc/fstab](http://zh.wikipedia.org/wiki/fstab)
    中没有使用 "barrier=1" 选项挂载，并且磁盘驱动器写缓存已启用，则在断电或操作系统崩溃后可能会导致文件系统损坏。是否会发生损坏取决于磁盘控制硬件的细节；使用廉价的消费者级磁盘时更容易发生损坏，而企业级存储设备则相对较少出现此问题，因为其具有诸如非易失性写缓存等先进功能。各种
    ext3 专家 [确认了这种行为](http://www.redhat.com/archives/ext3-users/2010-July/msg00001.html)。我们被告知，大多数
    Linux 发行版都不使用 barrier=1，也不禁用写缓存，因此大多数 Linux 发行版都容易受到此问题的影响。请注意，这是一个操作系统和硬件问题，SQLite
    无法通过任何方式避免它。[其他数据库引擎](http://ozlabs.org/~rusty/index.cgi/tech/2009-10-20.html)
    也遇到了相同的问题。
- en: 'If a crash or power failure occurs and results in a hot journal but that journal
    is deleted, the next process to open the database will not know that it contains
    changes that need to be rolled back. The rollback will not occur and the database
    will be left in an inconsistent state. Rollback journals might be deleted for
    any number of reasons:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果崩溃或断电导致存在热日志但该日志被删除，那么下一个打开数据库的进程将不知道它包含需要回滚的更改。回滚将不会发生，数据库将处于不一致状态。可能会因各种原因删除回滚日志：
- en: An administrator might be cleaning up after an OS crash or power failure, see
    the journal file, think it is junk, and delete it.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果管理员在操作系统崩溃或停电后进行清理，并看到日志文件，可能会误认为它是垃圾而将其删除。
- en: Someone (or some process) might rename the database file but fail to also rename
    its associated journal.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某人（或某个进程）可能会重命名数据库文件但未能同时重命名其相关联的日志文件。
- en: If the database file has aliases (hard or soft links) and the file is opened
    by a different alias than the one used to create the journal, then the journal
    will not be found. To avoid this problem, you should not create links to SQLite
    database files.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果数据库文件有别名（硬链接或软链接），并且文件是通过与用于创建日志的不同别名打开的，那么将找不到日志。为避免此问题，不应创建指向 SQLite 数据库文件的链接。
- en: Filesystem corruption following a power failure might cause the journal to be
    renamed or deleted.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在断电后可能会导致文件系统损坏，从而使日志被重命名或删除。
- en: The last (fourth) bullet above merits additional comment. When SQLite creates
    a journal file on Unix, it opens the directory that contains that file and calls
    fsync() on the directory, in an effort to push the directory information to disk.
    But suppose some other process is adding or removing unrelated files to the directory
    that contains the database and journal at the moment of a power failure. The supposedly
    unrelated actions of this other process might result in the journal file being
    dropped from the directory and moved into "lost+found". This is an unlikely scenario,
    but it could happen. The best defenses are to use a journaling filesystem or to
    keep the database and journal in a directory by themselves.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后（第四条）上述内容需要额外的评论。当SQLite在Unix上创建日志文件时，它会打开包含该文件的目录，并调用该目录上的`fsync()`函数，以尝试将目录信息推送到磁盘上。但假设在数据库和日志所在的目录在停电时，其他进程正在添加或删除不相关的文件。这些其他进程的看似无关的操作可能导致日志文件从目录中删除并移动到"lost+found"目录中。这是一个不太可能的情况，但却有可能发生。最佳防御措施是使用日志文件系统或将数据库和日志保持在单独的目录中。
- en: For a commit involving multiple databases and a super-journal, if the various
    databases were on different disk volumes and a power failure occurs during the
    commit, then when the machine comes back up the disks might be remounted with
    different names. Or some disks might not be mounted at all. When this happens
    the individual file journals and the super-journal might not be able to find each
    other. The worst outcome from this scenario is that the commit ceases to be atomic.
    Some databases might be rolled back and others might not. All databases will continue
    to be self-consistent. To defend against this problem, keep all databases on the
    same disk volume and/or remount disks using exactly the same names after a power
    failure.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于涉及多个数据库和超级日志的提交，如果各个数据库位于不同的磁盘卷上，并且在提交过程中发生停电，则在机器重新启动时，磁盘可能会以不同的名称重新挂载。或者某些磁盘可能根本未被挂载。当出现这种情况时，各个文件日志和超级日志可能无法互相找到。这种情况的最坏结果是提交不再是原子性的。某些数据库可能会被回滚，而其他数据库则不会。所有数据库仍将保持自洽性。为了防范这个问题，保持所有数据库位于同一磁盘卷上，并/或在停电后确保使用完全相同的名称重新挂载磁盘。
- en: 7.0 Transaction Control At The SQL Level
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.0 SQL层面的事务控制
- en: The changes to locking and concurrency control in SQLite version 3 also introduce
    some subtle changes in the way transactions work at the SQL language level. By
    default, SQLite version 3 operates in *autocommit* mode. In autocommit mode, all
    changes to the database are committed as soon as all operations associated with
    the current database connection complete.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite版本3中锁定和并发控制的更改还引入了SQL语言层面事务工作方式的一些微妙变化。默认情况下，SQLite版本3在*自动提交*模式下运行。在自动提交模式下，与当前数据库连接关联的所有操作完成后，对数据库的所有更改都会立即提交。
- en: The SQL command "BEGIN TRANSACTION" (the TRANSACTION keyword is optional) is
    used to take SQLite out of autocommit mode. Note that the BEGIN command does not
    acquire any locks on the database. After a BEGIN command, a SHARED lock will be
    acquired when the first SELECT statement is executed. A RESERVED lock will be
    acquired when the first INSERT, UPDATE, or DELETE statement is executed. No EXCLUSIVE
    lock is acquired until either the memory cache fills up and must be spilled to
    disk or until the transaction commits. In this way, the system delays blocking
    read access to the file until the last possible moment.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: SQL命令 "BEGIN TRANSACTION" （TRANSACTION关键字是可选的） 用于将SQLite从自动提交模式中移出。请注意，BEGIN命令不会对数据库获取任何锁定。在执行第一个SELECT语句时，将获取一个SHARED锁。在执行第一个INSERT、UPDATE或DELETE语句时将获取一个RESERVED锁。直到内存缓存填满且必须溢出到磁盘或者事务提交之前，都不会获取EXCLUSIVE锁。通过这种方式，系统推迟了对文件的读取访问的阻塞，直到最后可能的时刻。
- en: The SQL command "COMMIT" does not actually commit the changes to disk. It just
    turns autocommit back on. Then, at the conclusion of the command, the regular
    autocommit logic takes over and causes the actual commit to disk to occur. The
    SQL command "ROLLBACK" also operates by turning autocommit back on, but it also
    sets a flag that tells the autocommit logic to rollback rather than commit.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: SQL命令 "COMMIT" 实际上并不会将更改提交到磁盘。它只是重新打开自动提交。然后，在命令结束时，常规的自动提交逻辑接管并导致将实际提交到磁盘。SQL命令
    "ROLLBACK" 也通过重新打开自动提交来操作，但它还设置了一个标志，告诉自动提交逻辑执行回滚而不是提交。
- en: If the SQL COMMIT command turns autocommit on and the autocommit logic then
    tries to commit change but fails because some other process is holding a SHARED
    lock, then autocommit is turned back off automatically. This allows the user to
    retry the COMMIT at a later time after the SHARED lock has had an opportunity
    to clear.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果SQL COMMIT命令打开了自动提交，然后自动提交逻辑尝试提交更改，但由于其他进程持有SHARED锁而失败，则自动提交会自动关闭。这允许用户在稍后，等待SHARED锁有机会清除之后，重新尝试COMMIT。
