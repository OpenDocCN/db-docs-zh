["```sql\nCREATE TABLE t0(x INTEGER PRIMARY KEY, y TEXT);\nINSERT INTO t0 VALUES (1, 'aaa'), (2, 'ccc'), (3, 'bbb');\n\n*-- The following SELECT statement returns:*\n*--* \n*--   x | y | row_number*\n-----------------------\n*--   1 | aaa | 1* \n*--   2 | ccc | 3* \n*--   3 | bbb | 2* \n*--* \nSELECT x, y, row_number() OVER (ORDER BY y) AS row_number FROM t0 ORDER BY x;\n\n```", "```sql\nSELECT x, y, row_number() OVER win1, rank() OVER win2\nFROM t0\nWINDOW win1 AS (ORDER BY y RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),\n       win2 AS (PARTITION BY y ORDER BY x)\nORDER BY x;\n\n```", "```sql\nCREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);\nINSERT INTO t1 VALUES   (1, 'A', 'one'  ),\n                        (2, 'B', 'two'  ),\n                        (3, 'C', 'three'),\n                        (4, 'D', 'one'  ),\n                        (5, 'E', 'two'  ),\n                        (6, 'F', 'three'),\n                        (7, 'G', 'one'  );\n\n```", "```sql\n*-- The following SELECT statement returns:*\n*--* \n*--   a | b | group_concat*\n-------------------------\n*--   1 | A | A.B* \n*--   2 | B | A.B.C* \n*--   3 | C | B.C.D* \n*--   4 | D | C.D.E* \n*--   5 | E | D.E.F* \n*--   6 | F | E.F.G* \n*--   7 | G | F.G* \n*--* \nSELECT a, b, group_concat(b, '.') OVER (\n  ORDER BY a ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n) AS group_concat FROM t1;\n\n```", "```sql\n*-- The following SELECT statement returns:*\n*--* \n*--   c     | a | b | group_concat*\n---------------------------------\n*--   one   | 1 | A | A.D.G* \n*--   one   | 4 | D | D.G* \n*--   one   | 7 | G | G* \n*--   three | 3 | C | C.F* \n*--   three | 6 | F | F* \n*--   two   | 2 | B | B.E* \n*--   two   | 5 | E | E* \n*--* \nSELECT c, a, b, group_concat(b, '.') OVER (\n  PARTITION BY c ORDER BY a RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n) AS group_concat\nFROM t1 ORDER BY c, a;\n\n```", "```sql\n*-- The following SELECT statement returns:*\n*--* \n*--   c     | a | b | group_concat*\n---------------------------------\n*--   one   | 1 | A | A.D.G* \n*--   two   | 2 | B | B.E* \n*--   three | 3 | C | C.F* \n*--   one   | 4 | D | D.G* \n*--   two   | 5 | E | E* \n*--   three | 6 | F | F* \n*--   one   | 7 | G | G* \n*--* \nSELECT c, a, b, group_concat(b, '.') OVER (\n  PARTITION BY c ORDER BY a RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n) AS group_concat\nFROM t1 ORDER BY a;\n\n```", "```sql\nRANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE NO OTHERS\n\n```", "```sql\n*-- The following SELECT statement returns:*\n*--* \n*--   a | b | c | group_concat*\n-----------------------------\n*--   1 | A | one   | A.D.G* \n*--   2 | B | two   | A.D.G.C.F.B.E*\n*--   3 | C | three | A.D.G.C.F* \n*--   4 | D | one   | A.D.G* \n*--   5 | E | two   | A.D.G.C.F.B.E*\n*--   6 | F | three | A.D.G.C.F* \n*--   7 | G | one   | A.D.G* \n*--* \nSELECT a, b, c,\n       group_concat(b, '.') OVER (ORDER BY c) AS group_concat\nFROM t1 ORDER BY a;\n\n```", "```sql\n*-- The following SELECT statement returns:*\n*--* \n*--   c     | a | b | group_concat*\n---------------------------------\n*--   one   | 1 | A | A.D.G.C.F.B.E*\n*--   one   | 4 | D | D.G.C.F.B.E* \n*--   one   | 7 | G | G.C.F.B.E* \n*--   three | 3 | C | C.F.B.E* \n*--   three | 6 | F | F.B.E* \n*--   two   | 2 | B | B.E* \n*--   two   | 5 | E | E* \n*--* \nSELECT c, a, b, group_concat(b, '.') OVER (\n  ORDER BY c, a ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n) AS group_concat\nFROM t1 ORDER BY c, a;\n\n```", "```sql\n*-- The following SELECT statement returns:*\n*--* \n*--   c    | a | b | no_others     | current_row | grp       | ties*\n*--  one   | 1 | A | A.D.G         | D.G         |           | A*\n*--  one   | 4 | D | A.D.G         | A.G         |           | D*\n*--  one   | 7 | G | A.D.G         | A.D         |           | G*\n*--  three | 3 | C | A.D.G.C.F     | A.D.G.F     | A.D.G     | A.D.G.C*\n*--  three | 6 | F | A.D.G.C.F     | A.D.G.C     | A.D.G     | A.D.G.F*\n*--  two   | 2 | B | A.D.G.C.F.B.E | A.D.G.C.F.E | A.D.G.C.F | A.D.G.C.F.B*\n*--  two   | 5 | E | A.D.G.C.F.B.E | A.D.G.C.F.B | A.D.G.C.F | A.D.G.C.F.E*\n*--* \nSELECT c, a, b,\n  group_concat(b, '.') OVER (\n    ORDER BY c GROUPS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE NO OTHERS\n  ) AS no_others,\n  group_concat(b, '.') OVER (\n    ORDER BY c GROUPS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW\n  ) AS current_row,\n  group_concat(b, '.') OVER (\n    ORDER BY c GROUPS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE GROUP\n  ) AS grp,\n  group_concat(b, '.') OVER (\n    ORDER BY c GROUPS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE TIES\n  ) AS ties\nFROM t1 ORDER BY c, a;\n\n```", "```sql\n*-- The following SELECT statement returns:*\n*--* \n*--   c     | a | b | group_concat*\n---------------------------------\n*--   one   | 1 | A | A* \n*--   two   | 2 | B | A* \n*--   three | 3 | C | A.C* \n*--   one   | 4 | D | A.C.D* \n*--   two   | 5 | E | A.C.D* \n*--   three | 6 | F | A.C.D.F* \n*--   one   | 7 | G | A.C.D.F.G* \n*--* \nSELECT c, a, b, group_concat(b, '.') FILTER (WHERE c!='two') OVER (\n  ORDER BY a\n) AS group_concat\nFROM t1 ORDER BY a;\n\n```", "```sql\nCREATE TABLE t2(a, b);\nINSERT INTO t2 VALUES('a', 'one'),\n                     ('a', 'two'),\n                     ('a', 'three'),\n                     ('b', 'four'),\n                     ('c', 'five'),\n                     ('c', 'six');\n\n```", "```sql\n*-- The following SELECT statement returns:*\n*--* \n*--   a | row_number | rank | dense_rank | percent_rank | cume_dist*\n------------------------------------------------------------------\n*--   a |          1 |    1 |          1 |          0.0 |       0.5*\n*--   a |          2 |    1 |          1 |          0.0 |       0.5*\n*--   a |          3 |    1 |          1 |          0.0 |       0.5*\n*--   b |          4 |    4 |          2 |          0.6 |       0.66*\n*--   c |          5 |    5 |          3 |          0.8 |       1.0*\n*--   c |          6 |    5 |          3 |          0.8 |       1.0*\n*--* \nSELECT a                        AS a,\n       row_number() OVER win    AS row_number,\n       rank() OVER win          AS rank,\n       dense_rank() OVER win    AS dense_rank,\n       percent_rank() OVER win  AS percent_rank,\n       cume_dist() OVER win     AS cume_dist\nFROM t2\nWINDOW win AS (ORDER BY a);\n\n```", "```sql\n*-- The following SELECT statement returns:*\n*--* \n*--   a | b     | ntile_2 | ntile_4*\n----------------------------------\n*--   a | one   |       1 |       1*\n*--   a | two   |       1 |       1*\n*--   a | three |       1 |       2*\n*--   b | four  |       2 |       2*\n*--   c | five  |       2 |       3*\n*--   c | six   |       2 |       4*\n*--* \nSELECT a                        AS a,\n       b                        AS b,\n       ntile(2) OVER win        AS ntile_2,\n       ntile(4) OVER win        AS ntile_4\nFROM t2\nWINDOW win AS (ORDER BY a);\n\n```", "```sql\n*-- The following SELECT statement returns:*\n*--* \n*--   b | lead | lag  | first_value | last_value | nth_value_3*\n-------------------------------------------------------------\n*--   A | C    | NULL | A           | A          | NULL* \n*--   B | D    | A    | A           | B          | NULL* \n*--   C | E    | B    | A           | C          | C* \n*--   D | F    | C    | A           | D          | C* \n*--   E | G    | D    | A           | E          | C* \n*--   F | n/a  | E    | A           | F          | C* \n*--   G | n/a  | F    | A           | G          | C* \n*--* \nSELECT b                          AS b,\n       lead(b, 2, 'n/a') OVER win AS lead,\n       lag(b) OVER win            AS lag,\n       first_value(b) OVER win    AS first_value,\n       last_value(b) OVER win     AS last_value,\n       nth_value(b, 3) OVER win   AS nth_value_3\nFROM t1\nWINDOW win AS (ORDER BY b ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\n\n```", "```sql\nSELECT group_concat(b, '.') OVER (\n  win ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n)\nFROM t1\nWINDOW win AS (PARTITION BY a ORDER BY c)\n\n```", "```sql\nSELECT group_concat(b, '.') OVER win ...\nSELECT group_concat(b, '.') OVER (win) ...\n\n```", "```sql\n\n```", "```sql\n\n```", "```sql\nCREATE TABLE t3(x, y);\nINSERT INTO t3 VALUES('a', 4),\n                     ('b', 5),\n                     ('c', 3),\n                     ('d', 8),\n                     ('e', 1);\n\n*-- Assuming the database is populated using the above script, the* \n*-- following SELECT statement returns:*\n*--* \n*--   x | sum_y*\n--------------\n*--   a | 9* \n*--   b | 12* \n*--   c | 16* \n*--   d | 12* \n*--   e | 9* \n*--* \nSELECT x, sumint(y) OVER (\n  ORDER BY x ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n) AS sum_y\nFROM t3 ORDER BY x;\n\n```"]