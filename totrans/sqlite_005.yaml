- en: 1\. Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 概述
- en: 原文：[https://sqlite.com/quirks.html](https://sqlite.com/quirks.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/quirks.html](https://sqlite.com/quirks.html)
- en: The SQL language is a "standard". Even so, no two SQL database engines work
    exactly alike. Every SQL implementation has it own peculiarities and oddities,
    and SQLite is no exception to this rule.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SQL语言是一种“标准”。即便如此，没有两个SQL数据库引擎的工作方式完全相同。每个SQL实现都有其自己的特殊之处和怪癖，SQLite也不例外。
- en: This document strives to highlight the principal differences between SQLite
    and other SQL implementations, as an aid to developers that are porting to or
    from SQLite or who are trying to build a system that works across multiple database
    engines.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在突出SQLite与其他SQL实现之间的主要差异，作为帮助那些正在将系统迁移到SQLite或从SQLite迁移的开发人员的辅助资料，或者是试图在多个数据库引擎之间构建系统的开发人员。
- en: If you are an SQLite user whose has stumbled over some quirk of SQLite that
    is not mentioned here, please let the developers know by posting a brief message
    on the [SQLite Forum](https://sqlite.org/forum/forum).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一个SQLite用户，遇到了此处未提及的某些SQLite怪癖，请通过在[SQLite论坛](https://sqlite.org/forum/forum)上发布简短消息告知开发人员。
- en: 2\. SQLite Is Embedded, Not Client-Server
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. SQLite是嵌入式的，而不是客户端-服务器
- en: Whenever comparing SQLite to other SQL database engines like SQL Server, PostgreSQL,
    MySQL, or Oracle, it is important first of all to realize that SQLite is not intended
    as a replacement or competitor to any of those systems. SQLite is [serverless](serverless.html).
    There is no separate server process that manages the database. An application
    interacts with the database engine using function calls, not by sending messages
    to a separate process or thread.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每当将SQLite与SQL Server、PostgreSQL、MySQL或Oracle等其他SQL数据库引擎进行比较时，首先重要的是意识到SQLite并不打算取代或竞争这些系统中的任何一个。SQLite是[无服务器](serverless.html)的。没有单独的服务器进程来管理数据库。应用程序通过函数调用与数据库引擎交互，而不是通过向单独的进程或线程发送消息。
- en: The fact that SQLite is embedded and [serverless](serverless.html) instead of
    being client/server is a feature, not a bug.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite作为嵌入式和非[服务器](serverless.html)的特性，而不是客户端/服务器，这是一个特点，而不是一个缺陷。
- en: Client/server databases like MySQL, PostgreSQL, SQL Server, Oracle, and others
    are an important component of modern systems. These systems solve an important
    problem. But SQLite solves a different problem. Both SQLite and client/server
    databases have their role. Developers who are comparing SQLite against other SQL
    database engines need to clearly understand this distinction.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 像MySQL、PostgreSQL、SQL Server、Oracle等客户端/服务器数据库是现代系统中的重要组成部分。这些系统解决了一个重要问题。但是SQLite解决了不同的问题。SQLite和客户端/服务器数据库都有其作用。将SQLite与其他SQL数据库引擎进行比较的开发人员需要清楚地理解这一区别。
- en: See the [Appropriate Uses For SQLite](whentouse.html) document for additional
    information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[SQLite适当使用场景](whentouse.html)文档以获取更多信息。
- en: 3\. Flexible Typing
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 灵活的类型
- en: SQLite is flexible with regard to datatypes. Datatypes are advisory rather than
    mandatory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite在数据类型方面非常灵活。数据类型是建议性的而不是强制性的。
- en: Some commentators say that SQLite is "weakly typed" and that other SQL databases
    are "strongly typed". We consider these terms to be inaccurate and even pejorative.
    We prefer to say that SQLite is "flexibly typed" and that other SQL database engines
    are "rigidly typed".
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些评论者说SQLite是“弱类型”的，而其他SQL数据库是“强类型”的。我们认为这些术语不准确甚至带有贬义。我们更倾向于说SQLite是“灵活类型”的，而其他SQL数据库引擎是“严格类型”的。
- en: See the [Datatypes in SQLite](datatype3.html) document for a detailed discussion
    of the type system in SQLite.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[SQLite中的数据类型](datatype3.html)文档，详细讨论SQLite中的类型系统。
- en: The key point is that SQLite is very forgiving of the type of data that you
    put into the database. For example, if a column has a datatype of "INTEGER" and
    the application inserts a text string into that column, SQLite will first try
    to convert the text string into an integer, just like every other SQL database
    engine. Thus, if one inserts **'1234'** into an INTEGER column, that value is
    converted into an integer 1234 and stored. But, if you insert a non-numeric string
    like **'wxyz'** into an INTEGER column, unlike other SQL databases, SQLite does
    not throw an error. Instead, SQLite stores the actual string value in the column.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 关键点在于SQLite非常宽容于放入数据库中的数据类型。例如，如果一个列的数据类型是“INTEGER”，而应用程序插入了一个文本字符串到该列中，SQLite会首先尝试将文本字符串转换为整数，就像每个其他SQL数据库引擎一样。因此，如果将**'1234'**插入到INTEGER列中，该值将被转换为整数1234并存储。但是，如果将非数值字符串如**'wxyz'**插入到INTEGER列中，与其他SQL数据库不同，SQLite不会抛出错误。相反，SQLite会将实际的字符串值存储在列中。
- en: Similarly, SQLite allows you to store a 2000-character string into a column
    of type VARCHAR(50). Other SQL implementations would either throw an error or
    truncate the string. SQLite stores the entire 2000-character string with no loss
    of information and without complaint.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，SQLite允许您将一个2000字符的字符串存储到VARCHAR(50)类型的列中。其他SQL实现要么会抛出错误，要么会截断字符串。SQLite存储整个2000字符的字符串，没有信息丢失，也没有投诉。
- en: Where this ends up causing problems is when developers do some initial coding
    work using SQLite and get their application working, but then try to convert to
    another database like PostgreSQL or SQL Server for deployment. If the application
    is initially taking advantage of SQLite's flexible typing, then it will fail when
    moved to another database that is more judgmental about data types.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的根源在于开发人员在使用SQLite做一些初始编码工作并使其应用程序正常运行后，尝试将其转换到像PostgreSQL或SQL Server这样的另一个数据库时。如果应用程序最初利用了SQLite的灵活类型，那么当转移到对数据类型更加严格的其他数据库时，它将失败。
- en: '[Flexible typing is a feature](flextypegood.html) of SQLite, not a bug. Flexible
    typing is about freedom. Nevertheless, we recognize that this feature does sometimes
    cause confusion for developers who are accustomed to working with other databases
    that are more strict with regard to data type rules. In retrospect, perhaps it
    would have been less confusing if SQLite had merely implemented an ANY datatype
    so that developers could explicitly state when they wanted to use flexible typing,
    rather than making flexible typing the default. As an accommodation for those
    who expect rigid typing, SQLite version 3.37.0 (2021-11-27) introduced the option
    of [STRICT tables](stricttables.html). These either impose the mandatory datatype
    constraints found in other SQL database engines, or allow the explicit ANY datatype
    to retain SQLite''s flexible typing.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[灵活类型是SQLite的一个特性](flextypegood.html)，而不是一个bug。灵活类型是关于自由的。尽管如此，我们承认，这个特性有时会导致习惯于使用其他更严格的数据类型规则的开发人员感到困惑。回顾起来，也许如果SQLite仅实现了一个ANY数据类型，开发人员可以在需要使用灵活类型时明确说明，而不是将灵活类型作为默认选项，可能会减少困惑。作为对那些期望严格类型的人的一种适应，SQLite版本3.37.0（2021-11-27）引入了[STRICT
    tables](stricttables.html)的选项。这些选项要么强制实施其他SQL数据库引擎中发现的强制数据类型约束，要么允许使用显式的ANY数据类型保留SQLite的灵活类型。'
- en: 3.1\. No Separate BOOLEAN Datatype
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1\. 没有单独的BOOLEAN数据类型
- en: Unlike most other SQL implementations, SQLite does not have a separate BOOLEAN
    data type. Instead, TRUE and FALSE are (normally) represented as integers 1 and
    0, respectively. This does not seem to cause many problems, as we seldom get complaints
    about it. But it is important to recognize.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数其他SQL实现不同，SQLite没有单独的BOOLEAN数据类型。相反，TRUE和FALSE分别（通常）表示为整数1和0。这似乎并没有引起太多问题，因为我们很少收到关于它的投诉。但是这一点很重要要认识到。
- en: Beginning with SQLite [version 3.23.0](releaselog/3_23_0.html) (2018-04-02),
    SQLite also recognizes TRUE and FALSE keywords as aliases for integer values 1
    and 0, respectively. This provides better compatibility with other SQL implementations.
    But for backwards compatibility, if there are columns named TRUE or FALSE, then
    the keywords are treated as identifiers referencing those columns, rather than
    BOOLEAN literals.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQLite [版本3.23.0](releaselog/3_23_0.html)（2018-04-02）开始，SQLite还识别TRUE和FALSE关键字作为整数值1和0的别名。这提供了与其他SQL实现更好的兼容性。但为了向后兼容性，如果有名为TRUE或FALSE的列，则这些关键字将被视为引用这些列的标识符，而不是BOOLEAN文字。
- en: 3.2\. No Separate DATETIME Datatype
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2\. 没有单独的DATETIME数据类型
- en: 'SQLite has no DATETIME datatype. Instead, dates and times can be stored in
    any of these ways:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite没有DATETIME数据类型。相反，日期和时间可以以以下任何一种方式存储：
- en: 'As a TEXT string in the ISO-8601 format. Example: ''2018-04-02 12:13:46''.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为ISO-8601格式的文本字符串。例如：'2018-04-02 12:13:46'。
- en: As an INTEGER number of seconds since 1970 (also known as "unix time").
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为自1970年以来的整数秒数（也称为“unix时间”）。
- en: As a REAL value that is the fractional [Julian day number](https://en.wikipedia.org/wiki/Julian_day).
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为小数部分的实数值，即[儒略日数](https://en.wikipedia.org/wiki/Julian_day)。
- en: The built-in [date and time functions](lang_datefunc.html) of SQLite understand
    date/times in all of the formats above, and can freely change between them. Which
    format you use, is entirely up to your application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite的内置[date and time functions](lang_datefunc.html)了解所有上述格式的日期/时间，并可以在它们之间自由变换。使用哪种格式完全取决于您的应用程序。
- en: 3.3\. The datatype is optional
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3\. 数据类型是可选的
- en: 'Because SQLite is flexible and forgiving with regard to datatypes, table columns
    can be created that have no specified datatype at all. For example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 SQLite 在数据类型方面很灵活且宽容，所以可以创建没有指定数据类型的表列。例如：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The table "t1" has four columns "a", "b", "c", and "d" that have no particular
    datatype assigned. You can store anything you want in any of those columns.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 表 "t1" 有四列 "a"、"b"、"c" 和 "d"，没有特定的数据类型。你可以在这些列中存储任何你想要的数据。
- en: 4\. Foreign Key Enforcement Is Off By Default
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 默认情况下，外键强制执行是关闭的
- en: SQLite has parsed foreign key constraints for time out of mind, but added the
    ability to actually enforce those constraints much later, with [version 3.6.19](releaselog/3_6_19.html)
    (2009-10-14). By the time foreign key constraint enforcement was added, there
    were already countless millions of databases in circulation that contained foreign
    key constraints, some of which were not correct. To avoid breaking those legacy
    databases, foreign key constraint enforcement is turned off by default in SQLite.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 早在很久以前就解析了外键约束，但是直到后来的 [版本 3.6.19](releaselog/3_6_19.html) (2009-10-14)
    才增加了实际强制执行这些约束的能力。在增加外键约束强制执行之时，已经有数以百万计的数据库包含了某些不正确的外键约束。为了避免破坏那些遗留数据库，SQLite
    默认情况下关闭了外键约束强制执行。
- en: Applications can activate foreign key enforcement at run-time using the [PRAGMA
    foreign_keys](pragma.html#pragma_foreign_keys) statement. Or, foreign key enforcement
    can be activated at compile-time using the [-DSQLITE_DEFAULT_FOREIGN_KEYS=1](compile.html#default_foreign_keys)
    compile-time option.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以通过在运行时使用 [PRAGMA foreign_keys](pragma.html#pragma_foreign_keys) 语句来激活外键强制执行。或者，可以通过
    [-DSQLITE_DEFAULT_FOREIGN_KEYS=1](compile.html#default_foreign_keys) 编译时选项在编译时激活外键强制执行。
- en: 5\. PRIMARY KEYs Can Sometimes Contain NULLs
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 主键有时可以包含 NULL 值
- en: A PRIMARY KEY in an SQLite table is usually just a UNIQUE constraint. Due to
    an historical oversight, the column values of a PRIMARY KEY are allowed to be
    NULL. This is a bug, but by the time the problem was discovered there where so
    many databases in circulation that depended on the bug that the decision was made
    to support the buggy behavior moving forward. You can work around this problem
    by adding a NOT NULL constraint on each column of the PRIMARY KEY.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLite 表中，主键通常只是一个唯一约束。由于一个历史性的疏忽，主键的列值允许为 NULL。这是一个 bug，但是当问题被发现时，已经有很多依赖于这个
    bug 的数据库在流通中了，所以决定继续支持这种有问题的行为。你可以通过在每个主键列上添加 NOT NULL 约束来解决这个问题。
- en: 'Exceptions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例外情况：
- en: The value of an [INTEGER PRIMARY KEY](lang_createtable.html#rowid) column must
    always be a non-NULL integer because the INTEGER PRIMARY KEY is an alias for the
    [ROWID](lang_createtable.html#rowid). If you try to insert a NULL into an INTEGER
    PRIMARY KEY column, SQLite automatically convert the NULL into a unique integer.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[INTEGER PRIMARY KEY](lang_createtable.html#rowid) 列的值必须始终是非 NULL 整数，因为 INTEGER
    PRIMARY KEY 是 [ROWID](lang_createtable.html#rowid) 的别名。如果尝试向 INTEGER PRIMARY KEY
    列插入 NULL，则 SQLite 会自动将 NULL 转换为唯一的整数。'
- en: 'The [WITHOUT ROWID](withoutrowid.html) and [STRICT](stricttables.html) features
    was added after this bug was discovered, and so WITHOUT ROWID and STRICT tables
    work correctly: They disallow NULLs in the PRIMARY KEY.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个 bug 被发现后，添加了 [WITHOUT ROWID](withoutrowid.html) 和 [STRICT](stricttables.html)
    特性，所以 WITHOUT ROWID 和 STRICT 表工作得很正常：它们不允许在主键中存在 NULL 值。
- en: 6\. Aggregate Queries Can Contain Non-Aggregate Result Columns That Are Not
    In The GROUP BY Clause
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 聚合查询可以包含非聚合结果列，这些列不在 GROUP BY 子句中
- en: In most SQL implementations, output columns of an aggregate query may only reference
    aggregate functions or columns named in the GROUP BY clause. It does not make
    good sense to reference an ordinary column in an aggregate query because each
    output row might be composed from two or more rows in the input table(s).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数 SQL 实现中，聚合查询的输出列只能引用聚合函数或在 GROUP BY 子句中命名的列。在聚合查询中引用普通列并不明智，因为每个输出行可能由输入表中的两个或更多行组成。
- en: 'SQLite does not enforce this restriction. The output columns from an aggregate
    query can be arbitrary expressions that include columns not found in GROUP BY
    clause. This feature has two uses:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 不强制执行这个限制。聚合查询的输出列可以是包含不在 GROUP BY 子句中的列的任意表达式。这个特性有两个用途：
- en: With SQLite (but not any other SQL implementation that we know of) if an aggregate
    query contains a single min() or max() function, then the values of columns used
    in the output are taken from the row where the min() or max() value was achieved.
    If two or more rows have the same min() or max() value, then the columns values
    will be chosen arbitrarily from one of those rows.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于SQLite（但不适用于我们所知的任何其他SQL实现），如果聚合查询包含单个min()或max()函数，则输出中使用的列值将来自满足min()或max()值的行。如果两个或更多行具有相同的min()或max()值，则列值将从这些行中的任意一行任意选择。
- en: 'For example to find the highest paid employee:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，要查找薪水最高的员工：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the query above, the values for the first_name and last_name columns will
    correspond to the row that satisfied the max(salary) condition.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的查询中，first_name和last_name列的值将对应于满足max(salary)条件的行。
- en: If a query contains no aggregate functions at all, then a GROUP BY clause can
    be added as a substitute for the DISTINCT ON clause. In other words, output rows
    are filtered so that only one row is shown for each distinct set of values in
    the GROUP BY clause. If two or more output rows would have otherwise had the same
    set of values for the GROUP BY columns, then one of the rows is chosen arbitrarily.
    (SQLite supports DISTINCT but not DISTINCT ON, whose functionality is provided
    instead by GROUP BY.)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果查询根本不包含任何聚合函数，则可以添加GROUP BY子句作为DISTINCT ON子句的替代。换句话说，输出行被过滤，以便每个GROUP BY列值集合中只显示一行。如果两个或更多输出行在GROUP
    BY列中具有相同的值集合，则任意选择其中一行。（SQLite支持DISTINCT但不支持DISTINCT ON，其功能由GROUP BY提供。）
- en: 7\. SQLite Does Not Do Full Unicode Case Folding By Default
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. SQLite 默认情况下不进行完全的Unicode大小写折叠。
- en: 'SQLite does not know about the upper-case/lower-case distinction for all unicode
    characters. SQL functions like upper() and lower() only work on ASCII characters.
    There are two reasons for this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 对于所有Unicode字符并不区分大小写。像upper()和lower()这样的SQL函数只适用于ASCII字符。这有两个原因：
- en: Though stable now, when SQLite was first designed, the rules for unicode case
    folding were still in flux. That means that the behavior might have changed with
    each new unicode release, disrupting applications and corrupting indexes in the
    process.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然现在很稳定，但当SQLite首次设计时，Unicode大小写折叠规则仍在变动中。这意味着行为可能会随着每个新的Unicode发布而改变，从而破坏应用程序并损坏索引。
- en: The tables necessary to do full and proper unicode case folding are larger than
    the whole SQLite library.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于执行完全和正确的Unicode大小写折叠的表比整个SQLite库还要大。
- en: Full unicode case folding is supported in SQLite if it is compiled with the
    [-DSQLITE_ENABLE_ICU](compile.html#enable_icu) option and linked against the [International
    Components for Unicode](https://icu.unicode.org) library.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果SQLite编译时启用了[-DSQLITE_ENABLE_ICU](compile.html#enable_icu)选项并链接了[国际Unicode组件](https://icu.unicode.org)库，它就支持完全的Unicode大小写折叠。
- en: 8\. Double-quoted String Literals Are Accepted
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. 双引号字符串字面量是被接受的
- en: 'The SQL standard requires double-quotes around identifiers and single-quotes
    around string literals. For example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: SQL标准要求标识符要用双引号括起来，字符串字面量要用单引号括起来。例如：
- en: '`"this is a legal SQL column name"`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"this is a legal SQL column name"`'
- en: '`''this is an SQL string literal''`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''this is an SQL string literal''`'
- en: SQLite accepts both of the above. But, in an effort to be compatible with MySQL
    3.x (which was one of the most widely used RDBMSes when SQLite was first being
    designed) SQLite will also interpret a double-quotes string as string literal
    if it does not match any valid identifier.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite接受上述两种情况。但是为了兼容MySQL 3.x（当SQLite首次设计时，MySQL 3.x是最广泛使用的关系数据库管理系统之一），SQLite还将解释为字符串字面量，如果它不匹配任何有效标识符。
- en: This misfeature means that a misspelled double-quoted identifier will be interpreted
    as a string literal, rather than generating an error. It also lures developers
    who are new to the SQL language into the bad habit of using double-quoted string
    literals when they really need to learn to use the correct single-quoted string
    literal form.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设计缺陷意味着，一个拼错的双引号标识符会被解释为一个字符串字面量，而不是生成一个错误。它还会诱使刚接触SQL语言的开发者养成错误使用双引号字符串字面量的坏习惯，而他们真正需要学会使用正确的单引号字符串字面量形式。
- en: In hindsight, we should not have tried to make SQLite accept MySQL 3.x syntax,
    and should have never allowed double-quoted string literals. However, there are
    countless applications that make use of double-quoted string literals and so we
    continue to support that capability to avoid breaking legacy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 事后看来，我们不应该尝试使SQLite接受MySQL 3.x语法，并且永远不应该允许双引号字符串文字。然而，有无数应用程序使用双引号字符串文字，因此我们继续支持这种功能，以避免破坏传统。
- en: As of SQLite 3.27.0 (2019-02-07) the use of a double-quoted string literal causes
    a warning message to be sent to the [error log](errlog.html).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 截至SQLite 3.27.0（2019-02-07），使用双引号字符串文字会导致向[错误日志](errlog.html)发送警告消息。
- en: 'As of SQLite 3.29.0 (2019-07-10) the use of double-quoted string literals can
    be disabled at run-time using the [SQLITE_DBCONFIG_DQS_DDL](c3ref/c_dbconfig_defensive.html#sqlitedbconfigdqsddl)
    and [SQLITE_DBCONFIG_DQS_DML](c3ref/c_dbconfig_defensive.html#sqlitedbconfigdqsdml)
    actions to [sqlite3_db_config()](c3ref/db_config.html). The default settings can
    be altered at compile-time using the [-DSQLITE_DQS=*N*](compile.html#dqs) compile-time
    option. Application developers are encouraged to compile using -DSQLITE_DQS=0
    in order to disable the double-quoted string literal misfeature by default. If
    that is not possible, then disable double-quoted string literals for individual
    database connections using C-code like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 截至SQLite 3.29.0（2019-07-10），可以使用[SQLITE_DBCONFIG_DQS_DDL](c3ref/c_dbconfig_defensive.html#sqlitedbconfigdqsddl)和[SQLITE_DBCONFIG_DQS_DML](c3ref/c_dbconfig_defensive.html#sqlitedbconfigdqsdml)操作通过[sqlite3_db_config()](c3ref/db_config.html)在运行时禁用双引号字符串文字。可以使用[-DSQLITE_DQS=*N*](compile.html#dqs)编译选项在编译时更改默认设置。建议应用开发人员使用-DSQLITE_DQS=0编译，以便默认禁用双引号字符串文字。如果不可能，则可以使用像下面这样的C代码为单个数据库连接禁用双引号字符串文字：
- en: '[PRE2]'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Or, if double-quoted string literals are disabled by default, but need to be
    selectively enabled for some historical database connections, that can be done
    using the same C-code as shown above except with the third parameter changed from
    0 to 1.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果默认情况下禁用了双引号字符串文字，但需要为一些历史数据库连接有选择地启用它们，则可以使用与上面显示的相同的C代码，只是将第三个参数从0更改为1。
- en: As of SQLite 3.41.0 (2023-02-21) SQLITE_DBCONFIG_DQS_DDL and SQLITE_DBCONFIG_DQS_DML
    are disabled by default in the [CLI](cli.html). Use the ".dbconfig" dot-command
    to reenable the legacy behavior if desired.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 截至SQLite 3.41.0（2023-02-21），默认情况下在[CLI](cli.html)中禁用了SQLITE_DBCONFIG_DQS_DDL和SQLITE_DBCONFIG_DQS_DML。如果需要，可以使用".dbconfig"
    dot-command重新启用传统行为。
- en: 9\. Keywords Can Often Be Used As Identifiers
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9\. 关键字通常可以用作标识符
- en: The SQL language is rich in keywords. Most SQL implementations do not allow
    keywords to be used as identifiers (names of tables or columns) unless they are
    enclosed in double-quotes. But SQLite is more flexible. Many keywords can be used
    as identifiers without needing to be quoted, as long as those keywords are used
    in a context where it is clear that they are intended to be an identifier.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: SQL语言中关键字丰富。大多数SQL实现不允许将关键字用作标识符（表名或列名）的名称，除非将其括在双引号中。但是SQLite更为灵活。许多关键字可以在不需要引号的情况下用作标识符，只要这些关键字在使用上下文中明确表明它们是标识符即可。
- en: 'For example, the following statement is valid in SQLite:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在SQLite中，以下语句是有效的：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The same SQL statement will fail on every other SQL implementation that we know
    of due to the use of keywords "union", "true", and "with" as identifiers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，其他所有SQL实现上述相同的SQL语句将失败，因为它使用关键字"union"、"true"和"with"作为标识符。
- en: 'The ability to use keywords as identifiers promotes backwards compatibility.
    As new keywords are added, legacy schemas that just happen to use those keywords
    as table or column names continue to work. However, the ability to use a keyword
    as an identifier sometimes leads to surprising outcomes. For example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关键字作为标识符的能力促进了向后兼容性。随着添加新关键字，仅偶尔使用这些关键字作为表或列名的旧架构继续工作。然而，使用关键字作为标识符的能力有时会导致意外的结果。例如：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The trigger created by the previous statement is named "AFTER" and it is a
    "BEFORE" trigger. The "AFTER" token is used as an identifier instead of as a keyword,
    as that is the only way to parse the statement. Another example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前面语句创建的触发器名为"AFTER"，它是一个"BEFORE"触发器。"AFTER"令牌被用作标识符而不是关键字，因此这是解析语句的唯一方法。另一个例子：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The tableZ table has a single column named "INTEGER". That column has no datatype
    specified, but it is the PRIMARY KEY. The column is *not* the [INTEGER PRIMARY
    KEY](lang_createtable.html#rowid) for the table because it has no datatype. The
    "INTEGER" token is used as an identifier for the column name, not as a datatype
    keyword.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: tableZ表只有一个名为"INTEGER"的列。该列没有指定数据类型，但是它是主键。该列*不是*表的[INTEGER PRIMARY KEY](lang_createtable.html#rowid)，因为它没有数据类型。"INTEGER"标记用作列名的标识符，而不是数据类型关键字。
- en: 10\. Dubious SQL Is Allowed Without Any Error Or Warning
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10\. 可以在没有任何错误或警告的情况下允许可疑的SQL。
- en: The original implementation of SQLite sought to follow [Postel's Law](https://en.wikipedia.org/wiki/Robustness_principle)
    which states in part "Be liberal in what you accept". This used to be considered
    good design - that a system would accept dodgy inputs and try to do the best it
    could without complaining too much. But lately, people have come to realize that
    it is sometimes better to be strict in what you accept, so as to more easily find
    errors in the input.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite的最初实现旨在遵循[波斯特尔法则](https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E8%A7%84%E8%8C%83)的部分内容，“在接受输入时要宽容”。这曾被认为是良好的设计——系统会接受可疑的输入并尽量做到最好而不会抱怨太多。但近来人们已经意识到，有时严格接受输入会更好，因为这样更容易找到输入中的错误。
- en: 11\. AUTOINCREMENT Does Not Work The Same As MySQL
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11\. AUTOINCREMENT与MySQL不同
- en: The [AUTOINCREMENT](autoinc.html) feature in SQLite works differently than it
    does in MySQL. This often causes confusion for people who initially learned SQL
    on MySQL and then start using SQLite, and expect the two systems to work identically.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLite AUTOINCREMENT](autoinc.html)特性在SQLite中的工作方式与MySQL不同。这经常会让那些最初在MySQL上学习SQL，然后开始使用SQLite并期望两个系统工作方式相同的人感到困惑。'
- en: See the [SQLite AUTOINCREMENT documentation](autoinc.html) for detailed instructions
    on what AUTOINCREMENT does and does not do in SQLite.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 详细了解SQLite中AUTOINCREMENT的功能及其作用，请参见[SQLite AUTOINCREMENT文档](autoinc.html)。
- en: 12\. NUL Characters Are Allowed In Text Strings
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12\. 文本字符串中允许存在NUL字符
- en: NUL characters (ASCII code 0x00 and Unicode \u0000) may appear in the middle
    of strings in SQLite. This can lead to unexpected behavior. See the "[NUL characters
    in strings](nulinstr.html)" document for further information.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: NUL字符（ASCII码0x00和Unicode \u0000）可能出现在SQLite字符串的中间。这可能导致意外的行为。有关更多信息，请参阅"[字符串中的NUL字符](nulinstr.html)"文档。
- en: 13\. SQLite Distinguishes Between Integer And Text Literals
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13\. SQLite区分整数和文本文字面量。
- en: 'SQLite says that the following query returns false:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite表示以下查询返回false：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It does this because an integer is not a string. Every other major SQL database
    engine says this is true, for reasons that the creator of SQLite does not understand.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它这样做是因为整数不是字符串。其他所有主要的SQL数据库引擎都认为这是真的，原因是SQLite的创建者不理解。
- en: 14\. SQLite Gets The Precedence Of Comma-Joins Wrong
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14\. SQLite错误地解析逗号连接的优先级
- en: 'SQLite gives all join operators equal precedence and processes them from left
    to right. But this is not quite correct. It should be that comma-joins have lower
    precedence than all others join operators. In other words, a FROM clause like
    this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite给予所有连接操作符相等的优先级，并从左到右处理它们。但这并不完全正确。应该是逗号连接比其他所有连接操作符的优先级都低。换句话说，像这样的FROM子句：
- en: '... FROM a, b RIGHT JOIN c, d ...'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '... FROM a, b RIGHT JOIN c, d ...'
- en: 'Should be parsed as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 应该解析如下：
- en: <svg class="pikchr" viewBox="0 0 153.328 245.544"><text x="93" y="17" text-anchor="middle"
    fill="rgb(0,0,0)" dominant-baseline="central">JOIN</text> <text x="53" y="87"
    text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">JOIN</text>
    <text x="134" y="87" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">D</text>
    <text x="93" y="157" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">RIGHT JOIN</text>
    <text x="13" y="157" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">A</text>
    <text x="53" y="228" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">B</text>
    <text x="134" y="228" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">C</text></svg>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <svg class="pikchr" viewBox="0 0 153.328 245.544"><text x="93" y="17" text-anchor="middle"
    fill="rgb(0,0,0)" dominant-baseline="central">JOIN</text> <text x="53" y="87"
    text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">JOIN</text>
    <text x="134" y="87" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">D</text>
    <text x="93" y="157" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">RIGHT JOIN</text>
    <text x="13" y="157" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">A</text>
    <text x="53" y="228" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">B</text>
    <text x="134" y="228" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">C</text></svg>
- en: 'But SQLite instead parses the FROM clause like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 但是SQLite实际上会像这样解析FROM子句：
- en: <svg class="pikchr" viewBox="0 0 188.691 245.544"><text x="134" y="17" text-anchor="middle"
    fill="rgb(0,0,0)" dominant-baseline="central">JOIN</text> <text x="93" y="87"
    text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">RIGHT JOIN</text>
    <text x="174" y="87" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">D</text>
    <text x="53" y="157" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">JOIN</text>
    <text x="134" y="157" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">C</text>
    <text x="13" y="228" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">A</text>
    <text x="93" y="228" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">B</text></svg>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <svg class="pikchr" viewBox="0 0 188.691 245.544"><text x="134" y="17" text-anchor="middle"
    fill="rgb(0,0,0)" dominant-baseline="central">连接</text> <text x="93" y="87" text-anchor="middle"
    fill="rgb(0,0,0)" dominant-baseline="central">右连接</text> <text x="174" y="87"
    text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">D</text> <text
    x="53" y="157" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">连接</text>
    <text x="134" y="157" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">C</text>
    <text x="13" y="228" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">A</text>
    <text x="93" y="228" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">B</text></svg>
- en: 'The problem can only makes a difference in the result when using RIGHT OUTER
    JOIN or FULL OUTER JOIN in the same FROM clause with comma-joins, which rarely
    happens in practice. And the problem can be easily overcome using parentheses
    in the FROM clause:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用右外连接或全外连接在同一FROM子句中与逗号连接一起使用时，只有在极少数情况下才会在结果中产生差异。可以轻松通过在FROM子句中使用括号来解决这个问题：
- en: '... FROM a, (b RIGHT JOIN c), d ...'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '... FROM a, (b 右连接 c), d ...'
