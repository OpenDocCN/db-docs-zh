- en: 1\. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 简介
- en: 原文：[https://sqlite.com/withoutrowid.html](https://sqlite.com/withoutrowid.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/withoutrowid.html](https://sqlite.com/withoutrowid.html)
- en: By default, every row in SQLite has a special column, usually called the "[rowid](lang_createtable.html#rowid)",
    that uniquely identifies that row within the table. However if the phrase "WITHOUT
    ROWID" is added to the end of a [CREATE TABLE](lang_createtable.html) statement,
    then the special "rowid" column is omitted. There are sometimes space and performance
    advantages to omitting the rowid.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，SQLite 中的每一行都有一个特殊列，通常称为"[rowid](lang_createtable.html#rowid)"，用于在表内唯一标识该行。然而，如果在
    [CREATE TABLE](lang_createtable.html) 语句的末尾添加了"WITHOUT ROWID"短语，则特殊的"rowid"列将被省略。省略rowid有时会带来空间和性能上的优势。
- en: A WITHOUT ROWID table is a table that uses a [Clustered Index](https://en.wikipedia.org/wiki/Database_index#Clustered)
    as the primary key.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个无ROWID表是使用[聚簇索引](https://en.wikipedia.org/wiki/Database_index#Clustered)作为主键的表。
- en: 1.1\. Syntax
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1\. 语法
- en: 'To create a WITHOUT ROWID table, simply add the keywords "WITHOUT ROWID" to
    the end of the [CREATE TABLE](lang_createtable.html) statement. For example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个无ROWID表，只需在 [CREATE TABLE](lang_createtable.html) 语句的末尾添加关键字"WITHOUT ROWID"。例如：
- en: '[PRE0]'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As with all SQL syntax, the case of the keywords does not matter. One can write
    "WITHOUT rowid" or "without rowid" or "WiThOuT rOwId" and it will mean the same
    thing.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有SQL语法一样，关键字的大小写不重要。可以写成"WITHOUT rowid"、"without rowid"或者"WiThOuT rOwId"，它们的意思是相同的。
- en: Every WITHOUT ROWID table must have a [PRIMARY KEY](lang_createtable.html#primkeyconst).
    An error is raised if a CREATE TABLE statement with the WITHOUT ROWID clause lacks
    a PRIMARY KEY.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每个无ROWID表必须有一个[主键](lang_createtable.html#primkeyconst)。如果没有主键的CREATE TABLE语句中缺少WITHOUT
    ROWID子句，则会引发错误。
- en: In most contexts, the special "rowid" column of normal tables can also be called
    "oid" or "_rowid_". However, only "rowid" works as the keyword in the CREATE TABLE
    statement.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，普通表的特殊"rowid"列也可以称为"oid"或"_rowid_"。然而，在CREATE TABLE语句中只有"rowid"可以作为关键字。
- en: 1.2\. Compatibility
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2\. 兼容性
- en: SQLite [version 3.8.2](releaselog/3_8_2.html) (2013-12-06) or later is necessary
    in order to use a WITHOUT ROWID table. An attempt to open a database that contains
    one or more WITHOUT ROWID tables using an earlier version of SQLite will result
    in a "malformed database schema" error.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 需要使用 SQLite [版本 3.8.2](releaselog/3_8_2.html) (2013-12-06) 或更新版本才能使用无ROWID表。如果尝试使用较早版本的SQLite打开包含一个或多个无ROWID表的数据库，将导致"malformed
    database schema"错误。
- en: 1.3\. Quirks
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3\. 怪癖
- en: WITHOUT ROWID is found only in SQLite and is not compatible with any other SQL
    database engine, as far as we know. In an elegant system, all tables would behave
    as WITHOUT ROWID tables even without the WITHOUT ROWID keyword. However, when
    SQLite was first designed, it used only integer [rowids](lang_createtable.html#rowid)
    for row keys to simplify the implementation. This approach worked well for many
    years. But as the demands on SQLite grew, the need for tables in which the PRIMARY
    KEY really did correspond to the underlying row key grew more acute. The WITHOUT
    ROWID concept was added in order to meet that need without breaking backwards
    compatibility with the billions of SQLite databases already in use at the time
    (circa 2013).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 无ROWID仅在SQLite中发现，并且与任何其他SQL数据库引擎不兼容，据我们所知。在一个优雅的系统中，所有表都将像无ROWID表一样工作，即使没有无ROWID关键字。然而，当SQLite首次设计时，它仅使用整数[rowids](lang_createtable.html#rowid)作为行键，以简化实现。这种方法多年来运行良好。但随着对SQLite的需求增加，需要确保主键确实对应于底层行键的表的需求也更加迫切。为了在不破坏向后兼容性的前提下满足这一需求，于2013年左右添加了无ROWID概念。
- en: 2\. Differences From Ordinary Rowid Tables
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 与普通ROWID表的区别
- en: The WITHOUT ROWID syntax is an optimization. It provides no new capabilities.
    Anything that can be done using a WITHOUT ROWID table can also be done in exactly
    the same way, and exactly the same syntax, using an ordinary rowid table. The
    only advantage of a WITHOUT ROWID table is that it can sometimes use less disk
    space and/or perform a little faster than an ordinary rowid table.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 无ROWID语法是一种优化。它并不提供新的功能。使用无ROWID表可以完成的任何事情，在普通ROWID表中也可以以完全相同的方式、使用完全相同的语法来完成。无ROWID表的唯一优势是它有时可以比普通ROWID表占用更少的磁盘空间和/或执行速度更快。
- en: 'For the most part, ordinary rowid tables and WITHOUT ROWID tables are interchangeable.
    But there are some additional restrictions on WITHOUT ROWID tables that do not
    apply to ordinary rowid tables:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就大部分而言，普通rowid表格和WITHOUT ROWID表格可以互换使用。但是WITHOUT ROWID表格有一些额外的限制，这些限制不适用于普通rowid表格：
- en: '**Every WITHOUT ROWID table must have a PRIMARY KEY.** An attempt to create
    a WITHOUT ROWID table without a PRIMARY KEY results in an error.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**每个WITHOUT ROWID表格必须有一个主键。** 尝试创建一个没有主键的WITHOUT ROWID表格将导致错误。'
- en: '**The special behaviors associated "[INTEGER PRIMARY KEY](lang_createtable.html#rowid)"
    do not apply on WITHOUT ROWID tables.** In an ordinary table, "INTEGER PRIMARY
    KEY" means that the column is an alias for the rowid. But since there is no rowid
    in a WITHOUT ROWID table, that special meaning no longer applies. An "INTEGER
    PRIMARY KEY" column in a WITHOUT ROWID table works like an "INT PRIMARY KEY" column
    in an ordinary table: It is a PRIMARY KEY that has integer [affinity](datatype3.html#affinity).'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**与“[INTEGER PRIMARY KEY](lang_createtable.html#rowid)”关联的特殊行为不适用于WITHOUT ROWID表格。**
    在普通表格中，“INTEGER PRIMARY KEY”意味着该列是rowid的别名。但是在WITHOUT ROWID表格中没有rowid，因此该特殊含义不再适用。在WITHOUT
    ROWID表格中的“INTEGER PRIMARY KEY”列的行为类似于普通表格中的“INT PRIMARY KEY”列：它是一个具有整数[关联性](datatype3.html#affinity)的主键。'
- en: '**[AUTOINCREMENT](autoinc.html) does not work on WITHOUT ROWID tables.** The
    [AUTOINCREMENT](autoinc.html) mechanism assumes the presence of a rowid and so
    it does not work on a WITHOUT ROWID table. An error is raised if the "AUTOINCREMENT"
    keyword is used in the CREATE TABLE statement for a WITHOUT ROWID table.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[AUTOINCREMENT](autoinc.html)在WITHOUT ROWID表格上不起作用。** [AUTOINCREMENT](autoinc.html)机制假设存在rowid，因此在WITHOUT
    ROWID表格上不起作用。如果在创建WITHOUT ROWID表格的CREATE TABLE语句中使用了“AUTOINCREMENT”关键字，则会引发错误。'
- en: '**NOT NULL is enforced on every column of the PRIMARY KEY in a WITHOUT ROWID
    table.** This is in accordance with the SQL standard. Each column of a PRIMARY
    KEY is supposed to be individually NOT NULL. However, NOT NULL was not enforced
    on PRIMARY KEY columns by early versions of SQLite due to a bug. By the time that
    this bug was discovered, so many SQLite databases were already in circulation
    that the decision was made not to fix this bug for fear of breaking compatibility.
    So, ordinary rowid tables in SQLite violate the SQL standard and allow NULL values
    in PRIMARY KEY fields. But WITHOUT ROWID tables do follow the standard and will
    throw an error on any attempt to insert a NULL into a PRIMARY KEY column.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在WITHOUT ROWID表格中，主键的每一列都强制为NOT NULL。** 这符合SQL标准。每个主键列应该是独立的NOT NULL。然而，由于一个Bug，早期版本的SQLite没有强制主键列为NOT
    NULL。发现这个Bug时，已经有太多SQLite数据库在使用，因此决定不修复这个Bug，以免破坏兼容性。因此，SQLite中的普通rowid表格违反了SQL标准，并允许在主键字段中插入NULL值。但是WITHOUT
    ROWID表格遵循标准，如果尝试向主键列插入NULL值，则会抛出错误。'
- en: '**The [sqlite3_last_insert_rowid()](c3ref/last_insert_rowid.html) function
    does not work for WITHOUT ROWID tables.** Inserts into a WITHOUT ROWID do not
    change the value returned by the [sqlite3_last_insert_rowid()](c3ref/last_insert_rowid.html)
    function. The [last_insert_rowid()](lang_corefunc.html#last_insert_rowid) SQL
    function is also unaffected since it is just a wrapper around [sqlite3_last_insert_rowid()](c3ref/last_insert_rowid.html).'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[sqlite3_last_insert_rowid()](c3ref/last_insert_rowid.html)函数不适用于WITHOUT
    ROWID表格。** 插入WITHOUT ROWID表格不会改变[sqlite3_last_insert_rowid()](c3ref/last_insert_rowid.html)函数返回的值。[last_insert_rowid()](lang_corefunc.html#last_insert_rowid)
    SQL函数也不受影响，因为它只是[sqlite3_last_insert_rowid()](c3ref/last_insert_rowid.html)的包装。'
- en: '**The [incremental blob I/O](c3ref/blob_open.html) mechanism does not work
    for WITHOUT ROWID tables.** Incremental BLOB I/O uses the rowid to create an [sqlite3_blob](c3ref/blob.html)
    object for doing the direct I/O. However, WITHOUT ROWID tables do not have a rowid,
    and so there is no way to create an [sqlite3_blob](c3ref/blob.html) object for
    a WITHOUT ROWID table.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**增量BLOB I/O](c3ref/blob_open.html)机制不适用于WITHOUT ROWID表格。** 增量BLOB I/O使用rowid创建[sqlite3_blob](c3ref/blob.html)对象来进行直接I/O。然而，WITHOUT
    ROWID表格没有rowid，因此无法为WITHOUT ROWID表格创建[sqlite3_blob](c3ref/blob.html)对象。'
- en: '**The [sqlite3_update_hook()](c3ref/update_hook.html) interface does not fire
    callbacks for changes to a WITHOUT ROWID table.** Part of the callback from [sqlite3_update_hook()](c3ref/update_hook.html)
    is the rowid of the table row that has changed. However, WITHOUT ROWID tables
    do not have a rowid. Hence, the update hook is not invoked when a WITHOUT ROWID
    table changes.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[sqlite3_update_hook()](c3ref/update_hook.html) 接口不会对 WITHOUT ROWID 表的更改触发回调。**
    来自 [sqlite3_update_hook()](c3ref/update_hook.html) 的回调的一部分是已更改的表行的 rowid。然而，WITHOUT
    ROWID 表没有 rowid。因此，在 WITHOUT ROWID 表更改时不会调用更新钩子。'
- en: 3\. Benefits Of WITHOUT ROWID Tables
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. WITHOUT ROWID 表的好处
- en: A WITHOUT ROWID table is an optimization that can reduce storage and processing
    requirements.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: WITHOUT ROWID 表是一种可以减少存储和处理需求的优化。
- en: In an ordinary SQLite table, the PRIMARY KEY is really just a [UNIQUE](lang_createtable.html#uniqueconst)
    index. The key used to look up records on disk is the [rowid](lang_createtable.html#rowid).
    The special "[INTEGER PRIMARY KEY](lang_createtable.html#rowid)" column type in
    ordinary SQLite tables causes the column to be an alias for the rowid, and so
    an INTEGER PRIMARY KEY is a true PRIMARY KEY. But any other kind of PRIMARY KEYs,
    including "INT PRIMARY KEY" are just unique indexes in an ordinary rowid table.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在普通的 SQLite 表中，PRIMARY KEY 实际上只是一个 [UNIQUE](lang_createtable.html#uniqueconst)
    索引。用于在磁盘上查找记录的关键是 [rowid](lang_createtable.html#rowid)。普通 SQLite 表中的特殊“[INTEGER
    PRIMARY KEY](lang_createtable.html#rowid)”列类型会导致该列成为 rowid 的别名，因此 INTEGER PRIMARY
    KEY 是真正的 PRIMARY KEY。但包括“INT PRIMARY KEY”在内的任何其他类型的 PRIMARY KEY 都只是普通 rowid 表中的唯一索引。
- en: 'Consider a table (shown below) intended to store a vocabulary of words together
    with a count of the number of occurrences of each word in some text corpus:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个用于存储词汇及其在某个文本语料库中每个单词出现次数的表（如下所示）：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As an ordinary SQLite table, "wordcount" is implemented as two separate B-Trees.
    The main table uses the hidden rowid value as the key and stores the "word" and
    "cnt" columns as data. The "TEXT PRIMARY KEY" phrase of the CREATE TABLE statement
    causes the creation of an [unique index](lang_createindex.html#uniqueidx) on the
    "word" column. This index is a separate B-Tree that uses "word" and the "rowid"
    as the key and stores no data at all. Note that the complete text of every "word"
    is stored twice: once in the main table and again in the index.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为普通的 SQLite 表，“wordcount”被实现为两个单独的 B 树。主表使用隐藏的 rowid 值作为键，并将“word”和“cnt”列存储为数据。CREATE
    TABLE 语句中的“TEXT PRIMARY KEY”短语导致在“word”列上创建一个 [unique index](lang_createindex.html#uniqueidx)。此索引是一个单独的
    B 树，使用“word”和“rowid”作为键，并根本不存储数据。请注意，每个“word”的完整文本存储了两次：一次在主表中，一次在索引中。
- en: 'Consider querying this table to find the number of occurrences of the word
    "xsync".:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑查询此表以查找单词“xsync”的出现次数：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This query first has to search the index B-Tree looking for any entry that contains
    the matching value for "word". When an entry is found in the index, the rowid
    is extracted and used to search the main table. Then the "cnt" value is read out
    of the main table and returned. Hence, two separate binary searches are required
    to fulfill the request.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询首先必须搜索索引 B 树，查找包含“word”匹配值的任何条目。在索引中找到条目后，提取 rowid 并用于搜索主表。然后读取主表中的“cnt”值并返回。因此，需要执行两次单独的二进制搜索来完成请求。
- en: A WITHOUT ROWID table uses a different data design for the equivalent table.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: WITHOUT ROWID 表使用等效表的不同数据设计。
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this latter table, there is only a single B-Tree which uses the "word" column
    as its key and the "cnt" column as its data. (Technicality: the low-level implementation
    actually stores both "word" and "cnt" in the "key" area of the B-Tree. But unless
    you are looking at the low-level byte encoding of the database file, that fact
    is unimportant.) Because there is only a single B-Tree, the text of the "word"
    column is only stored once in the database. Furthermore, querying the "cnt" value
    for a specific "word" only involves a single binary search into the main B-Tree,
    since the "cnt" value can be retrieved directly from the record found by that
    first search and without the need to do a second binary search on the rowid.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个后表中，只有一个 B 树使用“word”列作为其键和“cnt”列作为其数据。（技术性说明：低级实现实际上将“word”和“cnt”都存储在 B 树的“key”区域。但除非您查看数据库文件的低级字节编码，否则这个事实并不重要。）由于只有一个
    B 树，数据库中“word”列的文本只存储一次。此外，查询特定“word”的“cnt”值只涉及对主 B 树进行一次二进制搜索，因为可以直接从该第一次搜索找到的记录中检索“cnt”值，而无需对
    rowid 进行第二次二进制搜索。
- en: Thus, in some cases, a WITHOUT ROWID table can use about half the amount of
    disk space and can operate nearly twice as fast. Of course, in a real-world schema,
    there will typically be secondary indices and/or UNIQUE constraints, and the situation
    is more complicated. But even then, there can often be space and performance advantages
    to using WITHOUT ROWID on tables that have non-integer or composite PRIMARY KEYs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在某些情况下，**WITHOUT ROWID** 表可以使用大约一半的磁盘空间，并且运行速度几乎可以快两倍。当然，在真实的架构中，通常会有次要索引和/或唯一约束条件，情况会更加复杂。但即使在这种情况下，对于具有非整数或复合主键的表来说，使用
    **WITHOUT ROWID** 通常也可以带来空间和性能优势。
- en: 4\. When To Use WITHOUT ROWID
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 何时使用 **WITHOUT ROWID**
- en: The WITHOUT ROWID optimization is likely to be helpful for tables that have
    non-integer or composite (multi-column) PRIMARY KEYs and that do not store large
    strings or BLOBs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**WITHOUT ROWID** 优化可能对具有非整数或复合（多列）主键且不存储大字符串或 BLOB 的表有帮助。'
- en: WITHOUT ROWID tables will work correctly (that is to say, they provide the correct
    answer) for tables with a single INTEGER PRIMARY KEY. However, ordinary rowid
    tables will run faster in that case. Hence, it is good design to avoid creating
    WITHOUT ROWID tables with single-column PRIMARY KEYs of type INTEGER.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于只有单个 INTEGER 主键的表，**WITHOUT ROWID** 表将能够正确工作（即提供正确答案）。然而，在这种情况下，普通的 rowid
    表将会更快。因此，避免创建具有 INTEGER 类型单列主键的 **WITHOUT ROWID** 表是一个良好的设计选择。
- en: WITHOUT ROWID tables work best when individual rows are not too large. A good
    rule-of-thumb is that the average size of a single row in a WITHOUT ROWID table
    should be less than about 1/20th the size of a database page. That means that
    rows should not contain more than about 50 bytes each for a 1KiB page size or
    about 200 bytes each for 4KiB page size. WITHOUT ROWID tables will work (in the
    sense that they get the correct answer) for arbitrarily large rows - up to 2GB
    in size - but traditional rowid tables tend to work faster for large row sizes.
    This is because rowid tables are implemented as [B*-Trees](fileformat2.html#btree)
    where all content is stored in the leaves of the tree, whereas WITHOUT ROWID tables
    are implemented using ordinary B-Trees with content stored on both leaves and
    intermediate nodes. Storing content in intermediate nodes causes each intermediate
    node entry to take up more space on the page and thus reduces the fan-out, increasing
    the search cost.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**WITHOUT ROWID** 表在单个行不太大的情况下效果最佳。一个良好的经验法则是，**WITHOUT ROWID** 表中单行的平均大小应该小于数据库页面大小的约
    1/20。这意味着每行不应包含超过每个页面大小约 50 字节（对于 1KiB 页面大小）或约 200 字节（对于 4KiB 页面大小）。**WITHOUT
    ROWID** 表将能够处理（即得到正确答案）任意大的行 - 长达 2GB - 但是对于大行大小，传统的 rowid 表通常会更快。这是因为 rowid 表是作为
    [B*-Trees](fileformat2.html#btree) 实现的，其中所有内容存储在树的叶子节点中，而 **WITHOUT ROWID** 表则是使用普通的
    B-Tree 实现，内容存储在叶子节点和中间节点上。在中间节点存储内容会导致每个中间节点条目在页面上占用更多空间，从而减少扇出，并增加搜索成本。'
- en: The "sqlite3_analyzer.exe" utility program, available as source code in the
    SQLite source tree or as a precompiled binary on the [SQLite Download page](https://www.sqlite.org/download.html),
    can be used to measure the average sizes of table rows in an existing SQLite database.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '"sqlite3_analyzer.exe" 实用程序程序，作为 SQLite 源码树中的源代码或者作为预编译二进制文件出现在 [SQLite Download
    页面](https://www.sqlite.org/download.html)，可用于测量现有 SQLite 数据库中表行的平均大小。'
- en: Note that except for a few corner-case differences detailed above, WITHOUT ROWID
    tables and rowid tables work the same. They both generate the same answers given
    the same SQL statements. So it is a simple matter to run experiments on an application,
    late in the development cycle, to test whether or not the use of WITHOUT ROWID
    tables will be helpful. A good strategy is to simply not worry about WITHOUT ROWID
    until near the end of product development, then go back and run tests to see if
    adding WITHOUT ROWID to tables with non-integer PRIMARY KEYs helps or hurts performance,
    and retaining the WITHOUT ROWID only in those cases where it helps.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意除了上面详细列出的一些特殊情况之外，**WITHOUT ROWID** 表和 rowid 表的工作方式是相同的。只要给定相同的 SQL 语句，它们都会生成相同的结果。因此，在开发周期的后期对应用程序进行实验来测试是否使用
    **WITHOUT ROWID** 表会有帮助是一件简单的事情。一个好的策略是在产品开发接近尾声时，才回过头来运行测试，看看在具有非整数主键的表中添加 **WITHOUT
    ROWID** 是否有助于提升性能或者是否有害，并仅在有利的情况下保留 **WITHOUT ROWID**。
- en: 5\. Determining If An Existing Table Is WITHOUT ROWID
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 确定现有表是否为 **WITHOUT ROWID**
- en: A WITHOUT ROWID table returns the same content for [PRAGMA table_info](pragma.html#pragma_table_info)
    and [PRAGMA table_xinfo](pragma.html#pragma_table_xinfo) as does an ordinary table.
    But unlike an ordinary table, a WITHOUT ROWID also responds to the [PRAGMA index_info](pragma.html#pragma_index_info)
    command. The [PRAGMA index_info](pragma.html#pragma_index_info) on a WITHOUT ROWID
    table returns information about the PRIMARY KEY for the table. In this way, the
    [PRAGMA index_info](pragma.html#pragma_index_info) command can be used to unambiguously
    determine whether a particular table is a WITHOUT ROWID table or an ordinary table
    - an ordinary table will always return no rows but a WITHOUT ROWID table will
    always return one or more rows.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 WITHOUT ROWID 表对于 [PRAGMA table_info](pragma.html#pragma_table_info) 和 [PRAGMA
    table_xinfo](pragma.html#pragma_table_xinfo) 命令返回与普通表相同的内容。但与普通表不同的是，WITHOUT ROWID
    表还会响应 [PRAGMA index_info](pragma.html#pragma_index_info) 命令。对 WITHOUT ROWID 表使用
    [PRAGMA index_info](pragma.html#pragma_index_info) 命令会返回关于表的主键的信息。通过这种方式，[PRAGMA
    index_info](pragma.html#pragma_index_info) 命令可以明确确定特定表是 WITHOUT ROWID 表还是普通表 -
    普通表始终不返回行，而 WITHOUT ROWID 表始终返回一行或多行。
