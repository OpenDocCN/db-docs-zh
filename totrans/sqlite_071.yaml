- en: SQLite Archiver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.sqlite.org/sqlar/](https://www.sqlite.org/sqlar/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Documentation[Login](/sqlar/login)[☰](#)[Home](/sqlar/doc/trunk/README.md)
    [Timeline](/sqlar/timeline) [Files](/sqlar/dir?ci=tip) [Branches](/sqlar/brlist)
    [Tags](/sqlar/taglist) [Tickets](/sqlar/ticket) [Wiki](/sqlar/wiki) # SQLAR -
    SQLite Archiver'
  prefs: []
  type: TYPE_NORMAL
- en: This repository contains sources for the "SQLite Archiver" program. This program
    (named "sqlar") operates much like "zip", except that the compressed archive it
    builds is stored in an SQLite database instead of a ZIP archive.
  prefs: []
  type: TYPE_NORMAL
- en: The motivation for this is to see how much larger an SQLite database file is
    compared to a ZIP archive containing the same content. The answer depends on the
    filenames, but 2% seems to be a reasonable guess. In other words, storing files
    as compressed blobs in an SQLite database file results in a file that is only
    about 2% larger than storing those same files in a ZIP archive using the same
    compression.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On unix, just type "make". The SQLite sources are included. The zlib compression
    library is needed to build.
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: All files named in FILES... will be added to the archive. If another file with
    the same name already exists in the archive, it is replaced. If any of the named
    FILES is a directory, that directory is scanned recursively.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the contents of an archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To extract the contents of an archive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If a FILES argument is provided, then only the named files are extracted. Without
    a FILES argument, all files are extracted.
  prefs: []
  type: TYPE_NORMAL
- en: 'All commands can be supplemented with -v for verbose output. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: File are normally compressed using zlib prior to being stored as BLOBs in the
    database. However, if the file is incompressible or if the -n option is used on
    the command-line, then the file is stored in the database exactly as it appears
    on disk, without compression.
  prefs: []
  type: TYPE_NORMAL
- en: Storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The database schema looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Both directories and empty files have sqlar.sz==0\. Directories can be distinguished
    from empty files because directories have sqlar.data IS NULL. The file is compressed
    if length(sqlar.blob)<sqlar.sz and is stored as plaintext if length(sqlar.blob)==sqlar.sz.
  prefs: []
  type: TYPE_NORMAL
- en: Symbolic links have sqlar.sz set to -1, and the link target stored as a text
    value in the sqlar.data field.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAR uses the "zlib format" for compression. ZIP uses the raw deflate format.
    The difference is that the zlib format contains a two byte compression-type indentification
    header (0x78 0x9c) and a 4-byte checksum at the end. Thus the "data" for SQLAR
    is always 6 bytes larger than the equivalent data for ZIP. The SQLAR program uses
    the zlib format rather than the slightly smaller raw deflate format because that
    is what the [zlib documentation](https://www.zlib.net/manual.html) recommends.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAR might someday be extended to support additional compression formats other
    than deflate. If so, the data field will contain new header values to identify
    entries compressed using the new formats.
  prefs: []
  type: TYPE_NORMAL
- en: Fuse Filesystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An SQLite Archive file can be mounted as a [Fuse Filesystem](http://fuse.sourceforge.net)
    using the "sqlarfs" utility, including with this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the "sqlarfs" utility, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then to mount an SQLite archive as a filesystem, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Replace ARCHIVE_NAME with the filename of the SQLite archive file to be mounted,
    of course. The -f option keeps sqlarfs running in the foreground, so that you
    can unmount the filesystem by simply pressing the interrupt key (usually Ctrl-C).
    This page was generated in about 0.004s by Fossil 2.25 [fc8d476aca] 2024-06-19
    18:26:12
  prefs: []
  type: TYPE_NORMAL
