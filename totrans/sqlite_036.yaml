- en: 1\. Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 概述
- en: 原文：[https://sqlite.com/csv.html](https://sqlite.com/csv.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/csv.html](https://sqlite.com/csv.html)
- en: The CSV virtual table reads [RFC 4180](https://www.ietf.org/rfc/rfc4180.txt)
    formatted comma-separated values, and returns that content as if it were rows
    and columns of an SQL table.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: CSV 虚拟表读取[RFC 4180](https://www.ietf.org/rfc/rfc4180.txt)格式的逗号分隔值，并将该内容作为SQL表的行和列返回。
- en: The CSV virtual table is useful to applications that need to bulk-load large
    amounts of comma-separated value content. The CSV virtual table is also useful
    as a template source file for implementing other virtual tables.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: CSV 虚拟表对需要批量加载大量逗号分隔内容的应用程序非常有用。CSV 虚拟表还可以作为实现其他虚拟表的模板源文件。
- en: 'The CSV virtual table is not built into the SQLite amalgamation. It is available
    as a [separate source file](https://www.sqlite.org/src/artifact?ci=trunk&filename=ext/misc/csv.c)
    that can be compiled into a [loadable extension](loadext.html). Typical usage
    of the CSV virtual table from the [command-line shell](cli.html) would be something
    like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CSV 虚拟表没有内置到 SQLite 总汇中。它作为一个[单独的源文件](https://www.sqlite.org/src/artifact?ci=trunk&filename=ext/misc/csv.c)可用，可以编译成[可加载扩展](loadext.html)。从[命令行
    shell](cli.html)中典型使用 CSV 虚拟表的方式可能如下：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first line of the script above causes the [command-line shell](cli.html)
    to read and activate the run-time loadable extension for CSV. For an application,
    the equivalent C-language API is [sqlite3_load_extension()](c3ref/load_extension.html).
    Observe that the filename extension (ex: ".dll" or ".so" or ".dylib") is omitted
    from the extension filename. Omitting the filename extension is not required,
    but it helps in making the script cross-platform. SQLite will automatically append
    the appropriate extension.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本的第一行导致[命令行 shell](cli.html)读取并激活 CSV 的运行时可加载扩展。对于应用程序，等效的 C 语言 API 是 [sqlite3_load_extension()](c3ref/load_extension.html)。注意，扩展文件名中的扩展名（例如：".dll"、".so"
    或 ".dylib"）被省略了。省略扩展名并非必需，但有助于使脚本跨平台。SQLite 将自动附加适当的扩展名。
- en: The second line above creates a virtual table named "t1" that reads the content
    of the file named in the argument. The number and names of the columns is determined
    automatically by reading the first line of content. Other options to the CSV virtual
    table provide the ability to take the CSV content from a string rather than a
    separate file, and give the programmer more control over the number and names
    of the columns. The options are detailed below. The CSV virtual table is usually
    created as a TEMP table so that it exists only for the current database connection
    and does not become a permanent part of the database schema. Note that there is
    no "CREATE TEMP VIRTUAL TABLE" command in SQLite. Instead, prepend the "temp."
    schema prefix to the name of the virtual table.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上述第二行创建了一个名为 "t1" 的虚拟表，该表读取参数中指定文件的内容。列的数量和名称通过读取内容的第一行自动确定。CSV 虚拟表的其他选项允许从字符串而不是单独的文件中获取
    CSV 内容，并且给程序员更多控制列的数量和名称。下面详细介绍了这些选项。CSV 虚拟表通常作为临时表创建，因此仅存在于当前数据库连接中，并不成为数据库模式的永久部分。请注意，SQLite
    中没有 "CREATE TEMP VIRTUAL TABLE" 命令。而是将虚拟表的名称前缀 "temp." 。
- en: The third line of the example shows the virtual table being used, to read all
    content of the CSV file. This is perhaps the simplest possible use of the virtual
    table. The CSV virtual table can be used anywhere an ordinary virtual table can
    be used. One can use the CSV virtual table inside subqueries, or [common table
    expressions](lang_with.html) or add WHERE, GROUP BY, HAVING, ORDER BY, and LIMIT
    clauses as required.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 示例的第三行显示了虚拟表的使用，以读取 CSV 文件的所有内容。这可能是使用虚拟表的最简单可能方式。CSV 虚拟表可用于任何可以使用普通虚拟表的地方。可以在子查询、[公共表达式](lang_with.html)中使用
    CSV 虚拟表，或根据需要添加 WHERE、GROUP BY、HAVING、ORDER BY 和 LIMIT 子句。
- en: 2\. Arguments
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. Arguments
- en: The example above showed a single **filename='thefile.csv'** argument for the
    CSV virtual table. But other arguments are also possible.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例展示了 CSV 虚拟表的单个 **filename='thefile.csv'** 参数。但还有其他可能的参数。
- en: '**filename=***FILENAME*'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**filename=***FILENAME*'
- en: The **filename=** argument specifies an external file from which CSV content
    is read. Every CSV virtual table must have either a **filename=** argument or
    a **data=** argument and not both.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**filename=** 参数指定从中读取 CSV 内容的外部文件。每个 CSV 虚拟表必须有一个 **filename=** 参数或一个 **data=**
    参数，而不能同时存在两者。'
- en: '**data=***TEXT*'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**data=***TEXT*'
- en: The **data=** argument specifies that *TEXT* is the literal content of the CSV
    file.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**data=**参数指定*TEXT*为CSV文件的字面内容。'
- en: '**schema=***SCHEMA*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**schema=***SCHEMA*'
- en: The **schema=** argument specifies a [CREATE TABLE](lang_createtable.html) statement
    that the CSV virtual table passes to the [sqlite3_declare_vtab()](c3ref/declare_vtab.html)
    interface in order to define the names of the columns in the virtual table.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**schema=**参数指定一个[CREATE TABLE](lang_createtable.html)语句，CSV虚拟表将其传递给[sqlite3_declare_vtab()](c3ref/declare_vtab.html)接口，以定义虚拟表中列的名称。'
- en: '**columns=***N*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**columns=***N*'
- en: The **columns=***N* argument specifies the number of columns in the CSV file.
    If the input data contains more columns than this, then the excess columns are
    ignored. If the input data contains fewer columns, then extra columns are filled
    with NULL. If the **columns=***N* argument is omitted, the first line of the CSV
    file is read to determine the number of columns.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**columns=***N*参数指定CSV文件中的列数。如果输入数据包含的列数超过此值，则多余的列将被忽略。如果输入数据包含的列数少于此值，则额外的列将填充为NULL。如果省略**columns=***N*参数，则读取CSV文件的第一行以确定列的数量。'
- en: '**header=***BOOLEAN*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**header=***BOOLEAN*'
- en: or just
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者只是
- en: '**header**'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**header**'
- en: If the **header** argument is true then the first row of the CSV file to be
    treated as a header rather than as data. The second line of the CSV file becomes
    the first row of content. If the **schema=** options is omitted, then the first
    line of the CSV file determines the names of the columns.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果**header**参数为true，则将CSV文件的第一行视为标题而不是数据。CSV文件的第二行成为内容的第一行。如果省略**schema=**选项，则CSV文件的第一行确定列的名称。
- en: 3\. Column Names
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 列名
- en: The column names of the virtual table are determined primarily by the **schema=**
    argument. If the **schema=** argument is omitted, but **header** is true, then
    the values found in the first line of the CSV file become the column names. If
    the **schema=** argument is omitted and **header** is false, then the columns
    are named "c0", "c1", "c2", and so forth.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟表的列名主要由**schema=**参数确定。如果省略**schema=**参数但**header**为true，则CSV文件第一行的值成为列名。如果省略**schema=**参数且**header**为false，则列名为"c0"、"c1"、"c2"等。
