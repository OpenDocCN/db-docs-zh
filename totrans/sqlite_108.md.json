["```sql\n>    typedef struct sqlite3 sqlite3;\n>    int sqlite3_open(const char*, sqlite3**);\n>    int sqlite3_open16(const void*, sqlite3**);\n>    int sqlite3_close(sqlite3*);\n>    const char *sqlite3_errmsg(sqlite3*);\n>    const void *sqlite3_errmsg16(sqlite3*);\n>    int sqlite3_errcode(sqlite3*);\n> \n> ```", "```sql\n> #define SQLITE_OK           0   /* Successful result */\n> #define SQLITE_ERROR        1   /* SQL error or missing database */\n> #define SQLITE_INTERNAL     2   /* An internal logic error in SQLite */\n> #define SQLITE_PERM         3   /* Access permission denied */\n> #define SQLITE_ABORT        4   /* Callback routine requested an abort */\n> #define SQLITE_BUSY         5   /* The database file is locked */\n> #define SQLITE_LOCKED       6   /* A table in the database is locked */\n> #define SQLITE_NOMEM        7   /* A malloc() failed */\n> #define SQLITE_READONLY     8   /* Attempt to write a readonly database */\n> #define SQLITE_INTERRUPT    9   /* Operation terminated by sqlite_interrupt() */\n> #define SQLITE_IOERR       10   /* Some kind of disk I/O error occurred */\n> #define SQLITE_CORRUPT     11   /* The database disk image is malformed */\n> #define SQLITE_NOTFOUND    12   /* (Internal Only) Table or record not found */\n> #define SQLITE_FULL        13   /* Insertion failed because database is full */\n> #define SQLITE_CANTOPEN    14   /* Unable to open the database file */\n> #define SQLITE_PROTOCOL    15   /* Database lock protocol error */\n> #define SQLITE_EMPTY       16   /* (Internal Only) Database table is empty */\n> #define SQLITE_SCHEMA      17   /* The database schema changed */\n> #define SQLITE_TOOBIG      18   /* Too much data for one row of a table */\n> #define SQLITE_CONSTRAINT  19   /* Abort due to contraint violation */\n> #define SQLITE_MISMATCH    20   /* Data type mismatch */\n> #define SQLITE_MISUSE      21   /* Library used incorrectly */\n> #define SQLITE_NOLFS       22   /* Uses OS features not supported on host */\n> #define SQLITE_AUTH        23   /* Authorization denied */\n> #define SQLITE_ROW         100  /* sqlite_step() has another row ready */\n> #define SQLITE_DONE        101  /* sqlite_step() has finished executing */\n> \n> ```", "```sql\n>    typedef int (*sqlite_callback)(void*,int,char**, char**);\n>    int sqlite3_exec(sqlite3*, const char *sql, sqlite_callback, void*, char**);\n> \n> ```", "```sql\n>    typedef struct sqlite3_stmt sqlite3_stmt;\n>    int sqlite3_prepare(sqlite3*, const char*, int, sqlite3_stmt**, const char**);\n>    int sqlite3_prepare16(sqlite3*, const void*, int, sqlite3_stmt**, const void**);\n>    int sqlite3_finalize(sqlite3_stmt*);\n>    int sqlite3_reset(sqlite3_stmt*);\n> \n> ```", "```sql\n>    int sqlite3_bind_blob(sqlite3_stmt*, int, const void*, int n, void(*)(void*));\n>    int sqlite3_bind_double(sqlite3_stmt*, int, double);\n>    int sqlite3_bind_int(sqlite3_stmt*, int, int);\n>    int sqlite3_bind_int64(sqlite3_stmt*, int, long long int);\n>    int sqlite3_bind_null(sqlite3_stmt*, int);\n>    int sqlite3_bind_text(sqlite3_stmt*, int, const char*, int n, void(*)(void*));\n>    int sqlite3_bind_text16(sqlite3_stmt*, int, const void*, int n, void(*)(void*));\n>    int sqlite3_bind_value(sqlite3_stmt*, int, const sqlite3_value*);\n> \n> ```", "```sql\n>    int sqlite3_step(sqlite3_stmt*);\n> \n> ```", "```sql\n>    const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);\n>    int sqlite3_column_bytes(sqlite3_stmt*, int iCol);\n>    int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);\n>    int sqlite3_column_count(sqlite3_stmt*);\n>    const char *sqlite3_column_decltype(sqlite3_stmt *, int iCol);\n>    const void *sqlite3_column_decltype16(sqlite3_stmt *, int iCol);\n>    double sqlite3_column_double(sqlite3_stmt*, int iCol);\n>    int sqlite3_column_int(sqlite3_stmt*, int iCol);\n>    long long int sqlite3_column_int64(sqlite3_stmt*, int iCol);\n>    const char *sqlite3_column_name(sqlite3_stmt*, int iCol);\n>    const void *sqlite3_column_name16(sqlite3_stmt*, int iCol);\n>    const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);\n>    const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);\n>    int sqlite3_column_type(sqlite3_stmt*, int iCol);\n> \n> ```", "```sql\n>    #define SQLITE_INTEGER  1\n>    #define SQLITE_FLOAT    2\n>    #define SQLITE_TEXT     3\n>    #define SQLITE_BLOB     4\n>    #define SQLITE_NULL     5\n> \n> ```", "```sql\n>    typedef struct sqlite3_value sqlite3_value;\n>    int sqlite3_create_function(\n>      sqlite3 *,\n>      const char *zFunctionName,\n>      int nArg,\n>      int eTextRep,\n>      void*,\n>      void (*xFunc)(sqlite3_context*,int,sqlite3_value**),\n>      void (*xStep)(sqlite3_context*,int,sqlite3_value**),\n>      void (*xFinal)(sqlite3_context*)\n>    );\n>    int sqlite3_create_function16(\n>      sqlite3*,\n>      const void *zFunctionName,\n>      int nArg,\n>      int eTextRep,\n>      void*,\n>      void (*xFunc)(sqlite3_context*,int,sqlite3_value**),\n>      void (*xStep)(sqlite3_context*,int,sqlite3_value**),\n>      void (*xFinal)(sqlite3_context*)\n>    );\n>    #define SQLITE_UTF8     1\n>    #define SQLITE_UTF16    2\n>    #define SQLITE_UTF16BE  3\n>    #define SQLITE_UTF16LE  4\n>    #define SQLITE_ANY      5\n> \n> ```", "```sql\n>    const void *sqlite3_value_blob(sqlite3_value*);\n>    int sqlite3_value_bytes(sqlite3_value*);\n>    int sqlite3_value_bytes16(sqlite3_value*);\n>    double sqlite3_value_double(sqlite3_value*);\n>    int sqlite3_value_int(sqlite3_value*);\n>    long long int sqlite3_value_int64(sqlite3_value*);\n>    const unsigned char *sqlite3_value_text(sqlite3_value*);\n>    const void *sqlite3_value_text16(sqlite3_value*);\n>    int sqlite3_value_type(sqlite3_value*);\n> \n> ```", "```sql\n>    void *sqlite3_aggregate_context(sqlite3_context*, int nbyte);\n>    void *sqlite3_user_data(sqlite3_context*);\n>    void sqlite3_result_blob(sqlite3_context*, const void*, int n, void(*)(void*));\n>    void sqlite3_result_double(sqlite3_context*, double);\n>    void sqlite3_result_error(sqlite3_context*, const char*, int);\n>    void sqlite3_result_error16(sqlite3_context*, const void*, int);\n>    void sqlite3_result_int(sqlite3_context*, int);\n>    void sqlite3_result_int64(sqlite3_context*, long long int);\n>    void sqlite3_result_null(sqlite3_context*);\n>    void sqlite3_result_text(sqlite3_context*, const char*, int n, void(*)(void*));\n>    void sqlite3_result_text16(sqlite3_context*, const void*, int n, void(*)(void*));\n>    void sqlite3_result_value(sqlite3_context*, sqlite3_value*);\n>    void *sqlite3_get_auxdata(sqlite3_context*, int);\n>    void sqlite3_set_auxdata(sqlite3_context*, int, void*, void (*)(void*));\n> \n> ```", "```sql\n>    sqlite3_create_collation(sqlite3*, const char *zName, int eTextRep, void*,\n>       int(*xCompare)(void*,int,const void*,int,const void*));\n>    sqlite3_create_collation16(sqlite3*, const void *zName, int eTextRep, void*,\n>       int(*xCompare)(void*,int,const void*,int,const void*));\n>    sqlite3_collation_needed(sqlite3*, void*, \n>       void(*)(void*,sqlite3*,int eTextRep,const char*));\n>    sqlite3_collation_needed16(sqlite3*, void*,\n>       void(*)(void*,sqlite3*,int eTextRep,const void*));\n> \n> ```"]