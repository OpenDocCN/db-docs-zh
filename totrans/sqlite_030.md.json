["```sql\nCREATE VIRTUAL TABLE *<name>* USING rtree(*<column-names>*);\n\n```", "```sql\n*<name>*_node\n\n*<name>*_rowid\n\n*<name>*_parent\n\n```", "```sql\nCREATE VIRTUAL TABLE demo_index USING rtree(\n   id,              -- Integer primary key\n   minX, maxX,      -- Minimum and maximum X coordinate\n   minY, maxY       -- Minimum and maximum Y coordinate\n);\n\n```", "```sql\nINSERT INTO demo_index VALUES\n  (28215, -80.781227, -80.604706, 35.208813, 35.297367),\n  (28216, -80.957283, -80.840599, 35.235920, 35.367825),\n  (28217, -80.960869, -80.869431, 35.133682, 35.208233),\n  (28226, -80.878983, -80.778275, 35.060287, 35.154446),\n  (28227, -80.745544, -80.555382, 35.130215, 35.236916),\n  (28244, -80.844208, -80.841988, 35.223728, 35.225471),\n  (28262, -80.809074, -80.682938, 35.276207, 35.377747),\n  (28269, -80.851471, -80.735718, 35.272560, 35.407925),\n  (28270, -80.794983, -80.728966, 35.059872, 35.161823),\n  (28273, -80.994766, -80.875259, 35.074734, 35.172836),\n  (28277, -80.876793, -80.767586, 35.001709, 35.101063),\n  (28278, -81.058029, -80.956375, 35.044701, 35.223812),\n  (28280, -80.844208, -80.841972, 35.225468, 35.227203),\n  (28282, -80.846382, -80.844193, 35.223972, 35.225655);\n\n```", "```sql\nSELECT * FROM demo_index WHERE id=28269;\n\n```", "```sql\nSELECT id FROM demo_index\n WHERE minX<=-80.77470 AND maxX>=-80.77470\n   AND minY<=35.37785  AND maxY>=35.37785;\n\n```", "```sql\nSELECT A.id FROM demo_index AS A, demo_index AS B\n WHERE A.maxX>=B.minX AND A.minX<=B.maxX\n   AND A.maxY>=B.minY AND A.minY<=B.maxY\n   AND B.id=28269;\n\n```", "```sql\nSELECT id FROM demo_index\n WHERE maxY>=35.0  AND minY<=35.0;\n\n```", "```sql\nSELECT id FROM demo_index\n WHERE maxY>=35.0  AND minY<=35.0;\n\n```", "```sql\nUPDATE demo_index SET maxY=maxY+0.5 WHERE id=?1;\n\n```", "```sql\nCREATE TABLE demo_data(\n  id INTEGER PRIMARY KEY,  -- primary key\n  objname TEXT,            -- name of the object\n  objtype TEXT,            -- object type\n  boundary BLOB            -- detailed boundary of object\n);\n\n```", "```sql\nSELECT objname FROM demo_data, demo_index\n WHERE demo_data.id=demo_index.id\n   AND contained_in(demo_data.boundary, 35.37785, -80.77470)\n   AND minX<=-80.77470 AND maxX>=-80.77470\n   AND minY<=35.37785  AND maxY>=35.37785;\n\n```", "```sql\nSELECT objname FROM demo_data\n WHERE contained_in(demo_data.boundary, 35.37785, -80.77470);\n\n```", "```sql\nCREATE VIRTUAL TABLE demo_index2 USING rtree(\n   id,              -- Integer primary key\n   minX, maxX,      -- Minimum and maximum X coordinate\n   minY, maxY,      -- Minimum and maximum Y coordinate\n   +objname TEXT,   -- name of the object\n   +objtype TEXT,   -- object type\n   +boundary BLOB   -- detailed boundary of object\n);\n\n```", "```sql\nSELECT objname FROM demo_index2\n WHERE contained_in(boundary, 35.37785, -80.77470)\n   AND minX<=-80.77470 AND maxX>=-80.77470\n   AND minY<=35.37785  AND maxY>=35.37785;\n\n```", "```sql\nCREATE VIRTUAL TABLE intrtree USING rtree_i32(id,x0,x1,y0,y1,z0,z1);\n\n```", "```sql\nint sqlite3_rtree_query_callback(\n  sqlite3 *db,\n  const char *zQueryFunc,\n  int (*xQueryFunc)(sqlite3_rtree_query_info*),\n  void *pContext,\n  void (*xDestructor)(void*)\n);\nint sqlite3_rtree_geometry_callback(\n  sqlite3 *db,\n  const char *zGeom,\n  int (*xGeom)(sqlite3_rtree_geometry *, int nCoord, double *aCoord, int *pRes),\n  void *pContext\n);\n\n```", "```sql\nSELECT id FROM demo_index WHERE id MATCH circle(45.3, 22.9, 5.0)\n\n```", "```sql\ntypedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;\nstruct sqlite3_rtree_geometry {\n  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */\n  int nParam;                     /* Size of array aParam */\n  double *aParam;                 /* Parameters passed to SQL geom function */\n  void *pUser;                    /* Callback implementation user data */\n  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */\n};\n\n```", "```sql\nstruct sqlite3_rtree_query_info {\n  void *pContext;                   /* pContext from when function registered */\n  int nParam;                       /* Number of function parameters */\n  sqlite3_rtree_dbl *aParam;        /* value of function parameters */\n  void *pUser;                      /* callback can use this, if desired */\n  void (*xDelUser)(void*);          /* function to free pUser */\n  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */\n  unsigned int *anQueue;            /* Number of pending entries in the queue */\n  int nCoord;                       /* Number of coordinates */\n  int iLevel;                       /* Level of current node or entry */\n  int mxLevel;                      /* The largest iLevel value in the tree */\n  sqlite3_int64 iRowid;             /* Rowid for current entry */\n  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */\n  int eParentWithin;                /* Visibility of parent node */\n  int eWithin;                      /* OUT: Visiblity */\n  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */\n  /* The following fields are only available in 3.8.11 and later */\n  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */\n};\n\n```", "```sql\nCREATE TABLE %_node(nodeno INTEGER PRIMARY KEY, data)\nCREATE TABLE %_parent(nodeno INTEGER PRIMARY KEY, parentnode)\nCREATE TABLE %_rowid(rowid INTEGER PRIMARY KEY, nodeno)\n\n```", "```sql\nSELECT rtreecheck('demo_index');\n\n```"]