["```sql\n> int sqlite3_vfs_register(sqlite3_vfs*, int makeDflt);\n> \n> ```", "```sql\n> int sqlite3_vfs_unregister(sqlite3_vfs*);\n> \n> ```", "```sql\n> sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);\n> \n> ```", "```sql\n> typedef struct sqlite3_vfs sqlite3_vfs;\n> struct sqlite3_vfs {\n>   int iVersion;            /* Structure version number */\n>   int szOsFile;            /* Size of subclassed sqlite3_file */\n>   int mxPathname;          /* Maximum file pathname length */\n>   sqlite3_vfs *pNext;      /* Next registered VFS */\n>   const char *zName;       /* Name of this virtual file system */\n>   void *pAppData;          /* Pointer to application-specific data */\n>   int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,\n>                int flags, int *pOutFlags);\n>   int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);\n>   int (*xAccess)(sqlite3_vfs*, const char *zName, int flags);\n>   int (*xGetTempName)(sqlite3_vfs*, char *zOut);\n>   int (*xFullPathname)(sqlite3_vfs*, const char *zName, char *zOut);\n>   void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);\n>   void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);\n>   void *(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol);\n>   void (*xDlClose)(sqlite3_vfs*, void*);\n>   int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);\n>   int (*xSleep)(sqlite3_vfs*, int microseconds);\n>   int (*xCurrentTime)(sqlite3_vfs*, double*);\n>   /* New fields may be appended in figure versions.  The iVersion\n>   ** value will increment whenever this happens. */\n> };\n> \n> ```", "```sql\n> typedef struct sqlite3_file sqlite3_file;\n> struct sqlite3_file {\n>   const struct sqlite3_io_methods *pMethods;\n> };\n> \n> ```", "```sql\n> typedef struct sqlite3_io_methods sqlite3_io_methods;\n> struct sqlite3_io_methods {\n>   int iVersion;\n>   int (*xClose)(sqlite3_file*);\n>   int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);\n>   int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);\n>   int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);\n>   int (*xSync)(sqlite3_file*, int flags);\n>   int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);\n>   int (*xLock)(sqlite3_file*, int);\n>   int (*xUnlock)(sqlite3_file*, int);\n>   int (*xCheckReservedLock)(sqlite3_file*);\n>   int (*xFileControl)(sqlite3_file*, int op, void *pArg);\n>   int (*xSectorSize)(sqlite3_file*);\n>   int (*xDeviceCharacteristics)(sqlite3_file*);\n>   /* Additional methods may be added in future releases */\n> };\n> \n> ```", "```sql\n> int sqlite3_memory_alarm(\n>   void(*xCallback)(void *pArg, sqlite3_int64 used, int N),\n>   void *pArg,\n>   sqlite3_int64 iThreshold\n> );\n> \n> ```", "```sql\n> sqlite3_int64 sqlite3_memory_used(void);\n> sqlite3_int64 sqlite3_memory_highwater(int resetFlag);\n> \n> ```", "```sql\n> sqlite3_mutex *sqlite3_mutex_alloc(int);\n> void sqlite3_mutex_free(sqlite3_mutex*);\n> void sqlite3_mutex_enter(sqlite3_mutex*);\n> int sqlite3_mutex_try(sqlite3_mutex*);\n> void sqlite3_mutex_leave(sqlite3_mutex*);\n> \n> ```"]