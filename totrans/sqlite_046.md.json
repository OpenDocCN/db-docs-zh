["```sql\n/*\n** This function is used to load the contents of a database file on disk \n** into the \"main\" database of open database connection pInMemory, or\n** to save the current contents of the database opened by pInMemory into\n** a database file on disk. pInMemory is probably an in-memory database, \n** but this function will also work fine if it is not.\n**\n** Parameter zFilename points to a nul-terminated string containing the\n** name of the database file on disk to load from or save to. If parameter\n** isSave is non-zero, then the contents of the file zFilename are \n** overwritten with the contents of the database opened by pInMemory. If\n** parameter isSave is zero, then the contents of the database opened by\n** pInMemory are replaced by data loaded from the file zFilename.\n**\n** If the operation is successful, SQLITE_OK is returned. Otherwise, if\n** an error occurs, an SQLite error code is returned.\n*/\nint loadOrSaveDb(sqlite3 *pInMemory, const char *zFilename, int isSave){\n  int rc;                   /* Function return code */\n  sqlite3 *pFile;           /* Database connection opened on zFilename */\n  sqlite3_backup *pBackup;  /* Backup object used to copy data */\n  sqlite3 *pTo;             /* Database to copy to (pFile or pInMemory) */\n  sqlite3 *pFrom;           /* Database to copy from (pFile or pInMemory) */\n\n  /* Open the database file identified by zFilename. Exit early if this fails\n  ** for any reason. */\n  rc = sqlite3_open(zFilename, &pFile);\n  if( rc==SQLITE_OK ){\n\n    /* If this is a 'load' operation (isSave==0), then data is copied\n    ** from the database file just opened to database pInMemory. \n    ** Otherwise, if this is a 'save' operation (isSave==1), then data\n    ** is copied from pInMemory to pFile.  Set the variables pFrom and\n    ** pTo accordingly. */\n    pFrom = (isSave ? pInMemory : pFile);\n    pTo   = (isSave ? pFile     : pInMemory);\n\n    /* Set up the backup procedure to copy from the \"main\" database of \n    ** connection pFile to the main database of connection pInMemory.\n    ** If something goes wrong, pBackup will be set to NULL and an error\n    ** code and message left in connection pTo.\n    **\n    ** If the backup object is successfully created, call backup_step()\n    ** to copy data from pFile to pInMemory. Then call backup_finish()\n    ** to release resources associated with the pBackup object.  If an\n    ** error occurred, then an error code and message will be left in\n    ** connection pTo. If no error occurred, then the error code belonging\n    ** to pTo is set to SQLITE_OK.\n    */\n    pBackup = sqlite3_backup_init(pTo, \"main\", pFrom, \"main\");\n    if( pBackup ){\n      (void)sqlite3_backup_step(pBackup, -1);\n      (void)sqlite3_backup_finish(pBackup);\n    }\n    rc = sqlite3_errcode(pTo);\n  }\n\n  /* Close the database connection opened on database file zFilename\n  ** and return the result of this function. */\n  (void)sqlite3_close(pFile);\n  return rc;\n}\n\n```", "```sql\n/*\n** Perform an online backup of database pDb to the database file named\n** by zFilename. This function copies 5 database pages from pDb to\n** zFilename, then unlocks pDb and sleeps for 250 ms, then repeats the\n** process until the entire database is backed up.\n** \n** The third argument passed to this function must be a pointer to a progress\n** function. After each set of 5 pages is backed up, the progress function\n** is invoked with two integer parameters: the number of pages left to\n** copy, and the total number of pages in the source file. This information\n** may be used, for example, to update a GUI progress bar.\n**\n** While this function is running, another thread may use the database pDb, or\n** another process may access the underlying database file via a separate \n** connection.\n**\n** If the backup process is successfully completed, SQLITE_OK is returned.\n** Otherwise, if an error occurs, an SQLite error code is returned.\n*/\nint backupDb(\n  sqlite3 *pDb,               /* Database to back up */\n  const char *zFilename,      /* Name of file to back up to */\n  void(*xProgress)(int, int)  /* Progress function to invoke */ \n){\n  int rc;                     /* Function return code */\n  sqlite3 *pFile;             /* Database connection opened on zFilename */\n  sqlite3_backup *pBackup;    /* Backup handle used to copy data */\n\n  /* Open the database file identified by zFilename. */\n  rc = sqlite3_open(zFilename, &pFile);\n  if( rc==SQLITE_OK ){\n\n    /* Open the [sqlite3_backup](c3ref/backup.html) object used to accomplish the transfer */\n    pBackup = sqlite3_backup_init(pFile, \"main\", pDb, \"main\");\n    if( pBackup ){\n\n      /* Each iteration of this loop copies 5 database pages from database\n      ** pDb to the backup database. If the return value of backup_step()\n      ** indicates that there are still further pages to copy, sleep for\n      ** 250 ms before repeating. */\n      do {\n        rc = sqlite3_backup_step(pBackup, 5);\n        xProgress(\n            sqlite3_backup_remaining(pBackup),\n            sqlite3_backup_pagecount(pBackup)\n        );\n        if( rc==SQLITE_OK || rc==SQLITE_BUSY || rc==SQLITE_LOCKED ){\n          sqlite3_sleep(250);\n        }\n      } while( rc==SQLITE_OK || rc==SQLITE_BUSY || rc==SQLITE_LOCKED );\n\n      /* Release resources allocated by backup_init(). */\n      (void)sqlite3_backup_finish(pBackup);\n    }\n    rc = sqlite3_errcode(pFile);\n  }\n\n  /* Close the database connection opened on database file zFilename\n  ** and return the result of this function. */\n  (void)sqlite3_close(pFile);\n  return rc;\n}\n\n```"]