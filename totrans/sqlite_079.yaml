- en: In-Memory Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://sqlite.com/inmemorydb.html](https://sqlite.com/inmemorydb.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An SQLite database is normally stored in a single ordinary disk file. However,
    in certain circumstances, the database might be stored in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common way to force an SQLite database to exist purely in memory is
    to open the database using the special filename "**:memory:**". In other words,
    instead of passing the name of a real disk file into one of the [sqlite3_open()](c3ref/open.html),
    [sqlite3_open16()](c3ref/open.html), or [sqlite3_open_v2()](c3ref/open.html) functions,
    pass in the string ":memory:". For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'When this is done, no disk file is opened. Instead, a new database is created
    purely in memory. The database ceases to exist as soon as the database connection
    is closed. Every :memory: database is distinct from every other. So, opening two
    database connections each with the filename ":memory:" will create two independent
    in-memory databases.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The special filename ":memory:" can be used anywhere that a database filename
    is permitted. For example, it can be used as the *filename* in an [ATTACH](lang_attach.html)
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'Note that in order for the special ":memory:" name to apply and to create a
    pure in-memory database, there must be no additional text in the filename. Thus,
    a disk-based database can be created in a file by prepending a pathname, like
    this: "./:memory:".'
  prefs: []
  type: TYPE_NORMAL
- en: 'The special ":memory:" filename also works when using [URI filenames](uri.html).
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Or,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: In-memory Databases And Shared Cache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In-memory databases are allowed to use [shared cache](sharedcache.html) if
    they are opened using a [URI filename](uri.html). If the unadorned ":memory:"
    name is used to specify the in-memory database, then that database always has
    a private cache and is only visible to the database connection that originally
    opened it. However, the same in-memory database can be opened by two or more database
    connections as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Or,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: This allows separate database connections to share the same in-memory database.
    Of course, all database connections sharing the in-memory database need to be
    in the same process. The database is automatically deleted and memory is reclaimed
    when the last connection to the database closes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If two or more distinct but shareable in-memory databases are needed in a single
    process, then the [mode=memory](uri.html#coreqp) query parameter can be used with
    a [URI filename](uri.html) to create a named in-memory database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Or,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: When an in-memory database is named in this way, it will only share its cache
    with another connection that uses exactly the same name.
  prefs: []
  type: TYPE_NORMAL
- en: Temporary Databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the name of the database file handed to [sqlite3_open()](c3ref/open.html)
    or to [ATTACH](lang_attach.html) is an empty string, then a new temporary file
    is created to hold the database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: A different temporary file is created each time so that, just as with the special
    ":memory:" string, two database connections to temporary databases each have their
    own private database. Temporary databases are automatically deleted when the connection
    that created them closes.
  prefs: []
  type: TYPE_NORMAL
- en: Even though a disk file is allocated for each temporary database, in practice
    the temporary database usually resides in the in-memory pager cache and hence
    there is very little difference between a pure in-memory database created by ":memory:"
    and a temporary database created by an empty filename. The sole difference is
    that a ":memory:" database must remain in memory at all times whereas parts of
    a temporary database might be flushed to disk if the database becomes large or
    if SQLite comes under memory pressure.
  prefs: []
  type: TYPE_NORMAL
- en: The previous paragraphs describe the behavior of temporary databases under the
    default SQLite configuration. An application can use the [temp_store pragma](pragma.html#pragma_temp_store)
    and the [SQLITE_TEMP_STORE](compile.html#temp_store) compile-time parameter to
    force temporary databases to behave as pure in-memory databases, if desired.
  prefs: []
  type: TYPE_NORMAL
