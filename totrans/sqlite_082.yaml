- en: Custom Builds Of SQLite or Porting SQLite To New Operating Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义构建SQLite或将SQLite移植到新操作系统
- en: 原文：[https://sqlite.com/custombuild.html](https://sqlite.com/custombuild.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/custombuild.html](https://sqlite.com/custombuild.html)
- en: 1.0 Introduction
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0 介绍
- en: For most applications, the recommended method for building SQLite is to use
    [the amalgamation](amalgamation.html) code file, **sqlite3.c**, and its corresponding
    header file **sqlite3.h**. The sqlite3.c code file should compile and run on any
    Unix, Windows system without any changes or special compiler options. Most applications
    can simply include the sqlite3.c file together with the other C code files that
    make up the application, compile them all together, and have working and well
    configured version of SQLite.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数应用程序，构建SQLite的推荐方法是使用[汇编](amalgamation.html)代码文件**sqlite3.c**及其对应的头文件**sqlite3.h**。sqlite3.c代码文件应该可以在任何Unix、Windows系统上编译和运行，而不需要任何修改或特殊的编译器选项。大多数应用程序可以简单地将sqlite3.c文件与构成应用程序的其他C代码文件一起包含在一起，同时编译它们，就能够得到可工作且配置良好的SQLite版本。
- en: '*Most applications work great with SQLite in its default configuration and
    with no special compile-time configuration. Most developers should be able to
    completely ignore this document and simply build SQLite from [the amalgamation](amalgamation.html)
    without any special knowledge and without taking any special actions.*'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*大多数应用程序在默认配置下和没有特殊的编译时配置下都能够很好地使用SQLite。大多数开发人员应该能够完全忽略此文档，简单地从[汇编](amalgamation.html)构建SQLite，而无需任何特殊知识或特殊操作。*'
- en: 'However, highly tuned and specialized applications may want or need to replace
    some of SQLite''s built-in system interfaces with alternative implementations
    more suitable for the needs of the application. SQLite is designed to be easily
    reconfigured at compile-time to meet the specific needs of individual projects.
    Among the compile-time configuration options for SQLite are these:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，高度调优和专门应用程序可能希望或需要用适合应用程序需求的替代实现替换SQLite的一些内置系统接口。SQLite被设计为在编译时很容易重新配置，以满足个别项目的特定需求。SQLite的编译时配置选项包括：
- en: Replace the built-in mutex subsystem with an alternative implementation.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用替代实现替换内置的互斥子系统。
- en: Completely disable all mutexing for use in single-threaded applications.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全禁用所有互斥体，用于单线程应用程序。
- en: Reconfigure the memory allocation subsystem to use a memory allocator other
    the malloc() implementation from the standard library.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新配置内存分配子系统，使用标准库中malloc()实现之外的内存分配器。
- en: Realign the memory allocation subsystem so that it never calls malloc() at all
    but instead satisfies all memory requests using a fixed-size memory buffer assigned
    to SQLite at startup.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新调整内存分配子系统，使其根本不调用malloc()，而是在SQLite启动时使用固定大小的内存缓冲区满足所有内存请求。
- en: Replace the interface to the file system with an alternative design. In other
    words, override all of the system calls that SQLite makes in order to talk to
    the disk with a completely different set of system calls.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用另一种设计替换文件系统接口。换句话说，使用完全不同的系统调用集合覆盖 SQLite 用于与磁盘通信的所有系统调用。
- en: Override other operating system interfaces such as calls to obtain Zulu or local
    time.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖其他操作系统接口，如获取 Zulu 或本地时间的调用。
- en: Generally speaking, there are three separate subsystems within SQLite that can
    be modified or overridden at compile-time. The mutex subsystem is used to serialize
    access to SQLite resources that are shared among threads. The memory allocation
    subsystem is used to allocate memory required by SQLite objects and for the database
    cache. Finally, the [Virtual File System](c3ref/vfs.html) subsystem is used to
    provide a portable interface between SQLite and the underlying operating system
    and especially the file system. We call these three subsystems the "interface"
    subsystems of SQLite.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，SQLite 中有三个单独的子系统可以在编译时进行修改或重写。互斥锁子系统用于串行访问在多线程间共享的 SQLite 资源。内存分配子系统用于分配
    SQLite 对象和数据库缓存所需的内存。最后，[虚拟文件系统](c3ref/vfs.html)子系统用于提供 SQLite 与底层操作系统以及文件系统之间的可移植接口。我们称这三个子系统为
    SQLite 的“接口”子系统。
- en: We emphasis that most applications are well-served by the built-in default implementations
    of the SQLite interface subsystems. Developers are encouraged to use the default
    built-in implementations whenever possible and to build SQLite without any special
    compile-time options or parameters. However, some highly specialized applications
    may benefit from substituting or modifying one or more of these built-in SQLite
    interface subsystems. Or, if SQLite is used on an operating system other than
    Unix (Linux or Mac OS X), Windows (Win32 or WinCE), or OS/2 then none of the interface
    subsystems that come built into SQLite will work and the application will need
    to provide alternative implementations suitable for the target platform.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强调大多数应用程序通过使用 SQLite 内置默认实现来达到良好的服务。鼓励开发者尽可能使用默认内置实现，并在编译 SQLite 时不使用任何特殊的编译时选项或参数。然而，一些高度专业化的应用程序可能会从替换或修改这些内置
    SQLite 接口子系统中的一个或多个中受益。或者，如果 SQLite 用于非 Unix（Linux 或 Mac OS X）、Windows（Win32 或
    WinCE）或 OS/2 操作系统，则 SQLite 内置的接口子系统将不起作用，并且应用程序需要提供适用于目标平台的替代实现。
- en: 2.0 Configuring Or Replacing The Mutex Subsystem
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0 配置或替换互斥锁子系统
- en: 'In a multithreaded environment, SQLite uses mutexes to serialize access to
    shared resources. The mutex subsystem is only required for applications that access
    SQLite from multiple threads. For single-threaded applications, or applications
    which only call SQLite from a single thread, the mutex subsystem can be completely
    disabled by recompiling with the following option:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在多线程环境中，SQLite 使用互斥锁（mutexes）来串行访问共享资源。互斥锁子系统仅适用于从多个线程访问 SQLite 的应用程序。对于单线程应用程序或仅从单个线程调用
    SQLite 的应用程序，可以通过重新编译并使用以下选项完全禁用互斥锁子系统：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Mutexes are cheap but they are not free, so performance will be better when
    mutexes are completely disabled. The resulting library footprint will also be
    a little smaller. Disabling the mutexes at compile-time is a recommended optimization
    for applications where it makes sense.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 互斥锁是廉价的，但并非免费，因此当完全禁用互斥锁时，性能将会更好。生成的库文件大小也会稍微减小。在编译时禁用互斥锁是推荐的优化方式，适用于有意义的应用程序。
- en: When using SQLite as a shared library, an application can test to see whether
    or not mutexes have been disabled using the [sqlite3_threadsafe()](c3ref/threadsafe.html)
    API. Applications that link against SQLite at run-time and use SQLite from multiple
    threads should probably check this API to make sure they did not accidentally
    get linked against a version of the SQLite library that has its mutexes disabled.
    Single-threaded applications will, of course, work correctly regardless of whether
    or not SQLite is configured to be threadsafe, though they will be a little bit
    faster when using versions of SQLite with mutexes disabled.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为共享库使用 SQLite 时，应用程序可以使用 [sqlite3_threadsafe()](c3ref/threadsafe.html) API
    测试互斥锁是否已禁用。在运行时链接到 SQLite 并从多个线程使用 SQLite 的应用程序应该检查此 API，以确保它们没有意外地链接到已禁用互斥锁的
    SQLite 库版本。当然，单线程应用程序无论 SQLite 是否配置为线程安全都将正常工作，尽管在使用禁用互斥锁的 SQLite 版本时会稍微快一些。
- en: 'SQLite mutexes can also be disabled at run-time using the [sqlite3_config()](c3ref/config.html)
    interface. To completely disable all mutexing, the application can invoke:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 互斥锁也可以使用 [sqlite3_config()](c3ref/config.html) 接口在运行时禁用。要完全禁用所有互斥锁，应用程序可以调用：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Disabling mutexes at run-time is not as effective as disabling them at compile-time
    since SQLite still must do a test of a boolean variable to see if mutexes are
    enabled or disabled at each point where a mutex might be required. But there is
    still a performance advantage for disabling mutexes at run-time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时禁用互斥锁不如在编译时禁用有效，因为 SQLite 仍然必须在可能需要互斥锁的每个点上测试一个布尔变量以查看互斥锁是否已启用或禁用。但是，在运行时禁用互斥锁仍具有性能优势。
- en: 'For multi-threaded applications that are careful about how they manage threads,
    SQLite supports an alternative run-time configuration that is half way between
    not using any mutexes and the default situation of mutexing everything in sight.
    This in-the-middle mutex alignment can be established as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小心管理线程的多线程应用程序，SQLite 支持一个中间互斥体对齐的替代运行时配置，介于不使用任何互斥体和默认情况下互斥体一切的中间位置之间。
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are two separate configuration changes here which can be used either together
    or separately. The [SQLITE_CONFIG_MULTITHREAD](c3ref/c_config_covering_index_scan.html#sqliteconfigmultithread)
    setting disables the mutexes that serialize access to [database connection](c3ref/sqlite3.html)
    objects and [prepared statement](c3ref/stmt.html) objects. With this setting,
    the application is free to use SQLite from multiple threads, but it must make
    sure than no two threads try to access the same [database connection](c3ref/sqlite3.html)
    or any [prepared statements](c3ref/stmt.html) associated with the same [database
    connection](c3ref/sqlite3.html) at the same time. Two threads can use SQLite at
    the same time, but they must use separate [database connections](c3ref/sqlite3.html).
    The second [SQLITE_CONFIG_MEMSTATUS](c3ref/c_config_covering_index_scan.html#sqliteconfigmemstatus)
    setting disables the mechanism in SQLite that tracks the total size of all outstanding
    memory allocation requests. This omits the need to mutex each call to [sqlite3_malloc()](c3ref/free.html)
    and [sqlite3_free()](c3ref/free.html), which saves a huge number of mutex operations.
    But a consequence of disabling the memory statistics mechanism is that the [sqlite3_memory_used()](c3ref/memory_highwater.html),
    [sqlite3_memory_highwater()](c3ref/memory_highwater.html), and [sqlite3_soft_heap_limit64()](c3ref/hard_heap_limit64.html)
    interfaces cease to work.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个独立的配置更改，可以同时使用也可以分开使用。[SQLITE_CONFIG_MULTITHREAD](c3ref/c_config_covering_index_scan.html#sqliteconfigmultithread)
    设置禁用互斥体，用于序列化对[数据库连接](c3ref/sqlite3.html)对象和[预编译语句](c3ref/stmt.html)对象的访问。使用此设置，应用程序可以自由地从多个线程中使用
    SQLite，但必须确保没有两个线程同时尝试访问相同的[数据库连接](c3ref/sqlite3.html)或任何与同一[数据库连接](c3ref/sqlite3.html)关联的[预编译语句](c3ref/stmt.html)。两个线程可以同时使用
    SQLite，但必须使用独立的[数据库连接](c3ref/sqlite3.html)。第二个[SQLITE_CONFIG_MEMSTATUS](c3ref/c_config_covering_index_scan.html#sqliteconfigmemstatus)
    设置禁用 SQLite 中跟踪所有未解决内存分配请求总大小的机制。这样可以避免每次调用[sqlite3_malloc()](c3ref/free.html)和[sqlite3_free()](c3ref/free.html)时使用互斥体，从而节省大量互斥体操作。但禁用内存统计机制的一个后果是，[sqlite3_memory_used()](c3ref/memory_highwater.html)、[sqlite3_memory_highwater()](c3ref/memory_highwater.html)
    和 [sqlite3_soft_heap_limit64()](c3ref/hard_heap_limit64.html) 接口将停止工作。
- en: 'SQLite uses pthreads for its mutex implementation on Unix and SQLite requires
    a recursive mutex. Most modern pthread implementations support recursive mutexes,
    but not all do. For systems that do not support recursive mutexes, it is recommended
    that applications operate in single-threaded mode only. If this is not possible,
    SQLite provides an alternative recursive mutex implementation built on top of
    the standard "fast" mutexes of pthreads. This alternative implementation should
    work correctly as long as pthread_equal() is atomic and the processor has a coherent
    data cache. The alternative recursive mutex implementation is enabled by the following
    compiler command-line switch:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 在 Unix 上使用 pthreads 实现其互斥功能，并且 SQLite 需要递归互斥。大多数现代 pthread 实现支持递归互斥，但并非所有实现都支持。对于不支持递归互斥的系统，建议应用程序仅在单线程模式下运行。如果这不可能，SQLite
    提供了一个替代的递归互斥实现，建立在 pthreads 的标准“快速”互斥之上。只要 pthread_equal() 是原子的，并且处理器具有一致的数据缓存，这种替代递归互斥实现就应该能正常工作。可以通过以下编译器命令行开关启用这种替代递归互斥实现：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When porting SQLite to a new operating system, it is usually necessary to completely
    replace the built-in mutex subsystem with an alternative built around the mutex
    primitives of the new operating system. This is accomplished by compiling SQLite
    with the following option:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当将 SQLite 移植到新操作系统时，通常需要完全替换内置的互斥子系统，使用围绕新操作系统的互斥原语构建的替代方案。这可以通过使用以下选项编译 SQLite
    来实现：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When SQLite is compiled with the SQLITE_MUTEX_APPDEF=1 option, it completely
    omits the implementation of its [mutex primitive functions](c3ref/mutex_alloc.html).
    But the SQLite library still attempts to call these functions where necessary,
    so the application must itself implement the [mutex primitive functions](c3ref/mutex_alloc.html)
    and link them together with SQLite.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当 SQLite 使用 SQLITE_MUTEX_APPDEF=1 选项编译时，它完全省略了其 [互斥原语函数](c3ref/mutex_alloc.html)
    的实现。但是 SQLite 库仍然尝试在必要时调用这些函数，因此应用程序必须自行实现 [互斥原语函数](c3ref/mutex_alloc.html)，并将它们与
    SQLite 链接在一起。
- en: 3.0 Configuring Or Replacing The Memory Allocation Subsystem
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.0 配置或替换内存分配子系统
- en: By default, SQLite obtains the memory it needs for objects and cache from the
    malloc()/free() implementation of the standard library. There is also on-going
    work with experimental memory allocators that satisfy all memory requests from
    a single fixed memory buffer handed to SQLite at application start. Additional
    information on these experimental memory allocators will be provided in a future
    revision of this document.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，SQLite 从标准库的 malloc()/free() 实现获取对象和缓存所需的内存。还在进行实验性内存分配器的工作，这些分配器在应用程序启动时将所有内存请求满足为单个固定内存缓冲区。有关这些实验性内存分配器的额外信息将在本文档的未来修订版中提供。
- en: 'SQLite supports the ability of an application to specify an alternative memory
    allocator at run-time by filling in an instance of the [sqlite3_mem_methods](c3ref/mem_methods.html)
    object with pointers to the routines of the alternative implementation then registering
    the new alternative implementation using the [sqlite3_config()](c3ref/config.html)
    interface. For example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 支持应用程序在运行时通过填充一个[sqlite3_mem_methods](c3ref/mem_methods.html)对象的实例来指定替代内存分配器的能力，并使用[sqlite3_config()](c3ref/config.html)接口注册新的替代实现。例如：
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: SQLite makes a copy of the content of the [sqlite3_mem_methods](c3ref/mem_methods.html)
    object so the object can be modified after the [sqlite3_config()](c3ref/config.html)
    call returns.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 会复制[sqlite3_mem_methods](c3ref/mem_methods.html)对象的内容，因此该对象可以在[sqlite3_config()](c3ref/config.html)调用返回后进行修改。
- en: 4.0 Adding New Virtual File Systems
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.0 添加新的虚拟文件系统
- en: Since [version 3.5.0](releaselog/3_5_0.html) (2007-09-04), SQLite has supported
    an interface called the [virtual file system](c3ref/vfs.html) or "VFS". This object
    is somewhat misnamed since it is really an interface to the whole underlying operating
    system, not just the filesystem.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 自 [版本 3.5.0](releaselog/3_5_0.html)（2007-09-04）起，SQLite 支持称为[virtual file system](c3ref/vfs.html)或“VFS”的接口。这个对象有点名不副实，因为它实际上是整个底层操作系统的接口，而不仅仅是文件系统。
- en: One of the interesting features of the VFS interface is that SQLite can support
    multiple VFSes at the same time. Each [database connection](c3ref/sqlite3.html)
    has to choose a single VFS for its use when the connection is first opened using
    [sqlite3_open_v2()](c3ref/open.html). But if a process contains multiple [database
    connections](c3ref/sqlite3.html) each can choose a different VFS. VFSes can be
    added at run-time using the [sqlite3_vfs_register()](c3ref/vfs_find.html) interface.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: VFS 接口的一个有趣特性是 SQLite 可以同时支持多个 VFS。每个[数据库连接](c3ref/sqlite3.html)在首次使用[sqlite3_open_v2()](c3ref/open.html)打开连接时必须选择一个单一的
    VFS 供其使用。但如果一个进程包含多个[数据库连接](c3ref/sqlite3.html)，则每个连接可以选择不同的 VFS。可以使用[sqlite3_vfs_register()](c3ref/vfs_find.html)接口在运行时添加
    VFS。
- en: The default builds for SQLite on Unix, Windows, and OS/2 include a VFS appropriate
    for the target platform. SQLite builds for other operating systems do not contain
    a VFS by default, but the application can register one or more at run-time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix、Windows 和 OS/2 上的 SQLite 默认构建包含适合目标平台的 VFS。其他操作系统上的 SQLite 构建默认不包含 VFS，但应用程序可以在运行时注册一个或多个。
- en: 5.0 Porting SQLite To A New Operating System
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.0 将 SQLite 移植到新操作系统
- en: In order to port SQLite to a new operating system - an operating system not
    supported by default - the application must provide...
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 SQLite 移植到一个新的操作系统 - 一个默认不支持的操作系统 - 应用程序必须提供...
- en: a working mutex subsystem (but only if it is multithreaded),
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作中的互斥子系统（但仅在多线程时），
- en: a working memory allocation subsystem (assuming it lacks malloc() in its standard
    library), and
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作中的内存分配子系统（假设其标准库中缺少 malloc()），和
- en: a working VFS implementation.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个工作中的 VFS 实现。
- en: 'All of these things can be provided in a single auxiliary C code file and then
    linked with the stock "sqlite3.c" code file to generate a working SQLite build
    for the target operating system. In addition to the alternative mutex and memory
    allocation subsystems and the new VFS, the auxiliary C code file should contain
    implementations for the following two routines:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些内容可以在单独的辅助 C 代码文件中提供，然后与存储的 "sqlite3.c" 代码文件链接，以生成适用于目标操作系统的工作 SQLite 构建。除了替代互斥锁和内存分配子系统以及新的
    VFS 外，辅助 C 代码文件还应包含以下两个例程的实现：
- en: '[sqlite3_os_init()](c3ref/initialize.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_os_init()](c3ref/initialize.html)'
- en: '[sqlite3_os_end()](c3ref/initialize.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite3_os_end()](c3ref/initialize.html)'
- en: 'The "sqlite3.c" code file contains default implementations of a VFS and of
    the [sqlite3_initialize()](c3ref/initialize.html) and [sqlite3_shutdown()](c3ref/initialize.html)
    functions that are appropriate for Unix, Windows, and OS/2. To prevent one of
    these default components from being loaded when sqlite3.c is compiled, it is necessary
    to add the following compile-time option:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '"sqlite3.c" 代码文件包含适用于 Unix、Windows 和 OS/2 的默认 VFS 和 [sqlite3_initialize()](c3ref/initialize.html)
    及 [sqlite3_shutdown()](c3ref/initialize.html) 函数的实现。要在编译 sqlite3.c 时防止加载其中一个默认组件，需要添加以下编译时选项：'
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The SQLite core will call [sqlite3_initialize()](c3ref/initialize.html) early.
    The auxiliary C code file can contain an implementation of sqlite3_initialize()
    that registers an appropriate VFS and also perhaps initializes an alternative
    mutex system (if mutexes are required) or does any memory allocation subsystem
    initialization that is required. The SQLite core never calls [sqlite3_shutdown()](c3ref/initialize.html)
    but it is part of the official SQLite API and is not otherwise provided when compiled
    with -DSQLITE_OS_OTHER=1, so the auxiliary C code file should probably provide
    it for completeness.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 核心会尽早调用 [sqlite3_initialize()](c3ref/initialize.html)。辅助 C 代码文件可以包含 sqlite3_initialize()
    的实现，注册适当的 VFS，并可能初始化替代互斥系统（如果需要互斥锁）或执行任何所需的内存分配子系统初始化。SQLite 核心从不调用 [sqlite3_shutdown()](c3ref/initialize.html)，但它是官方
    SQLite API 的一部分，并且在使用 -DSQLITE_OS_OTHER=1 编译时不提供其他方式，因此辅助 C 代码文件应为完整性可能提供它。
