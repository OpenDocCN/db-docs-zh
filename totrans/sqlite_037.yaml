- en: 1\. Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://sqlite.com/carray.html](https://sqlite.com/carray.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Carray() is a [table-valued function](vtab.html#tabfunc2) with a single column
    (named "value") and zero or more rows. The "value" of each row in the carray()
    is taken from a C-language array supplied by the application via [parameter binding](c3ref/bind_blob.html).
    In this way, the carray() function provides a convenient mechanism to bind C-language
    arrays to SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The carray() function is not compiled into SQLite by default. It is available
    as a [loadable extension](loadext.html) in the [ext/misc/carray.c](https://www.sqlite.org/src/file/ext/misc/carray.c)
    source file.
  prefs: []
  type: TYPE_NORMAL
- en: The carray() function was first added to SQLite in version 3.14 (2016-08-08).
    The sqlite3_carray_bind() interface and the single-argument variant of carray()
    was added in SQLite version 3.34.0 (2020-12-01). The ability to bind an array
    of `struct iovec` objects that are interpreted as BLOBs was added in SQLite version
    3.41.0 (2023-02-21).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The carray() function takes one, two, or three arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the two- and three-argument versions of carray(), the first argument is
    a pointer to an array. Since pointer values cannot be specified directly in SQL,
    the first argument must be a [parameter](lang_expr.html#varparam) that is bound
    to a pointer value using the [sqlite3_bind_pointer()](c3ref/bind_blob.html) interface
    using a pointer-type of "carray". The second argument is the number of elements
    in the array. The optional third argument is a string that determines the datatype
    of the elements in the C-language array. Allowed values for the third argument
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '''int32'''
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '''int64'''
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '''double'''
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '''char*'''
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '''struct iovec'''
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default datatype is 'int32'.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ''struct iovec'' type used for BLOB data is a standard Posix data structure,
    normally declared using "`#include <sys/uio.h>`". The format is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 3.1\. Single-Argument CARRAY
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The single-argument form of carray() requires a special C-language interface
    named "sqlite3_carray_bind()" in order to attach values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'The mFlags parameter to sqlite3_carray_bind() must be one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Higher order bits of the mFlags parameter must all be zero for now, though they
    may be used in future enhancements. The definitions for the constants that specify
    the datatype and a prototype for the sqlite3_carray_bind() function are both available
    in the auxiliary header file [ext/misc/carray.h](https://www.sqlite.org/src/file/ext/misc/carray.h).
  prefs: []
  type: TYPE_NORMAL
- en: 'The xDestroy argument to sqlite3_carray_bind() routine is a pointer to a function
    that frees the input array. SQLite will invoke this function after it has finished
    with the data. The xDestroy argument may optionally be one of the following constants
    defined in "sqlite3.h":'
  prefs: []
  type: TYPE_NORMAL
- en: '[SQLITE_STATIC](c3ref/c_static.html) → This means that the application that
    invokes sqlite3_carray_bind() maintains ownership of the data array and that the
    application promises SQLite that it will not change or deallocate the data until
    after the prepared statement is finialized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQLITE_TRANSIENT](c3ref/c_static.html) → This special value instructs SQLite
    to make its own private copy of the data before the sqlite3_carray_bind() interface
    returns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4\. Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The carray() function can be used in the FROM clause of a query. For example,
    to query two entries from the OBJ table using rowids taken from a C-language array
    at address $PTR.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This query gives the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
