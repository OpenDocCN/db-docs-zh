- en: Debugging Hints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://sqlite.com/debugging.html](https://sqlite.com/debugging.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The following is a random assortment of techniques used by the SQLite developers
    to trace, examine, and understand the behavior of the core SQLite library.
  prefs: []
  type: TYPE_NORMAL
- en: These techniques are designed to aid in understanding the core SQLite library
    itself, not applications that merely use SQLite.
  prefs: []
  type: TYPE_NORMAL
- en: '**Use the ".eqp full" option on the [command-line shell](cli.html)**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you have a SQL script that you are debugging or trying to understand, it
    is often useful to run it in the [command-line shell](cli.html) with the ".eqp
    full" setting. When ".eqp" is set to FULL, the shell automatically shows the [EXPLAIN](lang_explain.html)
    and [EXPLAIN QUERY PLAN](eqp.html) output for each command prior to actually running
    that command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For added readability, also set ".echo on" so that the output contains the original
    SQL text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The newer ".eqp trace" command does everything that ".eqp full" does and also
    turns on [VDBE tracing](pragma.html#pragma_vdbe_trace).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Use compile-time options to enable debugging features.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Suggested compile-time options include:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[-DSQLITE_DEBUG](compile.html#debug)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[-DSQLITE_ENABLE_EXPLAIN_COMMENTS](compile.html#enable_explain_comments)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: -DSQLITE_ENABLE_TREETRACE
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: -DSQLITE_ENABLE_WHERETRACE
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The SQLITE_ENABLE_TREETRACE and SQLITE_ENABLE_WHERETRACE options are not documented
    in [compile-time options](compile.html) document because they are not officially
    supported. What they do is activate the ".treetrace" and ".wheretrace" dot-commands
    in the command-line shell, which provide low-level tracing output for the logic
    that generates code for SELECT and DML statements and WHERE clauses, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Call sqlite3ShowExpr() and similar from the debugger.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When compiled with [SQLITE_DEBUG](compile.html#debug), SQLite includes routines
    that will print out various internal abstract syntax tree structures as ASCII-art
    graphs. This can be very useful in a debugging in order to understand the variables
    that SQLite is working with. The following routines are available:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void sqlite3ShowExpr(const Expr*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowExprList(const ExprList*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowIdList(const IdList*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowSrcList(const SrcList*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowSelect(const Select*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowWith(const With*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowUpsert(const Upsert*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowTrigger(const Trigger*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowTriggerList(const Trigger*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowTriggerStep(const TriggerStep*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowTriggerStepList(const TriggerStep*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowWindow(const Window*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: void sqlite3ShowWinFunc(const Window*);
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These routines are not APIs and are subject to change. They are for interactive
    debugging use only.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Breakpoints on test_addoptrace**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When debugging the [bytecode](opcode.html) generator, it is often useful to
    know where a particular opcode is being generated. To find this easily, run the
    script in a debugger. Set a breakpoint on the "test_addoptrace" routine. Then
    run the "PRAGMA vdbe_addoptrace=ON;" followed by the SQL statement in question.
    Each opcode will be displayed as it is appended to the VDBE program, and the breakpoint
    will fire immediately thereafter. Step until reaching the opcode then look backwards
    in the stack to see where and how it was generated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This only works when compiled with [SQLITE_DEBUG](compile.html#debug).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Using the ".treetrace" and ".wheretrace" shell commands**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the command-line shell and the core SQLite library are both compiled with
    [SQLITE_DEBUG](compile.html#debug) and SQLITE_ENABLE_TREETRACE and SQLITE_ENABLE_WHERETRACE,
    then the shell has two commands used to turn on debugging facilities for the most
    intricate parts of the code generator - the logic dealing with SELECT statements
    and WHERE clauses, respectively. The ".treetrace" and ".wheretrace" commands each
    take a numeric argument which can be expressed in hexadecimal. Each bit turns
    on various parts of debugging. Values of "0xfff" and "0xff" are commonly used.
    Use an argument of "0" to turn all tracing output back off.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Using the ".breakpoint" shell command**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ".breakpoint" command in the CLI does nothing but invoke the procedure named
    "test_breakpoint()", which is a no-op.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you have a script and you want to start debugging at some point half-way
    through that script, simply set a breakpoint in gdb (or whatever debugger you
    are using) on the test_breakpoint() function, and add a ".breakpoint" command
    where you want to stop. When you reach that first breakpoint, set whatever additional
    breakpoints are variable traces you need.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Disable the [lookaside memory allocator](malloc.html#lookaside)**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When looking for memory allocation problems (memory leaks, use-after-free errors,
    buffer overflows, etc) it is sometimes useful to disable the [lookaside memory
    allocator](malloc.html#lookaside) then run the test under valgrind or MSAN or
    some other heap memory debugging tool. The lookaside memory allocator can be disabled
    at start-time using the [SQLITE_CONFIG_LOOKASIDE](c3ref/c_config_covering_index_scan.html#sqliteconfiglookaside)
    interface. The [command-line shell](cli.html) will use that interface to disable
    lookaside if it is started with the "--lookaside 0 0" command line option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
