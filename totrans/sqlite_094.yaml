- en: Debugging Hints
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试提示
- en: 原文：[https://sqlite.com/debugging.html](https://sqlite.com/debugging.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/debugging.html](https://sqlite.com/debugging.html)
- en: The following is a random assortment of techniques used by the SQLite developers
    to trace, examine, and understand the behavior of the core SQLite library.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 SQLite 开发者用来跟踪、检查和理解核心 SQLite 库行为的随机技术集合。
- en: These techniques are designed to aid in understanding the core SQLite library
    itself, not applications that merely use SQLite.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术旨在帮助理解核心 SQLite 库本身，而不是仅仅使用 SQLite 的应用程序。
- en: '**Use the ".eqp full" option on the [command-line shell](cli.html)**'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在[命令行 shell](cli.html)上使用“.eqp full”选项**'
- en: When you have a SQL script that you are debugging or trying to understand, it
    is often useful to run it in the [command-line shell](cli.html) with the ".eqp
    full" setting. When ".eqp" is set to FULL, the shell automatically shows the [EXPLAIN](lang_explain.html)
    and [EXPLAIN QUERY PLAN](eqp.html) output for each command prior to actually running
    that command.
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你有一个正在调试或尝试理解的 SQL 脚本时，通常可以在[命令行 shell](cli.html)中使用“.eqp full”设置运行它。当“.eqp”设置为
    FULL 时，shell 会自动显示每个命令在实际运行之前的[EXPLAIN](lang_explain.html)和[EXPLAIN QUERY PLAN](eqp.html)输出。
- en: For added readability, also set ".echo on" so that the output contains the original
    SQL text.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了增强可读性，还可以设置“.echo on”，这样输出将包含原始的 SQL 文本。
- en: The newer ".eqp trace" command does everything that ".eqp full" does and also
    turns on [VDBE tracing](pragma.html#pragma_vdbe_trace).
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的“.eqp trace”命令与“.eqp full”做的一切相同，并且还打开[VDBE 跟踪](pragma.html#pragma_vdbe_trace)。
- en: '**Use compile-time options to enable debugging features.**'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用编译时选项来启用调试功能。**'
- en: 'Suggested compile-time options include:'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 建议的编译时选项包括：
- en: '[-DSQLITE_DEBUG](compile.html#debug)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[-DSQLITE_DEBUG](compile.html#debug)'
- en: '[-DSQLITE_ENABLE_EXPLAIN_COMMENTS](compile.html#enable_explain_comments)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[-DSQLITE_ENABLE_EXPLAIN_COMMENTS](compile.html#enable_explain_comments)'
- en: -DSQLITE_ENABLE_TREETRACE
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: -DSQLITE_ENABLE_TREETRACE
- en: -DSQLITE_ENABLE_WHERETRACE
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: -DSQLITE_ENABLE_WHERETRACE
- en: The SQLITE_ENABLE_TREETRACE and SQLITE_ENABLE_WHERETRACE options are not documented
    in [compile-time options](compile.html) document because they are not officially
    supported. What they do is activate the ".treetrace" and ".wheretrace" dot-commands
    in the command-line shell, which provide low-level tracing output for the logic
    that generates code for SELECT and DML statements and WHERE clauses, respectively.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SQLITE_ENABLE_TREETRACE 和 SQLITE_ENABLE_WHERETRACE 选项在[编译时选项](compile.html)文档中未记录，因为它们不受官方支持。它们的作用是在命令行
    shell 中激活“.treetrace”和“.wheretrace”命令，这些命令提供用于生成 SELECT 和 DML 语句以及 WHERE 子句的代码的低级跟踪输出。
- en: '**Call sqlite3ShowExpr() and similar from the debugger.**'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从调试器中调用 sqlite3ShowExpr() 和类似函数。**'
- en: 'When compiled with [SQLITE_DEBUG](compile.html#debug), SQLite includes routines
    that will print out various internal abstract syntax tree structures as ASCII-art
    graphs. This can be very useful in a debugging in order to understand the variables
    that SQLite is working with. The following routines are available:'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [SQLITE_DEBUG](compile.html#debug) 编译时，SQLite 包括一些例程，可以将各种内部抽象语法树结构打印为 ASCII
    艺术图表。这在调试过程中非常有用，可以帮助理解 SQLite 正在处理的变量。以下例程可用：
- en: void sqlite3ShowExpr(const Expr*);
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowExpr(const Expr*);
- en: void sqlite3ShowExprList(const ExprList*);
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowExprList(const ExprList*);
- en: void sqlite3ShowIdList(const IdList*);
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowIdList(const IdList*);
- en: void sqlite3ShowSrcList(const SrcList*);
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowSrcList(const SrcList*);
- en: void sqlite3ShowSelect(const Select*);
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowSelect(const Select*);
- en: void sqlite3ShowWith(const With*);
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowWith(const With*);
- en: void sqlite3ShowUpsert(const Upsert*);
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowUpsert(const Upsert*);
- en: void sqlite3ShowTrigger(const Trigger*);
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowTrigger(const Trigger*);
- en: void sqlite3ShowTriggerList(const Trigger*);
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowTriggerList(const Trigger*);
- en: void sqlite3ShowTriggerStep(const TriggerStep*);
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowTriggerStep(const TriggerStep*);
- en: void sqlite3ShowTriggerStepList(const TriggerStep*);
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowTriggerStepList(const TriggerStep*);
- en: void sqlite3ShowWindow(const Window*);
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowWindow(const Window*);
- en: void sqlite3ShowWinFunc(const Window*);
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: void sqlite3ShowWinFunc(const Window*);
- en: These routines are not APIs and are subject to change. They are for interactive
    debugging use only.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些例程不是 API，可能会更改。仅用于交互式调试。
- en: '**Breakpoints on test_addoptrace**'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在 test_addoptrace 上设置断点**'
- en: When debugging the [bytecode](opcode.html) generator, it is often useful to
    know where a particular opcode is being generated. To find this easily, run the
    script in a debugger. Set a breakpoint on the "test_addoptrace" routine. Then
    run the "PRAGMA vdbe_addoptrace=ON;" followed by the SQL statement in question.
    Each opcode will be displayed as it is appended to the VDBE program, and the breakpoint
    will fire immediately thereafter. Step until reaching the opcode then look backwards
    in the stack to see where and how it was generated.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调试 [bytecode](opcode.html) 生成器时，了解特定操作码的生成位置通常很有用。要轻松找到这一点，请在调试器中运行脚本。在 "test_addoptrace"
    例程上设置断点。然后运行 "PRAGMA vdbe_addoptrace=ON;"，然后运行相应的 SQL 语句。每个操作码将显示为附加到 VDBE 程序时，并且断点将立即触发。逐步执行直到达到操作码，然后向后查看堆栈，以查看生成它的位置和方式。
- en: This only works when compiled with [SQLITE_DEBUG](compile.html#debug).
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有在使用 [SQLITE_DEBUG](compile.html#debug) 编译时才有效。
- en: '**Using the ".treetrace" and ".wheretrace" shell commands**'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用 ".treetrace" 和 ".wheretrace" shell 命令**'
- en: When the command-line shell and the core SQLite library are both compiled with
    [SQLITE_DEBUG](compile.html#debug) and SQLITE_ENABLE_TREETRACE and SQLITE_ENABLE_WHERETRACE,
    then the shell has two commands used to turn on debugging facilities for the most
    intricate parts of the code generator - the logic dealing with SELECT statements
    and WHERE clauses, respectively. The ".treetrace" and ".wheretrace" commands each
    take a numeric argument which can be expressed in hexadecimal. Each bit turns
    on various parts of debugging. Values of "0xfff" and "0xff" are commonly used.
    Use an argument of "0" to turn all tracing output back off.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当命令行shell和核心SQLite库都编译了[SQLITE_DEBUG](compile.html#debug)、SQLITE_ENABLE_TREETRACE和SQLITE_ENABLE_WHERETRACE时，shell具有两个命令用于打开代码生成器中最复杂部分的调试设施
    - 分别是处理SELECT语句和WHERE子句的逻辑。".treetrace"和".wheretrace"命令各自接受一个十六进制的数值参数。每个位开启不同的调试部分。通常使用"0xfff"和"0xff"的值。使用参数"0"可以关闭所有跟踪输出。
- en: '**Using the ".breakpoint" shell command**'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用".breakpoint"命令**'
- en: The ".breakpoint" command in the CLI does nothing but invoke the procedure named
    "test_breakpoint()", which is a no-op.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在CLI中，“.breakpoint”命令仅调用名为“test_breakpoint()”的过程，这是一个空操作。
- en: If you have a script and you want to start debugging at some point half-way
    through that script, simply set a breakpoint in gdb (or whatever debugger you
    are using) on the test_breakpoint() function, and add a ".breakpoint" command
    where you want to stop. When you reach that first breakpoint, set whatever additional
    breakpoints are variable traces you need.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你有一个脚本，想要在脚本中间某个时刻开始调试，只需在gdb（或其他调试器）中的test_breakpoint()函数设置断点，并在想要停止的地方添加".breakpoint"命令。当到达第一个断点时，设置任何你需要的额外断点和变量追踪。
- en: '**Disable the [lookaside memory allocator](malloc.html#lookaside)**'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**禁用[看得见的内存分配器](malloc.html#lookaside)**'
- en: When looking for memory allocation problems (memory leaks, use-after-free errors,
    buffer overflows, etc) it is sometimes useful to disable the [lookaside memory
    allocator](malloc.html#lookaside) then run the test under valgrind or MSAN or
    some other heap memory debugging tool. The lookaside memory allocator can be disabled
    at start-time using the [SQLITE_CONFIG_LOOKASIDE](c3ref/c_config_covering_index_scan.html#sqliteconfiglookaside)
    interface. The [command-line shell](cli.html) will use that interface to disable
    lookaside if it is started with the "--lookaside 0 0" command line option.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当查找内存分配问题（内存泄漏、释放后使用错误、缓冲区溢出等）时，有时候禁用[看得见的内存分配器](malloc.html#lookaside)然后在valgrind或MSAN或其他堆内存调试工具下运行测试是有用的。可以使用[SQLITE_CONFIG_LOOKASIDE](c3ref/c_config_covering_index_scan.html#sqliteconfiglookaside)接口在启动时禁用看得见的内存分配器。如果命令行shell以"--lookaside
    0 0"命令行选项启动，将使用该接口禁用看得见的内存分配器。
