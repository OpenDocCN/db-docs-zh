- en: Moving From SQLite 3.5.9 to 3.6.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://sqlite.com/35to36.html](https://sqlite.com/35to36.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SQLite version 3.6.0 (2008-07-16) contains many changes. As is the custom with
    the SQLite project, most changes are fully backwards compatible. However, a few
    of the changes in version 3.6.0 are incompatible and might require modifications
    to application code and/or makefiles. This document is a briefing on the changes
    in SQLite 3.6.0 with special attention to the incompatible changes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Key Points:**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The database file format is unchanged.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: All incompatibilities are on obscure interfaces and hence should have zero impact
    on most applications.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.0 Incompatible Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Incompatible changes are covered first since they are the most important to
    maintainers and programmers.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Overview Of Incompatible Changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changes to the [sqlite3_vfs](c3ref/vfs.html) object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The signature of the xAccess method has been modified to return an [error code](rescode.html)
    and to store its output into an integer pointed to by a parameter, rather than
    returning the output directly. This change allows the xAccess() method to report
    failures. In association with this signature change, a new extended error code
    [SQLITE_IOERR_ACCESS](rescode.html#ioerr_access) has been added.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The xGetTempname method has been removed from [sqlite3_vfs](c3ref/vfs.html).
    In its place, the xOpen method is enhanced to open a temporary file of its own
    invention when the filename parameter is NULL.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Added the xGetLastError() method to [sqlite3_vfs](c3ref/vfs.html) for returning
    filesystem-specific error messages and error codes back to SQLite.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The signature of the xCheckReservedLock method on [sqlite3_io_methods](c3ref/io_methods.html)
    has been modified so that it returns an [error code](rescode.html) and stores
    its boolean result into an integer pointed to by a parameter. In association with
    this change, a new extended error code [SQLITE_IOERR_CHECKRESERVEDLOCK](rescode.html#ioerr_checkreservedlock)
    has been added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When SQLite is ported to new operating systems (operating systems other than
    Unix, Windows, and OS/2 for which ports are provided together with the core) two
    new functions, [sqlite3_os_init()](c3ref/initialize.html) and [sqlite3_os_end()](c3ref/initialize.html),
    must be provided as part of the port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The way in which the IN and NOT IN operators handle NULL values in their right-hand
    expressions has been brought into compliance with the SQL standard and with other
    SQL database engines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The column names for the result sets of [SELECT](lang_select.html) statements
    have been tweaked in some cases to work more like other SQL database engines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Changes to compile-time options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The SQLITE_MUTEX_APPDEF compile-time parameter is no longer recognized. As a
    replacement, alternative [mutex implementations](c3ref/mutex_alloc.html) may be
    created at runtime using [sqlite3_config()](c3ref/config.html) with the [SQLITE_CONFIG_MUTEX](c3ref/c_config_covering_index_scan.html#sqliteconfigmutex)
    operator and the [sqlite3_mutex_methods](c3ref/mutex_methods.html) object.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Compile-time options OS_UNIX, OS_WIN, OS_OS2, OS_OTHER, and TEMP_STORE have
    been renamed to include an "SQLITE_" prefix in order to help avoid namespace collisions
    with application software. The new names of these options are respectively: SQLITE_OS_UNIX,
    SQLITE_OS_WIN, SQLITE_OS_OS2, SQLITE_OS_OTHER, and [SQLITE_TEMP_STORE](compile.html#temp_store).'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 1.2 Changes To The VFS Layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQLite [version 3.5.0](releaselog/3_5_0.html) introduced a [new OS interface
    layer](34to35.html) that provided an abstraction of the underlying operating system.
    This was an important innovation and has proven to be helpful in porting and maintaining
    SQLite. However, the developers have discovered some minor flaws in the original
    "virtual file system" design introduced in version 3.5.0 and so SQLite 3.6.0 includes
    some small incompatible changes to address these flaws.
  prefs: []
  type: TYPE_NORMAL
- en: '**Key Point:** The incompatible changes in the SQLite operating-system interface
    for version 3.6.0 only affect the rare applications that make use of the [virtual
    file system](c3ref/vfs.html) interface or that supply an application-defined [mutex
    implementation](c3ref/mutex_alloc.html) or that make use of other obscure compile-time
    options. The changes introduced by SQLite version 3.6.0 will have zero impact
    on the vast majority of SQLite applications that use the built-in interfaces to
    Unix, Windows, and OS/2 and that use the standard build configuration.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1.3 Changes In The Way The IN Operator Handles NULLs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All versions of SQLite up to and including version 3.5.9 have mishandled NULL
    values on the right-hand side of IN and NOT IN operators. Specifically, SQLite
    has previously ignored NULLs on the right-hand side of IN and NOT IN.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have a table X1 defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'Given the definition of X1 above, the following expressions have historically
    evaluated to FALSE in SQLite, though the correct answer is actually NULL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'Similarly, the following expressions have historically evaluated to TRUE when
    in fact NULL is also the correct answer here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: The historical behavior of SQLite is incorrect according to the SQL:1999 standard
    and it is inconsistent with the behavior of MySQL and PostgreSQL. Version 3.6.0
    changes the behavior of the IN and NOT IN operators to conform to the standard
    and to give the same results as other SQL database engines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Key Point:** The change to the way NULL values are handled by the IN and
    NOT IN operators is technically a bug fix, not a design change. However, maintainers
    should check to ensure that applications do not depend on the older, buggy behavior
    prior to upgrading to version 3.6.0.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1.4 Changes To Column Naming Rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The column names reported by join subqueries have been modified slightly in
    order to work more like other database engines. Consider the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: In version 3.5.9 the query above would return a single column named "t1.a".
    In version 3.6.0 the column name is just "a".
  prefs: []
  type: TYPE_NORMAL
- en: SQLite has never made any promises about the names of columns in the result
    set of [SELECT](lang_select.html) statement unless the column contains an AS clause.
    So this change to column name is technically not an incompatibility. SQLite is
    merely changing from one undefined behavior to another. Nevertheless, many applications
    depend on the unspecified column naming behavior of SQLite and so this change
    is discussed under the incompatible changes subheading.
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Changes To Compile-Time Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compile-time options to SQLite are controlled by C-preprocessor macros. SQLite
    version 3.6.0 changes the names of some of these macros so that all C-preprocessor
    macros that are specific to SQLite begin with the "SQLITE_" prefix. This is done
    to reduce the risk of name collisions with other software modules.
  prefs: []
  type: TYPE_NORMAL
- en: '**Key Point:** Changes to compile-time options have the potential to affect
    makefiles in projects that do customized builds of SQLite. These changes should
    have zero impact on application code and for most projects which use a standard,
    default build of SQLite.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2.0 Fully Backwards-Compatible Enhancements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the incompatible changes listed above, SQLite version 3.6.0
    adds the following backwards compatible changes and enhancements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The new [sqlite3_config()](c3ref/config.html) interface allows an application
    to customize the behavior of SQLite at run-time. Customizations possible using
    [sqlite3_config()](c3ref/config.html) include the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify an alternative mutex implementation using the [SQLITE_CONFIG_MUTEX](c3ref/c_config_covering_index_scan.html#sqliteconfigmutex)
    verb with the [sqlite3_mutex_methods](c3ref/mutex_methods.html) object.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify an alternative malloc implementation using the [SQLITE_CONFIG_MALLOC](c3ref/c_config_covering_index_scan.html#sqliteconfigmalloc)
    verb with the [sqlite3_mem_methods](c3ref/mem_methods.html) object.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Partially or fully disable the use of mutexes using [SQLITE_CONFIG_SINGLETHREAD](c3ref/c_config_covering_index_scan.html#sqliteconfigsinglethread),
    [SQLITE_CONFIG_MULTITHREAD](c3ref/c_config_covering_index_scan.html#sqliteconfigmultithread)
    and [SQLITE_CONFIG_SERIALIZED](c3ref/c_config_covering_index_scan.html#sqliteconfigserialized).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A new flag [SQLITE_OPEN_NOMUTEX](c3ref/c_open_autoproxy.html) is made available
    to the [sqlite3_open_v2()](c3ref/open.html) interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new [sqlite3_status()](c3ref/status.html) interface allows an application
    to query the performance status of SQLite at runtime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The [sqlite3_memory_used()](c3ref/memory_highwater.html) and [sqlite3_memory_highwater()](c3ref/memory_highwater.html)
    interfaces are deprecated. The equivalent functionality is now available through
    [sqlite3_status()](c3ref/status.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The [sqlite3_initialize()](c3ref/initialize.html) interface can be called to
    explicitly initialize the SQLite subsystem. The [sqlite3_initialize()](c3ref/initialize.html)
    interface is called automatically when invoking certain interfaces so the use
    of [sqlite3_initialize()](c3ref/initialize.html) is not required, but it is recommended.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The [sqlite3_shutdown()](c3ref/initialize.html) interface causes SQLite to release
    any system resources (memory allocations, mutexes, open file handles) that might
    have been allocated by [sqlite3_initialize()](c3ref/initialize.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The [sqlite3_next_stmt()](c3ref/next_stmt.html) interface allows an application
    to discover all [prepared statements](c3ref/stmt.html) associated with a [database
    connection](c3ref/sqlite3.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added the [page_count](pragma.html#pragma_page_count) PRAGMA for returning the
    size of the underlying database file in pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added a new [R*Tree index extension](rtree.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
