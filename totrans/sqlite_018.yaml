- en: 1\. Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 概述
- en: 原文：[https://sqlite.com/lang_corefunc.html](https://sqlite.com/lang_corefunc.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/lang_corefunc.html](https://sqlite.com/lang_corefunc.html)
- en: The core functions shown below are available by default. [Date & Time functions](lang_datefunc.html),
    [aggregate functions](lang_aggfunc.html), [window functions](windowfunctions.html),
    [math functions](lang_mathfunc.html), and [JSON functions](json1.html) are documented
    separately. An application may define additional functions written in C and added
    to the database engine using the [sqlite3_create_function()](c3ref/create_function.html)
    API.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 下面列出的核心函数默认可用。[日期和时间函数](lang_datefunc.html)、[聚合函数](lang_aggfunc.html)、[窗口函数](windowfunctions.html)、[数学函数](lang_mathfunc.html)和[JSON函数](json1.html)有单独的文档。应用程序可以定义使用
    [sqlite3_create_function()](c3ref/create_function.html) API 添加到数据库引擎的其他以 C 编写的函数。
- en: '**[simple-function-invocation:](syntax/simple-function-invocation.html)**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**[simple-function-invocation:](syntax/simple-function-invocation.html)**'
- en: <svg class="pikchr" viewBox="0 0 414.49 126.792"><text x="86" y="55" text-anchor="middle"
    fill="rgb(0,0,0)" dominant-baseline="central">simple-func</text> <text x="179"
    y="55" text-anchor="middle" font-weight="bold" fill="rgb(0,0,0)" dominant-baseline="central">(</text>
    <text x="273" y="55" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">expr</text>
    <text x="366" y="55" text-anchor="middle" font-weight="bold" fill="rgb(0,0,0)"
    dominant-baseline="central">)</text> <text x="273" y="17" text-anchor="middle"
    font-weight="bold" fill="rgb(0,0,0)" dominant-baseline="central">,</text> <text
    x="273" y="109" text-anchor="middle" font-weight="bold" fill="rgb(0,0,0)" dominant-baseline="central">*</text></svg>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <svg class="pikchr" viewBox="0 0 414.49 126.792"><text x="86" y="55" text-anchor="middle"
    fill="rgb(0,0,0)" dominant-baseline="central">simple-func</text> <text x="179"
    y="55" text-anchor="middle" font-weight="bold" fill="rgb(0,0,0)" dominant-baseline="central">(</text>
    <text x="273" y="55" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">表达式</text>
    <text x="366" y="55" text-anchor="middle" font-weight="bold" fill="rgb(0,0,0)"
    dominant-baseline="central">)</text> <text x="273" y="17" text-anchor="middle"
    font-weight="bold" fill="rgb(0,0,0)" dominant-baseline="central">,</text> <text
    x="273" y="109" text-anchor="middle" font-weight="bold" fill="rgb(0,0,0)" dominant-baseline="central">*</text></svg>
- en: See the [functions within expressions](lang_expr.html#*funcinexpr) documentation
    for more information about how SQL function invocations fit into the context of
    an SQL expression.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 详见[表达式中的函数](lang_expr.html#*funcinexpr)文档，了解更多关于 SQL 函数调用如何适用于 SQL 表达式的信息。
- en: 2\. List Of Core Functions
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 核心函数列表
- en: '[abs(X)](lang_corefunc.html#abs)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[abs(X)](lang_corefunc.html#abs)'
- en: '[changes()](lang_corefunc.html#changes)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[changes()](lang_corefunc.html#changes)'
- en: '[char(X1,X2,...,XN)](lang_corefunc.html#char)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[char(X1,X2,...,XN)](lang_corefunc.html#char)'
- en: '[coalesce(X,Y,...)](lang_corefunc.html#coalesce)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[coalesce(X,Y,...)](lang_corefunc.html#coalesce)'
- en: '[concat(X,...)](lang_corefunc.html#concat)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[concat(X,...)](lang_corefunc.html#concat)'
- en: '[concat_ws(SEP,X,...)](lang_corefunc.html#concat_ws)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[concat_ws(SEP,X,...)](lang_corefunc.html#concat_ws)'
- en: '[format(FORMAT,...)](lang_corefunc.html#format)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[format(FORMAT,...)](lang_corefunc.html#format)'
- en: '[glob(X,Y)](lang_corefunc.html#glob)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[glob(X,Y)](lang_corefunc.html#glob)'
- en: '[hex(X)](lang_corefunc.html#hex)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[hex(X)](lang_corefunc.html#hex)'
- en: '[ifnull(X,Y)](lang_corefunc.html#ifnull)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ifnull(X,Y)](lang_corefunc.html#ifnull)'
- en: '[iif(X,Y,Z)](lang_corefunc.html#iif)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[iif(X,Y,Z)](lang_corefunc.html#iif)'
- en: '[instr(X,Y)](lang_corefunc.html#instr)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[instr(X,Y)](lang_corefunc.html#instr)'
- en: '[last_insert_rowid()](lang_corefunc.html#last_insert_rowid)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[last_insert_rowid()](lang_corefunc.html#last_insert_rowid)'
- en: '[length(X)](lang_corefunc.html#length)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[length(X)](lang_corefunc.html#length)'
- en: '[like(X,Y)](lang_corefunc.html#like)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[like(X,Y)](lang_corefunc.html#like)'
- en: '[like(X,Y,Z)](lang_corefunc.html#like)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[like(X,Y,Z)](lang_corefunc.html#like)'
- en: '[likelihood(X,Y)](lang_corefunc.html#likelihood)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[likelihood(X,Y)](lang_corefunc.html#likelihood)'
- en: '[likely(X)](lang_corefunc.html#likely)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[likely(X)](lang_corefunc.html#likely)'
- en: '[load_extension(X)](lang_corefunc.html#load_extension)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[load_extension(X)](lang_corefunc.html#load_extension)'
- en: '[load_extension(X,Y)](lang_corefunc.html#load_extension)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[load_extension(X,Y)](lang_corefunc.html#load_extension)'
- en: '[lower(X)](lang_corefunc.html#lower)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[lower(X)](lang_corefunc.html#lower)'
- en: '[ltrim(X)](lang_corefunc.html#ltrim)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ltrim(X)](lang_corefunc.html#ltrim)'
- en: '[ltrim(X,Y)](lang_corefunc.html#ltrim)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ltrim(X,Y)](lang_corefunc.html#ltrim)'
- en: '[max(X,Y,...)](lang_corefunc.html#max_scalar)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[max(X,Y,...)](lang_corefunc.html#max_scalar)'
- en: '[min(X,Y,...)](lang_corefunc.html#min_scalar)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[min(X,Y,...)](lang_corefunc.html#min_scalar)'
- en: '[nullif(X,Y)](lang_corefunc.html#nullif)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[nullif(X,Y)](lang_corefunc.html#nullif)'
- en: '[octet_length(X)](lang_corefunc.html#octet_length)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[octet_length(X)](lang_corefunc.html#octet_length)'
- en: '[printf(FORMAT,...)](lang_corefunc.html#printf)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[printf(FORMAT,...)](lang_corefunc.html#printf)'
- en: '[quote(X)](lang_corefunc.html#quote)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[quote(X)](lang_corefunc.html#quote)'
- en: '[random()](lang_corefunc.html#random)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[random()](lang_corefunc.html#random)'
- en: '[randomblob(N)](lang_corefunc.html#randomblob)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[randomblob(N)](lang_corefunc.html#randomblob)'
- en: '[replace(X,Y,Z)](lang_corefunc.html#replace)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[replace(X,Y,Z)](lang_corefunc.html#replace)'
- en: '[round(X)](lang_corefunc.html#round)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[round(X)](lang_corefunc.html#round)'
- en: '[round(X,Y)](lang_corefunc.html#round)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[round(X,Y)](lang_corefunc.html#round)'
- en: '[rtrim(X)](lang_corefunc.html#rtrim)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[rtrim(X)](lang_corefunc.html#rtrim)'
- en: '[rtrim(X,Y)](lang_corefunc.html#rtrim)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[rtrim(X,Y)](lang_corefunc.html#rtrim)'
- en: '[sign(X)](lang_corefunc.html#sign)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sign(X)](lang_corefunc.html#sign)'
- en: '[soundex(X)](lang_corefunc.html#soundex)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[soundex(X)](lang_corefunc.html#soundex)'
- en: '[sqlite_compileoption_get(N)](lang_corefunc.html#sqlite_compileoption_get)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite_compileoption_get(N)](lang_corefunc.html#sqlite_compileoption_get)'
- en: '[sqlite_compileoption_used(X)](lang_corefunc.html#sqlite_compileoption_used)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite_compileoption_used(X)](lang_corefunc.html#sqlite_compileoption_used)'
- en: '[sqlite_offset(X)](lang_corefunc.html#sqlite_offset)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite_offset(X)](lang_corefunc.html#sqlite_offset)'
- en: '[sqlite_source_id()](lang_corefunc.html#sqlite_source_id)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite_source_id()](lang_corefunc.html#sqlite_source_id)'
- en: '[sqlite_version()](lang_corefunc.html#sqlite_version)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sqlite_version()](lang_corefunc.html#sqlite_version)'
- en: '[substr(X,Y)](lang_corefunc.html#substr)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[substr(X,Y)](lang_corefunc.html#substr)'
- en: '[substr(X,Y,Z)](lang_corefunc.html#substr)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[substr(X,Y,Z)](lang_corefunc.html#substr)'
- en: '[substring(X,Y)](lang_corefunc.html#substr)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[substring(X,Y)](lang_corefunc.html#substr)'
- en: '[substring(X,Y,Z)](lang_corefunc.html#substr)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[substring(X,Y,Z)](lang_corefunc.html#substr)'
- en: '[total_changes()](lang_corefunc.html#total_changes)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[total_changes()](lang_corefunc.html#total_changes)'
- en: '[trim(X)](lang_corefunc.html#trim)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[trim(X)](lang_corefunc.html#trim)'
- en: '[trim(X,Y)](lang_corefunc.html#trim)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[trim(X,Y)](lang_corefunc.html#trim)'
- en: '[typeof(X)](lang_corefunc.html#typeof)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[typeof(X)](lang_corefunc.html#typeof)'
- en: '[unhex(X)](lang_corefunc.html#unhex)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[unhex(X)](lang_corefunc.html#unhex)'
- en: '[unhex(X,Y)](lang_corefunc.html#unhex)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[unhex(X,Y)](lang_corefunc.html#unhex)'
- en: '[unicode(X)](lang_corefunc.html#unicode)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[unicode(X)](lang_corefunc.html#unicode)'
- en: '[unlikely(X)](lang_corefunc.html#unlikely)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[unlikely(X)](lang_corefunc.html#unlikely)'
- en: '[upper(X)](lang_corefunc.html#upper)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[upper(X)](lang_corefunc.html#upper)'
- en: '[zeroblob(N)](lang_corefunc.html#zeroblob)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[zeroblob(N)](lang_corefunc.html#zeroblob)'
- en: 3\. Descriptions of built-in scalar SQL functions
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 内置标量 SQL 函数的描述
- en: '**abs(*X*)**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**abs(*X*)**'
- en: The abs(X) function returns the absolute value of the numeric argument X. Abs(X)
    returns NULL if X is NULL. Abs(X) returns 0.0 if X is a string or blob that cannot
    be converted to a numeric value. If X is the integer -9223372036854775808 then
    abs(X) throws an integer overflow error since there is no equivalent positive
    64-bit two complement value.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`abs(X)` 函数返回数值参数 X 的绝对值。如果 X 为 NULL，则 `abs(X)` 返回 NULL。如果 X 是无法转换为数值的字符串或
    blob，则 `abs(X)` 返回 0.0。如果 X 是整数 -9223372036854775808，则 `abs(X)` 抛出整数溢出错误，因为没有等效的正
    64 位二进制补码值。'
- en: '**changes()**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**changes()**'
- en: The changes() function returns the number of database rows that were changed
    or inserted or deleted by the most recently completed INSERT, DELETE, or UPDATE
    statement, exclusive of statements in lower-level triggers. The changes() SQL
    function is a wrapper around the [sqlite3_changes64()](c3ref/changes.html) C/C++
    function and hence follows the same rules for counting changes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`changes()` 函数返回最近完成的 INSERT、DELETE 或 UPDATE 语句更改或插入或删除的数据库行数，不包括较低级触发器中的语句。`changes()`
    SQL 函数是对 [sqlite3_changes64()](c3ref/changes.html) C/C++ 函数的封装，因此遵循相同的更改计数规则。'
- en: '**char(*X1*,*X2*,...,*XN*)**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**char(*X1*,*X2*,...,*XN*)**'
- en: The char(X1,X2,...,XN) function returns a string composed of characters having
    the unicode code point values of integers X1 through XN, respectively.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`char(X1,X2,...,XN)` 函数返回由整数 X1 到 XN 的 Unicode 代码点值组成的字符串。'
- en: '**coalesce(*X*,*Y*,...)**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**coalesce(*X*,*Y*,...)**'
- en: The coalesce() function returns a copy of its first non-NULL argument, or NULL
    if all arguments are NULL. Coalesce() must have at least 2 arguments.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`coalesce()` 函数返回其第一个非 NULL 参数的副本，如果所有参数都为 NULL，则返回 NULL。`coalesce()` 必须至少有
    2 个参数。'
- en: '**concat(*X*,...)**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**concat(*X*,...)**'
- en: The concat(...) function returns a string which is the concatenation of the
    string representation of all of its non-NULL arguments. If all arguments are NULL,
    then concat() returns an empty string.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat(...)` 函数返回一个字符串，该字符串是其所有非 NULL 参数的字符串表示的串联。如果所有参数都为 NULL，则 `concat()`
    返回空字符串。'
- en: '**concat_ws(*SEP*,*X*,...)**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**concat_ws(*SEP*,*X*,...)**'
- en: The concat_ws(SEP,...) function returns a string that is the concatenation of
    all non-null arguments beyond the first argument, using the text value of the
    first argument as a separator. If the first argument is NULL, then concat_ws()
    returns NULL. If all arguments other than the first are NULL, then concat_ws()
    returns an empty string.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat_ws(SEP,...)` 函数返回一个字符串，它是除第一个参数外所有非空参数的串联，使用第一个参数的文本值作为分隔符。如果第一个参数为
    NULL，则 `concat_ws()` 返回 NULL。如果除第一个参数外的所有参数都为 NULL，则 `concat_ws()` 返回空字符串。'
- en: '**format(*FORMAT*,...)**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**format(*FORMAT*,...)**'
- en: The format(FORMAT,...) SQL function works like the [sqlite3_mprintf()](c3ref/mprintf.html)
    C-language function and the printf() function from the standard C library. The
    first argument is a format string that specifies how to construct the output string
    using values taken from subsequent arguments. If the FORMAT argument is missing
    or NULL then the result is NULL. The %n format is silently ignored and does not
    consume an argument. The %p format is an alias for %X. The %z format is interchangeable
    with %s. If there are too few arguments in the argument list, missing arguments
    are assumed to have a NULL value, which is translated into 0 or 0.0 for numeric
    formats or an empty string for %s. See the [built-in printf()](printf.html) documentation
    for additional information.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 函数 format(FORMAT,...) 的工作方式类似于 [sqlite3_mprintf()](c3ref/mprintf.html) C
    语言函数和标准 C 库中的 printf() 函数。第一个参数是格式字符串，指定如何使用后续参数的值构造输出字符串。如果缺少或为 NULL 的 FORMAT
    参数，则结果为 NULL。格式 %n 被静默忽略且不消耗参数。格式 %p 是 %X 的别名。格式 %z 可以与 %s 互换使用。如果参数列表中的参数不足，则假定缺少的参数具有
    NULL 值，这将被转换为数值格式的 0 或 0.0，或者字符串格式的空字符串 %s。有关更多信息，请参阅 [内建 printf()](printf.html)
    文档。
- en: '**glob(*X*,*Y*)**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**glob(*X*,*Y*)**'
- en: 'The glob(X,Y) function is equivalent to the expression "**Y GLOB X**". Note
    that the X and Y arguments are reversed in the glob() function relative to the
    infix [GLOB](lang_expr.html#glob) operator. Y is the string and X is the pattern.
    So, for example, the following expressions are equivalent:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 **glob(X,Y)** 等价于表达式 "**Y GLOB X**"。请注意，在 glob() 函数中，X 和 Y 参数与中缀 [GLOB](lang_expr.html#glob)
    运算符相对位置相反。其中，Y 是字符串，X 是模式。因此，例如，以下表达式是等价的：
- en: '[PRE0]'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the [sqlite3_create_function()](c3ref/create_function.html) interface is
    used to override the glob(X,Y) function with an alternative implementation then
    the [GLOB](lang_expr.html#glob) operator will invoke the alternative implementation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 [sqlite3_create_function()](c3ref/create_function.html) 接口来覆盖 glob(X,Y)
    函数的默认实现，则 [GLOB](lang_expr.html#glob) 操作符将调用该替代实现。
- en: '**hex(*X*)**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**hex(*X*)**'
- en: The hex() function interprets its argument as a BLOB and returns a string which
    is the upper-case hexadecimal rendering of the content of that blob.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 hex() 将其参数解释为 BLOB，并返回该 BLOB 内容的大写十六进制表示的字符串。
- en: If the argument *X* in "hex(*X*)" is an integer or floating point number, then
    "interprets its argument as a BLOB" means that the binary number is first converted
    into a UTF8 text representation, then that text is interpreted as a BLOB. Hence,
    "hex(12345678)" renders as "3132333435363738" not the binary representation of
    the integer value "0000000000BC614E".
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 "hex(*X*)" 中的参数 *X* 是整数或浮点数，则 "interprets its argument as a BLOB" 意味着二进制数首先转换为
    UTF8 文本表示，然后该文本被解释为 BLOB。因此，"hex(12345678)" 渲染为 "3132333435363738" 而不是整数值 "0000000000BC614E"
    的二进制表示。
- en: 'See also: [unhex()](lang_corefunc.html#unhex)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见：[unhex()](lang_corefunc.html#unhex)
- en: '**ifnull(*X*,*Y*)**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**ifnull(*X*,*Y*)**'
- en: The ifnull() function returns a copy of its first non-NULL argument, or NULL
    if both arguments are NULL. Ifnull() must have exactly 2 arguments. The ifnull()
    function is equivalent to [coalesce()](lang_corefunc.html#coalesce) with two arguments.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 ifnull() 返回其第一个非 NULL 参数的副本，如果两个参数均为 NULL 则返回 NULL。ifnull() 必须有精确的 2 个参数。函数
    ifnull() 等效于 [coalesce()](lang_corefunc.html#coalesce) 的两个参数形式。
- en: '**iif(*X*,*Y*,*Z*)**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**iif(*X*,*Y*,*Z*)**'
- en: The iif(X,Y,Z) function returns the value Y if X is true, and Z otherwise. The
    iif(X,Y,Z) function is logically equivalent to and generates the same [bytecode](opcode.html)
    as the [CASE expression](lang_expr.html#case) "CASE WHEN X THEN Y ELSE Z END".
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 iif(X,Y,Z) 如果 X 为真则返回值 Y，否则返回值 Z。函数 iif(X,Y,Z) 在逻辑上等效于并生成与 [CASE 表达式](lang_expr.html#case)
    "CASE WHEN X THEN Y ELSE Z END" 相同的 [字节码](opcode.html)。
- en: '**instr(*X*,*Y*)**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**instr(*X*,*Y*)**'
- en: The instr(X,Y) function finds the first occurrence of string Y within string
    X and returns the number of prior characters plus 1, or 0 if Y is nowhere found
    within X. Or, if X and Y are both BLOBs, then instr(X,Y) returns one more than
    the number bytes prior to the first occurrence of Y, or 0 if Y does not occur
    anywhere within X. If both arguments X and Y to instr(X,Y) are non-NULL and are
    not BLOBs then both are interpreted as strings. If either X or Y are NULL in instr(X,Y)
    then the result is NULL.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 instr(X,Y) 在字符串 X 中查找字符串 Y 的第一个出现位置，并返回前导字符数加 1，如果 Y 在 X 中找不到则返回 0。或者，如果
    X 和 Y 都是 BLOB，则 instr(X,Y) 返回第一个 Y 出现位置之前的字节数加 1，如果 Y 在 X 中找不到则返回 0。如果 instr(X,Y)
    的参数 X 和 Y 都非 NULL 且不是 BLOB，则都被解释为字符串。如果 instr(X,Y) 中的 X 或 Y 为 NULL，则结果为 NULL。
- en: '**last_insert_rowid()**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**last_insert_rowid()**'
- en: The last_insert_rowid() function returns the [ROWID](lang_createtable.html#rowid)
    of the last row insert from the database connection which invoked the function.
    The last_insert_rowid() SQL function is a wrapper around the [sqlite3_last_insert_rowid()](c3ref/last_insert_rowid.html)
    C/C++ interface function.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: last_insert_rowid() 函数返回从调用函数的数据库连接中插入的最后一行的 [ROWID](lang_createtable.html#rowid)。last_insert_rowid()
    SQL 函数是 [sqlite3_last_insert_rowid()](c3ref/last_insert_rowid.html) C/C++ 接口函数的包装器。
- en: '**length(*X*)**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**length(*X*)**'
- en: For a string value X, the length(X) function returns the number of characters
    (not bytes) in X prior to the first NUL character. Since SQLite strings do not
    normally contain NUL characters, the length(X) function will usually return the
    total number of characters in the string X. For a blob value X, length(X) returns
    the number of bytes in the blob. If X is NULL then length(X) is NULL. If X is
    numeric then length(X) returns the length of a string representation of X.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于字符串值 X，length(X) 函数返回在第一个 NUL 字符之前的字符数（而非字节）。由于 SQLite 字符串通常不包含 NUL 字符，length(X)
    函数通常返回字符串 X 中的字符总数。对于 blob 值 X，length(X) 返回 blob 中的字节数。如果 X 为 NULL，则 length(X)
    也为 NULL。如果 X 是数字，则 length(X) 返回 X 的字符串表示的长度。
- en: Note that for strings, the length(X) function returns the *character* length
    of the string, not the byte length. The character length is the number of characters
    in the string. The character length is always different from the byte length for
    UTF-16 strings, and can be different from the byte length for UTF-8 strings if
    the string contains multi-byte characters. Use the [octet_length()](lang_corefunc.html#octet_length)
    function to find the byte length of a string.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于字符串，length(X) 函数返回字符串的 *字符* 长度，而不是字节长度。字符长度是字符串中的字符数。对于 UTF-16 字符串，字符长度始终不同于字节长度，并且对于
    UTF-8 字符串，如果字符串包含多字节字符，则字符长度可能与字节长度不同。使用 [octet_length()](lang_corefunc.html#octet_length)
    函数查找字符串的字节长度。
- en: For BLOB values, length(X) always returns the byte-length of the BLOB.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 BLOB 值，length(X) 总是返回 BLOB 的字节长度。
- en: For string values, length(X) must read the entire string into memory in order
    to compute the character length. But for BLOB values, that is not necessary as
    SQLite knows how many bytes are in the BLOB. Hence, for multi-megabyte values,
    the length(X) function is usually much faster for BLOBs than for strings, since
    it does not need to load the value into memory.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于字符串值，length(X) 必须读取整个字符串到内存中以计算字符长度。但是对于 BLOB 值，由于 SQLite 知道 BLOB 中有多少字节，因此这是不必要的。因此，对于多兆字节值，length(X)
    函数通常对于 BLOB 来说比对字符串更快，因为它不需要将值加载到内存中。
- en: '**like(*X*,*Y*)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**like(*X*,*Y*)'
- en: like(*X*,*Y*,*Z*)**
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: like(*X*,*Y*,*Z*)**
- en: 'The like() function is used to implement the "**Y LIKE X [ESCAPE Z]**" expression.
    If the optional ESCAPE clause is present, then the like() function is invoked
    with three arguments. Otherwise, it is invoked with two arguments only. Note that
    the X and Y parameters are reversed in the like() function relative to the infix
    [LIKE](lang_expr.html#like) operator. X is the pattern and Y is the string to
    match against that pattern. Hence, the following expressions are equivalent:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: like() 函数用于实现 "**Y LIKE X [ESCAPE Z]**" 表达式。如果存在可选的 ESCAPE 子句，则 like() 函数将使用三个参数调用。否则，只使用两个参数调用。注意，相对于中缀
    [LIKE](lang_expr.html#like) 运算符，like() 函数中的 X 和 Y 参数是颠倒的。X 是模式，Y 是要与该模式匹配的字符串。因此，以下表达式是等效的：
- en: '[PRE1]'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The [sqlite3_create_function()](c3ref/create_function.html) interface can be
    used to override the like() function and thereby change the operation of the [LIKE](lang_expr.html#like)
    operator. When overriding the like() function, it may be important to override
    both the two and three argument versions of the like() function. Otherwise, different
    code may be called to implement the [LIKE](lang_expr.html#like) operator depending
    on whether or not an ESCAPE clause was specified.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [sqlite3_create_function()](c3ref/create_function.html) 接口来重写 like() 函数，从而改变
    [LIKE](lang_expr.html#like) 运算符的操作方式。在重写 like() 函数时，重写两个参数版本和三个参数版本的 like() 函数可能很重要。否则，根据是否指定了
    ESCAPE 子句，将调用不同的代码来实现 [LIKE](lang_expr.html#like) 运算符。
- en: '**likelihood(*X*,*Y*)**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**likelihood(*X*,*Y*)**'
- en: The likelihood(X,Y) function returns argument X unchanged. The value Y in likelihood(X,Y)
    must be a floating point constant between 0.0 and 1.0, inclusive. The likelihood(X)
    function is a no-op that the code generator optimizes away so that it consumes
    no CPU cycles during run-time (that is, during calls to [sqlite3_step()](c3ref/step.html)).
    The purpose of the likelihood(X,Y) function is to provide a hint to the query
    planner that the argument X is a boolean that is true with a probability of approximately
    Y. The [unlikely(X)](lang_corefunc.html#unlikely) function is short-hand for likelihood(X,0.0625).
    The [likely(X)](lang_corefunc.html#likely) function is short-hand for likelihood(X,0.9375).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: likelihood(X,Y) 函数返回参数 X 本身。likelihood(X,Y) 中的 Y 必须是介于 0.0 和 1.0 之间的浮点常数。likelihood(X)
    函数是一个无操作函数，代码生成器会优化掉它，因此在运行时（即在调用 [sqlite3_step()](c3ref/step.html) 时）不会消耗 CPU
    周期。likelihood(X,Y) 函数的目的是为了向查询优化器提供提示，说明参数 X 是一个概率大约为 Y 的布尔值。[unlikely(X)](lang_corefunc.html#unlikely)
    函数是 likelihood(X,0.0625) 的简写。[likely(X)](lang_corefunc.html#likely) 函数是 likelihood(X,0.9375)
    的简写。
- en: '**likely(*X*)**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**likely(*X*)**'
- en: 'The likely(X) function returns the argument X unchanged. The likely(X) function
    is a no-op that the code generator optimizes away so that it consumes no CPU cycles
    at run-time (that is, during calls to [sqlite3_step()](c3ref/step.html)). The
    purpose of the likely(X) function is to provide a hint to the query planner that
    the argument X is a boolean value that is usually true. The likely(X) function
    is equivalent to [likelihood](lang_corefunc.html#likelihood)(X,0.9375). See also:
    [unlikely(X)](lang_corefunc.html#unlikely).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: likely(X) 函数返回参数 X 本身。likely(X) 函数是一个无操作函数，代码生成器会优化掉它，因此在运行时（即在调用 [sqlite3_step()](c3ref/step.html)
    时）不会消耗 CPU 周期。likely(X) 函数的目的是为了向查询优化器提供提示，说明参数 X 是一个通常为真的布尔值。likely(X) 函数等效于
    [likelihood](lang_corefunc.html#likelihood)(X,0.9375)。另请参见：[unlikely(X)](lang_corefunc.html#unlikely)。
- en: '**load_extension(*X*)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**load_extension(X)**'
- en: load_extension(*X*,*Y*)**
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: load_extension(*X*,*Y*)**
- en: The load_extension(X,Y) function loads [SQLite extensions](loadext.html) out
    of the shared library file named X using the entry point Y. The result of load_extension()
    is always a NULL. If Y is omitted then the default entry point name is used. The
    load_extension() function raises an exception if the extension fails to load or
    initialize correctly.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: load_extension(X,Y) 函数加载名为 X 的共享库文件中的 [SQLite 扩展](loadext.html)，使用入口点 Y。load_extension()
    的结果始终为 NULL。如果省略 Y，则使用默认的入口点名称。如果扩展加载或初始化失败，load_extension() 函数会引发异常。
- en: The load_extension() function will fail if the extension attempts to modify
    or delete an SQL function or collating sequence. The extension can add new functions
    or collating sequences, but cannot modify or delete existing functions or collating
    sequences because those functions and/or collating sequences might be used elsewhere
    in the currently running SQL statement. To load an extension that changes or deletes
    functions or collating sequences, use the [sqlite3_load_extension()](c3ref/load_extension.html)
    C-language API.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果扩展尝试修改或删除 SQL 函数或排序序列，则 load_extension() 函数将失败。扩展可以添加新的函数或排序序列，但不能修改或删除当前运行的
    SQL 语句中的现有函数或排序序列，因为这些函数和/或排序序列可能在其他地方使用。要加载更改或删除函数或排序序列的扩展，请使用 [sqlite3_load_extension()](c3ref/load_extension.html)
    C 语言 API。
- en: For security reasons, extension loading is disabled by default and must be enabled
    by a prior call to [sqlite3_enable_load_extension()](c3ref/enable_load_extension.html).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全原因，默认情况下禁用扩展加载，并且必须通过先前调用 [sqlite3_enable_load_extension()](c3ref/enable_load_extension.html)
    来启用。
- en: '**lower(*X*)**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**lower(X)**'
- en: The lower(X) function returns a copy of string X with all ASCII characters converted
    to lower case. The default built-in lower() function works for ASCII characters
    only. To do case conversions on non-ASCII characters, load the ICU extension.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: lower(X) 函数返回字符串 X 的副本，其中所有 ASCII 字符转换为小写。默认的内置 lower() 函数仅适用于 ASCII 字符。要对非
    ASCII 字符进行大小写转换，请加载 ICU 扩展。
- en: '**ltrim(*X*)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**ltrim(X)**'
- en: ltrim(*X*,*Y*)**
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ltrim(X,Y)**
- en: The ltrim(X,Y) function returns a string formed by removing any and all characters
    that appear in Y from the left side of X. If the Y argument is omitted, ltrim(X)
    removes spaces from the left side of X.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ltrim(X,Y) 函数返回一个字符串，该字符串由从 X 的左侧删除所有出现在 Y 中的字符形成。如果省略 Y 参数，则 ltrim(X) 会从 X
    的左侧删除空格。
- en: '**max(*X*,*Y*,...)**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**max(*X*,*Y*,...)**'
- en: The multi-argument max() function returns the argument with the maximum value,
    or return NULL if any argument is NULL. The multi-argument max() function searches
    its arguments from left to right for an argument that defines a collating function
    and uses that collating function for all string comparisons. If none of the arguments
    to max() define a collating function, then the BINARY collating function is used.
    Note that **max()** is a simple function when it has 2 or more arguments but operates
    as an [aggregate function](lang_aggfunc.html#max_agg) if given only a single argument.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 多参数的max()函数返回具有最大值的参数，如果任何参数为NULL则返回NULL。多参数的max()函数从左到右搜索其参数，以找到定义排序函数的参数，并对所有字符串比较使用该排序函数。如果max()的参数中没有一个定义排序函数，则使用BINARY排序函数。请注意，**max()**在有2个或更多参数时是一个简单的函数，但如果只有一个参数，则作为[聚合函数](lang_aggfunc.html#max_agg)运行。
- en: '**min(*X*,*Y*,...)**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**min(*X*,*Y*,...)**'
- en: The multi-argument min() function returns the argument with the minimum value.
    The multi-argument min() function searches its arguments from left to right for
    an argument that defines a collating function and uses that collating function
    for all string comparisons. If none of the arguments to min() define a collating
    function, then the BINARY collating function is used. Note that **min()** is a
    simple function when it has 2 or more arguments but operates as an [aggregate
    function](lang_aggfunc.html#min_agg) if given only a single argument.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 多参数的min()函数返回具有最小值的参数。多参数的min()函数从左到右搜索其参数，以找到定义排序函数的参数，并对所有字符串比较使用该排序函数。如果min()的参数中没有一个定义排序函数，则使用BINARY排序函数。请注意，**min()**在有2个或更多参数时是一个简单的函数，但如果只有一个参数，则作为[聚合函数](lang_aggfunc.html#min_agg)运行。
- en: '**nullif(*X*,*Y*)**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**nullif(*X*,*Y*)**'
- en: The nullif(X,Y) function returns its first argument if the arguments are different
    and NULL if the arguments are the same. The nullif(X,Y) function searches its
    arguments from left to right for an argument that defines a collating function
    and uses that collating function for all string comparisons. If neither argument
    to nullif() defines a collating function then the BINARY collating function is
    used.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: nullif(X,Y)函数如果参数不同则返回其第一个参数，如果参数相同则返回NULL。nullif(X,Y)函数从左到右搜索其参数，以找到定义排序函数的参数，并对所有字符串比较使用该排序函数。如果nullif()的两个参数都不定义排序函数，则使用BINARY排序函数。
- en: '**octet_length(*X*)**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**octet_length(*X*)**'
- en: The octet_length(X) function returns the number of bytes in the encoding of
    text string X. If X is NULL then octet_length(X) returns NULL. If X is a BLOB
    value, then octet_length(X) is the same as [length(X)](lang_corefunc.html#length).
    If X is a numeric value, then octet_length(X) returns the number of bytes in a
    text rendering of that number.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: octet_length(X)函数返回文本字符串X编码中的字节数。如果X为NULL，则octet_length(X)返回NULL。如果X为BLOB值，则octet_length(X)与[length(X)](lang_corefunc.html#length)相同。如果X为数值，则octet_length(X)返回该数字的文本呈现的字节数。
- en: Because octet_length(X) returns the number of bytes in X, not the number of
    characters, the value returned depends on the database encoding. The octet_length()
    function can return different answers for the same input string if the database
    encoding is UTF16 instead of UTF8.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因为octet_length(X)返回X中的字节数而不是字符数，所以返回的值取决于数据库编码。如果数据库编码为UTF16而不是UTF8，则octet_length()函数对于相同的输入字符串可能返回不同的答案。
- en: If argument X is a table column and the value is of type text or blob, then
    octet_length(X) avoids reading the content of X from disk, as the byte length
    can be computed from metadata. Thus, octet_length(X) is efficient even if X is
    a column containing a multi-megabyte text or blob value.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数X是表列，并且值为文本或blob类型，则octet_length(X)避免从磁盘读取X的内容，因为可以从元数据计算出字节长度。因此，即使X是包含多兆字节文本或blob值的列，octet_length(X)也是高效的。
- en: '**printf(*FORMAT*,...)**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**printf(*FORMAT*,...)**'
- en: The printf() SQL function is an alias for the [format() SQL function](lang_corefunc.html#format).
    The format() SQL function was originally named printf(). But the name was later
    changed to format() for compatibility with other database engines. The printf()
    name is retained as an alias so as not to break legacy code.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: printf() SQL函数是[format() SQL函数](lang_corefunc.html#format)的别名。format() SQL函数最初命名为printf()，但后来为了与其他数据库引擎兼容而更改为format()。保留printf()名称作为别名，以免破坏旧代码。
- en: '**quote(*X*)**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**quote(*X*)**'
- en: The quote(X) function returns the text of an SQL literal which is the value
    of its argument suitable for inclusion into an SQL statement. Strings are surrounded
    by single-quotes with escapes on interior quotes as needed. BLOBs are encoded
    as hexadecimal literals. Strings with embedded NUL characters cannot be represented
    as string literals in SQL and hence the returned string literal is truncated prior
    to the first NUL.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `quote(X)` 返回一个 SQL 文字的文本，它是其参数的值，适合包含到 SQL 语句中。字符串由单引号包围，内部引号根据需要进行转义。BLOBs
    被编码为十六进制文字。包含嵌入 NUL 字符的字符串不能作为 SQL 字符串字面量表示，因此返回的字符串字面量在第一个 NUL 之前被截断。
- en: '**random()**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**random()**'
- en: The random() function returns a pseudo-random integer between -9223372036854775808
    and +9223372036854775807.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `random()` 返回一个介于 -9223372036854775808 到 +9223372036854775807 之间的伪随机整数。
- en: '**randomblob(*N*)**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**randomblob(*N*)**'
- en: The randomblob(N) function return an N-byte blob containing pseudo-random bytes.
    If N is less than 1 then a 1-byte random blob is returned.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `randomblob(N)` 返回一个包含 N 字节伪随机字节的 blob。如果 N 小于 1，则返回一个 1 字节的随机 blob。
- en: 'Hint: applications can generate globally unique identifiers using this function
    together with [hex()](lang_corefunc.html#hex) and/or [lower()](lang_corefunc.html#lower)
    like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：应用程序可以使用此函数与 [hex()](lang_corefunc.html#hex) 和/或 [lower()](lang_corefunc.html#lower)
    生成全局唯一标识符，例如：
- en: hex(randomblob(16))
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`hex(randomblob(16))`'
- en: lower(hex(randomblob(16)))
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`lower(hex(randomblob(16)))`'
- en: '**replace(*X*,*Y*,*Z*)**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**replace(*X*,*Y*,*Z*)**'
- en: The replace(X,Y,Z) function returns a string formed by substituting string Z
    for every occurrence of string Y in string X. The [BINARY](datatype3.html#collation)
    collating sequence is used for comparisons. If Y is an empty string then return
    X unchanged. If Z is not initially a string, it is cast to a UTF-8 string prior
    to processing.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `replace(X,Y,Z)` 返回一个字符串，通过将字符串 X 中每个字符串 Y 的出现替换为字符串 Z 形成。用于比较的是 [BINARY](datatype3.html#collation)
    排序序列。如果 Y 是空字符串，则返回不变的 X。如果 Z 最初不是字符串，则在处理之前将其强制转换为 UTF-8 字符串。
- en: '**round(*X*)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**round(*X*)**'
- en: round(*X*,*Y*)**
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: round(*X*,*Y*)**
- en: The round(X,Y) function returns a floating-point value X rounded to Y digits
    to the right of the decimal point. If the Y argument is omitted or negative, it
    is taken to be 0.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `round(X,Y)` 返回将 X 四舍五入到小数点右侧 Y 位的浮点值。如果省略或为负的 Y 参数，则被视为 0。
- en: '**rtrim(*X*)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**rtrim(*X*)**'
- en: rtrim(*X*,*Y*)**
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: rtrim(*X*,*Y*)**
- en: The rtrim(X,Y) function returns a string formed by removing any and all characters
    that appear in Y from the right side of X. If the Y argument is omitted, rtrim(X)
    removes spaces from the right side of X.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `rtrim(X,Y)` 返回一个字符串，通过从 X 的右侧移除在 Y 中出现的任何字符形成。如果省略 Y 参数，则 rtrim(X) 从 X 的右侧移除空格。
- en: '**sign(*X*)**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**sign(*X*)**'
- en: The sign(X) function returns -1, 0, or +1 if the argument X is a numeric value
    that is negative, zero, or positive, respectively. If the argument to sign(X)
    is NULL or is a string or blob that cannot be losslessly converted into a number,
    then sign(X) returns NULL.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `sign(X)` 如果参数 X 是负数则返回 -1，零则返回 0，正数则返回 +1。如果给 sign(X) 的参数为 NULL 或者是无法无损转换为数字的字符串或
    blob，则 sign(X) 返回 NULL。
- en: '**soundex(*X*)**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**soundex(*X*)**'
- en: The soundex(X) function returns a string that is the soundex encoding of the
    string X. The string "?000" is returned if the argument is NULL or contains no
    ASCII alphabetic characters. This function is omitted from SQLite by default.
    It is only available if the [SQLITE_SOUNDEX](compile.html#soundex) compile-time
    option is used when SQLite is built.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `soundex(X)` 返回字符串 X 的 soundex 编码的字符串。如果参数为 NULL 或不包含 ASCII 字母字符，则返回字符串 "?000"。默认情况下
    SQLite 不包括此函数。只有在构建 SQLite 时使用了 [SQLITE_SOUNDEX](compile.html#soundex) 编译选项时，此函数才可用。
- en: '**sqlite_compileoption_get(*N*)**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite_compileoption_get(*N*)**'
- en: The sqlite_compileoption_get() SQL function is a wrapper around the [sqlite3_compileoption_get()](c3ref/compileoption_get.html)
    C/C++ function. This routine returns the N-th compile-time option used to build
    SQLite or NULL if N is out of range. See also the [compile_options pragma](pragma.html#pragma_compile_options).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 函数 `sqlite_compileoption_get()` 是 [sqlite3_compileoption_get()](c3ref/compileoption_get.html)
    C/C++ 函数的包装器。此例程返回用于构建 SQLite 的第 N 个编译时选项，如果 N 超出范围则返回 NULL。另请参阅 [compile_options
    pragma](pragma.html#pragma_compile_options)。
- en: '**sqlite_compileoption_used(*X*)**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite_compileoption_used(*X*)**'
- en: The sqlite_compileoption_used() SQL function is a wrapper around the [sqlite3_compileoption_used()](c3ref/compileoption_get.html)
    C/C++ function. When the argument X to sqlite_compileoption_used(X) is a string
    which is the name of a compile-time option, this routine returns true (1) or false
    (0) depending on whether or not that option was used during the build.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite_compileoption_used() SQL 函数是 [sqlite3_compileoption_used()](c3ref/compileoption_get.html)
    C/C++ 函数的封装。当参数 X 是编译时选项的名称的字符串时，此例程根据是否在构建过程中使用该选项返回 true（1）或 false（0）。
- en: '**sqlite_offset(*X*)**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite_offset(*X*)**'
- en: The sqlite_offset(X) function returns the byte offset in the database file for
    the beginning of the record from which value would be read. If X is not a column
    in an ordinary table, then sqlite_offset(X) returns NULL. The value returned by
    sqlite_offset(X) might reference either the original table or an index, depending
    on the query. If the value X would normally be extracted from an index, the sqlite_offset(X)
    returns the offset to the corresponding index record. If the value X would be
    extracted from the original table, then sqlite_offset(X) returns the offset to
    the table record.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite_offset(X) 函数返回从数据库文件中读取值的记录开始处的字节偏移量。如果 X 不是普通表中的列，则 sqlite_offset(X)
    返回 NULL。sqlite_offset(X) 返回的值可能引用原始表或索引，具体取决于查询。如果值 X 通常从索引中提取，则 sqlite_offset(X)
    返回相应索引记录的偏移量。如果值 X 应从原始表中提取，则 sqlite_offset(X) 返回表记录的偏移量。
- en: The sqlite_offset(X) SQL function is only available if SQLite is built using
    the [-DSQLITE_ENABLE_OFFSET_SQL_FUNC](compile.html#enable_offset_sql_func) compile-time
    option.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 SQLite 使用了 [-DSQLITE_ENABLE_OFFSET_SQL_FUNC](compile.html#enable_offset_sql_func)
    编译时选项，则 sqlite_offset(X) SQL 函数可用。
- en: '**sqlite_source_id()**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite_source_id()**'
- en: The sqlite_source_id() function returns a string that identifies the specific
    version of the source code that was used to build the SQLite library. The string
    returned by sqlite_source_id() is the date and time that the source code was checked
    in followed by the SHA3-256 hash for that check-in. This function is an SQL wrapper
    around the [sqlite3_sourceid()](c3ref/libversion.html) C interface.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite_source_id() 函数返回一个字符串，用于标识用于构建 SQLite 库的特定版本的源代码。sqlite_source_id() 返回的字符串是源代码被检入的日期和时间，后跟该检入的
    SHA3-256 哈希值。此函数是 [sqlite3_sourceid()](c3ref/libversion.html) C 接口的 SQL 封装。
- en: '**sqlite_version()**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**sqlite_version()**'
- en: The sqlite_version() function returns the version string for the SQLite library
    that is running. This function is an SQL wrapper around the [sqlite3_libversion()](c3ref/libversion.html)
    C-interface.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite_version() 函数返回正在运行的 SQLite 库的版本字符串。此函数是 [sqlite3_libversion()](c3ref/libversion.html)
    C 接口的 SQL 封装。
- en: '**substr(*X*,*Y*,*Z*)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**substr(*X*,*Y*,*Z*)**'
- en: substr(*X*,*Y*)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: substr(*X*,*Y*)
- en: substring(*X*,*Y*,*Z*)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: substring(*X*,*Y*,*Z*)
- en: substring(*X*,*Y*)**
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: substring(*X*,*Y*)**
- en: The substr(X,Y,Z) function returns a substring of input string X that begins
    with the Y-th character and which is Z characters long. If Z is omitted then substr(X,Y)
    returns all characters through the end of the string X beginning with the Y-th.
    The left-most character of X is number 1\. If Y is negative then the first character
    of the substring is found by counting from the right rather than the left. If
    Z is negative then the abs(Z) characters preceding the Y-th character are returned.
    If X is a string then characters indices refer to actual UTF-8 characters. If
    X is a BLOB then the indices refer to bytes.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: substr(X,Y,Z) 函数返回输入字符串 X 的子串，从第 Y 个字符开始，长度为 Z 个字符。如果省略 Z，则 substr(X,Y) 返回从第
    Y 个字符开始到字符串 X 结尾的所有字符。X 最左边的字符为编号 1。如果 Y 为负数，则子串的第一个字符从右边开始计数而不是从左边开始。如果 Z 为负数，则返回前
    abs(Z) 个字符，这些字符位于第 Y 个字符之前。如果 X 是字符串，则字符索引引用实际的 UTF-8 字符。如果 X 是 BLOB，则索引引用字节。
- en: '"substring()" is an alias for "substr()" beginning with SQLite version 3.34.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '"substring()" 是从 SQLite 版本 3.34 开始的 "substr()" 的别名。'
- en: '**total_changes()**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**total_changes()**'
- en: The total_changes() function returns the number of row changes caused by INSERT,
    UPDATE or DELETE statements since the current database connection was opened.
    This function is a wrapper around the [sqlite3_total_changes64()](c3ref/total_changes.html)
    C/C++ interface.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: total_changes() 函数返回自打开当前数据库连接以来由 INSERT、UPDATE 或 DELETE 语句引起的行更改次数。此函数是 [sqlite3_total_changes64()](c3ref/total_changes.html)
    C/C++ 接口的封装。
- en: '**trim(*X*)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**trim(*X*)**'
- en: trim(*X*,*Y*)**
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: trim(*X*,*Y*)**
- en: The trim(X,Y) function returns a string formed by removing any and all characters
    that appear in Y from both ends of X. If the Y argument is omitted, trim(X) removes
    spaces from both ends of X.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: trim(X,Y) 函数返回一个字符串，通过从 X 的两端删除 Y 中出现的所有字符形成。如果省略 Y 参数，则 trim(X) 从 X 的两端删除空格。
- en: '**typeof(*X*)**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**typeof(*X*)**'
- en: 'The typeof(X) function returns a string that indicates the [datatype](datatype3.html)
    of the expression X: "null", "integer", "real", "text", or "blob".'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: typeof(X) 函数返回一个字符串，指示表达式 X 的[数据类型](datatype3.html)："null"、"integer"、"real"、"text"
    或 "blob"。
- en: '**unhex(*X*)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**unhex(*X*)**'
- en: unhex(*X*,*Y*)**
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**unhex(*X*,*Y*)**'
- en: The unhex(X,Y) function returns a BLOB value which is the decoding of the hexadecimal
    string X. If X contains any characters that are not hexadecimal digits and which
    are not in Y, then unhex(X,Y) returns NULL. If Y is omitted, it is understood
    to be an empty string and hence X must be a pure hexadecimal string. All hexadecimal
    digits in X must occur in pairs, with both digits of each pair beginning immediately
    adjacent to one another, or else unhex(X,Y) returns NULL. If either parameter
    X or Y is NULL, then unhex(X,Y) returns NULL. The X input may contain an arbitrary
    mix of upper and lower case hexadecimal digits. Hexadecimal digits in Y have no
    affect on the translation of X. Only characters in Y that are not hexadecimal
    digits are ignored in X.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: unhex(X,Y) 函数返回一个 BLOB 值，它是十六进制字符串 X 的解码。如果 X 包含任何非十六进制数字且不在 Y 中，则 unhex(X,Y)
    返回 NULL。如果省略 Y，则理解为空字符串，因此 X 必须是一个纯十六进制字符串。X 中的所有十六进制数字必须成对出现，每对的两个数字紧邻相邻，否则 unhex(X,Y)
    返回 NULL。如果参数 X 或 Y 是 NULL，则 unhex(X,Y) 返回 NULL。输入 X 可以包含任意混合大小写的十六进制数字。Y 中的十六进制数字对
    X 的翻译没有影响。Y 中不是十六进制数字的字符在 X 中被忽略。
- en: 'See also: [hex()](lang_corefunc.html#hex)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 参见：[hex()](lang_corefunc.html#hex)
- en: '**unicode(*X*)**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**unicode(*X*)**'
- en: The unicode(X) function returns the numeric unicode code point corresponding
    to the first character of the string X. If the argument to unicode(X) is not a
    string then the result is undefined.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: unicode(X) 函数返回与字符串 X 的第一个字符对应的数值 unicode 代码点。如果 unicode(X) 的参数不是字符串，则结果是未定义的。
- en: '**unlikely(*X*)**'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**unlikely(*X*)**'
- en: The unlikely(X) function returns the argument X unchanged. The unlikely(X) function
    is a no-op that the code generator optimizes away so that it consumes no CPU cycles
    at run-time (that is, during calls to [sqlite3_step()](c3ref/step.html)). The
    purpose of the unlikely(X) function is to provide a hint to the query planner
    that the argument X is a boolean value that is usually not true. The unlikely(X)
    function is equivalent to [likelihood](lang_corefunc.html#likelihood)(X, 0.0625).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: unlikely(X) 函数返回参数 X 本身。unlikely(X) 函数是一个无操作函数，在代码生成器中进行优化，以便在运行时不消耗 CPU 周期（即在调用[sqlite3_step()](c3ref/step.html)时）。unlikely(X)
    函数的目的是向查询规划器提供一个提示，表明参数 X 是一个通常为假的布尔值。unlikely(X) 函数等效于[likelihood](lang_corefunc.html#likelihood)(X,
    0.0625)。
- en: '**upper(*X*)**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**upper(*X*)**'
- en: The upper(X) function returns a copy of input string X in which all lower-case
    ASCII characters are converted to their upper-case equivalent.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: upper(X) 函数返回输入字符串 X 的副本，其中所有小写 ASCII 字符转换为它们的大写等效字符。
- en: '**zeroblob(*N*)**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**zeroblob(*N*)**'
- en: The zeroblob(N) function returns a BLOB consisting of N bytes of 0x00. SQLite
    manages these zeroblobs very efficiently. Zeroblobs can be used to reserve space
    for a BLOB that is later written using [incremental BLOB I/O](c3ref/blob_open.html).
    This SQL function is implemented using the [sqlite3_result_zeroblob()](c3ref/result_blob.html)
    routine from the C/C++ interface.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: zeroblob(N) 函数返回一个由 N 字节 0x00 组成的 BLOB。SQLite 非常有效地管理这些 zeroblob。Zeroblob 可用于预留一个
    BLOB 的空间，稍后使用[增量 BLOB I/O](c3ref/blob_open.html)进行写入。这个 SQL 函数是使用 C/C++ 接口中的[sqlite3_result_zeroblob()](c3ref/result_blob.html)例程实现的。
