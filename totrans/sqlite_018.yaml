- en: 1\. Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://sqlite.com/lang_corefunc.html](https://sqlite.com/lang_corefunc.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The core functions shown below are available by default. [Date & Time functions](lang_datefunc.html),
    [aggregate functions](lang_aggfunc.html), [window functions](windowfunctions.html),
    [math functions](lang_mathfunc.html), and [JSON functions](json1.html) are documented
    separately. An application may define additional functions written in C and added
    to the database engine using the [sqlite3_create_function()](c3ref/create_function.html)
    API.
  prefs: []
  type: TYPE_NORMAL
- en: '**[simple-function-invocation:](syntax/simple-function-invocation.html)**'
  prefs: []
  type: TYPE_NORMAL
- en: <svg class="pikchr" viewBox="0 0 414.49 126.792"><text x="86" y="55" text-anchor="middle"
    fill="rgb(0,0,0)" dominant-baseline="central">simple-func</text> <text x="179"
    y="55" text-anchor="middle" font-weight="bold" fill="rgb(0,0,0)" dominant-baseline="central">(</text>
    <text x="273" y="55" text-anchor="middle" fill="rgb(0,0,0)" dominant-baseline="central">expr</text>
    <text x="366" y="55" text-anchor="middle" font-weight="bold" fill="rgb(0,0,0)"
    dominant-baseline="central">)</text> <text x="273" y="17" text-anchor="middle"
    font-weight="bold" fill="rgb(0,0,0)" dominant-baseline="central">,</text> <text
    x="273" y="109" text-anchor="middle" font-weight="bold" fill="rgb(0,0,0)" dominant-baseline="central">*</text></svg>
  prefs: []
  type: TYPE_NORMAL
- en: See the [functions within expressions](lang_expr.html#*funcinexpr) documentation
    for more information about how SQL function invocations fit into the context of
    an SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. List Of Core Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[abs(X)](lang_corefunc.html#abs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[changes()](lang_corefunc.html#changes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[char(X1,X2,...,XN)](lang_corefunc.html#char)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[coalesce(X,Y,...)](lang_corefunc.html#coalesce)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[concat(X,...)](lang_corefunc.html#concat)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[concat_ws(SEP,X,...)](lang_corefunc.html#concat_ws)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[format(FORMAT,...)](lang_corefunc.html#format)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[glob(X,Y)](lang_corefunc.html#glob)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[hex(X)](lang_corefunc.html#hex)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ifnull(X,Y)](lang_corefunc.html#ifnull)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[iif(X,Y,Z)](lang_corefunc.html#iif)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[instr(X,Y)](lang_corefunc.html#instr)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[last_insert_rowid()](lang_corefunc.html#last_insert_rowid)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[length(X)](lang_corefunc.html#length)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[like(X,Y)](lang_corefunc.html#like)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[like(X,Y,Z)](lang_corefunc.html#like)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[likelihood(X,Y)](lang_corefunc.html#likelihood)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[likely(X)](lang_corefunc.html#likely)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[load_extension(X)](lang_corefunc.html#load_extension)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[load_extension(X,Y)](lang_corefunc.html#load_extension)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[lower(X)](lang_corefunc.html#lower)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ltrim(X)](lang_corefunc.html#ltrim)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ltrim(X,Y)](lang_corefunc.html#ltrim)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[max(X,Y,...)](lang_corefunc.html#max_scalar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[min(X,Y,...)](lang_corefunc.html#min_scalar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[nullif(X,Y)](lang_corefunc.html#nullif)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[octet_length(X)](lang_corefunc.html#octet_length)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[printf(FORMAT,...)](lang_corefunc.html#printf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[quote(X)](lang_corefunc.html#quote)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[random()](lang_corefunc.html#random)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[randomblob(N)](lang_corefunc.html#randomblob)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[replace(X,Y,Z)](lang_corefunc.html#replace)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[round(X)](lang_corefunc.html#round)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[round(X,Y)](lang_corefunc.html#round)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[rtrim(X)](lang_corefunc.html#rtrim)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[rtrim(X,Y)](lang_corefunc.html#rtrim)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[sign(X)](lang_corefunc.html#sign)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[soundex(X)](lang_corefunc.html#soundex)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[sqlite_compileoption_get(N)](lang_corefunc.html#sqlite_compileoption_get)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[sqlite_compileoption_used(X)](lang_corefunc.html#sqlite_compileoption_used)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[sqlite_offset(X)](lang_corefunc.html#sqlite_offset)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[sqlite_source_id()](lang_corefunc.html#sqlite_source_id)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[sqlite_version()](lang_corefunc.html#sqlite_version)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[substr(X,Y)](lang_corefunc.html#substr)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[substr(X,Y,Z)](lang_corefunc.html#substr)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[substring(X,Y)](lang_corefunc.html#substr)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[substring(X,Y,Z)](lang_corefunc.html#substr)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[total_changes()](lang_corefunc.html#total_changes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[trim(X)](lang_corefunc.html#trim)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[trim(X,Y)](lang_corefunc.html#trim)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[typeof(X)](lang_corefunc.html#typeof)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[unhex(X)](lang_corefunc.html#unhex)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[unhex(X,Y)](lang_corefunc.html#unhex)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[unicode(X)](lang_corefunc.html#unicode)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[unlikely(X)](lang_corefunc.html#unlikely)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[upper(X)](lang_corefunc.html#upper)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[zeroblob(N)](lang_corefunc.html#zeroblob)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3\. Descriptions of built-in scalar SQL functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**abs(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The abs(X) function returns the absolute value of the numeric argument X. Abs(X)
    returns NULL if X is NULL. Abs(X) returns 0.0 if X is a string or blob that cannot
    be converted to a numeric value. If X is the integer -9223372036854775808 then
    abs(X) throws an integer overflow error since there is no equivalent positive
    64-bit two complement value.
  prefs: []
  type: TYPE_NORMAL
- en: '**changes()**'
  prefs: []
  type: TYPE_NORMAL
- en: The changes() function returns the number of database rows that were changed
    or inserted or deleted by the most recently completed INSERT, DELETE, or UPDATE
    statement, exclusive of statements in lower-level triggers. The changes() SQL
    function is a wrapper around the [sqlite3_changes64()](c3ref/changes.html) C/C++
    function and hence follows the same rules for counting changes.
  prefs: []
  type: TYPE_NORMAL
- en: '**char(*X1*,*X2*,...,*XN*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The char(X1,X2,...,XN) function returns a string composed of characters having
    the unicode code point values of integers X1 through XN, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**coalesce(*X*,*Y*,...)**'
  prefs: []
  type: TYPE_NORMAL
- en: The coalesce() function returns a copy of its first non-NULL argument, or NULL
    if all arguments are NULL. Coalesce() must have at least 2 arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '**concat(*X*,...)**'
  prefs: []
  type: TYPE_NORMAL
- en: The concat(...) function returns a string which is the concatenation of the
    string representation of all of its non-NULL arguments. If all arguments are NULL,
    then concat() returns an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: '**concat_ws(*SEP*,*X*,...)**'
  prefs: []
  type: TYPE_NORMAL
- en: The concat_ws(SEP,...) function returns a string that is the concatenation of
    all non-null arguments beyond the first argument, using the text value of the
    first argument as a separator. If the first argument is NULL, then concat_ws()
    returns NULL. If all arguments other than the first are NULL, then concat_ws()
    returns an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: '**format(*FORMAT*,...)**'
  prefs: []
  type: TYPE_NORMAL
- en: The format(FORMAT,...) SQL function works like the [sqlite3_mprintf()](c3ref/mprintf.html)
    C-language function and the printf() function from the standard C library. The
    first argument is a format string that specifies how to construct the output string
    using values taken from subsequent arguments. If the FORMAT argument is missing
    or NULL then the result is NULL. The %n format is silently ignored and does not
    consume an argument. The %p format is an alias for %X. The %z format is interchangeable
    with %s. If there are too few arguments in the argument list, missing arguments
    are assumed to have a NULL value, which is translated into 0 or 0.0 for numeric
    formats or an empty string for %s. See the [built-in printf()](printf.html) documentation
    for additional information.
  prefs: []
  type: TYPE_NORMAL
- en: '**glob(*X*,*Y*)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The glob(X,Y) function is equivalent to the expression "**Y GLOB X**". Note
    that the X and Y arguments are reversed in the glob() function relative to the
    infix [GLOB](lang_expr.html#glob) operator. Y is the string and X is the pattern.
    So, for example, the following expressions are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: If the [sqlite3_create_function()](c3ref/create_function.html) interface is
    used to override the glob(X,Y) function with an alternative implementation then
    the [GLOB](lang_expr.html#glob) operator will invoke the alternative implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '**hex(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The hex() function interprets its argument as a BLOB and returns a string which
    is the upper-case hexadecimal rendering of the content of that blob.
  prefs: []
  type: TYPE_NORMAL
- en: If the argument *X* in "hex(*X*)" is an integer or floating point number, then
    "interprets its argument as a BLOB" means that the binary number is first converted
    into a UTF8 text representation, then that text is interpreted as a BLOB. Hence,
    "hex(12345678)" renders as "3132333435363738" not the binary representation of
    the integer value "0000000000BC614E".
  prefs: []
  type: TYPE_NORMAL
- en: 'See also: [unhex()](lang_corefunc.html#unhex)'
  prefs: []
  type: TYPE_NORMAL
- en: '**ifnull(*X*,*Y*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The ifnull() function returns a copy of its first non-NULL argument, or NULL
    if both arguments are NULL. Ifnull() must have exactly 2 arguments. The ifnull()
    function is equivalent to [coalesce()](lang_corefunc.html#coalesce) with two arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '**iif(*X*,*Y*,*Z*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The iif(X,Y,Z) function returns the value Y if X is true, and Z otherwise. The
    iif(X,Y,Z) function is logically equivalent to and generates the same [bytecode](opcode.html)
    as the [CASE expression](lang_expr.html#case) "CASE WHEN X THEN Y ELSE Z END".
  prefs: []
  type: TYPE_NORMAL
- en: '**instr(*X*,*Y*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The instr(X,Y) function finds the first occurrence of string Y within string
    X and returns the number of prior characters plus 1, or 0 if Y is nowhere found
    within X. Or, if X and Y are both BLOBs, then instr(X,Y) returns one more than
    the number bytes prior to the first occurrence of Y, or 0 if Y does not occur
    anywhere within X. If both arguments X and Y to instr(X,Y) are non-NULL and are
    not BLOBs then both are interpreted as strings. If either X or Y are NULL in instr(X,Y)
    then the result is NULL.
  prefs: []
  type: TYPE_NORMAL
- en: '**last_insert_rowid()**'
  prefs: []
  type: TYPE_NORMAL
- en: The last_insert_rowid() function returns the [ROWID](lang_createtable.html#rowid)
    of the last row insert from the database connection which invoked the function.
    The last_insert_rowid() SQL function is a wrapper around the [sqlite3_last_insert_rowid()](c3ref/last_insert_rowid.html)
    C/C++ interface function.
  prefs: []
  type: TYPE_NORMAL
- en: '**length(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: For a string value X, the length(X) function returns the number of characters
    (not bytes) in X prior to the first NUL character. Since SQLite strings do not
    normally contain NUL characters, the length(X) function will usually return the
    total number of characters in the string X. For a blob value X, length(X) returns
    the number of bytes in the blob. If X is NULL then length(X) is NULL. If X is
    numeric then length(X) returns the length of a string representation of X.
  prefs: []
  type: TYPE_NORMAL
- en: Note that for strings, the length(X) function returns the *character* length
    of the string, not the byte length. The character length is the number of characters
    in the string. The character length is always different from the byte length for
    UTF-16 strings, and can be different from the byte length for UTF-8 strings if
    the string contains multi-byte characters. Use the [octet_length()](lang_corefunc.html#octet_length)
    function to find the byte length of a string.
  prefs: []
  type: TYPE_NORMAL
- en: For BLOB values, length(X) always returns the byte-length of the BLOB.
  prefs: []
  type: TYPE_NORMAL
- en: For string values, length(X) must read the entire string into memory in order
    to compute the character length. But for BLOB values, that is not necessary as
    SQLite knows how many bytes are in the BLOB. Hence, for multi-megabyte values,
    the length(X) function is usually much faster for BLOBs than for strings, since
    it does not need to load the value into memory.
  prefs: []
  type: TYPE_NORMAL
- en: '**like(*X*,*Y*)'
  prefs: []
  type: TYPE_NORMAL
- en: like(*X*,*Y*,*Z*)**
  prefs: []
  type: TYPE_NORMAL
- en: 'The like() function is used to implement the "**Y LIKE X [ESCAPE Z]**" expression.
    If the optional ESCAPE clause is present, then the like() function is invoked
    with three arguments. Otherwise, it is invoked with two arguments only. Note that
    the X and Y parameters are reversed in the like() function relative to the infix
    [LIKE](lang_expr.html#like) operator. X is the pattern and Y is the string to
    match against that pattern. Hence, the following expressions are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: The [sqlite3_create_function()](c3ref/create_function.html) interface can be
    used to override the like() function and thereby change the operation of the [LIKE](lang_expr.html#like)
    operator. When overriding the like() function, it may be important to override
    both the two and three argument versions of the like() function. Otherwise, different
    code may be called to implement the [LIKE](lang_expr.html#like) operator depending
    on whether or not an ESCAPE clause was specified.
  prefs: []
  type: TYPE_NORMAL
- en: '**likelihood(*X*,*Y*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The likelihood(X,Y) function returns argument X unchanged. The value Y in likelihood(X,Y)
    must be a floating point constant between 0.0 and 1.0, inclusive. The likelihood(X)
    function is a no-op that the code generator optimizes away so that it consumes
    no CPU cycles during run-time (that is, during calls to [sqlite3_step()](c3ref/step.html)).
    The purpose of the likelihood(X,Y) function is to provide a hint to the query
    planner that the argument X is a boolean that is true with a probability of approximately
    Y. The [unlikely(X)](lang_corefunc.html#unlikely) function is short-hand for likelihood(X,0.0625).
    The [likely(X)](lang_corefunc.html#likely) function is short-hand for likelihood(X,0.9375).
  prefs: []
  type: TYPE_NORMAL
- en: '**likely(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The likely(X) function returns the argument X unchanged. The likely(X) function
    is a no-op that the code generator optimizes away so that it consumes no CPU cycles
    at run-time (that is, during calls to [sqlite3_step()](c3ref/step.html)). The
    purpose of the likely(X) function is to provide a hint to the query planner that
    the argument X is a boolean value that is usually true. The likely(X) function
    is equivalent to [likelihood](lang_corefunc.html#likelihood)(X,0.9375). See also:
    [unlikely(X)](lang_corefunc.html#unlikely).'
  prefs: []
  type: TYPE_NORMAL
- en: '**load_extension(*X*)'
  prefs: []
  type: TYPE_NORMAL
- en: load_extension(*X*,*Y*)**
  prefs: []
  type: TYPE_NORMAL
- en: The load_extension(X,Y) function loads [SQLite extensions](loadext.html) out
    of the shared library file named X using the entry point Y. The result of load_extension()
    is always a NULL. If Y is omitted then the default entry point name is used. The
    load_extension() function raises an exception if the extension fails to load or
    initialize correctly.
  prefs: []
  type: TYPE_NORMAL
- en: The load_extension() function will fail if the extension attempts to modify
    or delete an SQL function or collating sequence. The extension can add new functions
    or collating sequences, but cannot modify or delete existing functions or collating
    sequences because those functions and/or collating sequences might be used elsewhere
    in the currently running SQL statement. To load an extension that changes or deletes
    functions or collating sequences, use the [sqlite3_load_extension()](c3ref/load_extension.html)
    C-language API.
  prefs: []
  type: TYPE_NORMAL
- en: For security reasons, extension loading is disabled by default and must be enabled
    by a prior call to [sqlite3_enable_load_extension()](c3ref/enable_load_extension.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**lower(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The lower(X) function returns a copy of string X with all ASCII characters converted
    to lower case. The default built-in lower() function works for ASCII characters
    only. To do case conversions on non-ASCII characters, load the ICU extension.
  prefs: []
  type: TYPE_NORMAL
- en: '**ltrim(*X*)'
  prefs: []
  type: TYPE_NORMAL
- en: ltrim(*X*,*Y*)**
  prefs: []
  type: TYPE_NORMAL
- en: The ltrim(X,Y) function returns a string formed by removing any and all characters
    that appear in Y from the left side of X. If the Y argument is omitted, ltrim(X)
    removes spaces from the left side of X.
  prefs: []
  type: TYPE_NORMAL
- en: '**max(*X*,*Y*,...)**'
  prefs: []
  type: TYPE_NORMAL
- en: The multi-argument max() function returns the argument with the maximum value,
    or return NULL if any argument is NULL. The multi-argument max() function searches
    its arguments from left to right for an argument that defines a collating function
    and uses that collating function for all string comparisons. If none of the arguments
    to max() define a collating function, then the BINARY collating function is used.
    Note that **max()** is a simple function when it has 2 or more arguments but operates
    as an [aggregate function](lang_aggfunc.html#max_agg) if given only a single argument.
  prefs: []
  type: TYPE_NORMAL
- en: '**min(*X*,*Y*,...)**'
  prefs: []
  type: TYPE_NORMAL
- en: The multi-argument min() function returns the argument with the minimum value.
    The multi-argument min() function searches its arguments from left to right for
    an argument that defines a collating function and uses that collating function
    for all string comparisons. If none of the arguments to min() define a collating
    function, then the BINARY collating function is used. Note that **min()** is a
    simple function when it has 2 or more arguments but operates as an [aggregate
    function](lang_aggfunc.html#min_agg) if given only a single argument.
  prefs: []
  type: TYPE_NORMAL
- en: '**nullif(*X*,*Y*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The nullif(X,Y) function returns its first argument if the arguments are different
    and NULL if the arguments are the same. The nullif(X,Y) function searches its
    arguments from left to right for an argument that defines a collating function
    and uses that collating function for all string comparisons. If neither argument
    to nullif() defines a collating function then the BINARY collating function is
    used.
  prefs: []
  type: TYPE_NORMAL
- en: '**octet_length(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The octet_length(X) function returns the number of bytes in the encoding of
    text string X. If X is NULL then octet_length(X) returns NULL. If X is a BLOB
    value, then octet_length(X) is the same as [length(X)](lang_corefunc.html#length).
    If X is a numeric value, then octet_length(X) returns the number of bytes in a
    text rendering of that number.
  prefs: []
  type: TYPE_NORMAL
- en: Because octet_length(X) returns the number of bytes in X, not the number of
    characters, the value returned depends on the database encoding. The octet_length()
    function can return different answers for the same input string if the database
    encoding is UTF16 instead of UTF8.
  prefs: []
  type: TYPE_NORMAL
- en: If argument X is a table column and the value is of type text or blob, then
    octet_length(X) avoids reading the content of X from disk, as the byte length
    can be computed from metadata. Thus, octet_length(X) is efficient even if X is
    a column containing a multi-megabyte text or blob value.
  prefs: []
  type: TYPE_NORMAL
- en: '**printf(*FORMAT*,...)**'
  prefs: []
  type: TYPE_NORMAL
- en: The printf() SQL function is an alias for the [format() SQL function](lang_corefunc.html#format).
    The format() SQL function was originally named printf(). But the name was later
    changed to format() for compatibility with other database engines. The printf()
    name is retained as an alias so as not to break legacy code.
  prefs: []
  type: TYPE_NORMAL
- en: '**quote(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The quote(X) function returns the text of an SQL literal which is the value
    of its argument suitable for inclusion into an SQL statement. Strings are surrounded
    by single-quotes with escapes on interior quotes as needed. BLOBs are encoded
    as hexadecimal literals. Strings with embedded NUL characters cannot be represented
    as string literals in SQL and hence the returned string literal is truncated prior
    to the first NUL.
  prefs: []
  type: TYPE_NORMAL
- en: '**random()**'
  prefs: []
  type: TYPE_NORMAL
- en: The random() function returns a pseudo-random integer between -9223372036854775808
    and +9223372036854775807.
  prefs: []
  type: TYPE_NORMAL
- en: '**randomblob(*N*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The randomblob(N) function return an N-byte blob containing pseudo-random bytes.
    If N is less than 1 then a 1-byte random blob is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: applications can generate globally unique identifiers using this function
    together with [hex()](lang_corefunc.html#hex) and/or [lower()](lang_corefunc.html#lower)
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: hex(randomblob(16))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: lower(hex(randomblob(16)))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**replace(*X*,*Y*,*Z*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The replace(X,Y,Z) function returns a string formed by substituting string Z
    for every occurrence of string Y in string X. The [BINARY](datatype3.html#collation)
    collating sequence is used for comparisons. If Y is an empty string then return
    X unchanged. If Z is not initially a string, it is cast to a UTF-8 string prior
    to processing.
  prefs: []
  type: TYPE_NORMAL
- en: '**round(*X*)'
  prefs: []
  type: TYPE_NORMAL
- en: round(*X*,*Y*)**
  prefs: []
  type: TYPE_NORMAL
- en: The round(X,Y) function returns a floating-point value X rounded to Y digits
    to the right of the decimal point. If the Y argument is omitted or negative, it
    is taken to be 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**rtrim(*X*)'
  prefs: []
  type: TYPE_NORMAL
- en: rtrim(*X*,*Y*)**
  prefs: []
  type: TYPE_NORMAL
- en: The rtrim(X,Y) function returns a string formed by removing any and all characters
    that appear in Y from the right side of X. If the Y argument is omitted, rtrim(X)
    removes spaces from the right side of X.
  prefs: []
  type: TYPE_NORMAL
- en: '**sign(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The sign(X) function returns -1, 0, or +1 if the argument X is a numeric value
    that is negative, zero, or positive, respectively. If the argument to sign(X)
    is NULL or is a string or blob that cannot be losslessly converted into a number,
    then sign(X) returns NULL.
  prefs: []
  type: TYPE_NORMAL
- en: '**soundex(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The soundex(X) function returns a string that is the soundex encoding of the
    string X. The string "?000" is returned if the argument is NULL or contains no
    ASCII alphabetic characters. This function is omitted from SQLite by default.
    It is only available if the [SQLITE_SOUNDEX](compile.html#soundex) compile-time
    option is used when SQLite is built.
  prefs: []
  type: TYPE_NORMAL
- en: '**sqlite_compileoption_get(*N*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The sqlite_compileoption_get() SQL function is a wrapper around the [sqlite3_compileoption_get()](c3ref/compileoption_get.html)
    C/C++ function. This routine returns the N-th compile-time option used to build
    SQLite or NULL if N is out of range. See also the [compile_options pragma](pragma.html#pragma_compile_options).
  prefs: []
  type: TYPE_NORMAL
- en: '**sqlite_compileoption_used(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The sqlite_compileoption_used() SQL function is a wrapper around the [sqlite3_compileoption_used()](c3ref/compileoption_get.html)
    C/C++ function. When the argument X to sqlite_compileoption_used(X) is a string
    which is the name of a compile-time option, this routine returns true (1) or false
    (0) depending on whether or not that option was used during the build.
  prefs: []
  type: TYPE_NORMAL
- en: '**sqlite_offset(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The sqlite_offset(X) function returns the byte offset in the database file for
    the beginning of the record from which value would be read. If X is not a column
    in an ordinary table, then sqlite_offset(X) returns NULL. The value returned by
    sqlite_offset(X) might reference either the original table or an index, depending
    on the query. If the value X would normally be extracted from an index, the sqlite_offset(X)
    returns the offset to the corresponding index record. If the value X would be
    extracted from the original table, then sqlite_offset(X) returns the offset to
    the table record.
  prefs: []
  type: TYPE_NORMAL
- en: The sqlite_offset(X) SQL function is only available if SQLite is built using
    the [-DSQLITE_ENABLE_OFFSET_SQL_FUNC](compile.html#enable_offset_sql_func) compile-time
    option.
  prefs: []
  type: TYPE_NORMAL
- en: '**sqlite_source_id()**'
  prefs: []
  type: TYPE_NORMAL
- en: The sqlite_source_id() function returns a string that identifies the specific
    version of the source code that was used to build the SQLite library. The string
    returned by sqlite_source_id() is the date and time that the source code was checked
    in followed by the SHA3-256 hash for that check-in. This function is an SQL wrapper
    around the [sqlite3_sourceid()](c3ref/libversion.html) C interface.
  prefs: []
  type: TYPE_NORMAL
- en: '**sqlite_version()**'
  prefs: []
  type: TYPE_NORMAL
- en: The sqlite_version() function returns the version string for the SQLite library
    that is running. This function is an SQL wrapper around the [sqlite3_libversion()](c3ref/libversion.html)
    C-interface.
  prefs: []
  type: TYPE_NORMAL
- en: '**substr(*X*,*Y*,*Z*)'
  prefs: []
  type: TYPE_NORMAL
- en: substr(*X*,*Y*)
  prefs: []
  type: TYPE_NORMAL
- en: substring(*X*,*Y*,*Z*)
  prefs: []
  type: TYPE_NORMAL
- en: substring(*X*,*Y*)**
  prefs: []
  type: TYPE_NORMAL
- en: The substr(X,Y,Z) function returns a substring of input string X that begins
    with the Y-th character and which is Z characters long. If Z is omitted then substr(X,Y)
    returns all characters through the end of the string X beginning with the Y-th.
    The left-most character of X is number 1\. If Y is negative then the first character
    of the substring is found by counting from the right rather than the left. If
    Z is negative then the abs(Z) characters preceding the Y-th character are returned.
    If X is a string then characters indices refer to actual UTF-8 characters. If
    X is a BLOB then the indices refer to bytes.
  prefs: []
  type: TYPE_NORMAL
- en: '"substring()" is an alias for "substr()" beginning with SQLite version 3.34.'
  prefs: []
  type: TYPE_NORMAL
- en: '**total_changes()**'
  prefs: []
  type: TYPE_NORMAL
- en: The total_changes() function returns the number of row changes caused by INSERT,
    UPDATE or DELETE statements since the current database connection was opened.
    This function is a wrapper around the [sqlite3_total_changes64()](c3ref/total_changes.html)
    C/C++ interface.
  prefs: []
  type: TYPE_NORMAL
- en: '**trim(*X*)'
  prefs: []
  type: TYPE_NORMAL
- en: trim(*X*,*Y*)**
  prefs: []
  type: TYPE_NORMAL
- en: The trim(X,Y) function returns a string formed by removing any and all characters
    that appear in Y from both ends of X. If the Y argument is omitted, trim(X) removes
    spaces from both ends of X.
  prefs: []
  type: TYPE_NORMAL
- en: '**typeof(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The typeof(X) function returns a string that indicates the [datatype](datatype3.html)
    of the expression X: "null", "integer", "real", "text", or "blob".'
  prefs: []
  type: TYPE_NORMAL
- en: '**unhex(*X*)'
  prefs: []
  type: TYPE_NORMAL
- en: unhex(*X*,*Y*)**
  prefs: []
  type: TYPE_NORMAL
- en: The unhex(X,Y) function returns a BLOB value which is the decoding of the hexadecimal
    string X. If X contains any characters that are not hexadecimal digits and which
    are not in Y, then unhex(X,Y) returns NULL. If Y is omitted, it is understood
    to be an empty string and hence X must be a pure hexadecimal string. All hexadecimal
    digits in X must occur in pairs, with both digits of each pair beginning immediately
    adjacent to one another, or else unhex(X,Y) returns NULL. If either parameter
    X or Y is NULL, then unhex(X,Y) returns NULL. The X input may contain an arbitrary
    mix of upper and lower case hexadecimal digits. Hexadecimal digits in Y have no
    affect on the translation of X. Only characters in Y that are not hexadecimal
    digits are ignored in X.
  prefs: []
  type: TYPE_NORMAL
- en: 'See also: [hex()](lang_corefunc.html#hex)'
  prefs: []
  type: TYPE_NORMAL
- en: '**unicode(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The unicode(X) function returns the numeric unicode code point corresponding
    to the first character of the string X. If the argument to unicode(X) is not a
    string then the result is undefined.
  prefs: []
  type: TYPE_NORMAL
- en: '**unlikely(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The unlikely(X) function returns the argument X unchanged. The unlikely(X) function
    is a no-op that the code generator optimizes away so that it consumes no CPU cycles
    at run-time (that is, during calls to [sqlite3_step()](c3ref/step.html)). The
    purpose of the unlikely(X) function is to provide a hint to the query planner
    that the argument X is a boolean value that is usually not true. The unlikely(X)
    function is equivalent to [likelihood](lang_corefunc.html#likelihood)(X, 0.0625).
  prefs: []
  type: TYPE_NORMAL
- en: '**upper(*X*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The upper(X) function returns a copy of input string X in which all lower-case
    ASCII characters are converted to their upper-case equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: '**zeroblob(*N*)**'
  prefs: []
  type: TYPE_NORMAL
- en: The zeroblob(N) function returns a BLOB consisting of N bytes of 0x00. SQLite
    manages these zeroblobs very efficiently. Zeroblobs can be used to reserve space
    for a BLOB that is later written using [incremental BLOB I/O](c3ref/blob_open.html).
    This SQL function is implemented using the [sqlite3_result_zeroblob()](c3ref/result_blob.html)
    routine from the C/C++ interface.
  prefs: []
  type: TYPE_NORMAL
