["```sql\n$ sqlite3 ex1\nSQLite version 3.36.0 2021-06-18 18:36:39\nEnter \".help\" for usage hints.\nsqlite> create table tbl1(one text, two int);\nsqlite> insert into tbl1 values('hello!',10);\nsqlite> insert into tbl1 values('goodbye', 20);\nsqlite> select * from tbl1;\nhello!|10\ngoodbye|20\nsqlite>\n\n```", "```sql\nsqlite> CREATE TABLE tbl2 (\n   ...>   f1 varchar(30) primary key,\n   ...>   f2 text,\n   ...>   f3 real\n   ...> );\nsqlite>\n\n```", "```sql\nSQLite version 3.36.0 2021-06-18 18:36:39\nEnter \".help\" for usage hints.\nConnected to a transient in-memory database.\nUse \".open FILENAME\" to reopen on a persistent database.\nsqlite> .open ex1.db\nsqlite>\n\n```", "```sql\nSQLite version 3.36.0 2021-06-18 18:36:39\nEnter \".help\" for usage hints.\nConnected to a transient in-memory database.\nUse \".open FILENAME\" to reopen on a persistent database.\nsqlite> *... many SQL commands omitted ...*\nsqlite> .save ex1.db\nsqlite>\n\n```", "```sql\nsqlite> .help\n.archive ...             Manage SQL archives\n.auth ON|OFF             Show authorizer callbacks\n.backup ?DB? FILE        Backup DB (default \"main\") to FILE\n.bail on|off             Stop after hitting an error.  Default OFF\n.cd DIRECTORY            Change the working directory to DIRECTORY\n.changes on|off          Show number of rows changed by SQL\n.check GLOB              Fail if output since .testcase does not match\n.clone NEWDB             Clone data into NEWDB from the existing database\n.connection [close] [#]  Open or close an auxiliary database connection\n.crnl on|off             Translate \\n to \\r\\n.  Default ON\n.databases               List names and files of attached databases\n.dbconfig ?op? ?val?     List or change sqlite3_db_config() options\n.dbinfo ?DB?             Show status information about the database\n.dump ?OBJECTS?          Render database content as SQL\n.echo on|off             Turn command echo on or off\n.eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN\n.excel                   Display the output of next command in spreadsheet\n.exit ?CODE?             Exit this program with return-code CODE\n.expert                  EXPERIMENTAL. Suggest indexes for queries\n.explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto\n.filectrl CMD ...        Run various sqlite3_file_control() operations\n.fullschema ?--indent?   Show schema and the content of sqlite_stat tables\n.headers on|off          Turn display of headers on or off\n.help ?-all? ?PATTERN?   Show help text for PATTERN\n.import FILE TABLE       Import data from FILE into TABLE\n.indexes ?TABLE?         Show names of indexes\n.limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT\n.lint OPTIONS            Report potential schema issues.\n.load FILE ?ENTRY?       Load an extension library\n.log FILE|on|off         Turn logging on or off.  FILE can be stderr/stdout\n.mode MODE ?OPTIONS?     Set output mode\n.nonce STRING            Suspend safe mode for one command if nonce matches\n.nullvalue STRING        Use STRING in place of NULL values\n.once ?OPTIONS? ?FILE?   Output for the next SQL command only to FILE\n.open ?OPTIONS? ?FILE?   Close existing database and reopen FILE\n.output ?FILE?           Send output to FILE or stdout if FILE is omitted\n.parameter CMD ...       Manage SQL parameter bindings\n.print STRING...         Print literal STRING\n.progress N              Invoke progress handler after every N opcodes\n.prompt MAIN CONTINUE    Replace the standard prompts\n.quit                    Stop interpreting input stream, exit if primary.\n.read FILE               Read input from FILE or command output\n.recover                 Recover as much data as possible from corrupt db.\n.restore ?DB? FILE       Restore content of DB (default \"main\") from FILE\n.save ?OPTIONS? FILE     Write database to FILE (an alias for .backup ...)\n.scanstats on|off|est    Turn sqlite3_stmt_scanstatus() metrics on or off\n.schema ?PATTERN?        Show the CREATE statements matching PATTERN\n.separator COL ?ROW?     Change the column and row separators\n.session ?NAME? CMD ...  Create or control sessions\n.sha3sum ...             Compute a SHA3 hash of database content\n.shell CMD ARGS...       Run CMD ARGS... in a system shell\n.show                    Show the current values for various settings\n.stats ?ARG?             Show stats or turn stats on or off\n.system CMD ARGS...      Run CMD ARGS... in a system shell\n.tables ?TABLE?          List names of tables matching LIKE pattern TABLE\n.timeout MS              Try opening locked tables for MS milliseconds\n.timer on|off            Turn SQL timer on or off\n.trace ?OPTIONS?         Output each SQL statement as it is run\n.version                 Show source, library and compiler versions\n.vfsinfo ?AUX?           Information about the top-level VFS\n.vfslist                 List all available VFSes\n.vfsname ?AUX?           Print the name of the VFS stack\n.width NUM1 NUM2 ...     Set minimum column widths for columnar output\nsqlite>\n\n```", "```sql\nsqlite> .mode list\nsqlite> select * from tbl1;\nhello!|10\ngoodbye|20\nsqlite>\n\n```", "```sql\nsqlite> .mode\ncurrent output mode: list\nsqlite>\n\n```", "```sql\nsqlite> .separator \", \"\nsqlite> select * from tbl1;\nhello!, 10\ngoodbye, 20\nsqlite>\n\n```", "```sql\nsqlite> .mode quote\nsqlite> select * from tbl1;\n'hello!',10\n'goodbye',20\nsqlite>\n\n```", "```sql\nsqlite> .mode line\nsqlite> select * from tbl1;\none = hello!\ntwo = 10\n\none = goodbye\ntwo = 20\nsqlite>\n\n```", "```sql\nsqlite> .mode column\nsqlite> select * from tbl1;\none       two\n--------  ---\nhello!    10\ngoodbye   20\nsqlite>\n\n```", "```sql\nsqlite> .width 12 -6\nsqlite> select * from tbl1;\none              two\n------------  ------\nhello!            10\ngoodbye           20\nsqlite>\n\n```", "```sql\nsqlite> .width\nsqlite> .mode markdown\nsqlite> select * from tbl1;\n|   one   | two |\n|---------|-----|\n| hello!  | 10  |\n| goodbye | 20  |\nsqlite> .mode table\nsqlite> select * from tbl1;\n+---------+-----+\n|   one   | two |\n+---------+-----+\n| hello!  | 10  |\n| goodbye | 20  |\n+---------+-----+\nsqlite> .mode box\nsqlite> select * from tbl1;\n┌─────────┬─────┐\n│   one   │ two │\n├─────────┼─────┤\n│ hello!  │ 10  │\n│ goodbye │ 20  │\n└─────────┴─────┘\nsqlite>\n\n```", "```sql\nsqlite> insert into tbl1 values('The quick fox jumps over a lazy brown dog.',90);\nsqlite> .mode box --wrap 30\nsqlite> select * from tbl1 where two>50;\n┌────────────────────────────────┬─────┐\n│              one               │ two │\n├────────────────────────────────┼─────┤\n│ The quick fox jumps over a laz │ 90  │\n│ y brown dog.                   │     │\n└────────────────────────────────┴─────┘\nsqlite>\n\n```", "```sql\nsqlite> .mode box --wrap 30 -ww\nsqlite> select * from tbl1 where two>50;\n┌─────────────────────────────┬─────┐\n│             one             │ two │\n├─────────────────────────────┼─────┤\n│ The quick fox jumps over a  │ 90  │\n│ lazy brown dog.             │     │\n└─────────────────────────────┴─────┘\nsqlite>\n\n```", "```sql\nsqlite> .mode insert new_table\nsqlite> select * from tbl1 where two<50;\nINSERT INTO \"new_table\" VALUES('hello',10);\nINSERT INTO \"new_table\" VALUES('goodbye',20);\nsqlite>\n\n```", "```sql\nsqlite> .tables\ntbl1 tbl2\nsqlite>\n\n```", "```sql\nSELECT name FROM sqlite_schema\nWHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'\nORDER BY 1\n\n```", "```sql\nsqlite> .schema\ncreate table tbl1(one varchar(10), two smallint)\nCREATE TABLE tbl2 (\n  f1 varchar(30) primary key,\n  f2 text,\n  f3 real\n);\nsqlite> .schema tbl2\nCREATE TABLE tbl2 (\n  f1 varchar(30) primary key,\n  f2 text,\n  f3 real\n);\nsqlite>\n\n```", "```sql\nSELECT sql FROM sqlite_schema\nORDER BY tbl_name, type DESC, name\n\n```", "```sql\nsqlite> .schema main.*\n\n```", "```sql\nsqlite> .databases\n\n```", "```sql\nsqlite> .mode list\nsqlite> .separator |\nsqlite> .output test_file_1.txt\nsqlite> select * from tbl1;\nsqlite> .exit\n$ cat test_file_1.txt\nhello|10\ngoodbye|20\n$\n\n```", "```sql\nsqlite> .once | open -f\nsqlite> SELECT * FROM bigTable;\n\n```", "```sql\nsqlite> .once -x\nsqlite> SELECT * FROM bigTable;\n\n```", "```sql\nsqlite> .read myscript.sql\n\n```", "```sql\nsqlite> .read |myscript.bat\n\n```", "```sql\nsqlite> CREATE TABLE images(name TEXT, type TEXT, img BLOB);\nsqlite> INSERT INTO images(name,type,img)\n   ...>   VALUES('icon','jpeg',readfile('icon.jpg'));\n\n```", "```sql\nsqlite> SELECT writefile('icon.jpg',img) FROM images WHERE name='icon';\n\n```", "```sql\nsqlite> UPDATE docs SET body=edit(body) WHERE name='report-15';\n\n```", "```sql\nsqlite> UPDATE pics SET img=edit(img,'gimp') WHERE id='pic-1542';\n\n```", "```sql\nsqlite> SELECT length(edit(img,'gimp')) WHERE id='pic-1542';\n\n```", "```sql\nsqlite> .import --csv --skip 1 --schema temp C:/work/somedata.csv tab1\n\n```", "```sql\nsqlite> .headers on\nsqlite> .mode csv\nsqlite> .once c:/work/dataout.csv\nsqlite> SELECT * FROM tab1;\nsqlite> .system c:/work/dataout.csv\n\n```", "```sql\nsqlite> .system open dataout.csv\n\n```", "```sql\nsqlite> .system xdg-open dataout.csv\n\n```", "```sql\nsqlite> .excel\nsqlite> SELECT * FROM tab;\n\n```", "```sql\nCREATE TABLE zip(\n  name,     // Name of the file\n  mode,     // Unix-style file permissions\n  mtime,    // Timestamp, seconds since 1970\n  sz,       // File size after decompression\n  rawdata,  // Raw compressed file data\n  data,     // Uncompressed file content\n  method    // ZIP compression method code\n);\n\n```", "```sql\nsqlite> SELECT name, (100.0*length(rawdata))/sz FROM zip ORDER BY 2;\n\n```", "```sql\nsqlite> SELECT writefile(name,content) FROM zip\n   ...> WHERE name LIKE 'docProps/%';\n\n```", "```sql\nsqlite> .schema\nCREATE VIRTUAL TABLE zip USING zipfile('document.docx')\n/* zip(name,mode,mtime,sz,rawdata,data,method) */;\n\n```", "```sql\n$ sqlite3 ex1 .dump | gzip -c >ex1.dump.gz\n\n```", "```sql\n$ zcat ex1.dump.gz | sqlite3 ex2\n\n```", "```sql\n$ createdb ex2\n$ sqlite3 ex1 .dump | psql ex2\n\n```", "```sql\nCREATE TABLE lost_and_found(\n    rootpgno INTEGER,             -- root page of tree pgno is a part of\n    pgno INTEGER,                 -- page number row was found on\n    nfield INTEGER,               -- number of fields in row\n    id INTEGER,                   -- value of rowid field, or NULL\n    c0, c1, c2, c3...             -- columns for fields of row\n);\n\n```", "```sql\nsqlite> .recover --lost-and-found orphaned_rows\n\n```", "```sql\nsqlite> .load /path/to/my_extension\n\n```", "```sql\nCREATE TABLE selftest(\n  tno INTEGER PRIMARY KEY,  -- Test number\n  op TEXT,                  -- 'run' or 'memo'\n  cmd TEXT,                 -- SQL command to run, or text of \"memo\"\n  ans TEXT                  -- Expected result of the SQL command\n);\n\n```", "```sql\nsqlite3 new_archive.db -Acv file1 file2 file3\nsqlite3 new_archive.db \".ar -cv file1 file2 file3\"\n\n```", "```sql\n*-- Two ways to create a new archive named \"new_archive.db\" containing*\n*-- files \"file1\", \"file2\" and \"file3\".*\n.ar -c --file new_archive.db file1 file2 file3\n.ar -f new_archive.db --create file1 file2 file3\n\n```", "```sql\n*-- Create a new archive \"new_archive.db\" containing files \"file1\" and*\n*-- \"file2\" from directory \"dir1\".*\n.ar cCf dir1 new_archive.db file1 file2 file3\n\n```", "```sql\n*-- Extract all files from the archive in the current \"main\" db to the*\n*-- current working directory. List files as they are extracted.* \n.ar --extract --verbose\n\n*-- Extract file \"file1\" from archive \"ar.db\" to directory \"dir1\".*\n.ar fCx ar.db dir1 file1\n\n*-- Extract files with \".h\" extension to directory \"headers\".*\n.ar -gCx headers *.h\n\n```", "```sql\n*-- List contents of archive in current \"main\" db.*.\n.ar --list\n\n```", "```sql\nCREATE TEMP TABLE sqlite_parameters(\n  key TEXT PRIMARY KEY,\n  value\n) WITHOUT ROWID;\n\n```", "```sql\n.parameter init\n.parameter set @phoneNumber \"'202-456-1111'\"\n\n```", "```sql\nsqlite> CREATE TABLE x1(a, b, c);                  *-- Create table in database* \nsqlite> .expert\nsqlite> SELECT * FROM x1 WHERE a=? AND b>?;        *-- Analyze this SELECT* \nCREATE INDEX x1_idx_000123a7 ON x1(a, b);\n\n0|0|0|SEARCH TABLE x1 USING INDEX x1_idx_000123a7 (a=? AND b>?)\n\nsqlite> CREATE INDEX x1ab ON x1(a, b);             *-- Create the recommended index* \nsqlite> .expert\nsqlite> SELECT * FROM x1 WHERE a=? AND b>?;        *-- Re-analyze the same SELECT* \n(no new indexes)\n\n0|0|0|SEARCH TABLE x1 USING INDEX x1ab (a=? AND b>?)\n\n```", "```sql\n$ sqlite3 ex1 'select * from tbl1' \\\n>  | awk '{printf \"<tr><td>%s<td>%s\\n\",$1,$2 }'\n<tr><td>hello<td>10\n<tr><td>goodbye<td>20\n$\n\n```", "```sql\n$ sqlite3 --help\nUsage: ./sqlite3 [OPTIONS] FILENAME [SQL]\nFILENAME is the name of an SQLite database. A new database is created\nif the file does not previously exist. Defaults to :memory:.\nOPTIONS include:\n   --                   treat no subsequent arguments as options\n   -A ARGS...           run \".archive ARGS\" and exit\n   -append              append the database to the end of the file\n   -ascii               set output mode to 'ascii'\n   -bail                stop after hitting an error\n   -batch               force batch I/O\n   -box                 set output mode to 'box'\n   -column              set output mode to 'column'\n   -cmd COMMAND         run \"COMMAND\" before reading stdin\n   -csv                 set output mode to 'csv'\n   -deserialize         open the database using sqlite3_deserialize()\n   -echo                print inputs before execution\n   -init FILENAME       read/process named file\n   -[no]header          turn headers on or off\n   -help                show this message\n   -html                set output mode to HTML\n   -interactive         force interactive I/O\n   -json                set output mode to 'json'\n   -line                set output mode to 'line'\n   -list                set output mode to 'list'\n   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory\n   -markdown            set output mode to 'markdown'\n   -maxsize N           maximum size for a --deserialize database\n   -memtrace            trace all memory allocations and deallocations\n   -mmap N              default mmap size set to N\n   -newline SEP         set output row separator. Default: '\\n'\n   -nofollow            refuse to open symbolic links to database files\n   -nonce STRING        set the safe-mode escape nonce\n   -nullvalue TEXT      set text string for NULL values. Default ''\n   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory\n   -pcachetrace         trace all page cache operations\n   -quote               set output mode to 'quote'\n   -readonly            open the database read-only\n   -safe                enable safe-mode\n   -separator SEP       set output column separator. Default: '|'\n   -stats               print memory stats before each finalize\n   -table               set output mode to 'table'\n   -tabs                set output mode to 'tabs'\n   -unsafe-testing      allow unsafe commands and modes for testing\n   -version             show SQLite version\n   -vfs NAME            use NAME as the default VFS\n   -zip                 open the file as a ZIP Archive\n\n```", "```sql\nsh configure; make\n\n```", "```sql\nnmake /f Makefile.msc\n\n```", "```sql\nnmake /f Makefile.msc USE_ZLIB=1\n\n```", "```sql\ngcc -o sqlite3 shell.c sqlite3.c -ldl -lpthread -lz -lm\n\n```"]