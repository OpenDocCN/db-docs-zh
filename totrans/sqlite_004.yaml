- en: Distinctive Features Of SQLite
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite 的显著特点
- en: 原文：[https://sqlite.com/different.html](https://sqlite.com/different.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://sqlite.com/different.html](https://sqlite.com/different.html)
- en: This page highlights some of the characteristics of SQLite that are unusual
    and which make SQLite different from many other SQL database engines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本页面突出了 SQLite 的一些特性，这些特性不同寻常，使得 SQLite 与许多其他 SQL 数据库引擎不同。
- en: '**Zero-Configuration**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**零配置**'
- en: SQLite does not need to be "installed" before it is used. There is no "setup"
    procedure. There is no server process that needs to be started, stopped, or configured.
    There is no need for an administrator to create a new database instance or assign
    access permissions to users. SQLite uses no configuration files. Nothing needs
    to be done to tell the system that SQLite is running. No actions are required
    to recover after a system crash or power failure. There is nothing to troubleshoot.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite 在使用前不需要进行“安装”。没有“设置”过程。没有需要启动、停止或配置的服务器进程。没有需要管理员创建新数据库实例或为用户分配访问权限的需要。SQLite
    不使用配置文件。系统无需进行任何操作来表明 SQLite 正在运行。在系统崩溃或停电后也无需进行任何恢复操作。没有需要排除故障的内容。
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SQLite just works.
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite 就是这么简单。
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Other more familiar database engines run great once you get them going. But
    doing the initial installation and configuration can be intimidatingly complex.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其他更为熟悉的数据库引擎一旦启动运行起来效果很好。但是进行初始安装和配置可能会非常复杂令人生畏。
- en: '**Serverless**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**无服务器**'
- en: '*(See also the [serverless](serverless.html) documentation page.)*'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*(另请参阅 [无服务器](serverless.html) 文档页面。)*'
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Most SQL database engines are implemented as a separate server process. Programs
    that want to access the database communicate with the server using some kind of
    interprocess communication (typically TCP/IP) to send requests to the server and
    to receive back results. SQLite does not work this way. With SQLite, the process
    that wants to access the database reads and writes directly from the database
    files on disk. There is no intermediary server process.
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大多数 SQL 数据库引擎都实现为单独的服务器进程。想要访问数据库的程序使用某种进程间通信（通常是 TCP/IP）与服务器通信，发送请求并接收结果。SQLite
    不是这样工作的。使用 SQLite，想要访问数据库的进程直接从磁盘上的数据库文件读取和写入。没有中间的服务器进程。
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are advantages and disadvantages to being serverless. The main advantage
    is that there is no separate server process to install, setup, configure, initialize,
    manage, and troubleshoot. This is one reason why SQLite is a "zero-configuration"
    database engine. Programs that use SQLite require no administrative support for
    setting up the database engine before they are run. Any program that is able to
    access the disk is able to use an SQLite database.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 无服务器有其优缺点。主要优点是无需安装、设置、配置、初始化、管理和排除故障单独的服务器进程。这也是 SQLite 被称为“零配置”数据库引擎的原因之一。使用
    SQLite 的程序在运行之前不需要任何管理员支持来设置数据库引擎。只要能访问磁盘的程序就能使用 SQLite 数据库。
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: On the other hand, a database engine that uses a server can provide better protection
    from bugs in the client application - stray pointers in a client cannot corrupt
    memory on the server. And because a server is a single persistent process, it
    is able control database access with more precision, allowing for finer grain
    locking and better concurrency.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另一方面，使用服务器的数据库引擎能更好地防止客户端应用程序中的错误 - 客户端中的杂乱指针无法破坏服务器上的内存。而且因为服务器是单一持久进程，能够更精确地控制数据库访问，实现更细粒度的锁定和更好的并发性。
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Most SQL database engines are client/server based. Of those that are serverless,
    SQLite is the only one that this author knows of that allows multiple applications
    to access the same database at the same time.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大多数 SQL 数据库引擎是基于客户端/服务器的。在那些无服务器的数据库引擎中，SQLite 是唯一一个允许多个应用程序同时访问同一数据库的引擎（据本文作者所知）。
- en: '**Single Database File**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**单一数据库文件**'
- en: An SQLite database is a single ordinary disk file that can be located anywhere
    in the directory hierarchy. If SQLite can read the disk file then it can read
    anything in the database. If the disk file and its directory are writable, then
    SQLite can change anything in the database. Database files can easily be copied
    onto a USB memory stick or emailed for sharing.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite 数据库是一个普通的单个磁盘文件，可以位于目录层次结构中的任何位置。如果 SQLite 能够读取磁盘文件，则可以读取数据库中的任何内容。如果磁盘文件及其目录具有可写权限，则
    SQLite 可以更改数据库中的任何内容。数据库文件可以轻松复制到 USB 存储设备或通过电子邮件进行共享。
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Other SQL database engines tend to store data as a large collection of files.
    Often these files are in a standard location that only the database engine itself
    can access. This makes the data more secure, but also makes it harder to access.
    Some SQL database engines provide the option of writing directly to disk and bypassing
    the filesystem altogether. This provides added performance, but at the cost of
    considerable setup and maintenance complexity.
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其他 SQL 数据库引擎往往将数据存储为大量文件的集合。这些文件通常位于只有数据库引擎本身可以访问的标准位置。这使得数据更安全，但也使得访问变得更困难。一些
    SQL 数据库引擎提供直接写入磁盘并绕过文件系统的选项。这提供了额外的性能，但增加了相当复杂的设置和维护工作。
- en: '**Stable Cross-Platform Database File**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**稳定的跨平台数据库文件**'
- en: The SQLite file format is cross-platform. A database file written on one machine
    can be copied to and used on a different machine with a different architecture.
    Big-endian or little-endian, 32-bit or 64-bit does not matter. All machines use
    the same file format. Furthermore, the developers have pledged to keep the file
    format stable and backwards compatible, so newer versions of SQLite can read and
    write older database files.
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite 文件格式是跨平台的。在一台机器上写入的数据库文件可以复制到另一台架构不同的机器上并使用。大小端、32位或64位都不重要。所有机器使用相同的文件格式。此外，开发人员承诺保持文件格式的稳定性和向后兼容性，因此新版本的
    SQLite 可以读取和写入旧的数据库文件。
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Most other SQL database engines require you to dump and restore the database
    when moving from one platform to another and often when upgrading to a newer version
    of the software.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大多数其他 SQL 数据库引擎在从一个平台移动到另一个平台时，以及经常在升级软件到新版本时，都需要您备份和恢复数据库。
- en: '**Compact**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**紧凑**'
- en: When optimized for size, the whole SQLite library with everything enabled is
    [less than 1MiB in size](footprint.html) (as measured on an ix86 using the "size"
    utility from the GNU compiler suite.) Unneeded features can be disabled at compile-time
    to further reduce the size of the library even further.
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当优化大小时，整个启用了所有功能的 SQLite 库的大小 [不到 1MiB](footprint.html)（在 ix86 上使用 GNU 编译套件的
    "size" 实用程序进行测量）。可以在编译时禁用不需要的功能，以进一步减小库的大小。
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Most other SQL database engines are much larger than this. IBM boasts that its
    recently released CloudScape database engine is "only" a 2MiB jar file - an order
    of magnitude larger than SQLite even after it is compressed! Firebird boasts that
    its client-side library is only 350KiB. That's as big as SQLite and does not even
    contain the database engine. The Berkeley DB library from Oracle is 450KiB and
    it omits SQL support, providing the programmer with only simple key/value pairs.
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大多数其他 SQL 数据库引擎比这个要大得多。IBM 自豪地宣称，其最近发布的 CloudScape 数据库引擎仅为 2MiB 的 jar 文件——比
    SQLite 压缩后还大一个数量级！Firebird 自称其客户端库只有 350KiB，和 SQLite 一样大，甚至不包含数据库引擎。Oracle 的 Berkeley
    DB 库为 450KiB，省略了 SQL 支持，仅提供程序员简单的键值对。
- en: '**Manifest typing**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**显式类型**'
- en: 'Most SQL database engines use static typing. A datatype is associated with
    each column in a table and only values of that particular datatype are allowed
    to be stored in that column. SQLite relaxes this restriction by using manifest
    typing. In manifest typing, the datatype is a property of the value itself, not
    of the column in which the value is stored. SQLite thus allows the user to store
    any value of any datatype into any column regardless of the declared type of that
    column. (There are some exceptions to this rule: An INTEGER PRIMARY KEY column
    may only store integers. And SQLite attempts to coerce values into the declared
    datatype of the column when it can.)'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大多数 SQL 数据库引擎使用静态类型。每个表列都关联有一个数据类型，只允许存储该特定数据类型的值在列中。SQLite 通过使用显式类型（manifest
    typing）放宽了这一限制。在显式类型中，数据类型是值本身的属性，而不是存储值的列的属性。因此，SQLite 允许用户将任何数据类型的任何值存储到任何列中，而不管该列的声明类型是什么（当然，也有一些例外：INTEGER
    PRIMARY KEY 列只能存储整数，并且 SQLite 会在可能时尝试将值强制转换为列的声明数据类型）。
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As far as we can tell, the SQL language specification allows the use of manifest
    typing. Nevertheless, most other SQL database engines are statically typed and
    so some people feel that the use of manifest typing is a bug in SQLite. But the
    authors of SQLite feel very strongly that this is a feature. The use of manifest
    typing in SQLite is a deliberate design decision which has proven in practice
    to make SQLite more reliable and easier to use, especially when used in combination
    with dynamically typed programming languages such as Tcl and Python.
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 据我们所知，SQL 语言规范允许使用显式类型。尽管如此，大多数其他 SQL 数据库引擎是静态类型的，因此一些人认为在 SQLite 中使用显式类型是一个错误。但
    SQLite 的作者们非常坚信这是一个特性。SQLite 中使用显式类型是一个经过深思熟虑的设计决策，在实践中已被证明使 SQLite 更可靠、更易于使用，特别是在与动态类型编程语言（如
    Tcl 和 Python）结合使用时。
- en: '**Variable-length records**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**可变长度记录**'
- en: Most other SQL database engines allocated a fixed amount of disk space for each
    row in most tables. They play special tricks for handling BLOBs and CLOBs which
    can be of wildly varying length. But for most tables, if you declare a column
    to be a VARCHAR(100) then the database engine will allocate 100 bytes of disk
    space regardless of how much information you actually store in that column.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大多数其他 SQL 数据库引擎为大多数表中的每一行分配固定大小的磁盘空间。它们会使用特殊技巧来处理可以变化得非常大的 BLOBs 和 CLOBs。但对于大多数表来说，如果您声明一个列为
    VARCHAR(100)，则无论您实际存储多少信息，数据库引擎都会分配 100 字节的磁盘空间。
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SQLite, in contrast, use only the amount of disk space actually needed to store
    the information in a row. If you store a single character in a VARCHAR(100) column,
    then only a single byte of disk space is consumed. (Actually two bytes - there
    is some overhead at the beginning of each column to record its datatype and length.)
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 相比之下，SQLite 仅使用实际需要的磁盘空间来存储一行中的信息。如果在 VARCHAR(100) 列中存储单个字符，则只消耗一个字节的磁盘空间。（实际上是两个字节
    - 每个列开头都有一些开销来记录其数据类型和长度。）
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The use of variable-length records by SQLite has a number of advantages. It
    results in smaller database files, obviously. It also makes the database run faster,
    since there is less information to move to and from disk. And, the use of variable-length
    records makes it possible for SQLite to employ manifest typing instead of static
    typing.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite 使用可变长度记录具有多个优势。显而易见地，它导致更小的数据库文件。它还使数据库运行更快，因为需要在磁盘之间移动的信息更少。并且，使用可变长度记录使
    SQLite 能够使用显式类型而非静态类型。
- en: '**Readable source code**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**可读的源代码**'
- en: The source code to SQLite is designed to be readable and accessible to the average
    programmer. All procedures and data structures and many automatic variables are
    carefully commented with useful information about what they do. Boilerplate commenting
    is omitted.
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite 的源代码设计为可读且对普通程序员易于访问。所有过程和数据结构以及许多自动变量都被仔细注释，提供有关它们功能的有用信息。没有样板式的注释。
- en: '**SQL statements compile into virtual machine code**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL 语句编译为虚拟机代码**'
- en: Every SQL database engine compiles each SQL statement into some kind of internal
    data structure which is then used to carry out the work of the statement. But
    in most SQL engines that internal data structure is a complex web of interlinked
    structures and objects. In SQLite, the compiled form of statements is a short
    program in a machine-language like representation. Users of the database can view
    this [virtual machine language](opcode.html) by prepending the [EXPLAIN](lang_explain.html)
    keyword to a query.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个 SQL 数据库引擎将每个 SQL 语句编译成某种内部数据结构，然后使用该结构执行语句的工作。但在大多数 SQL 引擎中，这种内部数据结构是一组复杂相互关联的结构和对象。在
    SQLite 中，语句的编译形式是类似机器语言的短程序。数据库的用户可以通过在查询前加上 [EXPLAIN](lang_explain.html) 关键字来查看这种
    [虚拟机语言](opcode.html)。
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The use of a virtual machine in SQLite has been a great benefit to the library's
    development. The virtual machine provides a crisp, well-defined junction between
    the front-end of SQLite (the part that parses SQL statements and generates virtual
    machine code) and the back-end (the part that executes the virtual machine code
    and computes a result.) The virtual machine allows the developers to see clearly
    and in an easily readable form what SQLite is trying to do with each statement
    it compiles, which is a tremendous help in debugging. Depending on how it is compiled,
    SQLite also has the capability of tracing the execution of the virtual machine
    - printing each virtual machine instruction and its result as it executes.
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在SQLite中使用虚拟机对库的发展有很大好处。虚拟机提供了SQLite前端（解析SQL语句并生成虚拟机代码的部分）和后端（执行虚拟机代码并计算结果的部分）之间清晰、定义良好的连接。虚拟机使开发人员能够清晰地看到SQLite在编译每个语句时试图做什么，这对于调试非常有帮助。根据编译方式的不同，SQLite还具有追踪虚拟机执行的能力——在执行时打印每个虚拟机指令及其结果。
- en: '**Public domain**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**公共领域**'
- en: The source code for SQLite is in the public domain. No claim of copyright is
    made on any part of the core source code. (The documentation and test code is
    a different matter - some sections of documentation and test logic are governed
    by open-source licenses.) All contributors to the SQLite core software have signed
    affidavits specifically disavowing any copyright interest in the code. This means
    that anybody is able to legally do anything they want with the SQLite source code.
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite的源代码属于公共领域。对核心源代码的任何部分都不声称版权。 （文档和测试代码则是另一回事——部分文档和测试逻辑受开源许可控制。）SQLite核心软件的所有贡献者都签署了书面声明，明确放弃对代码的任何版权利益。这意味着任何人都可以合法地对SQLite源代码做任何他们想做的事情。
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are other SQL database engines with liberal licenses that allow the code
    to be broadly and freely used. But those other engines are still governed by copyright
    law. SQLite is different in that copyright law simply does not apply.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还有其他具有宽松许可证的SQL数据库引擎，允许广泛和自由使用代码。但这些其他引擎仍受版权法管辖。SQLite与众不同之处在于，版权法根本不适用。
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The source code files for other SQL database engines typically begin with a
    comment describing your legal rights to view and copy that file. The SQLite source
    code contains no license since it is not governed by copyright. Instead of a license,
    the SQLite source code offers a blessing:'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其他SQL数据库引擎的源代码文件通常以注释开始，描述您查看和复制该文件的法律权利。SQLite的源代码不包含许可，因为它不受版权管制。SQLite源代码没有许可证，而是提供了一种祝福：
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*May you do good and not evil'
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*愿您行善而非恶*'
- en: May you find forgiveness for yourself and forgive others
  id: totrans-55
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 愿您能够原谅自己并宽恕他人
- en: May you share freely, never taking more than you give.*
  id: totrans-56
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 愿您自由分享，从不索取比给予更多。*
- en: '**SQL language extensions**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL语言扩展**'
- en: SQLite provides a number of enhancements to the SQL language not normally found
    in other database engines. The EXPLAIN keyword and manifest typing have already
    been mentioned above. SQLite also provides statements such as [REPLACE](lang_replace.html)
    and the [ON CONFLICT](lang_conflict.html) clause that allow for added control
    over the resolution of constraint conflicts. SQLite supports [ATTACH](lang_attach.html)
    and [DETACH](lang_detach.html) commands that allow multiple independent databases
    to be used together in the same query. And SQLite defines APIs which allow the
    user to add new [SQL functions](c3ref/create_function.html) and [collating sequences](c3ref/create_collation.html).
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SQLite提供了许多SQL语言的增强功能，在其他数据库引擎中通常找不到。已经提到了EXPLAIN关键字和显式类型转换。SQLite还提供了诸如[REPLACE](lang_replace.html)和[ON
    CONFLICT](lang_conflict.html)子句等语句，允许对约束冲突的解决增加控制。SQLite支持[ATTACH](lang_attach.html)和[DETACH](lang_detach.html)命令，允许在同一查询中使用多个独立数据库。SQLite还定义了API，允许用户添加新的[SQL函数](c3ref/create_function.html)和[排序序列](c3ref/create_collation.html)。
